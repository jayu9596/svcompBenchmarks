var $M.0: [ref]i8;

var $M.1: i32;

var $M.2: i32;

var $M.3: i32;

var $M.4: [ref]i64;

var $M.6: [ref]i32;

var $M.7: [ref]i32;

var $M.8: [ref]ref;

var $M.9: [ref]ref;

var $M.10: [ref]i32;

var $M.11: [ref]i8;

var $M.12: [ref]i64;

var $M.13: [ref]i64;

var $M.14: [ref]i32;

var $M.15: [ref]i32;

var $M.21: [ref]i8;

var $M.22: [ref]i32;

var $M.23: i32;

var $M.24: [ref]i32;

var $M.25: [ref]i64;

var $M.26: [ref]i8;

var $M.27: [ref]i64;

var $M.28: [ref]i32;

var $M.29: [ref]i64;

var $M.30: [ref]i64;

var $M.31: i32;

var $M.32: [ref]i32;

var $M.33: [ref]i64;

var $M.34: [ref]ref;

var $M.35: [ref]ref;

var $M.36: [ref]i8;

var $M.37: [ref]ref;

var $M.38: ref;

var $M.39: [ref]i64;

var $M.40: [ref]ref;

var $M.41: [ref]i32;

var $M.42: ref;

var $M.43: ref;

var $M.44: ref;

var $M.45: ref;

var $M.46: ref;

var $M.47: ref;

var $M.48: ref;

var $M.49: ref;

var $M.50: ref;

var $M.51: ref;

var $M.52: i32;

var $M.53: i32;

var $M.54: [ref]i8;

var $M.55: i32;

var $M.56: i32;

var $M.57: i32;

var $M.58: i32;

var $M.59: [ref]i8;

var $M.60: [ref]i8;

var $M.61: i32;

var $M.62: ref;

var $M.63: ref;

var $M.64: i32;

var $M.65: i32;

var $M.66: i32;

var $M.67: ref;

var $M.68: ref;

var $M.69: i32;

var $M.70: i32;

var $M.71: ref;

var $M.72: ref;

var $M.73: ref;

var $M.74: ref;

var $M.75: ref;

var $M.76: ref;

var $M.77: ref;

var $M.78: i32;

var $M.79: i32;

var $M.80: i32;

var $M.81: i32;

var $M.82: [ref]i8;

var $M.83: i32;

var $M.84: i32;

var $M.85: i32;

var $M.86: i32;

var $M.87: i32;

var $M.88: i32;

var $M.89: i32;

var $M.90: i32;

var $M.91: i32;

var $M.92: i32;

var $M.93: i32;

var $M.94: i32;

var $M.108: [ref]i8;

var $M.109: [ref]i8;

var $M.113: [ref]i16;

var $M.127: [ref]i32;

var $M.128: [ref]i32;

var $M.133: [ref]i64;

var $M.134: [ref]i8;

var $M.135: [ref]i8;

var $M.136: [ref]i8;

var $M.137: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 652787);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 1028);

const pd_video_qops_group1: ref;

axiom pd_video_qops_group1 == $sub.ref(0, 2060);

const pd_video_qops_group2: ref;

axiom pd_video_qops_group2 == $sub.ref(0, 3092);

const pd_video_fops_group0: ref;

axiom pd_video_fops_group0 == $sub.ref(0, 4124);

const pd_video_ioctl_ops_group3: ref;

axiom pd_video_ioctl_ops_group3 == $sub.ref(0, 5156);

const pd_video_ioctl_ops_group2: ref;

axiom pd_video_ioctl_ops_group2 == $sub.ref(0, 6188);

const pd_video_ioctl_ops_group1: ref;

axiom pd_video_ioctl_ops_group1 == $sub.ref(0, 7220);

const pd_video_ioctl_ops_group0: ref;

axiom pd_video_ioctl_ops_group0 == $sub.ref(0, 8252);

const pd_video_ioctl_ops_group4: ref;

axiom pd_video_ioctl_ops_group4 == $sub.ref(0, 9284);

const pd_video_ioctl_ops_group5: ref;

axiom pd_video_ioctl_ops_group5 == $sub.ref(0, 10316);

const pd_video_ioctl_ops_group6: ref;

axiom pd_video_ioctl_ops_group6 == $sub.ref(0, 11348);

const ldv_state_variable_8: ref;

axiom ldv_state_variable_8 == $sub.ref(0, 12376);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 13404);

const ldv_state_variable_11: ref;

axiom ldv_state_variable_11 == $sub.ref(0, 14432);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 15460);

const ldv_state_variable_10: ref;

axiom ldv_state_variable_10 == $sub.ref(0, 16488);

const ldv_retval_9: ref;

axiom ldv_retval_9 == $sub.ref(0, 17516);

const ldv_state_variable_9: ref;

axiom ldv_state_variable_9 == $sub.ref(0, 18544);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 19572);

const usb_counter: ref;

axiom usb_counter == $sub.ref(0, 20600);

const debug_mode: ref;

axiom debug_mode == $sub.ref(0, 21628);

const pcm_capture_ops_group0: ref;

axiom pcm_capture_ops_group0 == $sub.ref(0, 22660);

const ldv_state_variable_7: ref;

axiom ldv_state_variable_7 == $sub.ref(0, 23688);

const ldv_retval_3: ref;

axiom ldv_retval_3 == $sub.ref(0, 24716);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 25744);

const poseidon_frontend_ops_group1: ref;

axiom poseidon_frontend_ops_group1 == $sub.ref(0, 26776);

const poseidon_frontend_ops_group0: ref;

axiom poseidon_frontend_ops_group0 == $sub.ref(0, 27808);

const ldv_state_variable_6: ref;

axiom ldv_state_variable_6 == $sub.ref(0, 28836);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 29864);

const poseidon_fm_ioctl_ops_group2: ref;

axiom poseidon_fm_ioctl_ops_group2 == $sub.ref(0, 30896);

const poseidon_fm_ioctl_ops_group1: ref;

axiom poseidon_fm_ioctl_ops_group1 == $sub.ref(0, 31928);

const poseidon_fm_ioctl_ops_group0: ref;

axiom poseidon_fm_ioctl_ops_group0 == $sub.ref(0, 32960);

const poseidon_fm_ioctl_ops_group4: ref;

axiom poseidon_fm_ioctl_ops_group4 == $sub.ref(0, 33992);

const poseidon_fm_ioctl_ops_group3: ref;

axiom poseidon_fm_ioctl_ops_group3 == $sub.ref(0, 35024);

const poseidon_fm_ioctl_ops_group5: ref;

axiom poseidon_fm_ioctl_ops_group5 == $sub.ref(0, 36056);

const poseidon_fm_fops_group0: ref;

axiom poseidon_fm_fops_group0 == $sub.ref(0, 37088);

const ldv_state_variable_4: ref;

axiom ldv_state_variable_4 == $sub.ref(0, 38116);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 39144);

const ldv_state_variable_5: ref;

axiom ldv_state_variable_5 == $sub.ref(0, 40172);

const ldv_retval_10: ref;

axiom ldv_retval_10 == $sub.ref(0, 41200);

const poseidon_driver_group1: ref;

axiom poseidon_driver_group1 == $sub.ref(0, 42232);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 43260);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 44288);

const ldv_retval_7: ref;

axiom ldv_retval_7 == $sub.ref(0, 45316);

const ldv_retval_6: ref;

axiom ldv_retval_6 == $sub.ref(0, 46344);

const ldv_retval_5: ref;

axiom ldv_retval_5 == $sub.ref(0, 47372);

const ldv_retval_4: ref;

axiom ldv_retval_4 == $sub.ref(0, 48400);

const ldv_retval_8: ref;

axiom ldv_retval_8 == $sub.ref(0, 49428);

const __mod_usb_device_table: ref;

axiom __mod_usb_device_table == $sub.ref(0, 50476);

const {:count 3} id_table: ref;

axiom id_table == $sub.ref(0, 51572);

const poseidon_driver: ref;

axiom poseidon_driver == $sub.ref(0, 52884);

const pm_notifer: ref;

axiom pm_notifer == $sub.ref(0, 53932);

const firmware_name: ref;

axiom firmware_name == $sub.ref(0, 54964);

const pd_device_list: ref;

axiom pd_device_list == $sub.ref(0, 56004);

const {:count 3} preemphasis: ref;

axiom preemphasis == $sub.ref(0, 57040);

const poseidon_fm_ioctl_ops: ref;

axiom poseidon_fm_ioctl_ops == $sub.ref(0, 58848);

const poseidon_fm_fops: ref;

axiom poseidon_fm_fops == $sub.ref(0, 59944);

const poseidon_fm_template: ref;

axiom poseidon_fm_template == $sub.ref(0, 62296);

const dvb_bandwidth_length: ref;

axiom dvb_bandwidth_length == $sub.ref(0, 63324);

const {:count 3} dvb_bandwidth: ref;

axiom dvb_bandwidth == $sub.ref(0, 64372);

const poseidon_frontend_ops: ref;

axiom poseidon_frontend_ops == $sub.ref(0, 66148);

const {:count 8} adapter_nr: ref;

axiom adapter_nr == $sub.ref(0, 67188);

const snd_pd_hw_capture: ref;

axiom snd_pd_hw_capture == $sub.ref(0, 68292);

const pcm_capture_ops: ref;

axiom pcm_capture_ops == $sub.ref(0, 69420);

const {:count 4} pd_inputs: ref;

axiom pd_inputs == $sub.ref(0, 70508);

const {:count 2} poseidon_formats: ref;

axiom poseidon_formats == $sub.ref(0, 71580);

const {:count 18} poseidon_tvnorms: ref;

axiom poseidon_tvnorms == $sub.ref(0, 73036);

const {:count 5} pd_audio_modes: ref;

axiom pd_audio_modes == $sub.ref(0, 74120);

const {:count 4} controls: ref;

axiom controls == $sub.ref(0, 75432);

const pd_video_qops: ref;

axiom pd_video_qops == $sub.ref(0, 76488);

const {:count 3} video_to_audio_map: ref;

axiom video_to_audio_map == $sub.ref(0, 77560);

const usb_transfer_mode: ref;

axiom usb_transfer_mode == $sub.ref(0, 78588);

const pd_video_ioctl_ops: ref;

axiom pd_video_ioctl_ops == $sub.ref(0, 80396);

const pd_video_fops: ref;

axiom pd_video_fops == $sub.ref(0, 81492);

const pd_video_template: ref;

axiom pd_video_template == $sub.ref(0, 83844);

const ldv_mutex_vb_lock_of_videobuf_queue: ref;

axiom ldv_mutex_vb_lock_of_videobuf_queue == $sub.ref(0, 84872);

const ldv_mutex_power_lock_of_snd_card: ref;

axiom ldv_mutex_power_lock_of_snd_card == $sub.ref(0, 85900);

const ldv_mutex_pm_mutex: ref;

axiom ldv_mutex_pm_mutex == $sub.ref(0, 86928);

const ldv_mutex_mutex_of_device: ref;

axiom ldv_mutex_mutex_of_device == $sub.ref(0, 87956);

const ldv_mutex_lock_of_poseidon: ref;

axiom ldv_mutex_lock_of_poseidon == $sub.ref(0, 88984);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 30} .str.29: ref;

axiom .str.29 == $sub.ref(0, 90038);

const {:count 17} .str.30: ref;

axiom .str.30 == $sub.ref(0, 91079);

const {:count 32} .str.31: ref;

axiom .str.31 == $sub.ref(0, 92135);

const .str: ref;

axiom .str == $sub.ref(0, 93179);

const {:count 16} .str.16: ref;

axiom .str.16 == $sub.ref(0, 94219);

const {:count 26} .str.32: ref;

axiom .str.32 == $sub.ref(0, 95269);

const {:count 14} .str.33: ref;

axiom .str.33 == $sub.ref(0, 96307);

const {:count 29} .str.34: ref;

axiom .str.34 == $sub.ref(0, 97360);

const current_task: ref;

axiom current_task == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 19} .str.55: ref;

axiom .str.55 == $sub.ref(0, 98403);

const {:count 15} .str.6: ref;

axiom .str.6 == $sub.ref(0, 99442);

const {:count 32} .str.64: ref;

axiom .str.64 == $sub.ref(0, 100498);

const {:count 15} .str.65: ref;

axiom .str.65 == $sub.ref(0, 101537);

const {:count 50} .str.66: ref;

axiom .str.66 == $sub.ref(0, 102611);

const {:count 23} .str.67: ref;

axiom .str.67 == $sub.ref(0, 103658);

const snd_pcm_link_rwlock: ref;

axiom snd_pcm_link_rwlock == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const {:count 22} .str.20: ref;

axiom .str.20 == $sub.ref(0, 104704);

const {:count 41} .str.27: ref;

axiom .str.27 == $sub.ref(0, 105769);

const {:count 13} .str.28: ref;

axiom .str.28 == $sub.ref(0, 106806);

const {:count 44} .str.25: ref;

axiom .str.25 == $sub.ref(0, 107874);

const {:count 18} .str.26: ref;

axiom .str.26 == $sub.ref(0, 108916);

const {:count 5} .str.24: ref;

axiom .str.24 == $sub.ref(0, 109945);

const {:count 44} .str.21: ref;

axiom .str.21 == $sub.ref(0, 111013);

const {:count 17} .str.22: ref;

axiom .str.22 == $sub.ref(0, 112054);

const {:count 43} .str.23: ref;

axiom .str.23 == $sub.ref(0, 113121);

const {:count 29} .str.40: ref;

axiom .str.40 == $sub.ref(0, 114174);

const {:count 8} .str.41: ref;

axiom .str.41 == $sub.ref(0, 115206);

const {:count 16} .str.5: ref;

axiom .str.5 == $sub.ref(0, 116246);

const {:count 15} .str.63: ref;

axiom .str.63 == $sub.ref(0, 117285);

const {:count 15} .str.42: ref;

axiom .str.42 == $sub.ref(0, 118324);

const {:count 29} .str.36: ref;

axiom .str.36 == $sub.ref(0, 119377);

const {:count 15} .str.37: ref;

axiom .str.37 == $sub.ref(0, 120416);

const {:count 17} .str.38: ref;

axiom .str.38 == $sub.ref(0, 121457);

const {:count 13} .str.50: ref;

axiom .str.50 == $sub.ref(0, 122494);

const {:count 15} .str.49: ref;

axiom .str.49 == $sub.ref(0, 123533);

const {:count 18} .str.56: ref;

axiom .str.56 == $sub.ref(0, 124575);

const {:count 13} .str.39: ref;

axiom .str.39 == $sub.ref(0, 125612);

const {:count 17} .str.44: ref;

axiom .str.44 == $sub.ref(0, 126653);

const {:count 16} .str.62: ref;

axiom .str.62 == $sub.ref(0, 127693);

const {:count 16} .str.43: ref;

axiom .str.43 == $sub.ref(0, 128733);

const {:count 15} .str.35: ref;

axiom .str.35 == $sub.ref(0, 129772);

const {:count 13} .str.47: ref;

axiom .str.47 == $sub.ref(0, 130809);

const {:count 17} .str.61: ref;

axiom .str.61 == $sub.ref(0, 131850);

const {:count 13} .str.48: ref;

axiom .str.48 == $sub.ref(0, 132887);

const {:count 16} .str.51: ref;

axiom .str.51 == $sub.ref(0, 133927);

const {:count 11} .str.52: ref;

axiom .str.52 == $sub.ref(0, 134962);

const {:count 18} .str.53: ref;

axiom .str.53 == $sub.ref(0, 136004);

const {:count 10} .str.54: ref;

axiom .str.54 == $sub.ref(0, 137038);

const {:count 29} .str.18: ref;

axiom .str.18 == $sub.ref(0, 138091);

const {:count 13} .str.19: ref;

axiom .str.19 == $sub.ref(0, 139128);

const {:count 8} .str.45: ref;

axiom .str.45 == $sub.ref(0, 140160);

const {:count 7} .str.46: ref;

axiom .str.46 == $sub.ref(0, 141191);

const {:count 11} .str.57: ref;

axiom .str.57 == $sub.ref(0, 142226);

const {:count 9} .str.58: ref;

axiom .str.58 == $sub.ref(0, 143259);

const {:count 10} .str.59: ref;

axiom .str.59 == $sub.ref(0, 144293);

const {:count 13} .str.60: ref;

axiom .str.60 == $sub.ref(0, 145330);

const {:count 44} .str.69: ref;

axiom .str.69 == $sub.ref(0, 146398);

const {:count 23} .str.70: ref;

axiom .str.70 == $sub.ref(0, 147445);

const {:count 23} .str.68: ref;

axiom .str.68 == $sub.ref(0, 148492);

const {:count 25} .str.13: ref;

axiom .str.13 == $sub.ref(0, 149541);

const {:count 19} .str.14: ref;

axiom .str.14 == $sub.ref(0, 150584);

const {:count 42} .str.78: ref;

axiom .str.78 == $sub.ref(0, 151650);

const {:count 21} .str.79: ref;

axiom .str.79 == $sub.ref(0, 152695);

const {:count 40} .str.80: ref;

axiom .str.80 == $sub.ref(0, 153759);

const jiffies: ref;

axiom jiffies == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

const {:count 30} .str.76: ref;

axiom .str.76 == $sub.ref(0, 154813);

const {:count 16} .str.77: ref;

axiom .str.77 == $sub.ref(0, 155853);

const {:count 40} .str.71: ref;

axiom .str.71 == $sub.ref(0, 156917);

const {:count 20} .str.72: ref;

axiom .str.72 == $sub.ref(0, 157961);

const {:count 5} .str.73: ref;

axiom .str.73 == $sub.ref(0, 158990);

const {:count 52} .str.74: ref;

axiom .str.74 == $sub.ref(0, 160066);

const {:count 12} .str.75: ref;

axiom .str.75 == $sub.ref(0, 161102);

const {:count 13} .str.85: ref;

axiom .str.85 == $sub.ref(0, 162139);

const {:count 14} .str.84: ref;

axiom .str.84 == $sub.ref(0, 163177);

const {:count 6} .str.82: ref;

axiom .str.82 == $sub.ref(0, 164207);

const {:count 11} .str.83: ref;

axiom .str.83 == $sub.ref(0, 165242);

const {:count 21} .str.95: ref;

axiom .str.95 == $sub.ref(0, 166287);

const {:count 31} .str.86: ref;

axiom .str.86 == $sub.ref(0, 167342);

const {:count 18} .str.87: ref;

axiom .str.87 == $sub.ref(0, 168384);

const {:count 9} .str.106: ref;

axiom .str.106 == $sub.ref(0, 169417);

const {:count 29} .str.102: ref;

axiom .str.102 == $sub.ref(0, 170470);

const {:count 16} .str.103: ref;

axiom .str.103 == $sub.ref(0, 171510);

const {:count 32} .str.100: ref;

axiom .str.100 == $sub.ref(0, 172566);

const {:count 17} .str.101: ref;

axiom .str.101 == $sub.ref(0, 173607);

const {:count 20} .str.104: ref;

axiom .str.104 == $sub.ref(0, 174651);

const {:count 14} .str.1: ref;

axiom .str.1 == $sub.ref(0, 175689);

const {:count 15} .str.88: ref;

axiom .str.88 == $sub.ref(0, 176728);

const {:count 10} .str.89: ref;

axiom .str.89 == $sub.ref(0, 177762);

const {:count 6} .str.90: ref;

axiom .str.90 == $sub.ref(0, 178792);

const {:count 15} .str.91: ref;

axiom .str.91 == $sub.ref(0, 179831);

const {:count 19} .str.99: ref;

axiom .str.99 == $sub.ref(0, 180874);

const {:count 22} .str.15: ref;

axiom .str.15 == $sub.ref(0, 181920);

const {:count 9} .str.7: ref;

axiom .str.7 == $sub.ref(0, 182953);

const {:count 15} .str.8: ref;

axiom .str.8 == $sub.ref(0, 183992);

const {:count 23} .str.9: ref;

axiom .str.9 == $sub.ref(0, 185039);

const {:count 12} .str.10: ref;

axiom .str.10 == $sub.ref(0, 186075);

const {:count 15} .str.11: ref;

axiom .str.11 == $sub.ref(0, 187114);

const {:count 20} .str.12: ref;

axiom .str.12 == $sub.ref(0, 188158);

const {:count 46} .str.2: ref;

axiom .str.2 == $sub.ref(0, 189228);

const {:count 14} .str.3: ref;

axiom .str.3 == $sub.ref(0, 190266);

const {:count 59} .str.4: ref;

axiom .str.4 == $sub.ref(0, 191349);

const {:count 46} .str.96: ref;

axiom .str.96 == $sub.ref(0, 192419);

const {:count 6} .str.97: ref;

axiom .str.97 == $sub.ref(0, 193449);

const {:count 31} .str.98: ref;

axiom .str.98 == $sub.ref(0, 194504);

const {:count 37} .str.92: ref;

axiom .str.92 == $sub.ref(0, 195565);

const {:count 18} .str.93: ref;

axiom .str.93 == $sub.ref(0, 196607);

const {:count 41} .str.94: ref;

axiom .str.94 == $sub.ref(0, 197672);

const {:count 14} .str.105: ref;

axiom .str.105 == $sub.ref(0, 198710);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 199742);

const {:count 3} .str.1.134: ref;

axiom .str.1.134 == $sub.ref(0, 200769);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 201807);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 202835);

const __kmalloc: ref;

axiom __kmalloc == $sub.ref(0, 203867);

procedure __kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 0} {:cexpr "__kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 1} {:cexpr "__kmalloc:arg:t"} boogie_si_record_i32($i1);
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} $p2 := ldv_malloc($i0);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 204899);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const ldv_malloc: ref;

axiom ldv_malloc == $sub.ref(0, 205931);

procedure ldv_malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_malloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3} {:cexpr "ldv_malloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 5} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 6} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} $p4 := malloc($i0);
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 1} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 1} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 1} true;
    call {:si_unique_call 8} __VERIFIER_assume($i7);
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const malloc: ref;

axiom malloc == $sub.ref(0, 206963);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 9} $r := $malloc($i0);
    return;
}



const video_device_release: ref;

axiom video_device_release == $sub.ref(0, 207995);

procedure video_device_release($p0: ref);
  free requires assertsPassed;



implementation video_device_release($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    return;
}



const pd_video_read: ref;

axiom pd_video_read == $sub.ref(0, 209027);

procedure pd_video_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation pd_video_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} {:cexpr "pd_video_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 336)), $mul.ref(296, 1));
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 736)), $mul.ref(8, 1));
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 336)), $mul.ref(128, 1));
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 2048);
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} $i11 := videobuf_read_stream($p7, $p1, $i2, $p3, 0, $i10);
    call {:si_unique_call 12} {:cexpr "tmp"} boogie_si_record_i64($i11);
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;
}



const pd_video_poll: ref;

axiom pd_video_poll == $sub.ref(0, 210059);

procedure pd_video_poll($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pd_video_poll($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 336)), $mul.ref(296, 1));
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 736)), $mul.ref(8, 1));
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} $i6 := videobuf_poll_stream($p0, $p5, $p1);
    call {:si_unique_call 14} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const video_ioctl2: ref;

axiom video_ioctl2 == $sub.ref(0, 211091);

procedure video_ioctl2($p0: ref, $i1: i32, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation video_ioctl2($p0: ref, $i1: i32, $i2: i64) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 15} {:cexpr "video_ioctl2:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 16} {:cexpr "video_ioctl2:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 1} true;
    call {:si_unique_call 17} $i3 := __VERIFIER_nondet_long();
    call {:si_unique_call 18} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i3);
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const pd_video_mmap: ref;

axiom pd_video_mmap == $sub.ref(0, 212123);

procedure pd_video_mmap($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pd_video_mmap($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 336)), $mul.ref(296, 1));
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 736)), $mul.ref(8, 1));
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} $i6 := videobuf_mmap_mapper($p5, $p1);
    call {:si_unique_call 20} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const pd_video_open: ref;

axiom pd_video_open == $sub.ref(0, 213155);

procedure pd_video_open($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.4, $CurrAddr, assertsPassed;



implementation pd_video_open($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $i21: i32;
  var $p22: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $p31: ref;
  var $p32: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $p38: ref;
  var $i39: i32;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p44: ref;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $i48: i32;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $p52: ref;
  var $i53: i64;
  var $i54: i1;
  var $p55: ref;
  var $i56: i32;
  var $i57: i32;
  var $p58: ref;
  var $p59: ref;
  var $p61: ref;
  var $p63: ref;
  var $i64: i32;
  var $i65: i32;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p43: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p78: ref;
  var $p79: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $i20: i32;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $i84: i32;
  var vslice_dummy_var_75: i32;
  var vslice_dummy_var_76: ref;
  var vslice_dummy_var_77: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} $p2 := video_devdata($p0);
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} $p3 := video_get_drvdata($p2);
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 3864)), $mul.ref(16, 1));
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} ldv_mutex_lock_27($p5);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 3864)), $mul.ref(520, 1));
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} vslice_dummy_var_75 := usb_autopm_get_interface($p7);
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 1328)), $mul.ref(1160, 1));
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p2, $mul.ref(0, 1328)), $mul.ref(1160, 1));
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i45, 1);
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} vslice_dummy_var_77 := printk.ref.ref.i32(.str.32, .str.33, 1554);
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 22);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p4, $mul.ref(0, 3864)), $mul.ref(520, 1));
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.0, $p85);
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} usb_autopm_put_interface($p86);
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p4, $mul.ref(0, 3864)), $mul.ref(16, 1));
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} ldv_mutex_unlock_29($p87);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $i84 := $i20;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    $r := $i84;
    return;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i46 == 1;
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p4, $mul.ref(0, 3864)), $mul.ref(3736, 1));
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.0, $p47);
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $i49 := $and.i32($i48, 8);
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i49, 0);
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i50 == 1);
    goto $bb16;

  $bb17:
    assume $i50 == 1;
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} $p51 := kzalloc(736, 208);
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    $i53 := $p2i.ref.i64($p52);
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    $i54 := $eq.i64($i53, 0);
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p4, $mul.ref(0, 3864)), $mul.ref(3736, 1));
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.0, $p55);
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    $i57 := $or.i32($i56, 8);
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p4, $mul.ref(0, 3864)), $mul.ref(3736, 1));
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p58, $i57);
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p52, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p59, 4);
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3864)), $mul.ref(816, 1)), $mul.ref(16, 1));
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p61, $p51);
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3864)), $mul.ref(816, 1)), $mul.ref(32, 1));
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.0, $p63);
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    $i65 := $add.i32($i64, 1);
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3864)), $mul.ref(816, 1)), $mul.ref(32, 1));
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p67, $i65);
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p52, $mul.ref(0, 736)), $mul.ref(8, 1));
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p52, $mul.ref(0, 736)), $mul.ref(640, 1));
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p52);
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} videobuf_queue_vmalloc_init($p68, pd_video_qops, $0.ref, $p69, 4, 1, 248, $p70, $0.ref);
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p43 := $p51;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p43, $mul.ref(0, 736)), $mul.ref(728, 1));
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p72, $p3);
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p43, $mul.ref(0, 736)), $mul.ref(632, 1));
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p73, $0.ref);
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p43, $mul.ref(0, 736)), $mul.ref(712, 1));
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} INIT_LIST_HEAD($p74);
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p43, $mul.ref(0, 736)), $mul.ref(640, 1));
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} vslice_dummy_var_76 := spinlock_check($p75);
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($p43, $mul.ref(0, 736)), $mul.ref(640, 1)), $mul.ref(0, 1));
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    $p79 := $bitcast.ref.ref($p78);
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} __raw_spin_lock_init($p79, .str.34, $p1);
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p0, $mul.ref(0, 336)), $mul.ref(296, 1));
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p81, $p43);
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p4, $mul.ref(0, 3864)), $mul.ref(184, 1));
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} kref_get($p82);
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p4, $mul.ref(0, 3864)), $mul.ref(16, 1));
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} ldv_mutex_unlock_28($p83);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    $i84 := 0;
    goto $bb23;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i54 == 1;
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 12);
    goto $bb8;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 3864)), $mul.ref(3736, 1));
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 1);
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb3;

  $bb4:
    assume $i15 == 1;
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} $p16 := kzalloc(736, 208);
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    $i19 := $eq.i64($i18, 0);
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i21 := $M.1;
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p4, $mul.ref(0, 3864)), $mul.ref(528, 1));
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, $i21);
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(8, 1));
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} init_video_context($p24);
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} $i25 := pd_video_checkmode($p4);
    call {:si_unique_call 31} {:cexpr "ret"} boogie_si_record_i32($i25);
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i25, 0);
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p4, $mul.ref(0, 3864)), $mul.ref(3736, 1));
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    $i30 := $or.i32($i29, 1);
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p4, $mul.ref(0, 3864)), $mul.ref(3736, 1));
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, $i30);
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p17, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, 1);
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(196, 1));
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $i36 := $add.i32($i35, 1);
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(196, 1));
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p38, $i36);
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    $i39 := $M.2;
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} set_debug_mode($p2, $i39);
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p17, $mul.ref(0, 736)), $mul.ref(8, 1));
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p17, $mul.ref(0, 736)), $mul.ref(640, 1));
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p17);
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} videobuf_queue_vmalloc_init($p40, pd_video_qops, $0.ref, $p41, 1, 4, 248, $p42, $0.ref);
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    $p43 := $p16;
    goto $bb13;

  $bb10:
    assume $i26 == 1;
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p17);
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} kfree($p27);
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 1);
    goto $bb8;

  $bb6:
    assume $i19 == 1;
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 12);
    goto $bb8;

  SeqInstr_1:
    assume !assertsPassed;
    return;
}



const pd_video_release: ref;

axiom pd_video_release == $sub.ref(0, 214187);

procedure pd_video_release($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.3, assertsPassed;



implementation pd_video_release($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $p31: ref;
  var $p33: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i32;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $i44: i32;
  var $i45: i32;
  var $p46: ref;
  var $p48: ref;
  var $p50: ref;
  var $i51: i32;
  var $i52: i32;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var vslice_dummy_var_78: i32;
  var vslice_dummy_var_79: i32;
  var vslice_dummy_var_80: i32;
  var vslice_dummy_var_81: i32;
  var vslice_dummy_var_82: i32;
  var vslice_dummy_var_83: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 336)), $mul.ref(296, 1));
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 736)), $mul.ref(728, 1));
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, 0);
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    $i7 := $M.2;
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 4);
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i14 := $M.2;
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i14, 8);
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p6, $mul.ref(0, 3864)), $mul.ref(16, 1));
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} ldv_mutex_lock_30($p21);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p4, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 1);
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i24 == 1);
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p4, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, 4);
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p4, $mul.ref(0, 736)), $mul.ref(8, 1));
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} videobuf_stop($p55);
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p4, $mul.ref(0, 736)), $mul.ref(8, 1));
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} vslice_dummy_var_82 := videobuf_mmap_free($p56);
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p6, $mul.ref(0, 3864)), $mul.ref(520, 1));
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} usb_autopm_put_interface($p59);
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p6, $mul.ref(0, 3864)), $mul.ref(16, 1));
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} ldv_mutex_unlock_31($p60);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p4);
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} kfree($p61);
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 336)), $mul.ref(296, 1));
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p62, $0.ref);
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p6, $mul.ref(0, 3864)), $mul.ref(184, 1));
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} vslice_dummy_var_83 := kref_put($p63, poseidon_delete);
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_13:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i42 == 1;
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p6, $mul.ref(0, 3864)), $mul.ref(3736, 1));
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    $i45 := $and.i32($i44, $sub.i32(0, 9));
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p6, $mul.ref(0, 3864)), $mul.ref(3736, 1));
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p46, $i45);
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 3864)), $mul.ref(816, 1)), $mul.ref(16, 1));
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p48, $0.ref);
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 3864)), $mul.ref(816, 1)), $mul.ref(32, 1));
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    $i52 := $sub.i32($i51, 1);
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 3864)), $mul.ref(816, 1)), $mul.ref(32, 1));
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p54, $i52);
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i24 == 1;
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p6, $mul.ref(0, 3864)), $mul.ref(3736, 1));
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i26, $sub.i32(0, 2));
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p6, $mul.ref(0, 3864)), $mul.ref(3736, 1));
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, $i27);
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p6, $mul.ref(0, 3864)), $mul.ref(536, 1));
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} vslice_dummy_var_80 := usb_transfer_stop($p29);
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p6, $mul.ref(0, 3864)), $mul.ref(536, 1));
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} free_all_urb($p31);
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} vslice_dummy_var_81 := send_set_req($p6, 68, 2, $p1);
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p6, $mul.ref(0, 3864)), $mul.ref(3744, 1));
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p33, $0.ref);
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(196, 1));
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    $i37 := $sub.i32($i36, 1);
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(196, 1));
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, $i37);
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i16 == 1;
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb9;

  $bb10:
    assume $i19 == 1;
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} vslice_dummy_var_79 := printk.ref.ref.i32(.str.31, .str.30, 1581);
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 4);
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb3;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} vslice_dummy_var_78 := printk.ref.ref.i32(.str.29, .str.30, 1581);
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const printk: ref;

axiom printk == $sub.ref(0, 215219);

procedure printk.ref.ref.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 1} true;
    call {:si_unique_call 56} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 57} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 1} true;
    call {:si_unique_call 58} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 59} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 1} true;
    call {:si_unique_call 60} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 61} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 1} true;
    call {:si_unique_call 62} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 63} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.i64($p0: ref, p.1: ref, p.2: i32, p.3: i64) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i64($p0: ref, p.1: ref, p.2: i32, p.3: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 1} true;
    call {:si_unique_call 64} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 65} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb5:
    assume {:verifier.code 1} true;
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 1} true;
    call {:si_unique_call 66} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 67} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.ref($p0: ref, p.1: ref, p.2: i32, p.3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.ref($p0: ref, p.1: ref, p.2: i32, p.3: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb6:
    assume {:verifier.code 1} true;
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 1} true;
    call {:si_unique_call 68} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 69} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_mutex_lock_30: ref;

axiom ldv_mutex_lock_30 == $sub.ref(0, 216251);

procedure ldv_mutex_lock_30($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_lock_30($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 70} ldv_mutex_lock_lock_of_poseidon($p0);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 71} mutex_lock($p0);
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_16:
    assume !assertsPassed;
    return;
}



const usb_transfer_stop: ref;

axiom usb_transfer_stop == $sub.ref(0, 217283);

procedure usb_transfer_stop($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation usb_transfer_stop($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p14: ref;
  var $p15: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p23: ref;
  var $p24: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $p31: ref;
  var $p32: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $p39: ref;
  var $p40: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $i45: i1;
  var $p47: ref;
  var $p48: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i64;
  var $i53: i1;
  var $p55: ref;
  var $p56: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i64;
  var $i61: i1;
  var $p63: ref;
  var $p64: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i64;
  var $i69: i1;
  var $p71: ref;
  var $p72: ref;
  var vslice_dummy_var_84: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 72} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(192, 1));
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(176, 1));
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(192, 1));
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, 0);
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(104, 1)), $mul.ref(0, 8));
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(104, 1)), $mul.ref(1, 8));
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(104, 1)), $mul.ref(2, 8));
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i28, 0);
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(104, 1)), $mul.ref(3, 8));
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i36, 0);
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(104, 1)), $mul.ref(4, 8));
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p43);
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $i45 := $ne.i64($i44, 0);
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(104, 1)), $mul.ref(5, 8));
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    $i52 := $p2i.ref.i64($p51);
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $i53 := $ne.i64($i52, 0);
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(104, 1)), $mul.ref(6, 8));
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    $i60 := $p2i.ref.i64($p59);
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    $i61 := $ne.i64($i60, 0);
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(104, 1)), $mul.ref(7, 8));
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $i68 := $p2i.ref.i64($p67);
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $i69 := $ne.i64($i68, 0);
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    assume {:branchcond $i69} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 74} vslice_dummy_var_84 := send_set_req($p6, 68, 2, $p1);
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb35:
    assume $i69 == 1;
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(104, 1)), $mul.ref(7, 8));
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 81} usb_kill_urb($p72);
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb31:
    assume $i61 == 1;
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(104, 1)), $mul.ref(6, 8));
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 80} usb_kill_urb($p64);
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb27:
    assume $i53 == 1;
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(104, 1)), $mul.ref(5, 8));
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 79} usb_kill_urb($p56);
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb23:
    assume $i45 == 1;
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(104, 1)), $mul.ref(4, 8));
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 78} usb_kill_urb($p48);
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb19:
    assume $i37 == 1;
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(104, 1)), $mul.ref(3, 8));
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 77} usb_kill_urb($p40);
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb15:
    assume $i29 == 1;
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(104, 1)), $mul.ref(2, 8));
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} usb_kill_urb($p32);
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb11:
    assume $i21 == 1;
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(104, 1)), $mul.ref(1, 8));
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 75} usb_kill_urb($p24);
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(104, 1)), $mul.ref(0, 8));
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 73} usb_kill_urb($p15);
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    goto $bb7;
}



const free_all_urb: ref;

axiom free_all_urb == $sub.ref(0, 218315);

procedure free_all_urb($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation free_all_urb($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(104, 1));
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 82} free_all_urb_generic($p2, 8);
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    return;
}



const send_set_req: ref;

axiom send_set_req == $sub.ref(0, 219347);

procedure send_set_req($p0: ref, $i1: i8, $i2: i32, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation send_set_req($p0: ref, $i1: i8, $i2: i32, $p3: ref) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i32;
  var $i40: i1;
  var $i42: i1;
  var $i45: i16;
  var $i46: i32;
  var $i47: i16;
  var $i43: i16;
  var $i44: i16;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $i54: i32;
  var $i55: i8;
  var $i56: i32;
  var $i57: i16;
  var $i58: i32;
  var $i59: i16;
  var $p60: ref;
  var $i61: i32;
  var $i62: i1;
  var $i63: i1;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i41: i32;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} $p4 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    call {:si_unique_call 84} {:cexpr "send_set_req:arg:cmdid"} boogie_si_record_i8($i1);
    call {:si_unique_call 85} {:cexpr "send_set_req:arg:param"} boogie_si_record_i32($i2);
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p5, 0);
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(1, 1));
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p6, 0);
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(2, 1));
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p7, 0);
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(3, 1));
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p8, 0);
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p9, 0);
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(5, 1));
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p10, 0);
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(6, 1));
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, 0);
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(7, 1));
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p12, 0);
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p13, 0);
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(9, 1));
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p14, 0);
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(10, 1));
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p15, 0);
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(11, 1));
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p16, 0);
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p17, 0);
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(13, 1));
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p18, 0);
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(14, 1));
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p19, 0);
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(15, 1));
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p20, 0);
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p21, 0);
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(17, 1));
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p22, 0);
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(18, 1));
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p23, 0);
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(19, 1));
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p24, 0);
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(20, 1));
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p25, 0);
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(21, 1));
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p26, 0);
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(22, 1));
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p27, 0);
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(23, 1));
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p28, 0);
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p29, 0);
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(25, 1));
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p30, 0);
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(26, 1));
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p31, 0);
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(27, 1));
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p32, 0);
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(28, 1));
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p33, 0);
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(29, 1));
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p34, 0);
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(30, 1));
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p35, 0);
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(31, 1));
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p36, 0);
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(3736, 1));
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    $i39 := $and.i32($i38, 128);
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 86} __const_udelay(4295000);
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 87} __const_udelay(4295000);
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} __const_udelay(4295000);
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 97} __const_udelay(4295000);
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} __const_udelay(4295000);
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 99} __const_udelay(4295000);
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 100} __const_udelay(4295000);
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} __const_udelay(4295000);
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 102} __const_udelay(4295000);
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 103} __const_udelay(4295000);
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 104} __const_udelay(4295000);
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 105} __const_udelay(4295000);
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 106} __const_udelay(4295000);
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 107} __const_udelay(4295000);
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 108} __const_udelay(4295000);
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 109} __const_udelay(4295000);
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 110} __const_udelay(4295000);
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 111} __const_udelay(4295000);
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 112} __const_udelay(4295000);
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} __const_udelay(4295000);
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 114} __const_udelay(4295000);
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 115} __const_udelay(4295000);
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} __const_udelay(4295000);
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 117} __const_udelay(4295000);
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 118} __const_udelay(4295000);
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 119} __const_udelay(4295000);
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} __const_udelay(4295000);
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 121} __const_udelay(4295000);
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 122} __const_udelay(4295000);
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 123} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i2, 0);
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i42 == 1);
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i32.i16($i2);
    call {:si_unique_call 88} {:cexpr "lower_16"} boogie_si_record_i16($i45);
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    $i46 := $ashr.i32($i2, 16);
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i32.i16($i46);
    call {:si_unique_call 89} {:cexpr "upper_16"} boogie_si_record_i16($i47);
    assume {:verifier.code 0} true;
    $i43, $i44 := $i45, $i47;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(512, 1));
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 90} $i50 := __create_pipe($p49, 0);
    call {:si_unique_call 91} {:cexpr "tmp___0"} boogie_si_record_i32($i50);
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(512, 1));
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    $i53 := $or.i32($i50, $sub.i32(0, 2147483520));
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i32($i1);
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i32.i8($i54);
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $i56 := $zext.i16.i32($i43);
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    $i57 := $trunc.i32.i16($i56);
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    $i58 := $zext.i16.i32($i44);
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    $i59 := $trunc.i32.i16($i58);
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p4);
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 92} $i61 := usb_control_msg($p52, $i53, $i55, $sub.i8(0, 64), $i57, $i59, $p60, 4, 5000);
    call {:si_unique_call 93} {:cexpr "ret"} boogie_si_record_i32($i61);
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i61, 0);
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i62 == 1);
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    $i63 := $ugt.i64(4, 63);
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    assume {:branchcond $i63} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i63 == 1);
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p3);
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p4);
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.0;
    cmdloc_dummy_var_4 := $M.0;
    call {:si_unique_call 95} cmdloc_dummy_var_5 := $memcpy.i8(cmdloc_dummy_var_3, cmdloc_dummy_var_4, $p66, $p67, 4, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_5;
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i41 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    $r := $i41;
    return;

  $bb14:
    assume $i63 == 1;
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p3);
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p4);
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 94} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p64, $p65, 4, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_2;
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb12:
    assume $i62 == 1;
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    $i41 := $sub.i32(0, 6);
    goto $bb3;

  $bb9:
    assume $i42 == 1;
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    $i43, $i44 := 0, 0;
    goto $bb11;

  $bb1:
    assume $i40 == 1;
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    $i41 := $sub.i32(0, 19);
    goto $bb3;
}



const videobuf_stop: ref;

axiom videobuf_stop == $sub.ref(0, 220379);

procedure videobuf_stop($p0: ref);
  free requires assertsPassed;



implementation videobuf_stop($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    return;
}



const videobuf_mmap_free: ref;

axiom videobuf_mmap_free == $sub.ref(0, 221411);

procedure videobuf_mmap_free($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation videobuf_mmap_free($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 1} true;
    call {:si_unique_call 124} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 125} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const usb_autopm_put_interface: ref;

axiom usb_autopm_put_interface == $sub.ref(0, 222443);

procedure usb_autopm_put_interface($p0: ref);
  free requires assertsPassed;



implementation usb_autopm_put_interface($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_unlock_31: ref;

axiom ldv_mutex_unlock_31 == $sub.ref(0, 223475);

procedure ldv_mutex_unlock_31($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_unlock_31($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 126} ldv_mutex_unlock_lock_of_poseidon($p0);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 127} mutex_unlock($p0);
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_19:
    assume !assertsPassed;
    return;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 224507);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 128} free_($p0);
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    return;
}



const poseidon_delete: ref;

axiom poseidon_delete == $sub.ref(0, 225539);

procedure poseidon_delete($p0: ref);



const kref_put: ref;

axiom kref_put == $sub.ref(0, 226571);

procedure kref_put($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation kref_put($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 1} true;
    call {:si_unique_call 129} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 130} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const list_del_init: ref;

axiom list_del_init == $sub.ref(0, 227603);

procedure list_del_init($p0: ref);



const pd_dvb_usb_device_cleanup: ref;

axiom pd_dvb_usb_device_cleanup == $sub.ref(0, 228635);

procedure pd_dvb_usb_device_cleanup($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation pd_dvb_usb_device_cleanup($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(952, 1));
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} dvb_urb_cleanup($p1);
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    return;
}



const usb_put_dev: ref;

axiom usb_put_dev == $sub.ref(0, 229667);

procedure usb_put_dev($p0: ref);
  free requires assertsPassed;



implementation usb_put_dev($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    return;
}



const usb_put_intf: ref;

axiom usb_put_intf == $sub.ref(0, 230699);

procedure usb_put_intf($p0: ref);
  free requires assertsPassed;



implementation usb_put_intf($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    return;
}



const dvb_urb_cleanup: ref;

axiom dvb_urb_cleanup == $sub.ref(0, 231731);

procedure dvb_urb_cleanup($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation dvb_urb_cleanup($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2784)), $mul.ref(2688, 1));
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 132} free_all_urb_generic($p2, 4);
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    return;
}



const free_all_urb_generic: ref;

axiom free_all_urb_generic == $sub.ref(0, 232763);

procedure free_all_urb_generic($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation free_all_urb_generic($p0: ref, $i1: i32)
{
  var $i2: i1;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i64;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i64;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 133} {:cexpr "free_all_urb_generic:arg:num"} boogie_si_record_i32($i1);
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    $i2 := $slt.i32(0, $i1);
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb4;

  $bb4:
    call $i4, $p5, $p6, $i7, $i8, $p9, $p10, $p11, $i12, $i13, $p14, $p15, $p16, $i17, $i18, $p19, $i20, $i21, $i3 := free_all_urb_generic_loop_$bb4($p0, $i1, $i4, $p5, $p6, $i7, $i8, $p9, $p10, $p11, $i12, $i13, $p14, $p15, $p16, $i17, $i18, $p19, $i20, $i21, $i3);
    goto $bb4_last;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p0, $mul.ref($i4, 8));
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i20 := $add.i32($i3, 1);
    call {:si_unique_call 136} {:cexpr "i"} boogie_si_record_i32($i20);
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i20, $i1);
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i21 == 1);
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb9:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    $i3 := $i20;
    goto $bb9_dummy;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p6, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p6, $mul.ref(0, 192)), $mul.ref(132, 1));
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    $i13 := $zext.i32.i64($i12);
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p6, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p6, $mul.ref(0, 192)), $mul.ref(112, 1));
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.0, $p16);
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 134} usb_free_coherent($p10, $i13, $p15, $i17);
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} usb_free_urb($p6);
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i3);
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p0, $mul.ref($i18, 8));
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p19, $0.ref);
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb9_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_594;
}



const usb_free_coherent: ref;

axiom usb_free_coherent == $sub.ref(0, 233795);

procedure usb_free_coherent($p0: ref, $i1: i64, $p2: ref, $i3: i64);
  free requires assertsPassed;



implementation usb_free_coherent($p0: ref, $i1: i64, $p2: ref, $i3: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} {:cexpr "usb_free_coherent:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 138} {:cexpr "usb_free_coherent:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    return;
}



const usb_free_urb: ref;

axiom usb_free_urb == $sub.ref(0, 234827);

procedure usb_free_urb($p0: ref);
  free requires assertsPassed;



implementation usb_free_urb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    return;
}



const __list_del_entry: ref;

axiom __list_del_entry == $sub.ref(0, 235859);

procedure __list_del_entry($p0: ref);



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 236891);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $p0);
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p0);
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 237923);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 139} $free($p0);
    return;
}



const ldv_mutex_unlock_lock_of_poseidon: ref;

axiom ldv_mutex_unlock_lock_of_poseidon == $sub.ref(0, 238955);

procedure ldv_mutex_unlock_lock_of_poseidon($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_unlock_lock_of_poseidon($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    $i1 := $M.3;
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 2);
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 140} ldv_error();
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.3 := 1;
    call {:si_unique_call 141} {:cexpr "ldv_mutex_lock_of_poseidon"} boogie_si_record_i32(1);
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_22:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 239987);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 241019);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 142} __VERIFIER_error();
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_25:
    assume !assertsPassed;
    return;
}



const __const_udelay: ref;

axiom __const_udelay == $sub.ref(0, 242051);

procedure __const_udelay($i0: i64);
  free requires assertsPassed;



implementation __const_udelay($i0: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} {:cexpr "__const_udelay:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    return;
}



const __create_pipe: ref;

axiom __create_pipe == $sub.ref(0, 243083);

procedure __create_pipe($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __create_pipe($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 144} {:cexpr "__create_pipe:arg:endpoint"} boogie_si_record_i32($i1);
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1904)), $mul.ref(0, 1));
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    $i4 := $shl.i32($i3, 8);
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $i5 := $shl.i32($i1, 15);
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    $i6 := $or.i32($i4, $i5);
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const usb_control_msg: ref;

axiom usb_control_msg == $sub.ref(0, 244115);

procedure usb_control_msg($p0: ref, $i1: i32, $i2: i8, $i3: i8, $i4: i16, $i5: i16, $p6: ref, $i7: i16, $i8: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_control_msg($p0: ref, $i1: i32, $i2: i8, $i3: i8, $i4: i16, $i5: i16, $p6: ref, $i7: i16, $i8: i32) returns ($r: i32)
{
  var $i9: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 145} {:cexpr "usb_control_msg:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 146} {:cexpr "usb_control_msg:arg:arg2"} boogie_si_record_i8($i2);
    call {:si_unique_call 147} {:cexpr "usb_control_msg:arg:arg3"} boogie_si_record_i8($i3);
    call {:si_unique_call 148} {:cexpr "usb_control_msg:arg:arg4"} boogie_si_record_i16($i4);
    call {:si_unique_call 149} {:cexpr "usb_control_msg:arg:arg5"} boogie_si_record_i16($i5);
    call {:si_unique_call 150} {:cexpr "usb_control_msg:arg:arg7"} boogie_si_record_i16($i7);
    call {:si_unique_call 151} {:cexpr "usb_control_msg:arg:arg8"} boogie_si_record_i32($i8);
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 1} true;
    call {:si_unique_call 152} $i9 := __VERIFIER_nondet_int();
    call {:si_unique_call 153} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i9);
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 245147);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const usb_kill_urb: ref;

axiom usb_kill_urb == $sub.ref(0, 246179);

procedure usb_kill_urb($p0: ref);
  free requires assertsPassed;



implementation usb_kill_urb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_lock_lock_of_poseidon: ref;

axiom ldv_mutex_lock_lock_of_poseidon == $sub.ref(0, 247211);

procedure ldv_mutex_lock_lock_of_poseidon($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_lock_lock_of_poseidon($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    $i1 := $M.3;
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} ldv_error();
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.3 := 2;
    call {:si_unique_call 155} {:cexpr "ldv_mutex_lock_of_poseidon"} boogie_si_record_i32(2);
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_28:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mutex_lock: ref;

axiom mutex_lock == $sub.ref(0, 248243);

procedure mutex_lock($p0: ref);
  free requires assertsPassed;



implementation mutex_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    return;
}



const video_devdata: ref;

axiom video_devdata == $sub.ref(0, 249275);

procedure video_devdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation video_devdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} $p1 := external_alloc();
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const video_get_drvdata: ref;

axiom video_get_drvdata == $sub.ref(0, 250307);

procedure video_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation video_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1328)), $mul.ref(8, 1));
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_mutex_lock_27: ref;

axiom ldv_mutex_lock_27 == $sub.ref(0, 251339);

procedure ldv_mutex_lock_27($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_lock_27($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} ldv_mutex_lock_lock_of_poseidon($p0);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} mutex_lock($p0);
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_31:
    assume !assertsPassed;
    return;
}



const usb_autopm_get_interface: ref;

axiom usb_autopm_get_interface == $sub.ref(0, 252371);

procedure usb_autopm_get_interface($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_autopm_get_interface($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 1} true;
    call {:si_unique_call 160} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 161} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 253403);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $i2: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 163} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    $i2 := $or.i32($i1, 32768);
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 164} $p3 := kmalloc($i0, $i2);
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const init_video_context: ref;

axiom init_video_context == $sub.ref(0, 254435);

procedure init_video_context($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation init_video_context($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} $p1 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 0);
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(4, 1));
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, 1);
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p4, 32);
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, 720);
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, 576);
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, 1448695129);
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, 4);
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, 1440);
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(20, 1));
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, 829440);
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, 1);
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(28, 1));
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, 0);
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(20, 1));
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p1);
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.0;
    cmdloc_dummy_var_7 := $M.0;
    call {:si_unique_call 166} cmdloc_dummy_var_8 := $memcpy.i8(cmdloc_dummy_var_6, cmdloc_dummy_var_7, $p14, $p15, 32, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_8;
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    return;
}



const pd_video_checkmode: ref;

axiom pd_video_checkmode == $sub.ref(0, 255467);

procedure pd_video_checkmode($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.0, $CurrAddr;



implementation pd_video_checkmode($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $p32: ref;
  var $i33: i64;
  var $i34: i32;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $i16: i32;
  var vslice_dummy_var_85: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $M.4 := $store.i64($M.4, $p2, 1);
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} $p3 := get_current();
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 9568)), $mul.ref(0, 1));
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    $i5 := $load.i64($M.4, $p2);
    call {:si_unique_call 170} $i6 := devirtbounce(0, $p4, $i5, $p4);
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    $M.4 := $store.i64($M.4, $p2, $i6);
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} vslice_dummy_var_85 := schedule_timeout(125);
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(512, 1));
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(528, 1));
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    $i13 := (if $i12 == 1 then 1 else 2);
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} $i14 := usb_set_interface($p9, 0, $i13);
    call {:si_unique_call 173} {:cexpr "ret"} boogie_si_record_i32($i14);
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i14, 0);
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} $i17 := set_tuner_mode($p0, 1);
    call {:si_unique_call 175} {:cexpr "ret"} boogie_si_record_i32($i17);
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} $i18 := send_set_req($p0, 19, 1, $p1);
    call {:si_unique_call 177} {:cexpr "tmp___3"} boogie_si_record_i32($i18);
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    $i19 := $or.i32($i18, $i17);
    call {:si_unique_call 178} {:cexpr "ret"} boogie_si_record_i32($i19);
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 179} $i20 := send_set_req($p0, 20, 32, $p1);
    call {:si_unique_call 180} {:cexpr "tmp___4"} boogie_si_record_i32($i20);
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    $i21 := $or.i32($i20, $i19);
    call {:si_unique_call 181} {:cexpr "ret"} boogie_si_record_i32($i21);
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} $i22 := send_set_req($p0, 21, 1, $p1);
    call {:si_unique_call 183} {:cexpr "tmp___5"} boogie_si_record_i32($i22);
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $i23 := $or.i32($i22, $i21);
    call {:si_unique_call 184} {:cexpr "ret"} boogie_si_record_i32($i23);
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} $i24 := send_set_req($p0, 23, 1, $p1);
    call {:si_unique_call 186} {:cexpr "tmp___6"} boogie_si_record_i32($i24);
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    $i25 := $or.i32($i24, $i23);
    call {:si_unique_call 187} {:cexpr "ret"} boogie_si_record_i32($i25);
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} $i26 := send_set_req($p0, 18, 45000000, $p1);
    call {:si_unique_call 189} {:cexpr "tmp___7"} boogie_si_record_i32($i26);
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    $i27 := $or.i32($i26, $i25);
    call {:si_unique_call 190} {:cexpr "ret"} boogie_si_record_i32($i27);
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} $i28 := send_set_req($p0, 37, 1, $p1);
    call {:si_unique_call 192} {:cexpr "tmp___8"} boogie_si_record_i32($i28);
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    $i29 := $or.i32($i28, $i27);
    call {:si_unique_call 193} {:cexpr "ret"} boogie_si_record_i32($i29);
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    $i33 := $load.i64($M.0, $p32);
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} $i34 := get_audio_std($i33);
    call {:si_unique_call 195} {:cexpr "audiomode"} boogie_si_record_i32($i34);
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 196} $i35 := send_set_req($p0, 44, $i34, $p1);
    call {:si_unique_call 197} {:cexpr "tmp___9"} boogie_si_record_i32($i35);
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    $i36 := $or.i32($i35, $i29);
    call {:si_unique_call 198} {:cexpr "ret"} boogie_si_record_i32($i36);
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 199} $i37 := send_set_req($p0, 42, 2, $p1);
    call {:si_unique_call 200} {:cexpr "tmp___10"} boogie_si_record_i32($i37);
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    $i38 := $or.i32($i37, $i36);
    call {:si_unique_call 201} {:cexpr "ret"} boogie_si_record_i32($i38);
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} $i39 := send_set_req($p0, 41, 2, $p1);
    call {:si_unique_call 203} {:cexpr "tmp___11"} boogie_si_record_i32($i39);
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    $i40 := $or.i32($i39, $i38);
    call {:si_unique_call 204} {:cexpr "ret"} boogie_si_record_i32($i40);
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    $i16 := $i40;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb2:
    assume $i15 == 1;
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    $i16 := $i14;
    goto $bb4;
}



const set_debug_mode: ref;

axiom set_debug_mode == $sub.ref(0, 256499);

procedure set_debug_mode($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation set_debug_mode($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} {:cexpr "set_debug_mode:arg:debug_mode___0"} boogie_si_record_i32($i1);
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1328)), $mul.ref(1280, 1));
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 0);
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i1, 1);
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i1, 2);
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1328)), $mul.ref(1280, 1));
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, 3);
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1328)), $mul.ref(1280, 1));
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, 1);
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const videobuf_queue_vmalloc_init: ref;

axiom videobuf_queue_vmalloc_init == $sub.ref(0, 257531);

procedure videobuf_queue_vmalloc_init($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i32, $i5: i32, $i6: i32, $p7: ref, $p8: ref);
  free requires assertsPassed;



implementation videobuf_queue_vmalloc_init($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i32, $i5: i32, $i6: i32, $p7: ref, $p8: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} {:cexpr "videobuf_queue_vmalloc_init:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 207} {:cexpr "videobuf_queue_vmalloc_init:arg:arg5"} boogie_si_record_i32($i5);
    call {:si_unique_call 208} {:cexpr "videobuf_queue_vmalloc_init:arg:arg6"} boogie_si_record_i32($i6);
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    return;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 258563);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 259595);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    return;
}



const kref_get: ref;

axiom kref_get == $sub.ref(0, 260627);

procedure kref_get($p0: ref);
  free requires assertsPassed;



implementation kref_get($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_unlock_28: ref;

axiom ldv_mutex_unlock_28 == $sub.ref(0, 261659);

procedure ldv_mutex_unlock_28($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_unlock_28($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} ldv_mutex_unlock_lock_of_poseidon($p0);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 210} mutex_unlock($p0);
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_34:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_29: ref;

axiom ldv_mutex_unlock_29 == $sub.ref(0, 262691);

procedure ldv_mutex_unlock_29($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_unlock_29($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} ldv_mutex_unlock_lock_of_poseidon($p0);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} mutex_unlock($p0);
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_37:
    assume !assertsPassed;
    return;
}



const get_current: ref;

axiom get_current == $sub.ref(0, 263723);

procedure get_current() returns ($r: ref);
  free requires assertsPassed;



implementation get_current() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 213} $p0 := devirtbounce.1(0, current_task);
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const schedule_timeout: ref;

axiom schedule_timeout == $sub.ref(0, 264755);

procedure schedule_timeout($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation schedule_timeout($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 214} {:cexpr "schedule_timeout:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 1} true;
    call {:si_unique_call 215} $i1 := __VERIFIER_nondet_long();
    call {:si_unique_call 216} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i1);
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const usb_set_interface: ref;

axiom usb_set_interface == $sub.ref(0, 265787);

procedure usb_set_interface($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_set_interface($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 217} {:cexpr "usb_set_interface:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 218} {:cexpr "usb_set_interface:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 1} true;
    call {:si_unique_call 219} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 220} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const set_tuner_mode: ref;

axiom set_tuner_mode == $sub.ref(0, 266819);

procedure set_tuner_mode($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation set_tuner_mode($p0: ref, $i1: i8) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 222} {:cexpr "set_tuner_mode:arg:mode"} boogie_si_record_i8($i1);
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(3736, 1));
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 128);
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i1);
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} $i9 := send_set_req($p0, 17, $i8, $p2);
    call {:si_unique_call 224} {:cexpr "ret"} boogie_si_record_i32($i9);
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i10 == 1);
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p2);
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 6);
    goto $bb3;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb6;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 19);
    goto $bb3;
}



const get_audio_std: ref;

axiom get_audio_std == $sub.ref(0, 267851);

procedure get_audio_std($i0: i64) returns ($r: i32);
  free requires assertsPassed;



implementation get_audio_std($i0: i64) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i64;
  var $i10: i1;
  var $i11: i64;
  var $i12: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 225} {:cexpr "get_audio_std:arg:v4l2_std"} boogie_si_record_i64($i0);
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i1 := $and.i64(4325425, $i0);
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    $i3 := 0;
    assume {:branchcond $i2} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i9 := $and.i64(4864, $i0);
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    $i3 := 1;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i11 := $and.i64(8192, $i0);
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    $i3 := 2;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref(video_to_audio_map, $mul.ref(0, 48)), $mul.ref($i4, 16)), $mul.ref(8, 1));
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.6, $p6);
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    $i8 := $i7;
    goto $bb6;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb4;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb4;
}



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 268883);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 226} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 227} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 228} $p2 := __kmalloc($i0, $i1);
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 269915);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 229} $p1 := external_alloc();
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 270947);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 1} true;
    call {:si_unique_call 230} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 231} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const videobuf_mmap_mapper: ref;

axiom videobuf_mmap_mapper == $sub.ref(0, 271979);

procedure videobuf_mmap_mapper($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation videobuf_mmap_mapper($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 1} true;
    call {:si_unique_call 232} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 233} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const videobuf_poll_stream: ref;

axiom videobuf_poll_stream == $sub.ref(0, 273011);

procedure videobuf_poll_stream($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation videobuf_poll_stream($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 1} true;
    call {:si_unique_call 234} $i3 := __VERIFIER_nondet_uint();
    call {:si_unique_call 235} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i3);
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const videobuf_read_stream: ref;

axiom videobuf_read_stream == $sub.ref(0, 274043);

procedure videobuf_read_stream($p0: ref, $p1: ref, $i2: i64, $p3: ref, $i4: i32, $i5: i32) returns ($r: i64);
  free requires assertsPassed;



implementation videobuf_read_stream($p0: ref, $p1: ref, $i2: i64, $p3: ref, $i4: i32, $i5: i32) returns ($r: i64)
{
  var $i6: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 236} {:cexpr "videobuf_read_stream:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 237} {:cexpr "videobuf_read_stream:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 238} {:cexpr "videobuf_read_stream:arg:arg5"} boogie_si_record_i32($i5);
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 1} true;
    call {:si_unique_call 239} $i6 := __VERIFIER_nondet_long();
    call {:si_unique_call 240} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i6);
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const vidioc_querycap: ref;

axiom vidioc_querycap == $sub.ref(0, 275075);

procedure vidioc_querycap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vidioc_querycap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p20: ref;
  var $p21: ref;
  var $p23: ref;
  var $p24: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p31: ref;
  var $p32: ref;
  var vslice_dummy_var_86: i32;
  var vslice_dummy_var_87: i32;
  var vslice_dummy_var_88: ref;
  var vslice_dummy_var_89: ref;
  var vslice_dummy_var_90: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 736)), $mul.ref(728, 1));
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    $i6 := $M.2;
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 4);
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i13 := $M.2;
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 8);
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(0, 1));
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 243} vslice_dummy_var_88 := strcpy($p21, .str.52);
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(16, 1));
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} vslice_dummy_var_89 := strcpy($p24, .str.53);
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p5, $mul.ref(0, 3864)), $mul.ref(512, 1));
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(48, 1));
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 245} vslice_dummy_var_90 := usb_make_path($p27, $p29, 32);
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(80, 1));
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, 1);
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(84, 1));
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, 84082705);
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb7:
    assume $i15 == 1;
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 1);
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb9;

  $bb10:
    assume $i18 == 1;
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 242} vslice_dummy_var_87 := printk.ref.ref.i32(.str.31, .str.51, 244);
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 4);
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} vslice_dummy_var_86 := printk.ref.ref.i32(.str.29, .str.51, 244);
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const vidioc_enum_fmt: ref;

axiom vidioc_enum_fmt == $sub.ref(0, 276107);

procedure vidioc_enum_fmt($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vidioc_enum_fmt($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i64;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i64;
  var $p22: ref;
  var $p23: ref;
  var $i6: i32;
  var vslice_dummy_var_91: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    $i5 := $ugt.i32($i4, 1);
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(4, 1));
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, 1);
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, 0);
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    $i11 := $zext.i32.i64($i10);
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref(poseidon_formats, $mul.ref(0, 48)), $mul.ref($i11, 24)), $mul.ref(8, 1));
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.7, $p13);
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(44, 1));
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, $i14);
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(12, 1));
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $i20 := $zext.i32.i64($i19);
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref(poseidon_formats, $mul.ref(0, 48)), $mul.ref($i20, 24)), $mul.ref(0, 1));
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.8, $p22);
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} vslice_dummy_var_91 := strcpy($p17, $p23);
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;
}



const vidioc_g_fmt: ref;

axiom vidioc_g_fmt == $sub.ref(0, 277139);

procedure vidioc_g_fmt($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vidioc_g_fmt($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p20: ref;
  var $p21: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;
  var cmdloc_dummy_var_11: [ref]i8;
  var vslice_dummy_var_92: i32;
  var vslice_dummy_var_93: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 736)), $mul.ref(728, 1));
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $i6 := $M.2;
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 4);
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i13 := $M.2;
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 8);
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(8, 1)), $mul.ref(20, 1));
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p21);
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p24);
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_9 := $M.0;
    cmdloc_dummy_var_10 := $M.0;
    call {:si_unique_call 249} cmdloc_dummy_var_11 := $memcpy.i8(cmdloc_dummy_var_9, cmdloc_dummy_var_10, $p25, $p26, 32, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_11;
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb7:
    assume $i15 == 1;
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 1);
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb9;

  $bb10:
    assume $i18 == 1;
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} vslice_dummy_var_93 := printk.ref.ref.i32(.str.31, .str.48, 818);
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 4);
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} vslice_dummy_var_92 := printk.ref.ref.i32(.str.29, .str.48, 818);
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const vidioc_g_fmt_vbi: ref;

axiom vidioc_g_fmt_vbi == $sub.ref(0, 278171);

procedure vidioc_g_fmt_vbi($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vidioc_g_fmt_vbi($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $p19: ref;
  var $p21: ref;
  var $p23: ref;
  var $p25: ref;
  var $p27: ref;
  var $p29: ref;
  var $p31: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $i42: i32;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $i46: i32;
  var $i47: i1;
  var vslice_dummy_var_94: i32;
  var vslice_dummy_var_95: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 736)), $mul.ref(728, 1));
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, 1440);
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p7, $mul.ref(0, 44)), $mul.ref(0, 1));
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, 27000000);
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p7, $mul.ref(0, 44)), $mul.ref(12, 1));
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, 1497715271);
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p7, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, 256);
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.0, $p14);
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    $i16 := $and.i64($i15, 63744);
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 44)), $mul.ref(16, 1)), $mul.ref(0, 4));
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, 6);
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 44)), $mul.ref(16, 1)), $mul.ref(1, 4));
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, 314);
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 44)), $mul.ref(24, 1)), $mul.ref(0, 4));
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, 18);
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 44)), $mul.ref(24, 1)), $mul.ref(1, 4));
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, 18);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p7, $mul.ref(0, 44)), $mul.ref(32, 1));
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, 1);
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    $i35 := $M.2;
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    $i36 := $and.i32($i35, 4);
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i42 := $M.2;
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    $i43 := $and.i32($i42, 8);
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb10:
    assume $i44 == 1;
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p3, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i46, 1);
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i47 == 1);
    goto $bb12;

  $bb13:
    assume $i47 == 1;
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} vslice_dummy_var_95 := printk.ref.ref.i32(.str.31, .str.61, 930);
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb4:
    assume $i37 == 1;
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p3, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 4);
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb6;

  $bb7:
    assume $i40 == 1;
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} vslice_dummy_var_94 := printk.ref.ref.i32(.str.29, .str.61, 930);
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 44)), $mul.ref(16, 1)), $mul.ref(0, 4));
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, 10);
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 44)), $mul.ref(16, 1)), $mul.ref(1, 4));
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, 264);
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 44)), $mul.ref(24, 1)), $mul.ref(0, 4));
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, 12);
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 44)), $mul.ref(24, 1)), $mul.ref(1, 4));
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, 12);
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vidioc_s_fmt: ref;

axiom vidioc_s_fmt == $sub.ref(0, 279203);

procedure vidioc_s_fmt($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, assertsPassed, $CurrAddr;



implementation vidioc_s_fmt($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i64;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p39: ref;
  var $i23: i32;
  var vslice_dummy_var_96: i32;
  var vslice_dummy_var_97: i32;
  var vslice_dummy_var_98: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 736)), $mul.ref(728, 1));
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    $i6 := $M.2;
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 4);
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i13 := $M.2;
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 8);
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(0, 1));
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 1);
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p5, $mul.ref(0, 3864)), $mul.ref(16, 1));
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 254} ldv_mutex_lock_8($p24);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p5, $mul.ref(0, 3864)), $mul.ref(3744, 1));
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    $i28 := $eq.i64($i27, 0);
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i28 == 1);
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p5, $mul.ref(0, 3864)), $mul.ref(3744, 1));
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p31);
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p0);
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i32, $i33);
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 255} vslice_dummy_var_98 := pd_vidioc_s_fmt($p5, $p37);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p5, $mul.ref(0, 3864)), $mul.ref(16, 1));
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} ldv_mutex_unlock_10($p39);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    $i23 := 0;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    $r := $i23;
    return;

  SeqInstr_46:
    assume !assertsPassed;
    return;

  SeqInstr_43:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i34 == 1;
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p5, $mul.ref(0, 3864)), $mul.ref(16, 1));
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} ldv_mutex_unlock_9($p35);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $i23 := $sub.i32(0, 22);
    goto $bb15;

  SeqInstr_49:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i28 == 1;
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p5, $mul.ref(0, 3864)), $mul.ref(3744, 1));
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p29, $p0);
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_40:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i22 == 1;
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    $i23 := $sub.i32(0, 22);
    goto $bb15;

  $bb7:
    assume $i15 == 1;
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 1);
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb9;

  $bb10:
    assume $i18 == 1;
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 253} vslice_dummy_var_97 := printk.ref.ref.i32(.str.31, .str.47, 889);
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 4);
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} vslice_dummy_var_96 := printk.ref.ref.i32(.str.29, .str.47, 889);
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const vidioc_try_fmt: ref;

axiom vidioc_try_fmt == $sub.ref(0, 280235);

procedure vidioc_try_fmt($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vidioc_try_fmt($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const vidioc_reqbufs: ref;

axiom vidioc_reqbufs == $sub.ref(0, 281267);

procedure vidioc_reqbufs($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vidioc_reqbufs($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p20: ref;
  var $i21: i32;
  var vslice_dummy_var_99: i32;
  var vslice_dummy_var_100: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 336)), $mul.ref(296, 1));
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    $i6 := $M.2;
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 4);
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i13 := $M.2;
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 8);
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p5, $mul.ref(0, 736)), $mul.ref(8, 1));
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} $i21 := videobuf_reqbufs($p20, $p2);
    call {:si_unique_call 261} {:cexpr "tmp"} boogie_si_record_i32($i21);
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;

  $bb7:
    assume $i15 == 1;
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 1);
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb9;

  $bb10:
    assume $i18 == 1;
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} vslice_dummy_var_100 := printk.ref.ref.i32(.str.31, .str.35, 1267);
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 4);
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 258} vslice_dummy_var_99 := printk.ref.ref.i32(.str.29, .str.35, 1267);
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const vidioc_querybuf: ref;

axiom vidioc_querybuf == $sub.ref(0, 282299);

procedure vidioc_querybuf($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vidioc_querybuf($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p20: ref;
  var $i21: i32;
  var vslice_dummy_var_101: i32;
  var vslice_dummy_var_102: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 336)), $mul.ref(296, 1));
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    $i6 := $M.2;
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 4);
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i13 := $M.2;
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 8);
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p5, $mul.ref(0, 736)), $mul.ref(8, 1));
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} $i21 := videobuf_querybuf($p20, $p2);
    call {:si_unique_call 265} {:cexpr "tmp"} boogie_si_record_i32($i21);
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;

  $bb7:
    assume $i15 == 1;
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 1);
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb9;

  $bb10:
    assume $i18 == 1;
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} vslice_dummy_var_102 := printk.ref.ref.i32(.str.31, .str.43, 1274);
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 4);
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 262} vslice_dummy_var_101 := printk.ref.ref.i32(.str.29, .str.43, 1274);
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const vidioc_qbuf: ref;

axiom vidioc_qbuf == $sub.ref(0, 283331);

procedure vidioc_qbuf($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vidioc_qbuf($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 336)), $mul.ref(296, 1));
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 736)), $mul.ref(8, 1));
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} $i7 := videobuf_qbuf($p6, $p2);
    call {:si_unique_call 267} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const vidioc_dqbuf: ref;

axiom vidioc_dqbuf == $sub.ref(0, 284363);

procedure vidioc_dqbuf($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vidioc_dqbuf($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 336)), $mul.ref(296, 1));
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 736)), $mul.ref(8, 1));
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 336)), $mul.ref(128, 1));
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 2048);
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} $i10 := videobuf_dqbuf($p6, $p2, $i9);
    call {:si_unique_call 269} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const vidioc_streamon: ref;

axiom vidioc_streamon == $sub.ref(0, 285395);

procedure vidioc_streamon($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation vidioc_streamon($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $p26: ref;
  var $i27: i32;
  var $i25: i32;
  var vslice_dummy_var_103: i32;
  var vslice_dummy_var_104: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 270} {:cexpr "vidioc_streamon:arg:type"} boogie_si_record_i32($i2);
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    $i4 := $M.2;
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 4);
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i11 := $M.2;
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 8);
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, $i2);
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    $i21 := $zext.i1.i32($i20);
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i21);
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 273} $i23 := ldv__builtin_expect($i22, 0);
    call {:si_unique_call 274} {:cexpr "tmp"} boogie_si_record_i64($i23);
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 736)), $mul.ref(8, 1));
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} $i27 := videobuf_streamon($p26);
    call {:si_unique_call 276} {:cexpr "tmp___0"} boogie_si_record_i32($i27);
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    $i25 := $i27;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;

  $bb13:
    assume $i24 == 1;
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32(0, 22);
    goto $bb15;

  $bb7:
    assume $i13 == 1;
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 1);
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb9;

  $bb10:
    assume $i16 == 1;
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 272} vslice_dummy_var_104 := printk.ref.ref.i32(.str.31, .str.62, 1363);
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 4);
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} vslice_dummy_var_103 := printk.ref.ref.i32(.str.29, .str.62, 1363);
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const vidioc_streamoff: ref;

axiom vidioc_streamoff == $sub.ref(0, 286427);

procedure vidioc_streamoff($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation vidioc_streamoff($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i64;
  var $i25: i64;
  var $i26: i1;
  var $p28: ref;
  var $i29: i32;
  var $i27: i32;
  var vslice_dummy_var_105: i32;
  var vslice_dummy_var_106: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 277} {:cexpr "vidioc_streamoff:arg:type"} boogie_si_record_i32($i2);
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 336)), $mul.ref(296, 1));
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    $i6 := $M.2;
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 4);
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i13 := $M.2;
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 8);
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p5, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, $i2);
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $i23 := $zext.i1.i32($i22);
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64($i23);
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} $i25 := ldv__builtin_expect($i24, 0);
    call {:si_unique_call 281} {:cexpr "tmp"} boogie_si_record_i64($i25);
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p5, $mul.ref(0, 736)), $mul.ref(8, 1));
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} $i29 := videobuf_streamoff($p28);
    call {:si_unique_call 283} {:cexpr "tmp___0"} boogie_si_record_i32($i29);
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $i27 := $i29;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    $r := $i27;
    return;

  $bb13:
    assume $i26 == 1;
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32(0, 22);
    goto $bb15;

  $bb7:
    assume $i15 == 1;
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 1);
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb9;

  $bb10:
    assume $i18 == 1;
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 279} vslice_dummy_var_106 := printk.ref.ref.i32(.str.31, .str.44, 1374);
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 4);
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} vslice_dummy_var_105 := printk.ref.ref.i32(.str.29, .str.44, 1374);
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const vidioc_s_std: ref;

axiom vidioc_s_std == $sub.ref(0, 287459);

procedure vidioc_s_std($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $CurrAddr, assertsPassed;



implementation vidioc_s_std($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var vslice_dummy_var_107: i32;
  var vslice_dummy_var_108: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    $i4 := $M.2;
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 4);
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i11 := $M.2;
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 8);
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 736)), $mul.ref(728, 1));
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} $i20 := set_std($p19, $p2);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    call {:si_unique_call 287} {:cexpr "tmp"} boogie_si_record_i32($i20);
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  SeqInstr_52:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i13 == 1;
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 1);
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb9;

  $bb10:
    assume $i16 == 1;
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} vslice_dummy_var_108 := printk.ref.ref.i32(.str.31, .str.39, 982);
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 4);
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} vslice_dummy_var_107 := printk.ref.ref.i32(.str.29, .str.39, 982);
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const vidioc_enum_input: ref;

axiom vidioc_enum_input == $sub.ref(0, 288491);

procedure vidioc_enum_input($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vidioc_enum_input($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i64;
  var $p14: ref;
  var $p15: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $i7: i32;
  var vslice_dummy_var_109: ref;
  var vslice_dummy_var_110: i32;
  var vslice_dummy_var_111: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    $i6 := $uge.i32($i5, 4);
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(4, 1));
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    $i12 := $zext.i32.i64($i11);
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref(pd_inputs, $mul.ref(0, 64)), $mul.ref($i12, 16)), $mul.ref(0, 1));
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.9, $p14);
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} vslice_dummy_var_109 := strcpy($p9, $p15);
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(36, 1));
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, 1);
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(40, 1));
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, 0);
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(44, 1));
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, 0);
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(48, 1));
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p20, 16777215);
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(56, 1));
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, 0);
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    $i22 := $M.2;
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i22, 4);
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i29 := $M.2;
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    $i30 := $and.i32($i29, 8);
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb11:
    assume $i31 == 1;
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p3, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 1);
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb13;

  $bb14:
    assume $i34 == 1;
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} vslice_dummy_var_111 := printk.ref.ref.i32(.str.31, .str.56, 1003);
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb5:
    assume $i24 == 1;
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 4);
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb7;

  $bb8:
    assume $i27 == 1;
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} vslice_dummy_var_110 := printk.ref.ref.i32(.str.29, .str.56, 1003);
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb3;
}



const vidioc_g_input: ref;

axiom vidioc_g_input == $sub.ref(0, 289523);

procedure vidioc_g_input($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vidioc_g_input($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p22: ref;
  var $i23: i32;
  var vslice_dummy_var_112: i32;
  var vslice_dummy_var_113: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 736)), $mul.ref(728, 1));
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    $i8 := $M.2;
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 4);
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i15 := $M.2;
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, 8);
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    $p22 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(8, 1)), $mul.ref(16, 1));
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i23);
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb7:
    assume $i17 == 1;
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 1);
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb9;

  $bb10:
    assume $i20 == 1;
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} vslice_dummy_var_113 := printk.ref.ref.i32(.str.31, .str.49, 1013);
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 4);
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb3;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} vslice_dummy_var_112 := printk.ref.ref.i32(.str.29, .str.49, 1013);
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const vidioc_s_input: ref;

axiom vidioc_s_input == $sub.ref(0, 290555);

procedure vidioc_s_input($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation vidioc_s_input($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $i9: i64;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $p17: ref;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 294} {:cexpr "vidioc_s_input:arg:i"} boogie_si_record_i32($i2);
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 736)), $mul.ref(728, 1));
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $i7 := $uge.i32($i2, 4);
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i9 := $zext.i32.i64($i2);
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref(pd_inputs, $mul.ref(0, 64)), $mul.ref($i9, 16)), $mul.ref(8, 1));
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.10, $p11);
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} $i13 := send_set_req($p6, 19, $i12, $p3);
    call {:si_unique_call 296} {:cexpr "ret"} boogie_si_record_i32($i13);
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($add.ref($p6, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(8, 1)), $mul.ref(16, 1));
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, $i2);
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    $i8 := $i13;
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 22);
    goto $bb3;
}



const vidioc_queryctrl: ref;

axiom vidioc_queryctrl == $sub.ref(0, 291587);

procedure vidioc_queryctrl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vidioc_queryctrl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i8: i32;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;
  var cmdloc_dummy_var_14: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(0, 1));
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 297} $p5 := check_control_id($i4);
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p9);
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_12 := $M.0;
    cmdloc_dummy_var_13 := $M.0;
    call {:si_unique_call 298} cmdloc_dummy_var_14 := $memcpy.i8(cmdloc_dummy_var_12, cmdloc_dummy_var_13, $p10, $p11, 68, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_14;
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 22);
    goto $bb3;
}



const vidioc_g_ctrl: ref;

axiom vidioc_g_ctrl == $sub.ref(0, 292619);

procedure vidioc_g_ctrl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $CurrAddr, assertsPassed;



implementation vidioc_g_ctrl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $i20: i1;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i16;
  var $i25: i32;
  var $p26: ref;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 299} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 300} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p1);
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 736)), $mul.ref(728, 1));
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 301} $p10 := check_control_id($i9);
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p7, $mul.ref(0, 3864)), $mul.ref(16, 1));
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} ldv_mutex_lock_13($p14);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p10, $mul.ref(0, 72)), $mul.ref(68, 1));
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p3);
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 303} $i18 := send_get_req($p7, 47, $i16, $p17, $p4, 4);
    call {:si_unique_call 304} {:cexpr "ret"} boogie_si_record_i32($i18);
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p7, $mul.ref(0, 3864)), $mul.ref(16, 1));
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} ldv_mutex_unlock_14($p19);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i18, 0);
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i20 == 1);
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p4);
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $i24 := $load.i16($M.0, $p23);
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i32($i24);
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, $i25);
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 1);
    goto $bb3;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb6;

  SeqInstr_58:
    assume !assertsPassed;
    return;

  SeqInstr_55:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 22);
    goto $bb3;
}



const vidioc_s_ctrl: ref;

axiom vidioc_s_ctrl == $sub.ref(0, 293651);

procedure vidioc_s_ctrl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.11, $M.0, $M.12, $M.3, $CurrAddr, assertsPassed;



implementation vidioc_s_ctrl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i16;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i16;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i64;
  var $i16: i32;
  var vslice_dummy_var_114: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 306} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    $M.11 := $store.i16($M.11, $p6, 0);
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    $M.11 := $store.i16($M.11, $p7, 0);
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 736)), $mul.ref(728, 1));
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 309} $p13 := check_control_id($i12);
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i16($i18);
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    $M.11 := $store.i16($M.11, $p20, $i19);
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p13, $mul.ref(0, 72)), $mul.ref(68, 1));
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i32.i16($i22);
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $M.11 := $store.i16($M.11, $p24, $i23);
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p3);
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.11, $p25);
    call {:si_unique_call 310} {:cexpr "params"} boogie_si_record_i32($i26);
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p10, $mul.ref(0, 3864)), $mul.ref(16, 1));
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 311} ldv_mutex_lock_15($p27);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 312} $i28 := send_set_req($p10, 47, $i26, $p4);
    call {:si_unique_call 313} {:cexpr "ret"} boogie_si_record_i32($i28);
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} $i29 := send_set_req($p10, 67, 0, $p4);
    call {:si_unique_call 315} {:cexpr "ret"} boogie_si_record_i32($i29);
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p10, $mul.ref(0, 3864)), $mul.ref(16, 1));
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} ldv_mutex_unlock_16($p30);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $M.12 := $store.i64($M.12, $p5, 1);
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} $p31 := get_current();
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 9568)), $mul.ref(0, 1));
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    $i33 := $load.i64($M.12, $p5);
    call {:si_unique_call 318} $i34 := devirtbounce(0, $p32, $i33, $p32);
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    $M.12 := $store.i64($M.12, $p5, $i34);
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 319} vslice_dummy_var_114 := schedule_timeout(62);
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    $i16 := $i29;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  SeqInstr_64:
    assume !assertsPassed;
    return;

  SeqInstr_61:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 22);
    goto $bb3;
}



const vidioc_enumaudio: ref;

axiom vidioc_enumaudio == $sub.ref(0, 294683);

procedure vidioc_enumaudio($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vidioc_enumaudio($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $i6: i32;
  var vslice_dummy_var_115: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(0, 1));
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(36, 1));
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, 1);
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(4, 1));
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} vslice_dummy_var_115 := strcpy($p9, .str.50);
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(40, 1));
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, 0);
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;
}



const vidioc_g_audio: ref;

axiom vidioc_g_audio == $sub.ref(0, 295715);

procedure vidioc_g_audio($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vidioc_g_audio($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var vslice_dummy_var_116: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(0, 1));
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, 0);
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(36, 1));
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, 1);
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(4, 1));
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} vslice_dummy_var_116 := strcpy($p6, .str.50);
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(40, 1));
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, 0);
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const vidioc_s_audio: ref;

axiom vidioc_s_audio == $sub.ref(0, 296747);

procedure vidioc_s_audio($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vidioc_s_audio($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(0, 1));
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    $i6 := (if $i5 == 1 then 0 else $sub.i32(0, 22));
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const vidioc_g_tuner: ref;

axiom vidioc_g_tuner == $sub.ref(0, 297779);

procedure vidioc_g_tuner($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.13, $M.0, $M.3, $CurrAddr, assertsPassed;



implementation vidioc_g_tuner($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i64;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $i20: i32;
  var $i21: i32;
  var $i32: i32;
  var $i33: i1;
  var $i35: i1;
  var $i36: i32;
  var $i34: i32;
  var $i31: i32;
  var $i19: i32;
  var $i37: i32;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $i42: i32;
  var $p43: ref;
  var $i44: i32;
  var $i46: i1;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $p57: ref;
  var $i58: i32;
  var $i59: i32;
  var $i60: i32;
  var $i61: i32;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p72: ref;
  var $i73: i32;
  var $i74: i64;
  var $p76: ref;
  var $i77: i32;
  var $p78: ref;
  var $i79: i64;
  var $p81: ref;
  var $i82: i32;
  var $p83: ref;
  var $p84: ref;
  var $i85: i32;
  var $i86: i32;
  var $i87: i1;
  var $p88: ref;
  var $i89: i32;
  var $i90: i1;
  var $i92: i32;
  var $i93: i32;
  var $i94: i1;
  var $p95: ref;
  var $i96: i32;
  var $i97: i1;
  var $i12: i32;
  var vslice_dummy_var_117: i64;
  var vslice_dummy_var_118: i32;
  var vslice_dummy_var_119: ref;
  var vslice_dummy_var_120: i32;
  var vslice_dummy_var_121: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} $p3 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 736)), $mul.ref(728, 1));
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 84)), $mul.ref(0, 1));
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p8, $mul.ref(0, 3864)), $mul.ref(16, 1));
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} ldv_mutex_lock_17($p13);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p3);
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} $i15 := send_get_req($p8, 69, 1, $p14, $p4, 24);
    call {:si_unique_call 327} {:cexpr "ret"} boogie_si_record_i32($i15);
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    $i19 := $i15;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i37 := $i19;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p8, $mul.ref(0, 3864)), $mul.ref(16, 1));
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} ldv_mutex_unlock_18($p38);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    $i39 := $M.2;
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i37, 0);
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb24;

  $bb24:
    assume !($i46 == 1);
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p4);
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i48 == 1);
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i52 == 1);
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.0, $p57);
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    $i59 := $mul.i32($i58, 255);
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $i60 := $udiv.i32($i59, 10);
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    $i61 := $shl.i32($i60, 8);
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p2, $mul.ref(0, 84)), $mul.ref(60, 1));
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p62, $i61);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p2, $mul.ref(0, 84)), $mul.ref(4, 1));
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p63);
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} vslice_dummy_var_119 := strcpy($p64, .str.38);
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p2, $mul.ref(0, 84)), $mul.ref(36, 1));
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p66, 2);
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p2, $mul.ref(0, 84)), $mul.ref(44, 1));
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p67, 720);
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p2, $mul.ref(0, 84)), $mul.ref(48, 1));
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p68, 13792);
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p2, $mul.ref(0, 84)), $mul.ref(40, 1));
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p69, 114);
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($add.ref($p8, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(8, 1)), $mul.ref(4, 1));
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.0, $p72);
    call {:si_unique_call 337} {:cexpr "index"} boogie_si_record_i32($i73);
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    $i74 := $sext.i32.i64($i73);
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref(pd_audio_modes, $mul.ref(0, 60)), $mul.ref($i74, 12)), $mul.ref(4, 1));
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.14, $p76);
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p2, $mul.ref(0, 84)), $mul.ref(52, 1));
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p78, $i77);
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $i79 := $sext.i32.i64($i73);
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref(pd_audio_modes, $mul.ref(0, 60)), $mul.ref($i79, 12)), $mul.ref(8, 1));
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.15, $p81);
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p2, $mul.ref(0, 84)), $mul.ref(56, 1));
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p83, $i82);
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p2, $mul.ref(0, 84)), $mul.ref(64, 1));
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p84, 0);
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    $i85 := $M.2;
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $i86 := $and.i32($i85, 4);
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $i87 := $ne.i32($i86, 0);
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i87 == 1);
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i92 := $M.2;
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    $i93 := $and.i32($i92, 8);
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    $i94 := $ne.i32($i93, 0);
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume !($i94 == 1);
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb40:
    assume $i94 == 1;
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p6, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    $i96 := $load.i32($M.0, $p95);
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    $i97 := $eq.i32($i96, 1);
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume !($i97 == 1);
    goto $bb42;

  $bb43:
    assume $i97 == 1;
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} vslice_dummy_var_121 := printk.ref.ref.i32(.str.31, .str.37, 1181);
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb34:
    assume $i87 == 1;
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p6, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.0, $p88);
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    $i90 := $eq.i32($i89, 4);
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !($i90 == 1);
    goto $bb36;

  $bb37:
    assume $i90 == 1;
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 338} vslice_dummy_var_120 := printk.ref.ref.i32(.str.29, .str.37, 1181);
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb28:
    assume $i52 == 1;
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i54, 0);
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i55 == 1);
    goto $bb30;

  $bb31:
    assume $i55 == 1;
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p2, $mul.ref(0, 84)), $mul.ref(60, 1));
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p56, 65535);
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i48 == 1;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p2, $mul.ref(0, 84)), $mul.ref(60, 1));
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p49, 0);
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i46 == 1;
    goto $bb23;

  $bb19:
    assume $i40 == 1;
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} vslice_dummy_var_118 := printk.ref.ref.i32.i32.i32(.str.36, .str.37, 1162, $i42, $i44);
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    goto $bb21;

  SeqInstr_70:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i18 == 1;
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $i20, $i21 := $i15, 5;
    goto $bb8;

  $bb8:
    call $p22, $p23, $i24, $i25, $p27, $i28, $i29, $i30, $i20, $i21, $i32, $i33, $i35, $i36, $i34, $i31, vslice_dummy_var_117 := vidioc_g_tuner_loop_$bb8($p3, $p4, $p5, $p8, $p16, $p22, $p23, $i24, $i25, $p27, $i28, $i29, $i30, $i20, $i21, $i32, $i33, $i35, $i36, $i34, $i31, vslice_dummy_var_117);
    goto $bb8_last;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    $i32 := $sub.i32($i21, 1);
    call {:si_unique_call 328} {:cexpr "count"} boogie_si_record_i32($i32);
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i21, 0);
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    $i34 := $i20;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    $i37 := $i34;
    goto $bb17;

  $bb13:
    assume $i33 == 1;
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i20, 0);
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    $i36 := $i20;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    $i37 := $i36;
    goto $bb17;

  $bb15:
    assume $i35 == 1;
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $M.13 := $store.i64($M.13, $p5, 1);
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} $p22 := get_current();
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 9568)), $mul.ref(0, 1));
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    $i24 := $load.i64($M.13, $p5);
    call {:si_unique_call 330} $i25 := devirtbounce(0, $p23, $i24, $p23);
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    $M.13 := $store.i64($M.13, $p5, $i25);
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} vslice_dummy_var_117 := schedule_timeout(250);
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p3);
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} $i28 := send_get_req($p8, 69, 1, $p27, $p4, 24);
    call {:si_unique_call 333} {:cexpr "ret"} boogie_si_record_i32($i28);
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p16);
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $i31 := $i28;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    $i19 := $i31;
    goto $bb7;

  $bb11:
    assume $i30 == 1;
    assume {:verifier.code 0} true;
    $i20, $i21 := $i28, $i32;
    goto $bb11_dummy;

  SeqInstr_67:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 22);
    goto $bb3;

  $bb11_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1550;
}



const vidioc_s_tuner: ref;

axiom vidioc_s_tuner == $sub.ref(0, 298811);

procedure vidioc_s_tuner($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $CurrAddr, assertsPassed;



implementation vidioc_s_tuner($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i32;
  var $i9: i32;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var vslice_dummy_var_122: i32;
  var vslice_dummy_var_123: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 736)), $mul.ref(728, 1));
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 84)), $mul.ref(0, 1));
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i10 := $M.2;
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 4);
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i17 := $M.2;
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i17, 8);
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 84)), $mul.ref(56, 1));
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 0);
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $i27 := 0;
    assume true;
    goto $bb19, $bb21;

  $bb21:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 84)), $mul.ref(56, 1));
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 1);
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    $i27 := 1;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p2, $mul.ref(0, 84)), $mul.ref(56, 1));
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 3);
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    $i27 := 2;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p2, $mul.ref(0, 84)), $mul.ref(56, 1));
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 2);
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    $i27 := 3;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p2, $mul.ref(0, 84)), $mul.ref(56, 1));
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 4);
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    $i27 := 4;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 22);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb37:
    assume {:verifier.code 0} true;
    assume $i40 == 1;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} $i28 := pd_vidioc_s_tuner($p5, $i27);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    call {:si_unique_call 343} {:cexpr "tmp"} boogie_si_record_i32($i28);
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    $i9 := $i28;
    goto $bb3;

  SeqInstr_73:
    assume !assertsPassed;
    return;

  $bb33:
    assume {:verifier.code 0} true;
    assume $i37 == 1;
    goto $bb20;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i34 == 1;
    goto $bb20;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i31 == 1;
    goto $bb20;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb20;

  $bb11:
    assume $i19 == 1;
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 1);
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb13;

  $bb14:
    assume $i22 == 1;
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 341} vslice_dummy_var_123 := printk.ref.ref.i32(.str.31, .str.42, 1209);
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 4);
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb7;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} vslice_dummy_var_122 := printk.ref.ref.i32(.str.29, .str.42, 1209);
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 22);
    goto $bb3;
}



const vidioc_g_frequency: ref;

axiom vidioc_g_frequency == $sub.ref(0, 299843);

procedure vidioc_g_frequency($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vidioc_g_frequency($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 736)), $mul.ref(728, 1));
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(0, 1));
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    $p12 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, $i13);
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, 2);
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb3;
}



const vidioc_s_frequency: ref;

axiom vidioc_s_frequency == $sub.ref(0, 300875);

procedure vidioc_s_frequency($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $CurrAddr, assertsPassed;



implementation vidioc_s_frequency($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var vslice_dummy_var_124: i32;
  var vslice_dummy_var_125: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 736)), $mul.ref(728, 1));
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    $i6 := $M.2;
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 4);
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i13 := $M.2;
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 8);
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p5, $mul.ref(0, 3864)), $mul.ref(3752, 1));
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p21, pm_video_suspend);
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p5, $mul.ref(0, 3864)), $mul.ref(3760, 1));
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p23, pm_video_resume);
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} $i26 := set_frequency($p5, $i25);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    call {:si_unique_call 347} {:cexpr "tmp"} boogie_si_record_i32($i26);
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    $r := $i26;
    return;

  SeqInstr_76:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i15 == 1;
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 1);
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb9;

  $bb10:
    assume $i18 == 1;
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} vslice_dummy_var_125 := printk.ref.ref.i32(.str.31, .str.55, 1255);
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 4);
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} vslice_dummy_var_124 := printk.ref.ref.i32(.str.29, .str.55, 1255);
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const pm_video_suspend: ref;

axiom pm_video_suspend == $sub.ref(0, 301907);

procedure pm_video_suspend($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation pm_video_suspend($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var vslice_dummy_var_126: i32;
  var vslice_dummy_var_127: i32;
  var vslice_dummy_var_128: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} vslice_dummy_var_126 := pm_alsa_suspend($p0);
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(536, 1));
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 349} vslice_dummy_var_127 := usb_transfer_stop($p2);
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(536, 1));
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 350} free_all_urb($p4);
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(512, 1));
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} vslice_dummy_var_128 := usb_set_interface($p6, 0, 0);
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} msleep(300);
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const pm_video_resume: ref;

axiom pm_video_resume == $sub.ref(0, 302939);

procedure pm_video_resume($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.0, $M.3, $CurrAddr, assertsPassed;



implementation pm_video_resume($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var vslice_dummy_var_129: i32;
  var vslice_dummy_var_130: i32;
  var vslice_dummy_var_131: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(536, 1));
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(8, 1));
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} vslice_dummy_var_129 := restore_v4l2_context($p0, $p2);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(184, 1));
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 736)), $mul.ref(632, 1));
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 355} vslice_dummy_var_130 := start_video_stream($p0);
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} vslice_dummy_var_131 := pm_alsa_resume($p0);
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} init_copy($p1, 0);
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_79:
    assume !assertsPassed;
    return;
}



const set_frequency: ref;

axiom set_frequency == $sub.ref(0, 303971);

procedure set_frequency($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $CurrAddr, assertsPassed;



implementation set_frequency($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 358} {:cexpr "set_frequency:arg:frequency"} boogie_si_record_i32($i1);
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $i5 := $mul.i32($i1, 62500);
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    $i6 := $udiv.i32($i5, 1000);
    call {:si_unique_call 359} {:cexpr "param"} boogie_si_record_i32($i6);
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    $i7 := $sle.i32($i6, 44999);
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i7 == 1);
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    $i8 := $sgt.i32($i6, 862000);
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(16, 1));
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 360} ldv_mutex_lock_21($p10);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} $i11 := send_set_req($p0, 18, $i6, $p2);
    call {:si_unique_call 362} {:cexpr "ret"} boogie_si_record_i32($i11);
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 363} $i12 := send_set_req($p0, 67, 0, $p2);
    call {:si_unique_call 364} {:cexpr "ret"} boogie_si_record_i32($i12);
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 365} msleep(250);
    $p13 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, $i1);
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(16, 1));
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} ldv_mutex_unlock_22($p14);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    $i9 := $i12;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  SeqInstr_85:
    assume !assertsPassed;
    return;

  SeqInstr_82:
    assume !assertsPassed;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb2;
}



const ldv_mutex_lock_21: ref;

axiom ldv_mutex_lock_21 == $sub.ref(0, 305003);

procedure ldv_mutex_lock_21($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_lock_21($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} ldv_mutex_lock_lock_of_poseidon($p0);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} mutex_lock($p0);
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_88:
    assume !assertsPassed;
    return;
}



const msleep: ref;

axiom msleep == $sub.ref(0, 306035);

procedure msleep($i0: i32);
  free requires assertsPassed;



implementation msleep($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} {:cexpr "msleep:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_unlock_22: ref;

axiom ldv_mutex_unlock_22 == $sub.ref(0, 307067);

procedure ldv_mutex_unlock_22($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_unlock_22($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} ldv_mutex_unlock_lock_of_poseidon($p0);
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} mutex_unlock($p0);
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_91:
    assume !assertsPassed;
    return;
}



const restore_v4l2_context: ref;

axiom restore_v4l2_context == $sub.ref(0, 308099);

procedure restore_v4l2_context($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.0, $M.3, $CurrAddr, assertsPassed;



implementation restore_v4l2_context($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $p12: ref;
  var $i13: i32;
  var $p15: ref;
  var $p17: ref;
  var $i18: i32;
  var vslice_dummy_var_132: i32;
  var vslice_dummy_var_133: i32;
  var vslice_dummy_var_134: i32;
  var vslice_dummy_var_135: i32;
  var vslice_dummy_var_136: i32;
  var vslice_dummy_var_137: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(184, 1));
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} vslice_dummy_var_132 := pd_video_checkmode($p0);
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} vslice_dummy_var_133 := set_std($p0, $p6);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p4);
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 374} vslice_dummy_var_134 := vidioc_s_input($0.ref, $p8, $i10);
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(4, 1));
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} vslice_dummy_var_135 := pd_vidioc_s_tuner($p0, $i13);
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(20, 1));
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} vslice_dummy_var_136 := pd_vidioc_s_fmt($p0, $p15);
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} vslice_dummy_var_137 := set_frequency($p0, $i18);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_103:
    assume !assertsPassed;
    return;

  SeqInstr_100:
    assume !assertsPassed;
    return;

  SeqInstr_97:
    assume !assertsPassed;
    return;

  SeqInstr_94:
    assume !assertsPassed;
    return;
}



const init_copy: ref;

axiom init_copy == $sub.ref(0, 309131);

procedure init_copy($p0: ref, $i1: i1);
  free requires assertsPassed;
  modifies $M.0;



implementation init_copy($p0: ref, $i1: i1)
{
  var $i2: i8;
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i1;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i64;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 378} {:cexpr "init_copy:arg:index"} boogie_si_record_i1($i1);
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(184, 1));
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i2);
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(64, 1));
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, $i6);
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(80, 1));
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, 0);
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(84, 1));
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, 0);
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 736)), $mul.ref(632, 1));
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} $p12 := videobuf_to_vmalloc($p11);
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i8.i1($i2);
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(92, 1));
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    $i17 := $mul.i32($i14, $i16);
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i17);
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p12, $mul.ref($i18, 1));
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(72, 1));
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p20, $p19);
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(168, 1));
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, 0);
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    return;
}



const start_video_stream: ref;

axiom start_video_stream == $sub.ref(0, 310163);

procedure start_video_stream($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation start_video_stream($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var $p20: ref;
  var $p22: ref;
  var cmdloc_dummy_var_15: [ref]i8;
  var cmdloc_dummy_var_16: [ref]i8;
  var cmdloc_dummy_var_17: [ref]i8;
  var vslice_dummy_var_138: i32;
  var vslice_dummy_var_139: i32;
  var vslice_dummy_var_140: i32;
  var vslice_dummy_var_141: i32;
  var vslice_dummy_var_142: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 381} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(536, 1));
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} vslice_dummy_var_138 := send_set_req($p0, 67, 0, $p1);
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} vslice_dummy_var_139 := send_set_req($p0, 68, 1, $p1);
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(528, 1));
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} vslice_dummy_var_141 := prepare_bulk_urb($p4);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} vslice_dummy_var_142 := fire_all_urb($p4);
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 385} vslice_dummy_var_140 := prepare_iso_urb($p4);
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(200, 1));
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} __init_work($p11, 0);
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p12, 2097664);
    $p14 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(200, 1)), $mul.ref(0, 1));
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p3);
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_15 := $M.0;
    cmdloc_dummy_var_16 := $M.0;
    call {:si_unique_call 387} cmdloc_dummy_var_17 := $memcpy.i8(cmdloc_dummy_var_15, cmdloc_dummy_var_16, $p15, $p16, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_17;
    $p18 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(200, 1)), $mul.ref(32, 1));
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} lockdep_init_map($p18, .str.20, $p2, 0);
    $p20 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(200, 1)), $mul.ref(8, 1));
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} INIT_LIST_HEAD($p20);
    $p22 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(200, 1)), $mul.ref(24, 1));
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p22, iso_bubble_handler);
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pm_alsa_resume: ref;

axiom pm_alsa_resume == $sub.ref(0, 311195);

procedure pm_alsa_resume($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation pm_alsa_resume($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var vslice_dummy_var_143: i32;
  var vslice_dummy_var_144: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    $i1 := $M.2;
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 16);
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 393} vslice_dummy_var_144 := fire_audio_urb($p0);
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} vslice_dummy_var_143 := printk.ref.ref.i32(.str, .str.6, 386);
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const fire_audio_urb: ref;

axiom fire_audio_urb == $sub.ref(0, 312227);

procedure fire_audio_urb($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation fire_audio_urb($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p23: ref;
  var $p24: ref;
  var $i15: i32;
  var $i25: i1;
  var vslice_dummy_var_145: i32;
  var vslice_dummy_var_146: i32;
  var vslice_dummy_var_147: i32;
  var vslice_dummy_var_148: i32;
  var vslice_dummy_var_149: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(856, 1));
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(856, 1)), $mul.ref(0, 1));
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(512, 1));
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} vslice_dummy_var_145 := alloc_bulk_urbs_generic($p3, 3, $p5, $sub.i8(0, 125), 512, 32, complete_handler_audio, $p6);
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    $p9 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(856, 1)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 395} $i11 := usb_submit_urb($p10, 208);
    call {:si_unique_call 396} {:cexpr "ret"} boogie_si_record_i32($i11);
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    $p17 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(856, 1)), $mul.ref(0, 1)), $mul.ref(1, 8));
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} $i19 := usb_submit_urb($p18, 208);
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    $p23 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(856, 1)), $mul.ref(0, 1)), $mul.ref(2, 8));
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} $i15 := usb_submit_urb($p24, 208);
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i15, 0);
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} vslice_dummy_var_147 := printk.ref.ref.i32(.str, .str.65, 312);
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb12:
    assume $i25 == 1;
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 402} vslice_dummy_var_149 := printk.ref.ref.i32.i32(.str.64, .str.65, 310, $i15);
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} vslice_dummy_var_148 := printk.ref.ref.i32.i32(.str.64, .str.65, 310, $i19);
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb3:
    assume $i12 == 1;
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 397} vslice_dummy_var_146 := printk.ref.ref.i32.i32(.str.64, .str.65, 310, $i11);
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const complete_handler_audio: ref;

axiom complete_handler_audio == $sub.ref(0, 313259);

procedure complete_handler_audio($p0: ref);



const alloc_bulk_urbs_generic: ref;

axiom alloc_bulk_urbs_generic == $sub.ref(0, 314291);

procedure alloc_bulk_urbs_generic($p0: ref, $i1: i32, $p2: ref, $i3: i8, $i4: i32, $i5: i32, $p6: ref, $p7: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation alloc_bulk_urbs_generic($p0: ref, $i1: i32, $p2: ref, $i3: i8, $i4: i32, $i5: i32, $p6: ref, $p7: ref) returns ($r: i32)
{
  var $i8: i1;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $i14: i32;
  var $i16: i64;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $i21: i32;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $p29: ref;
  var $i30: i64;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $i10: i32;
  var $i34: i32;
  var $i9: i32;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} {:cexpr "alloc_bulk_urbs_generic:arg:num"} boogie_si_record_i32($i1);
    call {:si_unique_call 404} {:cexpr "alloc_bulk_urbs_generic:arg:ep_addr"} boogie_si_record_i8($i3);
    call {:si_unique_call 405} {:cexpr "alloc_bulk_urbs_generic:arg:buf_size"} boogie_si_record_i32($i4);
    call {:si_unique_call 406} {:cexpr "alloc_bulk_urbs_generic:arg:gfp_flags"} boogie_si_record_i32($i5);
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32(0, $i1);
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i15 := $i9;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb4;

  $bb4:
    call $p11, $i12, $i13, $i14, $i16, $p17, $p18, $i19, $i20, $i21, $p22, $i23, $i24, $i25, $p26, $i27, $i28, $p29, $i30, $p31, $i32, $i33, $i10, $i34 := alloc_bulk_urbs_generic_loop_$bb4($p0, $i1, $p2, $i3, $i4, $i5, $p6, $p7, $p11, $i12, $i13, $i14, $i16, $p17, $p18, $i19, $i20, $i21, $p22, $i23, $i24, $i25, $p26, $i27, $i28, $p29, $i30, $p31, $i32, $i33, $i10, $i34);
    goto $bb4_last;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} $p11 := usb_alloc_urb(0, $i5);
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    $i14 := $i10;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i4);
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(112, 1));
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} $p18 := usb_alloc_coherent($p2, $i16, $i5, $p17);
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $i20 := $eq.i64($i19, 0);
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    $i21, $p22 := $i10, $p11;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i3);
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} $i24 := __create_pipe($p2, $i23);
    call {:si_unique_call 411} {:cexpr "tmp___0"} boogie_si_record_i32($i24);
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $i25 := $or.i32($i24, $sub.i32(0, 1073741696));
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} usb_fill_bulk_urb($p11, $p2, $i25, $p18, $i4, $p6, $p7);
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    $i28 := $or.i32($i27, 4);
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, $i28);
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i10);
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($p0, $mul.ref($i30, 8));
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p31, $p11);
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    $i32 := $add.i32($i10, 1);
    call {:si_unique_call 413} {:cexpr "i"} boogie_si_record_i32($i32);
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    $i33 := $slt.i32($i32, $i1);
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $i34 := $i32;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    $i9 := $i34;
    goto $bb3;

  $bb13:
    assume $i33 == 1;
    assume {:verifier.code 0} true;
    $i10 := $i32;
    goto $bb13_dummy;

  $bb10:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} usb_free_urb($p22);
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    $i15 := $i21;
    goto $bb8;

  $bb6:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $i15 := $i14;
    goto $bb8;

  $bb13_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1962;
}



const usb_submit_urb: ref;

axiom usb_submit_urb == $sub.ref(0, 315323);

procedure usb_submit_urb($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_submit_urb($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 414} {:cexpr "usb_submit_urb:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 1} true;
    call {:si_unique_call 415} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 416} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const usb_alloc_urb: ref;

axiom usb_alloc_urb == $sub.ref(0, 316355);

procedure usb_alloc_urb($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation usb_alloc_urb($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} {:cexpr "usb_alloc_urb:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 418} {:cexpr "usb_alloc_urb:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} $p2 := external_alloc();
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const usb_alloc_coherent: ref;

axiom usb_alloc_coherent == $sub.ref(0, 317387);

procedure usb_alloc_coherent($p0: ref, $i1: i64, $i2: i32, $p3: ref) returns ($r: ref);
  free requires assertsPassed;



implementation usb_alloc_coherent($p0: ref, $i1: i64, $i2: i32, $p3: ref) returns ($r: ref)
{
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} {:cexpr "usb_alloc_coherent:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 421} {:cexpr "usb_alloc_coherent:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} $p4 := external_alloc();
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const usb_fill_bulk_urb: ref;

axiom usb_fill_bulk_urb == $sub.ref(0, 318419);

procedure usb_fill_bulk_urb($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_fill_bulk_urb($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref)
{
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} {:cexpr "usb_fill_bulk_urb:arg:pipe"} boogie_si_record_i32($i2);
    call {:si_unique_call 424} {:cexpr "usb_fill_bulk_urb:arg:buffer_length"} boogie_si_record_i32($i4);
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $p1);
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $i2);
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, $p3);
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(132, 1));
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i4);
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $p5);
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, $p6);
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    return;
}



const handle_audio_data: ref;

axiom handle_audio_data == $sub.ref(0, 319451);

procedure handle_audio_data($p0: ref, $p1: ref);



const snd_pcm_period_elapsed: ref;

axiom snd_pcm_period_elapsed == $sub.ref(0, 320483);

procedure snd_pcm_period_elapsed($p0: ref);



const snd_pcm_stream_lock: ref;

axiom snd_pcm_stream_lock == $sub.ref(0, 321515);

procedure snd_pcm_stream_lock($p0: ref);



const snd_pcm_stream_unlock: ref;

axiom snd_pcm_stream_unlock == $sub.ref(0, 322547);

procedure snd_pcm_stream_unlock($p0: ref);



const spin_unlock: ref;

axiom spin_unlock == $sub.ref(0, 323579);

procedure spin_unlock($p0: ref);



const _raw_read_unlock: ref;

axiom _raw_read_unlock == $sub.ref(0, 324611);

procedure _raw_read_unlock($p0: ref);



const _raw_spin_unlock: ref;

axiom _raw_spin_unlock == $sub.ref(0, 325643);

procedure _raw_spin_unlock($p0: ref);



const _raw_read_lock: ref;

axiom _raw_read_lock == $sub.ref(0, 326675);

procedure _raw_read_lock($p0: ref);



const spin_lock: ref;

axiom spin_lock == $sub.ref(0, 327707);

procedure spin_lock($p0: ref);



const _raw_spin_lock: ref;

axiom _raw_spin_lock == $sub.ref(0, 328739);

procedure _raw_spin_lock($p0: ref);



const prepare_iso_urb: ref;

axiom prepare_iso_urb == $sub.ref(0, 329771);

procedure prepare_iso_urb($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation prepare_iso_urb($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $i14: i32;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p38: ref;
  var $p41: ref;
  var $i42: i1;
  var $i44: i32;
  var $i45: i1;
  var $i43: i32;
  var $i10: i32;
  var $p48: ref;
  var $p51: ref;
  var $p54: ref;
  var $p57: ref;
  var $p60: ref;
  var $p63: ref;
  var $p66: ref;
  var $p69: ref;
  var $p72: ref;
  var $p75: ref;
  var $p78: ref;
  var $p81: ref;
  var $p84: ref;
  var $p87: ref;
  var $p90: ref;
  var $p93: ref;
  var $p96: ref;
  var $p99: ref;
  var $p102: ref;
  var $p105: ref;
  var $p108: ref;
  var $p111: ref;
  var $p114: ref;
  var $p117: ref;
  var $p120: ref;
  var $p123: ref;
  var $p126: ref;
  var $p129: ref;
  var $p132: ref;
  var $p135: ref;
  var $p138: ref;
  var $p141: ref;
  var $p144: ref;
  var $p147: ref;
  var $p150: ref;
  var $p153: ref;
  var $p156: ref;
  var $p159: ref;
  var $p162: ref;
  var $p165: ref;
  var $p168: ref;
  var $p171: ref;
  var $p174: ref;
  var $p177: ref;
  var $p180: ref;
  var $p183: ref;
  var $p186: ref;
  var $p189: ref;
  var $p192: ref;
  var $p195: ref;
  var $p198: ref;
  var $p201: ref;
  var $p204: ref;
  var $p207: ref;
  var $p210: ref;
  var $p213: ref;
  var $p216: ref;
  var $p219: ref;
  var $p222: ref;
  var $p225: ref;
  var $p228: ref;
  var $p231: ref;
  var $p232: ref;
  var $i233: i64;
  var $i234: i1;
  var $p236: ref;
  var $p237: ref;
  var $p238: ref;
  var $p239: ref;
  var $p240: ref;
  var $p241: ref;
  var $p242: ref;
  var $p244: ref;
  var $p245: ref;
  var $i246: i8;
  var $i247: i32;
  var $i248: i32;
  var $i249: i32;
  var $p250: ref;
  var $p251: ref;
  var $p252: ref;
  var $p253: ref;
  var $p254: ref;
  var $p255: ref;
  var $p258: ref;
  var $p261: ref;
  var $p264: ref;
  var $p267: ref;
  var $p270: ref;
  var $p273: ref;
  var $p276: ref;
  var $p279: ref;
  var $p282: ref;
  var $p285: ref;
  var $p288: ref;
  var $p291: ref;
  var $p294: ref;
  var $p297: ref;
  var $p300: ref;
  var $p303: ref;
  var $p306: ref;
  var $p309: ref;
  var $p312: ref;
  var $p315: ref;
  var $p318: ref;
  var $p321: ref;
  var $p324: ref;
  var $p327: ref;
  var $p330: ref;
  var $p333: ref;
  var $p336: ref;
  var $p339: ref;
  var $p342: ref;
  var $p345: ref;
  var $p348: ref;
  var $p351: ref;
  var $p354: ref;
  var $p357: ref;
  var $p360: ref;
  var $p363: ref;
  var $p366: ref;
  var $p369: ref;
  var $p372: ref;
  var $p375: ref;
  var $p378: ref;
  var $p381: ref;
  var $p384: ref;
  var $p387: ref;
  var $p390: ref;
  var $p393: ref;
  var $p396: ref;
  var $p399: ref;
  var $p402: ref;
  var $p405: ref;
  var $p408: ref;
  var $p411: ref;
  var $p414: ref;
  var $p417: ref;
  var $p420: ref;
  var $p423: ref;
  var $p426: ref;
  var $p429: ref;
  var $p432: ref;
  var $p435: ref;
  var $p438: ref;
  var $p441: ref;
  var $p444: ref;
  var $p447: ref;
  var $p448: ref;
  var $i449: i64;
  var $i450: i1;
  var $p452: ref;
  var $p453: ref;
  var $p454: ref;
  var $p455: ref;
  var $p456: ref;
  var $p457: ref;
  var $p458: ref;
  var $p460: ref;
  var $p461: ref;
  var $i462: i8;
  var $i463: i32;
  var $i464: i32;
  var $i465: i32;
  var $p466: ref;
  var $p467: ref;
  var $p468: ref;
  var $p469: ref;
  var $p470: ref;
  var $p471: ref;
  var $p474: ref;
  var $p477: ref;
  var $p480: ref;
  var $p483: ref;
  var $p486: ref;
  var $p489: ref;
  var $p492: ref;
  var $p495: ref;
  var $p498: ref;
  var $p501: ref;
  var $p504: ref;
  var $p507: ref;
  var $p510: ref;
  var $p513: ref;
  var $p516: ref;
  var $p519: ref;
  var $p522: ref;
  var $p525: ref;
  var $p528: ref;
  var $p531: ref;
  var $p534: ref;
  var $p537: ref;
  var $p540: ref;
  var $p543: ref;
  var $p546: ref;
  var $p549: ref;
  var $p552: ref;
  var $p555: ref;
  var $p558: ref;
  var $p561: ref;
  var $p564: ref;
  var $p567: ref;
  var $p570: ref;
  var $p573: ref;
  var $p576: ref;
  var $p579: ref;
  var $p582: ref;
  var $p585: ref;
  var $p588: ref;
  var $p591: ref;
  var $p594: ref;
  var $p597: ref;
  var $p600: ref;
  var $p603: ref;
  var $p606: ref;
  var $p609: ref;
  var $p612: ref;
  var $p615: ref;
  var $p618: ref;
  var $p621: ref;
  var $p624: ref;
  var $p627: ref;
  var $p630: ref;
  var $p633: ref;
  var $p636: ref;
  var $p639: ref;
  var $p642: ref;
  var $p645: ref;
  var $p648: ref;
  var $p651: ref;
  var $p654: ref;
  var $p657: ref;
  var $p660: ref;
  var $p663: ref;
  var $p664: ref;
  var $i665: i64;
  var $i666: i1;
  var $p668: ref;
  var $p669: ref;
  var $p670: ref;
  var $p671: ref;
  var $p672: ref;
  var $p673: ref;
  var $p674: ref;
  var $p676: ref;
  var $p677: ref;
  var $i678: i8;
  var $i679: i32;
  var $i680: i32;
  var $i681: i32;
  var $p682: ref;
  var $p683: ref;
  var $p684: ref;
  var $p685: ref;
  var $p686: ref;
  var $p687: ref;
  var $p690: ref;
  var $p693: ref;
  var $p696: ref;
  var $p699: ref;
  var $p702: ref;
  var $p705: ref;
  var $p708: ref;
  var $p711: ref;
  var $p714: ref;
  var $p717: ref;
  var $p720: ref;
  var $p723: ref;
  var $p726: ref;
  var $p729: ref;
  var $p732: ref;
  var $p735: ref;
  var $p738: ref;
  var $p741: ref;
  var $p744: ref;
  var $p747: ref;
  var $p750: ref;
  var $p753: ref;
  var $p756: ref;
  var $p759: ref;
  var $p762: ref;
  var $p765: ref;
  var $p768: ref;
  var $p771: ref;
  var $p774: ref;
  var $p777: ref;
  var $p780: ref;
  var $p783: ref;
  var $p786: ref;
  var $p789: ref;
  var $p792: ref;
  var $p795: ref;
  var $p798: ref;
  var $p801: ref;
  var $p804: ref;
  var $p807: ref;
  var $p810: ref;
  var $p813: ref;
  var $p816: ref;
  var $p819: ref;
  var $p822: ref;
  var $p825: ref;
  var $p828: ref;
  var $p831: ref;
  var $p834: ref;
  var $p837: ref;
  var $p840: ref;
  var $p843: ref;
  var $p846: ref;
  var $p849: ref;
  var $p852: ref;
  var $p855: ref;
  var $p858: ref;
  var $p861: ref;
  var $p864: ref;
  var $p867: ref;
  var $p870: ref;
  var $p873: ref;
  var $p876: ref;
  var $p879: ref;
  var $p880: ref;
  var $i881: i64;
  var $i882: i1;
  var $p884: ref;
  var $p885: ref;
  var $p886: ref;
  var $p887: ref;
  var $p888: ref;
  var $p889: ref;
  var $p890: ref;
  var $p892: ref;
  var $p893: ref;
  var $i894: i8;
  var $i895: i32;
  var $i896: i32;
  var $i897: i32;
  var $p898: ref;
  var $p899: ref;
  var $p900: ref;
  var $p901: ref;
  var $p902: ref;
  var $p903: ref;
  var $p906: ref;
  var $p909: ref;
  var $p912: ref;
  var $p915: ref;
  var $p918: ref;
  var $p921: ref;
  var $p924: ref;
  var $p927: ref;
  var $p930: ref;
  var $p933: ref;
  var $p936: ref;
  var $p939: ref;
  var $p942: ref;
  var $p945: ref;
  var $p948: ref;
  var $p951: ref;
  var $p954: ref;
  var $p957: ref;
  var $p960: ref;
  var $p963: ref;
  var $p966: ref;
  var $p969: ref;
  var $p972: ref;
  var $p975: ref;
  var $p978: ref;
  var $p981: ref;
  var $p984: ref;
  var $p987: ref;
  var $p990: ref;
  var $p993: ref;
  var $p996: ref;
  var $p999: ref;
  var $p1002: ref;
  var $p1005: ref;
  var $p1008: ref;
  var $p1011: ref;
  var $p1014: ref;
  var $p1017: ref;
  var $p1020: ref;
  var $p1023: ref;
  var $p1026: ref;
  var $p1029: ref;
  var $p1032: ref;
  var $p1035: ref;
  var $p1038: ref;
  var $p1041: ref;
  var $p1044: ref;
  var $p1047: ref;
  var $p1050: ref;
  var $p1053: ref;
  var $p1056: ref;
  var $p1059: ref;
  var $p1062: ref;
  var $p1065: ref;
  var $p1068: ref;
  var $p1071: ref;
  var $p1074: ref;
  var $p1077: ref;
  var $p1080: ref;
  var $p1083: ref;
  var $p1086: ref;
  var $p1089: ref;
  var $p1092: ref;
  var $p1095: ref;
  var $p1096: ref;
  var $i1097: i64;
  var $i1098: i1;
  var $p1100: ref;
  var $p1101: ref;
  var $p1102: ref;
  var $p1103: ref;
  var $p1104: ref;
  var $p1105: ref;
  var $p1106: ref;
  var $p1108: ref;
  var $p1109: ref;
  var $i1110: i8;
  var $i1111: i32;
  var $i1112: i32;
  var $i1113: i32;
  var $p1114: ref;
  var $p1115: ref;
  var $p1116: ref;
  var $p1117: ref;
  var $p1118: ref;
  var $p1119: ref;
  var $p1122: ref;
  var $p1125: ref;
  var $p1128: ref;
  var $p1131: ref;
  var $p1134: ref;
  var $p1137: ref;
  var $p1140: ref;
  var $p1143: ref;
  var $p1146: ref;
  var $p1149: ref;
  var $p1152: ref;
  var $p1155: ref;
  var $p1158: ref;
  var $p1161: ref;
  var $p1164: ref;
  var $p1167: ref;
  var $p1170: ref;
  var $p1173: ref;
  var $p1176: ref;
  var $p1179: ref;
  var $p1182: ref;
  var $p1185: ref;
  var $p1188: ref;
  var $p1191: ref;
  var $p1194: ref;
  var $p1197: ref;
  var $p1200: ref;
  var $p1203: ref;
  var $p1206: ref;
  var $p1209: ref;
  var $p1212: ref;
  var $p1215: ref;
  var $p1218: ref;
  var $p1221: ref;
  var $p1224: ref;
  var $p1227: ref;
  var $p1230: ref;
  var $p1233: ref;
  var $p1236: ref;
  var $p1239: ref;
  var $p1242: ref;
  var $p1245: ref;
  var $p1248: ref;
  var $p1251: ref;
  var $p1254: ref;
  var $p1257: ref;
  var $p1260: ref;
  var $p1263: ref;
  var $p1266: ref;
  var $p1269: ref;
  var $p1272: ref;
  var $p1275: ref;
  var $p1278: ref;
  var $p1281: ref;
  var $p1284: ref;
  var $p1287: ref;
  var $p1290: ref;
  var $p1293: ref;
  var $p1296: ref;
  var $p1299: ref;
  var $p1302: ref;
  var $p1305: ref;
  var $p1308: ref;
  var $p1311: ref;
  var $p1312: ref;
  var $i1313: i64;
  var $i1314: i1;
  var $p1316: ref;
  var $p1317: ref;
  var $p1318: ref;
  var $p1319: ref;
  var $p1320: ref;
  var $p1321: ref;
  var $p1322: ref;
  var $p1324: ref;
  var $p1325: ref;
  var $i1326: i8;
  var $i1327: i32;
  var $i1328: i32;
  var $i1329: i32;
  var $p1330: ref;
  var $p1331: ref;
  var $p1332: ref;
  var $p1333: ref;
  var $p1334: ref;
  var $p1335: ref;
  var $p1338: ref;
  var $p1341: ref;
  var $p1344: ref;
  var $p1347: ref;
  var $p1350: ref;
  var $p1353: ref;
  var $p1356: ref;
  var $p1359: ref;
  var $p1362: ref;
  var $p1365: ref;
  var $p1368: ref;
  var $p1371: ref;
  var $p1374: ref;
  var $p1377: ref;
  var $p1380: ref;
  var $p1383: ref;
  var $p1386: ref;
  var $p1389: ref;
  var $p1392: ref;
  var $p1395: ref;
  var $p1398: ref;
  var $p1401: ref;
  var $p1404: ref;
  var $p1407: ref;
  var $p1410: ref;
  var $p1413: ref;
  var $p1416: ref;
  var $p1419: ref;
  var $p1422: ref;
  var $p1425: ref;
  var $p1428: ref;
  var $p1431: ref;
  var $p1434: ref;
  var $p1437: ref;
  var $p1440: ref;
  var $p1443: ref;
  var $p1446: ref;
  var $p1449: ref;
  var $p1452: ref;
  var $p1455: ref;
  var $p1458: ref;
  var $p1461: ref;
  var $p1464: ref;
  var $p1467: ref;
  var $p1470: ref;
  var $p1473: ref;
  var $p1476: ref;
  var $p1479: ref;
  var $p1482: ref;
  var $p1485: ref;
  var $p1488: ref;
  var $p1491: ref;
  var $p1494: ref;
  var $p1497: ref;
  var $p1500: ref;
  var $p1503: ref;
  var $p1506: ref;
  var $p1509: ref;
  var $p1512: ref;
  var $p1515: ref;
  var $p1518: ref;
  var $p1521: ref;
  var $p1524: ref;
  var $p1527: ref;
  var $p1528: ref;
  var $i1529: i64;
  var $i1530: i1;
  var $p1532: ref;
  var $p1533: ref;
  var $p1534: ref;
  var $p1535: ref;
  var $p1536: ref;
  var $p1537: ref;
  var $p1538: ref;
  var $p1540: ref;
  var $p1541: ref;
  var $i1542: i8;
  var $i1543: i32;
  var $i1544: i32;
  var $i1545: i32;
  var $p1546: ref;
  var $p1547: ref;
  var $p1548: ref;
  var $p1549: ref;
  var $p1550: ref;
  var $p1551: ref;
  var $p1554: ref;
  var $p1557: ref;
  var $p1560: ref;
  var $p1563: ref;
  var $p1566: ref;
  var $p1569: ref;
  var $p1572: ref;
  var $p1575: ref;
  var $p1578: ref;
  var $p1581: ref;
  var $p1584: ref;
  var $p1587: ref;
  var $p1590: ref;
  var $p1593: ref;
  var $p1596: ref;
  var $p1599: ref;
  var $p1602: ref;
  var $p1605: ref;
  var $p1608: ref;
  var $p1611: ref;
  var $p1614: ref;
  var $p1617: ref;
  var $p1620: ref;
  var $p1623: ref;
  var $p1626: ref;
  var $p1629: ref;
  var $p1632: ref;
  var $p1635: ref;
  var $p1638: ref;
  var $p1641: ref;
  var $p1644: ref;
  var $p1647: ref;
  var $p1650: ref;
  var $p1653: ref;
  var $p1656: ref;
  var $p1659: ref;
  var $p1662: ref;
  var $p1665: ref;
  var $p1668: ref;
  var $p1671: ref;
  var $p1674: ref;
  var $p1677: ref;
  var $p1680: ref;
  var $p1683: ref;
  var $p1686: ref;
  var $p1689: ref;
  var $p1692: ref;
  var $p1695: ref;
  var $p1698: ref;
  var $p1701: ref;
  var $p1704: ref;
  var $p1707: ref;
  var $p1710: ref;
  var $p1713: ref;
  var $p1716: ref;
  var $p1719: ref;
  var $p1722: ref;
  var $p1725: ref;
  var $p1728: ref;
  var $p1731: ref;
  var $p1734: ref;
  var $p1737: ref;
  var $p1740: ref;
  var $p1743: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(176, 1));
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 3864)), $mul.ref(512, 1));
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(104, 1)), $mul.ref(0, 8));
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} $p11 := usb_alloc_urb(32, 208);
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    $i14 := 0;
    assume true;
    goto $bb7, $bb9;

  $bb9:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(104, 1)), $mul.ref(0, 8));
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p16, $p11);
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(112, 1));
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 426} $p18 := usb_alloc_coherent($p4, 98304, 208, $p17);
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p19, urb_complete_iso);
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p20, $p4);
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(184, 1));
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p24, $p22);
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(96, 1));
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p25);
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} $i28 := __create_pipe($p4, $i27);
    call {:si_unique_call 428} {:cexpr "tmp"} boogie_si_record_i32($i28);
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    $i29 := $or.i32($i28, 128);
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, $i29);
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(168, 1));
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, 1);
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, 6);
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, 32);
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p34, $p18);
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(132, 1));
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p35, 98304);
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p38, 0);
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p41, 3072);
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p48, 3072);
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(1, 16)), $mul.ref(4, 1));
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p51, 3072);
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(2, 16)), $mul.ref(0, 1));
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p54, 6144);
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(2, 16)), $mul.ref(4, 1));
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p57, 3072);
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(3, 16)), $mul.ref(0, 1));
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p60, 9216);
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(3, 16)), $mul.ref(4, 1));
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p63, 3072);
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(4, 16)), $mul.ref(0, 1));
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p66, 12288);
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(4, 16)), $mul.ref(4, 1));
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p69, 3072);
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(5, 16)), $mul.ref(0, 1));
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p72, 15360);
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(5, 16)), $mul.ref(4, 1));
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p75, 3072);
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(6, 16)), $mul.ref(0, 1));
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p78, 18432);
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(6, 16)), $mul.ref(4, 1));
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p81, 3072);
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(7, 16)), $mul.ref(0, 1));
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p84, 21504);
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(7, 16)), $mul.ref(4, 1));
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p87, 3072);
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(8, 16)), $mul.ref(0, 1));
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p90, 24576);
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(8, 16)), $mul.ref(4, 1));
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p93, 3072);
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(9, 16)), $mul.ref(0, 1));
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p96, 27648);
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(9, 16)), $mul.ref(4, 1));
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p99, 3072);
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(10, 16)), $mul.ref(0, 1));
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p102, 30720);
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(10, 16)), $mul.ref(4, 1));
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p105, 3072);
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(11, 16)), $mul.ref(0, 1));
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p108, 33792);
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(11, 16)), $mul.ref(4, 1));
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p111, 3072);
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(12, 16)), $mul.ref(0, 1));
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p114, 36864);
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(12, 16)), $mul.ref(4, 1));
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p117, 3072);
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(13, 16)), $mul.ref(0, 1));
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p120, 39936);
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(13, 16)), $mul.ref(4, 1));
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p123, 3072);
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(14, 16)), $mul.ref(0, 1));
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p126, 43008);
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(14, 16)), $mul.ref(4, 1));
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p129, 3072);
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(15, 16)), $mul.ref(0, 1));
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p132, 46080);
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(15, 16)), $mul.ref(4, 1));
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p135, 3072);
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(16, 16)), $mul.ref(0, 1));
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p138, 49152);
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(16, 16)), $mul.ref(4, 1));
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p141, 3072);
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(17, 16)), $mul.ref(0, 1));
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p144, 52224);
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(17, 16)), $mul.ref(4, 1));
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p147, 3072);
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(18, 16)), $mul.ref(0, 1));
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p150, 55296);
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(18, 16)), $mul.ref(4, 1));
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p153, 3072);
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(19, 16)), $mul.ref(0, 1));
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p156, 58368);
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(19, 16)), $mul.ref(4, 1));
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p159, 3072);
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(20, 16)), $mul.ref(0, 1));
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p162, 61440);
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(20, 16)), $mul.ref(4, 1));
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p165, 3072);
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(21, 16)), $mul.ref(0, 1));
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p168, 64512);
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(21, 16)), $mul.ref(4, 1));
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p171, 3072);
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(22, 16)), $mul.ref(0, 1));
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p174, 67584);
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(22, 16)), $mul.ref(4, 1));
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p177, 3072);
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(23, 16)), $mul.ref(0, 1));
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p180, 70656);
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(23, 16)), $mul.ref(4, 1));
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p183, 3072);
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(24, 16)), $mul.ref(0, 1));
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p186, 73728);
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(24, 16)), $mul.ref(4, 1));
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p189, 3072);
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(25, 16)), $mul.ref(0, 1));
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p192, 76800);
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(25, 16)), $mul.ref(4, 1));
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p195, 3072);
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(26, 16)), $mul.ref(0, 1));
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p198, 79872);
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(26, 16)), $mul.ref(4, 1));
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p201, 3072);
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(27, 16)), $mul.ref(0, 1));
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p204, 82944);
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(27, 16)), $mul.ref(4, 1));
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p207, 3072);
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(28, 16)), $mul.ref(0, 1));
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p210, 86016);
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(28, 16)), $mul.ref(4, 1));
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p213, 3072);
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(29, 16)), $mul.ref(0, 1));
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p216, 89088);
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(29, 16)), $mul.ref(4, 1));
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p219, 3072);
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(30, 16)), $mul.ref(0, 1));
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p222, 92160);
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(30, 16)), $mul.ref(4, 1));
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p225, 3072);
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(31, 16)), $mul.ref(0, 1));
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p228, 95232);
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(31, 16)), $mul.ref(4, 1));
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p231, 3072);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} $p232 := usb_alloc_urb(32, 208);
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $i233 := $p2i.ref.i64($p232);
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $i234 := $eq.i64($i233, 0);
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    $i14 := 1;
    assume {:branchcond $i234} true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i234 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(104, 1)), $mul.ref(1, 8));
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p236, $p232);
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(112, 1));
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 431} $p238 := usb_alloc_coherent($p4, 98304, 208, $p237);
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p239, urb_complete_iso);
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p240, $p4);
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(184, 1));
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    $p242 := $load.ref($M.0, $p241);
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p244, $p242);
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(96, 1));
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    $i246 := $load.i8($M.0, $p245);
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    $i247 := $zext.i8.i32($i246);
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 432} $i248 := __create_pipe($p4, $i247);
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    $i249 := $or.i32($i248, 128);
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p250, $i249);
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(168, 1));
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p251, 1);
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $p252 := $add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p252, 6);
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p253, 32);
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    $p254 := $add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p254, $p238);
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    $p255 := $add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(132, 1));
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p255, 98304);
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p258 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p258, 0);
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p261, 3072);
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $p264 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p264, 3072);
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    $p267 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(1, 16)), $mul.ref(4, 1));
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p267, 3072);
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $p270 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(2, 16)), $mul.ref(0, 1));
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p270, 6144);
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(2, 16)), $mul.ref(4, 1));
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p273, 3072);
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $p276 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(3, 16)), $mul.ref(0, 1));
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p276, 9216);
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    $p279 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(3, 16)), $mul.ref(4, 1));
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p279, 3072);
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(4, 16)), $mul.ref(0, 1));
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p282, 12288);
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(4, 16)), $mul.ref(4, 1));
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p285, 3072);
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $p288 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(5, 16)), $mul.ref(0, 1));
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p288, 15360);
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    $p291 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(5, 16)), $mul.ref(4, 1));
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p291, 3072);
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $p294 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(6, 16)), $mul.ref(0, 1));
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p294, 18432);
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    $p297 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(6, 16)), $mul.ref(4, 1));
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p297, 3072);
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $p300 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(7, 16)), $mul.ref(0, 1));
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p300, 21504);
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    $p303 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(7, 16)), $mul.ref(4, 1));
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p303, 3072);
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $p306 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(8, 16)), $mul.ref(0, 1));
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p306, 24576);
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    $p309 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(8, 16)), $mul.ref(4, 1));
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p309, 3072);
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $p312 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(9, 16)), $mul.ref(0, 1));
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p312, 27648);
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    $p315 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(9, 16)), $mul.ref(4, 1));
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p315, 3072);
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $p318 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(10, 16)), $mul.ref(0, 1));
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p318, 30720);
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    $p321 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(10, 16)), $mul.ref(4, 1));
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p321, 3072);
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $p324 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(11, 16)), $mul.ref(0, 1));
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p324, 33792);
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $p327 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(11, 16)), $mul.ref(4, 1));
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p327, 3072);
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $p330 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(12, 16)), $mul.ref(0, 1));
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p330, 36864);
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    $p333 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(12, 16)), $mul.ref(4, 1));
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p333, 3072);
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $p336 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(13, 16)), $mul.ref(0, 1));
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p336, 39936);
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    $p339 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(13, 16)), $mul.ref(4, 1));
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p339, 3072);
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $p342 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(14, 16)), $mul.ref(0, 1));
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p342, 43008);
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    $p345 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(14, 16)), $mul.ref(4, 1));
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p345, 3072);
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $p348 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(15, 16)), $mul.ref(0, 1));
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p348, 46080);
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    $p351 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(15, 16)), $mul.ref(4, 1));
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p351, 3072);
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $p354 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(16, 16)), $mul.ref(0, 1));
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p354, 49152);
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    $p357 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(16, 16)), $mul.ref(4, 1));
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p357, 3072);
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $p360 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(17, 16)), $mul.ref(0, 1));
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p360, 52224);
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    $p363 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(17, 16)), $mul.ref(4, 1));
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p363, 3072);
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $p366 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(18, 16)), $mul.ref(0, 1));
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p366, 55296);
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    $p369 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(18, 16)), $mul.ref(4, 1));
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p369, 3072);
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $p372 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(19, 16)), $mul.ref(0, 1));
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p372, 58368);
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    $p375 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(19, 16)), $mul.ref(4, 1));
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p375, 3072);
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $p378 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(20, 16)), $mul.ref(0, 1));
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p378, 61440);
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    $p381 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(20, 16)), $mul.ref(4, 1));
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p381, 3072);
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    $p384 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(21, 16)), $mul.ref(0, 1));
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p384, 64512);
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    $p387 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(21, 16)), $mul.ref(4, 1));
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p387, 3072);
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $p390 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(22, 16)), $mul.ref(0, 1));
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p390, 67584);
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    $p393 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(22, 16)), $mul.ref(4, 1));
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p393, 3072);
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $p396 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(23, 16)), $mul.ref(0, 1));
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p396, 70656);
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    $p399 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(23, 16)), $mul.ref(4, 1));
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p399, 3072);
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    $p402 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(24, 16)), $mul.ref(0, 1));
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p402, 73728);
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $p405 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(24, 16)), $mul.ref(4, 1));
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p405, 3072);
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    $p408 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(25, 16)), $mul.ref(0, 1));
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p408, 76800);
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $p411 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(25, 16)), $mul.ref(4, 1));
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p411, 3072);
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $p414 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(26, 16)), $mul.ref(0, 1));
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p414, 79872);
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    $p417 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(26, 16)), $mul.ref(4, 1));
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p417, 3072);
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $p420 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(27, 16)), $mul.ref(0, 1));
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p420, 82944);
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    $p423 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(27, 16)), $mul.ref(4, 1));
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p423, 3072);
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $p426 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(28, 16)), $mul.ref(0, 1));
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p426, 86016);
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    $p429 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(28, 16)), $mul.ref(4, 1));
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p429, 3072);
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    $p432 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(29, 16)), $mul.ref(0, 1));
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p432, 89088);
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $p435 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(29, 16)), $mul.ref(4, 1));
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p435, 3072);
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    $p438 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(30, 16)), $mul.ref(0, 1));
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p438, 92160);
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    $p441 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(30, 16)), $mul.ref(4, 1));
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p441, 3072);
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    $p444 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(31, 16)), $mul.ref(0, 1));
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p444, 95232);
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    $p447 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(31, 16)), $mul.ref(4, 1));
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p447, 3072);
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} $p448 := usb_alloc_urb(32, 208);
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $i449 := $p2i.ref.i64($p448);
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $i450 := $eq.i64($i449, 0);
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    $i14 := 2;
    assume {:branchcond $i450} true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i450 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    $p452 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(104, 1)), $mul.ref(2, 8));
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p452, $p448);
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    $p453 := $add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(112, 1));
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} $p454 := usb_alloc_coherent($p4, 98304, 208, $p453);
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    $p455 := $add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p455, urb_complete_iso);
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $p456 := $add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p456, $p4);
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    $p457 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(184, 1));
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    $p458 := $load.ref($M.0, $p457);
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    $p460 := $add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p460, $p458);
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    $p461 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(96, 1));
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $i462 := $load.i8($M.0, $p461);
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    $i463 := $zext.i8.i32($i462);
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} $i464 := __create_pipe($p4, $i463);
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    $i465 := $or.i32($i464, 128);
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    $p466 := $add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p466, $i465);
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $p467 := $add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(168, 1));
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p467, 1);
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    $p468 := $add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p468, 6);
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $p469 := $add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p469, 32);
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $p470 := $add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p470, $p454);
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    $p471 := $add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(132, 1));
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p471, 98304);
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    $p474 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p474, 0);
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    $p477 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p477, 3072);
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    $p480 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p480, 3072);
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $p483 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(1, 16)), $mul.ref(4, 1));
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p483, 3072);
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    $p486 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(2, 16)), $mul.ref(0, 1));
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p486, 6144);
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    $p489 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(2, 16)), $mul.ref(4, 1));
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p489, 3072);
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    $p492 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(3, 16)), $mul.ref(0, 1));
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p492, 9216);
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    $p495 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(3, 16)), $mul.ref(4, 1));
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p495, 3072);
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    $p498 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(4, 16)), $mul.ref(0, 1));
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p498, 12288);
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    $p501 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(4, 16)), $mul.ref(4, 1));
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p501, 3072);
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    $p504 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(5, 16)), $mul.ref(0, 1));
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p504, 15360);
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    $p507 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(5, 16)), $mul.ref(4, 1));
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p507, 3072);
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    $p510 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(6, 16)), $mul.ref(0, 1));
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p510, 18432);
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    $p513 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(6, 16)), $mul.ref(4, 1));
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p513, 3072);
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    $p516 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(7, 16)), $mul.ref(0, 1));
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p516, 21504);
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    $p519 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(7, 16)), $mul.ref(4, 1));
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p519, 3072);
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    $p522 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(8, 16)), $mul.ref(0, 1));
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p522, 24576);
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    $p525 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(8, 16)), $mul.ref(4, 1));
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p525, 3072);
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    $p528 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(9, 16)), $mul.ref(0, 1));
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p528, 27648);
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    $p531 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(9, 16)), $mul.ref(4, 1));
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p531, 3072);
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    $p534 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(10, 16)), $mul.ref(0, 1));
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p534, 30720);
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    $p537 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(10, 16)), $mul.ref(4, 1));
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p537, 3072);
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    $p540 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(11, 16)), $mul.ref(0, 1));
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p540, 33792);
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    $p543 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(11, 16)), $mul.ref(4, 1));
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p543, 3072);
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    $p546 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(12, 16)), $mul.ref(0, 1));
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p546, 36864);
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    $p549 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(12, 16)), $mul.ref(4, 1));
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p549, 3072);
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    $p552 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(13, 16)), $mul.ref(0, 1));
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p552, 39936);
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    $p555 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(13, 16)), $mul.ref(4, 1));
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p555, 3072);
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    $p558 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(14, 16)), $mul.ref(0, 1));
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p558, 43008);
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    $p561 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(14, 16)), $mul.ref(4, 1));
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p561, 3072);
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    $p564 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(15, 16)), $mul.ref(0, 1));
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p564, 46080);
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    $p567 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(15, 16)), $mul.ref(4, 1));
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p567, 3072);
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    $p570 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(16, 16)), $mul.ref(0, 1));
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p570, 49152);
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    $p573 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(16, 16)), $mul.ref(4, 1));
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p573, 3072);
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    $p576 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(17, 16)), $mul.ref(0, 1));
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p576, 52224);
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    $p579 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(17, 16)), $mul.ref(4, 1));
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p579, 3072);
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    $p582 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(18, 16)), $mul.ref(0, 1));
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p582, 55296);
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    $p585 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(18, 16)), $mul.ref(4, 1));
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p585, 3072);
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    $p588 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(19, 16)), $mul.ref(0, 1));
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p588, 58368);
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    $p591 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(19, 16)), $mul.ref(4, 1));
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p591, 3072);
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    $p594 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(20, 16)), $mul.ref(0, 1));
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p594, 61440);
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    $p597 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(20, 16)), $mul.ref(4, 1));
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p597, 3072);
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    $p600 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(21, 16)), $mul.ref(0, 1));
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p600, 64512);
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    $p603 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(21, 16)), $mul.ref(4, 1));
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p603, 3072);
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    $p606 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(22, 16)), $mul.ref(0, 1));
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p606, 67584);
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    $p609 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(22, 16)), $mul.ref(4, 1));
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p609, 3072);
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    $p612 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(23, 16)), $mul.ref(0, 1));
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p612, 70656);
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    $p615 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(23, 16)), $mul.ref(4, 1));
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p615, 3072);
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    $p618 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(24, 16)), $mul.ref(0, 1));
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p618, 73728);
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    $p621 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(24, 16)), $mul.ref(4, 1));
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p621, 3072);
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    $p624 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(25, 16)), $mul.ref(0, 1));
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p624, 76800);
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    $p627 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(25, 16)), $mul.ref(4, 1));
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p627, 3072);
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    $p630 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(26, 16)), $mul.ref(0, 1));
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p630, 79872);
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    $p633 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(26, 16)), $mul.ref(4, 1));
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p633, 3072);
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    $p636 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(27, 16)), $mul.ref(0, 1));
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p636, 82944);
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    $p639 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(27, 16)), $mul.ref(4, 1));
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p639, 3072);
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    $p642 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(28, 16)), $mul.ref(0, 1));
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p642, 86016);
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    $p645 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(28, 16)), $mul.ref(4, 1));
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p645, 3072);
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    $p648 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(29, 16)), $mul.ref(0, 1));
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p648, 89088);
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    $p651 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(29, 16)), $mul.ref(4, 1));
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p651, 3072);
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    $p654 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(30, 16)), $mul.ref(0, 1));
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p654, 92160);
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    $p657 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(30, 16)), $mul.ref(4, 1));
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p657, 3072);
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    $p660 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(31, 16)), $mul.ref(0, 1));
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p660, 95232);
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $p663 := $add.ref($add.ref($add.ref($add.ref($p448, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(31, 16)), $mul.ref(4, 1));
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p663, 3072);
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} $p664 := usb_alloc_urb(32, 208);
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    $i665 := $p2i.ref.i64($p664);
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    $i666 := $eq.i64($i665, 0);
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    $i14 := 3;
    assume {:branchcond $i666} true;
    goto $bb132, $bb133;

  $bb133:
    assume !($i666 == 1);
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    $p668 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(104, 1)), $mul.ref(3, 8));
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p668, $p664);
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    $p669 := $add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(112, 1));
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} $p670 := usb_alloc_coherent($p4, 98304, 208, $p669);
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    $p671 := $add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p671, urb_complete_iso);
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $p672 := $add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p672, $p4);
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    $p673 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(184, 1));
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    $p674 := $load.ref($M.0, $p673);
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    $p676 := $add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p676, $p674);
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    $p677 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(96, 1));
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    $i678 := $load.i8($M.0, $p677);
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    $i679 := $zext.i8.i32($i678);
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} $i680 := __create_pipe($p4, $i679);
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    $i681 := $or.i32($i680, 128);
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    $p682 := $add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p682, $i681);
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $p683 := $add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(168, 1));
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p683, 1);
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    $p684 := $add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p684, 6);
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    $p685 := $add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p685, 32);
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    $p686 := $add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p686, $p670);
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    $p687 := $add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(132, 1));
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p687, 98304);
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    $p690 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p690, 0);
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    $p693 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p693, 3072);
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    $p696 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p696, 3072);
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    $p699 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(1, 16)), $mul.ref(4, 1));
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p699, 3072);
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    $p702 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(2, 16)), $mul.ref(0, 1));
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p702, 6144);
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    $p705 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(2, 16)), $mul.ref(4, 1));
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p705, 3072);
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    $p708 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(3, 16)), $mul.ref(0, 1));
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p708, 9216);
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $p711 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(3, 16)), $mul.ref(4, 1));
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p711, 3072);
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    $p714 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(4, 16)), $mul.ref(0, 1));
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p714, 12288);
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    $p717 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(4, 16)), $mul.ref(4, 1));
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p717, 3072);
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    $p720 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(5, 16)), $mul.ref(0, 1));
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p720, 15360);
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    $p723 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(5, 16)), $mul.ref(4, 1));
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p723, 3072);
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    $p726 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(6, 16)), $mul.ref(0, 1));
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p726, 18432);
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    $p729 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(6, 16)), $mul.ref(4, 1));
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p729, 3072);
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    $p732 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(7, 16)), $mul.ref(0, 1));
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p732, 21504);
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $p735 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(7, 16)), $mul.ref(4, 1));
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p735, 3072);
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    $p738 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(8, 16)), $mul.ref(0, 1));
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p738, 24576);
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    $p741 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(8, 16)), $mul.ref(4, 1));
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p741, 3072);
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    $p744 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(9, 16)), $mul.ref(0, 1));
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p744, 27648);
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $p747 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(9, 16)), $mul.ref(4, 1));
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p747, 3072);
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    $p750 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(10, 16)), $mul.ref(0, 1));
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p750, 30720);
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    $p753 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(10, 16)), $mul.ref(4, 1));
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p753, 3072);
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    $p756 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(11, 16)), $mul.ref(0, 1));
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p756, 33792);
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    $p759 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(11, 16)), $mul.ref(4, 1));
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p759, 3072);
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    $p762 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(12, 16)), $mul.ref(0, 1));
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p762, 36864);
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    $p765 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(12, 16)), $mul.ref(4, 1));
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p765, 3072);
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    $p768 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(13, 16)), $mul.ref(0, 1));
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p768, 39936);
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    $p771 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(13, 16)), $mul.ref(4, 1));
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p771, 3072);
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    $p774 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(14, 16)), $mul.ref(0, 1));
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p774, 43008);
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    $p777 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(14, 16)), $mul.ref(4, 1));
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p777, 3072);
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    $p780 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(15, 16)), $mul.ref(0, 1));
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p780, 46080);
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $p783 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(15, 16)), $mul.ref(4, 1));
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p783, 3072);
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    $p786 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(16, 16)), $mul.ref(0, 1));
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p786, 49152);
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    $p789 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(16, 16)), $mul.ref(4, 1));
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p789, 3072);
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    $p792 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(17, 16)), $mul.ref(0, 1));
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p792, 52224);
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    $p795 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(17, 16)), $mul.ref(4, 1));
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p795, 3072);
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    $p798 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(18, 16)), $mul.ref(0, 1));
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p798, 55296);
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    $p801 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(18, 16)), $mul.ref(4, 1));
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p801, 3072);
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    $p804 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(19, 16)), $mul.ref(0, 1));
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p804, 58368);
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    $p807 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(19, 16)), $mul.ref(4, 1));
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p807, 3072);
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    $p810 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(20, 16)), $mul.ref(0, 1));
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p810, 61440);
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    $p813 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(20, 16)), $mul.ref(4, 1));
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p813, 3072);
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    $p816 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(21, 16)), $mul.ref(0, 1));
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p816, 64512);
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    $p819 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(21, 16)), $mul.ref(4, 1));
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p819, 3072);
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    $p822 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(22, 16)), $mul.ref(0, 1));
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p822, 67584);
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    $p825 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(22, 16)), $mul.ref(4, 1));
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p825, 3072);
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    $p828 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(23, 16)), $mul.ref(0, 1));
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p828, 70656);
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $p831 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(23, 16)), $mul.ref(4, 1));
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p831, 3072);
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    $p834 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(24, 16)), $mul.ref(0, 1));
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p834, 73728);
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    $p837 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(24, 16)), $mul.ref(4, 1));
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p837, 3072);
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    $p840 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(25, 16)), $mul.ref(0, 1));
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p840, 76800);
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    $p843 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(25, 16)), $mul.ref(4, 1));
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p843, 3072);
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    $p846 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(26, 16)), $mul.ref(0, 1));
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p846, 79872);
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    $p849 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(26, 16)), $mul.ref(4, 1));
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p849, 3072);
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    $p852 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(27, 16)), $mul.ref(0, 1));
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p852, 82944);
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    $p855 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(27, 16)), $mul.ref(4, 1));
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p855, 3072);
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    $p858 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(28, 16)), $mul.ref(0, 1));
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p858, 86016);
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    $p861 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(28, 16)), $mul.ref(4, 1));
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p861, 3072);
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    $p864 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(29, 16)), $mul.ref(0, 1));
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p864, 89088);
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    $p867 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(29, 16)), $mul.ref(4, 1));
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p867, 3072);
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    $p870 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(30, 16)), $mul.ref(0, 1));
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p870, 92160);
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    $p873 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(30, 16)), $mul.ref(4, 1));
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p873, 3072);
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    $p876 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(31, 16)), $mul.ref(0, 1));
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p876, 95232);
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $p879 := $add.ref($add.ref($add.ref($add.ref($p664, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(31, 16)), $mul.ref(4, 1));
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p879, 3072);
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 439} $p880 := usb_alloc_urb(32, 208);
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    $i881 := $p2i.ref.i64($p880);
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    $i882 := $eq.i64($i881, 0);
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    $i14 := 4;
    assume {:branchcond $i882} true;
    goto $bb170, $bb171;

  $bb171:
    assume !($i882 == 1);
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    $p884 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(104, 1)), $mul.ref(4, 8));
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p884, $p880);
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    $p885 := $add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(112, 1));
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} $p886 := usb_alloc_coherent($p4, 98304, 208, $p885);
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    $p887 := $add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p887, urb_complete_iso);
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    $p888 := $add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p888, $p4);
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    $p889 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(184, 1));
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    $p890 := $load.ref($M.0, $p889);
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    $p892 := $add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p892, $p890);
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    $p893 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(96, 1));
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    $i894 := $load.i8($M.0, $p893);
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    $i895 := $zext.i8.i32($i894);
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 441} $i896 := __create_pipe($p4, $i895);
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    $i897 := $or.i32($i896, 128);
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    $p898 := $add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p898, $i897);
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    $p899 := $add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(168, 1));
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p899, 1);
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $p900 := $add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p900, 6);
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    $p901 := $add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p901, 32);
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    $p902 := $add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p902, $p886);
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    $p903 := $add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(132, 1));
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p903, 98304);
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb173:
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    $p906 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p906, 0);
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    $p909 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p909, 3072);
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    $p912 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p912, 3072);
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    $p915 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(1, 16)), $mul.ref(4, 1));
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p915, 3072);
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    $p918 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(2, 16)), $mul.ref(0, 1));
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p918, 6144);
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    $p921 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(2, 16)), $mul.ref(4, 1));
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p921, 3072);
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    $p924 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(3, 16)), $mul.ref(0, 1));
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p924, 9216);
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $p927 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(3, 16)), $mul.ref(4, 1));
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p927, 3072);
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    $p930 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(4, 16)), $mul.ref(0, 1));
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p930, 12288);
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    $p933 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(4, 16)), $mul.ref(4, 1));
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p933, 3072);
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    $p936 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(5, 16)), $mul.ref(0, 1));
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p936, 15360);
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $p939 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(5, 16)), $mul.ref(4, 1));
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p939, 3072);
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    $p942 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(6, 16)), $mul.ref(0, 1));
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p942, 18432);
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    $p945 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(6, 16)), $mul.ref(4, 1));
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p945, 3072);
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    $p948 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(7, 16)), $mul.ref(0, 1));
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p948, 21504);
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    $p951 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(7, 16)), $mul.ref(4, 1));
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p951, 3072);
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    $p954 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(8, 16)), $mul.ref(0, 1));
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p954, 24576);
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    $p957 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(8, 16)), $mul.ref(4, 1));
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p957, 3072);
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    $p960 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(9, 16)), $mul.ref(0, 1));
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p960, 27648);
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    $p963 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(9, 16)), $mul.ref(4, 1));
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p963, 3072);
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    $p966 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(10, 16)), $mul.ref(0, 1));
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p966, 30720);
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    $p969 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(10, 16)), $mul.ref(4, 1));
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p969, 3072);
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    $p972 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(11, 16)), $mul.ref(0, 1));
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p972, 33792);
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    $p975 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(11, 16)), $mul.ref(4, 1));
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p975, 3072);
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    $p978 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(12, 16)), $mul.ref(0, 1));
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p978, 36864);
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    $p981 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(12, 16)), $mul.ref(4, 1));
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p981, 3072);
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    $p984 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(13, 16)), $mul.ref(0, 1));
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p984, 39936);
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    $p987 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(13, 16)), $mul.ref(4, 1));
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p987, 3072);
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    $p990 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(14, 16)), $mul.ref(0, 1));
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p990, 43008);
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    $p993 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(14, 16)), $mul.ref(4, 1));
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p993, 3072);
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    $p996 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(15, 16)), $mul.ref(0, 1));
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p996, 46080);
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    $p999 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(15, 16)), $mul.ref(4, 1));
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p999, 3072);
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    $p1002 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(16, 16)), $mul.ref(0, 1));
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1002, 49152);
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    $p1005 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(16, 16)), $mul.ref(4, 1));
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1005, 3072);
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    $p1008 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(17, 16)), $mul.ref(0, 1));
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1008, 52224);
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    $p1011 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(17, 16)), $mul.ref(4, 1));
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1011, 3072);
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    $p1014 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(18, 16)), $mul.ref(0, 1));
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1014, 55296);
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    $p1017 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(18, 16)), $mul.ref(4, 1));
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1017, 3072);
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    $p1020 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(19, 16)), $mul.ref(0, 1));
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1020, 58368);
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    $p1023 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(19, 16)), $mul.ref(4, 1));
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1023, 3072);
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    $p1026 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(20, 16)), $mul.ref(0, 1));
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1026, 61440);
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    $p1029 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(20, 16)), $mul.ref(4, 1));
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1029, 3072);
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    $p1032 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(21, 16)), $mul.ref(0, 1));
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1032, 64512);
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    $p1035 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(21, 16)), $mul.ref(4, 1));
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1035, 3072);
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    $p1038 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(22, 16)), $mul.ref(0, 1));
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1038, 67584);
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    $p1041 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(22, 16)), $mul.ref(4, 1));
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1041, 3072);
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    $p1044 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(23, 16)), $mul.ref(0, 1));
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1044, 70656);
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    $p1047 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(23, 16)), $mul.ref(4, 1));
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1047, 3072);
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    $p1050 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(24, 16)), $mul.ref(0, 1));
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1050, 73728);
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    $p1053 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(24, 16)), $mul.ref(4, 1));
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1053, 3072);
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    $p1056 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(25, 16)), $mul.ref(0, 1));
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1056, 76800);
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    $p1059 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(25, 16)), $mul.ref(4, 1));
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1059, 3072);
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    $p1062 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(26, 16)), $mul.ref(0, 1));
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1062, 79872);
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    $p1065 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(26, 16)), $mul.ref(4, 1));
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1065, 3072);
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    $p1068 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(27, 16)), $mul.ref(0, 1));
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1068, 82944);
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    $p1071 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(27, 16)), $mul.ref(4, 1));
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1071, 3072);
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    $p1074 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(28, 16)), $mul.ref(0, 1));
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1074, 86016);
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $p1077 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(28, 16)), $mul.ref(4, 1));
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1077, 3072);
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    $p1080 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(29, 16)), $mul.ref(0, 1));
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1080, 89088);
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    $p1083 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(29, 16)), $mul.ref(4, 1));
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1083, 3072);
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb204:
    assume {:verifier.code 0} true;
    $p1086 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(30, 16)), $mul.ref(0, 1));
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1086, 92160);
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    $p1089 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(30, 16)), $mul.ref(4, 1));
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1089, 3072);
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    $p1092 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(31, 16)), $mul.ref(0, 1));
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1092, 95232);
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    $p1095 := $add.ref($add.ref($add.ref($add.ref($p880, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(31, 16)), $mul.ref(4, 1));
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1095, 3072);
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 442} $p1096 := usb_alloc_urb(32, 208);
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $i1097 := $p2i.ref.i64($p1096);
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $i1098 := $eq.i64($i1097, 0);
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    $i14 := 5;
    assume {:branchcond $i1098} true;
    goto $bb208, $bb209;

  $bb209:
    assume !($i1098 == 1);
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    $p1100 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(104, 1)), $mul.ref(5, 8));
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1100, $p1096);
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    $p1101 := $add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(112, 1));
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} $p1102 := usb_alloc_coherent($p4, 98304, 208, $p1101);
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    $p1103 := $add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1103, urb_complete_iso);
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    $p1104 := $add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1104, $p4);
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    $p1105 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(184, 1));
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    $p1106 := $load.ref($M.0, $p1105);
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    $p1108 := $add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1108, $p1106);
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    $p1109 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(96, 1));
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    $i1110 := $load.i8($M.0, $p1109);
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    $i1111 := $zext.i8.i32($i1110);
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} $i1112 := __create_pipe($p4, $i1111);
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    $i1113 := $or.i32($i1112, 128);
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    $p1114 := $add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1114, $i1113);
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    $p1115 := $add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(168, 1));
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1115, 1);
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    $p1116 := $add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1116, 6);
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    $p1117 := $add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1117, 32);
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    $p1118 := $add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1118, $p1102);
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    $p1119 := $add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(132, 1));
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1119, 98304);
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb211:
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb212:
    assume {:verifier.code 0} true;
    $p1122 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1122, 0);
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    $p1125 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1125, 3072);
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb213:
    assume {:verifier.code 0} true;
    $p1128 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1128, 3072);
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    $p1131 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(1, 16)), $mul.ref(4, 1));
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1131, 3072);
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb214:
    assume {:verifier.code 0} true;
    $p1134 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(2, 16)), $mul.ref(0, 1));
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1134, 6144);
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    $p1137 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(2, 16)), $mul.ref(4, 1));
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1137, 3072);
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb215:
    assume {:verifier.code 0} true;
    $p1140 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(3, 16)), $mul.ref(0, 1));
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1140, 9216);
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    $p1143 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(3, 16)), $mul.ref(4, 1));
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1143, 3072);
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    $p1146 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(4, 16)), $mul.ref(0, 1));
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1146, 12288);
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    $p1149 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(4, 16)), $mul.ref(4, 1));
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1149, 3072);
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    $p1152 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(5, 16)), $mul.ref(0, 1));
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1152, 15360);
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    $p1155 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(5, 16)), $mul.ref(4, 1));
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1155, 3072);
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb218:
    assume {:verifier.code 0} true;
    $p1158 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(6, 16)), $mul.ref(0, 1));
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1158, 18432);
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    $p1161 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(6, 16)), $mul.ref(4, 1));
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1161, 3072);
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    $p1164 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(7, 16)), $mul.ref(0, 1));
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1164, 21504);
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    $p1167 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(7, 16)), $mul.ref(4, 1));
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1167, 3072);
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb220:
    assume {:verifier.code 0} true;
    $p1170 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(8, 16)), $mul.ref(0, 1));
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1170, 24576);
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    $p1173 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(8, 16)), $mul.ref(4, 1));
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1173, 3072);
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb221:
    assume {:verifier.code 0} true;
    $p1176 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(9, 16)), $mul.ref(0, 1));
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1176, 27648);
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    $p1179 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(9, 16)), $mul.ref(4, 1));
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1179, 3072);
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    $p1182 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(10, 16)), $mul.ref(0, 1));
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1182, 30720);
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    $p1185 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(10, 16)), $mul.ref(4, 1));
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1185, 3072);
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    $p1188 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(11, 16)), $mul.ref(0, 1));
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1188, 33792);
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    $p1191 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(11, 16)), $mul.ref(4, 1));
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1191, 3072);
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    $p1194 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(12, 16)), $mul.ref(0, 1));
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1194, 36864);
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    $p1197 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(12, 16)), $mul.ref(4, 1));
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1197, 3072);
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb225:
    assume {:verifier.code 0} true;
    $p1200 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(13, 16)), $mul.ref(0, 1));
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1200, 39936);
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    $p1203 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(13, 16)), $mul.ref(4, 1));
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1203, 3072);
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb226:
    assume {:verifier.code 0} true;
    $p1206 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(14, 16)), $mul.ref(0, 1));
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1206, 43008);
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    $p1209 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(14, 16)), $mul.ref(4, 1));
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1209, 3072);
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb227:
    assume {:verifier.code 0} true;
    $p1212 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(15, 16)), $mul.ref(0, 1));
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1212, 46080);
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    $p1215 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(15, 16)), $mul.ref(4, 1));
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1215, 3072);
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    $p1218 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(16, 16)), $mul.ref(0, 1));
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1218, 49152);
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    $p1221 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(16, 16)), $mul.ref(4, 1));
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1221, 3072);
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb229:
    assume {:verifier.code 0} true;
    $p1224 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(17, 16)), $mul.ref(0, 1));
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1224, 52224);
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    $p1227 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(17, 16)), $mul.ref(4, 1));
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1227, 3072);
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    goto $bb230;

  $bb230:
    assume {:verifier.code 0} true;
    $p1230 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(18, 16)), $mul.ref(0, 1));
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1230, 55296);
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $p1233 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(18, 16)), $mul.ref(4, 1));
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1233, 3072);
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb231:
    assume {:verifier.code 0} true;
    $p1236 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(19, 16)), $mul.ref(0, 1));
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1236, 58368);
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    $p1239 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(19, 16)), $mul.ref(4, 1));
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1239, 3072);
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb232:
    assume {:verifier.code 0} true;
    $p1242 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(20, 16)), $mul.ref(0, 1));
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1242, 61440);
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    $p1245 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(20, 16)), $mul.ref(4, 1));
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1245, 3072);
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb233:
    assume {:verifier.code 0} true;
    $p1248 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(21, 16)), $mul.ref(0, 1));
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1248, 64512);
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    $p1251 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(21, 16)), $mul.ref(4, 1));
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1251, 3072);
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb234:
    assume {:verifier.code 0} true;
    $p1254 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(22, 16)), $mul.ref(0, 1));
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1254, 67584);
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    $p1257 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(22, 16)), $mul.ref(4, 1));
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1257, 3072);
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb235:
    assume {:verifier.code 0} true;
    $p1260 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(23, 16)), $mul.ref(0, 1));
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1260, 70656);
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    $p1263 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(23, 16)), $mul.ref(4, 1));
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1263, 3072);
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb236:
    assume {:verifier.code 0} true;
    $p1266 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(24, 16)), $mul.ref(0, 1));
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1266, 73728);
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    $p1269 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(24, 16)), $mul.ref(4, 1));
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1269, 3072);
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb237:
    assume {:verifier.code 0} true;
    $p1272 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(25, 16)), $mul.ref(0, 1));
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1272, 76800);
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $p1275 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(25, 16)), $mul.ref(4, 1));
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1275, 3072);
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb238:
    assume {:verifier.code 0} true;
    $p1278 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(26, 16)), $mul.ref(0, 1));
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1278, 79872);
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    $p1281 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(26, 16)), $mul.ref(4, 1));
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1281, 3072);
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    goto $bb239;

  $bb239:
    assume {:verifier.code 0} true;
    $p1284 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(27, 16)), $mul.ref(0, 1));
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1284, 82944);
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    $p1287 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(27, 16)), $mul.ref(4, 1));
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1287, 3072);
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    goto $bb240;

  $bb240:
    assume {:verifier.code 0} true;
    $p1290 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(28, 16)), $mul.ref(0, 1));
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1290, 86016);
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    $p1293 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(28, 16)), $mul.ref(4, 1));
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1293, 3072);
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb241:
    assume {:verifier.code 0} true;
    $p1296 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(29, 16)), $mul.ref(0, 1));
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1296, 89088);
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    $p1299 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(29, 16)), $mul.ref(4, 1));
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1299, 3072);
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb242:
    assume {:verifier.code 0} true;
    $p1302 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(30, 16)), $mul.ref(0, 1));
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1302, 92160);
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    $p1305 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(30, 16)), $mul.ref(4, 1));
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1305, 3072);
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    goto $bb243;

  $bb243:
    assume {:verifier.code 0} true;
    $p1308 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(31, 16)), $mul.ref(0, 1));
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1308, 95232);
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $p1311 := $add.ref($add.ref($add.ref($add.ref($p1096, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(31, 16)), $mul.ref(4, 1));
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1311, 3072);
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb244:
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 445} $p1312 := usb_alloc_urb(32, 208);
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    $i1313 := $p2i.ref.i64($p1312);
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    $i1314 := $eq.i64($i1313, 0);
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    $i14 := 6;
    assume {:branchcond $i1314} true;
    goto $bb246, $bb247;

  $bb247:
    assume !($i1314 == 1);
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb248:
    assume {:verifier.code 0} true;
    $p1316 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(104, 1)), $mul.ref(6, 8));
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1316, $p1312);
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    $p1317 := $add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(112, 1));
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} $p1318 := usb_alloc_coherent($p4, 98304, 208, $p1317);
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    $p1319 := $add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1319, urb_complete_iso);
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    $p1320 := $add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1320, $p4);
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    $p1321 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(184, 1));
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    $p1322 := $load.ref($M.0, $p1321);
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    $p1324 := $add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1324, $p1322);
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    $p1325 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(96, 1));
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    $i1326 := $load.i8($M.0, $p1325);
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    $i1327 := $zext.i8.i32($i1326);
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} $i1328 := __create_pipe($p4, $i1327);
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    $i1329 := $or.i32($i1328, 128);
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    $p1330 := $add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1330, $i1329);
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    $p1331 := $add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(168, 1));
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1331, 1);
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    $p1332 := $add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1332, 6);
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    $p1333 := $add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1333, 32);
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    $p1334 := $add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1334, $p1318);
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $p1335 := $add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(132, 1));
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1335, 98304);
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb249:
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb250:
    assume {:verifier.code 0} true;
    $p1338 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1338, 0);
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    $p1341 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1341, 3072);
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb251:
    assume {:verifier.code 0} true;
    $p1344 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1344, 3072);
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    $p1347 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(1, 16)), $mul.ref(4, 1));
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1347, 3072);
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    goto $bb252;

  $bb252:
    assume {:verifier.code 0} true;
    $p1350 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(2, 16)), $mul.ref(0, 1));
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1350, 6144);
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    $p1353 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(2, 16)), $mul.ref(4, 1));
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1353, 3072);
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb253:
    assume {:verifier.code 0} true;
    $p1356 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(3, 16)), $mul.ref(0, 1));
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1356, 9216);
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    $p1359 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(3, 16)), $mul.ref(4, 1));
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1359, 3072);
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    goto $bb254;

  $bb254:
    assume {:verifier.code 0} true;
    $p1362 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(4, 16)), $mul.ref(0, 1));
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1362, 12288);
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    $p1365 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(4, 16)), $mul.ref(4, 1));
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1365, 3072);
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    goto $bb255;

  $bb255:
    assume {:verifier.code 0} true;
    $p1368 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(5, 16)), $mul.ref(0, 1));
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1368, 15360);
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    $p1371 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(5, 16)), $mul.ref(4, 1));
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1371, 3072);
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb256:
    assume {:verifier.code 0} true;
    $p1374 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(6, 16)), $mul.ref(0, 1));
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1374, 18432);
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    $p1377 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(6, 16)), $mul.ref(4, 1));
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1377, 3072);
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb257:
    assume {:verifier.code 0} true;
    $p1380 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(7, 16)), $mul.ref(0, 1));
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1380, 21504);
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $p1383 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(7, 16)), $mul.ref(4, 1));
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1383, 3072);
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb258:
    assume {:verifier.code 0} true;
    $p1386 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(8, 16)), $mul.ref(0, 1));
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1386, 24576);
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    $p1389 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(8, 16)), $mul.ref(4, 1));
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1389, 3072);
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb259:
    assume {:verifier.code 0} true;
    $p1392 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(9, 16)), $mul.ref(0, 1));
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1392, 27648);
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    $p1395 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(9, 16)), $mul.ref(4, 1));
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1395, 3072);
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb260:
    assume {:verifier.code 0} true;
    $p1398 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(10, 16)), $mul.ref(0, 1));
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1398, 30720);
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    $p1401 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(10, 16)), $mul.ref(4, 1));
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1401, 3072);
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    goto $bb261;

  $bb261:
    assume {:verifier.code 0} true;
    $p1404 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(11, 16)), $mul.ref(0, 1));
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1404, 33792);
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    $p1407 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(11, 16)), $mul.ref(4, 1));
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1407, 3072);
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb262:
    assume {:verifier.code 0} true;
    $p1410 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(12, 16)), $mul.ref(0, 1));
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1410, 36864);
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    $p1413 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(12, 16)), $mul.ref(4, 1));
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1413, 3072);
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    goto $bb263;

  $bb263:
    assume {:verifier.code 0} true;
    $p1416 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(13, 16)), $mul.ref(0, 1));
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1416, 39936);
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    $p1419 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(13, 16)), $mul.ref(4, 1));
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1419, 3072);
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    goto $bb264;

  $bb264:
    assume {:verifier.code 0} true;
    $p1422 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(14, 16)), $mul.ref(0, 1));
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1422, 43008);
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    $p1425 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(14, 16)), $mul.ref(4, 1));
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1425, 3072);
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb265:
    assume {:verifier.code 0} true;
    $p1428 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(15, 16)), $mul.ref(0, 1));
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1428, 46080);
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    $p1431 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(15, 16)), $mul.ref(4, 1));
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1431, 3072);
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb266:
    assume {:verifier.code 0} true;
    $p1434 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(16, 16)), $mul.ref(0, 1));
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1434, 49152);
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    $p1437 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(16, 16)), $mul.ref(4, 1));
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1437, 3072);
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb267:
    assume {:verifier.code 0} true;
    $p1440 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(17, 16)), $mul.ref(0, 1));
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1440, 52224);
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    $p1443 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(17, 16)), $mul.ref(4, 1));
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1443, 3072);
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb268:
    assume {:verifier.code 0} true;
    $p1446 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(18, 16)), $mul.ref(0, 1));
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1446, 55296);
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    $p1449 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(18, 16)), $mul.ref(4, 1));
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1449, 3072);
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    goto $bb269;

  $bb269:
    assume {:verifier.code 0} true;
    $p1452 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(19, 16)), $mul.ref(0, 1));
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1452, 58368);
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    $p1455 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(19, 16)), $mul.ref(4, 1));
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1455, 3072);
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb270:
    assume {:verifier.code 0} true;
    $p1458 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(20, 16)), $mul.ref(0, 1));
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1458, 61440);
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    $p1461 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(20, 16)), $mul.ref(4, 1));
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1461, 3072);
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb271:
    assume {:verifier.code 0} true;
    $p1464 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(21, 16)), $mul.ref(0, 1));
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1464, 64512);
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    $p1467 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(21, 16)), $mul.ref(4, 1));
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1467, 3072);
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    goto $bb272;

  $bb272:
    assume {:verifier.code 0} true;
    $p1470 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(22, 16)), $mul.ref(0, 1));
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1470, 67584);
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    $p1473 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(22, 16)), $mul.ref(4, 1));
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1473, 3072);
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb273:
    assume {:verifier.code 0} true;
    $p1476 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(23, 16)), $mul.ref(0, 1));
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1476, 70656);
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    $p1479 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(23, 16)), $mul.ref(4, 1));
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1479, 3072);
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb274:
    assume {:verifier.code 0} true;
    $p1482 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(24, 16)), $mul.ref(0, 1));
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1482, 73728);
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    $p1485 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(24, 16)), $mul.ref(4, 1));
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1485, 3072);
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    goto $bb275;

  $bb275:
    assume {:verifier.code 0} true;
    $p1488 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(25, 16)), $mul.ref(0, 1));
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1488, 76800);
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    $p1491 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(25, 16)), $mul.ref(4, 1));
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1491, 3072);
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    goto $bb276;

  $bb276:
    assume {:verifier.code 0} true;
    $p1494 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(26, 16)), $mul.ref(0, 1));
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1494, 79872);
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    $p1497 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(26, 16)), $mul.ref(4, 1));
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1497, 3072);
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb277:
    assume {:verifier.code 0} true;
    $p1500 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(27, 16)), $mul.ref(0, 1));
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1500, 82944);
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    $p1503 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(27, 16)), $mul.ref(4, 1));
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1503, 3072);
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    goto $bb278;

  $bb278:
    assume {:verifier.code 0} true;
    $p1506 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(28, 16)), $mul.ref(0, 1));
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1506, 86016);
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    $p1509 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(28, 16)), $mul.ref(4, 1));
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1509, 3072);
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    goto $bb279;

  $bb279:
    assume {:verifier.code 0} true;
    $p1512 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(29, 16)), $mul.ref(0, 1));
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1512, 89088);
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    $p1515 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(29, 16)), $mul.ref(4, 1));
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1515, 3072);
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    goto $bb280;

  $bb280:
    assume {:verifier.code 0} true;
    $p1518 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(30, 16)), $mul.ref(0, 1));
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1518, 92160);
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    $p1521 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(30, 16)), $mul.ref(4, 1));
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1521, 3072);
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    goto $bb281;

  $bb281:
    assume {:verifier.code 0} true;
    $p1524 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(31, 16)), $mul.ref(0, 1));
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1524, 95232);
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    $p1527 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(31, 16)), $mul.ref(4, 1));
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1527, 3072);
    assume {:verifier.code 0} true;
    goto $bb282;

  $bb282:
    assume {:verifier.code 0} true;
    goto $bb283;

  $bb283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} $p1528 := usb_alloc_urb(32, 208);
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    $i1529 := $p2i.ref.i64($p1528);
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    $i1530 := $eq.i64($i1529, 0);
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    $i14 := 7;
    assume {:branchcond $i1530} true;
    goto $bb284, $bb285;

  $bb285:
    assume !($i1530 == 1);
    assume {:verifier.code 0} true;
    goto $bb286;

  $bb286:
    assume {:verifier.code 0} true;
    $p1532 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(104, 1)), $mul.ref(7, 8));
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1532, $p1528);
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    $p1533 := $add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(112, 1));
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} $p1534 := usb_alloc_coherent($p4, 98304, 208, $p1533);
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    $p1535 := $add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1535, urb_complete_iso);
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    $p1536 := $add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1536, $p4);
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    $p1537 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(184, 1));
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    $p1538 := $load.ref($M.0, $p1537);
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    $p1540 := $add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1540, $p1538);
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    $p1541 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(96, 1));
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    $i1542 := $load.i8($M.0, $p1541);
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    $i1543 := $zext.i8.i32($i1542);
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} $i1544 := __create_pipe($p4, $i1543);
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    $i1545 := $or.i32($i1544, 128);
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    $p1546 := $add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1546, $i1545);
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    $p1547 := $add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(168, 1));
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1547, 1);
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    $p1548 := $add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1548, 6);
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    $p1549 := $add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1549, 32);
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    $p1550 := $add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1550, $p1534);
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    $p1551 := $add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(132, 1));
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1551, 98304);
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    goto $bb287;

  $bb287:
    assume {:verifier.code 0} true;
    goto $bb288;

  $bb288:
    assume {:verifier.code 0} true;
    $p1554 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1554, 0);
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    $p1557 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1557, 3072);
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    goto $bb289;

  $bb289:
    assume {:verifier.code 0} true;
    $p1560 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1560, 3072);
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    $p1563 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(1, 16)), $mul.ref(4, 1));
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1563, 3072);
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    goto $bb290;

  $bb290:
    assume {:verifier.code 0} true;
    $p1566 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(2, 16)), $mul.ref(0, 1));
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1566, 6144);
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    $p1569 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(2, 16)), $mul.ref(4, 1));
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1569, 3072);
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    goto $bb291;

  $bb291:
    assume {:verifier.code 0} true;
    $p1572 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(3, 16)), $mul.ref(0, 1));
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1572, 9216);
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    $p1575 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(3, 16)), $mul.ref(4, 1));
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1575, 3072);
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb292:
    assume {:verifier.code 0} true;
    $p1578 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(4, 16)), $mul.ref(0, 1));
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1578, 12288);
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    $p1581 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(4, 16)), $mul.ref(4, 1));
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1581, 3072);
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    goto $bb293;

  $bb293:
    assume {:verifier.code 0} true;
    $p1584 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(5, 16)), $mul.ref(0, 1));
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1584, 15360);
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    $p1587 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(5, 16)), $mul.ref(4, 1));
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1587, 3072);
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb294:
    assume {:verifier.code 0} true;
    $p1590 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(6, 16)), $mul.ref(0, 1));
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1590, 18432);
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    $p1593 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(6, 16)), $mul.ref(4, 1));
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1593, 3072);
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb295:
    assume {:verifier.code 0} true;
    $p1596 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(7, 16)), $mul.ref(0, 1));
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1596, 21504);
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    $p1599 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(7, 16)), $mul.ref(4, 1));
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1599, 3072);
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    goto $bb296;

  $bb296:
    assume {:verifier.code 0} true;
    $p1602 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(8, 16)), $mul.ref(0, 1));
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1602, 24576);
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    $p1605 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(8, 16)), $mul.ref(4, 1));
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1605, 3072);
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    goto $bb297;

  $bb297:
    assume {:verifier.code 0} true;
    $p1608 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(9, 16)), $mul.ref(0, 1));
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1608, 27648);
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    $p1611 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(9, 16)), $mul.ref(4, 1));
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1611, 3072);
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    goto $bb298;

  $bb298:
    assume {:verifier.code 0} true;
    $p1614 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(10, 16)), $mul.ref(0, 1));
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1614, 30720);
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    $p1617 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(10, 16)), $mul.ref(4, 1));
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1617, 3072);
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    goto $bb299;

  $bb299:
    assume {:verifier.code 0} true;
    $p1620 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(11, 16)), $mul.ref(0, 1));
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1620, 33792);
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    $p1623 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(11, 16)), $mul.ref(4, 1));
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1623, 3072);
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    goto $bb300;

  $bb300:
    assume {:verifier.code 0} true;
    $p1626 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(12, 16)), $mul.ref(0, 1));
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1626, 36864);
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    $p1629 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(12, 16)), $mul.ref(4, 1));
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1629, 3072);
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb301:
    assume {:verifier.code 0} true;
    $p1632 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(13, 16)), $mul.ref(0, 1));
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1632, 39936);
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    $p1635 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(13, 16)), $mul.ref(4, 1));
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1635, 3072);
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    goto $bb302;

  $bb302:
    assume {:verifier.code 0} true;
    $p1638 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(14, 16)), $mul.ref(0, 1));
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1638, 43008);
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    $p1641 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(14, 16)), $mul.ref(4, 1));
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1641, 3072);
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    goto $bb303;

  $bb303:
    assume {:verifier.code 0} true;
    $p1644 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(15, 16)), $mul.ref(0, 1));
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1644, 46080);
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    $p1647 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(15, 16)), $mul.ref(4, 1));
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1647, 3072);
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    goto $bb304;

  $bb304:
    assume {:verifier.code 0} true;
    $p1650 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(16, 16)), $mul.ref(0, 1));
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1650, 49152);
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    $p1653 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(16, 16)), $mul.ref(4, 1));
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1653, 3072);
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    goto $bb305;

  $bb305:
    assume {:verifier.code 0} true;
    $p1656 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(17, 16)), $mul.ref(0, 1));
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1656, 52224);
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    $p1659 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(17, 16)), $mul.ref(4, 1));
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1659, 3072);
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    goto $bb306;

  $bb306:
    assume {:verifier.code 0} true;
    $p1662 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(18, 16)), $mul.ref(0, 1));
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1662, 55296);
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    $p1665 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(18, 16)), $mul.ref(4, 1));
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1665, 3072);
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    goto $bb307;

  $bb307:
    assume {:verifier.code 0} true;
    $p1668 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(19, 16)), $mul.ref(0, 1));
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1668, 58368);
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    $p1671 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(19, 16)), $mul.ref(4, 1));
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1671, 3072);
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    goto $bb308;

  $bb308:
    assume {:verifier.code 0} true;
    $p1674 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(20, 16)), $mul.ref(0, 1));
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1674, 61440);
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    $p1677 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(20, 16)), $mul.ref(4, 1));
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1677, 3072);
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    goto $bb309;

  $bb309:
    assume {:verifier.code 0} true;
    $p1680 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(21, 16)), $mul.ref(0, 1));
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1680, 64512);
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    $p1683 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(21, 16)), $mul.ref(4, 1));
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1683, 3072);
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb310:
    assume {:verifier.code 0} true;
    $p1686 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(22, 16)), $mul.ref(0, 1));
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1686, 67584);
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    $p1689 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(22, 16)), $mul.ref(4, 1));
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1689, 3072);
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    goto $bb311;

  $bb311:
    assume {:verifier.code 0} true;
    $p1692 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(23, 16)), $mul.ref(0, 1));
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1692, 70656);
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    $p1695 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(23, 16)), $mul.ref(4, 1));
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1695, 3072);
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    goto $bb312;

  $bb312:
    assume {:verifier.code 0} true;
    $p1698 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(24, 16)), $mul.ref(0, 1));
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1698, 73728);
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    $p1701 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(24, 16)), $mul.ref(4, 1));
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1701, 3072);
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb313:
    assume {:verifier.code 0} true;
    $p1704 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(25, 16)), $mul.ref(0, 1));
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1704, 76800);
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    $p1707 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(25, 16)), $mul.ref(4, 1));
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1707, 3072);
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    goto $bb314;

  $bb314:
    assume {:verifier.code 0} true;
    $p1710 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(26, 16)), $mul.ref(0, 1));
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1710, 79872);
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    $p1713 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(26, 16)), $mul.ref(4, 1));
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1713, 3072);
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    goto $bb315;

  $bb315:
    assume {:verifier.code 0} true;
    $p1716 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(27, 16)), $mul.ref(0, 1));
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1716, 82944);
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    $p1719 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(27, 16)), $mul.ref(4, 1));
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1719, 3072);
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    goto $bb316;

  $bb316:
    assume {:verifier.code 0} true;
    $p1722 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(28, 16)), $mul.ref(0, 1));
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1722, 86016);
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    $p1725 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(28, 16)), $mul.ref(4, 1));
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1725, 3072);
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    goto $bb317;

  $bb317:
    assume {:verifier.code 0} true;
    $p1728 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(29, 16)), $mul.ref(0, 1));
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1728, 89088);
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    $p1731 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(29, 16)), $mul.ref(4, 1));
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1731, 3072);
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    goto $bb318;

  $bb318:
    assume {:verifier.code 0} true;
    $p1734 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(30, 16)), $mul.ref(0, 1));
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1734, 92160);
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    $p1737 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(30, 16)), $mul.ref(4, 1));
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1737, 3072);
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    goto $bb319;

  $bb319:
    assume {:verifier.code 0} true;
    $p1740 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(31, 16)), $mul.ref(0, 1));
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1740, 95232);
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $p1743 := $add.ref($add.ref($add.ref($add.ref($p1528, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(31, 16)), $mul.ref(4, 1));
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1743, 3072);
    assume {:verifier.code 0} true;
    goto $bb320;

  $bb320:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb284:
    assume {:verifier.code 0} true;
    assume $i1530 == 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i42 := $sgt.i32($i14, 0);
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 12);
    goto $bb3;

  $bb18:
    assume $i42 == 1;
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    $i43 := $i14;
    goto $bb21;

  $bb21:
    call $i44, $i45, $i43 := prepare_iso_urb_loop_$bb21($i44, $i45, $i43);
    goto $bb21_last;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i44 := $sub.i32($i43, 1);
    call {:si_unique_call 430} {:cexpr "i"} boogie_si_record_i32($i44);
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    $i45 := $sgt.i32($i44, 0);
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i45 == 1);
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb23:
    assume $i45 == 1;
    assume {:verifier.code 0} true;
    $i43 := $i44;
    goto $bb23_dummy;

  $bb246:
    assume {:verifier.code 0} true;
    assume $i1314 == 1;
    goto $bb8;

  $bb208:
    assume {:verifier.code 0} true;
    assume $i1098 == 1;
    goto $bb8;

  $bb170:
    assume {:verifier.code 0} true;
    assume $i882 == 1;
    goto $bb8;

  $bb132:
    assume {:verifier.code 0} true;
    assume $i666 == 1;
    goto $bb8;

  $bb94:
    assume {:verifier.code 0} true;
    assume $i450 == 1;
    goto $bb8;

  $bb56:
    assume {:verifier.code 0} true;
    assume $i234 == 1;
    goto $bb8;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb8;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb23_dummy:
    assume false;
    return;

  $bb21_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2091;
}



const __init_work: ref;

axiom __init_work == $sub.ref(0, 330803);

procedure __init_work($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __init_work($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} {:cexpr "__init_work:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    return;
}



const lockdep_init_map: ref;

axiom lockdep_init_map == $sub.ref(0, 331835);

procedure lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} {:cexpr "lockdep_init_map:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    return;
}



const iso_bubble_handler: ref;

axiom iso_bubble_handler == $sub.ref(0, 332867);

procedure iso_bubble_handler($p0: ref);



const prepare_bulk_urb: ref;

axiom prepare_bulk_urb == $sub.ref(0, 333899);

procedure prepare_bulk_urb($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation prepare_bulk_urb($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i8;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var vslice_dummy_var_150: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(104, 1)), $mul.ref(0, 8));
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(104, 1));
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(176, 1));
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 3864)), $mul.ref(512, 1));
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(96, 1));
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i8($i14);
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(184, 1));
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} vslice_dummy_var_150 := alloc_bulk_urbs_generic($p7, 8, $p11, $i15, 8192, 208, urb_complete_bulk, $p18);
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const fire_all_urb: ref;

axiom fire_all_urb == $sub.ref(0, 334931);

procedure fire_all_urb($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation fire_all_urb($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $p46: ref;
  var $p47: ref;
  var $i8: i32;
  var $i48: i1;
  var vslice_dummy_var_151: i32;
  var vslice_dummy_var_152: i32;
  var vslice_dummy_var_153: i32;
  var vslice_dummy_var_154: i32;
  var vslice_dummy_var_155: i32;
  var vslice_dummy_var_156: i32;
  var vslice_dummy_var_157: i32;
  var vslice_dummy_var_158: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(192, 1));
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, 1);
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(104, 1)), $mul.ref(0, 8));
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} $i5 := usb_submit_urb($p4, 208);
    call {:si_unique_call 455} {:cexpr "ret"} boogie_si_record_i32($i5);
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(104, 1)), $mul.ref(1, 8));
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} $i12 := usb_submit_urb($p11, 208);
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(104, 1)), $mul.ref(2, 8));
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 459} $i18 := usb_submit_urb($p17, 208);
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(104, 1)), $mul.ref(3, 8));
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} $i24 := usb_submit_urb($p23, 208);
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(104, 1)), $mul.ref(4, 8));
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} $i30 := usb_submit_urb($p29, 208);
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(104, 1)), $mul.ref(5, 8));
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} $i36 := usb_submit_urb($p35, 208);
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(104, 1)), $mul.ref(6, 8));
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} $i42 := usb_submit_urb($p41, 208);
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(104, 1)), $mul.ref(7, 8));
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} $i8 := usb_submit_urb($p47, 208);
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i8, 0);
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb32:
    assume $i48 == 1;
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} vslice_dummy_var_158 := printk.ref.ref.i32.i32.i32(.str.27, .str.28, 728, 7, $i8);
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb28:
    assume $i43 == 1;
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} vslice_dummy_var_157 := printk.ref.ref.i32.i32.i32(.str.27, .str.28, 728, 6, $i42);
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb24:
    assume $i37 == 1;
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} vslice_dummy_var_156 := printk.ref.ref.i32.i32.i32(.str.27, .str.28, 728, 5, $i36);
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb20:
    assume $i31 == 1;
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} vslice_dummy_var_155 := printk.ref.ref.i32.i32.i32(.str.27, .str.28, 728, 4, $i30);
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb16:
    assume $i25 == 1;
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 462} vslice_dummy_var_154 := printk.ref.ref.i32.i32.i32(.str.27, .str.28, 728, 3, $i24);
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb12:
    assume $i19 == 1;
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} vslice_dummy_var_153 := printk.ref.ref.i32.i32.i32(.str.27, .str.28, 728, 2, $i18);
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb8:
    assume $i13 == 1;
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 458} vslice_dummy_var_152 := printk.ref.ref.i32.i32.i32(.str.27, .str.28, 728, 1, $i12);
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb3:
    assume $i6 == 1;
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} vslice_dummy_var_151 := printk.ref.ref.i32.i32.i32(.str.27, .str.28, 728, 0, $i5);
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const urb_complete_bulk: ref;

axiom urb_complete_bulk == $sub.ref(0, 335963);

procedure urb_complete_bulk($p0: ref);



const get_video_frame: ref;

axiom get_video_frame == $sub.ref(0, 336995);

procedure get_video_frame($p0: ref, $p1: ref) returns ($r: i1);



const copy_vbi_video_data: ref;

axiom copy_vbi_video_data == $sub.ref(0, 338027);

procedure copy_vbi_video_data($p0: ref, $p1: ref, $i2: i32);



const check_trailer: ref;

axiom check_trailer == $sub.ref(0, 339059);

procedure check_trailer($p0: ref, $p1: ref, $i2: i32);



const strncmp: ref;

axiom strncmp == $sub.ref(0, 340091);

procedure strncmp($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);



const copy_video_data: ref;

axiom copy_video_data == $sub.ref(0, 341123);

procedure copy_video_data($p0: ref, $p1: ref, $i2: i32);



const end_field: ref;

axiom end_field == $sub.ref(0, 342155);

procedure end_field($p0: ref);



const submit_frame: ref;

axiom submit_frame == $sub.ref(0, 343187);

procedure submit_frame($p0: ref);



const do_gettimeofday: ref;

axiom do_gettimeofday == $sub.ref(0, 344219);

procedure do_gettimeofday($p0: ref);



const __wake_up: ref;

axiom __wake_up == $sub.ref(0, 345251);

procedure __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref);



const copy_vbi_data: ref;

axiom copy_vbi_data == $sub.ref(0, 346283);

procedure copy_vbi_data($p0: ref, $p1: ref, $i2: i32);



const get_frame: ref;

axiom get_frame == $sub.ref(0, 347315);

procedure get_frame($p0: ref, $p1: ref) returns ($r: i1);



const videobuf_to_vmalloc: ref;

axiom videobuf_to_vmalloc == $sub.ref(0, 348347);

procedure videobuf_to_vmalloc($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation videobuf_to_vmalloc($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} $p1 := external_alloc();
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const list_empty: ref;

axiom list_empty == $sub.ref(0, 349379);

procedure list_empty($p0: ref) returns ($r: i32);



const ldv_mutex_lock_25: ref;

axiom ldv_mutex_lock_25 == $sub.ref(0, 350411);

procedure ldv_mutex_lock_25($p0: ref);



const ldv_mutex_unlock_26: ref;

axiom ldv_mutex_unlock_26 == $sub.ref(0, 351443);

procedure ldv_mutex_unlock_26($p0: ref);



const urb_complete_iso: ref;

axiom urb_complete_iso == $sub.ref(0, 352475);

procedure urb_complete_iso($p0: ref);



const get_chunk: ref;

axiom get_chunk == $sub.ref(0, 353507);

procedure get_chunk($i0: i32, $p1: ref, $p2: ref, $p3: ref, $p4: ref) returns ($r: i32);



const schedule_work: ref;

axiom schedule_work == $sub.ref(0, 354539);

procedure schedule_work($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation schedule_work($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 1} true;
    call {:si_unique_call 472} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 473} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const set_std: ref;

axiom set_std == $sub.ref(0, 355571);

procedure set_std($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $CurrAddr, assertsPassed;



implementation set_std($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $p11: ref;
  var $i12: i32;
  var $i13: i64;
  var $p15: ref;
  var $p16: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $i25: i64;
  var $p27: ref;
  var $i28: i64;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i64;
  var $i33: i1;
  var $p34: ref;
  var $p36: ref;
  var $i35: i32;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $p44: ref;
  var $i45: i32;
  var $i46: i32;
  var $i47: i32;
  var $p48: ref;
  var $p49: ref;
  var $i18: i32;
  var $i50: i64;
  var $i51: i64;
  var $i52: i1;
  var $i53: i64;
  var $i54: i64;
  var $i55: i1;
  var $i56: i64;
  var $i57: i64;
  var $i58: i1;
  var $i59: i64;
  var $i60: i64;
  var $i61: i1;
  var $i62: i64;
  var $i63: i64;
  var $i64: i1;
  var $i65: i64;
  var $i66: i64;
  var $i67: i1;
  var $i68: i64;
  var $i69: i64;
  var $i70: i1;
  var $i71: i64;
  var $i72: i64;
  var $i73: i1;
  var $i74: i64;
  var $i75: i64;
  var $i76: i1;
  var $i77: i64;
  var $i78: i64;
  var $i79: i1;
  var $i80: i64;
  var $i81: i64;
  var $i82: i1;
  var $i83: i64;
  var $i84: i64;
  var $i85: i1;
  var $i86: i64;
  var $i87: i64;
  var $i88: i1;
  var $i89: i64;
  var $i90: i64;
  var $i91: i1;
  var $i92: i64;
  var $i93: i64;
  var $i94: i1;
  var $i95: i64;
  var $i96: i64;
  var $i97: i1;
  var $i98: i64;
  var $i99: i64;
  var $i100: i1;
  var vslice_dummy_var_159: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 474} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i5 := $load.i64($M.0, $p1);
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    $i6 := $and.i64($i5, 32);
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    $i8 := 0;
    assume {:branchcond $i7} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i50 := $load.i64($M.0, $p1);
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    $i51 := $and.i64($i50, 1);
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    $i52 := $ne.i64($i51, 0);
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    $i8 := 1;
    assume {:branchcond $i52} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i53 := $load.i64($M.0, $p1);
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    $i54 := $and.i64($i53, 4);
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    $i55 := $ne.i64($i54, 0);
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    $i8 := 2;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i56 := $load.i64($M.0, $p1);
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    $i57 := $and.i64($i56, 8);
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    $i58 := $ne.i64($i57, 0);
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    $i8 := 3;
    assume {:branchcond $i58} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i59 := $load.i64($M.0, $p1);
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    $i60 := $and.i64($i59, 16);
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    $i61 := $ne.i64($i60, 0);
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    $i8 := 4;
    assume {:branchcond $i61} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i62 := $load.i64($M.0, $p1);
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    $i63 := $and.i64($i62, 256);
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    $i64 := $ne.i64($i63, 0);
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    $i8 := 5;
    assume {:branchcond $i64} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i65 := $load.i64($M.0, $p1);
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    $i66 := $and.i64($i65, 512);
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    $i67 := $ne.i64($i66, 0);
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    $i8 := 6;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i68 := $load.i64($M.0, $p1);
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    $i69 := $and.i64($i68, 1024);
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    $i70 := $ne.i64($i69, 0);
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    $i8 := 7;
    assume {:branchcond $i70} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $i71 := $load.i64($M.0, $p1);
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    $i72 := $and.i64($i71, 4096);
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    $i73 := $ne.i64($i72, 0);
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    $i8 := 8;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $i74 := $load.i64($M.0, $p1);
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    $i75 := $and.i64($i74, 8192);
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    $i76 := $ne.i64($i75, 0);
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    $i8 := 9;
    assume {:branchcond $i76} true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $i77 := $load.i64($M.0, $p1);
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    $i78 := $and.i64($i77, 65536);
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    $i79 := $ne.i64($i78, 0);
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    $i8 := 10;
    assume {:branchcond $i79} true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $i80 := $load.i64($M.0, $p1);
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    $i81 := $and.i64($i80, 131072);
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    $i82 := $ne.i64($i81, 0);
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    $i8 := 11;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $i83 := $load.i64($M.0, $p1);
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    $i84 := $and.i64($i83, 262144);
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    $i85 := $ne.i64($i84, 0);
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    $i8 := 12;
    assume {:branchcond $i85} true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $i86 := $load.i64($M.0, $p1);
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    $i87 := $and.i64($i86, 524288);
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    $i88 := $ne.i64($i87, 0);
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    $i8 := 13;
    assume {:branchcond $i88} true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $i89 := $load.i64($M.0, $p1);
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    $i90 := $and.i64($i89, 1048576);
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    $i91 := $ne.i64($i90, 0);
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    $i8 := 14;
    assume {:branchcond $i91} true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $i92 := $load.i64($M.0, $p1);
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    $i93 := $and.i64($i92, 2097152);
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    $i94 := $ne.i64($i93, 0);
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    $i8 := 15;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $i95 := $load.i64($M.0, $p1);
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    $i96 := $and.i64($i95, 4194304);
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    $i97 := $ne.i64($i96, 0);
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    $i8 := 16;
    assume true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $i98 := $load.i64($M.0, $p1);
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    $i99 := $and.i64($i98, 8388608);
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    $i100 := $ne.i64($i99, 0);
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    $i8 := 17;
    assume true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 22);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb88:
    assume {:verifier.code 0} true;
    assume $i100 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref($i9, 24)), $mul.ref(20, 1));
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.21, $p11);
    call {:si_unique_call 475} {:cexpr "param"} boogie_si_record_i32($i12);
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i8);
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref($i13, 24)), $mul.ref(8, 1));
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} vslice_dummy_var_159 := printk.ref.ref.i32.ref(.str.40, .str.41, 946, $p16);
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(16, 1));
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} ldv_mutex_lock_11($p19);
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} $i20 := send_set_req($p0, 20, $i12, $p2);
    call {:si_unique_call 479} {:cexpr "ret"} boogie_si_record_i32($i20);
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb13;

  $bb13:
    assume !($i21 == 1);
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p2);
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i8);
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref($i25, 24)), $mul.ref(0, 1));
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    $i28 := $load.i64($M.21, $p27);
    $p29 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p29, $i28);
    $p30 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    $i31 := $load.i64($M.0, $p30);
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    $i32 := $and.i64($i31, 63744);
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i32, 0);
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i33 == 1);
    $p36 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(816, 1)), $mul.ref(28, 1));
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, 51840);
    assume {:verifier.code 0} true;
    $i35 := 576;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(8, 1)), $mul.ref(20, 1)), $mul.ref(4, 1));
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, $i35);
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(16, 1));
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} ldv_mutex_unlock_12($p49);
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    $i18 := $i20;
    goto $bb10;

  SeqInstr_109:
    assume !assertsPassed;
    return;

  $bb21:
    assume $i40 == 1;
    $p41 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(8, 1)), $mul.ref(20, 1)), $mul.ref(4, 1));
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p41, $i35);
    $p42 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(8, 1)), $mul.ref(20, 1)), $mul.ref(0, 1));
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    $p44 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(8, 1)), $mul.ref(20, 1)), $mul.ref(4, 1));
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    $i46 := $mul.i32($i43, $i45);
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    $i47 := $mul.i32($i46, 2);
    $p48 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(8, 1)), $mul.ref(20, 1)), $mul.ref(20, 1));
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p48, $i47);
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb18:
    assume $i33 == 1;
    $p34 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(816, 1)), $mul.ref(28, 1));
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, 34560);
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    $i35 := 480;
    goto $bb20;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb12;

  SeqInstr_106:
    assume !assertsPassed;
    return;

  $bb84:
    assume {:verifier.code 0} true;
    assume $i97 == 1;
    goto $bb4;

  $bb80:
    assume {:verifier.code 0} true;
    assume $i94 == 1;
    goto $bb4;

  $bb76:
    assume {:verifier.code 0} true;
    assume $i91 == 1;
    goto $bb4;

  $bb72:
    assume {:verifier.code 0} true;
    assume $i88 == 1;
    goto $bb4;

  $bb68:
    assume {:verifier.code 0} true;
    assume $i85 == 1;
    goto $bb4;

  $bb64:
    assume {:verifier.code 0} true;
    assume $i82 == 1;
    goto $bb4;

  $bb60:
    assume {:verifier.code 0} true;
    assume $i79 == 1;
    goto $bb4;

  $bb56:
    assume {:verifier.code 0} true;
    assume $i76 == 1;
    goto $bb4;

  $bb52:
    assume {:verifier.code 0} true;
    assume $i73 == 1;
    goto $bb4;

  $bb48:
    assume {:verifier.code 0} true;
    assume $i70 == 1;
    goto $bb4;

  $bb44:
    assume {:verifier.code 0} true;
    assume $i67 == 1;
    goto $bb4;

  $bb40:
    assume {:verifier.code 0} true;
    assume $i64 == 1;
    goto $bb4;

  $bb36:
    assume {:verifier.code 0} true;
    assume $i61 == 1;
    goto $bb4;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i58 == 1;
    goto $bb4;

  $bb28:
    assume {:verifier.code 0} true;
    assume $i55 == 1;
    goto $bb4;

  $bb24:
    assume {:verifier.code 0} true;
    assume $i52 == 1;
    goto $bb4;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb4;
}



const pd_vidioc_s_tuner: ref;

axiom pd_vidioc_s_tuner == $sub.ref(0, 356603);

procedure pd_vidioc_s_tuner($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $CurrAddr, assertsPassed;



implementation pd_vidioc_s_tuner($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $p11: ref;
  var $i12: i64;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $p19: ref;
  var $p20: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 481} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 482} {:cexpr "pd_vidioc_s_tuner:arg:index"} boogie_si_record_i32($i1);
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(16, 1));
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} ldv_mutex_lock_19($p3);
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i1);
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref(pd_audio_modes, $mul.ref(0, 60)), $mul.ref($i4, 12)), $mul.ref(0, 1));
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.22, $p6);
    call {:si_unique_call 484} {:cexpr "param"} boogie_si_record_i32($i7);
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} $i8 := send_set_req($p0, 42, $i7, $p2);
    call {:si_unique_call 486} {:cexpr "ret"} boogie_si_record_i32($i8);
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.0, $p11);
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} $i13 := get_audio_std($i12);
    call {:si_unique_call 488} {:cexpr "audiomode"} boogie_si_record_i32($i13);
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} $i14 := send_set_req($p0, 44, $i13, $p2);
    call {:si_unique_call 490} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    $i15 := $or.i32($i14, $i8);
    call {:si_unique_call 491} {:cexpr "ret"} boogie_si_record_i32($i15);
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 0);
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(16, 1));
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} ldv_mutex_unlock_20($p20);
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  SeqInstr_115:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(8, 1)), $mul.ref(4, 1));
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, $i1);
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_112:
    assume !assertsPassed;
    return;
}



const pd_vidioc_s_fmt: ref;

axiom pd_vidioc_s_fmt == $sub.ref(0, 357635);

procedure pd_vidioc_s_fmt($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $CurrAddr, assertsPassed;



implementation pd_vidioc_s_fmt($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $i9: i32;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $p18: ref;
  var $i17: i32;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i64;
  var $i32: i1;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $i41: i32;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $i46: i32;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $i53: i32;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $p57: ref;
  var $i58: i32;
  var $i59: i32;
  var $i60: i32;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i25: i32;
  var cmdloc_dummy_var_18: [ref]i8;
  var cmdloc_dummy_var_19: [ref]i8;
  var cmdloc_dummy_var_20: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(8, 1)), $mul.ref(20, 1));
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 0);
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 1346520914);
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, 1448695129);
    assume {:verifier.code 0} true;
    $i9 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} $i11 := send_set_req($p0, 21, $i9, $p2);
    call {:si_unique_call 495} {:cexpr "ret"} boogie_si_record_i32($i11);
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i13, 720);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i13, 720);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, 720);
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i17 := 1;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} $i19 := send_set_req($p0, 23, $i17, $p2);
    call {:si_unique_call 497} {:cexpr "tmp"} boogie_si_record_i32($i19);
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    $i20 := $or.i32($i19, $i11);
    call {:si_unique_call 498} {:cexpr "ret"} boogie_si_record_i32($i20);
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb17;

  $bb17:
    assume !($i21 == 1);
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p2);
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    $p28 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(8, 1)), $mul.ref(20, 1)), $mul.ref(8, 1));
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, $i27);
    $p29 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.0, $p29);
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    $i31 := $and.i64($i30, 63744);
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    $i33 := (if $i32 == 1 then 480 else 576);
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, $i33);
    $p35 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(8, 1)), $mul.ref(20, 1)), $mul.ref(0, 1));
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i36, $i38);
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb24;

  $bb24:
    assume !($i39 == 1);
    $p40 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(8, 1)), $mul.ref(20, 1)), $mul.ref(4, 1));
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i41, $i43);
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p1);
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p5);
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_18 := $M.0;
    cmdloc_dummy_var_19 := $M.0;
    call {:si_unique_call 500} cmdloc_dummy_var_20 := $memcpy.i8(cmdloc_dummy_var_18, cmdloc_dummy_var_19, $p62, $p63, 32, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_20;
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    $i25 := 0;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i44 == 1;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    $p47 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(8, 1)), $mul.ref(20, 1)), $mul.ref(0, 1));
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p47, $i46);
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p48);
    $p50 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(8, 1)), $mul.ref(20, 1)), $mul.ref(4, 1));
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p50, $i49);
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $p51);
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $i53 := $mul.i32($i52, 2);
    $p54 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(8, 1)), $mul.ref(20, 1)), $mul.ref(16, 1));
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p54, $i53);
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.0, $p55);
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.0, $p57);
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    $i59 := $mul.i32($i56, $i58);
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    $i60 := $mul.i32($i59, 2);
    $p61 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(8, 1)), $mul.ref(20, 1)), $mul.ref(20, 1));
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p61, $i60);
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i39 == 1;
    goto $bb23;

  $bb18:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(16, 1));
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} ldv_mutex_unlock_7($p24);
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32(0, 16);
    goto $bb20;

  SeqInstr_118:
    assume !assertsPassed;
    return;

  $bb15:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb16;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb8;

  $bb5:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i13, 704);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb10;

  $bb11:
    assume $i16 == 1;
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    $i17 := 2;
    goto $bb13;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    $i9 := 4;
    goto $bb3;
}



const ldv_mutex_unlock_7: ref;

axiom ldv_mutex_unlock_7 == $sub.ref(0, 358667);

procedure ldv_mutex_unlock_7($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_unlock_7($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} ldv_mutex_unlock_lock_of_poseidon($p0);
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} mutex_unlock($p0);
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_121:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_19: ref;

axiom ldv_mutex_lock_19 == $sub.ref(0, 359699);

procedure ldv_mutex_lock_19($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_lock_19($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} ldv_mutex_lock_lock_of_poseidon($p0);
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} mutex_lock($p0);
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_124:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_20: ref;

axiom ldv_mutex_unlock_20 == $sub.ref(0, 360731);

procedure ldv_mutex_unlock_20($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_unlock_20($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 505} ldv_mutex_unlock_lock_of_poseidon($p0);
    goto SeqInstr_127, SeqInstr_128;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  SeqInstr_129:
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} mutex_unlock($p0);
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_127:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_11: ref;

axiom ldv_mutex_lock_11 == $sub.ref(0, 361763);

procedure ldv_mutex_lock_11($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_lock_11($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} ldv_mutex_lock_lock_of_poseidon($p0);
    goto SeqInstr_130, SeqInstr_131;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  SeqInstr_132:
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} mutex_lock($p0);
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_130:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_12: ref;

axiom ldv_mutex_unlock_12 == $sub.ref(0, 362795);

procedure ldv_mutex_unlock_12($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_unlock_12($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} ldv_mutex_unlock_lock_of_poseidon($p0);
    goto SeqInstr_133, SeqInstr_134;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  SeqInstr_135:
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} mutex_unlock($p0);
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_133:
    assume !assertsPassed;
    return;
}



const pm_alsa_suspend: ref;

axiom pm_alsa_suspend == $sub.ref(0, 363827);

procedure pm_alsa_suspend($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation pm_alsa_suspend($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var vslice_dummy_var_160: i32;
  var vslice_dummy_var_161: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    $i1 := $M.2;
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 16);
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} vslice_dummy_var_161 := audio_buf_free($p0);
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} vslice_dummy_var_160 := printk.ref.ref.i32(.str, .str.5, 379);
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const audio_buf_free: ref;

axiom audio_buf_free == $sub.ref(0, 364859);

procedure audio_buf_free($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation audio_buf_free($p0: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p30: ref;
  var $p31: ref;
  var vslice_dummy_var_162: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    $p3 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(856, 1)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    $p17 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(856, 1)), $mul.ref(0, 1)), $mul.ref(1, 8));
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    $p25 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(856, 1)), $mul.ref(0, 1)), $mul.ref(2, 8));
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(856, 1)), $mul.ref(0, 1));
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} free_all_urb_generic($p11, 3);
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    $i12 := $M.2;
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, 16);
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} vslice_dummy_var_162 := printk.ref.ref.i32(.str, .str.63, 212);
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb15:
    assume $i28 == 1;
    $p30 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(856, 1)), $mul.ref(0, 1)), $mul.ref(2, 8));
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} usb_kill_urb($p31);
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb11:
    assume $i20 == 1;
    $p22 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(856, 1)), $mul.ref(0, 1)), $mul.ref(1, 8));
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} usb_kill_urb($p23);
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb3:
    assume $i6 == 1;
    $p8 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(856, 1)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} usb_kill_urb($p9);
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const ldv_mutex_lock_17: ref;

axiom ldv_mutex_lock_17 == $sub.ref(0, 365891);

procedure ldv_mutex_lock_17($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_lock_17($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} ldv_mutex_lock_lock_of_poseidon($p0);
    goto SeqInstr_136, SeqInstr_137;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  SeqInstr_138:
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} mutex_lock($p0);
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_136:
    assume !assertsPassed;
    return;
}



const send_get_req: ref;

axiom send_get_req == $sub.ref(0, 366923);

procedure send_get_req($p0: ref, $i1: i8, $i2: i32, $p3: ref, $p4: ref, $i5: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation send_get_req($p0: ref, $i1: i8, $i2: i32, $p3: ref, $p4: ref, $i5: i32) returns ($r: i32)
{
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $i136: i32;
  var $i137: i32;
  var $i138: i1;
  var $i140: i1;
  var $i143: i16;
  var $i144: i32;
  var $i145: i16;
  var $i141: i16;
  var $i142: i16;
  var $p146: ref;
  var $p147: ref;
  var $i148: i32;
  var $p149: ref;
  var $p150: ref;
  var $i151: i32;
  var $i152: i32;
  var $i153: i32;
  var $i154: i8;
  var $i155: i32;
  var $i156: i16;
  var $i157: i32;
  var $i158: i16;
  var $p159: ref;
  var $i160: i16;
  var $i161: i32;
  var $i162: i32;
  var $i163: i16;
  var $i164: i32;
  var $i165: i1;
  var $i166: i1;
  var $p167: ref;
  var $p168: ref;
  var $p169: ref;
  var $p170: ref;
  var $i171: i64;
  var $p172: ref;
  var $p173: ref;
  var $i139: i32;
  var cmdloc_dummy_var_21: [ref]i8;
  var cmdloc_dummy_var_22: [ref]i8;
  var cmdloc_dummy_var_23: [ref]i8;
  var cmdloc_dummy_var_24: [ref]i8;
  var cmdloc_dummy_var_25: [ref]i8;
  var cmdloc_dummy_var_26: [ref]i8;
  var cmdloc_dummy_var_27: [ref]i8;
  var cmdloc_dummy_var_28: [ref]i8;
  var cmdloc_dummy_var_29: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} $p6 := $alloc($mul.ref(128, $zext.i32.i64(1)));
    call {:si_unique_call 521} {:cexpr "send_get_req:arg:cmdid"} boogie_si_record_i8($i1);
    call {:si_unique_call 522} {:cexpr "send_get_req:arg:param"} boogie_si_record_i32($i2);
    call {:si_unique_call 523} {:cexpr "send_get_req:arg:datalen"} boogie_si_record_i32($i5);
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p7, 0);
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(1, 1));
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p8, 0);
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(2, 1));
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p9, 0);
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(3, 1));
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p10, 0);
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(4, 1));
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, 0);
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(5, 1));
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p12, 0);
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(6, 1));
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p13, 0);
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(7, 1));
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p14, 0);
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(8, 1));
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p15, 0);
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(9, 1));
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p16, 0);
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(10, 1));
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p17, 0);
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(11, 1));
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p18, 0);
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(12, 1));
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p19, 0);
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(13, 1));
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p20, 0);
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(14, 1));
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p21, 0);
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(15, 1));
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p22, 0);
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p23, 0);
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(17, 1));
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p24, 0);
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(18, 1));
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p25, 0);
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(19, 1));
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p26, 0);
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(20, 1));
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p27, 0);
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(21, 1));
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p28, 0);
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(22, 1));
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p29, 0);
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(23, 1));
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p30, 0);
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(24, 1));
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p31, 0);
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(25, 1));
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p32, 0);
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(26, 1));
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p33, 0);
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(27, 1));
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p34, 0);
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(28, 1));
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p35, 0);
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(29, 1));
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p36, 0);
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(30, 1));
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p37, 0);
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(31, 1));
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p38, 0);
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p39, 0);
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(33, 1));
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p40, 0);
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(34, 1));
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p41, 0);
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(35, 1));
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p42, 0);
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(36, 1));
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p43, 0);
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(37, 1));
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p44, 0);
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(38, 1));
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p45, 0);
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(39, 1));
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p46, 0);
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p47, 0);
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(41, 1));
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p48, 0);
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(42, 1));
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p49, 0);
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(43, 1));
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p50, 0);
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(44, 1));
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p51, 0);
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(45, 1));
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p52, 0);
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(46, 1));
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p53, 0);
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(47, 1));
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p54, 0);
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(48, 1));
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p55, 0);
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(49, 1));
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p56, 0);
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(50, 1));
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p57, 0);
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(51, 1));
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p58, 0);
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(52, 1));
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p59, 0);
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(53, 1));
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p60, 0);
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(54, 1));
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p61, 0);
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(55, 1));
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p62, 0);
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(56, 1));
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p63, 0);
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(57, 1));
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p64, 0);
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(58, 1));
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p65, 0);
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(59, 1));
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p66, 0);
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(60, 1));
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p67, 0);
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(61, 1));
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p68, 0);
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(62, 1));
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p69, 0);
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(63, 1));
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p70, 0);
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(64, 1));
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p71, 0);
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(65, 1));
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p72, 0);
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(66, 1));
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p73, 0);
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(67, 1));
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p74, 0);
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(68, 1));
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p75, 0);
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(69, 1));
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p76, 0);
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(70, 1));
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p77, 0);
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(71, 1));
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p78, 0);
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(72, 1));
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p79, 0);
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(73, 1));
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p80, 0);
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(74, 1));
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p81, 0);
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(75, 1));
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p82, 0);
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(76, 1));
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p83, 0);
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(77, 1));
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p84, 0);
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(78, 1));
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p85, 0);
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(79, 1));
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p86, 0);
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(80, 1));
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p87, 0);
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(81, 1));
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p88, 0);
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(82, 1));
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p89, 0);
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(83, 1));
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p90, 0);
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(84, 1));
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p91, 0);
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(85, 1));
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p92, 0);
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(86, 1));
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p93, 0);
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(87, 1));
    goto corral_source_split_4174;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p94, 0);
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(88, 1));
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p95, 0);
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(89, 1));
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p96, 0);
    goto corral_source_split_4179;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(90, 1));
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p97, 0);
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(91, 1));
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p98, 0);
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(92, 1));
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p99, 0);
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(93, 1));
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p100, 0);
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(94, 1));
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p101, 0);
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(95, 1));
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p102, 0);
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(96, 1));
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p103, 0);
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(97, 1));
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p104, 0);
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(98, 1));
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p105, 0);
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(99, 1));
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p106, 0);
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(100, 1));
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p107, 0);
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(101, 1));
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p108, 0);
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(102, 1));
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p109, 0);
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(103, 1));
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p110, 0);
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(104, 1));
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p111, 0);
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(105, 1));
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p112, 0);
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(106, 1));
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p113, 0);
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(107, 1));
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p114, 0);
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(108, 1));
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p115, 0);
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(109, 1));
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p116, 0);
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(110, 1));
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p117, 0);
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(111, 1));
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p118, 0);
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(112, 1));
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p119, 0);
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(113, 1));
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p120, 0);
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(114, 1));
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p121, 0);
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(115, 1));
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p122, 0);
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(116, 1));
    goto corral_source_split_4232;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p123, 0);
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(117, 1));
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p124, 0);
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(118, 1));
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p125, 0);
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(119, 1));
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p126, 0);
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(120, 1));
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p127, 0);
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(121, 1));
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p128, 0);
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(122, 1));
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p129, 0);
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(123, 1));
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p130, 0);
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(124, 1));
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p131, 0);
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(125, 1));
    goto corral_source_split_4250;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p132, 0);
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(126, 1));
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p133, 0);
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(127, 1));
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p134, 0);
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(3736, 1));
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    $i136 := $load.i32($M.0, $p135);
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    $i137 := $and.i32($i136, 128);
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    $i138 := $ne.i32($i137, 0);
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    assume {:branchcond $i138} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} __const_udelay(4295000);
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 525} __const_udelay(4295000);
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} __const_udelay(4295000);
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} __const_udelay(4295000);
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} __const_udelay(4295000);
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} __const_udelay(4295000);
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} __const_udelay(4295000);
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} __const_udelay(4295000);
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} __const_udelay(4295000);
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} __const_udelay(4295000);
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} __const_udelay(4295000);
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} __const_udelay(4295000);
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} __const_udelay(4295000);
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 547} __const_udelay(4295000);
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} __const_udelay(4295000);
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} __const_udelay(4295000);
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} __const_udelay(4295000);
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} __const_udelay(4295000);
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} __const_udelay(4295000);
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} __const_udelay(4295000);
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} __const_udelay(4295000);
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 555} __const_udelay(4295000);
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} __const_udelay(4295000);
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} __const_udelay(4295000);
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} __const_udelay(4295000);
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 559} __const_udelay(4295000);
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} __const_udelay(4295000);
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} __const_udelay(4295000);
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} __const_udelay(4295000);
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i140 := $eq.i32($i2, 0);
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    assume {:branchcond $i140} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i140 == 1);
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    $i143 := $trunc.i32.i16($i2);
    call {:si_unique_call 526} {:cexpr "lower_16"} boogie_si_record_i16($i143);
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    $i144 := $ashr.i32($i2, 16);
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    $i145 := $trunc.i32.i16($i144);
    call {:si_unique_call 527} {:cexpr "upper_16"} boogie_si_record_i16($i145);
    assume {:verifier.code 0} true;
    $i141, $i142 := $i143, $i145;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(512, 1));
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    $p147 := $load.ref($M.0, $p146);
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} $i148 := __create_pipe($p147, 0);
    call {:si_unique_call 529} {:cexpr "tmp___0"} boogie_si_record_i32($i148);
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(512, 1));
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    $p150 := $load.ref($M.0, $p149);
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    $i151 := $or.i32($i148, $sub.i32(0, 2147483520));
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    $i152 := $zext.i8.i32($i1);
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    $i153 := $or.i32($i152, 128);
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    $i154 := $trunc.i32.i8($i153);
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    $i155 := $zext.i16.i32($i141);
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    $i156 := $trunc.i32.i16($i155);
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    $i157 := $zext.i16.i32($i142);
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    $i158 := $trunc.i32.i16($i157);
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    $p159 := $bitcast.ref.ref($p6);
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    $i160 := $trunc.i32.i16($i5);
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    $i161 := $zext.i16.i32($i160);
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    $i162 := $add.i32($i161, 4);
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    $i163 := $trunc.i32.i16($i162);
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} $i164 := usb_control_msg($p150, $i151, $i154, $sub.i8(0, 64), $i156, $i158, $p159, $i163, 5000);
    call {:si_unique_call 531} {:cexpr "ret"} boogie_si_record_i32($i164);
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    $i165 := $slt.i32($i164, 0);
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    assume {:branchcond $i165} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i165 == 1);
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    $i166 := $ugt.i64(4, 63);
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    assume {:branchcond $i166} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i166 == 1);
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    $p169 := $bitcast.ref.ref($p4);
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    $p170 := $bitcast.ref.ref($p6);
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_24 := $M.0;
    cmdloc_dummy_var_25 := $M.0;
    call {:si_unique_call 533} cmdloc_dummy_var_26 := $memcpy.i8(cmdloc_dummy_var_24, cmdloc_dummy_var_25, $p169, $p170, 4, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_26;
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i171 := $sext.i32.i64($i5);
    call {:si_unique_call 534} {:cexpr "__len___0"} boogie_si_record_i64($i171);
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    $p172 := $bitcast.ref.ref($p6);
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($p172, $mul.ref(4, 1));
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_27 := $M.0;
    cmdloc_dummy_var_28 := $M.0;
    call {:si_unique_call 535} cmdloc_dummy_var_29 := $memcpy.i8(cmdloc_dummy_var_27, cmdloc_dummy_var_28, $p3, $p173, $i171, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_29;
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i139 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    $r := $i139;
    return;

  $bb14:
    assume $i166 == 1;
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    $p167 := $bitcast.ref.ref($p4);
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    $p168 := $bitcast.ref.ref($p6);
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_21 := $M.0;
    cmdloc_dummy_var_22 := $M.0;
    call {:si_unique_call 532} cmdloc_dummy_var_23 := $memcpy.i8(cmdloc_dummy_var_21, cmdloc_dummy_var_22, $p167, $p168, 4, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_23;
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb12:
    assume $i165 == 1;
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    $i139 := $sub.i32(0, 6);
    goto $bb3;

  $bb9:
    assume $i140 == 1;
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    $i141, $i142 := 0, 0;
    goto $bb11;

  $bb1:
    assume $i138 == 1;
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    $i139 := $sub.i32(0, 19);
    goto $bb3;
}



const ldv_mutex_unlock_18: ref;

axiom ldv_mutex_unlock_18 == $sub.ref(0, 367955);

procedure ldv_mutex_unlock_18($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_unlock_18($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} ldv_mutex_unlock_lock_of_poseidon($p0);
    goto SeqInstr_139, SeqInstr_140;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  SeqInstr_141:
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} mutex_unlock($p0);
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_139:
    assume !assertsPassed;
    return;
}



const strcpy: ref;

axiom strcpy == $sub.ref(0, 368987);

procedure strcpy($p0: ref, $p1: ref) returns ($r: ref);



const check_control_id: ref;

axiom check_control_id == $sub.ref(0, 370019);

procedure check_control_id($i0: i32) returns ($r: ref);
  free requires assertsPassed;



implementation check_control_id($i0: i32) returns ($r: ref)
{
  var $i1: i64;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p5: ref;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} {:cexpr "check_control_id:arg:id"} boogie_si_record_i32($i0);
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    $i1 := $sext.i32.i64(4);
    $p2 := $add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref($i1, 72));
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    $i4 := $ugt.i64($i3, $p2i.ref.i64(controls));
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p11 := $0.ref;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    $r := $p11;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    $p5 := controls;
    goto $bb4;

  $bb4:
    call $p7, $i8, $i9, $p10, $p12, $i13, $i14, $p5 := check_control_id_loop_$bb4($i0, $i3, $p7, $i8, $i9, $p10, $p12, $i13, $i14, $p5);
    goto $bb4_last;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, $i0);
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    $p10 := $p5;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p5, $mul.ref(1, 72));
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    $i14 := $ugt.i64($i3, $i13);
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i14 == 1);
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $p5 := $p12;
    goto $bb10_dummy;

  $bb6:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    $p11 := $p10;
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4382;
}



const ldv_mutex_lock_15: ref;

axiom ldv_mutex_lock_15 == $sub.ref(0, 371051);

procedure ldv_mutex_lock_15($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_lock_15($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 567} ldv_mutex_lock_lock_of_poseidon($p0);
    goto SeqInstr_142, SeqInstr_143;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  SeqInstr_144:
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} mutex_lock($p0);
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_142:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_16: ref;

axiom ldv_mutex_unlock_16 == $sub.ref(0, 372083);

procedure ldv_mutex_unlock_16($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_unlock_16($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} ldv_mutex_unlock_lock_of_poseidon($p0);
    goto SeqInstr_145, SeqInstr_146;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  SeqInstr_147:
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} mutex_unlock($p0);
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_145:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_13: ref;

axiom ldv_mutex_lock_13 == $sub.ref(0, 373115);

procedure ldv_mutex_lock_13($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_lock_13($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} ldv_mutex_lock_lock_of_poseidon($p0);
    goto SeqInstr_148, SeqInstr_149;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  SeqInstr_150:
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} mutex_lock($p0);
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_148:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_14: ref;

axiom ldv_mutex_unlock_14 == $sub.ref(0, 374147);

procedure ldv_mutex_unlock_14($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_unlock_14($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} ldv_mutex_unlock_lock_of_poseidon($p0);
    goto SeqInstr_151, SeqInstr_152;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  SeqInstr_153:
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} mutex_unlock($p0);
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_151:
    assume !assertsPassed;
    return;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 375179);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 576} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const videobuf_streamoff: ref;

axiom videobuf_streamoff == $sub.ref(0, 376211);

procedure videobuf_streamoff($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation videobuf_streamoff($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 1} true;
    call {:si_unique_call 577} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 578} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const videobuf_streamon: ref;

axiom videobuf_streamon == $sub.ref(0, 377243);

procedure videobuf_streamon($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation videobuf_streamon($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 1} true;
    call {:si_unique_call 579} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 580} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const videobuf_dqbuf: ref;

axiom videobuf_dqbuf == $sub.ref(0, 378275);

procedure videobuf_dqbuf($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation videobuf_dqbuf($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 581} {:cexpr "videobuf_dqbuf:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 1} true;
    call {:si_unique_call 582} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 583} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const videobuf_qbuf: ref;

axiom videobuf_qbuf == $sub.ref(0, 379307);

procedure videobuf_qbuf($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation videobuf_qbuf($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 1} true;
    call {:si_unique_call 584} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 585} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const videobuf_querybuf: ref;

axiom videobuf_querybuf == $sub.ref(0, 380339);

procedure videobuf_querybuf($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation videobuf_querybuf($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 1} true;
    call {:si_unique_call 586} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 587} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const videobuf_reqbufs: ref;

axiom videobuf_reqbufs == $sub.ref(0, 381371);

procedure videobuf_reqbufs($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation videobuf_reqbufs($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 1} true;
    call {:si_unique_call 588} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 589} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_mutex_lock_8: ref;

axiom ldv_mutex_lock_8 == $sub.ref(0, 382403);

procedure ldv_mutex_lock_8($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_lock_8($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 590} ldv_mutex_lock_lock_of_poseidon($p0);
    goto SeqInstr_154, SeqInstr_155;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  SeqInstr_156:
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} mutex_lock($p0);
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_154:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_9: ref;

axiom ldv_mutex_unlock_9 == $sub.ref(0, 383435);

procedure ldv_mutex_unlock_9($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_unlock_9($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} ldv_mutex_unlock_lock_of_poseidon($p0);
    goto SeqInstr_157, SeqInstr_158;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  SeqInstr_159:
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} mutex_unlock($p0);
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_157:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_10: ref;

axiom ldv_mutex_unlock_10 == $sub.ref(0, 384467);

procedure ldv_mutex_unlock_10($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_unlock_10($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} ldv_mutex_unlock_lock_of_poseidon($p0);
    goto SeqInstr_160, SeqInstr_161;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  SeqInstr_162:
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 595} mutex_unlock($p0);
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_160:
    assume !assertsPassed;
    return;
}



const usb_make_path: ref;

axiom usb_make_path == $sub.ref(0, 385499);

procedure usb_make_path($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation usb_make_path($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 596} {:cexpr "usb_make_path:arg:size"} boogie_si_record_i64($i2);
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1904)), $mul.ref(64, 1));
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1904)), $mul.ref(4, 1));
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} $i9 := snprintf.ref.i64.ref.ref.ref($p1, $i2, .str.54, $p6, $p8);
    call {:si_unique_call 598} {:cexpr "actual"} boogie_si_record_i32($i9);
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i64.i32($i2);
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    $i11 := $sgt.i32($i10, $i9);
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    $i12 := $i9;
    goto $bb3;
}



const snprintf: ref;

axiom snprintf == $sub.ref(0, 386531);

procedure snprintf.ref.i64.ref.ref.ref($p0: ref, $i1: i64, $p2: ref, p.3: ref, p.4: ref) returns ($r: i32);



const pd_buf_setup: ref;

axiom pd_buf_setup == $sub.ref(0, 387563);

procedure pd_buf_setup($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation pd_buf_setup($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $p14: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $p41: ref;
  var $i42: i32;
  var $i43: i32;
  var $i44: i32;
  var $i45: i32;
  var $i47: i32;
  var $i48: i1;
  var $i13: i32;
  var vslice_dummy_var_163: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 624)), $mul.ref(616, 1));
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 736)), $mul.ref(728, 1));
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p5, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i9, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i9, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 22);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 3864)), $mul.ref(816, 1)), $mul.ref(28, 1));
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_4473;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    $i43 := $add.i32($i42, 4095);
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    $i44 := $and.i32($i43, $sub.i32(0, 4096));
    goto corral_source_split_4475;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i44);
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p2);
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} vslice_dummy_var_163 := printk.ref.ref.i32.i32(.str.18, .str.19, 785, $i45);
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p1);
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i47, 0);
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb10;

  $bb14:
    assume $i48 == 1;
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, 4);
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb2:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i9, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb6;

  $bb7:
    assume $i12 == 1;
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p7, $mul.ref(0, 3864)), $mul.ref(536, 1));
    $p17 := $add.ref($add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(8, 1)), $mul.ref(20, 1)), $mul.ref(20, 1));
    goto corral_source_split_4483;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    $i19 := $add.i32($i18, 4095);
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i19, $sub.i32(0, 4096));
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i20);
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p1);
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    $i22 := $ule.i32($i21, 3);
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    $p23 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(96, 1));
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p23, $sub.i8(0, 126));
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p7, $mul.ref(0, 3864)), $mul.ref(816, 1));
    $p25 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(168, 1));
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p25, $p24);
    $p26 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(168, 1));
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p28, $p14);
    $p29 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(176, 1));
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p29, $p7);
    $p30 := $add.ref($add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(8, 1)), $mul.ref(20, 1)), $mul.ref(4, 1));
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    $i32 := $udiv.i32($i31, 2);
    $p33 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(88, 1));
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, $i32);
    $p34 := $add.ref($add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(8, 1)), $mul.ref(20, 1)), $mul.ref(0, 1));
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    $i36 := $mul.i32($i35, 2);
    $p37 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(92, 1));
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p37, $i36);
    $p38 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(184, 1));
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p38, $p4);
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 600} $i39 := start_video_stream($p7);
    call {:si_unique_call 601} {:cexpr "tmp"} boogie_si_record_i32($i39);
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    $i13 := $i39;
    goto $bb10;

  $bb11:
    assume $i22 == 1;
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, 4);
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    goto $bb13;
}



const pd_buf_prepare: ref;

axiom pd_buf_prepare == $sub.ref(0, 388595);

procedure pd_buf_prepare($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation pd_buf_prepare($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i64;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i64;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $i31: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} {:cexpr "pd_buf_prepare:arg:field"} boogie_si_record_i32($i2);
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 624)), $mul.ref(616, 1));
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i7, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i7, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32(0, 22);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    $r := $i31;
    return;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_4522;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(40, 1));
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 0);
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(36, 1));
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p44, $i2);
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(40, 1));
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, 1);
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    $i31 := 0;
    goto $bb13;

  $bb17:
    assume $i34 == 1;
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p5, $mul.ref(0, 736)), $mul.ref(728, 1));
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p36, $mul.ref(0, 3864)), $mul.ref(816, 1)), $mul.ref(28, 1));
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    $i40 := $zext.i32.i64($i39);
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(24, 1));
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p41, $i40);
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 605} $i42 := videobuf_iolock($p0, $p1, $0.ref);
    call {:si_unique_call 606} {:cexpr "rc"} boogie_si_record_i32($i42);
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    $i43 := $slt.i32($i42, 0);
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb19:
    assume $i43 == 1;
    goto corral_source_split_4569;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    $i31 := $i42;
    goto $bb13;

  $bb2:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i7, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb6;

  $bb7:
    assume $i10 == 1;
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(40, 1));
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb9:
    assume $i13 == 1;
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p5, $mul.ref(0, 736)), $mul.ref(728, 1));
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($add.ref($add.ref($p15, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(8, 1)), $mul.ref(20, 1)), $mul.ref(20, 1));
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    $i21 := $zext.i32.i64($i20);
    goto corral_source_split_4537;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(24, 1));
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p22, $i21);
    $p23 := $add.ref($add.ref($add.ref($add.ref($add.ref($p15, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(8, 1)), $mul.ref(20, 1)), $mul.ref(0, 1));
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(8, 1));
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, $i24);
    $p26 := $add.ref($add.ref($add.ref($add.ref($add.ref($p15, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(8, 1)), $mul.ref(20, 1)), $mul.ref(4, 1));
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(12, 1));
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, $i27);
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} $i29 := videobuf_iolock($p0, $p1, $0.ref);
    call {:si_unique_call 604} {:cexpr "rc"} boogie_si_record_i32($i29);
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    $i30 := $slt.i32($i29, 0);
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb11:
    assume $i30 == 1;
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    $i31 := $i29;
    goto $bb13;
}



const pd_buf_queue: ref;

axiom pd_buf_queue == $sub.ref(0, 389627);

procedure pd_buf_queue($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation pd_buf_queue($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 624)), $mul.ref(616, 1));
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4573;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(40, 1));
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, 2);
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(64, 1));
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 736)), $mul.ref(712, 1));
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 607} list_add_tail($p6, $p7);
    goto corral_source_split_4579;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    return;
}



const pd_buf_release: ref;

axiom pd_buf_release == $sub.ref(0, 390659);

procedure pd_buf_release($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation pd_buf_release($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} videobuf_vmalloc_free($p1);
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(40, 1));
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 0);
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    return;
}



const videobuf_vmalloc_free: ref;

axiom videobuf_vmalloc_free == $sub.ref(0, 391691);

procedure videobuf_vmalloc_free($p0: ref);
  free requires assertsPassed;



implementation videobuf_vmalloc_free($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    return;
}



const list_add_tail: ref;

axiom list_add_tail == $sub.ref(0, 392723);

procedure list_add_tail($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add_tail($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} __list_add($p0, $p3, $p1);
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    return;
}



const __list_add: ref;

axiom __list_add == $sub.ref(0, 393755);

procedure __list_add($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __list_add($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4593;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    return;
}



const videobuf_iolock: ref;

axiom videobuf_iolock == $sub.ref(0, 394787);

procedure videobuf_iolock($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation videobuf_iolock($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 1} true;
    call {:si_unique_call 610} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 611} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const snd_pd_capture_open: ref;

axiom snd_pd_capture_open == $sub.ref(0, 395819);

procedure snd_pd_capture_open($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation snd_pd_capture_open($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p21: ref;
  var $p22: ref;
  var $p24: ref;
  var $i9: i32;
  var cmdloc_dummy_var_30: [ref]i8;
  var cmdloc_dummy_var_31: [ref]i8;
  var cmdloc_dummy_var_32: [ref]i8;
  var vslice_dummy_var_164: i32;
  var vslice_dummy_var_165: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(16, 1));
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(208, 1));
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p3);
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    $p10 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 3864)), $mul.ref(856, 1)), $mul.ref(60, 1));
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i11, 1);
    $p13 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 3864)), $mul.ref(856, 1)), $mul.ref(60, 1));
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, $i12);
    $p14 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 3864)), $mul.ref(856, 1)), $mul.ref(56, 1));
    goto corral_source_split_4615;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, 0);
    $p15 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 3864)), $mul.ref(856, 1)), $mul.ref(32, 1));
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p15, $p0);
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p6, $mul.ref(0, 1168)), $mul.ref(456, 1));
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p17, $p2);
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p6, $mul.ref(0, 1168)), $mul.ref(472, 1));
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_30 := $M.0;
    cmdloc_dummy_var_31 := $M.0;
    call {:si_unique_call 612} cmdloc_dummy_var_32 := $memcpy.i8(cmdloc_dummy_var_30, cmdloc_dummy_var_31, $p19, snd_pd_hw_capture, 80, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_32;
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} vslice_dummy_var_164 := snd_pcm_hw_constraint_integer($p6, 15);
    goto corral_source_split_4624;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 3864)), $mul.ref(520, 1));
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 614} vslice_dummy_var_165 := usb_autopm_get_interface($p22);
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 3864)), $mul.ref(184, 1));
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} kref_get($p24);
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 19);
    goto $bb3;
}



const snd_pd_pcm_close: ref;

axiom snd_pd_pcm_close == $sub.ref(0, 396851);

procedure snd_pd_pcm_close($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation snd_pd_pcm_close($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var vslice_dummy_var_166: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(16, 1));
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 3864)), $mul.ref(856, 1)), $mul.ref(60, 1));
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32($i6, 1);
    $p8 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 3864)), $mul.ref(856, 1)), $mul.ref(60, 1));
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $i7);
    $p9 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 3864)), $mul.ref(856, 1)), $mul.ref(56, 1));
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, 1);
    goto corral_source_split_4639;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 3864)), $mul.ref(520, 1));
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_4641;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} usb_autopm_put_interface($p11);
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 3864)), $mul.ref(184, 1));
    goto corral_source_split_4643;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} vslice_dummy_var_166 := kref_put($p12, poseidon_delete);
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const snd_pcm_lib_ioctl: ref;

axiom snd_pcm_lib_ioctl == $sub.ref(0, 397883);

procedure snd_pcm_lib_ioctl($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation snd_pcm_lib_ioctl($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 618} {:cexpr "snd_pcm_lib_ioctl:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 1} true;
    call {:si_unique_call 619} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 620} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_4647;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const snd_pd_hw_capture_params: ref;

axiom snd_pd_hw_capture_params == $sub.ref(0, 398915);

procedure snd_pd_hw_capture_params($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation snd_pd_hw_capture_params($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $i25: i64;
  var $p26: ref;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(208, 1));
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} $p4 := hw_param_interval($p1, 18);
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    call {:si_unique_call 622} {:cexpr "size"} boogie_si_record_i32($i6);
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 1168)), $mul.ref(832, 1));
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i18 := $zext.i32.i64($i6);
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} $p19 := vmalloc($i18);
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 1168)), $mul.ref(832, 1));
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p20, $p19);
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 1168)), $mul.ref(832, 1));
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i23, 0);
    goto corral_source_split_4681;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i24 == 1);
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    $i25 := $zext.i32.i64($i6);
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 1168)), $mul.ref(848, 1));
    goto corral_source_split_4687;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p26, $i25);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb8:
    assume $i24 == 1;
    goto corral_source_split_4683;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 12);
    goto $bb5;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 1168)), $mul.ref(848, 1));
    goto corral_source_split_4661;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.0, $p11);
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    $i13 := $zext.i32.i64($i6);
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    $i14 := $ugt.i64($i12, $i13);
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 1168)), $mul.ref(832, 1));
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 623} vfree($p17);
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb3:
    assume $i14 == 1;
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb5;
}



const snd_pd_hw_capture_free: ref;

axiom snd_pd_hw_capture_free == $sub.ref(0, 399947);

procedure snd_pd_hw_capture_free($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation snd_pd_hw_capture_free($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var vslice_dummy_var_167: i32;
  var vslice_dummy_var_168: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4689;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(16, 1));
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4692;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    $i4 := $M.2;
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 16);
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} vslice_dummy_var_168 := audio_buf_free($p3);
    goto corral_source_split_4700;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} vslice_dummy_var_167 := printk.ref.ref.i32(.str, .str.68, 220);
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const snd_pd_prepare: ref;

axiom snd_pd_prepare == $sub.ref(0, 400979);

procedure snd_pd_prepare($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation snd_pd_prepare($p0: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const snd_pd_capture_trigger: ref;

axiom snd_pd_capture_trigger == $sub.ref(0, 402011);

procedure snd_pd_capture_trigger($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation snd_pd_capture_trigger($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $p29: ref;
  var $p30: ref;
  var $i20: i32;
  var vslice_dummy_var_169: i32;
  var vslice_dummy_var_170: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} {:cexpr "snd_pd_capture_trigger:arg:cmd"} boogie_si_record_i32($i1);
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(16, 1));
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4706;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    $i6 := $M.2;
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i1, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i1, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i1, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 22);
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  $bb9:
    assume $i13 == 1;
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    $p17 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3864)), $mul.ref(856, 1)), $mul.ref(68, 1));
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    $p21 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3864)), $mul.ref(856, 1)), $mul.ref(24, 1));
    goto corral_source_split_4732;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, 0);
    $p22 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3864)), $mul.ref(856, 1)), $mul.ref(40, 1));
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, 0);
    $p23 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3864)), $mul.ref(856, 1)), $mul.ref(68, 1));
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, 1);
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3864)), $mul.ref(3768, 1)), $mul.ref(0, 1));
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 1);
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} vslice_dummy_var_170 := fire_audio_urb($p4);
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    $i20 := 0;
    goto $bb21;

  $bb23:
    assume $i27 == 1;
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    $i20 := 0;
    goto $bb21;

  $bb19:
    assume $i19 == 1;
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    $i20 := 0;
    goto $bb21;

  $bb7:
    assume $i12 == 1;
    $p29 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3864)), $mul.ref(856, 1)), $mul.ref(68, 1));
    goto corral_source_split_4716;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, 2);
    goto corral_source_split_4717;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    $i20 := 0;
    goto $bb21;

  $bb5:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i1, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i1, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb11;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb15;

  $bb12:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i1, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb11;

  $bb17:
    assume $i16 == 1;
    $p30 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3864)), $mul.ref(856, 1)), $mul.ref(68, 1));
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, 0);
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    $i20 := 0;
    goto $bb21;

  $bb1:
    assume $i7 == 1;
    $p8 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3864)), $mul.ref(856, 1)), $mul.ref(68, 1));
    goto corral_source_split_4712;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} vslice_dummy_var_169 := printk.ref.ref.i32.i32.i32(.str.69, .str.70, 322, $i1, $i9);
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const snd_pd_capture_pointer: ref;

axiom snd_pd_capture_pointer == $sub.ref(0, 403043);

procedure snd_pd_capture_pointer($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation snd_pd_capture_pointer($p0: ref) returns ($r: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(16, 1));
    goto corral_source_split_4745;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 3864)), $mul.ref(856, 1)), $mul.ref(40, 1));
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const snd_pcm_pd_get_page: ref;

axiom snd_pcm_pd_get_page == $sub.ref(0, 404075);

procedure snd_pcm_pd_get_page($p0: ref, $i1: i64) returns ($r: ref);
  free requires assertsPassed;



implementation snd_pcm_pd_get_page($p0: ref, $i1: i64) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 630} {:cexpr "snd_pcm_pd_get_page:arg:offset"} boogie_si_record_i64($i1);
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(208, 1));
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 1168)), $mul.ref(832, 1));
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref($i1, 1));
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} $p7 := vmalloc_to_page($p6);
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;
}



const vmalloc_to_page: ref;

axiom vmalloc_to_page == $sub.ref(0, 405107);

procedure vmalloc_to_page($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation vmalloc_to_page($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4760;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} $p1 := external_alloc();
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const hw_param_interval: ref;

axiom hw_param_interval == $sub.ref(0, 406139);

procedure hw_param_interval($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation hw_param_interval($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} {:cexpr "hw_param_interval:arg:var"} boogie_si_record_i32($i1);
    goto corral_source_split_4764;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(260, 1));
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i1);
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, $sub.i64(0, 8));
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p3, $mul.ref($i5, 12));
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const vfree: ref;

axiom vfree == $sub.ref(0, 407171);

procedure vfree($p0: ref);
  free requires assertsPassed;



implementation vfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    return;
}



const vmalloc: ref;

axiom vmalloc == $sub.ref(0, 408203);

procedure vmalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation vmalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 634} {:cexpr "vmalloc:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} $p1 := external_alloc();
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const snd_pcm_hw_constraint_integer: ref;

axiom snd_pcm_hw_constraint_integer == $sub.ref(0, 409235);

procedure snd_pcm_hw_constraint_integer($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation snd_pcm_hw_constraint_integer($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 636} {:cexpr "snd_pcm_hw_constraint_integer:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 1} true;
    call {:si_unique_call 637} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 638} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const poseidon_fe_release: ref;

axiom poseidon_fe_release == $sub.ref(0, 410267);

procedure poseidon_fe_release($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation poseidon_fe_release($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 952)), $mul.ref(760, 1));
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 3864)), $mul.ref(3752, 1));
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_4784;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, $0.ref);
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 3864)), $mul.ref(3760, 1));
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $0.ref);
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    return;
}



const poseidon_fe_init: ref;

axiom poseidon_fe_init == $sub.ref(0, 411299);

procedure poseidon_fe_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation poseidon_fe_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var cmdloc_dummy_var_33: [ref]i8;
  var cmdloc_dummy_var_34: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 952)), $mul.ref(760, 1));
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    goto corral_source_split_4794;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 3864)), $mul.ref(3752, 1));
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, pm_dvb_suspend);
    goto corral_source_split_4797;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 3864)), $mul.ref(3760, 1));
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, pm_dvb_resume);
    $p9 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 3864)), $mul.ref(952, 1)), $mul.ref(2732, 1));
    goto corral_source_split_4800;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_4801;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_33 := $M.0;
    call {:si_unique_call 639} cmdloc_dummy_var_34 := $memset.i8(cmdloc_dummy_var_33, $p10, 0, 36, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_34;
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const poseidon_fe_sleep: ref;

axiom poseidon_fe_sleep == $sub.ref(0, 412331);

procedure poseidon_fe_sleep($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation poseidon_fe_sleep($p0: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const poseidon_set_fe: ref;

axiom poseidon_set_fe == $sub.ref(0, 413363);

procedure poseidon_set_fe($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $CurrAddr, assertsPassed;



implementation poseidon_set_fe($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i64;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $i27: i64;
  var $p29: ref;
  var $i30: i32;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $i16: i32;
  var $i17: i32;
  var $i35: i32;
  var $i15: i32;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $i39: i8;
  var $i40: i1;
  var $p41: ref;
  var $i42: i32;
  var $i43: i32;
  var $i44: i32;
  var $i45: i32;
  var $i46: i32;
  var $i47: i1;
  var $i50: i32;
  var $i51: i32;
  var $i52: i32;
  var $i53: i1;
  var $i55: i32;
  var $i56: i32;
  var $i57: i32;
  var $i58: i1;
  var $i60: i1;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i32;
  var $p70: ref;
  var $i71: i64;
  var $p72: ref;
  var $i73: i32;
  var $i49: i32;
  var $p74: ref;
  var $i11: i32;
  var cmdloc_dummy_var_35: [ref]i8;
  var cmdloc_dummy_var_36: [ref]i8;
  var cmdloc_dummy_var_37: [ref]i8;
  var cmdloc_dummy_var_38: [ref]i8;
  var cmdloc_dummy_var_39: [ref]i8;
  var cmdloc_dummy_var_40: [ref]i8;
  var vslice_dummy_var_171: i32;
  var vslice_dummy_var_172: i32;
  var vslice_dummy_var_173: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_4806;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 0);
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 952)), $mul.ref(760, 1));
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4809;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 3864)), $mul.ref(952, 1));
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 3864)), $mul.ref(3768, 1)), $mul.ref(0, 1));
    goto corral_source_split_4812;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_4813;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 1);
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 3864)), $mul.ref(16, 1));
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} ldv_mutex_lock_89($p12);
    goto SeqInstr_163, SeqInstr_164;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  SeqInstr_165:
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    $i13 := $M.23;
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32(0, $i13);
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 1);
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(0, 1));
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_4851;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} $i38 := check_scan_ok($i37, $i15, $p6);
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    $i39 := $zext.i1.i8($i38);
    call {:si_unique_call 645} {:cexpr "tmp"} boogie_si_record_i8($i39);
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i8.i1($i39);
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    $i73 := 0;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    $i49 := $i73;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p5, $mul.ref(0, 3864)), $mul.ref(16, 1));
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 649} ldv_mutex_unlock_90($p74);
    goto SeqInstr_166, SeqInstr_167;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  SeqInstr_168:
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    $i11 := $i49;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  SeqInstr_166:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i40 == 1;
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(0, 1));
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_4858;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    $i43 := $udiv.i32($i42, 1000);
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} $i44 := send_set_req($p5, 18, $i43, $p2);
    call {:si_unique_call 647} {:cexpr "ret"} boogie_si_record_i32($i44);
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p2);
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    $i46 := $or.i32($i44, $i45);
    goto corral_source_split_4862;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 0);
    goto corral_source_split_4863;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} $i50 := send_set_req($p5, 50, $i15, $p2);
    call {:si_unique_call 651} {:cexpr "ret"} boogie_si_record_i32($i50);
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p2);
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    $i52 := $or.i32($i50, $i51);
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 653} $i55 := send_set_req($p5, 67, 0, $p2);
    call {:si_unique_call 654} {:cexpr "ret"} boogie_si_record_i32($i55);
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.0, $p2);
    goto corral_source_split_4881;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    $i57 := $or.i32($i55, $i56);
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i57, 0);
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i60 := $ugt.i64(36, 63);
    goto corral_source_split_4888;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i60 == 1);
    $p64 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 3864)), $mul.ref(952, 1)), $mul.ref(2732, 1));
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p64);
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p1);
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_38 := $M.0;
    cmdloc_dummy_var_39 := $M.0;
    call {:si_unique_call 657} cmdloc_dummy_var_40 := $memcpy.i8(cmdloc_dummy_var_38, cmdloc_dummy_var_39, $p65, $p66, 36, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_40;
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    $p67 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 3864)), $mul.ref(952, 1)), $mul.ref(2772, 1));
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p67, $i15);
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(0, 1));
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.0, $p68);
    $p70 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 3864)), $mul.ref(952, 1)), $mul.ref(2768, 1));
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p70, $i69);
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    $i71 := $load.i64($M.0, jiffies);
    $p72 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 3864)), $mul.ref(952, 1)), $mul.ref(2776, 1));
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p72, $i71);
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    $i73 := $i55;
    goto $bb31;

  $bb28:
    assume $i60 == 1;
    $p61 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 3864)), $mul.ref(952, 1)), $mul.ref(2732, 1));
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p61);
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p1);
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_35 := $M.0;
    cmdloc_dummy_var_36 := $M.0;
    call {:si_unique_call 656} cmdloc_dummy_var_37 := $memcpy.i8(cmdloc_dummy_var_35, cmdloc_dummy_var_36, $p62, $p63, 36, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_37;
    goto corral_source_split_4893;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb25:
    assume $i58 == 1;
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} vslice_dummy_var_173 := printk.ref.ref.i32(.str.76, .str.77, 278);
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    $i49 := $i55;
    goto $bb20;

  $bb22:
    assume $i53 == 1;
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} vslice_dummy_var_172 := printk.ref.ref.i32(.str.76, .str.77, 272);
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    $i49 := $i50;
    goto $bb20;

  $bb18:
    assume $i47 == 1;
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} vslice_dummy_var_171 := printk.ref.ref.i32(.str.76, .str.77, 265);
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    $i49 := $i44;
    goto $bb20;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    $i16, $i17 := $sub.i32(0, 1), 0;
    goto $bb8;

  $bb8:
    call $p18, $p19, $p20, $i21, $i22, $p24, $i25, $i26, $i27, $p29, $i30, $i31, $i32, $i33, $i34, $i16, $i17, $i35 := poseidon_set_fe_loop_$bb8($p1, $p18, $p19, $p20, $i21, $i22, $p24, $i25, $i26, $i27, $p29, $i30, $i31, $i32, $i33, $i34, $i16, $i17, $i35);
    goto $bb8_last;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(8, 1));
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 28)), $mul.ref(0, 1));
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i17);
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref(dvb_bandwidth, $mul.ref(0, 24)), $mul.ref($i22, 8)), $mul.ref(1, 4));
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.24, $p24);
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i21, $i25);
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i31 := $i16;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    $i32 := $add.i32($i17, 1);
    call {:si_unique_call 643} {:cexpr "i"} boogie_si_record_i32($i32);
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    $i33 := $M.23;
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    $i34 := $slt.i32($i32, $i33);
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    $i35 := $i31;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    $i15 := $i35;
    goto $bb7;

  $bb13:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    $i16, $i17 := $i31, $i32;
    goto $bb13_dummy;

  $bb10:
    assume $i26 == 1;
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i17);
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref(dvb_bandwidth, $mul.ref(0, 24)), $mul.ref($i27, 8)), $mul.ref(0, 4));
    goto corral_source_split_4840;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.24, $p29);
    call {:si_unique_call 642} {:cexpr "bandwidth"} boogie_si_record_i32($i30);
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    $i31 := $i30;
    goto $bb12;

  SeqInstr_163:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 16);
    goto $bb3;

  $bb13_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4827;
}



const poseidon_fe_get_tune_settings: ref;

axiom poseidon_fe_get_tune_settings == $sub.ref(0, 414395);

procedure poseidon_fe_get_tune_settings($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation poseidon_fe_get_tune_settings($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 1000);
    goto corral_source_split_4911;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const poseidon_get_fe: ref;

axiom poseidon_get_fe == $sub.ref(0, 415427);

procedure poseidon_get_fe($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation poseidon_get_fe($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var cmdloc_dummy_var_41: [ref]i8;
  var cmdloc_dummy_var_42: [ref]i8;
  var cmdloc_dummy_var_43: [ref]i8;
  var cmdloc_dummy_var_44: [ref]i8;
  var cmdloc_dummy_var_45: [ref]i8;
  var cmdloc_dummy_var_46: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 952)), $mul.ref(760, 1));
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4915;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4916;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    goto corral_source_split_4917;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    $i6 := $ugt.i64(36, 63);
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p1);
    $p11 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3864)), $mul.ref(952, 1)), $mul.ref(2732, 1));
    goto corral_source_split_4926;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_44 := $M.0;
    cmdloc_dummy_var_45 := $M.0;
    call {:si_unique_call 659} cmdloc_dummy_var_46 := $memcpy.i8(cmdloc_dummy_var_44, cmdloc_dummy_var_45, $p10, $p12, 36, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_46;
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p1);
    $p8 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3864)), $mul.ref(952, 1)), $mul.ref(2732, 1));
    goto corral_source_split_4921;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_41 := $M.0;
    cmdloc_dummy_var_42 := $M.0;
    call {:si_unique_call 658} cmdloc_dummy_var_43 := $memcpy.i8(cmdloc_dummy_var_41, cmdloc_dummy_var_42, $p7, $p9, 36, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_43;
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const poseidon_read_status: ref;

axiom poseidon_read_status == $sub.ref(0, 416459);

procedure poseidon_read_status($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $CurrAddr, assertsPassed;



implementation poseidon_read_status($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $i30: i32;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $i41: i32;
  var $i42: i32;
  var $p43: ref;
  var $i44: i32;
  var $i45: i1;
  var $i46: i32;
  var $i47: i32;
  var $p48: ref;
  var $i15: i32;
  var vslice_dummy_var_174: i32;
  var vslice_dummy_var_175: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} $p3 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 952)), $mul.ref(760, 1));
    goto corral_source_split_4930;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, 0);
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, 0);
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, 0);
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, 0);
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 3864)), $mul.ref(3768, 1)), $mul.ref(0, 1));
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_4942;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 1);
    goto corral_source_split_4943;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p6, $mul.ref(0, 3864)), $mul.ref(16, 1));
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} ldv_mutex_lock_91($p16);
    goto SeqInstr_169, SeqInstr_170;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  SeqInstr_171:
    goto corral_source_split_4950;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p3);
    goto corral_source_split_4951;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 663} $i18 := send_get_req($p6, 69, 8, $p17, $p2, 16);
    call {:si_unique_call 664} {:cexpr "ret"} boogie_si_record_i32($i18);
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p2);
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    $i20 := $or.i32($i18, $i19);
    goto corral_source_split_4954;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i23 := $M.2;
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4975;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_4977;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i34 == 1);
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_4983;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb16;

  $bb16:
    assume !($i37 == 1);
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i40 == 1);
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p6, $mul.ref(0, 3864)), $mul.ref(952, 1));
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 668} $i44 := fw_delay_overflow($p43);
    call {:si_unique_call 669} {:cexpr "tmp"} boogie_si_record_i32($i44);
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_4998;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p6, $mul.ref(0, 3864)), $mul.ref(16, 1));
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} ldv_mutex_unlock_92($p48);
    goto SeqInstr_172, SeqInstr_173;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  SeqInstr_174:
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    $i15 := $i18;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  SeqInstr_172:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i45 == 1;
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p1);
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    $i47 := $or.i32($i46, 32);
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, $i47);
    goto corral_source_split_5003;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i40 == 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p1);
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    $i42 := $or.i32($i41, 31);
    goto corral_source_split_4987;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, $i42);
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i37 == 1;
    goto $bb15;

  $bb12:
    assume $i34 == 1;
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb9:
    assume $i24 == 1;
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_4970;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} vslice_dummy_var_175 := printk.ref.ref.i32.i32.i32.i32(.str.80, .str.79, 366, $i26, $i28, $i30);
    goto corral_source_split_4973;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb5:
    assume $i21 == 1;
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} vslice_dummy_var_174 := printk.ref.ref.i32(.str.78, .str.79, 360);
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_169:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 16);
    goto $bb3;
}



const poseidon_read_ber: ref;

axiom poseidon_read_ber == $sub.ref(0, 417491);

procedure poseidon_read_ber($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $CurrAddr, assertsPassed;



implementation poseidon_read_ber($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 952)), $mul.ref(760, 1));
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_5007;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_5009;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, 0);
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p6, $mul.ref(0, 3864)), $mul.ref(16, 1));
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} ldv_mutex_lock_93($p8);
    goto SeqInstr_175, SeqInstr_176;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  SeqInstr_177:
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p2);
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 673} $i10 := send_get_req($p6, 72, 0, $p9, $p3, 4);
    call {:si_unique_call 674} {:cexpr "ret"} boogie_si_record_i32($i10);
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p3);
    goto corral_source_split_5015;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    $i12 := $or.i32($i10, $i11);
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_5024;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_5025;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, $i15);
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p6, $mul.ref(0, 3864)), $mul.ref(16, 1));
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} ldv_mutex_unlock_94($p16);
    goto SeqInstr_178, SeqInstr_179;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  SeqInstr_180:
    goto corral_source_split_5022;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  SeqInstr_178:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_175:
    assume !assertsPassed;
    return;
}



const poseidon_read_signal_strength: ref;

axiom poseidon_read_signal_strength == $sub.ref(0, 418523);

procedure poseidon_read_signal_strength($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $CurrAddr, assertsPassed;



implementation poseidon_read_signal_strength($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $i27: i32;
  var $i28: i16;
  var $p29: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 676} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 952)), $mul.ref(760, 1));
    goto corral_source_split_5029;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_5031;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5032;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, 0);
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, 0);
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, 0);
    goto corral_source_split_5037;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, 0);
    goto corral_source_split_5039;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p6, $mul.ref(0, 3864)), $mul.ref(16, 1));
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 678} ldv_mutex_lock_95($p11);
    goto SeqInstr_181, SeqInstr_182;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  SeqInstr_183:
    goto corral_source_split_5041;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p2);
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} $i13 := send_get_req($p6, 69, 8, $p12, $p3, 16);
    call {:si_unique_call 680} {:cexpr "ret"} boogie_si_record_i32($i13);
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p3);
    goto corral_source_split_5044;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    $i15 := $or.i32($i13, $i14);
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5053;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_5055;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i19 == 1);
    goto corral_source_split_5061;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_5063;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i16($i27);
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p1, $i28);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p6, $mul.ref(0, 3864)), $mul.ref(16, 1));
    goto corral_source_split_5050;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} ldv_mutex_unlock_96($p29);
    goto SeqInstr_184, SeqInstr_185;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  SeqInstr_186:
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  SeqInstr_184:
    assume !assertsPassed;
    return;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 0);
    goto corral_source_split_5059;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb10;

  $bb11:
    assume $i25 == 1;
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p1, $sub.i16(0, 1));
    goto corral_source_split_5071;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb6;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_181:
    assume !assertsPassed;
    return;
}



const poseidon_read_snr: ref;

axiom poseidon_read_snr == $sub.ref(0, 419555);

procedure poseidon_read_snr($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation poseidon_read_snr($p0: ref, $p1: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const poseidon_read_unc_blocks: ref;

axiom poseidon_read_unc_blocks == $sub.ref(0, 420587);

procedure poseidon_read_unc_blocks($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation poseidon_read_unc_blocks($p0: ref, $p1: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, 0);
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const poseidon_ts_bus_ctrl: ref;

axiom poseidon_ts_bus_ctrl == $sub.ref(0, 421619);

procedure poseidon_ts_bus_ctrl($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.25, assertsPassed, $CurrAddr;



implementation poseidon_ts_bus_ctrl($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $p41: ref;
  var $p42: ref;
  var $i16: i32;
  var $p43: ref;
  var $p45: ref;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $i51: i32;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p56: ref;
  var $p57: ref;
  var $i44: i32;
  var $i7: i32;
  var vslice_dummy_var_176: i32;
  var vslice_dummy_var_177: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 682} {:cexpr "poseidon_ts_bus_ctrl:arg:acquire"} boogie_si_record_i32($i1);
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 952)), $mul.ref(760, 1));
    goto corral_source_split_5079;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5081;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_5083;

  corral_source_split_5083:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p0);
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p8, $mul.ref($sub.ref(0, 272), 2784));
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i1, 0);
    goto corral_source_split_5091;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} dvb_stop_streaming($p9);
    goto SeqInstr_190, SeqInstr_191;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  SeqInstr_192:
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p8, $mul.ref($sub.ref(0, 272), 2784)), $mul.ref(2672, 1));
    goto corral_source_split_5103;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 685} $i46 := atomic_dec_and_test($p45);
    call {:si_unique_call 686} {:cexpr "tmp"} boogie_si_record_i32($i46);
    goto corral_source_split_5104;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 0);
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p4, $mul.ref(0, 3864)), $mul.ref(184, 1));
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} vslice_dummy_var_177 := kref_put($p54, poseidon_delete);
    goto corral_source_split_5171;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p4, $mul.ref(0, 3864)), $mul.ref(520, 1));
    goto corral_source_split_5172;

  corral_source_split_5172:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_5173;

  corral_source_split_5173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} usb_autopm_put_interface($p57);
    assume {:verifier.code 0} true;
    $i44 := 0;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_5157;

  corral_source_split_5157:
    assume {:verifier.code 0} true;
    $i7 := $i44;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5087;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb24:
    assume $i47 == 1;
    goto corral_source_split_5159;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p4, $mul.ref(0, 3864)), $mul.ref(16, 1));
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} ldv_mutex_lock_87($p48);
    goto SeqInstr_196, SeqInstr_197;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  SeqInstr_198:
    goto corral_source_split_5161;

  corral_source_split_5161:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p4, $mul.ref(0, 3864)), $mul.ref(3736, 1));
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    goto corral_source_split_5163;

  corral_source_split_5163:
    assume {:verifier.code 0} true;
    $i51 := $and.i32($i50, $sub.i32(0, 5));
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p4, $mul.ref(0, 3864)), $mul.ref(3736, 1));
    goto corral_source_split_5165;

  corral_source_split_5165:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p52, $i51);
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p4, $mul.ref(0, 3864)), $mul.ref(16, 1));
    goto corral_source_split_5167;

  corral_source_split_5167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} ldv_mutex_unlock_88($p53);
    goto SeqInstr_199, SeqInstr_200;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  SeqInstr_201:
    goto corral_source_split_5168;

  corral_source_split_5168:
    assume {:verifier.code 0} true;
    goto $bb26;

  SeqInstr_199:
    assume !assertsPassed;
    return;

  SeqInstr_196:
    assume !assertsPassed;
    return;

  SeqInstr_190:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_5093;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 3864)), $mul.ref(16, 1));
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} ldv_mutex_lock_85($p11);
    goto SeqInstr_187, SeqInstr_188;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  SeqInstr_189:
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 3864)), $mul.ref(3736, 1));
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_5097;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 128);
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_5099;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref(0, 3864)), $mul.ref(3736, 1));
    goto corral_source_split_5113;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_5114;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p4, $mul.ref(0, 3864)), $mul.ref(520, 1));
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_5126;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} vslice_dummy_var_176 := usb_autopm_get_interface($p25);
    goto corral_source_split_5127;

  corral_source_split_5127:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p4, $mul.ref(0, 3864)), $mul.ref(3736, 1));
    goto corral_source_split_5128;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_5129;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 0);
    goto corral_source_split_5130;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    $i40 := 0;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_5151;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p8, $mul.ref($sub.ref(0, 272), 2784)), $mul.ref(2672, 1));
    goto corral_source_split_5152;

  corral_source_split_5152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 692} atomic_inc($p41);
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p4, $mul.ref(0, 3864)), $mul.ref(184, 1));
    goto corral_source_split_5154;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} kref_get($p42);
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    $i16 := $i40;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_5109;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p4, $mul.ref(0, 3864)), $mul.ref(16, 1));
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} ldv_mutex_unlock_86($p43);
    goto SeqInstr_193, SeqInstr_194;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  SeqInstr_195:
    goto corral_source_split_5111;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    $i44 := $i16;
    goto $bb23;

  SeqInstr_193:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i29 == 1;
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} $i30 := poseidon_check_mode_dvbt($p4);
    call {:si_unique_call 690} {:cexpr "ret"} boogie_si_record_i32($i30);
    goto corral_source_split_5133;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i30, 0);
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p4, $mul.ref(0, 3864)), $mul.ref(3736, 1));
    goto corral_source_split_5141;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_5142;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    $i36 := $or.i32($i35, 4);
    goto corral_source_split_5143;

  corral_source_split_5143:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p4, $mul.ref(0, 3864)), $mul.ref(3736, 1));
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p37, $i36);
    goto corral_source_split_5145;

  corral_source_split_5145:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p8, $mul.ref($sub.ref(0, 272), 2784)), $mul.ref(2772, 1));
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p38, 0);
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p8, $mul.ref($sub.ref(0, 272), 2784)), $mul.ref(2768, 1));
    goto corral_source_split_5148;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, 0);
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    $i40 := $i30;
    goto $bb22;

  $bb19:
    assume $i31 == 1;
    goto corral_source_split_5136;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p4, $mul.ref(0, 3864)), $mul.ref(520, 1));
    goto corral_source_split_5137;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_5138;

  corral_source_split_5138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} usb_autopm_put_interface($p33);
    goto corral_source_split_5139;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    $i16 := $i30;
    goto $bb9;

  $bb11:
    assume $i19 == 1;
    goto corral_source_split_5117;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p4, $mul.ref(0, 3864)), $mul.ref(3736, 1));
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_5119;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    $i22 := $and.i32($i21, 4);
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 0);
    goto corral_source_split_5121;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb13;

  $bb14:
    assume $i23 == 1;
    goto corral_source_split_5123;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 16);
    goto $bb9;

  $bb7:
    assume $i15 == 1;
    goto corral_source_split_5107;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 19);
    goto $bb9;

  SeqInstr_187:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_5085;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 19);
    goto $bb3;
}



const ldv_mutex_lock_85: ref;

axiom ldv_mutex_lock_85 == $sub.ref(0, 422651);

procedure ldv_mutex_lock_85($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_lock_85($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5175;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} ldv_mutex_lock_lock_of_poseidon($p0);
    goto SeqInstr_202, SeqInstr_203;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  SeqInstr_204:
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} mutex_lock($p0);
    goto corral_source_split_5177;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_202:
    assume !assertsPassed;
    return;
}



const poseidon_check_mode_dvbt: ref;

axiom poseidon_check_mode_dvbt == $sub.ref(0, 423683);

procedure poseidon_check_mode_dvbt($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.25, $CurrAddr;



implementation poseidon_check_mode_dvbt($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $i12: i32;
  var vslice_dummy_var_178: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 700} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, 0);
    goto corral_source_split_5180;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    $M.25 := $store.i64($M.25, $p2, 1);
    goto corral_source_split_5181;

  corral_source_split_5181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 702} $p3 := get_current();
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 9568)), $mul.ref(0, 1));
    goto corral_source_split_5183;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    $i5 := $load.i64($M.25, $p2);
    call {:si_unique_call 703} $i6 := devirtbounce(0, $p4, $i5, $p4);
    goto corral_source_split_5184;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    $M.25 := $store.i64($M.25, $p2, $i6);
    goto corral_source_split_5185;

  corral_source_split_5185:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 704} vslice_dummy_var_178 := schedule_timeout(62);
    goto corral_source_split_5187;

  corral_source_split_5187:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(512, 1));
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_5189;

  corral_source_split_5189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} $i10 := usb_set_interface($p9, 0, 2);
    call {:si_unique_call 706} {:cexpr "ret"} boogie_si_record_i32($i10);
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_5191;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} $i13 := set_tuner_mode($p0, 8);
    call {:si_unique_call 708} {:cexpr "ret"} boogie_si_record_i32($i13);
    goto corral_source_split_5197;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_5198;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} $i15 := send_set_req($p0, 19, 1, $p1);
    call {:si_unique_call 710} {:cexpr "ret"} boogie_si_record_i32($i15);
    goto corral_source_split_5202;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p1);
    goto corral_source_split_5203;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    $i17 := $or.i32($i15, $i16);
    goto corral_source_split_5204;

  corral_source_split_5204:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_5205;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_5195;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb9:
    assume $i18 == 1;
    goto corral_source_split_5207;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    $i12 := $i15;
    goto $bb4;

  $bb6:
    assume $i14 == 1;
    goto corral_source_split_5200;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    $i12 := $i13;
    goto $bb4;

  $bb2:
    assume $i11 == 1;
    goto corral_source_split_5193;

  corral_source_split_5193:
    assume {:verifier.code 0} true;
    $i12 := $i10;
    goto $bb4;
}



const atomic_inc: ref;

axiom atomic_inc == $sub.ref(0, 424715);

procedure atomic_inc($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation atomic_inc($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5209;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 711} devirtbounce.2(0, $p1, $p1);
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_unlock_86: ref;

axiom ldv_mutex_unlock_86 == $sub.ref(0, 425747);

procedure ldv_mutex_unlock_86($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_unlock_86($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5212;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 712} ldv_mutex_unlock_lock_of_poseidon($p0);
    goto SeqInstr_205, SeqInstr_206;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  SeqInstr_207:
    goto corral_source_split_5213;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 713} mutex_unlock($p0);
    goto corral_source_split_5214;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_205:
    assume !assertsPassed;
    return;
}



const dvb_stop_streaming: ref;

axiom dvb_stop_streaming == $sub.ref(0, 426779);

procedure dvb_stop_streaming($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.3, $CurrAddr, assertsPassed;



implementation dvb_stop_streaming($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $p22: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $p29: ref;
  var $p30: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $p37: ref;
  var $p38: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $i43: i1;
  var $p45: ref;
  var $p46: ref;
  var vslice_dummy_var_179: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 714} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_5216;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2784)), $mul.ref(2720, 1));
    goto corral_source_split_5217;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5218;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 3864)), $mul.ref(16, 1));
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} ldv_mutex_lock_99($p4);
    goto SeqInstr_208, SeqInstr_209;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  SeqInstr_210:
    goto corral_source_split_5220;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2784)), $mul.ref(2680, 1));
    goto corral_source_split_5221;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_5222;

  corral_source_split_5222:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_5223;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 3864)), $mul.ref(16, 1));
    goto corral_source_split_5253;

  corral_source_split_5253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 720} ldv_mutex_unlock_100($p22);
    goto SeqInstr_211, SeqInstr_212;

  SeqInstr_212:
    assume assertsPassed;
    goto SeqInstr_213;

  SeqInstr_213:
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_211:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_5225;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, 0);
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 2784)), $mul.ref(2680, 1));
    goto corral_source_split_5227;

  corral_source_split_5227:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, 0);
    goto corral_source_split_5228;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2784)), $mul.ref(2688, 1)), $mul.ref(0, 8));
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_5231;

  corral_source_split_5231:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_5232;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_5233;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2784)), $mul.ref(2688, 1)), $mul.ref(1, 8));
    goto corral_source_split_5240;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_5241;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_5242;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_5243;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2784)), $mul.ref(2688, 1)), $mul.ref(2, 8));
    goto corral_source_split_5261;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_5262;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p33);
    goto corral_source_split_5263;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_5264;

  corral_source_split_5264:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2784)), $mul.ref(2688, 1)), $mul.ref(3, 8));
    goto corral_source_split_5271;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_5272;

  corral_source_split_5272:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    goto corral_source_split_5273;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    $i43 := $ne.i64($i42, 0);
    goto corral_source_split_5274;

  corral_source_split_5274:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 717} $i17 := send_set_req($p3, 68, 2, $p1);
    call {:si_unique_call 718} {:cexpr "ret"} boogie_si_record_i32($i17);
    goto corral_source_split_5245;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p1);
    goto corral_source_split_5246;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    $i19 := $or.i32($i17, $i18);
    goto corral_source_split_5247;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_5248;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i20 == 1;
    goto corral_source_split_5250;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 719} vslice_dummy_var_179 := printk.ref.ref.i32(.str.13, .str.14, 581);
    goto corral_source_split_5251;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb22:
    assume $i43 == 1;
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2784)), $mul.ref(2688, 1)), $mul.ref(3, 8));
    goto corral_source_split_5277;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_5278;

  corral_source_split_5278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 723} usb_kill_urb($p46);
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb18:
    assume $i35 == 1;
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2784)), $mul.ref(2688, 1)), $mul.ref(2, 8));
    goto corral_source_split_5267;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_5268;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 722} usb_kill_urb($p38);
    goto corral_source_split_5269;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb14:
    assume $i27 == 1;
    goto corral_source_split_5256;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2784)), $mul.ref(2688, 1)), $mul.ref(1, 8));
    goto corral_source_split_5257;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_5258;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} usb_kill_urb($p30);
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_5235;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2784)), $mul.ref(2688, 1)), $mul.ref(0, 8));
    goto corral_source_split_5236;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_5237;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 716} usb_kill_urb($p16);
    goto corral_source_split_5238;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_208:
    assume !assertsPassed;
    return;
}



const atomic_dec_and_test: ref;

axiom atomic_dec_and_test == $sub.ref(0, 427811);

procedure atomic_dec_and_test($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation atomic_dec_and_test($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 724} $p1 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 725} devirtbounce.3(0, $p2, $p1, $p2);
    goto corral_source_split_5282;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.26, $p1);
    goto corral_source_split_5283;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_5285;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_5286;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const ldv_mutex_lock_87: ref;

axiom ldv_mutex_lock_87 == $sub.ref(0, 428843);

procedure ldv_mutex_lock_87($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_lock_87($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5288;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} ldv_mutex_lock_lock_of_poseidon($p0);
    goto SeqInstr_214, SeqInstr_215;

  SeqInstr_215:
    assume assertsPassed;
    goto SeqInstr_216;

  SeqInstr_216:
    goto corral_source_split_5289;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} mutex_lock($p0);
    goto corral_source_split_5290;

  corral_source_split_5290:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_214:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_88: ref;

axiom ldv_mutex_unlock_88 == $sub.ref(0, 429875);

procedure ldv_mutex_unlock_88($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_unlock_88($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5292;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 728} ldv_mutex_unlock_lock_of_poseidon($p0);
    goto SeqInstr_217, SeqInstr_218;

  SeqInstr_218:
    assume assertsPassed;
    goto SeqInstr_219;

  SeqInstr_219:
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} mutex_unlock($p0);
    goto corral_source_split_5294;

  corral_source_split_5294:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_217:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_99: ref;

axiom ldv_mutex_lock_99 == $sub.ref(0, 430907);

procedure ldv_mutex_lock_99($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_lock_99($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5296;

  corral_source_split_5296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} ldv_mutex_lock_lock_of_poseidon($p0);
    goto SeqInstr_220, SeqInstr_221;

  SeqInstr_221:
    assume assertsPassed;
    goto SeqInstr_222;

  SeqInstr_222:
    goto corral_source_split_5297;

  corral_source_split_5297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} mutex_lock($p0);
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_220:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_100: ref;

axiom ldv_mutex_unlock_100 == $sub.ref(0, 431939);

procedure ldv_mutex_unlock_100($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_unlock_100($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5300;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} ldv_mutex_unlock_lock_of_poseidon($p0);
    goto SeqInstr_223, SeqInstr_224;

  SeqInstr_224:
    assume assertsPassed;
    goto SeqInstr_225;

  SeqInstr_225:
    goto corral_source_split_5301;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 733} mutex_unlock($p0);
    goto corral_source_split_5302;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_223:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_95: ref;

axiom ldv_mutex_lock_95 == $sub.ref(0, 432971);

procedure ldv_mutex_lock_95($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_lock_95($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5304;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 734} ldv_mutex_lock_lock_of_poseidon($p0);
    goto SeqInstr_226, SeqInstr_227;

  SeqInstr_227:
    assume assertsPassed;
    goto SeqInstr_228;

  SeqInstr_228:
    goto corral_source_split_5305;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 735} mutex_lock($p0);
    goto corral_source_split_5306;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_226:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_96: ref;

axiom ldv_mutex_unlock_96 == $sub.ref(0, 434003);

procedure ldv_mutex_unlock_96($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_unlock_96($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} ldv_mutex_unlock_lock_of_poseidon($p0);
    goto SeqInstr_229, SeqInstr_230;

  SeqInstr_230:
    assume assertsPassed;
    goto SeqInstr_231;

  SeqInstr_231:
    goto corral_source_split_5309;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} mutex_unlock($p0);
    goto corral_source_split_5310;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_229:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_93: ref;

axiom ldv_mutex_lock_93 == $sub.ref(0, 435035);

procedure ldv_mutex_lock_93($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_lock_93($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5312;

  corral_source_split_5312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 738} ldv_mutex_lock_lock_of_poseidon($p0);
    goto SeqInstr_232, SeqInstr_233;

  SeqInstr_233:
    assume assertsPassed;
    goto SeqInstr_234;

  SeqInstr_234:
    goto corral_source_split_5313;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} mutex_lock($p0);
    goto corral_source_split_5314;

  corral_source_split_5314:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_232:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_94: ref;

axiom ldv_mutex_unlock_94 == $sub.ref(0, 436067);

procedure ldv_mutex_unlock_94($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_unlock_94($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 740} ldv_mutex_unlock_lock_of_poseidon($p0);
    goto SeqInstr_235, SeqInstr_236;

  SeqInstr_236:
    assume assertsPassed;
    goto SeqInstr_237;

  SeqInstr_237:
    goto corral_source_split_5317;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} mutex_unlock($p0);
    goto corral_source_split_5318;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_235:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_91: ref;

axiom ldv_mutex_lock_91 == $sub.ref(0, 437099);

procedure ldv_mutex_lock_91($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_lock_91($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5320;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} ldv_mutex_lock_lock_of_poseidon($p0);
    goto SeqInstr_238, SeqInstr_239;

  SeqInstr_239:
    assume assertsPassed;
    goto SeqInstr_240;

  SeqInstr_240:
    goto corral_source_split_5321;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 743} mutex_lock($p0);
    goto corral_source_split_5322;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_238:
    assume !assertsPassed;
    return;
}



const fw_delay_overflow: ref;

axiom fw_delay_overflow == $sub.ref(0, 438131);

procedure fw_delay_overflow($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation fw_delay_overflow($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i6: i64;
  var $i7: i64;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    $i1 := $load.i64($M.0, jiffies);
    goto corral_source_split_5325;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2784)), $mul.ref(2776, 1));
    goto corral_source_split_5326;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    goto corral_source_split_5327;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    $i4 := $sub.i64($i1, $i3);
    call {:si_unique_call 744} {:cexpr "nl"} boogie_si_record_i64($i4);
    goto corral_source_split_5328;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    $i5 := $slt.i64($i4, 0);
    goto corral_source_split_5329;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_5334;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    $i7 := $i4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} $i8 := jiffies_to_msecs($i7);
    call {:si_unique_call 746} {:cexpr "msec"} boogie_si_record_i32($i8);
    goto corral_source_split_5337;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    $i9 := $ugt.i32($i8, 800);
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_5339;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5331;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    $i6 := $sub.i64(0, $i4);
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    $i7 := $i6;
    goto $bb3;
}



const ldv_mutex_unlock_92: ref;

axiom ldv_mutex_unlock_92 == $sub.ref(0, 439163);

procedure ldv_mutex_unlock_92($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_unlock_92($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5341;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 747} ldv_mutex_unlock_lock_of_poseidon($p0);
    goto SeqInstr_241, SeqInstr_242;

  SeqInstr_242:
    assume assertsPassed;
    goto SeqInstr_243;

  SeqInstr_243:
    goto corral_source_split_5342;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} mutex_unlock($p0);
    goto corral_source_split_5343;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_241:
    assume !assertsPassed;
    return;
}



const jiffies_to_msecs: ref;

axiom jiffies_to_msecs == $sub.ref(0, 440195);

procedure jiffies_to_msecs($i0: i64) returns ($r: i32);
  free requires assertsPassed;



implementation jiffies_to_msecs($i0: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 749} {:cexpr "jiffies_to_msecs:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 1} true;
    call {:si_unique_call 750} $i1 := __VERIFIER_nondet_uint();
    call {:si_unique_call 751} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i1);
    goto corral_source_split_5346;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_mutex_lock_89: ref;

axiom ldv_mutex_lock_89 == $sub.ref(0, 441227);

procedure ldv_mutex_lock_89($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_lock_89($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5348;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} ldv_mutex_lock_lock_of_poseidon($p0);
    goto SeqInstr_244, SeqInstr_245;

  SeqInstr_245:
    assume assertsPassed;
    goto SeqInstr_246;

  SeqInstr_246:
    goto corral_source_split_5349;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} mutex_lock($p0);
    goto corral_source_split_5350;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_244:
    assume !assertsPassed;
    return;
}



const check_scan_ok: ref;

axiom check_scan_ok == $sub.ref(0, 442259);

procedure check_scan_ok($i0: i32, $i1: i32, $p2: ref) returns ($r: i1);
  free requires assertsPassed;



implementation check_scan_ok($i0: i32, $i1: i32, $p2: ref) returns ($r: i1)
{
  var $i3: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i11: i64;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $i16: i64;
  var $i17: i64;
  var $i18: i32;
  var $i19: i1;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} {:cexpr "check_scan_ok:arg:freq"} boogie_si_record_i32($i0);
    call {:si_unique_call 755} {:cexpr "check_scan_ok:arg:bandwidth"} boogie_si_record_i32($i1);
    goto corral_source_split_5352;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i1, 0);
    goto corral_source_split_5353;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 2784)), $mul.ref(2768, 1));
    goto corral_source_split_5359;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_5360;

  corral_source_split_5360:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, $i0);
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i4 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5357;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_5363;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 2784)), $mul.ref(2772, 1));
    goto corral_source_split_5364;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_5365;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, $i1);
    goto corral_source_split_5366;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb7;

  $bb8:
    assume $i10 == 1;
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.0, jiffies);
    goto corral_source_split_5369;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 2784)), $mul.ref(2776, 1));
    goto corral_source_split_5370;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.0, $p12);
    goto corral_source_split_5371;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    $i14 := $sub.i64($i11, $i13);
    call {:si_unique_call 756} {:cexpr "nl"} boogie_si_record_i64($i14);
    goto corral_source_split_5372;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    $i15 := $slt.i64($i14, 0);
    goto corral_source_split_5373;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i15 == 1);
    goto corral_source_split_5378;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    $i17 := $i14;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_5380;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} $i18 := jiffies_to_msecs($i17);
    call {:si_unique_call 758} {:cexpr "msec"} boogie_si_record_i32($i18);
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    $i19 := $ugt.i32($i18, 15000);
    goto corral_source_split_5382;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    $i4 := $i19;
    goto $bb3;

  $bb10:
    assume $i15 == 1;
    goto corral_source_split_5375;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    $i16 := $sub.i64(0, $i14);
    goto corral_source_split_5376;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    $i17 := $i16;
    goto $bb12;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5355;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;
}



const ldv_mutex_unlock_90: ref;

axiom ldv_mutex_unlock_90 == $sub.ref(0, 443291);

procedure ldv_mutex_unlock_90($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_unlock_90($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5384;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 759} ldv_mutex_unlock_lock_of_poseidon($p0);
    goto SeqInstr_247, SeqInstr_248;

  SeqInstr_248:
    assume assertsPassed;
    goto SeqInstr_249;

  SeqInstr_249:
    goto corral_source_split_5385;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} mutex_unlock($p0);
    goto corral_source_split_5386;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_247:
    assume !assertsPassed;
    return;
}



const pm_dvb_suspend: ref;

axiom pm_dvb_suspend == $sub.ref(0, 444323);

procedure pm_dvb_suspend($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $CurrAddr, assertsPassed;



implementation pm_dvb_suspend($p0: ref) returns ($r: i32)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5388;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(952, 1));
    goto corral_source_split_5389;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 761} dvb_stop_streaming($p1);
    goto SeqInstr_250, SeqInstr_251;

  SeqInstr_251:
    assume assertsPassed;
    goto SeqInstr_252;

  SeqInstr_252:
    goto corral_source_split_5390;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} dvb_urb_cleanup($p1);
    goto corral_source_split_5391;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} msleep(500);
    goto corral_source_split_5392;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_250:
    assume !assertsPassed;
    return;
}



const pm_dvb_resume: ref;

axiom pm_dvb_resume == $sub.ref(0, 445355);

procedure pm_dvb_resume($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.25, $M.3, $CurrAddr, assertsPassed;



implementation pm_dvb_resume($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p3: ref;
  var $p4: ref;
  var vslice_dummy_var_180: i32;
  var vslice_dummy_var_181: i32;
  var vslice_dummy_var_182: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5394;

  corral_source_split_5394:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(952, 1));
    goto corral_source_split_5395;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} vslice_dummy_var_180 := poseidon_check_mode_dvbt($p0);
    goto corral_source_split_5396;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} msleep(300);
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(952, 1)), $mul.ref(272, 1));
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(952, 1)), $mul.ref(2732, 1));
    goto corral_source_split_5397;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} vslice_dummy_var_181 := poseidon_set_fe($p3, $p4);
    goto SeqInstr_253, SeqInstr_254;

  SeqInstr_254:
    assume assertsPassed;
    goto SeqInstr_255;

  SeqInstr_255:
    goto corral_source_split_5398;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 767} vslice_dummy_var_182 := dvb_start_streaming($p1);
    goto SeqInstr_256, SeqInstr_257;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  SeqInstr_258:
    goto corral_source_split_5399;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_256:
    assume !assertsPassed;
    return;

  SeqInstr_253:
    assume !assertsPassed;
    return;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 446387);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const dvb_start_streaming: ref;

axiom dvb_start_streaming == $sub.ref(0, 447419);

procedure dvb_start_streaming($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $CurrAddr, assertsPassed;



implementation dvb_start_streaming($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i28: i32;
  var $i17: i32;
  var $p30: ref;
  var $i8: i32;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $p42: ref;
  var $p43: ref;
  var $i29: i32;
  var $i44: i1;
  var vslice_dummy_var_183: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_5401;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2784)), $mul.ref(2720, 1));
    goto corral_source_split_5402;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5403;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 3864)), $mul.ref(3736, 1));
    goto corral_source_split_5404;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_5405;

  corral_source_split_5405:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 128);
    goto corral_source_split_5406;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_5407;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 3864)), $mul.ref(16, 1));
    goto corral_source_split_5413;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} ldv_mutex_lock_97($p9);
    goto SeqInstr_259, SeqInstr_260;

  SeqInstr_260:
    assume assertsPassed;
    goto SeqInstr_261;

  SeqInstr_261:
    goto corral_source_split_5414;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 2784)), $mul.ref(2680, 1));
    goto corral_source_split_5415;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_5416;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_5417;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i28 := 0;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_5453;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    $i17 := $i28;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_5428;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p3, $mul.ref(0, 3864)), $mul.ref(16, 1));
    goto corral_source_split_5429;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} ldv_mutex_unlock_98($p30);
    goto SeqInstr_262, SeqInstr_263;

  SeqInstr_263:
    assume assertsPassed;
    goto SeqInstr_264;

  SeqInstr_264:
    goto corral_source_split_5430;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    $i8 := $i17;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5411;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  SeqInstr_262:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_5419;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, 0);
    goto corral_source_split_5420;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} $i13 := send_set_req($p3, 68, 1, $p1);
    call {:si_unique_call 771} {:cexpr "ret"} boogie_si_record_i32($i13);
    goto corral_source_split_5421;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p1);
    goto corral_source_split_5422;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    $i15 := $or.i32($i13, $i14);
    goto corral_source_split_5423;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_5424;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} $i18 := dvb_urb_init($p0);
    call {:si_unique_call 774} {:cexpr "ret"} boogie_si_record_i32($i18);
    goto corral_source_split_5432;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i18, 0);
    goto corral_source_split_5433;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 2784)), $mul.ref(2680, 1));
    goto corral_source_split_5437;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, 1);
    goto corral_source_split_5438;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2784)), $mul.ref(2688, 1)), $mul.ref(0, 8));
    goto corral_source_split_5440;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_5441;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 775} $i24 := usb_submit_urb($p23, 208);
    call {:si_unique_call 776} {:cexpr "ret"} boogie_si_record_i32($i24);
    goto corral_source_split_5442;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_5443;

  corral_source_split_5443:
    assume {:verifier.code 0} true;
    $i26 := $i24;
    assume true;
    goto $bb16, $bb18;

  $bb18:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2784)), $mul.ref(2688, 1)), $mul.ref(1, 8));
    goto corral_source_split_5448;

  corral_source_split_5448:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_5449;

  corral_source_split_5449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 778} $i34 := usb_submit_urb($p33, 208);
    goto corral_source_split_5450;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_5451;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    $i26 := $i34;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2784)), $mul.ref(2688, 1)), $mul.ref(2, 8));
    goto corral_source_split_5455;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_5456;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} $i39 := usb_submit_urb($p38, 208);
    goto corral_source_split_5457;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_5458;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    $i26 := $i39;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2784)), $mul.ref(2688, 1)), $mul.ref(3, 8));
    goto corral_source_split_5460;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_5461;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} $i29 := usb_submit_urb($p43, 208);
    goto corral_source_split_5462;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i29, 0);
    goto corral_source_split_5463;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    $i26 := $i29;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i28 := $i29;
    goto $bb22;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i44 == 1;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_5445;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} vslice_dummy_var_183 := printk.ref.ref.i32.i32(.str.71, .str.72, 554, $i26);
    goto corral_source_split_5446;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    $i17 := $i26;
    goto $bb9;

  $bb27:
    assume {:verifier.code 0} true;
    assume $i40 == 1;
    goto $bb17;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i35 == 1;
    goto $bb17;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb17;

  $bb11:
    assume $i19 == 1;
    goto corral_source_split_5435;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    $i17 := $i18;
    goto $bb9;

  $bb7:
    assume $i16 == 1;
    goto corral_source_split_5426;

  corral_source_split_5426:
    assume {:verifier.code 0} true;
    $i17 := $i13;
    goto $bb9;

  SeqInstr_259:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_5409;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 19);
    goto $bb3;
}



const ldv_mutex_lock_97: ref;

axiom ldv_mutex_lock_97 == $sub.ref(0, 448451);

procedure ldv_mutex_lock_97($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_lock_97($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5465;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} ldv_mutex_lock_lock_of_poseidon($p0);
    goto SeqInstr_265, SeqInstr_266;

  SeqInstr_266:
    assume assertsPassed;
    goto SeqInstr_267;

  SeqInstr_267:
    goto corral_source_split_5466;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} mutex_lock($p0);
    goto corral_source_split_5467;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_265:
    assume !assertsPassed;
    return;
}



const dvb_urb_init: ref;

axiom dvb_urb_init == $sub.ref(0, 449483);

procedure dvb_urb_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation dvb_urb_init($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i8;
  var $p16: ref;
  var vslice_dummy_var_184: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5469;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2784)), $mul.ref(2688, 1)), $mul.ref(0, 8));
    goto corral_source_split_5470;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5471;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_5472;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_5473;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2784)), $mul.ref(2688, 1));
    goto corral_source_split_5477;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_5478;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 2784)), $mul.ref(2720, 1));
    goto corral_source_split_5479;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_5480;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 3864)), $mul.ref(512, 1));
    goto corral_source_split_5481;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_5482;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 2784)), $mul.ref(2728, 1));
    goto corral_source_split_5483;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_5484;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_5485;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i8($i14);
    goto corral_source_split_5486;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p0);
    goto corral_source_split_5487;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} vslice_dummy_var_184 := alloc_bulk_urbs_generic($p7, 4, $p11, $i15, 8192, 208, dvb_urb_irq, $p16);
    goto corral_source_split_5488;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5475;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_mutex_unlock_98: ref;

axiom ldv_mutex_unlock_98 == $sub.ref(0, 450515);

procedure ldv_mutex_unlock_98($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_unlock_98($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5490;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} ldv_mutex_unlock_lock_of_poseidon($p0);
    goto SeqInstr_268, SeqInstr_269;

  SeqInstr_269:
    assume assertsPassed;
    goto SeqInstr_270;

  SeqInstr_270:
    goto corral_source_split_5491;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} mutex_unlock($p0);
    goto corral_source_split_5492;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_268:
    assume !assertsPassed;
    return;
}



const dvb_urb_irq: ref;

axiom dvb_urb_irq == $sub.ref(0, 451547);

procedure dvb_urb_irq($p0: ref);



const dvb_dmx_swfilter: ref;

axiom dvb_dmx_swfilter == $sub.ref(0, 452579);

procedure dvb_dmx_swfilter($p0: ref, $p1: ref, $i2: i64);



const poseidon_fm_open: ref;

axiom poseidon_fm_open == $sub.ref(0, 453611);

procedure poseidon_fm_open($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.27, assertsPassed, $CurrAddr;



implementation poseidon_fm_open($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $p31: ref;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i32;
  var $p40: ref;
  var $i41: i32;
  var $p43: ref;
  var $i44: i32;
  var $i45: i32;
  var $p47: ref;
  var $p48: ref;
  var $p50: ref;
  var $i12: i32;
  var $p51: ref;
  var $i6: i32;
  var vslice_dummy_var_185: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5494;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} $p1 := video_devdata($p0);
    goto corral_source_split_5495;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} $p2 := video_get_drvdata($p1);
    goto corral_source_split_5496;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5497;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_5498;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_5499;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 3864)), $mul.ref(16, 1));
    goto corral_source_split_5505;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} ldv_mutex_lock_129($p7);
    goto SeqInstr_271, SeqInstr_272;

  SeqInstr_272:
    assume assertsPassed;
    goto SeqInstr_273;

  SeqInstr_273:
    goto corral_source_split_5506;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 3864)), $mul.ref(3736, 1));
    goto corral_source_split_5507;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_5508;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 128);
    goto corral_source_split_5509;

  corral_source_split_5509:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_5510;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 3864)), $mul.ref(3736, 1));
    goto corral_source_split_5518;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_5519;

  corral_source_split_5519:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_5520;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 3864)), $mul.ref(520, 1));
    goto corral_source_split_5530;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_5531;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 790} vslice_dummy_var_185 := usb_autopm_get_interface($p21);
    goto corral_source_split_5532;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 3864)), $mul.ref(3736, 1));
    goto corral_source_split_5533;

  corral_source_split_5533:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_5534;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 0);
    goto corral_source_split_5535;

  corral_source_split_5535:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i41 := 0;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_5562;

  corral_source_split_5562:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 3864)), $mul.ref(928, 1)), $mul.ref(4, 1));
    goto corral_source_split_5563;

  corral_source_split_5563:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_5564;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    $i45 := $add.i32($i44, 1);
    goto corral_source_split_5565;

  corral_source_split_5565:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 3864)), $mul.ref(928, 1)), $mul.ref(4, 1));
    goto corral_source_split_5566;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p47, $i45);
    goto corral_source_split_5567;

  corral_source_split_5567:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p3, $mul.ref(0, 3864)), $mul.ref(184, 1));
    goto corral_source_split_5568;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} kref_get($p48);
    goto corral_source_split_5569;

  corral_source_split_5569:
    assume {:verifier.code 0} true;
    goto corral_source_split_5570;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 336)), $mul.ref(296, 1));
    goto corral_source_split_5571;

  corral_source_split_5571:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p50, $p2);
    goto corral_source_split_5572;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    $i12 := $i41;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_5514;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p3, $mul.ref(0, 3864)), $mul.ref(16, 1));
    goto corral_source_split_5515;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 789} ldv_mutex_unlock_130($p51);
    goto SeqInstr_274, SeqInstr_275;

  SeqInstr_275:
    assume assertsPassed;
    goto SeqInstr_276;

  SeqInstr_276:
    goto corral_source_split_5516;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    $i6 := $i12;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5503;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  SeqInstr_274:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i25 == 1;
    goto corral_source_split_5537;

  corral_source_split_5537:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 3864)), $mul.ref(928, 1)), $mul.ref(12, 1));
    goto corral_source_split_5538;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_5539;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 0);
    goto corral_source_split_5540;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i32 := $M.2;
    goto corral_source_split_5546;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} set_debug_mode($p1, $i32);
    goto corral_source_split_5547;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} $i33 := poseidon_check_mode_radio($p3);
    call {:si_unique_call 793} {:cexpr "ret"} boogie_si_record_i32($i33);
    goto corral_source_split_5548;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    $i34 := $slt.i32($i33, 0);
    goto corral_source_split_5549;

  corral_source_split_5549:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p3, $mul.ref(0, 3864)), $mul.ref(3736, 1));
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_5557;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    $i39 := $or.i32($i38, 2);
    goto corral_source_split_5558;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p3, $mul.ref(0, 3864)), $mul.ref(3736, 1));
    goto corral_source_split_5559;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p40, $i39);
    goto corral_source_split_5560;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    $i41 := $i33;
    goto $bb23;

  $bb20:
    assume $i34 == 1;
    goto corral_source_split_5551;

  corral_source_split_5551:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref(0, 3864)), $mul.ref(520, 1));
    goto corral_source_split_5552;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_5553;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 794} usb_autopm_put_interface($p36);
    goto corral_source_split_5554;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    $i12 := $i33;
    goto $bb7;

  $bb17:
    assume $i29 == 1;
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 3864)), $mul.ref(928, 1)), $mul.ref(12, 1));
    goto corral_source_split_5543;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, 32);
    goto corral_source_split_5544;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb9:
    assume $i15 == 1;
    goto corral_source_split_5522;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 3864)), $mul.ref(3736, 1));
    goto corral_source_split_5523;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_5524;

  corral_source_split_5524:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i17, 2);
    goto corral_source_split_5525;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 0);
    goto corral_source_split_5526;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb11;

  $bb12:
    assume $i19 == 1;
    goto corral_source_split_5528;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 16);
    goto $bb7;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_5512;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 19);
    goto $bb7;

  SeqInstr_271:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5501;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 1);
    goto $bb3;
}



const poseidon_fm_close: ref;

axiom poseidon_fm_close == $sub.ref(0, 454643);

procedure poseidon_fm_close($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $CurrAddr, assertsPassed;



implementation poseidon_fm_close($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p33: ref;
  var vslice_dummy_var_186: i32;
  var vslice_dummy_var_187: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_5574;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 336)), $mul.ref(296, 1));
    goto corral_source_split_5575;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5576;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5577;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    goto corral_source_split_5578;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 3864)), $mul.ref(16, 1));
    goto corral_source_split_5579;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 797} ldv_mutex_lock_131($p6);
    goto SeqInstr_277, SeqInstr_278;

  SeqInstr_278:
    assume assertsPassed;
    goto SeqInstr_279;

  SeqInstr_279:
    $p7 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3864)), $mul.ref(928, 1)), $mul.ref(4, 1));
    goto corral_source_split_5580;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_5581;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32($i8, 1);
    $p10 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3864)), $mul.ref(928, 1)), $mul.ref(4, 1));
    goto corral_source_split_5582;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i9);
    $p11 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3864)), $mul.ref(928, 1)), $mul.ref(4, 1));
    goto corral_source_split_5583;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_5584;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_5585;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    $p18 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3864)), $mul.ref(928, 1)), $mul.ref(8, 1));
    goto corral_source_split_5594;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_5595;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_5596;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p4, $mul.ref(0, 3864)), $mul.ref(520, 1));
    goto corral_source_split_5609;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_5610;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 799} usb_autopm_put_interface($p29);
    goto corral_source_split_5611;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p4, $mul.ref(0, 3864)), $mul.ref(16, 1));
    goto corral_source_split_5612;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} ldv_mutex_unlock_132($p30);
    goto SeqInstr_280, SeqInstr_281;

  SeqInstr_281:
    assume assertsPassed;
    goto SeqInstr_282;

  SeqInstr_282:
    goto corral_source_split_5613;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p4, $mul.ref(0, 3864)), $mul.ref(184, 1));
    goto corral_source_split_5614;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} vslice_dummy_var_187 := kref_put($p31, poseidon_delete);
    goto corral_source_split_5615;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 336)), $mul.ref(296, 1));
    goto corral_source_split_5616;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p33, $0.ref);
    goto corral_source_split_5617;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_280:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i20 == 1;
    goto corral_source_split_5598;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p4, $mul.ref(0, 3864)), $mul.ref(3744, 1));
    goto corral_source_split_5599;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_5600;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_5601;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p0);
    goto corral_source_split_5602;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    $i25 := $eq.i64($i23, $i24);
    goto corral_source_split_5603;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb6;

  $bb7:
    assume $i25 == 1;
    $p26 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3864)), $mul.ref(928, 1)), $mul.ref(8, 1));
    goto corral_source_split_5605;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, 0);
    goto corral_source_split_5606;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} vslice_dummy_var_186 := send_set_req($p4, 68, 2, $p1);
    goto corral_source_split_5607;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_5587;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 3864)), $mul.ref(3736, 1));
    goto corral_source_split_5588;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_5589;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, $sub.i32(0, 3));
    goto corral_source_split_5590;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref(0, 3864)), $mul.ref(3736, 1));
    goto corral_source_split_5591;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, $i16);
    goto corral_source_split_5592;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_277:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_131: ref;

axiom ldv_mutex_lock_131 == $sub.ref(0, 455675);

procedure ldv_mutex_lock_131($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_lock_131($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5619;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} ldv_mutex_lock_lock_of_poseidon($p0);
    goto SeqInstr_283, SeqInstr_284;

  SeqInstr_284:
    assume assertsPassed;
    goto SeqInstr_285;

  SeqInstr_285:
    goto corral_source_split_5620;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 803} mutex_lock($p0);
    goto corral_source_split_5621;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_283:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_132: ref;

axiom ldv_mutex_unlock_132 == $sub.ref(0, 456707);

procedure ldv_mutex_unlock_132($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_unlock_132($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5623;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} ldv_mutex_unlock_lock_of_poseidon($p0);
    goto SeqInstr_286, SeqInstr_287;

  SeqInstr_287:
    assume assertsPassed;
    goto SeqInstr_288;

  SeqInstr_288:
    goto corral_source_split_5624;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 805} mutex_unlock($p0);
    goto corral_source_split_5625;

  corral_source_split_5625:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_286:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_129: ref;

axiom ldv_mutex_lock_129 == $sub.ref(0, 457739);

procedure ldv_mutex_lock_129($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_lock_129($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5627;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} ldv_mutex_lock_lock_of_poseidon($p0);
    goto SeqInstr_289, SeqInstr_290;

  SeqInstr_290:
    assume assertsPassed;
    goto SeqInstr_291;

  SeqInstr_291:
    goto corral_source_split_5628;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 807} mutex_lock($p0);
    goto corral_source_split_5629;

  corral_source_split_5629:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_289:
    assume !assertsPassed;
    return;
}



const poseidon_check_mode_radio: ref;

axiom poseidon_check_mode_radio == $sub.ref(0, 458771);

procedure poseidon_check_mode_radio($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.27, $M.0, $CurrAddr;



implementation poseidon_check_mode_radio($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $i12: i32;
  var vslice_dummy_var_188: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 809} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_5631;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    $M.27 := $store.i64($M.27, $p2, 1);
    goto corral_source_split_5632;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} $p3 := get_current();
    goto corral_source_split_5633;

  corral_source_split_5633:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 9568)), $mul.ref(0, 1));
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    $i5 := $load.i64($M.27, $p2);
    call {:si_unique_call 811} $i6 := devirtbounce(0, $p4, $i5, $p4);
    goto corral_source_split_5635;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    $M.27 := $store.i64($M.27, $p2, $i6);
    goto corral_source_split_5636;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} vslice_dummy_var_188 := schedule_timeout(125);
    goto corral_source_split_5638;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(512, 1));
    goto corral_source_split_5639;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_5640;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 813} $i10 := usb_set_interface($p9, 0, 2);
    call {:si_unique_call 814} {:cexpr "ret"} boogie_si_record_i32($i10);
    goto corral_source_split_5641;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i10, 0);
    goto corral_source_split_5642;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 815} $i13 := set_tuner_mode($p0, 4);
    call {:si_unique_call 816} {:cexpr "ret"} boogie_si_record_i32($i13);
    goto corral_source_split_5648;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_5649;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 817} $i15 := send_set_req($p0, 19, 1, $p1);
    call {:si_unique_call 818} {:cexpr "ret"} boogie_si_record_i32($i15);
    goto corral_source_split_5653;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(928, 1)), $mul.ref(12, 1));
    goto corral_source_split_5654;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_5655;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 819} $i19 := send_set_req($p0, 44, $i18, $p1);
    call {:si_unique_call 820} {:cexpr "ret"} boogie_si_record_i32($i19);
    goto corral_source_split_5656;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 821} $i20 := send_set_req($p0, 42, 2, $p1);
    call {:si_unique_call 822} {:cexpr "tmp___3"} boogie_si_record_i32($i20);
    goto corral_source_split_5657;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    $i21 := $or.i32($i20, $i19);
    call {:si_unique_call 823} {:cexpr "ret"} boogie_si_record_i32($i21);
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 824} $i22 := send_set_req($p0, 41, 2, $p1);
    call {:si_unique_call 825} {:cexpr "tmp___4"} boogie_si_record_i32($i22);
    goto corral_source_split_5659;

  corral_source_split_5659:
    assume {:verifier.code 0} true;
    $i23 := $or.i32($i22, $i21);
    call {:si_unique_call 826} {:cexpr "ret"} boogie_si_record_i32($i23);
    goto corral_source_split_5660;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} $i24 := send_set_req($p0, 18, 76000000, $p1);
    call {:si_unique_call 828} {:cexpr "tmp___5"} boogie_si_record_i32($i24);
    goto corral_source_split_5661;

  corral_source_split_5661:
    assume {:verifier.code 0} true;
    $i25 := $or.i32($i24, $i23);
    call {:si_unique_call 829} {:cexpr "ret"} boogie_si_record_i32($i25);
    goto corral_source_split_5662;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    $i12 := $i25;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_5646;

  corral_source_split_5646:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb6:
    assume $i14 == 1;
    goto corral_source_split_5651;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    $i12 := $i13;
    goto $bb4;

  $bb2:
    assume $i11 == 1;
    goto corral_source_split_5644;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    $i12 := $i10;
    goto $bb4;
}



const ldv_mutex_unlock_130: ref;

axiom ldv_mutex_unlock_130 == $sub.ref(0, 459803);

procedure ldv_mutex_unlock_130($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_unlock_130($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5664;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 830} ldv_mutex_unlock_lock_of_poseidon($p0);
    goto SeqInstr_292, SeqInstr_293;

  SeqInstr_293:
    assume assertsPassed;
    goto SeqInstr_294;

  SeqInstr_294:
    goto corral_source_split_5665;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} mutex_unlock($p0);
    goto corral_source_split_5666;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_292:
    assume !assertsPassed;
    return;
}



const vidioc_querycap___0: ref;

axiom vidioc_querycap___0 == $sub.ref(0, 460835);

procedure vidioc_querycap___0($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vidioc_querycap___0($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p17: ref;
  var $p18: ref;
  var vslice_dummy_var_189: i64;
  var vslice_dummy_var_190: i64;
  var vslice_dummy_var_191: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5668;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 336)), $mul.ref(296, 1));
    goto corral_source_split_5669;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5670;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_5671;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(0, 1));
    goto corral_source_split_5672;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_5673;

  corral_source_split_5673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 832} vslice_dummy_var_189 := strlcpy($p7, .str.83, 16);
    goto corral_source_split_5674;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(16, 1));
    goto corral_source_split_5675;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_5676;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} vslice_dummy_var_190 := strlcpy($p10, .str.53, 32);
    goto corral_source_split_5677;

  corral_source_split_5677:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 3864)), $mul.ref(512, 1));
    goto corral_source_split_5678;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_5679;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(48, 1));
    goto corral_source_split_5680;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_5681;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} vslice_dummy_var_191 := usb_make_path($p13, $p15, 32);
    goto corral_source_split_5682;

  corral_source_split_5682:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(80, 1));
    goto corral_source_split_5683;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, 1);
    goto corral_source_split_5684;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(84, 1));
    goto corral_source_split_5685;

  corral_source_split_5685:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, 327680);
    goto corral_source_split_5686;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const vidioc_g_input___0: ref;

axiom vidioc_g_input___0 == $sub.ref(0, 461867);

procedure vidioc_g_input___0($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vidioc_g_input___0($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5688;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_5689;

  corral_source_split_5689:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_5690;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    $i5 := (if $i4 == 1 then $sub.i32(0, 22) else 0);
    goto corral_source_split_5691;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const vidioc_s_input___0: ref;

axiom vidioc_s_input___0 == $sub.ref(0, 462899);

procedure vidioc_s_input___0($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation vidioc_s_input___0($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} {:cexpr "vidioc_s_input___0:arg:i"} boogie_si_record_i32($i2);
    goto corral_source_split_5693;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_5694;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    $i4 := (if $i3 == 1 then $sub.i32(0, 22) else 0);
    goto corral_source_split_5695;

  corral_source_split_5695:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const tlg_fm_vidioc_queryctrl: ref;

axiom tlg_fm_vidioc_queryctrl == $sub.ref(0, 463931);

procedure tlg_fm_vidioc_queryctrl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation tlg_fm_vidioc_queryctrl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p16: ref;
  var $i6: i32;
  var vslice_dummy_var_192: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5697;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(0, 1));
    goto corral_source_split_5698;

  corral_source_split_5698:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_5699;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    $i5 := $sge.i32($i4, 0);
    goto corral_source_split_5700;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(0, 1));
    goto corral_source_split_5706;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_5707;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 2147483647);
    goto corral_source_split_5708;

  corral_source_split_5708:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(0, 1));
    goto corral_source_split_5709;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i9);
    goto corral_source_split_5710;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(0, 1));
    goto corral_source_split_5711;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_5712;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 10160496);
    goto corral_source_split_5713;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5704;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_5715;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(0, 1));
    goto corral_source_split_5716;

  corral_source_split_5716:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, 10160496);
    goto corral_source_split_5717;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} vslice_dummy_var_192 := v4l2_ctrl_query_fill($p2, 0, 2, 1, 1);
    goto corral_source_split_5718;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(56, 1));
    goto corral_source_split_5719;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, 8);
    goto corral_source_split_5720;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5702;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;
}



const tlg_fm_vidioc_g_ctrl: ref;

axiom tlg_fm_vidioc_g_ctrl == $sub.ref(0, 464963);

procedure tlg_fm_vidioc_g_ctrl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tlg_fm_vidioc_g_ctrl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5722;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const tlg_fm_vidioc_s_ctrl: ref;

axiom tlg_fm_vidioc_s_ctrl == $sub.ref(0, 465995);

procedure tlg_fm_vidioc_s_ctrl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tlg_fm_vidioc_s_ctrl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5724;

  corral_source_split_5724:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const tlg_fm_vidioc_g_exts_ctrl: ref;

axiom tlg_fm_vidioc_g_exts_ctrl == $sub.ref(0, 467027);

procedure tlg_fm_vidioc_g_exts_ctrl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation tlg_fm_vidioc_g_exts_ctrl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $i21: i1;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $i13: i32;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5726;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 336)), $mul.ref(296, 1));
    goto corral_source_split_5727;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5728;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_5729;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_5730;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_5731;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 10158080);
    goto corral_source_split_5732;

  corral_source_split_5732:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_5738;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_5739;

  corral_source_split_5739:
    assume {:verifier.code 0} true;
    $i12 := $ult.i32(0, $i11);
    goto corral_source_split_5740;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5736;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_5742;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb8;

  $bb8:
    call $p14, $p15, $i16, $p18, $i19, $i20, $i21, $p23, $i24, $p25, $p26, $i27, $i28, $i29, $i13 := tlg_fm_vidioc_g_exts_ctrl_loop_$bb8($p2, $p5, $p10, $p14, $p15, $i16, $p18, $i19, $i20, $i21, $p23, $i24, $p25, $p26, $i27, $i28, $i29, $i13);
    goto $bb8_last;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_5746;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_5747;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i13);
    goto corral_source_split_5748;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    goto corral_source_split_5749;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p15, $mul.ref($i16, 24)), $mul.ref(0, 1));
    goto corral_source_split_5750;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_5751;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 10160496);
    goto corral_source_split_5752;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i21 := $sle.i32($i13, 2);
    goto corral_source_split_5760;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i27 := $add.i32($i13, 1);
    call {:si_unique_call 837} {:cexpr "i"} boogie_si_record_i32($i27);
    goto corral_source_split_5756;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p10);
    goto corral_source_split_5757;

  corral_source_split_5757:
    assume {:verifier.code 0} true;
    $i29 := $ult.i32($i27, $i28);
    goto corral_source_split_5758;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i29 == 1);
    goto corral_source_split_5769;

  corral_source_split_5769:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb17:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    $i13 := $i27;
    goto $bb17_dummy;

  $bb14:
    assume $i21 == 1;
    goto corral_source_split_5762;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 3864)), $mul.ref(928, 1)), $mul.ref(12, 1));
    goto corral_source_split_5763;

  corral_source_split_5763:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_5764;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p15, $mul.ref($i16, 24)), $mul.ref(16, 1));
    goto corral_source_split_5765;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_5766;

  corral_source_split_5766:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, $i24);
    goto corral_source_split_5767;

  corral_source_split_5767:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb10:
    assume $i20 == 1;
    goto corral_source_split_5754;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_5734;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 22);
    goto $bb3;

  $bb17_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5744;
}



const tlg_fm_vidioc_s_exts_ctrl: ref;

axiom tlg_fm_vidioc_s_exts_ctrl == $sub.ref(0, 468059);

procedure tlg_fm_vidioc_s_exts_ctrl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation tlg_fm_vidioc_s_exts_ctrl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i64;
  var $p34: ref;
  var $i35: i32;
  var $p38: ref;
  var $i39: i32;
  var $i40: i32;
  var $i41: i1;
  var $i11: i32;
  var $i7: i32;
  var vslice_dummy_var_193: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 838} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_5771;

  corral_source_split_5771:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_5772;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_5773;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 10158080);
    goto corral_source_split_5774;

  corral_source_split_5774:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_5780;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_5781;

  corral_source_split_5781:
    assume {:verifier.code 0} true;
    $i10 := $ult.i32(0, $i9);
    goto corral_source_split_5782;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5778;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_5784;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb8;

  $bb8:
    call $p12, $p13, $i14, $p16, $i17, $i18, $p19, $p20, $i21, $i22, $p23, $p24, $i25, $i26, $p27, $p28, $p29, $p30, $p31, $i32, $i33, $p34, $i35, $p38, $i39, $i40, $i41, $i11, vslice_dummy_var_193 := tlg_fm_vidioc_s_exts_ctrl_loop_$bb8($p0, $p2, $p3, $p8, $p12, $p13, $i14, $p16, $i17, $i18, $p19, $p20, $i21, $i22, $p23, $p24, $i25, $i26, $p27, $p28, $p29, $p30, $p31, $i32, $i33, $p34, $i35, $p38, $i39, $i40, $i41, $i11, vslice_dummy_var_193);
    goto $bb8_last;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_5788;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_5789;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i11);
    goto corral_source_split_5790;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    goto corral_source_split_5791;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p13, $mul.ref($i14, 24)), $mul.ref(0, 1));
    goto corral_source_split_5792;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_5793;

  corral_source_split_5793:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 10160496);
    goto corral_source_split_5794;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p13, $mul.ref($i14, 24)), $mul.ref(16, 1));
    goto corral_source_split_5802;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_5803;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_5804;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    $i22 := $sge.i32($i21, 0);
    goto corral_source_split_5805;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i39 := $add.i32($i11, 1);
    call {:si_unique_call 839} {:cexpr "i"} boogie_si_record_i32($i39);
    goto corral_source_split_5798;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p8);
    goto corral_source_split_5799;

  corral_source_split_5799:
    assume {:verifier.code 0} true;
    $i41 := $ult.i32($i39, $i40);
    goto corral_source_split_5800;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i41 == 1);
    goto corral_source_split_5827;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb20:
    assume $i41 == 1;
    assume {:verifier.code 0} true;
    $i11 := $i39;
    goto $bb20_dummy;

  $bb14:
    assume $i22 == 1;
    goto corral_source_split_5807;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p13, $mul.ref($i14, 24)), $mul.ref(16, 1));
    goto corral_source_split_5808;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_5809;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_5810;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    $i26 := $sle.i32($i25, 2);
    goto corral_source_split_5811;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb16;

  $bb17:
    assume $i26 == 1;
    goto corral_source_split_5813;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 336)), $mul.ref(296, 1));
    goto corral_source_split_5814;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_5815;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_5816;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p13, $mul.ref($i14, 24)), $mul.ref(16, 1));
    goto corral_source_split_5817;

  corral_source_split_5817:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_5818;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_5819;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i32);
    goto corral_source_split_5820;

  corral_source_split_5820:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref(preemphasis, $mul.ref(0, 12)), $mul.ref($i33, 4));
    goto corral_source_split_5821;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.28, $p34);
    call {:si_unique_call 840} {:cexpr "pre_emphasis"} boogie_si_record_i32($i35);
    goto corral_source_split_5822;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} vslice_dummy_var_193 := send_set_req($p29, 44, $i35, $p3);
    goto corral_source_split_5823;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p29, $mul.ref(0, 3864)), $mul.ref(928, 1)), $mul.ref(12, 1));
    goto corral_source_split_5824;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p38, $i35);
    goto corral_source_split_5825;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb10:
    assume $i18 == 1;
    goto corral_source_split_5796;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_5776;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb3;

  $bb20_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5786;
}



const tlg_fm_vidioc_querymenu: ref;

axiom tlg_fm_vidioc_querymenu == $sub.ref(0, 469091);

procedure tlg_fm_vidioc_querymenu($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tlg_fm_vidioc_querymenu($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5829;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} $i3 := v4l2_ctrl_query_menu($p2, $0.ref, $0.ref);
    call {:si_unique_call 843} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_5830;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const vidioc_g_audio___0: ref;

axiom vidioc_g_audio___0 == $sub.ref(0, 470123);

procedure vidioc_g_audio___0($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vidioc_g_audio___0($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var vslice_dummy_var_194: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5832;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(0, 1));
    goto corral_source_split_5833;

  corral_source_split_5833:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, 0);
    goto corral_source_split_5834;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(40, 1));
    goto corral_source_split_5835;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, 0);
    goto corral_source_split_5836;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(36, 1));
    goto corral_source_split_5837;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, 1);
    goto corral_source_split_5838;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(4, 1));
    goto corral_source_split_5839;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_5840;

  corral_source_split_5840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 844} vslice_dummy_var_194 := strcpy($p7, .str.82);
    goto corral_source_split_5841;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const vidioc_s_audio___0: ref;

axiom vidioc_s_audio___0 == $sub.ref(0, 471155);

procedure vidioc_s_audio___0($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vidioc_s_audio___0($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5843;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(0, 1));
    goto corral_source_split_5844;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_5845;

  corral_source_split_5845:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_5846;

  corral_source_split_5846:
    assume {:verifier.code 0} true;
    $i6 := (if $i5 == 1 then $sub.i32(0, 22) else 0);
    goto corral_source_split_5847;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const tlg_fm_vidioc_g_tuner: ref;

axiom tlg_fm_vidioc_g_tuner == $sub.ref(0, 472187);

procedure tlg_fm_vidioc_g_tuner($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.29, $M.3, $CurrAddr, assertsPassed;



implementation tlg_fm_vidioc_g_tuner($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $i38: i64;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $i43: i1;
  var $i33: i32;
  var $i34: i32;
  var $i45: i32;
  var $i46: i1;
  var $i48: i1;
  var $i49: i32;
  var $i47: i32;
  var $i44: i32;
  var $i32: i32;
  var $i50: i32;
  var $p51: ref;
  var $i52: i1;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $p56: ref;
  var $i57: i32;
  var $i58: i1;
  var $p59: ref;
  var $i60: i32;
  var $i61: i1;
  var $p62: ref;
  var $i63: i32;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $i67: i32;
  var $i68: i32;
  var $i69: i32;
  var $i70: i32;
  var $p71: ref;
  var $i17: i32;
  var vslice_dummy_var_195: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 845} $p3 := $alloc($mul.ref(20, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 846} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_5849;

  corral_source_split_5849:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_5850;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, 0);
    goto corral_source_split_5851;

  corral_source_split_5851:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 20)), $mul.ref(4, 1));
    goto corral_source_split_5852;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, 0);
    goto corral_source_split_5853;

  corral_source_split_5853:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_5854;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, 0);
    goto corral_source_split_5855;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 20)), $mul.ref(12, 1));
    goto corral_source_split_5856;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, 0);
    goto corral_source_split_5857;

  corral_source_split_5857:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 20)), $mul.ref(16, 1));
    goto corral_source_split_5858;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, 0);
    goto corral_source_split_5859;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 336)), $mul.ref(296, 1));
    goto corral_source_split_5860;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_5861;

  corral_source_split_5861:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_5862;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 84)), $mul.ref(0, 1));
    goto corral_source_split_5863;

  corral_source_split_5863:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_5864;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_5865;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 84)), $mul.ref(36, 1));
    goto corral_source_split_5871;

  corral_source_split_5871:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, 1);
    goto corral_source_split_5872;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 84)), $mul.ref(40, 1));
    goto corral_source_split_5873;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, 16);
    goto corral_source_split_5874;

  corral_source_split_5874:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 84)), $mul.ref(44, 1));
    goto corral_source_split_5875;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, 1216);
    goto corral_source_split_5876;

  corral_source_split_5876:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 84)), $mul.ref(48, 1));
    goto corral_source_split_5877;

  corral_source_split_5877:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, 1728);
    goto corral_source_split_5878;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 84)), $mul.ref(52, 1));
    goto corral_source_split_5879;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, 2);
    goto corral_source_split_5880;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 84)), $mul.ref(56, 1));
    goto corral_source_split_5881;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, 1);
    goto corral_source_split_5882;

  corral_source_split_5882:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 84)), $mul.ref(60, 1));
    goto corral_source_split_5883;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, 0);
    goto corral_source_split_5884;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 84)), $mul.ref(64, 1));
    goto corral_source_split_5885;

  corral_source_split_5885:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, 0);
    goto corral_source_split_5886;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p13, $mul.ref(0, 3864)), $mul.ref(16, 1));
    goto corral_source_split_5887;

  corral_source_split_5887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 848} ldv_mutex_lock_133($p26);
    goto SeqInstr_295, SeqInstr_296;

  SeqInstr_296:
    assume assertsPassed;
    goto SeqInstr_297;

  SeqInstr_297:
    goto corral_source_split_5888;

  corral_source_split_5888:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p3);
    goto corral_source_split_5889;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} $i28 := send_get_req($p13, 69, 4, $p27, $p4, 20);
    call {:si_unique_call 850} {:cexpr "ret"} boogie_si_record_i32($i28);
    goto corral_source_split_5890;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p3, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_5891;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_5892;

  corral_source_split_5892:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_5893;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    $i32 := $i28;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i50 := $i32;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_5924;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p13, $mul.ref(0, 3864)), $mul.ref(16, 1));
    goto corral_source_split_5925;

  corral_source_split_5925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 857} ldv_mutex_unlock_134($p51);
    goto SeqInstr_298, SeqInstr_299;

  SeqInstr_299:
    assume assertsPassed;
    goto SeqInstr_300;

  SeqInstr_300:
    goto corral_source_split_5926;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i50, 0);
    goto corral_source_split_5927;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb19, $bb21;

  $bb21:
    assume !($i52 == 1);
    goto corral_source_split_5932;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p4);
    goto corral_source_split_5933;

  corral_source_split_5933:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i53, 0);
    goto corral_source_split_5934;

  corral_source_split_5934:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i54 == 1);
    goto corral_source_split_5936;

  corral_source_split_5936:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p3, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_5937;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p56);
    goto corral_source_split_5938;

  corral_source_split_5938:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i57, 0);
    goto corral_source_split_5939;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb25, $bb27;

  $bb27:
    assume !($i58 == 1);
    goto corral_source_split_5945;

  corral_source_split_5945:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p3, $mul.ref(0, 20)), $mul.ref(4, 1));
    goto corral_source_split_5946;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.0, $p59);
    goto corral_source_split_5947;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i60, 0);
    goto corral_source_split_5948;

  corral_source_split_5948:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i61 == 1);
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p3, $mul.ref(0, 20)), $mul.ref(16, 1));
    goto corral_source_split_5950;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.0, $p66);
    goto corral_source_split_5951;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    $i68 := $mul.i32($i67, 255);
    goto corral_source_split_5952;

  corral_source_split_5952:
    assume {:verifier.code 0} true;
    $i69 := $udiv.i32($i68, 10);
    goto corral_source_split_5953;

  corral_source_split_5953:
    assume {:verifier.code 0} true;
    $i70 := $shl.i32($i69, 8);
    goto corral_source_split_5954;

  corral_source_split_5954:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p2, $mul.ref(0, 84)), $mul.ref(60, 1));
    goto corral_source_split_5955;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p71, $i70);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5869;

  corral_source_split_5869:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb28:
    assume {:verifier.code 0} true;
    assume $i61 == 1;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p3, $mul.ref(0, 20)), $mul.ref(16, 1));
    goto corral_source_split_5941;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p62);
    goto corral_source_split_5942;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    $i64 := $eq.i32($i63, 0);
    goto corral_source_split_5943;

  corral_source_split_5943:
    assume {:verifier.code 0} true;
    assume {:branchcond $i64} true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i64 == 1);
    goto $bb30;

  $bb31:
    assume $i64 == 1;
    goto corral_source_split_5957;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p2, $mul.ref(0, 84)), $mul.ref(60, 1));
    goto corral_source_split_5958;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p65, 65535);
    goto corral_source_split_5959;

  corral_source_split_5959:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i58 == 1;
    goto $bb26;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i54 == 1;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p2, $mul.ref(0, 84)), $mul.ref(60, 1));
    goto corral_source_split_5929;

  corral_source_split_5929:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p55, 0);
    goto corral_source_split_5930;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i52 == 1;
    goto $bb20;

  SeqInstr_298:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i31 == 1;
    goto corral_source_split_5895;

  corral_source_split_5895:
    assume {:verifier.code 0} true;
    $i33, $i34 := 5, $i28;
    goto $bb8;

  $bb8:
    call $p35, $p36, $i37, $i38, $p40, $i41, $i42, $i43, $i33, $i34, $i45, $i46, $i48, $i49, $i47, $i44, vslice_dummy_var_195 := tlg_fm_vidioc_g_tuner_loop_$bb8($p3, $p4, $p5, $p13, $p29, $p35, $p36, $i37, $i38, $p40, $i41, $i42, $i43, $i33, $i34, $i45, $i46, $i48, $i49, $i47, $i44, vslice_dummy_var_195);
    goto $bb8_last;

  corral_source_split_5897:
    assume {:verifier.code 0} true;
    $i45 := $sub.i32($i33, 1);
    call {:si_unique_call 851} {:cexpr "count"} boogie_si_record_i32($i45);
    goto corral_source_split_5898;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i33, 0);
    goto corral_source_split_5899;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    $i47 := $i34;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_5918;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    $i50 := $i47;
    goto $bb17;

  $bb13:
    assume $i46 == 1;
    goto corral_source_split_5915;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i34, 0);
    goto corral_source_split_5916;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    $i49 := $i34;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_5922;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    $i50 := $i49;
    goto $bb17;

  $bb15:
    assume $i48 == 1;
    goto corral_source_split_5920;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $M.29 := $store.i64($M.29, $p5, 1);
    goto corral_source_split_5901;

  corral_source_split_5901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} $p35 := get_current();
    goto corral_source_split_5902;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 9568)), $mul.ref(0, 1));
    goto corral_source_split_5903;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    $i37 := $load.i64($M.29, $p5);
    call {:si_unique_call 853} $i38 := devirtbounce(0, $p36, $i37, $p36);
    goto corral_source_split_5904;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    $M.29 := $store.i64($M.29, $p5, $i38);
    goto corral_source_split_5905;

  corral_source_split_5905:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 854} vslice_dummy_var_195 := schedule_timeout(250);
    goto corral_source_split_5907;

  corral_source_split_5907:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p3);
    goto corral_source_split_5908;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 855} $i41 := send_get_req($p13, 69, 4, $p40, $p4, 20);
    call {:si_unique_call 856} {:cexpr "ret"} boogie_si_record_i32($i41);
    goto corral_source_split_5909;

  corral_source_split_5909:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p29);
    goto corral_source_split_5910;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_5911;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    $i44 := $i41;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_5913;

  corral_source_split_5913:
    assume {:verifier.code 0} true;
    $i32 := $i44;
    goto $bb7;

  $bb11:
    assume $i43 == 1;
    assume {:verifier.code 0} true;
    $i33, $i34 := $i45, $i41;
    goto $bb11_dummy;

  SeqInstr_295:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_5867;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 22);
    goto $bb3;

  $bb11_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5897;
}



const vidioc_s_tuner___0: ref;

axiom vidioc_s_tuner___0 == $sub.ref(0, 473219);

procedure vidioc_s_tuner___0($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vidioc_s_tuner___0($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5961;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 84)), $mul.ref(0, 1));
    goto corral_source_split_5962;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_5963;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_5964;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    $i6 := (if $i5 == 1 then $sub.i32(0, 22) else 0);
    goto corral_source_split_5965;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const fm_get_freq: ref;

axiom fm_get_freq == $sub.ref(0, 474251);

procedure fm_get_freq($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation fm_get_freq($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5967;

  corral_source_split_5967:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 336)), $mul.ref(296, 1));
    goto corral_source_split_5968;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5969;

  corral_source_split_5969:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_5970;

  corral_source_split_5970:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 3864)), $mul.ref(928, 1)), $mul.ref(0, 1));
    goto corral_source_split_5971;

  corral_source_split_5971:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_5972;

  corral_source_split_5972:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_5973;

  corral_source_split_5973:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, $i8);
    goto corral_source_split_5974;

  corral_source_split_5974:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const fm_set_freq: ref;

axiom fm_set_freq == $sub.ref(0, 475283);

procedure fm_set_freq($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.30, $M.3, $CurrAddr, assertsPassed;



implementation fm_set_freq($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5976;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 336)), $mul.ref(296, 1));
    goto corral_source_split_5977;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5978;

  corral_source_split_5978:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_5979;

  corral_source_split_5979:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 3864)), $mul.ref(3744, 1));
    goto corral_source_split_5980;

  corral_source_split_5980:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, $p0);
    goto corral_source_split_5981;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p5, $mul.ref(0, 3864)), $mul.ref(3752, 1));
    goto corral_source_split_5982;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_5983;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, pm_fm_suspend);
    goto corral_source_split_5984;

  corral_source_split_5984:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 3864)), $mul.ref(3760, 1));
    goto corral_source_split_5985;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_5986;

  corral_source_split_5986:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, pm_fm_resume);
    goto corral_source_split_5987;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_5988;

  corral_source_split_5988:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_5989;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 858} $i13 := set_frequency___0($p5, $i12);
    goto SeqInstr_301, SeqInstr_302;

  SeqInstr_302:
    assume assertsPassed;
    goto SeqInstr_303;

  SeqInstr_303:
    call {:si_unique_call 859} {:cexpr "tmp"} boogie_si_record_i32($i13);
    goto corral_source_split_5990;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  SeqInstr_301:
    assume !assertsPassed;
    return;
}



const pm_fm_suspend: ref;

axiom pm_fm_suspend == $sub.ref(0, 476315);

procedure pm_fm_suspend($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation pm_fm_suspend($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $p6: ref;
  var $p7: ref;
  var vslice_dummy_var_196: i32;
  var vslice_dummy_var_197: i32;
  var vslice_dummy_var_198: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5992;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    $i1 := $M.2;
    goto corral_source_split_5993;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 16);
    goto corral_source_split_5994;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_5995;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 861} vslice_dummy_var_197 := pm_alsa_suspend($p0);
    goto corral_source_split_6000;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(512, 1));
    goto corral_source_split_6001;

  corral_source_split_6001:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_6002;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} vslice_dummy_var_198 := usb_set_interface($p7, 0, 0);
    goto corral_source_split_6003;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 863} msleep(300);
    goto corral_source_split_6004;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5997;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 860} vslice_dummy_var_196 := printk.ref.ref.i32(.str, .str.84, 158);
    goto corral_source_split_5998;

  corral_source_split_5998:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pm_fm_resume: ref;

axiom pm_fm_resume == $sub.ref(0, 477347);

procedure pm_fm_resume($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.27, $M.0, $M.30, $CurrAddr, $M.3, assertsPassed;



implementation pm_fm_resume($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $p7: ref;
  var $i8: i32;
  var vslice_dummy_var_199: i32;
  var vslice_dummy_var_200: i32;
  var vslice_dummy_var_201: i32;
  var vslice_dummy_var_202: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6006;

  corral_source_split_6006:
    assume {:verifier.code 0} true;
    $i1 := $M.2;
    goto corral_source_split_6007;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 16);
    goto corral_source_split_6008;

  corral_source_split_6008:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_6009;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 865} vslice_dummy_var_200 := poseidon_check_mode_radio($p0);
    goto corral_source_split_6014;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(928, 1)), $mul.ref(0, 1));
    goto corral_source_split_6015;

  corral_source_split_6015:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_6016;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} vslice_dummy_var_201 := set_frequency___0($p0, $i8);
    goto SeqInstr_304, SeqInstr_305;

  SeqInstr_305:
    assume assertsPassed;
    goto SeqInstr_306;

  SeqInstr_306:
    goto corral_source_split_6017;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 867} vslice_dummy_var_202 := pm_alsa_resume($p0);
    goto corral_source_split_6018;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_304:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6011;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 864} vslice_dummy_var_199 := printk.ref.ref.i32(.str, .str.85, 167);
    goto corral_source_split_6012;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const set_frequency___0: ref;

axiom set_frequency___0 == $sub.ref(0, 478379);

procedure set_frequency___0($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.30, $M.3, $CurrAddr, assertsPassed;



implementation set_frequency___0($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i27: i32;
  var $p29: ref;
  var $i30: i32;
  var $p32: ref;
  var $i13: i32;
  var $p33: ref;
  var vslice_dummy_var_203: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 869} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 870} {:cexpr "set_frequency___0:arg:frequency"} boogie_si_record_i32($i1);
    goto corral_source_split_6020;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(16, 1));
    goto corral_source_split_6021;

  corral_source_split_6021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 871} ldv_mutex_lock_135($p4);
    goto SeqInstr_307, SeqInstr_308;

  SeqInstr_308:
    assume assertsPassed;
    goto SeqInstr_309;

  SeqInstr_309:
    goto corral_source_split_6022;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(928, 1)), $mul.ref(12, 1));
    goto corral_source_split_6023;

  corral_source_split_6023:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_6024;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 872} $i8 := send_set_req($p0, 44, $i7, $p2);
    call {:si_unique_call 873} {:cexpr "ret"} boogie_si_record_i32($i8);
    goto corral_source_split_6025;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    $i9 := $mul.i32($i1, 62500);
    goto corral_source_split_6026;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    $i10 := $udiv.i32($i9, 1000);
    call {:si_unique_call 874} {:cexpr "freq"} boogie_si_record_i32($i10);
    goto corral_source_split_6027;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    $i11 := $ule.i32($i10, 75999);
    goto corral_source_split_6028;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i11 == 1);
    goto corral_source_split_6030;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    $i12 := $ugt.i32($i10, 108000);
    goto corral_source_split_6031;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} $i14 := send_set_req($p0, 18, $i10, $p2);
    call {:si_unique_call 877} {:cexpr "ret"} boogie_si_record_i32($i14);
    goto corral_source_split_6037;

  corral_source_split_6037:
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i14, 0);
    goto corral_source_split_6038;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 878} $i16 := send_set_req($p0, 67, 0, $p2);
    call {:si_unique_call 879} {:cexpr "ret"} boogie_si_record_i32($i16);
    goto corral_source_split_6042;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    $M.30 := $store.i64($M.30, $p3, 1);
    goto corral_source_split_6043;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} $p17 := get_current();
    goto corral_source_split_6044;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 9568)), $mul.ref(0, 1));
    goto corral_source_split_6045;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    $i19 := $load.i64($M.30, $p3);
    call {:si_unique_call 881} $i20 := devirtbounce(0, $p18, $i19, $p18);
    goto corral_source_split_6046;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    $M.30 := $store.i64($M.30, $p3, $i20);
    goto corral_source_split_6047;

  corral_source_split_6047:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} vslice_dummy_var_203 := schedule_timeout(62);
    goto corral_source_split_6049;

  corral_source_split_6049:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(928, 1)), $mul.ref(8, 1));
    goto corral_source_split_6050;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_6051;

  corral_source_split_6051:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 0);
    goto corral_source_split_6052;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i30 := $i16;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_6060;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(928, 1)), $mul.ref(0, 1));
    goto corral_source_split_6061;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, $i1);
    goto corral_source_split_6062;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    $i13 := $i30;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_6033;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(16, 1));
    goto corral_source_split_6034;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 875} ldv_mutex_unlock_136($p33);
    goto SeqInstr_310, SeqInstr_311;

  SeqInstr_311:
    assume assertsPassed;
    goto SeqInstr_312;

  SeqInstr_312:
    goto corral_source_split_6035;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  SeqInstr_310:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i25 == 1;
    goto corral_source_split_6054;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 883} $i26 := send_set_req($p0, 67, 0, $p2);
    call {:si_unique_call 884} {:cexpr "ret"} boogie_si_record_i32($i26);
    goto corral_source_split_6055;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} $i27 := send_set_req($p0, 68, 1, $p2);
    call {:si_unique_call 886} {:cexpr "ret"} boogie_si_record_i32($i27);
    goto corral_source_split_6056;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(928, 1)), $mul.ref(8, 1));
    goto corral_source_split_6057;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, 1);
    goto corral_source_split_6058;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    $i30 := $i27;
    goto $bb14;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_6040;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    $i13 := $i14;
    goto $bb6;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb2;

  SeqInstr_307:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_135: ref;

axiom ldv_mutex_lock_135 == $sub.ref(0, 479411);

procedure ldv_mutex_lock_135($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_lock_135($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6064;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 887} ldv_mutex_lock_lock_of_poseidon($p0);
    goto SeqInstr_313, SeqInstr_314;

  SeqInstr_314:
    assume assertsPassed;
    goto SeqInstr_315;

  SeqInstr_315:
    goto corral_source_split_6065;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} mutex_lock($p0);
    goto corral_source_split_6066;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_313:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_136: ref;

axiom ldv_mutex_unlock_136 == $sub.ref(0, 480443);

procedure ldv_mutex_unlock_136($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_unlock_136($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6068;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 889} ldv_mutex_unlock_lock_of_poseidon($p0);
    goto SeqInstr_316, SeqInstr_317;

  SeqInstr_317:
    assume assertsPassed;
    goto SeqInstr_318;

  SeqInstr_318:
    goto corral_source_split_6069;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} mutex_unlock($p0);
    goto corral_source_split_6070;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_316:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_133: ref;

axiom ldv_mutex_lock_133 == $sub.ref(0, 481475);

procedure ldv_mutex_lock_133($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_lock_133($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6072;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 891} ldv_mutex_lock_lock_of_poseidon($p0);
    goto SeqInstr_319, SeqInstr_320;

  SeqInstr_320:
    assume assertsPassed;
    goto SeqInstr_321;

  SeqInstr_321:
    goto corral_source_split_6073;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} mutex_lock($p0);
    goto corral_source_split_6074;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_319:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_134: ref;

axiom ldv_mutex_unlock_134 == $sub.ref(0, 482507);

procedure ldv_mutex_unlock_134($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_unlock_134($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6076;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} ldv_mutex_unlock_lock_of_poseidon($p0);
    goto SeqInstr_322, SeqInstr_323;

  SeqInstr_323:
    assume assertsPassed;
    goto SeqInstr_324;

  SeqInstr_324:
    goto corral_source_split_6077;

  corral_source_split_6077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 894} mutex_unlock($p0);
    goto corral_source_split_6078;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_322:
    assume !assertsPassed;
    return;
}



const v4l2_ctrl_query_menu: ref;

axiom v4l2_ctrl_query_menu == $sub.ref(0, 483539);

procedure v4l2_ctrl_query_menu($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation v4l2_ctrl_query_menu($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6080;

  corral_source_split_6080:
    assume {:verifier.code 1} true;
    call {:si_unique_call 895} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 896} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_6081;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const v4l2_ctrl_query_fill: ref;

axiom v4l2_ctrl_query_fill == $sub.ref(0, 484571);

procedure v4l2_ctrl_query_fill($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation v4l2_ctrl_query_fill($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 897} {:cexpr "v4l2_ctrl_query_fill:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 898} {:cexpr "v4l2_ctrl_query_fill:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 899} {:cexpr "v4l2_ctrl_query_fill:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 900} {:cexpr "v4l2_ctrl_query_fill:arg:arg4"} boogie_si_record_i32($i4);
    goto corral_source_split_6083;

  corral_source_split_6083:
    assume {:verifier.code 1} true;
    call {:si_unique_call 901} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 902} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    goto corral_source_split_6084;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const strlcpy: ref;

axiom strlcpy == $sub.ref(0, 485603);

procedure strlcpy($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation strlcpy($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 903} {:cexpr "strlcpy:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_6086;

  corral_source_split_6086:
    assume {:verifier.code 1} true;
    call {:si_unique_call 904} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 905} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_6087;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const pm_notifier_block: ref;

axiom pm_notifier_block == $sub.ref(0, 486635);

procedure pm_notifier_block($p0: ref, $i1: i64, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.31, assertsPassed;



implementation pm_notifier_block($p0: ref, $i1: i64, $p2: ref) returns ($r: i32)
{
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $p9: ref;
  var $p10: ref;
  var vslice_dummy_var_204: i32;
  var vslice_dummy_var_205: i32;

  $bb0:
    call {:si_unique_call 906} {:cexpr "pm_notifier_block:arg:event"} boogie_si_record_i64($i1);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 911} vslice_dummy_var_205 := printk.ref.ref.i32.i64(.str.86, .str.87, 266, $i1);
    goto corral_source_split_6120;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb2:
    assume $i3 == 1;
    goto corral_source_split_6089;

  corral_source_split_6089:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, pd_device_list);
    goto corral_source_split_6090;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6091;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_6092;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p4);
    goto corral_source_split_6093;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, $p2i.ref.i64(pd_device_list));
    goto corral_source_split_6094;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_6096;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    $p9, $p10 := $p6, $p4;
    goto $bb7;

  $bb7:
    call $p11, $p12, $p13, $p14, $p15, $i16, $i17, $p19, $p20, $p21, $i22, $i23, $p9, $p10, vslice_dummy_var_204 := pm_notifier_block_loop_$bb7($p11, $p12, $p13, $p14, $p15, $i16, $i17, $p19, $p20, $p21, $i22, $i23, $p9, $p10, vslice_dummy_var_204);
    goto $bb7_last;

  corral_source_split_6098:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_6100;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 3864)), $mul.ref(512, 1));
    goto corral_source_split_6101;

  corral_source_split_6101:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_6102;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p11, $mul.ref(0, 3864)), $mul.ref(520, 1));
    goto corral_source_split_6103;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_6104;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 907} $i16 := usb_lock_device_for_reset($p13, $p15);
    call {:si_unique_call 908} {:cexpr "rc"} boogie_si_record_i32($i16);
    goto corral_source_split_6105;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    $i17 := $sge.i32($i16, 0);
    goto corral_source_split_6106;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p9, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6113;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_6114;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p9);
    goto corral_source_split_6115;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, $p2i.ref.i64(pd_device_list));
    goto corral_source_split_6116;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i23 == 1);
    goto corral_source_split_6118;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb12:
    assume $i23 == 1;
    assume {:verifier.code 0} true;
    $p9, $p10 := $p21, $p9;
    goto $bb12_dummy;

  $bb9:
    assume $i17 == 1;
    goto corral_source_split_6108;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 909} vslice_dummy_var_204 := usb_reset_device($p13);
    goto corral_source_split_6109;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p13, $mul.ref(0, 1904)), $mul.ref(136, 1));
    goto corral_source_split_6110;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 910} device_unlock($p19);
    goto SeqInstr_325, SeqInstr_326;

  SeqInstr_326:
    assume assertsPassed;
    goto SeqInstr_327;

  SeqInstr_327:
    goto corral_source_split_6111;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    goto $bb11;

  SeqInstr_325:
    assume !assertsPassed;
    return;

  $bb12_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6098;
}



const usb_lock_device_for_reset: ref;

axiom usb_lock_device_for_reset == $sub.ref(0, 487667);

procedure usb_lock_device_for_reset($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_lock_device_for_reset($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6122;

  corral_source_split_6122:
    assume {:verifier.code 1} true;
    call {:si_unique_call 912} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 913} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_6123;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const usb_reset_device: ref;

axiom usb_reset_device == $sub.ref(0, 488699);

procedure usb_reset_device($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_reset_device($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6125;

  corral_source_split_6125:
    assume {:verifier.code 1} true;
    call {:si_unique_call 914} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 915} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_6126;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const device_unlock: ref;

axiom device_unlock == $sub.ref(0, 489731);

procedure device_unlock($p0: ref);
  free requires assertsPassed;
  modifies $M.31, assertsPassed;



implementation device_unlock($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6128;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1088)), $mul.ref(96, 1));
    goto corral_source_split_6129;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 916} ldv_mutex_unlock_155($p1);
    goto SeqInstr_328, SeqInstr_329;

  SeqInstr_329:
    assume assertsPassed;
    goto SeqInstr_330;

  SeqInstr_330:
    goto corral_source_split_6130;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_328:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_155: ref;

axiom ldv_mutex_unlock_155 == $sub.ref(0, 490763);

procedure ldv_mutex_unlock_155($p0: ref);
  free requires assertsPassed;
  modifies $M.31, assertsPassed;



implementation ldv_mutex_unlock_155($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6132;

  corral_source_split_6132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 917} ldv_mutex_unlock_mutex_of_device($p0);
    goto SeqInstr_331, SeqInstr_332;

  SeqInstr_332:
    assume assertsPassed;
    goto SeqInstr_333;

  SeqInstr_333:
    goto corral_source_split_6133;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 918} mutex_unlock($p0);
    goto corral_source_split_6134;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_331:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_mutex_of_device: ref;

axiom ldv_mutex_unlock_mutex_of_device == $sub.ref(0, 491795);

procedure ldv_mutex_unlock_mutex_of_device($p0: ref);
  free requires assertsPassed;
  modifies $M.31, assertsPassed;



implementation ldv_mutex_unlock_mutex_of_device($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6136;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    $i1 := $M.31;
    goto corral_source_split_6137;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 2);
    goto corral_source_split_6138;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_6142;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 919} ldv_error();
    goto SeqInstr_334, SeqInstr_335;

  SeqInstr_335:
    assume assertsPassed;
    goto SeqInstr_336;

  SeqInstr_336:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.31 := 1;
    call {:si_unique_call 920} {:cexpr "ldv_mutex_mutex_of_device"} boogie_si_record_i32(1);
    goto corral_source_split_6144;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_334:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_6140;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const poseidon_probe: ref;

axiom poseidon_probe == $sub.ref(0, 492827);

procedure poseidon_probe($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.32, $M.0, $M.36, $CurrAddr, $M.37, $M.41;



implementation poseidon_probe($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i1;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $p32: ref;
  var $p33: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p42: ref;
  var $i43: i32;
  var $i44: i32;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p58: ref;
  var $i59: i32;
  var $i60: i1;
  var $p61: ref;
  var $p62: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p68: ref;
  var $p70: ref;
  var $p72: ref;
  var $p73: ref;
  var $i10: i32;
  var cmdloc_dummy_var_47: [ref]i8;
  var cmdloc_dummy_var_48: [ref]i8;
  var cmdloc_dummy_var_49: [ref]i8;
  var vslice_dummy_var_206: i1;
  var vslice_dummy_var_207: i32;
  var vslice_dummy_var_208: i32;
  var vslice_dummy_var_209: i32;
  var vslice_dummy_var_210: i32;
  var vslice_dummy_var_211: i32;
  var vslice_dummy_var_212: i32;
  var vslice_dummy_var_213: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 921} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 922} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 923} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_6146;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 925} $p6 := interface_to_usbdev($p0);
    goto corral_source_split_6147;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    $M.32 := $store.i32($M.32, $p2, 0);
    goto corral_source_split_6148;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 926} vslice_dummy_var_206 := check_firmware($p6, $p2);
    goto corral_source_split_6149;

  corral_source_split_6149:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.32, $p2);
    goto corral_source_split_6150;

  corral_source_split_6150:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_6151;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 927} $p11 := find_old_poseidon($p6);
    goto corral_source_split_6157;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_6158;

  corral_source_split_6158:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_6159;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $p19, $i20 := $p11, 0;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6173;

  corral_source_split_6173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 931} $p21 := usb_get_dev($p6);
    goto corral_source_split_6174;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p19, $mul.ref(0, 3864)), $mul.ref(512, 1));
    goto corral_source_split_6175;

  corral_source_split_6175:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p22, $p21);
    goto corral_source_split_6176;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 932} $p23 := usb_get_intf($p0);
    goto corral_source_split_6177;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p19, $mul.ref(0, 3864)), $mul.ref(520, 1));
    goto corral_source_split_6178;

  corral_source_split_6178:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p24, $p23);
    goto corral_source_split_6179;

  corral_source_split_6179:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p19);
    goto corral_source_split_6180;

  corral_source_split_6180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 933} usb_set_intfdata($p0, $p25);
    goto corral_source_split_6181;

  corral_source_split_6181:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i20, 0);
    goto corral_source_split_6182;

  corral_source_split_6182:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p6, $mul.ref(0, 1904)), $mul.ref(136, 1));
    goto corral_source_split_6215;

  corral_source_split_6215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 945} vslice_dummy_var_212 := device_init_wakeup($p50, 1);
    goto corral_source_split_6216;

  corral_source_split_6216:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p19, $mul.ref(0, 3864)), $mul.ref(512, 1));
    goto corral_source_split_6217;

  corral_source_split_6217:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_6218;

  corral_source_split_6218:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p53, $mul.ref(0, 1904)), $mul.ref(136, 1));
    goto corral_source_split_6219;

  corral_source_split_6219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 946} pm_runtime_set_autosuspend_delay($p54, 3000);
    goto corral_source_split_6220;

  corral_source_split_6220:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p19, $mul.ref(0, 3864)), $mul.ref(512, 1));
    goto corral_source_split_6221;

  corral_source_split_6221:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_6222;

  corral_source_split_6222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 947} usb_enable_autosuspend($p56);
    goto corral_source_split_6223;

  corral_source_split_6223:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 3864)), $mul.ref(3768, 1)), $mul.ref(0, 1));
    goto corral_source_split_6224;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    goto corral_source_split_6225;

  corral_source_split_6225:
    assume {:verifier.code 0} true;
    $i60 := $eq.i32($i59, 1);
    goto corral_source_split_6226;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6155;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb17:
    assume $i60 == 1;
    goto corral_source_split_6228;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p19, $mul.ref(0, 3864)), $mul.ref(3776, 1));
    goto corral_source_split_6229;

  corral_source_split_6229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 948} __init_work($p61, 0);
    goto corral_source_split_6230;

  corral_source_split_6230:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_6231;

  corral_source_split_6231:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p62, 2097664);
    goto corral_source_split_6232;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 3864)), $mul.ref(3776, 1)), $mul.ref(0, 1));
    goto corral_source_split_6233;

  corral_source_split_6233:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p64);
    goto corral_source_split_6234;

  corral_source_split_6234:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p5);
    goto corral_source_split_6235;

  corral_source_split_6235:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_47 := $M.0;
    cmdloc_dummy_var_48 := $M.0;
    call {:si_unique_call 949} cmdloc_dummy_var_49 := $memcpy.i8(cmdloc_dummy_var_47, cmdloc_dummy_var_48, $p65, $p66, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_49;
    goto corral_source_split_6236;

  corral_source_split_6236:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 3864)), $mul.ref(3776, 1)), $mul.ref(32, 1));
    goto corral_source_split_6237;

  corral_source_split_6237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 950} lockdep_init_map($p68, .str.91, $p4, 0);
    goto corral_source_split_6238;

  corral_source_split_6238:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 3864)), $mul.ref(3776, 1)), $mul.ref(8, 1));
    goto corral_source_split_6239;

  corral_source_split_6239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 951} INIT_LIST_HEAD($p70);
    goto corral_source_split_6240;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 3864)), $mul.ref(3776, 1)), $mul.ref(24, 1));
    goto corral_source_split_6241;

  corral_source_split_6241:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p72, hibernation_resume);
    goto corral_source_split_6242;

  corral_source_split_6242:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p19, $mul.ref(0, 3864)), $mul.ref(3776, 1));
    goto corral_source_split_6243;

  corral_source_split_6243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 952} vslice_dummy_var_213 := schedule_work($p73);
    goto corral_source_split_6244;

  corral_source_split_6244:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb11:
    assume $i26 == 1;
    goto corral_source_split_6184;

  corral_source_split_6184:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(48, 1));
    goto corral_source_split_6185;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    $i28 := $M.2;
    goto corral_source_split_6186;

  corral_source_split_6186:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, 16);
    goto corral_source_split_6187;

  corral_source_split_6187:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_6188;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p19, $mul.ref(0, 3864)), $mul.ref(16, 1));
    goto corral_source_split_6193;

  corral_source_split_6193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 935} __mutex_init($p32, .str.89, $p3);
    goto corral_source_split_6194;

  corral_source_split_6194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 936} $p33 := dev_name($p27);
    goto corral_source_split_6195;

  corral_source_split_6195:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 3864)), $mul.ref(192, 1)), $mul.ref(96, 1));
    goto corral_source_split_6196;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    $p37 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(48, 1)), $mul.ref(272, 1));
    goto corral_source_split_6197;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_6198;

  corral_source_split_6198:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 104)), $mul.ref(0, 1));
    goto corral_source_split_6199;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_6200;

  corral_source_split_6200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 937} vslice_dummy_var_208 := snprintf.ref.i64.ref.ref.ref($p36, 36, .str.90, $p40, $p33);
    goto corral_source_split_6201;

  corral_source_split_6201:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p19, $mul.ref(0, 3864)), $mul.ref(192, 1));
    goto corral_source_split_6202;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} $i43 := v4l2_device_register($0.ref, $p42);
    goto corral_source_split_6203;

  corral_source_split_6203:
    assume {:verifier.code 0} true;
    $M.32 := $store.i32($M.32, $p2, $i43);
    goto corral_source_split_6204;

  corral_source_split_6204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 939} $i44 := pd_video_init($p19);
    goto corral_source_split_6205;

  corral_source_split_6205:
    assume {:verifier.code 0} true;
    $M.32 := $store.i32($M.32, $p2, $i44);
    goto corral_source_split_6206;

  corral_source_split_6206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 940} vslice_dummy_var_209 := poseidon_audio_init($p19);
    goto corral_source_split_6207;

  corral_source_split_6207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 941} vslice_dummy_var_210 := poseidon_fm_init($p19);
    goto corral_source_split_6208;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} vslice_dummy_var_211 := pd_dvb_usb_device_init($p19);
    goto corral_source_split_6209;

  corral_source_split_6209:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p19, $mul.ref(0, 3864)), $mul.ref(0, 1));
    goto corral_source_split_6210;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 943} INIT_LIST_HEAD($p48);
    goto corral_source_split_6211;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p19, $mul.ref(0, 3864)), $mul.ref(0, 1));
    goto corral_source_split_6212;

  corral_source_split_6212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 944} list_add_tail($p49, pd_device_list);
    goto corral_source_split_6213;

  corral_source_split_6213:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i30 == 1;
    goto corral_source_split_6190;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 934} vslice_dummy_var_207 := printk.ref.ref.i32(.str, .str.88, 532);
    goto corral_source_split_6191;

  corral_source_split_6191:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_6161;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 928} $p14 := kzalloc(3864, 208);
    goto corral_source_split_6162;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_6163;

  corral_source_split_6163:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_6164;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i16, 0);
    goto corral_source_split_6165;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p15, $mul.ref(0, 3864)), $mul.ref(184, 1));
    goto corral_source_split_6169;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 929} kref_init($p18);
    goto corral_source_split_6170;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 930} set_map_flags($p15, $p6);
    goto corral_source_split_6171;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    $p19, $i20 := $p14, 1;
    goto $bb10;

  $bb7:
    assume $i17 == 1;
    goto corral_source_split_6167;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 12);
    goto $bb3;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_6153;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;
}



const poseidon_disconnect: ref;

axiom poseidon_disconnect == $sub.ref(0, 493859);

procedure poseidon_disconnect($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.33, assertsPassed, $CurrAddr;



implementation poseidon_disconnect($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $p19: ref;
  var $p20: ref;
  var $p23: ref;
  var vslice_dummy_var_214: i32;
  var vslice_dummy_var_215: i32;
  var vslice_dummy_var_216: i32;
  var vslice_dummy_var_217: i32;
  var vslice_dummy_var_218: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6246;

  corral_source_split_6246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 953} $p1 := get_pd($p0);
    goto corral_source_split_6247;

  corral_source_split_6247:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_6248;

  corral_source_split_6248:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_6249;

  corral_source_split_6249:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i4 := $M.2;
    goto corral_source_split_6253;

  corral_source_split_6253:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 16);
    goto corral_source_split_6254;

  corral_source_split_6254:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_6255;

  corral_source_split_6255:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 3864)), $mul.ref(3768, 1)), $mul.ref(0, 1));
    goto corral_source_split_6260;

  corral_source_split_6260:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_6261;

  corral_source_split_6261:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 1);
    goto corral_source_split_6262;

  corral_source_split_6262:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 3864)), $mul.ref(16, 1));
    goto corral_source_split_6266;

  corral_source_split_6266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 955} ldv_mutex_lock_159($p12);
    goto SeqInstr_337, SeqInstr_338;

  SeqInstr_338:
    assume assertsPassed;
    goto SeqInstr_339;

  SeqInstr_339:
    goto corral_source_split_6267;

  corral_source_split_6267:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 3864)), $mul.ref(3736, 1));
    goto corral_source_split_6268;

  corral_source_split_6268:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_6269;

  corral_source_split_6269:
    assume {:verifier.code 0} true;
    $i15 := $or.i32($i14, 128);
    goto corral_source_split_6270;

  corral_source_split_6270:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 3864)), $mul.ref(3736, 1));
    goto corral_source_split_6271;

  corral_source_split_6271:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, $i15);
    goto corral_source_split_6272;

  corral_source_split_6272:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 3864)), $mul.ref(16, 1));
    goto corral_source_split_6273;

  corral_source_split_6273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} ldv_mutex_unlock_160($p17);
    goto SeqInstr_340, SeqInstr_341;

  SeqInstr_341:
    assume assertsPassed;
    goto SeqInstr_342;

  SeqInstr_342:
    goto corral_source_split_6274;

  corral_source_split_6274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 957} vslice_dummy_var_215 := stop_all_video_stream($p1);
    goto SeqInstr_343, SeqInstr_344;

  SeqInstr_344:
    assume assertsPassed;
    goto SeqInstr_345;

  SeqInstr_345:
    goto corral_source_split_6275;

  corral_source_split_6275:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 3864)), $mul.ref(952, 1));
    goto corral_source_split_6276;

  corral_source_split_6276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} dvb_stop_streaming($p19);
    goto SeqInstr_346, SeqInstr_347;

  SeqInstr_347:
    assume assertsPassed;
    goto SeqInstr_348;

  SeqInstr_348:
    goto corral_source_split_6277;

  corral_source_split_6277:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 3864)), $mul.ref(192, 1));
    goto corral_source_split_6278;

  corral_source_split_6278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 959} v4l2_device_unregister($p20);
    goto corral_source_split_6279;

  corral_source_split_6279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 960} pd_dvb_usb_device_exit($p1);
    goto corral_source_split_6280;

  corral_source_split_6280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 961} vslice_dummy_var_216 := poseidon_fm_exit($p1);
    goto corral_source_split_6281;

  corral_source_split_6281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} vslice_dummy_var_217 := poseidon_audio_free($p1);
    goto corral_source_split_6282;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 963} pd_video_exit($p1);
    goto corral_source_split_6283;

  corral_source_split_6283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 964} usb_set_intfdata($p0, $0.ref);
    goto corral_source_split_6284;

  corral_source_split_6284:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 3864)), $mul.ref(184, 1));
    goto corral_source_split_6285;

  corral_source_split_6285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 965} vslice_dummy_var_218 := kref_put($p23, poseidon_delete);
    goto corral_source_split_6286;

  corral_source_split_6286:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_346:
    assume !assertsPassed;
    return;

  SeqInstr_343:
    assume !assertsPassed;
    return;

  SeqInstr_340:
    assume !assertsPassed;
    return;

  SeqInstr_337:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i11 == 1;
    goto corral_source_split_6264;

  corral_source_split_6264:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i6 == 1;
    goto corral_source_split_6257;

  corral_source_split_6257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 954} vslice_dummy_var_214 := printk.ref.ref.i32(.str, .str.104, 570);
    goto corral_source_split_6258;

  corral_source_split_6258:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6251;

  corral_source_split_6251:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const poseidon_suspend: ref;

axiom poseidon_suspend == $sub.ref(0, 494891);

procedure poseidon_suspend($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.25, $M.27, $CurrAddr, $M.3, $M.4, $M.30, assertsPassed, $M.31;



implementation poseidon_suspend($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i32;
  var $i7: i32;
  var cmdloc_dummy_var_50: [ref]i8;
  var cmdloc_dummy_var_51: [ref]i8;
  var cmdloc_dummy_var_52: [ref]i8;
  var vslice_dummy_var_219: i32;
  var vslice_dummy_var_220: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, $i1);
    goto corral_source_split_6288;

  corral_source_split_6288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 967} $p4 := get_pd($p0);
    goto corral_source_split_6289;

  corral_source_split_6289:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_6290;

  corral_source_split_6290:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_6291;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} $i8 := is_working($p4);
    call {:si_unique_call 969} {:cexpr "tmp___1"} boogie_si_record_i32($i8);
    goto corral_source_split_6297;

  corral_source_split_6297:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_6298;

  corral_source_split_6298:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p4, $mul.ref(0, 3864)), $mul.ref(3768, 1));
    goto corral_source_split_6320;

  corral_source_split_6320:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_6321;

  corral_source_split_6321:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p2);
    goto corral_source_split_6322;

  corral_source_split_6322:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_50 := $M.0;
    cmdloc_dummy_var_51 := $M.0;
    call {:si_unique_call 973} cmdloc_dummy_var_52 := $memcpy.i8(cmdloc_dummy_var_50, cmdloc_dummy_var_51, $p25, $p26, 4, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_52;
    goto corral_source_split_6323;

  corral_source_split_6323:
    assume {:verifier.code 0} true;
    $i27 := $M.2;
    goto corral_source_split_6324;

  corral_source_split_6324:
    assume {:verifier.code 0} true;
    $i28 := $and.i32($i27, 16);
    goto corral_source_split_6325;

  corral_source_split_6325:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_6326;

  corral_source_split_6326:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p4, $mul.ref(0, 3864)), $mul.ref(3752, 1));
    goto corral_source_split_6331;

  corral_source_split_6331:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_6332;

  corral_source_split_6332:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_6333;

  corral_source_split_6333:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p33);
    goto corral_source_split_6334;

  corral_source_split_6334:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_6335;

  corral_source_split_6335:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    $i40 := 0;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_6342;

  corral_source_split_6342:
    assume {:verifier.code 0} true;
    $i7 := $i40;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6295;

  corral_source_split_6295:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb17:
    assume $i35 == 1;
    goto corral_source_split_6337;

  corral_source_split_6337:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p4, $mul.ref(0, 3864)), $mul.ref(3752, 1));
    goto corral_source_split_6338;

  corral_source_split_6338:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_6339;

  corral_source_split_6339:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    call {:si_unique_call 975} $i39 := devirtbounce.4($p38, $p4);
    goto SeqInstr_349, SeqInstr_350;

  SeqInstr_350:
    assume assertsPassed;
    goto SeqInstr_351;

  SeqInstr_351:
    call {:si_unique_call 976} {:cexpr "tmp___2"} boogie_si_record_i32($i39);
    goto corral_source_split_6340;

  corral_source_split_6340:
    assume {:verifier.code 0} true;
    $i40 := $i39;
    goto $bb19;

  SeqInstr_349:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i29 == 1;
    goto corral_source_split_6328;

  corral_source_split_6328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 974} vslice_dummy_var_220 := printk.ref.ref.i32(.str, .str.101, 420);
    goto corral_source_split_6329;

  corral_source_split_6329:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_6300;

  corral_source_split_6300:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 3864)), $mul.ref(520, 1));
    goto corral_source_split_6301;

  corral_source_split_6301:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_6302;

  corral_source_split_6302:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 1232)), $mul.ref(1144, 1));
    goto corral_source_split_6303;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 970} $i13 := atomic_read($p12);
    call {:si_unique_call 971} {:cexpr "tmp___0"} boogie_si_record_i32($i13);
    goto corral_source_split_6304;

  corral_source_split_6304:
    assume {:verifier.code 0} true;
    $i14 := $sle.i32($i13, 0);
    goto corral_source_split_6305;

  corral_source_split_6305:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb7:
    assume $i14 == 1;
    goto corral_source_split_6307;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3864)), $mul.ref(3768, 1)), $mul.ref(0, 1));
    goto corral_source_split_6308;

  corral_source_split_6308:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_6309;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 1);
    goto corral_source_split_6310;

  corral_source_split_6310:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb9;

  $bb10:
    assume $i18 == 1;
    goto corral_source_split_6312;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3864)), $mul.ref(3768, 1)), $mul.ref(0, 1));
    goto corral_source_split_6313;

  corral_source_split_6313:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, 1026);
    goto corral_source_split_6314;

  corral_source_split_6314:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p4, $mul.ref(0, 3864)), $mul.ref(3760, 1));
    goto corral_source_split_6315;

  corral_source_split_6315:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_6316;

  corral_source_split_6316:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p22, $0.ref);
    goto corral_source_split_6317;

  corral_source_split_6317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} vslice_dummy_var_219 := printk.ref(.str.100);
    goto corral_source_split_6318;

  corral_source_split_6318:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_6293;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;
}



const poseidon_resume: ref;

axiom poseidon_resume == $sub.ref(0, 495923);

procedure poseidon_resume($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.25, $M.27, $CurrAddr, $M.3, $M.4, $M.30, assertsPassed, $M.31;



implementation poseidon_resume($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i32;
  var $i5: i32;
  var cmdloc_dummy_var_53: [ref]i8;
  var cmdloc_dummy_var_54: [ref]i8;
  var cmdloc_dummy_var_55: [ref]i8;
  var vslice_dummy_var_221: i32;
  var vslice_dummy_var_222: i32;
  var vslice_dummy_var_223: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 977} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_6344;

  corral_source_split_6344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 978} $p2 := get_pd($p0);
    goto corral_source_split_6345;

  corral_source_split_6345:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_6346;

  corral_source_split_6346:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_6347;

  corral_source_split_6347:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 979} vslice_dummy_var_221 := printk.ref(.str.102);
    goto corral_source_split_6353;

  corral_source_split_6353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 980} $i7 := is_working($p2);
    call {:si_unique_call 981} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_6354;

  corral_source_split_6354:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_6355;

  corral_source_split_6355:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 3864)), $mul.ref(3768, 1)), $mul.ref(0, 1));
    goto corral_source_split_6370;

  corral_source_split_6370:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_6371;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 1);
    goto corral_source_split_6372;

  corral_source_split_6372:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i25 := $M.2;
    goto corral_source_split_6382;

  corral_source_split_6382:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i25, 16);
    goto corral_source_split_6383;

  corral_source_split_6383:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_6384;

  corral_source_split_6384:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 3864)), $mul.ref(3760, 1));
    goto corral_source_split_6389;

  corral_source_split_6389:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_6390;

  corral_source_split_6390:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_6391;

  corral_source_split_6391:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p31);
    goto corral_source_split_6392;

  corral_source_split_6392:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i32, 0);
    goto corral_source_split_6393;

  corral_source_split_6393:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    $i38 := 0;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_6400;

  corral_source_split_6400:
    assume {:verifier.code 0} true;
    $i5 := $i38;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6351;

  corral_source_split_6351:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb20:
    assume $i33 == 1;
    goto corral_source_split_6395;

  corral_source_split_6395:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 3864)), $mul.ref(3760, 1));
    goto corral_source_split_6396;

  corral_source_split_6396:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_6397;

  corral_source_split_6397:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    call {:si_unique_call 985} $i37 := devirtbounce.4($p36, $p2);
    goto SeqInstr_352, SeqInstr_353;

  SeqInstr_353:
    assume assertsPassed;
    goto SeqInstr_354;

  SeqInstr_354:
    call {:si_unique_call 986} {:cexpr "tmp___1"} boogie_si_record_i32($i37);
    goto corral_source_split_6398;

  corral_source_split_6398:
    assume {:verifier.code 0} true;
    $i38 := $i37;
    goto $bb22;

  SeqInstr_352:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i27 == 1;
    goto corral_source_split_6386;

  corral_source_split_6386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 984} vslice_dummy_var_223 := printk.ref.ref.i32(.str, .str.103, 441);
    goto corral_source_split_6387;

  corral_source_split_6387:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb11:
    assume $i20 == 1;
    goto corral_source_split_6374;

  corral_source_split_6374:
    assume {:verifier.code 0} true;
    $i21 := $M.2;
    goto corral_source_split_6375;

  corral_source_split_6375:
    assume {:verifier.code 0} true;
    $i22 := $and.i32($i21, 16);
    goto corral_source_split_6376;

  corral_source_split_6376:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_6377;

  corral_source_split_6377:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb13:
    assume $i23 == 1;
    goto corral_source_split_6379;

  corral_source_split_6379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 983} vslice_dummy_var_222 := printk.ref.ref.i32(.str, .str.103, 438);
    goto corral_source_split_6380;

  corral_source_split_6380:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_6357;

  corral_source_split_6357:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 3864)), $mul.ref(3768, 1)), $mul.ref(0, 1));
    goto corral_source_split_6358;

  corral_source_split_6358:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_6359;

  corral_source_split_6359:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 1026);
    goto corral_source_split_6360;

  corral_source_split_6360:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb7:
    assume $i12 == 1;
    goto corral_source_split_6362;

  corral_source_split_6362:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_6363;

  corral_source_split_6363:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, 0);
    goto corral_source_split_6364;

  corral_source_split_6364:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 3864)), $mul.ref(3768, 1));
    goto corral_source_split_6365;

  corral_source_split_6365:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_6366;

  corral_source_split_6366:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p1);
    goto corral_source_split_6367;

  corral_source_split_6367:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_53 := $M.0;
    cmdloc_dummy_var_54 := $M.0;
    call {:si_unique_call 982} cmdloc_dummy_var_55 := $memcpy.i8(cmdloc_dummy_var_53, cmdloc_dummy_var_54, $p15, $p16, 4, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_55;
    goto corral_source_split_6368;

  corral_source_split_6368:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_6349;

  corral_source_split_6349:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;
}



const get_pd: ref;

axiom get_pd == $sub.ref(0, 496955);

procedure get_pd($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation get_pd($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6402;

  corral_source_split_6402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 987} $p1 := usb_get_intfdata($p0);
    goto corral_source_split_6403;

  corral_source_split_6403:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_6404;

  corral_source_split_6404:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const is_working: ref;

axiom is_working == $sub.ref(0, 497987);

procedure is_working($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation is_working($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6406;

  corral_source_split_6406:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(520, 1));
    goto corral_source_split_6407;

  corral_source_split_6407:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_6408;

  corral_source_split_6408:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1232)), $mul.ref(1144, 1));
    goto corral_source_split_6409;

  corral_source_split_6409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 988} $i4 := atomic_read($p3);
    call {:si_unique_call 989} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_6410;

  corral_source_split_6410:
    assume {:verifier.code 0} true;
    $i5 := $sgt.i32($i4, 0);
    goto corral_source_split_6411;

  corral_source_split_6411:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_6412;

  corral_source_split_6412:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const atomic_read: ref;

axiom atomic_read == $sub.ref(0, 499019);

procedure atomic_read($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_read($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6414;

  corral_source_split_6414:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_6415;

  corral_source_split_6415:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_6416;

  corral_source_split_6416:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const usb_get_intfdata: ref;

axiom usb_get_intfdata == $sub.ref(0, 500051);

procedure usb_get_intfdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation usb_get_intfdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6418;

  corral_source_split_6418:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(48, 1));
    goto corral_source_split_6419;

  corral_source_split_6419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 990} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_6420;

  corral_source_split_6420:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_mutex_lock_159: ref;

axiom ldv_mutex_lock_159 == $sub.ref(0, 501083);

procedure ldv_mutex_lock_159($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_lock_159($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6422;

  corral_source_split_6422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 991} ldv_mutex_lock_lock_of_poseidon($p0);
    goto SeqInstr_355, SeqInstr_356;

  SeqInstr_356:
    assume assertsPassed;
    goto SeqInstr_357;

  SeqInstr_357:
    goto corral_source_split_6423;

  corral_source_split_6423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 992} mutex_lock($p0);
    goto corral_source_split_6424;

  corral_source_split_6424:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_355:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_160: ref;

axiom ldv_mutex_unlock_160 == $sub.ref(0, 502115);

procedure ldv_mutex_unlock_160($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_unlock_160($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6426;

  corral_source_split_6426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} ldv_mutex_unlock_lock_of_poseidon($p0);
    goto SeqInstr_358, SeqInstr_359;

  SeqInstr_359:
    assume assertsPassed;
    goto SeqInstr_360;

  SeqInstr_360:
    goto corral_source_split_6427;

  corral_source_split_6427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 994} mutex_unlock($p0);
    goto corral_source_split_6428;

  corral_source_split_6428:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_358:
    assume !assertsPassed;
    return;
}



const stop_all_video_stream: ref;

axiom stop_all_video_stream == $sub.ref(0, 503147);

procedure stop_all_video_stream($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, assertsPassed, $CurrAddr;



implementation stop_all_video_stream($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p20: ref;
  var vslice_dummy_var_224: i32;
  var vslice_dummy_var_225: i32;
  var vslice_dummy_var_226: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6430;

  corral_source_split_6430:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(536, 1));
    goto corral_source_split_6431;

  corral_source_split_6431:
    assume {:verifier.code 0} true;
    goto corral_source_split_6432;

  corral_source_split_6432:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(16, 1));
    goto corral_source_split_6433;

  corral_source_split_6433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} ldv_mutex_lock_23($p3);
    goto SeqInstr_361, SeqInstr_362;

  SeqInstr_362:
    assume assertsPassed;
    goto SeqInstr_363;

  SeqInstr_363:
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(192, 1));
    goto corral_source_split_6434;

  corral_source_split_6434:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_6435;

  corral_source_split_6435:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_6436;

  corral_source_split_6436:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(16, 1));
    goto corral_source_split_6456;

  corral_source_split_6456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1002} ldv_mutex_unlock_24($p20);
    goto SeqInstr_364, SeqInstr_365;

  SeqInstr_365:
    assume assertsPassed;
    goto SeqInstr_366;

  SeqInstr_366:
    goto corral_source_split_6457;

  corral_source_split_6457:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_364:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(184, 1));
    goto corral_source_split_6438;

  corral_source_split_6438:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_6439;

  corral_source_split_6439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 996} vslice_dummy_var_224 := usb_transfer_stop($p1);
    goto corral_source_split_6440;

  corral_source_split_6440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 997} free_all_urb($p1);
    goto corral_source_split_6441;

  corral_source_split_6441:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p8, $mul.ref(0, 736)), $mul.ref(8, 1));
    goto corral_source_split_6442;

  corral_source_split_6442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 998} videobuf_stop($p10);
    goto corral_source_split_6443;

  corral_source_split_6443:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p8, $mul.ref(0, 736)), $mul.ref(8, 1));
    goto corral_source_split_6444;

  corral_source_split_6444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 999} vslice_dummy_var_225 := videobuf_mmap_free($p11);
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(816, 1)), $mul.ref(16, 1));
    goto corral_source_split_6445;

  corral_source_split_6445:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_6446;

  corral_source_split_6446:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_6447;

  corral_source_split_6447:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_6448;

  corral_source_split_6448:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i16 == 1;
    goto corral_source_split_6450;

  corral_source_split_6450:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p14, $mul.ref(0, 736)), $mul.ref(8, 1));
    goto corral_source_split_6451;

  corral_source_split_6451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1000} videobuf_stop($p17);
    goto corral_source_split_6452;

  corral_source_split_6452:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p14, $mul.ref(0, 736)), $mul.ref(8, 1));
    goto corral_source_split_6453;

  corral_source_split_6453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1001} vslice_dummy_var_226 := videobuf_mmap_free($p18);
    goto corral_source_split_6454;

  corral_source_split_6454:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_361:
    assume !assertsPassed;
    return;
}



const v4l2_device_unregister: ref;

axiom v4l2_device_unregister == $sub.ref(0, 504179);

procedure v4l2_device_unregister($p0: ref);
  free requires assertsPassed;



implementation v4l2_device_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6459;

  corral_source_split_6459:
    assume {:verifier.code 0} true;
    return;
}



const pd_dvb_usb_device_exit: ref;

axiom pd_dvb_usb_device_exit == $sub.ref(0, 505211);

procedure pd_dvb_usb_device_exit($p0: ref);
  free requires assertsPassed;
  modifies $M.33, $CurrAddr, $M.0;



implementation pd_dvb_usb_device_exit($p0: ref)
{
  var $p1: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p17: ref;
  var vslice_dummy_var_227: i64;
  var vslice_dummy_var_228: i32;
  var vslice_dummy_var_229: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1003} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_6461;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(952, 1)), $mul.ref(2676, 1));
    goto corral_source_split_6462;

  corral_source_split_6462:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $p4, $p5, $i6, $i7, $p9, $i10, $i11, $i12, $i13, vslice_dummy_var_227 := pd_dvb_usb_device_exit_loop_$bb1($p0, $p1, $p3, $p4, $p5, $i6, $i7, $p9, $i10, $i11, $i12, $i13, vslice_dummy_var_227);
    goto $bb1_last;

  corral_source_split_6464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1004} $i10 := atomic_read($p9);
    call {:si_unique_call 1005} {:cexpr "tmp___3"} boogie_si_record_i32($i10);
    goto corral_source_split_6465;

  corral_source_split_6465:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_6466;

  corral_source_split_6466:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    goto corral_source_split_6478;

  corral_source_split_6478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1009} $i12 := atomic_read($p3);
    call {:si_unique_call 1010} {:cexpr "tmp___4"} boogie_si_record_i32($i12);
    goto corral_source_split_6479;

  corral_source_split_6479:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_6480;

  corral_source_split_6480:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i13 == 1);
    goto corral_source_split_6484;

  corral_source_split_6484:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(952, 1)), $mul.ref(1224, 1));
    goto corral_source_split_6486;

  corral_source_split_6486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1011} dvb_dmxdev_release($p14);
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(952, 1)), $mul.ref(272, 1));
    goto corral_source_split_6487;

  corral_source_split_6487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1012} vslice_dummy_var_228 := dvb_unregister_frontend($p15);
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(952, 1)), $mul.ref(0, 1));
    goto corral_source_split_6488;

  corral_source_split_6488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1013} vslice_dummy_var_229 := dvb_unregister_adapter($p17);
    goto corral_source_split_6489;

  corral_source_split_6489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1014} pd_dvb_usb_device_cleanup($p0);
    goto corral_source_split_6490;

  corral_source_split_6490:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i13 == 1;
    goto corral_source_split_6482;

  corral_source_split_6482:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $M.33 := $store.i64($M.33, $p1, 1);
    goto corral_source_split_6468;

  corral_source_split_6468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1006} $p4 := get_current();
    goto corral_source_split_6469;

  corral_source_split_6469:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 9568)), $mul.ref(0, 1));
    goto corral_source_split_6470;

  corral_source_split_6470:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.33, $p1);
    call {:si_unique_call 1007} $i7 := devirtbounce(0, $p5, $i6, $p5);
    goto corral_source_split_6471;

  corral_source_split_6471:
    assume {:verifier.code 0} true;
    $M.33 := $store.i64($M.33, $p1, $i7);
    goto corral_source_split_6472;

  corral_source_split_6472:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1008} vslice_dummy_var_227 := schedule_timeout(250);
    goto corral_source_split_6474;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    goto corral_source_split_6474_dummy;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_6476;

  corral_source_split_6476:
    assume {:verifier.code 0} true;
    goto $bb2;

  corral_source_split_6474_dummy:
    assume false;
    return;

  $bb1_last:
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(952, 1)), $mul.ref(2672, 1));
    goto corral_source_split_6464;
}



const poseidon_fm_exit: ref;

axiom poseidon_fm_exit == $sub.ref(0, 506243);

procedure poseidon_fm_exit($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation poseidon_fm_exit($p0: ref) returns ($r: i32)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6492;

  corral_source_split_6492:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(928, 1)), $mul.ref(16, 1));
    goto corral_source_split_6493;

  corral_source_split_6493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1015} destroy_video_device($p2);
    goto corral_source_split_6494;

  corral_source_split_6494:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const poseidon_audio_free: ref;

axiom poseidon_audio_free == $sub.ref(0, 507275);

procedure poseidon_audio_free($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation poseidon_audio_free($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var vslice_dummy_var_230: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6496;

  corral_source_split_6496:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(856, 1)), $mul.ref(48, 1));
    goto corral_source_split_6497;

  corral_source_split_6497:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_6498;

  corral_source_split_6498:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_6499;

  corral_source_split_6499:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_6500;

  corral_source_split_6500:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i5 == 1;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(856, 1)), $mul.ref(48, 1));
    goto corral_source_split_6502;

  corral_source_split_6502:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_6503;

  corral_source_split_6503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1016} vslice_dummy_var_230 := snd_card_free($p7);
    goto corral_source_split_6504;

  corral_source_split_6504:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pd_video_exit: ref;

axiom pd_video_exit == $sub.ref(0, 508307);

procedure pd_video_exit($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation pd_video_exit($p0: ref)
{
  var $p3: ref;
  var $p4: ref;
  var vslice_dummy_var_231: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6506;

  corral_source_split_6506:
    assume {:verifier.code 0} true;
    goto corral_source_split_6507;

  corral_source_split_6507:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(0, 1));
    goto corral_source_split_6508;

  corral_source_split_6508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1017} destroy_video_device($p3);
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(816, 1)), $mul.ref(0, 1));
    goto corral_source_split_6509;

  corral_source_split_6509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1018} destroy_video_device($p4);
    goto corral_source_split_6510;

  corral_source_split_6510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1019} vslice_dummy_var_231 := printk.ref.ref.i32(.str, .str.1, 1734);
    goto corral_source_split_6511;

  corral_source_split_6511:
    assume {:verifier.code 0} true;
    return;
}



const usb_set_intfdata: ref;

axiom usb_set_intfdata == $sub.ref(0, 509339);

procedure usb_set_intfdata($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation usb_set_intfdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6513;

  corral_source_split_6513:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(48, 1));
    goto corral_source_split_6514;

  corral_source_split_6514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1020} dev_set_drvdata($p2, $p1);
    goto corral_source_split_6515;

  corral_source_split_6515:
    assume {:verifier.code 0} true;
    return;
}



const dev_set_drvdata: ref;

axiom dev_set_drvdata == $sub.ref(0, 510371);

procedure dev_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation dev_set_drvdata($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6517;

  corral_source_split_6517:
    assume {:verifier.code 0} true;
    return;
}



const destroy_video_device: ref;

axiom destroy_video_device == $sub.ref(0, 511403);

procedure destroy_video_device($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation destroy_video_device($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6519;

  corral_source_split_6519:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.0, $p0);
    goto corral_source_split_6520;

  corral_source_split_6520:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_6521;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_6522;

  corral_source_split_6522:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1021} $i4 := video_is_registered($p1);
    call {:si_unique_call 1022} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_6526;

  corral_source_split_6526:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_6527;

  corral_source_split_6527:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    goto corral_source_split_6532;

  corral_source_split_6532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1024} video_device_release($p1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p0, $0.ref);
    goto corral_source_split_6534;

  corral_source_split_6534:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_6529;

  corral_source_split_6529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1023} video_unregister_device($p1);
    goto corral_source_split_6530;

  corral_source_split_6530:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6524;

  corral_source_split_6524:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const video_is_registered: ref;

axiom video_is_registered == $sub.ref(0, 512435);

procedure video_is_registered($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation video_is_registered($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6536;

  corral_source_split_6536:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1328)), $mul.ref(1176, 1));
    goto corral_source_split_6537;

  corral_source_split_6537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1025} $i2 := constant_test_bit(0, $p1);
    call {:si_unique_call 1026} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_6538;

  corral_source_split_6538:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const video_unregister_device: ref;

axiom video_unregister_device == $sub.ref(0, 513467);

procedure video_unregister_device($p0: ref);
  free requires assertsPassed;



implementation video_unregister_device($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6540;

  corral_source_split_6540:
    assume {:verifier.code 0} true;
    return;
}



const constant_test_bit: ref;

axiom constant_test_bit == $sub.ref(0, 514499);

procedure constant_test_bit($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation constant_test_bit($i0: i32, $p1: ref) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i64;
  var $p4: ref;
  var $i5: i64;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1027} {:cexpr "constant_test_bit:arg:nr"} boogie_si_record_i32($i0);
    goto corral_source_split_6542;

  corral_source_split_6542:
    assume {:verifier.code 0} true;
    $i2 := $udiv.i32($i0, 64);
    goto corral_source_split_6543;

  corral_source_split_6543:
    assume {:verifier.code 0} true;
    $i3 := $zext.i32.i64($i2);
    goto corral_source_split_6544;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p1, $mul.ref($i3, 8));
    goto corral_source_split_6545;

  corral_source_split_6545:
    assume {:verifier.code 0} true;
    $i5 := $load.i64($M.0, $p4);
    goto corral_source_split_6546;

  corral_source_split_6546:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i0, 63);
    goto corral_source_split_6547;

  corral_source_split_6547:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_6548;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    $i8 := $lshr.i64($i5, $i7);
    goto corral_source_split_6549;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    goto corral_source_split_6550;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 1);
    goto corral_source_split_6551;

  corral_source_split_6551:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const snd_card_free: ref;

axiom snd_card_free == $sub.ref(0, 515531);

procedure snd_card_free($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation snd_card_free($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6553;

  corral_source_split_6553:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1028} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1029} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_6554;

  corral_source_split_6554:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const dvb_dmxdev_release: ref;

axiom dvb_dmxdev_release == $sub.ref(0, 516563);

procedure dvb_dmxdev_release($p0: ref);
  free requires assertsPassed;



implementation dvb_dmxdev_release($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6556;

  corral_source_split_6556:
    assume {:verifier.code 0} true;
    return;
}



const dvb_unregister_frontend: ref;

axiom dvb_unregister_frontend == $sub.ref(0, 517595);

procedure dvb_unregister_frontend($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dvb_unregister_frontend($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6558;

  corral_source_split_6558:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1030} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1031} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_6559;

  corral_source_split_6559:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const dvb_unregister_adapter: ref;

axiom dvb_unregister_adapter == $sub.ref(0, 518627);

procedure dvb_unregister_adapter($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dvb_unregister_adapter($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6561;

  corral_source_split_6561:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1032} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1033} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_6562;

  corral_source_split_6562:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_mutex_lock_23: ref;

axiom ldv_mutex_lock_23 == $sub.ref(0, 519659);

procedure ldv_mutex_lock_23($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_lock_23($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6564;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1034} ldv_mutex_lock_lock_of_poseidon($p0);
    goto SeqInstr_367, SeqInstr_368;

  SeqInstr_368:
    assume assertsPassed;
    goto SeqInstr_369;

  SeqInstr_369:
    goto corral_source_split_6565;

  corral_source_split_6565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1035} mutex_lock($p0);
    goto corral_source_split_6566;

  corral_source_split_6566:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_367:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_24: ref;

axiom ldv_mutex_unlock_24 == $sub.ref(0, 520691);

procedure ldv_mutex_unlock_24($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_unlock_24($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6568;

  corral_source_split_6568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1036} ldv_mutex_unlock_lock_of_poseidon($p0);
    goto SeqInstr_370, SeqInstr_371;

  SeqInstr_371:
    assume assertsPassed;
    goto SeqInstr_372;

  SeqInstr_372:
    goto corral_source_split_6569;

  corral_source_split_6569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1037} mutex_unlock($p0);
    goto corral_source_split_6570;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_370:
    assume !assertsPassed;
    return;
}



const interface_to_usbdev: ref;

axiom interface_to_usbdev == $sub.ref(0, 521723);

procedure interface_to_usbdev($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation interface_to_usbdev($p0: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6572;

  corral_source_split_6572:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_6573;

  corral_source_split_6573:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_6574;

  corral_source_split_6574:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_6575;

  corral_source_split_6575:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref($sub.ref(0, 136), 1904));
    goto corral_source_split_6576;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const check_firmware: ref;

axiom check_firmware == $sub.ref(0, 522755);

procedure check_firmware($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.32, $M.37, $M.41, $CurrAddr;



implementation check_firmware($p0: ref, $p1: ref) returns ($r: i1)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6578;

  corral_source_split_6578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1038} $p2 := kzalloc(8, 208);
    goto corral_source_split_6579;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_6580;

  corral_source_split_6580:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_6581;

  corral_source_split_6581:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1039} $i6 := __create_pipe($p0, 0);
    call {:si_unique_call 1040} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_6587;

  corral_source_split_6587:
    assume {:verifier.code 0} true;
    $i7 := $or.i32($i6, $sub.i32(0, 2147483520));
    goto corral_source_split_6588;

  corral_source_split_6588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1041} $i8 := usb_control_msg($p0, $i7, $sub.i8(0, 126), $sub.i8(0, 64), 0, 0, $p2, 8, 5000);
    call {:si_unique_call 1042} {:cexpr "ret"} boogie_si_record_i32($i8);
    goto corral_source_split_6589;

  corral_source_split_6589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1043} kfree($p2);
    goto corral_source_split_6590;

  corral_source_split_6590:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i8, 0);
    goto corral_source_split_6591;

  corral_source_split_6591:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i8, 0);
    goto corral_source_split_6598;

  corral_source_split_6598:
    assume {:verifier.code 0} true;
    $i5 := $i12;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6585;

  corral_source_split_6585:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_6593;

  corral_source_split_6593:
    assume {:verifier.code 0} true;
    $M.32 := $store.i32($M.32, $p1, 1);
    goto corral_source_split_6594;

  corral_source_split_6594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1044} $i10 := firmware_download($p0);
    call {:si_unique_call 1045} {:cexpr "tmp___0"} boogie_si_record_i32($i10);
    goto corral_source_split_6595;

  corral_source_split_6595:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_6596;

  corral_source_split_6596:
    assume {:verifier.code 0} true;
    $i5 := $i11;
    goto $bb3;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_6583;

  corral_source_split_6583:
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb3;
}



const find_old_poseidon: ref;

axiom find_old_poseidon == $sub.ref(0, 523787);

procedure find_old_poseidon($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation find_old_poseidon($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i1;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $p10: ref;
  var $p24: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6600;

  corral_source_split_6600:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.0, pd_device_list);
    goto corral_source_split_6601;

  corral_source_split_6601:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_6602;

  corral_source_split_6602:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 3864)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6603;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6604;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6605;

  corral_source_split_6605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1046} llvm.prefetch($p6, 0, 3, 1);
    goto corral_source_split_6606;

  corral_source_split_6606:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 3864)), $mul.ref(0, 1));
    goto corral_source_split_6607;

  corral_source_split_6607:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_6608;

  corral_source_split_6608:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, $p2i.ref.i64(pd_device_list));
    goto corral_source_split_6609;

  corral_source_split_6609:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p24 := $0.ref;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_6631;

  corral_source_split_6631:
    assume {:verifier.code 0} true;
    $r := $p24;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_6611;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    $p10 := $p1;
    goto $bb4;

  $bb4:
    call $p11, $i12, $i13, $p14, $i15, $i16, $i17, $p19, $i20, $i21, $p22, $p26, $p27, $p28, $p30, $p31, $p32, $p33, $i34, $i35, $p10 := find_old_poseidon_loop_$bb4($p0, $p11, $i12, $i13, $p14, $i15, $i16, $i17, $p19, $i20, $i21, $p22, $p26, $p27, $p28, $p30, $p31, $p32, $p33, $i34, $i35, $p10);
    goto $bb4_last;

  corral_source_split_6613:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 3864)), $mul.ref(3856, 1));
    goto corral_source_split_6615;

  corral_source_split_6615:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_6616;

  corral_source_split_6616:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_6617;

  corral_source_split_6617:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 1904)), $mul.ref(1530, 1));
    goto corral_source_split_6618;

  corral_source_split_6618:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_6619;

  corral_source_split_6619:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_6620;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i13, $i16);
    goto corral_source_split_6621;

  corral_source_split_6621:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 3864)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6633;

  corral_source_split_6633:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_6634;

  corral_source_split_6634:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_6635;

  corral_source_split_6635:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p28, $mul.ref(0, 3864)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6636;

  corral_source_split_6636:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_6637;

  corral_source_split_6637:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_6638;

  corral_source_split_6638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1048} llvm.prefetch($p32, 0, 3, 1);
    goto corral_source_split_6639;

  corral_source_split_6639:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p28, $mul.ref(0, 3864)), $mul.ref(0, 1));
    goto corral_source_split_6640;

  corral_source_split_6640:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p33);
    goto corral_source_split_6641;

  corral_source_split_6641:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, $p2i.ref.i64(pd_device_list));
    goto corral_source_split_6642;

  corral_source_split_6642:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i35 == 1);
    goto corral_source_split_6644;

  corral_source_split_6644:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb13:
    assume $i35 == 1;
    assume {:verifier.code 0} true;
    $p10 := $p27;
    goto $bb13_dummy;

  $bb6:
    assume $i17 == 1;
    goto corral_source_split_6623;

  corral_source_split_6623:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 3864)), $mul.ref(3768, 1)), $mul.ref(0, 1));
    goto corral_source_split_6624;

  corral_source_split_6624:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_6625;

  corral_source_split_6625:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 1);
    goto corral_source_split_6626;

  corral_source_split_6626:
    assume {:verifier.code 0} true;
    $p22 := $p10;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb8;

  $bb9:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_6628;

  corral_source_split_6628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1047} $p23 := fixup($p22);
    goto corral_source_split_6629;

  corral_source_split_6629:
    assume {:verifier.code 0} true;
    $p24 := $p23;
    goto $bb11;

  $bb13_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6613;
}



const kref_init: ref;

axiom kref_init == $sub.ref(0, 524819);

procedure kref_init($p0: ref);
  free requires assertsPassed;



implementation kref_init($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6646;

  corral_source_split_6646:
    assume {:verifier.code 0} true;
    return;
}



const set_map_flags: ref;

axiom set_map_flags == $sub.ref(0, 525851);

procedure set_map_flags($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation set_map_flags($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i8;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6648;

  corral_source_split_6648:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 1904)), $mul.ref(1530, 1));
    goto corral_source_split_6649;

  corral_source_split_6649:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_6650;

  corral_source_split_6650:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(3856, 1));
    goto corral_source_split_6651;

  corral_source_split_6651:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p4, $i3);
    goto corral_source_split_6652;

  corral_source_split_6652:
    assume {:verifier.code 0} true;
    return;
}



const usb_get_dev: ref;

axiom usb_get_dev == $sub.ref(0, 526883);

procedure usb_get_dev($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation usb_get_dev($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6654;

  corral_source_split_6654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1049} $p1 := external_alloc();
    goto corral_source_split_6655;

  corral_source_split_6655:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_6656;

  corral_source_split_6656:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const usb_get_intf: ref;

axiom usb_get_intf == $sub.ref(0, 527915);

procedure usb_get_intf($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation usb_get_intf($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6658;

  corral_source_split_6658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1050} $p1 := external_alloc();
    goto corral_source_split_6659;

  corral_source_split_6659:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_6660;

  corral_source_split_6660:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __mutex_init: ref;

axiom __mutex_init == $sub.ref(0, 528947);

procedure __mutex_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __mutex_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6662;

  corral_source_split_6662:
    assume {:verifier.code 0} true;
    return;
}



const dev_name: ref;

axiom dev_name == $sub.ref(0, 529979);

procedure dev_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6664;

  corral_source_split_6664:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1088)), $mul.ref(80, 1));
    goto corral_source_split_6665;

  corral_source_split_6665:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_6666;

  corral_source_split_6666:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_6667;

  corral_source_split_6667:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_6668;

  corral_source_split_6668:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1088)), $mul.ref(16, 1));
    goto corral_source_split_6676;

  corral_source_split_6676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1051} $p9 := kobject_name($p8);
    goto corral_source_split_6677;

  corral_source_split_6677:
    assume {:verifier.code 0} true;
    $p7 := $p9;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6674;

  corral_source_split_6674:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_6670;

  corral_source_split_6670:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1088)), $mul.ref(80, 1));
    goto corral_source_split_6671;

  corral_source_split_6671:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_6672;

  corral_source_split_6672:
    assume {:verifier.code 0} true;
    $p7 := $p6;
    goto $bb3;
}



const v4l2_device_register: ref;

axiom v4l2_device_register == $sub.ref(0, 531011);

procedure v4l2_device_register($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation v4l2_device_register($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6679;

  corral_source_split_6679:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1052} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1053} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_6680;

  corral_source_split_6680:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const pd_video_init: ref;

axiom pd_video_init == $sub.ref(0, 532043);

procedure pd_video_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation pd_video_init($p0: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $i9: i32;
  var $i25: i32;
  var vslice_dummy_var_232: i32;
  var vslice_dummy_var_233: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6682;

  corral_source_split_6682:
    assume {:verifier.code 0} true;
    goto corral_source_split_6683;

  corral_source_split_6683:
    assume {:verifier.code 0} true;
    goto corral_source_split_6684;

  corral_source_split_6684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1054} $p3 := vdev_init($p0, pd_video_template);
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(0, 1));
    goto corral_source_split_6685;

  corral_source_split_6685:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, $p3);
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(0, 1));
    goto corral_source_split_6686;

  corral_source_split_6686:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_6687;

  corral_source_split_6687:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_6688;

  corral_source_split_6688:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_6689;

  corral_source_split_6689:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(0, 1));
    goto corral_source_split_6697;

  corral_source_split_6697:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_6698;

  corral_source_split_6698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1057} $i12 := video_register_device($p11, 0, $sub.i32(0, 1));
    call {:si_unique_call 1058} {:cexpr "ret"} boogie_si_record_i32($i12);
    goto corral_source_split_6699;

  corral_source_split_6699:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_6700;

  corral_source_split_6700:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1059} $p14 := vdev_init($p0, pd_video_template);
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(816, 1)), $mul.ref(0, 1));
    goto corral_source_split_6704;

  corral_source_split_6704:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p15, $p14);
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(816, 1)), $mul.ref(0, 1));
    goto corral_source_split_6705;

  corral_source_split_6705:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_6706;

  corral_source_split_6706:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_6707;

  corral_source_split_6707:
    assume {:verifier.code 0} true;
    $i19 := $eq.i64($i18, 0);
    goto corral_source_split_6708;

  corral_source_split_6708:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    $p20 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(816, 1)), $mul.ref(0, 1));
    goto corral_source_split_6712;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_6713;

  corral_source_split_6713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1060} $i22 := video_register_device($p21, 1, $sub.i32(0, 1));
    call {:si_unique_call 1061} {:cexpr "ret"} boogie_si_record_i32($i22);
    goto corral_source_split_6714;

  corral_source_split_6714:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_6715;

  corral_source_split_6715:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1062} vslice_dummy_var_233 := printk.ref.ref.i32(.str.2, .str.3, 1760);
    goto corral_source_split_6719;

  corral_source_split_6719:
    assume {:verifier.code 0} true;
    $i25 := 0;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_6721;

  corral_source_split_6721:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;

  $bb11:
    assume $i23 == 1;
    goto corral_source_split_6717;

  corral_source_split_6717:
    assume {:verifier.code 0} true;
    $i9 := $i22;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6693;

  corral_source_split_6693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1055} vslice_dummy_var_232 := printk.ref.ref.i32.i32(.str.4, .str.3, 1763, $i9);
    goto corral_source_split_6694;

  corral_source_split_6694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1056} pd_video_exit($p0);
    goto corral_source_split_6695;

  corral_source_split_6695:
    assume {:verifier.code 0} true;
    $i25 := $i9;
    goto $bb14;

  $bb8:
    assume $i19 == 1;
    goto corral_source_split_6710;

  corral_source_split_6710:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 12);
    goto $bb3;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_6702;

  corral_source_split_6702:
    assume {:verifier.code 0} true;
    $i9 := $i12;
    goto $bb3;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_6691;

  corral_source_split_6691:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 12);
    goto $bb3;
}



const poseidon_audio_init: ref;

axiom poseidon_audio_init == $sub.ref(0, 533075);

procedure poseidon_audio_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.36, $M.0, $CurrAddr;



implementation poseidon_audio_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $p36: ref;
  var $p37: ref;
  var $i6: i32;
  var vslice_dummy_var_234: ref;
  var vslice_dummy_var_235: ref;
  var vslice_dummy_var_236: ref;
  var vslice_dummy_var_237: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1063} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1064} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_6723;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    goto corral_source_split_6724;

  corral_source_split_6724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1065} $i4 := snd_card_create($sub.i32(0, 1), .str.7, __this_module, 0, $p1);
    call {:si_unique_call 1066} {:cexpr "ret"} boogie_si_record_i32($i4);
    goto corral_source_split_6725;

  corral_source_split_6725:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_6726;

  corral_source_split_6726:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.34, $p1);
    goto corral_source_split_6732;

  corral_source_split_6732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1067} $i8 := snd_pcm_new($p7, .str.8, 0, 0, 1, $p2);
    call {:si_unique_call 1068} {:cexpr "ret"} boogie_si_record_i32($i8);
    goto corral_source_split_6733;

  corral_source_split_6733:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.35, $p2);
    goto corral_source_split_6734;

  corral_source_split_6734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1069} snd_pcm_set_ops($p9, 1, pcm_capture_ops);
    goto corral_source_split_6735;

  corral_source_split_6735:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.35, $p2);
    goto corral_source_split_6736;

  corral_source_split_6736:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 968)), $mul.ref(28, 1));
    goto corral_source_split_6737;

  corral_source_split_6737:
    assume {:verifier.code 0} true;
    $M.36 := $store.i32($M.36, $p11, 0);
    goto corral_source_split_6738;

  corral_source_split_6738:
    assume {:verifier.code 0} true;
    goto corral_source_split_6739;

  corral_source_split_6739:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.35, $p2);
    goto corral_source_split_6740;

  corral_source_split_6740:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 968)), $mul.ref(936, 1));
    goto corral_source_split_6741;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p14, $p0);
    goto corral_source_split_6742;

  corral_source_split_6742:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.35, $p2);
    goto corral_source_split_6743;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 968)), $mul.ref(100, 1));
    goto corral_source_split_6744;

  corral_source_split_6744:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_6745;

  corral_source_split_6745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1070} $p18 := strcpy($p17, .str.9);
    assume $isExternal($p18);
    goto corral_source_split_6746;

  corral_source_split_6746:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.34, $p1);
    goto corral_source_split_6747;

  corral_source_split_6747:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 1176)), $mul.ref(20, 1));
    goto corral_source_split_6748;

  corral_source_split_6748:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_6749;

  corral_source_split_6749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1071} vslice_dummy_var_234 := strcpy($p21, .str.10);
    goto corral_source_split_6750;

  corral_source_split_6750:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.34, $p1);
    goto corral_source_split_6751;

  corral_source_split_6751:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 1176)), $mul.ref(36, 1));
    goto corral_source_split_6752;

  corral_source_split_6752:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_6753;

  corral_source_split_6753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1072} vslice_dummy_var_235 := strcpy($p25, .str.11);
    goto corral_source_split_6754;

  corral_source_split_6754:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.34, $p1);
    goto corral_source_split_6755;

  corral_source_split_6755:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 1176)), $mul.ref(68, 1));
    goto corral_source_split_6756;

  corral_source_split_6756:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_6757;

  corral_source_split_6757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1073} vslice_dummy_var_236 := strcpy($p29, .str.12);
    goto corral_source_split_6758;

  corral_source_split_6758:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.34, $p1);
    goto corral_source_split_6759;

  corral_source_split_6759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1074} $i32 := snd_card_register($p31);
    call {:si_unique_call 1075} {:cexpr "tmp"} boogie_si_record_i32($i32);
    goto corral_source_split_6760;

  corral_source_split_6760:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_6761;

  corral_source_split_6761:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.34, $p1);
    $p37 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(856, 1)), $mul.ref(48, 1));
    goto corral_source_split_6767;

  corral_source_split_6767:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p37, $p36);
    goto corral_source_split_6768;

  corral_source_split_6768:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6730;

  corral_source_split_6730:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb5:
    assume $i33 == 1;
    goto corral_source_split_6763;

  corral_source_split_6763:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.34, $p1);
    goto corral_source_split_6764;

  corral_source_split_6764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1076} vslice_dummy_var_237 := snd_card_free($p34);
    goto corral_source_split_6765;

  corral_source_split_6765:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 12);
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_6728;

  corral_source_split_6728:
    assume {:verifier.code 0} true;
    $i6 := $i4;
    goto $bb3;
}



const poseidon_fm_init: ref;

axiom poseidon_fm_init == $sub.ref(0, 534107);

procedure poseidon_fm_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation poseidon_fm_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6770;

  corral_source_split_6770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1077} $p1 := vdev_init($p0, poseidon_fm_template);
    goto corral_source_split_6771;

  corral_source_split_6771:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_6772;

  corral_source_split_6772:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_6773;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1078} $i5 := video_register_device($p1, 2, $sub.i32(0, 1));
    call {:si_unique_call 1079} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_6779;

  corral_source_split_6779:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 0);
    goto corral_source_split_6780;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(928, 1)), $mul.ref(16, 1));
    goto corral_source_split_6785;

  corral_source_split_6785:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, $p1);
    goto corral_source_split_6786;

  corral_source_split_6786:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6777;

  corral_source_split_6777:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb5:
    assume $i6 == 1;
    goto corral_source_split_6782;

  corral_source_split_6782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1080} video_device_release($p1);
    goto corral_source_split_6783;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 1);
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6775;

  corral_source_split_6775:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 1);
    goto $bb3;
}



const pd_dvb_usb_device_init: ref;

axiom pd_dvb_usb_device_init == $sub.ref(0, 535139);

procedure pd_dvb_usb_device_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation pd_dvb_usb_device_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p12: ref;
  var $i13: i1;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p25: ref;
  var $p27: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $p39: ref;
  var $i40: i32;
  var $p42: ref;
  var $p44: ref;
  var $p46: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $i52: i1;
  var $i37: i32;
  var $p54: ref;
  var $i24: i32;
  var $p56: ref;
  var $i9: i32;
  var $i53: i32;
  var cmdloc_dummy_var_56: [ref]i8;
  var cmdloc_dummy_var_57: [ref]i8;
  var cmdloc_dummy_var_58: [ref]i8;
  var cmdloc_dummy_var_59: [ref]i8;
  var cmdloc_dummy_var_60: [ref]i8;
  var cmdloc_dummy_var_61: [ref]i8;
  var vslice_dummy_var_238: i32;
  var vslice_dummy_var_239: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6788;

  corral_source_split_6788:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(952, 1));
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(952, 1)), $mul.ref(2728, 1));
    goto corral_source_split_6789;

  corral_source_split_6789:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p2, $sub.i8(0, 126));
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(952, 1)), $mul.ref(2672, 1));
    goto corral_source_split_6790;

  corral_source_split_6790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1081} atomic_set($p3, 0);
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(952, 1)), $mul.ref(2676, 1));
    goto corral_source_split_6791;

  corral_source_split_6791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1082} atomic_set($p4, 0);
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(952, 1)), $mul.ref(2720, 1));
    goto corral_source_split_6792;

  corral_source_split_6792:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, $p0);
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(952, 1)), $mul.ref(0, 1));
    goto corral_source_split_6793;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1083} $i7 := dvb_register_adapter($p6, .str.15, __this_module, $0.ref, adapter_nr);
    call {:si_unique_call 1084} {:cexpr "ret"} boogie_si_record_i32($i7);
    goto corral_source_split_6794;

  corral_source_split_6794:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i7, 0);
    goto corral_source_split_6795;

  corral_source_split_6795:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(952, 1)), $mul.ref(272, 1)), $mul.ref(760, 1));
    goto corral_source_split_6801;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, $p0);
    goto corral_source_split_6802;

  corral_source_split_6802:
    assume {:verifier.code 0} true;
    $i13 := $ugt.i64(752, 63);
    goto corral_source_split_6803;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    $p18 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(952, 1)), $mul.ref(272, 1)), $mul.ref(0, 1));
    goto corral_source_split_6809;

  corral_source_split_6809:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_6810;

  corral_source_split_6810:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_59 := $M.0;
    cmdloc_dummy_var_60 := $M.0;
    call {:si_unique_call 1086} cmdloc_dummy_var_61 := $memcpy.i8(cmdloc_dummy_var_59, cmdloc_dummy_var_60, $p19, poseidon_frontend_ops, 752, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_61;
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    $p20 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(952, 1)), $mul.ref(0, 1));
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(952, 1)), $mul.ref(272, 1));
    goto corral_source_split_6812;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1087} $i22 := dvb_register_frontend($p20, $p21);
    call {:si_unique_call 1088} {:cexpr "ret"} boogie_si_record_i32($i22);
    goto corral_source_split_6813;

  corral_source_split_6813:
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i22, 0);
    goto corral_source_split_6814;

  corral_source_split_6814:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    $p25 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(952, 1)), $mul.ref(1720, 1));
    $p27 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(952, 1)), $mul.ref(1720, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6821;

  corral_source_split_6821:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, 5);
    goto corral_source_split_6822;

  corral_source_split_6822:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(952, 1)), $mul.ref(1720, 1)), $mul.ref(152, 1));
    goto corral_source_split_6823;

  corral_source_split_6823:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p29, $p1);
    $p30 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(952, 1)), $mul.ref(1720, 1)), $mul.ref(160, 1));
    goto corral_source_split_6824;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, 64);
    $p31 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(952, 1)), $mul.ref(1720, 1)), $mul.ref(164, 1));
    goto corral_source_split_6825;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, 64);
    $p32 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(952, 1)), $mul.ref(1720, 1)), $mul.ref(168, 1));
    goto corral_source_split_6826;

  corral_source_split_6826:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p32, pd_start_feed);
    $p33 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(952, 1)), $mul.ref(1720, 1)), $mul.ref(176, 1));
    goto corral_source_split_6827;

  corral_source_split_6827:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p33, pd_stop_feed);
    $p34 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(952, 1)), $mul.ref(1720, 1)), $mul.ref(184, 1));
    goto corral_source_split_6828;

  corral_source_split_6828:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p34, $0.ref);
    goto corral_source_split_6829;

  corral_source_split_6829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1090} $i35 := dvb_dmx_init($p25);
    call {:si_unique_call 1091} {:cexpr "ret"} boogie_si_record_i32($i35);
    goto corral_source_split_6830;

  corral_source_split_6830:
    assume {:verifier.code 0} true;
    $i36 := $slt.i32($i35, 0);
    goto corral_source_split_6831;

  corral_source_split_6831:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    $p39 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(952, 1)), $mul.ref(1720, 1)), $mul.ref(160, 1));
    goto corral_source_split_6838;

  corral_source_split_6838:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    $p42 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(952, 1)), $mul.ref(1224, 1)), $mul.ref(32, 1));
    goto corral_source_split_6839;

  corral_source_split_6839:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p42, $i40);
    $p44 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(952, 1)), $mul.ref(1720, 1)), $mul.ref(0, 1));
    $p46 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(952, 1)), $mul.ref(1224, 1)), $mul.ref(24, 1));
    goto corral_source_split_6840;

  corral_source_split_6840:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p46, $p44);
    $p48 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(952, 1)), $mul.ref(1224, 1)), $mul.ref(36, 1));
    goto corral_source_split_6841;

  corral_source_split_6841:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p48, 0);
    $p49 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(952, 1)), $mul.ref(1224, 1));
    $p50 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(952, 1)), $mul.ref(0, 1));
    goto corral_source_split_6842;

  corral_source_split_6842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1093} $i51 := dvb_dmxdev_init($p49, $p50);
    call {:si_unique_call 1094} {:cexpr "ret"} boogie_si_record_i32($i51);
    goto corral_source_split_6843;

  corral_source_split_6843:
    assume {:verifier.code 0} true;
    $i52 := $slt.i32($i51, 0);
    goto corral_source_split_6844;

  corral_source_split_6844:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i53 := 0;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_6848;

  corral_source_split_6848:
    assume {:verifier.code 0} true;
    $r := $i53;
    return;

  $bb16:
    assume $i52 == 1;
    goto corral_source_split_6846;

  corral_source_split_6846:
    assume {:verifier.code 0} true;
    $i37 := $i51;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(952, 1)), $mul.ref(272, 1));
    goto corral_source_split_6835;

  corral_source_split_6835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1092} vslice_dummy_var_239 := dvb_unregister_frontend($p54);
    goto corral_source_split_6836;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    $i24 := $i37;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(952, 1)), $mul.ref(0, 1));
    goto corral_source_split_6818;

  corral_source_split_6818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1089} vslice_dummy_var_238 := dvb_unregister_adapter($p56);
    goto corral_source_split_6819;

  corral_source_split_6819:
    assume {:verifier.code 0} true;
    $i9 := $i24;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6799;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    $i53 := $i9;
    goto $bb19;

  $bb12:
    assume $i36 == 1;
    goto corral_source_split_6833;

  corral_source_split_6833:
    assume {:verifier.code 0} true;
    $i37 := $i35;
    goto $bb14;

  $bb8:
    assume $i23 == 1;
    goto corral_source_split_6816;

  corral_source_split_6816:
    assume {:verifier.code 0} true;
    $i24 := $i22;
    goto $bb10;

  $bb5:
    assume $i13 == 1;
    $p15 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(952, 1)), $mul.ref(272, 1)), $mul.ref(0, 1));
    goto corral_source_split_6805;

  corral_source_split_6805:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_6806;

  corral_source_split_6806:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_56 := $M.0;
    cmdloc_dummy_var_57 := $M.0;
    call {:si_unique_call 1085} cmdloc_dummy_var_58 := $memcpy.i8(cmdloc_dummy_var_56, cmdloc_dummy_var_57, $p16, poseidon_frontend_ops, 752, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_58;
    goto corral_source_split_6807;

  corral_source_split_6807:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_6797;

  corral_source_split_6797:
    assume {:verifier.code 0} true;
    $i9 := $i7;
    goto $bb3;
}



const device_init_wakeup: ref;

axiom device_init_wakeup == $sub.ref(0, 536171);

procedure device_init_wakeup($p0: ref, $i1: i1) returns ($r: i32);
  free requires assertsPassed;



implementation device_init_wakeup($p0: ref, $i1: i1) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1095} {:cexpr "device_init_wakeup:arg:arg1"} boogie_si_record_i1($i1);
    goto corral_source_split_6850;

  corral_source_split_6850:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1096} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1097} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_6851;

  corral_source_split_6851:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const pm_runtime_set_autosuspend_delay: ref;

axiom pm_runtime_set_autosuspend_delay == $sub.ref(0, 537203);

procedure pm_runtime_set_autosuspend_delay($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation pm_runtime_set_autosuspend_delay($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1098} {:cexpr "pm_runtime_set_autosuspend_delay:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_6853;

  corral_source_split_6853:
    assume {:verifier.code 0} true;
    return;
}



const usb_enable_autosuspend: ref;

axiom usb_enable_autosuspend == $sub.ref(0, 538235);

procedure usb_enable_autosuspend($p0: ref);
  free requires assertsPassed;



implementation usb_enable_autosuspend($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6855;

  corral_source_split_6855:
    assume {:verifier.code 0} true;
    return;
}



const hibernation_resume: ref;

axiom hibernation_resume == $sub.ref(0, 539267);

procedure hibernation_resume($p0: ref);



const get_autopm_ref: ref;

axiom get_autopm_ref == $sub.ref(0, 540299);

procedure get_autopm_ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation get_autopm_ref($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $p5: ref;
  var $i6: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6857;

  corral_source_split_6857:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(952, 1)), $mul.ref(2672, 1));
    goto corral_source_split_6858;

  corral_source_split_6858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1099} $i3 := atomic_read($p2);
    call {:si_unique_call 1100} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_6859;

  corral_source_split_6859:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(536, 1)), $mul.ref(196, 1));
    goto corral_source_split_6860;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_6861;

  corral_source_split_6861:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(816, 1)), $mul.ref(32, 1));
    goto corral_source_split_6862;

  corral_source_split_6862:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_6863;

  corral_source_split_6863:
    assume {:verifier.code 0} true;
    $i10 := $add.i32($i6, $i9);
    goto corral_source_split_6864;

  corral_source_split_6864:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(856, 1)), $mul.ref(60, 1));
    goto corral_source_split_6865;

  corral_source_split_6865:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_6866;

  corral_source_split_6866:
    assume {:verifier.code 0} true;
    $i14 := $add.i32($i10, $i13);
    goto corral_source_split_6867;

  corral_source_split_6867:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i14, $i3);
    goto corral_source_split_6868;

  corral_source_split_6868:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(928, 1)), $mul.ref(4, 1));
    goto corral_source_split_6869;

  corral_source_split_6869:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_6870;

  corral_source_split_6870:
    assume {:verifier.code 0} true;
    $i19 := $add.i32($i15, $i18);
    goto corral_source_split_6871;

  corral_source_split_6871:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;
}



const atomic_set: ref;

axiom atomic_set == $sub.ref(0, 541331);

procedure atomic_set($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation atomic_set($p0: ref, $i1: i32)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1101} {:cexpr "atomic_set:arg:i"} boogie_si_record_i32($i1);
    goto corral_source_split_6873;

  corral_source_split_6873:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_6874;

  corral_source_split_6874:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i1);
    goto corral_source_split_6875;

  corral_source_split_6875:
    assume {:verifier.code 0} true;
    return;
}



const dvb_register_adapter: ref;

axiom dvb_register_adapter == $sub.ref(0, 542363);

procedure dvb_register_adapter($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dvb_register_adapter($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6877;

  corral_source_split_6877:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1102} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 1103} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    goto corral_source_split_6878;

  corral_source_split_6878:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const dvb_register_frontend: ref;

axiom dvb_register_frontend == $sub.ref(0, 543395);

procedure dvb_register_frontend($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dvb_register_frontend($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6880;

  corral_source_split_6880:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1104} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1105} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_6881;

  corral_source_split_6881:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const pd_start_feed: ref;

axiom pd_start_feed == $sub.ref(0, 544427);

procedure pd_start_feed($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $CurrAddr, assertsPassed, $M.31;



implementation pd_start_feed($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i32;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6883;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4504)), $mul.ref(4384, 1));
    goto corral_source_split_6884;

  corral_source_split_6884:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_6885;

  corral_source_split_6885:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 952)), $mul.ref(152, 1));
    goto corral_source_split_6886;

  corral_source_split_6886:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_6887;

  corral_source_split_6887:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_6888;

  corral_source_split_6888:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_6889;

  corral_source_split_6889:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_6890;

  corral_source_split_6890:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 2784)), $mul.ref(2676, 1));
    goto corral_source_split_6896;

  corral_source_split_6896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1106} $i10 := atomic_add_return(1, $p9);
    goto SeqInstr_373, SeqInstr_374;

  SeqInstr_374:
    assume assertsPassed;
    goto SeqInstr_375;

  SeqInstr_375:
    call {:si_unique_call 1107} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_6897;

  corral_source_split_6897:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 1);
    goto corral_source_split_6898;

  corral_source_split_6898:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_6903;

  corral_source_split_6903:
    assume {:verifier.code 0} true;
    $i8 := $i13;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6894;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_6900;

  corral_source_split_6900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1108} $i12 := dvb_start_streaming($p5);
    goto SeqInstr_376, SeqInstr_377;

  SeqInstr_377:
    assume assertsPassed;
    goto SeqInstr_378;

  SeqInstr_378:
    call {:si_unique_call 1109} {:cexpr "ret"} boogie_si_record_i32($i12);
    goto corral_source_split_6901;

  corral_source_split_6901:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb7;

  SeqInstr_376:
    assume !assertsPassed;
    return;

  SeqInstr_373:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_6892;

  corral_source_split_6892:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 1);
    goto $bb3;
}



const pd_stop_feed: ref;

axiom pd_stop_feed == $sub.ref(0, 545459);

procedure pd_stop_feed($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $CurrAddr, assertsPassed;



implementation pd_stop_feed($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6905;

  corral_source_split_6905:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4504)), $mul.ref(4384, 1));
    goto corral_source_split_6906;

  corral_source_split_6906:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_6907;

  corral_source_split_6907:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 952)), $mul.ref(152, 1));
    goto corral_source_split_6908;

  corral_source_split_6908:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_6909;

  corral_source_split_6909:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_6910;

  corral_source_split_6910:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_6911;

  corral_source_split_6911:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_6912;

  corral_source_split_6912:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 2784)), $mul.ref(2676, 1));
    goto corral_source_split_6918;

  corral_source_split_6918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1110} $i10 := atomic_dec_and_test($p9);
    call {:si_unique_call 1111} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_6919;

  corral_source_split_6919:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_6920;

  corral_source_split_6920:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6916;

  corral_source_split_6916:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_6922;

  corral_source_split_6922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1112} dvb_stop_streaming($p5);
    goto SeqInstr_379, SeqInstr_380;

  SeqInstr_380:
    assume assertsPassed;
    goto SeqInstr_381;

  SeqInstr_381:
    goto corral_source_split_6923;

  corral_source_split_6923:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_379:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_6914;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 1);
    goto $bb3;
}



const dvb_dmx_init: ref;

axiom dvb_dmx_init == $sub.ref(0, 546491);

procedure dvb_dmx_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dvb_dmx_init($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6925;

  corral_source_split_6925:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1113} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1114} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_6926;

  corral_source_split_6926:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const dvb_dmxdev_init: ref;

axiom dvb_dmxdev_init == $sub.ref(0, 547523);

procedure dvb_dmxdev_init($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dvb_dmxdev_init($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6928;

  corral_source_split_6928:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1115} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1116} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_6929;

  corral_source_split_6929:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const atomic_add_return: ref;

axiom atomic_add_return == $sub.ref(0, 548555);

procedure atomic_add_return($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.31, assertsPassed;



implementation atomic_add_return($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1117} {:cexpr "atomic_add_return:arg:i"} boogie_si_record_i32($i0);
    call {:si_unique_call 1118} {:cexpr "atomic_add_return:arg:__i"} boogie_si_record_i32($i0);
    goto corral_source_split_6931;

  corral_source_split_6931:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 1119} $i3 := devirtbounce.5(0, $p2, $i0, $p2);
    goto SeqInstr_382, SeqInstr_383;

  SeqInstr_383:
    assume assertsPassed;
    goto SeqInstr_384;

  SeqInstr_384:
    call {:si_unique_call 1120} {:cexpr "i"} boogie_si_record_i32($i3);
    goto corral_source_split_6932;

  corral_source_split_6932:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, $i0);
    goto corral_source_split_6933;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_382:
    assume !assertsPassed;
    return;
}



const vdev_init: ref;

axiom vdev_init == $sub.ref(0, 549587);

procedure vdev_init($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation vdev_init($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p5: ref;
  var cmdloc_dummy_var_62: [ref]i8;
  var cmdloc_dummy_var_63: [ref]i8;
  var cmdloc_dummy_var_64: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6935;

  corral_source_split_6935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1121} $p2 := video_device_alloc();
    goto corral_source_split_6936;

  corral_source_split_6936:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_6937;

  corral_source_split_6937:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_6938;

  corral_source_split_6938:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p2);
    goto corral_source_split_6944;

  corral_source_split_6944:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p1);
    goto corral_source_split_6945;

  corral_source_split_6945:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_62 := $M.0;
    cmdloc_dummy_var_63 := $M.0;
    call {:si_unique_call 1122} cmdloc_dummy_var_64 := $memcpy.i8(cmdloc_dummy_var_62, cmdloc_dummy_var_63, $p6, $p7, 1328, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_64;
    goto corral_source_split_6946;

  corral_source_split_6946:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 1328)), $mul.ref(1164, 1));
    goto corral_source_split_6947;

  corral_source_split_6947:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $sub.i32(0, 1));
    goto corral_source_split_6948;

  corral_source_split_6948:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(192, 1));
    goto corral_source_split_6949;

  corral_source_split_6949:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 1328)), $mul.ref(1112, 1));
    goto corral_source_split_6950;

  corral_source_split_6950:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, $p9);
    goto corral_source_split_6951;

  corral_source_split_6951:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 1328)), $mul.ref(1304, 1));
    goto corral_source_split_6952;

  corral_source_split_6952:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, video_device_release);
    goto corral_source_split_6953;

  corral_source_split_6953:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p0);
    goto corral_source_split_6954;

  corral_source_split_6954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1123} video_set_drvdata($p2, $p12);
    goto corral_source_split_6955;

  corral_source_split_6955:
    assume {:verifier.code 0} true;
    $p5 := $p2;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6942;

  corral_source_split_6942:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_6940;

  corral_source_split_6940:
    assume {:verifier.code 0} true;
    $p5 := $0.ref;
    goto $bb3;
}



const video_register_device: ref;

axiom video_register_device == $sub.ref(0, 550619);

procedure video_register_device($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation video_register_device($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1124} {:cexpr "video_register_device:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1125} {:cexpr "video_register_device:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_6957;

  corral_source_split_6957:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1126} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1127} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_6958;

  corral_source_split_6958:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const video_device_alloc: ref;

axiom video_device_alloc == $sub.ref(0, 551651);

procedure video_device_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation video_device_alloc() returns ($r: ref)
{
  var $p0: ref;
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6960;

  corral_source_split_6960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1128} $p0 := external_alloc();
    goto corral_source_split_6961;

  corral_source_split_6961:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_6962;

  corral_source_split_6962:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const video_set_drvdata: ref;

axiom video_set_drvdata == $sub.ref(0, 552683);

procedure video_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation video_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6964;

  corral_source_split_6964:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1328)), $mul.ref(8, 1));
    goto corral_source_split_6965;

  corral_source_split_6965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1129} dev_set_drvdata($p2, $p1);
    goto corral_source_split_6966;

  corral_source_split_6966:
    assume {:verifier.code 0} true;
    return;
}



const snd_card_create: ref;

axiom snd_card_create == $sub.ref(0, 553715);

procedure snd_card_create($i0: i32, $p1: ref, $p2: ref, $i3: i32, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation snd_card_create($i0: i32, $p1: ref, $p2: ref, $i3: i32, $p4: ref) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1130} {:cexpr "snd_card_create:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 1131} {:cexpr "snd_card_create:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_6968;

  corral_source_split_6968:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1132} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 1133} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    goto corral_source_split_6969;

  corral_source_split_6969:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const snd_pcm_new: ref;

axiom snd_pcm_new == $sub.ref(0, 554747);

procedure snd_pcm_new($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32, $p5: ref) returns ($r: i32);
  free requires assertsPassed;



implementation snd_pcm_new($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32, $p5: ref) returns ($r: i32)
{
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1134} {:cexpr "snd_pcm_new:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 1135} {:cexpr "snd_pcm_new:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 1136} {:cexpr "snd_pcm_new:arg:arg4"} boogie_si_record_i32($i4);
    goto corral_source_split_6971;

  corral_source_split_6971:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1137} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 1138} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    goto corral_source_split_6972;

  corral_source_split_6972:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const snd_pcm_set_ops: ref;

axiom snd_pcm_set_ops == $sub.ref(0, 555779);

procedure snd_pcm_set_ops($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;



implementation snd_pcm_set_ops($p0: ref, $i1: i32, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1139} {:cexpr "snd_pcm_set_ops:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_6974;

  corral_source_split_6974:
    assume {:verifier.code 0} true;
    return;
}



const snd_card_register: ref;

axiom snd_card_register == $sub.ref(0, 556811);

procedure snd_card_register($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation snd_card_register($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6976;

  corral_source_split_6976:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1140} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1141} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_6977;

  corral_source_split_6977:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const kobject_name: ref;

axiom kobject_name == $sub.ref(0, 557843);

procedure kobject_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation kobject_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6979;

  corral_source_split_6979:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_6980;

  corral_source_split_6980:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_6981;

  corral_source_split_6981:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const fixup: ref;

axiom fixup == $sub.ref(0, 558875);

procedure fixup($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation fixup($p0: ref) returns ($r: ref)
{
  var $i1: i32;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i9: i32;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p19: ref;
  var $i20: i32;
  var vslice_dummy_var_240: i32;
  var vslice_dummy_var_241: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6983;

  corral_source_split_6983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1142} $i1 := get_autopm_ref($p0);
    call {:si_unique_call 1143} {:cexpr "count"} boogie_si_record_i32($i1);
    goto corral_source_split_6984;

  corral_source_split_6984:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(520, 1));
    goto corral_source_split_6985;

  corral_source_split_6985:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_6986;

  corral_source_split_6986:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 1232)), $mul.ref(1144, 1));
    goto corral_source_split_6987;

  corral_source_split_6987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1144} $i5 := atomic_read($p4);
    call {:si_unique_call 1145} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_6988;

  corral_source_split_6988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1146} vslice_dummy_var_240 := printk.ref.ref.i32.i32.i32(.str.96, .str.97, 377, $i1, $i5);
    goto corral_source_split_6989;

  corral_source_split_6989:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32($i1, 1);
    call {:si_unique_call 1147} {:cexpr "count"} boogie_si_record_i32($i7);
    goto corral_source_split_6990;

  corral_source_split_6990:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i1, 0);
    goto corral_source_split_6991;

  corral_source_split_6991:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(512, 1));
    goto corral_source_split_7005;

  corral_source_split_7005:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_7006;

  corral_source_split_7006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1150} usb_put_dev($p15);
    goto corral_source_split_7007;

  corral_source_split_7007:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(520, 1));
    goto corral_source_split_7008;

  corral_source_split_7008:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_7009;

  corral_source_split_7009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1151} usb_put_intf($p17);
    goto corral_source_split_7010;

  corral_source_split_7010:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(3768, 1)), $mul.ref(0, 1));
    goto corral_source_split_7011;

  corral_source_split_7011:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_7012;

  corral_source_split_7012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1152} vslice_dummy_var_241 := printk.ref.ref.i32.i32(.str.98, .str.97, 384, $i20);
    goto corral_source_split_7013;

  corral_source_split_7013:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_6993;

  corral_source_split_6993:
    assume {:verifier.code 0} true;
    $i9 := $i7;
    goto $bb4;

  $bb4:
    call $p10, $p11, $i12, $i13, $i9 := fixup_loop_$bb4($p0, $p10, $p11, $i12, $i13, $i9);
    goto $bb4_last;

  corral_source_split_6995:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 3864)), $mul.ref(520, 1));
    goto corral_source_split_6997;

  corral_source_split_6997:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_6998;

  corral_source_split_6998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1148} usb_autopm_put_interface($p11);
    goto corral_source_split_6999;

  corral_source_split_6999:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32($i9, 1);
    call {:si_unique_call 1149} {:cexpr "count"} boogie_si_record_i32($i12);
    goto corral_source_split_7000;

  corral_source_split_7000:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i9, 0);
    goto corral_source_split_7001;

  corral_source_split_7001:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i13 == 1);
    goto corral_source_split_7003;

  corral_source_split_7003:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i9 := $i12;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6995;
}



const llvm.prefetch: ref;

axiom llvm.prefetch == $sub.ref(0, 559907);

procedure llvm.prefetch($p0: ref, $i1: i32, $i2: i32, $i3: i32);



const firmware_download: ref;

axiom firmware_download == $sub.ref(0, 560939);

procedure firmware_download($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.37, $M.41, $CurrAddr;



implementation firmware_download($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p20: ref;
  var $p21: ref;
  var $p23: ref;
  var $i24: i16;
  var $i25: i64;
  var $i26: i32;
  var $i28: i1;
  var $i31: i64;
  var $i32: i32;
  var $i33: i32;
  var $p34: ref;
  var $i35: i1;
  var $i36: i64;
  var $i37: i32;
  var $i38: i32;
  var $i39: i1;
  var $i40: i32;
  var $i42: i64;
  var $i43: i1;
  var $i30: i64;
  var $i44: i32;
  var $i29: i32;
  var $i41: i32;
  var $i18: i32;
  var $p45: ref;
  var $i8: i32;
  var vslice_dummy_var_242: i32;
  var vslice_dummy_var_243: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1153} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1154} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_7015;

  corral_source_split_7015:
    assume {:verifier.code 0} true;
    $M.37 := $store.ref($M.37, $p2, $0.ref);
    goto corral_source_split_7016;

  corral_source_split_7016:
    assume {:verifier.code 0} true;
    $p3 := $M.38;
    goto corral_source_split_7017;

  corral_source_split_7017:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1904)), $mul.ref(136, 1));
    goto corral_source_split_7018;

  corral_source_split_7018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1155} $i5 := request_firmware($p2, $p3, $p4);
    call {:si_unique_call 1156} {:cexpr "ret"} boogie_si_record_i32($i5);
    goto corral_source_split_7019;

  corral_source_split_7019:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_7020;

  corral_source_split_7020:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.37, $p2);
    goto corral_source_split_7027;

  corral_source_split_7027:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_7028;

  corral_source_split_7028:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.39, $p10);
    call {:si_unique_call 1158} {:cexpr "fwlength"} boogie_si_record_i64($i11);
    goto corral_source_split_7029;

  corral_source_split_7029:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.37, $p2);
    goto corral_source_split_7030;

  corral_source_split_7030:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_7031;

  corral_source_split_7031:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.40, $p13);
    goto corral_source_split_7032;

  corral_source_split_7032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1159} $p15 := kmemdup($p14, $i11, 208);
    goto corral_source_split_7033;

  corral_source_split_7033:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_7034;

  corral_source_split_7034:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i16, 0);
    goto corral_source_split_7035;

  corral_source_split_7035:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1904)), $mul.ref(1392, 1)), $mul.ref(1, 8));
    goto corral_source_split_7043;

  corral_source_split_7043:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_7044;

  corral_source_split_7044:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_7045;

  corral_source_split_7045:
    assume {:verifier.code 0} true;
    $i24 := $load.i16($M.0, $p23);
    goto corral_source_split_7046;

  corral_source_split_7046:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i64($i24);
    call {:si_unique_call 1161} {:cexpr "max_packet_size"} boogie_si_record_i64($i25);
    goto corral_source_split_7047;

  corral_source_split_7047:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i64.i32($i25);
    goto corral_source_split_7048;

  corral_source_split_7048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1162} vslice_dummy_var_243 := printk.ref.ref.i32.i32(.str.94, .str.93, 333, $i26);
    goto corral_source_split_7049;

  corral_source_split_7049:
    assume {:verifier.code 0} true;
    $i28 := $ult.i64(0, $i11);
    goto corral_source_split_7050;

  corral_source_split_7050:
    assume {:verifier.code 0} true;
    $i29 := $i5;
    assume {:branchcond $i28} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i41 := $i29;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_7074;

  corral_source_split_7074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1168} kfree($p15);
    goto corral_source_split_7075;

  corral_source_split_7075:
    assume {:verifier.code 0} true;
    $i18 := $i41;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_7039;

  corral_source_split_7039:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.37, $p2);
    goto corral_source_split_7040;

  corral_source_split_7040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1160} release_firmware($p45);
    goto corral_source_split_7041;

  corral_source_split_7041:
    assume {:verifier.code 0} true;
    $i8 := $i18;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7025;

  corral_source_split_7025:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb9:
    assume $i28 == 1;
    goto corral_source_split_7052;

  corral_source_split_7052:
    assume {:verifier.code 0} true;
    $i30 := 0;
    goto $bb12;

  $bb12:
    call $i31, $i32, $i33, $p34, $i35, $i36, $i37, $i38, $i39, $i40, $i42, $i43, $i30, $i44 := firmware_download_loop_$bb12($p0, $p1, $i11, $p15, $i25, $i31, $i32, $i33, $p34, $i35, $i36, $i37, $i38, $i39, $i40, $i42, $i43, $i30, $i44);
    goto $bb12_last;

  corral_source_split_7054:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $M.41 := $store.i32($M.41, $p1, 0);
    goto corral_source_split_7056;

  corral_source_split_7056:
    assume {:verifier.code 0} true;
    $i31 := $sub.i64($i11, $i30);
    call {:si_unique_call 1163} {:cexpr "_min2"} boogie_si_record_i64($i31);
    goto corral_source_split_7057;

  corral_source_split_7057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1164} $i32 := __create_pipe($p0, 1);
    call {:si_unique_call 1165} {:cexpr "tmp"} boogie_si_record_i32($i32);
    goto corral_source_split_7058;

  corral_source_split_7058:
    assume {:verifier.code 0} true;
    $i33 := $or.i32($i32, $sub.i32(0, 1073741824));
    goto corral_source_split_7059;

  corral_source_split_7059:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($p15, $mul.ref($i30, 1));
    goto corral_source_split_7060;

  corral_source_split_7060:
    assume {:verifier.code 0} true;
    $i35 := $ult.i64($i25, $i31);
    goto corral_source_split_7061;

  corral_source_split_7061:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i35 == 1);
    goto corral_source_split_7065;

  corral_source_split_7065:
    assume {:verifier.code 0} true;
    $i36 := $i31;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_7067;

  corral_source_split_7067:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i64.i32($i36);
    goto corral_source_split_7068;

  corral_source_split_7068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1166} $i38 := usb_bulk_msg($p0, $i33, $p34, $i37, $p1, 2500);
    call {:si_unique_call 1167} {:cexpr "ret"} boogie_si_record_i32($i38);
    goto corral_source_split_7069;

  corral_source_split_7069:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_7070;

  corral_source_split_7070:
    assume {:verifier.code 0} true;
    $i40 := $i38;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i42 := $add.i64($i30, $i25);
    call {:si_unique_call 1169} {:cexpr "offset"} boogie_si_record_i64($i42);
    goto corral_source_split_7077;

  corral_source_split_7077:
    assume {:verifier.code 0} true;
    $i43 := $ult.i64($i42, $i11);
    goto corral_source_split_7078;

  corral_source_split_7078:
    assume {:verifier.code 0} true;
    $i44 := $i38;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_7080;

  corral_source_split_7080:
    assume {:verifier.code 0} true;
    $i29 := $i44;
    goto $bb11;

  $bb21:
    assume $i43 == 1;
    assume {:verifier.code 0} true;
    $i30 := $i42;
    goto $bb21_dummy;

  $bb17:
    assume $i39 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_7072;

  corral_source_split_7072:
    assume {:verifier.code 0} true;
    $i41 := $i40;
    goto $bb19;

  $bb14:
    assume $i35 == 1;
    goto corral_source_split_7063;

  corral_source_split_7063:
    assume {:verifier.code 0} true;
    $i36 := $i25;
    goto $bb16;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_7037;

  corral_source_split_7037:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 12);
    goto $bb7;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_7022;

  corral_source_split_7022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1157} vslice_dummy_var_242 := printk.ref.ref.i32.i32(.str.92, .str.93, 320, $i5);
    goto corral_source_split_7023;

  corral_source_split_7023:
    assume {:verifier.code 0} true;
    $i8 := $i5;
    goto $bb3;

  $bb21_dummy:
    assume false;
    return;

  $bb12_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_7054;
}



const request_firmware: ref;

axiom request_firmware == $sub.ref(0, 561971);

procedure request_firmware($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation request_firmware($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7082;

  corral_source_split_7082:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1170} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1171} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_7083;

  corral_source_split_7083:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const kmemdup: ref;

axiom kmemdup == $sub.ref(0, 563003);

procedure kmemdup($p0: ref, $i1: i64, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation kmemdup($p0: ref, $i1: i64, $i2: i32) returns ($r: ref)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1172} {:cexpr "kmemdup:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 1173} {:cexpr "kmemdup:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_7085;

  corral_source_split_7085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1174} $p3 := external_alloc();
    goto corral_source_split_7086;

  corral_source_split_7086:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const usb_bulk_msg: ref;

axiom usb_bulk_msg == $sub.ref(0, 564035);

procedure usb_bulk_msg($p0: ref, $i1: i32, $p2: ref, $i3: i32, $p4: ref, $i5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_bulk_msg($p0: ref, $i1: i32, $p2: ref, $i3: i32, $p4: ref, $i5: i32) returns ($r: i32)
{
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1175} {:cexpr "usb_bulk_msg:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1176} {:cexpr "usb_bulk_msg:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 1177} {:cexpr "usb_bulk_msg:arg:arg5"} boogie_si_record_i32($i5);
    goto corral_source_split_7088;

  corral_source_split_7088:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1178} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 1179} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    goto corral_source_split_7089;

  corral_source_split_7089:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const release_firmware: ref;

axiom release_firmware == $sub.ref(0, 565067);

procedure release_firmware($p0: ref);
  free requires assertsPassed;



implementation release_firmware($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7091;

  corral_source_split_7091:
    assume {:verifier.code 0} true;
    return;
}



const ldv_zalloc: ref;

axiom ldv_zalloc == $sub.ref(0, 566099);

procedure ldv_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_zalloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1180} {:cexpr "ldv_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_7093;

  corral_source_split_7093:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1181} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1182} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 1183} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_7094;

  corral_source_split_7094:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_7095;

  corral_source_split_7095:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_7099;

  corral_source_split_7099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1184} $p4 := calloc(1, $i0);
    goto corral_source_split_7100;

  corral_source_split_7100:
    assume {:verifier.code 1} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_7101;

  corral_source_split_7101:
    assume {:verifier.code 1} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_7102;

  corral_source_split_7102:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_7103;

  corral_source_split_7103:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1185} __VERIFIER_assume($i7);
    goto corral_source_split_7104;

  corral_source_split_7104:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7106;

  corral_source_split_7106:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_7097;

  corral_source_split_7097:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const ldv_videobuf_queue_ops_11: ref;

axiom ldv_videobuf_queue_ops_11 == $sub.ref(0, 567131);

procedure ldv_videobuf_queue_ops_11();
  free requires assertsPassed;
  modifies $M.42, $M.43, $M.0, $CurrAddr;



implementation ldv_videobuf_queue_ops_11()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7108;

  corral_source_split_7108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1186} $p0 := ldv_zalloc(624);
    goto corral_source_split_7109;

  corral_source_split_7109:
    assume {:verifier.code 0} true;
    goto corral_source_split_7110;

  corral_source_split_7110:
    assume {:verifier.code 0} true;
    $M.42 := $p0;
    goto corral_source_split_7111;

  corral_source_split_7111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1187} $p2 := ldv_zalloc(248);
    goto corral_source_split_7112;

  corral_source_split_7112:
    assume {:verifier.code 0} true;
    goto corral_source_split_7113;

  corral_source_split_7113:
    assume {:verifier.code 0} true;
    $M.43 := $p2;
    goto corral_source_split_7114;

  corral_source_split_7114:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_v4l2_file_operations_10: ref;

axiom ldv_initialize_v4l2_file_operations_10 == $sub.ref(0, 568163);

procedure ldv_initialize_v4l2_file_operations_10();
  free requires assertsPassed;
  modifies $M.44, $M.0, $CurrAddr;



implementation ldv_initialize_v4l2_file_operations_10()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7116;

  corral_source_split_7116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1188} $p0 := ldv_zalloc(336);
    goto corral_source_split_7117;

  corral_source_split_7117:
    assume {:verifier.code 0} true;
    goto corral_source_split_7118;

  corral_source_split_7118:
    assume {:verifier.code 0} true;
    $M.44 := $p0;
    goto corral_source_split_7119;

  corral_source_split_7119:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_v4l2_ioctl_ops_9: ref;

axiom ldv_initialize_v4l2_ioctl_ops_9 == $sub.ref(0, 569195);

procedure ldv_initialize_v4l2_ioctl_ops_9();
  free requires assertsPassed;
  modifies $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.0, $CurrAddr;



implementation ldv_initialize_v4l2_ioctl_ops_9()
{
  var $p0: ref;
  var $p2: ref;
  var $p4: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7121;

  corral_source_split_7121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1189} $p0 := ldv_zalloc(336);
    goto corral_source_split_7122;

  corral_source_split_7122:
    assume {:verifier.code 0} true;
    goto corral_source_split_7123;

  corral_source_split_7123:
    assume {:verifier.code 0} true;
    $M.45 := $p0;
    goto corral_source_split_7124;

  corral_source_split_7124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1190} $p2 := ldv_zalloc(52);
    goto corral_source_split_7125;

  corral_source_split_7125:
    assume {:verifier.code 0} true;
    goto corral_source_split_7126;

  corral_source_split_7126:
    assume {:verifier.code 0} true;
    $M.46 := $p2;
    goto corral_source_split_7127;

  corral_source_split_7127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1191} $p4 := ldv_zalloc(208);
    goto corral_source_split_7128;

  corral_source_split_7128:
    assume {:verifier.code 0} true;
    goto corral_source_split_7129;

  corral_source_split_7129:
    assume {:verifier.code 0} true;
    $M.47 := $p4;
    goto corral_source_split_7130;

  corral_source_split_7130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1192} $p6 := ldv_zalloc(44);
    goto corral_source_split_7131;

  corral_source_split_7131:
    assume {:verifier.code 0} true;
    goto corral_source_split_7132;

  corral_source_split_7132:
    assume {:verifier.code 0} true;
    $M.48 := $p6;
    goto corral_source_split_7133;

  corral_source_split_7133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1193} $p8 := ldv_zalloc(84);
    goto corral_source_split_7134;

  corral_source_split_7134:
    assume {:verifier.code 0} true;
    goto corral_source_split_7135;

  corral_source_split_7135:
    assume {:verifier.code 0} true;
    $M.49 := $p8;
    goto corral_source_split_7136;

  corral_source_split_7136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1194} $p10 := ldv_zalloc(88);
    goto corral_source_split_7137;

  corral_source_split_7137:
    assume {:verifier.code 0} true;
    goto corral_source_split_7138;

  corral_source_split_7138:
    assume {:verifier.code 0} true;
    $M.50 := $p10;
    goto corral_source_split_7139;

  corral_source_split_7139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1195} $p12 := ldv_zalloc(8);
    goto corral_source_split_7140;

  corral_source_split_7140:
    assume {:verifier.code 0} true;
    goto corral_source_split_7141;

  corral_source_split_7141:
    assume {:verifier.code 0} true;
    $M.51 := $p12;
    goto corral_source_split_7142;

  corral_source_split_7142:
    assume {:verifier.code 0} true;
    return;
}



const ldv_main_exported_8: ref;

axiom ldv_main_exported_8 == $sub.ref(0, 570227);

procedure ldv_main_exported_8();
  free requires assertsPassed;
  modifies $M.52, $M.53, $M.0, $CurrAddr;



implementation ldv_main_exported_8()
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i13: i32;
  var $i14: i32;
  var vslice_dummy_var_244: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7144;

  corral_source_split_7144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1196} $p0 := ldv_zalloc(1328);
    goto corral_source_split_7145;

  corral_source_split_7145:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_7146;

  corral_source_split_7146:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1197} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1198} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 1199} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i2, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i2, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1206} ldv_stop();
    goto corral_source_split_7170;

  corral_source_split_7170:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_7148;

  corral_source_split_7148:
    assume {:verifier.code 0} true;
    $i10 := $M.52;
    goto corral_source_split_7149;

  corral_source_split_7149:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 1);
    goto corral_source_split_7150;

  corral_source_split_7150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb13:
    assume $i11 == 1;
    goto corral_source_split_7163;

  corral_source_split_7163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1203} vslice_dummy_var_244 := ldv_probe_8();
    goto corral_source_split_7164;

  corral_source_split_7164:
    assume {:verifier.code 0} true;
    $M.52 := 2;
    call {:si_unique_call 1204} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_7165;

  corral_source_split_7165:
    assume {:verifier.code 0} true;
    $i13 := $M.53;
    goto corral_source_split_7166;

  corral_source_split_7166:
    assume {:verifier.code 0} true;
    $i14 := $add.i32($i13, 1);
    goto corral_source_split_7167;

  corral_source_split_7167:
    assume {:verifier.code 0} true;
    $M.53 := $i14;
    call {:si_unique_call 1205} {:cexpr "ref_cnt"} boogie_si_record_i32($i14);
    goto corral_source_split_7168;

  corral_source_split_7168:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb2:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i2, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb6;

  $bb7:
    assume $i5 == 1;
    goto corral_source_split_7152;

  corral_source_split_7152:
    assume {:verifier.code 0} true;
    $i6 := $M.52;
    goto corral_source_split_7153;

  corral_source_split_7153:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 2);
    goto corral_source_split_7154;

  corral_source_split_7154:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i7 == 1;
    goto corral_source_split_7156;

  corral_source_split_7156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1200} video_device_release($p1);
    goto corral_source_split_7157;

  corral_source_split_7157:
    assume {:verifier.code 0} true;
    $M.52 := 1;
    call {:si_unique_call 1201} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_7158;

  corral_source_split_7158:
    assume {:verifier.code 0} true;
    $i8 := $M.53;
    goto corral_source_split_7159;

  corral_source_split_7159:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32($i8, 1);
    goto corral_source_split_7160;

  corral_source_split_7160:
    assume {:verifier.code 0} true;
    $M.53 := $i9;
    call {:si_unique_call 1202} {:cexpr "ref_cnt"} boogie_si_record_i32($i9);
    goto corral_source_split_7161;

  corral_source_split_7161:
    assume {:verifier.code 0} true;
    goto $bb11;
}



const ldv_probe_8: ref;

axiom ldv_probe_8 == $sub.ref(0, 571259);

procedure ldv_probe_8() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_probe_8() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7172;

  corral_source_split_7172:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1207} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1208} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_7173;

  corral_source_split_7173:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 572291);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7175;

  corral_source_split_7175:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const ldv_main_exported_11: ref;

axiom ldv_main_exported_11 == $sub.ref(0, 573323);

procedure ldv_main_exported_11();
  free requires assertsPassed;
  modifies $M.54, $M.0, $M.55, $M.53, $M.56, $CurrAddr;



implementation ldv_main_exported_11()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $i41: i1;
  var $i42: i32;
  var $i43: i32;
  var cmdloc_dummy_var_65: [ref]i8;
  var cmdloc_dummy_var_66: [ref]i8;
  var vslice_dummy_var_245: i32;
  var vslice_dummy_var_246: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1209} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_7177;

  corral_source_split_7177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1210} $p1 := ldv_zalloc(4);
    goto corral_source_split_7178;

  corral_source_split_7178:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_7179;

  corral_source_split_7179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1211} $p3 := ldv_zalloc(4);
    goto corral_source_split_7180;

  corral_source_split_7180:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_7181;

  corral_source_split_7181:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_7182;

  corral_source_split_7182:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_65 := $M.54;
    call {:si_unique_call 1212} cmdloc_dummy_var_66 := $memset.i8(cmdloc_dummy_var_65, $p5, 0, 4, $zext.i32.i64(4), 0 == 1);
    $M.54 := cmdloc_dummy_var_66;
    goto corral_source_split_7183;

  corral_source_split_7183:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1213} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 1214} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    call {:si_unique_call 1215} {:cexpr "tmp___1"} boogie_si_record_i32($i6);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i6, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i6, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i6, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1231} ldv_stop();
    goto corral_source_split_7253;

  corral_source_split_7253:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i9 == 1;
    goto corral_source_split_7189;

  corral_source_split_7189:
    assume {:verifier.code 0} true;
    $i34 := $M.55;
    goto corral_source_split_7190;

  corral_source_split_7190:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 1);
    goto corral_source_split_7191;

  corral_source_split_7191:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb29:
    assume $i35 == 1;
    goto corral_source_split_7238;

  corral_source_split_7238:
    assume {:verifier.code 0} true;
    $p36 := $M.42;
    goto corral_source_split_7239;

  corral_source_split_7239:
    assume {:verifier.code 0} true;
    $p37 := $M.43;
    goto corral_source_split_7240;

  corral_source_split_7240:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.54, $p0);
    goto corral_source_split_7241;

  corral_source_split_7241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1227} $i39 := pd_buf_prepare($p36, $p37, $i38);
    goto corral_source_split_7242;

  corral_source_split_7242:
    assume {:verifier.code 0} true;
    $M.56 := $i39;
    call {:si_unique_call 1228} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i39);
    goto corral_source_split_7243;

  corral_source_split_7243:
    assume {:verifier.code 0} true;
    $i40 := $M.56;
    goto corral_source_split_7244;

  corral_source_split_7244:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i40, 0);
    goto corral_source_split_7245;

  corral_source_split_7245:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb31:
    assume $i41 == 1;
    goto corral_source_split_7247;

  corral_source_split_7247:
    assume {:verifier.code 0} true;
    $M.55 := 2;
    call {:si_unique_call 1229} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(2);
    goto corral_source_split_7248;

  corral_source_split_7248:
    assume {:verifier.code 0} true;
    $i42 := $M.53;
    goto corral_source_split_7249;

  corral_source_split_7249:
    assume {:verifier.code 0} true;
    $i43 := $add.i32($i42, 1);
    goto corral_source_split_7250;

  corral_source_split_7250:
    assume {:verifier.code 0} true;
    $M.53 := $i43;
    call {:si_unique_call 1230} {:cexpr "ref_cnt"} boogie_si_record_i32($i43);
    goto corral_source_split_7251;

  corral_source_split_7251:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_7185;

  corral_source_split_7185:
    assume {:verifier.code 0} true;
    $i26 := $M.55;
    goto corral_source_split_7186;

  corral_source_split_7186:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 1);
    goto corral_source_split_7187;

  corral_source_split_7187:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i30 := $M.55;
    goto corral_source_split_7229;

  corral_source_split_7229:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 2);
    goto corral_source_split_7230;

  corral_source_split_7230:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume $i31 == 1;
    goto corral_source_split_7232;

  corral_source_split_7232:
    assume {:verifier.code 0} true;
    $p32 := $M.42;
    goto corral_source_split_7233;

  corral_source_split_7233:
    assume {:verifier.code 0} true;
    $p33 := $M.43;
    goto corral_source_split_7234;

  corral_source_split_7234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1225} pd_buf_queue($p32, $p33);
    goto corral_source_split_7235;

  corral_source_split_7235:
    assume {:verifier.code 0} true;
    $M.55 := 2;
    call {:si_unique_call 1226} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(2);
    goto corral_source_split_7236;

  corral_source_split_7236:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb23:
    assume $i27 == 1;
    goto corral_source_split_7223;

  corral_source_split_7223:
    assume {:verifier.code 0} true;
    $p28 := $M.42;
    goto corral_source_split_7224;

  corral_source_split_7224:
    assume {:verifier.code 0} true;
    $p29 := $M.43;
    goto corral_source_split_7225;

  corral_source_split_7225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1223} pd_buf_queue($p28, $p29);
    goto corral_source_split_7226;

  corral_source_split_7226:
    assume {:verifier.code 0} true;
    $M.55 := 1;
    call {:si_unique_call 1224} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_7227;

  corral_source_split_7227:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb2:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i6, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i10 == 1);
    goto corral_source_split_7193;

  corral_source_split_7193:
    assume {:verifier.code 0} true;
    $i20 := $M.55;
    goto corral_source_split_7194;

  corral_source_split_7194:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 2);
    goto corral_source_split_7195;

  corral_source_split_7195:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i21 == 1;
    goto corral_source_split_7214;

  corral_source_split_7214:
    assume {:verifier.code 0} true;
    $p22 := $M.42;
    goto corral_source_split_7215;

  corral_source_split_7215:
    assume {:verifier.code 0} true;
    $p23 := $M.43;
    goto corral_source_split_7216;

  corral_source_split_7216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1220} pd_buf_release($p22, $p23);
    goto corral_source_split_7217;

  corral_source_split_7217:
    assume {:verifier.code 0} true;
    $M.55 := 1;
    call {:si_unique_call 1221} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_7218;

  corral_source_split_7218:
    assume {:verifier.code 0} true;
    $i24 := $M.53;
    goto corral_source_split_7219;

  corral_source_split_7219:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32($i24, 1);
    goto corral_source_split_7220;

  corral_source_split_7220:
    assume {:verifier.code 0} true;
    $M.53 := $i25;
    call {:si_unique_call 1222} {:cexpr "ref_cnt"} boogie_si_record_i32($i25);
    goto corral_source_split_7221;

  corral_source_split_7221:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i6, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb8;

  $bb11:
    assume $i11 == 1;
    goto corral_source_split_7197;

  corral_source_split_7197:
    assume {:verifier.code 0} true;
    $i12 := $M.55;
    goto corral_source_split_7198;

  corral_source_split_7198:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 1);
    goto corral_source_split_7199;

  corral_source_split_7199:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i16 := $M.55;
    goto corral_source_split_7206;

  corral_source_split_7206:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 2);
    goto corral_source_split_7207;

  corral_source_split_7207:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume $i17 == 1;
    goto corral_source_split_7209;

  corral_source_split_7209:
    assume {:verifier.code 0} true;
    $p18 := $M.42;
    goto corral_source_split_7210;

  corral_source_split_7210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1218} vslice_dummy_var_246 := pd_buf_setup($p18, $p2, $p4);
    goto corral_source_split_7211;

  corral_source_split_7211:
    assume {:verifier.code 0} true;
    $M.55 := 2;
    call {:si_unique_call 1219} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(2);
    goto corral_source_split_7212;

  corral_source_split_7212:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i13 == 1;
    goto corral_source_split_7201;

  corral_source_split_7201:
    assume {:verifier.code 0} true;
    $p14 := $M.42;
    goto corral_source_split_7202;

  corral_source_split_7202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1216} vslice_dummy_var_245 := pd_buf_setup($p14, $p2, $p4);
    goto corral_source_split_7203;

  corral_source_split_7203:
    assume {:verifier.code 0} true;
    $M.55 := 1;
    call {:si_unique_call 1217} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_7204;

  corral_source_split_7204:
    assume {:verifier.code 0} true;
    goto $bb15;
}



const ldv_main_exported_10: ref;

axiom ldv_main_exported_10 == $sub.ref(0, 574355);

procedure ldv_main_exported_10();
  free requires assertsPassed;
  modifies $M.57, $M.0, $M.53, $M.58, $M.3, $M.4, $CurrAddr, assertsPassed;



implementation ldv_main_exported_10()
{
  var $i0: i32;
  var $i1: i64;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $i30: i32;
  var $i31: i32;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $i55: i32;
  var $i56: i32;
  var $i57: i1;
  var $i58: i32;
  var $i59: i32;
  var vslice_dummy_var_247: i32;
  var vslice_dummy_var_248: i32;
  var vslice_dummy_var_249: i32;
  var vslice_dummy_var_250: i64;
  var vslice_dummy_var_251: i64;
  var vslice_dummy_var_252: i64;
  var vslice_dummy_var_253: i32;
  var vslice_dummy_var_254: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7255;

  corral_source_split_7255:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1232} $i0 := __VERIFIER_nondet_uint();
    call {:si_unique_call 1233} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i0);
    call {:si_unique_call 1234} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_7256;

  corral_source_split_7256:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1235} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1236} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    call {:si_unique_call 1237} {:cexpr "tmp___0"} boogie_si_record_i64($i1);
    goto corral_source_split_7257;

  corral_source_split_7257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1238} $p2 := ldv_zalloc(16);
    goto corral_source_split_7258;

  corral_source_split_7258:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_7259;

  corral_source_split_7259:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1239} $i4 := __VERIFIER_nondet_size_t();
    call {:si_unique_call 1240} {:cexpr "smack:ext:__VERIFIER_nondet_size_t"} boogie_si_record_i64($i4);
    call {:si_unique_call 1241} {:cexpr "tmp___2"} boogie_si_record_i64($i4);
    goto corral_source_split_7260;

  corral_source_split_7260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1242} $p5 := ldv_zalloc(184);
    goto corral_source_split_7261;

  corral_source_split_7261:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_7262;

  corral_source_split_7262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1243} $p7 := ldv_zalloc(8);
    goto corral_source_split_7263;

  corral_source_split_7263:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_7264;

  corral_source_split_7264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1244} $p9 := ldv_zalloc(1);
    goto corral_source_split_7265;

  corral_source_split_7265:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1245} $i10 := __VERIFIER_nondet_int();
    call {:si_unique_call 1246} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i10);
    call {:si_unique_call 1247} {:cexpr "tmp___6"} boogie_si_record_i32($i10);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i10, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i10, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i10, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i10, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1269} ldv_stop();
    goto corral_source_split_7356;

  corral_source_split_7356:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_7275;

  corral_source_split_7275:
    assume {:verifier.code 0} true;
    $i52 := $M.57;
    goto corral_source_split_7276;

  corral_source_split_7276:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i52, 1);
    goto corral_source_split_7277;

  corral_source_split_7277:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb42:
    assume $i53 == 1;
    goto corral_source_split_7343;

  corral_source_split_7343:
    assume {:verifier.code 0} true;
    $p54 := $M.44;
    goto corral_source_split_7344;

  corral_source_split_7344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1265} $i55 := pd_video_open($p54);
    goto SeqInstr_388, SeqInstr_389;

  SeqInstr_389:
    assume assertsPassed;
    goto SeqInstr_390;

  SeqInstr_390:
    goto corral_source_split_7345;

  corral_source_split_7345:
    assume {:verifier.code 0} true;
    $M.58 := $i55;
    call {:si_unique_call 1266} {:cexpr "ldv_retval_9"} boogie_si_record_i32($i55);
    goto corral_source_split_7346;

  corral_source_split_7346:
    assume {:verifier.code 0} true;
    $i56 := $M.58;
    goto corral_source_split_7347;

  corral_source_split_7347:
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i56, 0);
    goto corral_source_split_7348;

  corral_source_split_7348:
    assume {:verifier.code 0} true;
    assume {:branchcond $i57} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb44:
    assume $i57 == 1;
    goto corral_source_split_7350;

  corral_source_split_7350:
    assume {:verifier.code 0} true;
    $M.57 := 2;
    call {:si_unique_call 1267} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(2);
    goto corral_source_split_7351;

  corral_source_split_7351:
    assume {:verifier.code 0} true;
    $i58 := $M.53;
    goto corral_source_split_7352;

  corral_source_split_7352:
    assume {:verifier.code 0} true;
    $i59 := $add.i32($i58, 1);
    goto corral_source_split_7353;

  corral_source_split_7353:
    assume {:verifier.code 0} true;
    $M.53 := $i59;
    call {:si_unique_call 1268} {:cexpr "ref_cnt"} boogie_si_record_i32($i59);
    goto corral_source_split_7354;

  corral_source_split_7354:
    assume {:verifier.code 0} true;
    goto $bb46;

  SeqInstr_388:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i13 == 1;
    goto corral_source_split_7271;

  corral_source_split_7271:
    assume {:verifier.code 0} true;
    $i44 := $M.57;
    goto corral_source_split_7272;

  corral_source_split_7272:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i44, 1);
    goto corral_source_split_7273;

  corral_source_split_7273:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i48 := $M.57;
    goto corral_source_split_7335;

  corral_source_split_7335:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i48, 2);
    goto corral_source_split_7336;

  corral_source_split_7336:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb39:
    assume $i49 == 1;
    goto corral_source_split_7338;

  corral_source_split_7338:
    assume {:verifier.code 0} true;
    $p50 := $M.44;
    goto corral_source_split_7339;

  corral_source_split_7339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1263} vslice_dummy_var_254 := pd_video_poll($p50, $p3);
    goto corral_source_split_7340;

  corral_source_split_7340:
    assume {:verifier.code 0} true;
    $M.57 := 2;
    call {:si_unique_call 1264} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(2);
    goto corral_source_split_7341;

  corral_source_split_7341:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb36:
    assume $i45 == 1;
    goto corral_source_split_7330;

  corral_source_split_7330:
    assume {:verifier.code 0} true;
    $p46 := $M.44;
    goto corral_source_split_7331;

  corral_source_split_7331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1261} vslice_dummy_var_253 := pd_video_poll($p46, $p3);
    goto corral_source_split_7332;

  corral_source_split_7332:
    assume {:verifier.code 0} true;
    $M.57 := 1;
    call {:si_unique_call 1262} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_7333;

  corral_source_split_7333:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_7267;

  corral_source_split_7267:
    assume {:verifier.code 0} true;
    $i40 := $M.57;
    goto corral_source_split_7268;

  corral_source_split_7268:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i40, 2);
    goto corral_source_split_7269;

  corral_source_split_7269:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb33:
    assume $i41 == 1;
    goto corral_source_split_7325;

  corral_source_split_7325:
    assume {:verifier.code 0} true;
    $p42 := $M.44;
    goto corral_source_split_7326;

  corral_source_split_7326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1259} vslice_dummy_var_252 := pd_video_read($p42, $p9, $i4, $p8);
    goto corral_source_split_7327;

  corral_source_split_7327:
    assume {:verifier.code 0} true;
    $M.57 := 2;
    call {:si_unique_call 1260} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(2);
    goto corral_source_split_7328;

  corral_source_split_7328:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb2:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i10, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i10, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i16 == 1);
    goto corral_source_split_7283;

  corral_source_split_7283:
    assume {:verifier.code 0} true;
    $i32 := $M.57;
    goto corral_source_split_7284;

  corral_source_split_7284:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 1);
    goto corral_source_split_7285;

  corral_source_split_7285:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i36 := $M.57;
    goto corral_source_split_7317;

  corral_source_split_7317:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 2);
    goto corral_source_split_7318;

  corral_source_split_7318:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb30:
    assume $i37 == 1;
    goto corral_source_split_7320;

  corral_source_split_7320:
    assume {:verifier.code 0} true;
    $p38 := $M.44;
    goto corral_source_split_7321;

  corral_source_split_7321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1257} vslice_dummy_var_251 := video_ioctl2($p38, $i0, $i1);
    goto corral_source_split_7322;

  corral_source_split_7322:
    assume {:verifier.code 0} true;
    $M.57 := 2;
    call {:si_unique_call 1258} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(2);
    goto corral_source_split_7323;

  corral_source_split_7323:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb27:
    assume $i33 == 1;
    goto corral_source_split_7312;

  corral_source_split_7312:
    assume {:verifier.code 0} true;
    $p34 := $M.44;
    goto corral_source_split_7313;

  corral_source_split_7313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1255} vslice_dummy_var_250 := video_ioctl2($p34, $i0, $i1);
    goto corral_source_split_7314;

  corral_source_split_7314:
    assume {:verifier.code 0} true;
    $M.57 := 1;
    call {:si_unique_call 1256} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_7315;

  corral_source_split_7315:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb13:
    assume $i16 == 1;
    goto corral_source_split_7279;

  corral_source_split_7279:
    assume {:verifier.code 0} true;
    $i26 := $M.57;
    goto corral_source_split_7280;

  corral_source_split_7280:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 2);
    goto corral_source_split_7281;

  corral_source_split_7281:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb24:
    assume $i27 == 1;
    goto corral_source_split_7304;

  corral_source_split_7304:
    assume {:verifier.code 0} true;
    $p28 := $M.44;
    goto corral_source_split_7305;

  corral_source_split_7305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1252} vslice_dummy_var_249 := pd_video_release($p28);
    goto SeqInstr_385, SeqInstr_386;

  SeqInstr_386:
    assume assertsPassed;
    goto SeqInstr_387;

  SeqInstr_387:
    goto corral_source_split_7306;

  corral_source_split_7306:
    assume {:verifier.code 0} true;
    $M.57 := 1;
    call {:si_unique_call 1253} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_7307;

  corral_source_split_7307:
    assume {:verifier.code 0} true;
    $i30 := $M.53;
    goto corral_source_split_7308;

  corral_source_split_7308:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32($i30, 1);
    goto corral_source_split_7309;

  corral_source_split_7309:
    assume {:verifier.code 0} true;
    $M.53 := $i31;
    call {:si_unique_call 1254} {:cexpr "ref_cnt"} boogie_si_record_i32($i31);
    goto corral_source_split_7310;

  corral_source_split_7310:
    assume {:verifier.code 0} true;
    goto $bb26;

  SeqInstr_385:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i10, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb10;

  $bb15:
    assume $i17 == 1;
    goto corral_source_split_7287;

  corral_source_split_7287:
    assume {:verifier.code 0} true;
    $i18 := $M.57;
    goto corral_source_split_7288;

  corral_source_split_7288:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_7289;

  corral_source_split_7289:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i22 := $M.57;
    goto corral_source_split_7296;

  corral_source_split_7296:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 2);
    goto corral_source_split_7297;

  corral_source_split_7297:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb20:
    assume $i23 == 1;
    goto corral_source_split_7299;

  corral_source_split_7299:
    assume {:verifier.code 0} true;
    $p24 := $M.44;
    goto corral_source_split_7300;

  corral_source_split_7300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1250} vslice_dummy_var_248 := pd_video_mmap($p24, $p6);
    goto corral_source_split_7301;

  corral_source_split_7301:
    assume {:verifier.code 0} true;
    $M.57 := 2;
    call {:si_unique_call 1251} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(2);
    goto corral_source_split_7302;

  corral_source_split_7302:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume $i19 == 1;
    goto corral_source_split_7291;

  corral_source_split_7291:
    assume {:verifier.code 0} true;
    $p20 := $M.44;
    goto corral_source_split_7292;

  corral_source_split_7292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1248} vslice_dummy_var_247 := pd_video_mmap($p20, $p6);
    goto corral_source_split_7293;

  corral_source_split_7293:
    assume {:verifier.code 0} true;
    $M.57 := 1;
    call {:si_unique_call 1249} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_7294;

  corral_source_split_7294:
    assume {:verifier.code 0} true;
    goto $bb19;
}



const __VERIFIER_nondet_size_t: ref;

axiom __VERIFIER_nondet_size_t == $sub.ref(0, 575387);

procedure __VERIFIER_nondet_size_t() returns ($r: i64);



const ldv_main_exported_9: ref;

axiom ldv_main_exported_9 == $sub.ref(0, 576419);

procedure ldv_main_exported_9();
  free requires assertsPassed;
  modifies $M.59, $M.60, $M.61, $M.11, $M.0, $M.12, $M.13, $M.3, $CurrAddr, assertsPassed;



implementation ldv_main_exported_9()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;
  var $i50: i1;
  var $i51: i1;
  var $i52: i1;
  var $i53: i1;
  var $i54: i1;
  var $i55: i1;
  var $i56: i1;
  var $i57: i1;
  var $i58: i1;
  var $i59: i1;
  var $i60: i1;
  var $i61: i1;
  var $i62: i1;
  var $i63: i1;
  var $i64: i1;
  var $i65: i1;
  var $i66: i1;
  var $i67: i1;
  var $i68: i1;
  var $i69: i1;
  var $i70: i1;
  var $i71: i1;
  var $i72: i1;
  var $i73: i32;
  var $i74: i1;
  var $p75: ref;
  var $i77: i32;
  var $i78: i1;
  var $p79: ref;
  var $p80: ref;
  var $i82: i32;
  var $i83: i1;
  var $p84: ref;
  var $p85: ref;
  var $i87: i32;
  var $i88: i1;
  var $p89: ref;
  var $p90: ref;
  var $i92: i32;
  var $i93: i1;
  var $p94: ref;
  var $p95: ref;
  var $i97: i32;
  var $i98: i1;
  var $p99: ref;
  var $i101: i32;
  var $i102: i1;
  var $p103: ref;
  var $p104: ref;
  var $i106: i32;
  var $i107: i1;
  var $p108: ref;
  var $i110: i32;
  var $i111: i1;
  var $p112: ref;
  var $p113: ref;
  var $i115: i32;
  var $i116: i1;
  var $p117: ref;
  var $p118: ref;
  var $i120: i32;
  var $i121: i1;
  var $p122: ref;
  var $i123: i32;
  var $i125: i32;
  var $i126: i1;
  var $p127: ref;
  var $i129: i32;
  var $i130: i1;
  var $p131: ref;
  var $p132: ref;
  var $i134: i32;
  var $i135: i1;
  var $p136: ref;
  var $p137: ref;
  var $i139: i32;
  var $i140: i1;
  var $p141: ref;
  var $p142: ref;
  var $i144: i32;
  var $i145: i1;
  var $p146: ref;
  var $i148: i32;
  var $i149: i1;
  var $p150: ref;
  var $p151: ref;
  var $i153: i32;
  var $i154: i1;
  var $p155: ref;
  var $p156: ref;
  var $i158: i32;
  var $i159: i1;
  var $p160: ref;
  var $i162: i32;
  var $i163: i1;
  var $p164: ref;
  var $p165: ref;
  var $i167: i32;
  var $i168: i1;
  var $p169: ref;
  var $i171: i32;
  var $i172: i1;
  var $p173: ref;
  var $i175: i32;
  var $i176: i1;
  var $p177: ref;
  var $p178: ref;
  var $i180: i32;
  var $i181: i1;
  var $p182: ref;
  var $p183: ref;
  var $i185: i32;
  var $i186: i1;
  var $p187: ref;
  var $p188: ref;
  var $i190: i32;
  var $i191: i1;
  var $p192: ref;
  var $i193: i32;
  var cmdloc_dummy_var_67: [ref]i8;
  var cmdloc_dummy_var_68: [ref]i8;
  var cmdloc_dummy_var_69: [ref]i8;
  var cmdloc_dummy_var_70: [ref]i8;
  var vslice_dummy_var_255: i32;
  var vslice_dummy_var_256: i32;
  var vslice_dummy_var_257: i32;
  var vslice_dummy_var_258: i32;
  var vslice_dummy_var_259: i32;
  var vslice_dummy_var_260: i32;
  var vslice_dummy_var_261: i32;
  var vslice_dummy_var_262: i32;
  var vslice_dummy_var_263: i32;
  var vslice_dummy_var_264: i32;
  var vslice_dummy_var_265: i32;
  var vslice_dummy_var_266: i32;
  var vslice_dummy_var_267: i32;
  var vslice_dummy_var_268: i32;
  var vslice_dummy_var_269: i32;
  var vslice_dummy_var_270: i32;
  var vslice_dummy_var_271: i32;
  var vslice_dummy_var_272: i32;
  var vslice_dummy_var_273: i32;
  var vslice_dummy_var_274: i32;
  var vslice_dummy_var_275: i32;
  var vslice_dummy_var_276: i32;
  var vslice_dummy_var_277: i32;
  var vslice_dummy_var_278: i32;
  var vslice_dummy_var_279: i32;
  var vslice_dummy_var_280: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1270} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1271} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_7358;

  corral_source_split_7358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1272} $p2 := ldv_zalloc(1);
    goto corral_source_split_7359;

  corral_source_split_7359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1273} $p3 := ldv_zalloc(1);
    goto corral_source_split_7360;

  corral_source_split_7360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1274} $p4 := ldv_zalloc(1);
    goto corral_source_split_7361;

  corral_source_split_7361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1275} $p5 := ldv_zalloc(1);
    goto corral_source_split_7362;

  corral_source_split_7362:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1276} $i6 := __VERIFIER_nondet_uint();
    call {:si_unique_call 1277} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i6);
    call {:si_unique_call 1278} {:cexpr "tmp___3"} boogie_si_record_i32($i6);
    goto corral_source_split_7363;

  corral_source_split_7363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1279} $p7 := ldv_zalloc(4);
    goto corral_source_split_7364;

  corral_source_split_7364:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_7365;

  corral_source_split_7365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1280} $p9 := ldv_zalloc(104);
    goto corral_source_split_7366;

  corral_source_split_7366:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_7367;

  corral_source_split_7367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1281} $p11 := ldv_zalloc(1);
    goto corral_source_split_7368;

  corral_source_split_7368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1282} $p12 := ldv_zalloc(1);
    goto corral_source_split_7369;

  corral_source_split_7369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1283} $p13 := ldv_zalloc(1);
    goto corral_source_split_7370;

  corral_source_split_7370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1284} $p14 := ldv_zalloc(1);
    goto corral_source_split_7371;

  corral_source_split_7371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1285} $p15 := ldv_zalloc(1);
    goto corral_source_split_7372;

  corral_source_split_7372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1286} $p16 := ldv_zalloc(68);
    goto corral_source_split_7373;

  corral_source_split_7373:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_7374;

  corral_source_split_7374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1287} $p18 := ldv_zalloc(1);
    goto corral_source_split_7375;

  corral_source_split_7375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1288} $p19 := ldv_zalloc(1);
    goto corral_source_split_7376;

  corral_source_split_7376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1289} $p20 := ldv_zalloc(1);
    goto corral_source_split_7377;

  corral_source_split_7377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1290} $p21 := ldv_zalloc(1);
    goto corral_source_split_7378;

  corral_source_split_7378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1291} $p22 := ldv_zalloc(1);
    goto corral_source_split_7379;

  corral_source_split_7379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1292} $p23 := ldv_zalloc(1);
    goto corral_source_split_7380;

  corral_source_split_7380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1293} $p24 := ldv_zalloc(1);
    goto corral_source_split_7381;

  corral_source_split_7381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1294} $p25 := ldv_zalloc(1);
    goto corral_source_split_7382;

  corral_source_split_7382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1295} $p26 := ldv_zalloc(1);
    goto corral_source_split_7383;

  corral_source_split_7383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1296} $p27 := ldv_zalloc(64);
    goto corral_source_split_7384;

  corral_source_split_7384:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_7385;

  corral_source_split_7385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1297} $p29 := ldv_zalloc(1);
    goto corral_source_split_7386;

  corral_source_split_7386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1298} $p30 := ldv_zalloc(8);
    goto corral_source_split_7387;

  corral_source_split_7387:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_7388;

  corral_source_split_7388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1299} $p32 := ldv_zalloc(1);
    goto corral_source_split_7389;

  corral_source_split_7389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1300} $p33 := ldv_zalloc(1);
    goto corral_source_split_7390;

  corral_source_split_7390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1301} $p34 := ldv_zalloc(20);
    goto corral_source_split_7391;

  corral_source_split_7391:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_7392;

  corral_source_split_7392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1302} $p36 := ldv_zalloc(1);
    goto corral_source_split_7393;

  corral_source_split_7393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1303} $p37 := ldv_zalloc(1);
    goto corral_source_split_7394;

  corral_source_split_7394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1304} $p38 := ldv_zalloc(80);
    goto corral_source_split_7395;

  corral_source_split_7395:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_7396;

  corral_source_split_7396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1305} $p40 := ldv_zalloc(1);
    goto corral_source_split_7397;

  corral_source_split_7397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1306} $p41 := ldv_zalloc(1);
    goto corral_source_split_7398;

  corral_source_split_7398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1307} $p42 := ldv_zalloc(1);
    goto corral_source_split_7399;

  corral_source_split_7399:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p0);
    goto corral_source_split_7400;

  corral_source_split_7400:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_67 := $M.59;
    call {:si_unique_call 1308} cmdloc_dummy_var_68 := $memset.i8(cmdloc_dummy_var_67, $p43, 0, 4, $zext.i32.i64(4), 0 == 1);
    $M.59 := cmdloc_dummy_var_68;
    goto corral_source_split_7401;

  corral_source_split_7401:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p1);
    goto corral_source_split_7402;

  corral_source_split_7402:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_69 := $M.60;
    call {:si_unique_call 1309} cmdloc_dummy_var_70 := $memset.i8(cmdloc_dummy_var_69, $p44, 0, 4, $zext.i32.i64(4), 0 == 1);
    $M.60 := cmdloc_dummy_var_70;
    goto corral_source_split_7403;

  corral_source_split_7403:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1310} $i45 := __VERIFIER_nondet_int();
    call {:si_unique_call 1311} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i45);
    call {:si_unique_call 1312} {:cexpr "tmp___33"} boogie_si_record_i32($i45);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i46 := $slt.i32($i45, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    $i47 := $slt.i32($i45, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    $i48 := $slt.i32($i45, 22);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    $i49 := $slt.i32($i45, 24);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    $i50 := $slt.i32($i45, 25);
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    $i51 := $eq.i32($i45, 25);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i51 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1365} ldv_stop();
    goto corral_source_split_7657;

  corral_source_split_7657:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    return;

  $bb12:
    assume $i51 == 1;
    goto corral_source_split_7409;

  corral_source_split_7409:
    assume {:verifier.code 0} true;
    $i190 := $M.61;
    goto corral_source_split_7410;

  corral_source_split_7410:
    assume {:verifier.code 0} true;
    $i191 := $eq.i32($i190, 1);
    goto corral_source_split_7411;

  corral_source_split_7411:
    assume {:verifier.code 0} true;
    assume {:branchcond $i191} true;
    goto $bb133, $bb134;

  $bb134:
    assume !($i191 == 1);
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb133:
    assume $i191 == 1;
    goto corral_source_split_7651;

  corral_source_split_7651:
    assume {:verifier.code 0} true;
    $p192 := $M.45;
    goto corral_source_split_7652;

  corral_source_split_7652:
    assume {:verifier.code 0} true;
    $i193 := $load.i32($M.59, $p0);
    goto corral_source_split_7653;

  corral_source_split_7653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1363} vslice_dummy_var_280 := vidioc_streamon($p192, $p4, $i193);
    goto corral_source_split_7654;

  corral_source_split_7654:
    assume {:verifier.code 0} true;
    $M.61 := 1;
    call {:si_unique_call 1364} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_7655;

  corral_source_split_7655:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb10:
    assume $i50 == 1;
    goto corral_source_split_7405;

  corral_source_split_7405:
    assume {:verifier.code 0} true;
    $i185 := $M.61;
    goto corral_source_split_7406;

  corral_source_split_7406:
    assume {:verifier.code 0} true;
    $i186 := $eq.i32($i185, 1);
    goto corral_source_split_7407;

  corral_source_split_7407:
    assume {:verifier.code 0} true;
    assume {:branchcond $i186} true;
    goto $bb130, $bb131;

  $bb131:
    assume !($i186 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb130:
    assume $i186 == 1;
    goto corral_source_split_7645;

  corral_source_split_7645:
    assume {:verifier.code 0} true;
    $p187 := $M.45;
    goto corral_source_split_7646;

  corral_source_split_7646:
    assume {:verifier.code 0} true;
    $p188 := $M.46;
    goto corral_source_split_7647;

  corral_source_split_7647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1361} vslice_dummy_var_279 := vidioc_enumaudio($p187, $p42, $p188);
    goto corral_source_split_7648;

  corral_source_split_7648:
    assume {:verifier.code 0} true;
    $M.61 := 1;
    call {:si_unique_call 1362} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_7649;

  corral_source_split_7649:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb8:
    assume $i49 == 1;
    assume {:verifier.code 0} true;
    $i52 := $slt.i32($i45, 23);
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i52 == 1);
    goto corral_source_split_7417;

  corral_source_split_7417:
    assume {:verifier.code 0} true;
    $i180 := $M.61;
    goto corral_source_split_7418;

  corral_source_split_7418:
    assume {:verifier.code 0} true;
    $i181 := $eq.i32($i180, 1);
    goto corral_source_split_7419;

  corral_source_split_7419:
    assume {:verifier.code 0} true;
    assume {:branchcond $i181} true;
    goto $bb127, $bb128;

  $bb128:
    assume !($i181 == 1);
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb127:
    assume $i181 == 1;
    goto corral_source_split_7639;

  corral_source_split_7639:
    assume {:verifier.code 0} true;
    $p182 := $M.45;
    goto corral_source_split_7640;

  corral_source_split_7640:
    assume {:verifier.code 0} true;
    $p183 := $M.46;
    goto corral_source_split_7641;

  corral_source_split_7641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1359} vslice_dummy_var_278 := vidioc_s_audio($p182, $p2, $p183);
    goto corral_source_split_7642;

  corral_source_split_7642:
    assume {:verifier.code 0} true;
    $M.61 := 1;
    call {:si_unique_call 1360} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_7643;

  corral_source_split_7643:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb15:
    assume $i52 == 1;
    goto corral_source_split_7413;

  corral_source_split_7413:
    assume {:verifier.code 0} true;
    $i175 := $M.61;
    goto corral_source_split_7414;

  corral_source_split_7414:
    assume {:verifier.code 0} true;
    $i176 := $eq.i32($i175, 1);
    goto corral_source_split_7415;

  corral_source_split_7415:
    assume {:verifier.code 0} true;
    assume {:branchcond $i176} true;
    goto $bb124, $bb125;

  $bb125:
    assume !($i176 == 1);
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb124:
    assume $i176 == 1;
    goto corral_source_split_7633;

  corral_source_split_7633:
    assume {:verifier.code 0} true;
    $p177 := $M.45;
    goto corral_source_split_7634;

  corral_source_split_7634:
    assume {:verifier.code 0} true;
    $p178 := $M.47;
    goto corral_source_split_7635;

  corral_source_split_7635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1357} vslice_dummy_var_277 := vidioc_g_fmt_vbi($p177, $p19, $p178);
    goto corral_source_split_7636;

  corral_source_split_7636:
    assume {:verifier.code 0} true;
    $M.61 := 1;
    call {:si_unique_call 1358} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_7637;

  corral_source_split_7637:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb6:
    assume $i48 == 1;
    assume {:verifier.code 0} true;
    $i53 := $slt.i32($i45, 20);
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    $i54 := $slt.i32($i45, 21);
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i54 == 1);
    goto corral_source_split_7429;

  corral_source_split_7429:
    assume {:verifier.code 0} true;
    $i171 := $M.61;
    goto corral_source_split_7430;

  corral_source_split_7430:
    assume {:verifier.code 0} true;
    $i172 := $eq.i32($i171, 1);
    goto corral_source_split_7431;

  corral_source_split_7431:
    assume {:verifier.code 0} true;
    assume {:branchcond $i172} true;
    goto $bb121, $bb122;

  $bb122:
    assume !($i172 == 1);
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb121:
    assume $i172 == 1;
    goto corral_source_split_7628;

  corral_source_split_7628:
    assume {:verifier.code 0} true;
    $p173 := $M.45;
    goto corral_source_split_7629;

  corral_source_split_7629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1355} vslice_dummy_var_276 := vidioc_s_input($p173, $p3, $i6);
    goto corral_source_split_7630;

  corral_source_split_7630:
    assume {:verifier.code 0} true;
    $M.61 := 1;
    call {:si_unique_call 1356} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_7631;

  corral_source_split_7631:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb19:
    assume $i54 == 1;
    goto corral_source_split_7425;

  corral_source_split_7425:
    assume {:verifier.code 0} true;
    $i167 := $M.61;
    goto corral_source_split_7426;

  corral_source_split_7426:
    assume {:verifier.code 0} true;
    $i168 := $eq.i32($i167, 1);
    goto corral_source_split_7427;

  corral_source_split_7427:
    assume {:verifier.code 0} true;
    assume {:branchcond $i168} true;
    goto $bb118, $bb119;

  $bb119:
    assume !($i168 == 1);
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb118:
    assume $i168 == 1;
    goto corral_source_split_7623;

  corral_source_split_7623:
    assume {:verifier.code 0} true;
    $p169 := $M.45;
    goto corral_source_split_7624;

  corral_source_split_7624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1353} vslice_dummy_var_275 := vidioc_enum_input($p169, $p29, $p39);
    goto corral_source_split_7625;

  corral_source_split_7625:
    assume {:verifier.code 0} true;
    $M.61 := 1;
    call {:si_unique_call 1354} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_7626;

  corral_source_split_7626:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb17:
    assume $i53 == 1;
    goto corral_source_split_7421;

  corral_source_split_7421:
    assume {:verifier.code 0} true;
    $i162 := $M.61;
    goto corral_source_split_7422;

  corral_source_split_7422:
    assume {:verifier.code 0} true;
    $i163 := $eq.i32($i162, 1);
    goto corral_source_split_7423;

  corral_source_split_7423:
    assume {:verifier.code 0} true;
    assume {:branchcond $i163} true;
    goto $bb115, $bb116;

  $bb116:
    assume !($i163 == 1);
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb115:
    assume $i163 == 1;
    goto corral_source_split_7617;

  corral_source_split_7617:
    assume {:verifier.code 0} true;
    $p164 := $M.45;
    goto corral_source_split_7618;

  corral_source_split_7618:
    assume {:verifier.code 0} true;
    $p165 := $M.48;
    goto corral_source_split_7619;

  corral_source_split_7619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1351} vslice_dummy_var_274 := vidioc_s_frequency($p164, $p5, $p165);
    goto SeqInstr_409, SeqInstr_410;

  SeqInstr_410:
    assume assertsPassed;
    goto SeqInstr_411;

  SeqInstr_411:
    goto corral_source_split_7620;

  corral_source_split_7620:
    assume {:verifier.code 0} true;
    $M.61 := 1;
    call {:si_unique_call 1352} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_7621;

  corral_source_split_7621:
    assume {:verifier.code 0} true;
    goto $bb117;

  SeqInstr_409:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i47 == 1;
    assume {:verifier.code 0} true;
    $i55 := $slt.i32($i45, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    $i56 := $slt.i32($i45, 17);
    assume {:verifier.code 0} true;
    assume {:branchcond $i56} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    $i57 := $slt.i32($i45, 18);
    assume {:verifier.code 0} true;
    assume {:branchcond $i57} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i57 == 1);
    goto corral_source_split_7441;

  corral_source_split_7441:
    assume {:verifier.code 0} true;
    $i158 := $M.61;
    goto corral_source_split_7442;

  corral_source_split_7442:
    assume {:verifier.code 0} true;
    $i159 := $eq.i32($i158, 1);
    goto corral_source_split_7443;

  corral_source_split_7443:
    assume {:verifier.code 0} true;
    assume {:branchcond $i159} true;
    goto $bb112, $bb113;

  $bb113:
    assume !($i159 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb112:
    assume $i159 == 1;
    goto corral_source_split_7612;

  corral_source_split_7612:
    assume {:verifier.code 0} true;
    $p160 := $M.45;
    goto corral_source_split_7613;

  corral_source_split_7613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1349} vslice_dummy_var_273 := vidioc_querycap($p160, $p11, $p10);
    goto corral_source_split_7614;

  corral_source_split_7614:
    assume {:verifier.code 0} true;
    $M.61 := 1;
    call {:si_unique_call 1350} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_7615;

  corral_source_split_7615:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb25:
    assume $i57 == 1;
    goto corral_source_split_7437;

  corral_source_split_7437:
    assume {:verifier.code 0} true;
    $i153 := $M.61;
    goto corral_source_split_7438;

  corral_source_split_7438:
    assume {:verifier.code 0} true;
    $i154 := $eq.i32($i153, 1);
    goto corral_source_split_7439;

  corral_source_split_7439:
    assume {:verifier.code 0} true;
    assume {:branchcond $i154} true;
    goto $bb109, $bb110;

  $bb110:
    assume !($i154 == 1);
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb109:
    assume $i154 == 1;
    goto corral_source_split_7606;

  corral_source_split_7606:
    assume {:verifier.code 0} true;
    $p155 := $M.45;
    goto corral_source_split_7607;

  corral_source_split_7607:
    assume {:verifier.code 0} true;
    $p156 := $M.50;
    goto corral_source_split_7608;

  corral_source_split_7608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1347} vslice_dummy_var_272 := vidioc_qbuf($p155, $p22, $p156);
    goto corral_source_split_7609;

  corral_source_split_7609:
    assume {:verifier.code 0} true;
    $M.61 := 1;
    call {:si_unique_call 1348} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_7610;

  corral_source_split_7610:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb23:
    assume $i56 == 1;
    goto corral_source_split_7433;

  corral_source_split_7433:
    assume {:verifier.code 0} true;
    $i148 := $M.61;
    goto corral_source_split_7434;

  corral_source_split_7434:
    assume {:verifier.code 0} true;
    $i149 := $eq.i32($i148, 1);
    goto corral_source_split_7435;

  corral_source_split_7435:
    assume {:verifier.code 0} true;
    assume {:branchcond $i149} true;
    goto $bb106, $bb107;

  $bb107:
    assume !($i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb106:
    assume $i149 == 1;
    goto corral_source_split_7600;

  corral_source_split_7600:
    assume {:verifier.code 0} true;
    $p150 := $M.45;
    goto corral_source_split_7601;

  corral_source_split_7601:
    assume {:verifier.code 0} true;
    $p151 := $M.46;
    goto corral_source_split_7602;

  corral_source_split_7602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1345} vslice_dummy_var_271 := vidioc_g_audio($p150, $p32, $p151);
    goto corral_source_split_7603;

  corral_source_split_7603:
    assume {:verifier.code 0} true;
    $M.61 := 1;
    call {:si_unique_call 1346} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_7604;

  corral_source_split_7604:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb21:
    assume $i55 == 1;
    assume {:verifier.code 0} true;
    $i58 := $slt.i32($i45, 14);
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    $i59 := $slt.i32($i45, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i59 == 1);
    goto corral_source_split_7453;

  corral_source_split_7453:
    assume {:verifier.code 0} true;
    $i144 := $M.61;
    goto corral_source_split_7454;

  corral_source_split_7454:
    assume {:verifier.code 0} true;
    $i145 := $eq.i32($i144, 1);
    goto corral_source_split_7455;

  corral_source_split_7455:
    assume {:verifier.code 0} true;
    assume {:branchcond $i145} true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i145 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb103:
    assume $i145 == 1;
    goto corral_source_split_7595;

  corral_source_split_7595:
    assume {:verifier.code 0} true;
    $p146 := $M.45;
    goto corral_source_split_7596;

  corral_source_split_7596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1343} vslice_dummy_var_270 := vidioc_g_input($p146, $p18, $p8);
    goto corral_source_split_7597;

  corral_source_split_7597:
    assume {:verifier.code 0} true;
    $M.61 := 1;
    call {:si_unique_call 1344} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_7598;

  corral_source_split_7598:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb29:
    assume $i59 == 1;
    goto corral_source_split_7449;

  corral_source_split_7449:
    assume {:verifier.code 0} true;
    $i139 := $M.61;
    goto corral_source_split_7450;

  corral_source_split_7450:
    assume {:verifier.code 0} true;
    $i140 := $eq.i32($i139, 1);
    goto corral_source_split_7451;

  corral_source_split_7451:
    assume {:verifier.code 0} true;
    assume {:branchcond $i140} true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i140 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb100:
    assume $i140 == 1;
    goto corral_source_split_7589;

  corral_source_split_7589:
    assume {:verifier.code 0} true;
    $p141 := $M.45;
    goto corral_source_split_7590;

  corral_source_split_7590:
    assume {:verifier.code 0} true;
    $p142 := $M.48;
    goto corral_source_split_7591;

  corral_source_split_7591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1341} vslice_dummy_var_269 := vidioc_g_frequency($p141, $p40, $p142);
    goto corral_source_split_7592;

  corral_source_split_7592:
    assume {:verifier.code 0} true;
    $M.61 := 1;
    call {:si_unique_call 1342} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_7593;

  corral_source_split_7593:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb27:
    assume $i58 == 1;
    goto corral_source_split_7445;

  corral_source_split_7445:
    assume {:verifier.code 0} true;
    $i134 := $M.61;
    goto corral_source_split_7446;

  corral_source_split_7446:
    assume {:verifier.code 0} true;
    $i135 := $eq.i32($i134, 1);
    goto corral_source_split_7447;

  corral_source_split_7447:
    assume {:verifier.code 0} true;
    assume {:branchcond $i135} true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb97:
    assume $i135 == 1;
    goto corral_source_split_7583;

  corral_source_split_7583:
    assume {:verifier.code 0} true;
    $p136 := $M.45;
    goto corral_source_split_7584;

  corral_source_split_7584:
    assume {:verifier.code 0} true;
    $p137 := $M.47;
    goto corral_source_split_7585;

  corral_source_split_7585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1339} vslice_dummy_var_268 := vidioc_g_fmt($p136, $p25, $p137);
    goto corral_source_split_7586;

  corral_source_split_7586:
    assume {:verifier.code 0} true;
    $M.61 := 1;
    call {:si_unique_call 1340} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_7587;

  corral_source_split_7587:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb2:
    assume $i46 == 1;
    assume {:verifier.code 0} true;
    $i60 := $slt.i32($i45, 6);
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    $i61 := $slt.i32($i45, 9);
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    $i62 := $slt.i32($i45, 11);
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    $i63 := $slt.i32($i45, 12);
    assume {:verifier.code 0} true;
    assume {:branchcond $i63} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i63 == 1);
    goto corral_source_split_7461;

  corral_source_split_7461:
    assume {:verifier.code 0} true;
    $i129 := $M.61;
    goto corral_source_split_7462;

  corral_source_split_7462:
    assume {:verifier.code 0} true;
    $i130 := $eq.i32($i129, 1);
    goto corral_source_split_7463;

  corral_source_split_7463:
    assume {:verifier.code 0} true;
    assume {:branchcond $i130} true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb94:
    assume $i130 == 1;
    goto corral_source_split_7577;

  corral_source_split_7577:
    assume {:verifier.code 0} true;
    $p131 := $M.45;
    goto corral_source_split_7578;

  corral_source_split_7578:
    assume {:verifier.code 0} true;
    $p132 := $M.47;
    goto corral_source_split_7579;

  corral_source_split_7579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1337} vslice_dummy_var_267 := vidioc_s_fmt($p131, $p23, $p132);
    goto SeqInstr_406, SeqInstr_407;

  SeqInstr_407:
    assume assertsPassed;
    goto SeqInstr_408;

  SeqInstr_408:
    goto corral_source_split_7580;

  corral_source_split_7580:
    assume {:verifier.code 0} true;
    $M.61 := 1;
    call {:si_unique_call 1338} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_7581;

  corral_source_split_7581:
    assume {:verifier.code 0} true;
    goto $bb96;

  SeqInstr_406:
    assume !assertsPassed;
    return;

  $bb37:
    assume $i63 == 1;
    goto corral_source_split_7457;

  corral_source_split_7457:
    assume {:verifier.code 0} true;
    $i125 := $M.61;
    goto corral_source_split_7458;

  corral_source_split_7458:
    assume {:verifier.code 0} true;
    $i126 := $eq.i32($i125, 1);
    goto corral_source_split_7459;

  corral_source_split_7459:
    assume {:verifier.code 0} true;
    assume {:branchcond $i126} true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb91:
    assume $i126 == 1;
    goto corral_source_split_7572;

  corral_source_split_7572:
    assume {:verifier.code 0} true;
    $p127 := $M.45;
    goto corral_source_split_7573;

  corral_source_split_7573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1335} vslice_dummy_var_266 := vidioc_enum_fmt($p127, $p14, $p28);
    goto corral_source_split_7574;

  corral_source_split_7574:
    assume {:verifier.code 0} true;
    $M.61 := 1;
    call {:si_unique_call 1336} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_7575;

  corral_source_split_7575:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb35:
    assume $i62 == 1;
    assume {:verifier.code 0} true;
    $i64 := $slt.i32($i45, 10);
    assume {:verifier.code 0} true;
    assume {:branchcond $i64} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i64 == 1);
    goto corral_source_split_7469;

  corral_source_split_7469:
    assume {:verifier.code 0} true;
    $i120 := $M.61;
    goto corral_source_split_7470;

  corral_source_split_7470:
    assume {:verifier.code 0} true;
    $i121 := $eq.i32($i120, 1);
    goto corral_source_split_7471;

  corral_source_split_7471:
    assume {:verifier.code 0} true;
    assume {:branchcond $i121} true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i121 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb88:
    assume $i121 == 1;
    goto corral_source_split_7566;

  corral_source_split_7566:
    assume {:verifier.code 0} true;
    $p122 := $M.45;
    goto corral_source_split_7567;

  corral_source_split_7567:
    assume {:verifier.code 0} true;
    $i123 := $load.i32($M.60, $p1);
    goto corral_source_split_7568;

  corral_source_split_7568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1333} vslice_dummy_var_265 := vidioc_streamoff($p122, $p26, $i123);
    goto corral_source_split_7569;

  corral_source_split_7569:
    assume {:verifier.code 0} true;
    $M.61 := 1;
    call {:si_unique_call 1334} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_7570;

  corral_source_split_7570:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb39:
    assume $i64 == 1;
    goto corral_source_split_7465;

  corral_source_split_7465:
    assume {:verifier.code 0} true;
    $i115 := $M.61;
    goto corral_source_split_7466;

  corral_source_split_7466:
    assume {:verifier.code 0} true;
    $i116 := $eq.i32($i115, 1);
    goto corral_source_split_7467;

  corral_source_split_7467:
    assume {:verifier.code 0} true;
    assume {:branchcond $i116} true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb85:
    assume $i116 == 1;
    goto corral_source_split_7560;

  corral_source_split_7560:
    assume {:verifier.code 0} true;
    $p117 := $M.45;
    goto corral_source_split_7561;

  corral_source_split_7561:
    assume {:verifier.code 0} true;
    $p118 := $M.50;
    goto corral_source_split_7562;

  corral_source_split_7562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1331} vslice_dummy_var_264 := vidioc_dqbuf($p117, $p20, $p118);
    goto corral_source_split_7563;

  corral_source_split_7563:
    assume {:verifier.code 0} true;
    $M.61 := 1;
    call {:si_unique_call 1332} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_7564;

  corral_source_split_7564:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb33:
    assume $i61 == 1;
    assume {:verifier.code 0} true;
    $i65 := $slt.i32($i45, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    $i66 := $slt.i32($i45, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i66} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i66 == 1);
    goto corral_source_split_7481;

  corral_source_split_7481:
    assume {:verifier.code 0} true;
    $i110 := $M.61;
    goto corral_source_split_7482;

  corral_source_split_7482:
    assume {:verifier.code 0} true;
    $i111 := $eq.i32($i110, 1);
    goto corral_source_split_7483;

  corral_source_split_7483:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb82:
    assume $i111 == 1;
    goto corral_source_split_7554;

  corral_source_split_7554:
    assume {:verifier.code 0} true;
    $p112 := $M.45;
    goto corral_source_split_7555;

  corral_source_split_7555:
    assume {:verifier.code 0} true;
    $p113 := $M.50;
    goto corral_source_split_7556;

  corral_source_split_7556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1329} vslice_dummy_var_263 := vidioc_querybuf($p112, $p13, $p113);
    goto corral_source_split_7557;

  corral_source_split_7557:
    assume {:verifier.code 0} true;
    $M.61 := 1;
    call {:si_unique_call 1330} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_7558;

  corral_source_split_7558:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb43:
    assume $i66 == 1;
    goto corral_source_split_7477;

  corral_source_split_7477:
    assume {:verifier.code 0} true;
    $i106 := $M.61;
    goto corral_source_split_7478;

  corral_source_split_7478:
    assume {:verifier.code 0} true;
    $i107 := $eq.i32($i106, 1);
    goto corral_source_split_7479;

  corral_source_split_7479:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb79:
    assume $i107 == 1;
    goto corral_source_split_7549;

  corral_source_split_7549:
    assume {:verifier.code 0} true;
    $p108 := $M.45;
    goto corral_source_split_7550;

  corral_source_split_7550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1327} vslice_dummy_var_262 := vidioc_queryctrl($p108, $p36, $p17);
    goto corral_source_split_7551;

  corral_source_split_7551:
    assume {:verifier.code 0} true;
    $M.61 := 1;
    call {:si_unique_call 1328} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_7552;

  corral_source_split_7552:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb41:
    assume $i65 == 1;
    goto corral_source_split_7473;

  corral_source_split_7473:
    assume {:verifier.code 0} true;
    $i101 := $M.61;
    goto corral_source_split_7474;

  corral_source_split_7474:
    assume {:verifier.code 0} true;
    $i102 := $eq.i32($i101, 1);
    goto corral_source_split_7475;

  corral_source_split_7475:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb76:
    assume $i102 == 1;
    goto corral_source_split_7543;

  corral_source_split_7543:
    assume {:verifier.code 0} true;
    $p103 := $M.45;
    goto corral_source_split_7544;

  corral_source_split_7544:
    assume {:verifier.code 0} true;
    $p104 := $M.49;
    goto corral_source_split_7545;

  corral_source_split_7545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1325} vslice_dummy_var_261 := vidioc_s_tuner($p103, $p37, $p104);
    goto SeqInstr_403, SeqInstr_404;

  SeqInstr_404:
    assume assertsPassed;
    goto SeqInstr_405;

  SeqInstr_405:
    goto corral_source_split_7546;

  corral_source_split_7546:
    assume {:verifier.code 0} true;
    $M.61 := 1;
    call {:si_unique_call 1326} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_7547;

  corral_source_split_7547:
    assume {:verifier.code 0} true;
    goto $bb78;

  SeqInstr_403:
    assume !assertsPassed;
    return;

  $bb31:
    assume $i60 == 1;
    assume {:verifier.code 0} true;
    $i67 := $slt.i32($i45, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    $i68 := $slt.i32($i45, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i68} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    $i69 := $slt.i32($i45, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i69} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i69 == 1);
    goto corral_source_split_7493;

  corral_source_split_7493:
    assume {:verifier.code 0} true;
    $i97 := $M.61;
    goto corral_source_split_7494;

  corral_source_split_7494:
    assume {:verifier.code 0} true;
    $i98 := $eq.i32($i97, 1);
    goto corral_source_split_7495;

  corral_source_split_7495:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb73:
    assume $i98 == 1;
    goto corral_source_split_7538;

  corral_source_split_7538:
    assume {:verifier.code 0} true;
    $p99 := $M.45;
    goto corral_source_split_7539;

  corral_source_split_7539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1323} vslice_dummy_var_260 := vidioc_s_std($p99, $p12, $p31);
    goto SeqInstr_400, SeqInstr_401;

  SeqInstr_401:
    assume assertsPassed;
    goto SeqInstr_402;

  SeqInstr_402:
    goto corral_source_split_7540;

  corral_source_split_7540:
    assume {:verifier.code 0} true;
    $M.61 := 1;
    call {:si_unique_call 1324} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_7541;

  corral_source_split_7541:
    assume {:verifier.code 0} true;
    goto $bb75;

  SeqInstr_400:
    assume !assertsPassed;
    return;

  $bb49:
    assume $i69 == 1;
    goto corral_source_split_7489;

  corral_source_split_7489:
    assume {:verifier.code 0} true;
    $i92 := $M.61;
    goto corral_source_split_7490;

  corral_source_split_7490:
    assume {:verifier.code 0} true;
    $i93 := $eq.i32($i92, 1);
    goto corral_source_split_7491;

  corral_source_split_7491:
    assume {:verifier.code 0} true;
    assume {:branchcond $i93} true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb70:
    assume $i93 == 1;
    goto corral_source_split_7532;

  corral_source_split_7532:
    assume {:verifier.code 0} true;
    $p94 := $M.45;
    goto corral_source_split_7533;

  corral_source_split_7533:
    assume {:verifier.code 0} true;
    $p95 := $M.47;
    goto corral_source_split_7534;

  corral_source_split_7534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1321} vslice_dummy_var_259 := vidioc_try_fmt($p94, $p33, $p95);
    goto corral_source_split_7535;

  corral_source_split_7535:
    assume {:verifier.code 0} true;
    $M.61 := 1;
    call {:si_unique_call 1322} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_7536;

  corral_source_split_7536:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb47:
    assume $i68 == 1;
    goto corral_source_split_7485;

  corral_source_split_7485:
    assume {:verifier.code 0} true;
    $i87 := $M.61;
    goto corral_source_split_7486;

  corral_source_split_7486:
    assume {:verifier.code 0} true;
    $i88 := $eq.i32($i87, 1);
    goto corral_source_split_7487;

  corral_source_split_7487:
    assume {:verifier.code 0} true;
    assume {:branchcond $i88} true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb67:
    assume $i88 == 1;
    goto corral_source_split_7526;

  corral_source_split_7526:
    assume {:verifier.code 0} true;
    $p89 := $M.45;
    goto corral_source_split_7527;

  corral_source_split_7527:
    assume {:verifier.code 0} true;
    $p90 := $M.51;
    goto corral_source_split_7528;

  corral_source_split_7528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1319} vslice_dummy_var_258 := vidioc_g_ctrl($p89, $p21, $p90);
    goto SeqInstr_397, SeqInstr_398;

  SeqInstr_398:
    assume assertsPassed;
    goto SeqInstr_399;

  SeqInstr_399:
    goto corral_source_split_7529;

  corral_source_split_7529:
    assume {:verifier.code 0} true;
    $M.61 := 1;
    call {:si_unique_call 1320} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_7530;

  corral_source_split_7530:
    assume {:verifier.code 0} true;
    goto $bb69;

  SeqInstr_397:
    assume !assertsPassed;
    return;

  $bb45:
    assume $i67 == 1;
    assume {:verifier.code 0} true;
    $i70 := $slt.i32($i45, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i70} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    $i71 := $slt.i32($i45, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i71 == 1);
    goto corral_source_split_7501;

  corral_source_split_7501:
    assume {:verifier.code 0} true;
    $i82 := $M.61;
    goto corral_source_split_7502;

  corral_source_split_7502:
    assume {:verifier.code 0} true;
    $i83 := $eq.i32($i82, 1);
    goto corral_source_split_7503;

  corral_source_split_7503:
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb64:
    assume $i83 == 1;
    goto corral_source_split_7520;

  corral_source_split_7520:
    assume {:verifier.code 0} true;
    $p84 := $M.45;
    goto corral_source_split_7521;

  corral_source_split_7521:
    assume {:verifier.code 0} true;
    $p85 := $M.49;
    goto corral_source_split_7522;

  corral_source_split_7522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1317} vslice_dummy_var_257 := vidioc_g_tuner($p84, $p24, $p85);
    goto SeqInstr_394, SeqInstr_395;

  SeqInstr_395:
    assume assertsPassed;
    goto SeqInstr_396;

  SeqInstr_396:
    goto corral_source_split_7523;

  corral_source_split_7523:
    assume {:verifier.code 0} true;
    $M.61 := 1;
    call {:si_unique_call 1318} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_7524;

  corral_source_split_7524:
    assume {:verifier.code 0} true;
    goto $bb66;

  SeqInstr_394:
    assume !assertsPassed;
    return;

  $bb53:
    assume $i71 == 1;
    goto corral_source_split_7497;

  corral_source_split_7497:
    assume {:verifier.code 0} true;
    $i77 := $M.61;
    goto corral_source_split_7498;

  corral_source_split_7498:
    assume {:verifier.code 0} true;
    $i78 := $eq.i32($i77, 1);
    goto corral_source_split_7499;

  corral_source_split_7499:
    assume {:verifier.code 0} true;
    assume {:branchcond $i78} true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb61:
    assume $i78 == 1;
    goto corral_source_split_7514;

  corral_source_split_7514:
    assume {:verifier.code 0} true;
    $p79 := $M.45;
    goto corral_source_split_7515;

  corral_source_split_7515:
    assume {:verifier.code 0} true;
    $p80 := $M.51;
    goto corral_source_split_7516;

  corral_source_split_7516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1315} vslice_dummy_var_256 := vidioc_s_ctrl($p79, $p15, $p80);
    goto SeqInstr_391, SeqInstr_392;

  SeqInstr_392:
    assume assertsPassed;
    goto SeqInstr_393;

  SeqInstr_393:
    goto corral_source_split_7517;

  corral_source_split_7517:
    assume {:verifier.code 0} true;
    $M.61 := 1;
    call {:si_unique_call 1316} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_7518;

  corral_source_split_7518:
    assume {:verifier.code 0} true;
    goto $bb63;

  SeqInstr_391:
    assume !assertsPassed;
    return;

  $bb51:
    assume $i70 == 1;
    assume {:verifier.code 0} true;
    $i72 := $eq.i32($i45, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i72} true;
    goto $bb55, $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    assume !($i72 == 1);
    goto $bb14;

  $bb55:
    assume $i72 == 1;
    goto corral_source_split_7505;

  corral_source_split_7505:
    assume {:verifier.code 0} true;
    $i73 := $M.61;
    goto corral_source_split_7506;

  corral_source_split_7506:
    assume {:verifier.code 0} true;
    $i74 := $eq.i32($i73, 1);
    goto corral_source_split_7507;

  corral_source_split_7507:
    assume {:verifier.code 0} true;
    assume {:branchcond $i74} true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb57:
    assume $i74 == 1;
    goto corral_source_split_7509;

  corral_source_split_7509:
    assume {:verifier.code 0} true;
    $p75 := $M.45;
    goto corral_source_split_7510;

  corral_source_split_7510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1313} vslice_dummy_var_255 := vidioc_reqbufs($p75, $p41, $p35);
    goto corral_source_split_7511;

  corral_source_split_7511:
    assume {:verifier.code 0} true;
    $M.61 := 1;
    call {:si_unique_call 1314} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_7512;

  corral_source_split_7512:
    assume {:verifier.code 0} true;
    goto $bb59;
}



const usb_register_driver: ref;

axiom usb_register_driver == $sub.ref(0, 577451);

procedure usb_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7659;

  corral_source_split_7659:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1366} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1367} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_7660;

  corral_source_split_7660:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_usb_driver_1: ref;

axiom ldv_usb_driver_1 == $sub.ref(0, 578483);

procedure ldv_usb_driver_1();
  free requires assertsPassed;
  modifies $M.62, $M.0, $CurrAddr;



implementation ldv_usb_driver_1()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7662;

  corral_source_split_7662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1368} $p0 := ldv_zalloc(1232);
    goto corral_source_split_7663;

  corral_source_split_7663:
    assume {:verifier.code 0} true;
    goto corral_source_split_7664;

  corral_source_split_7664:
    assume {:verifier.code 0} true;
    $M.62 := $p0;
    goto corral_source_split_7665;

  corral_source_split_7665:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_snd_pcm_ops_7: ref;

axiom ldv_initialize_snd_pcm_ops_7 == $sub.ref(0, 579515);

procedure ldv_initialize_snd_pcm_ops_7();
  free requires assertsPassed;
  modifies $M.63, $M.0, $CurrAddr;



implementation ldv_initialize_snd_pcm_ops_7()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7667;

  corral_source_split_7667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1369} $p0 := ldv_zalloc(504);
    goto corral_source_split_7668;

  corral_source_split_7668:
    assume {:verifier.code 0} true;
    goto corral_source_split_7669;

  corral_source_split_7669:
    assume {:verifier.code 0} true;
    $M.63 := $p0;
    goto corral_source_split_7670;

  corral_source_split_7670:
    assume {:verifier.code 0} true;
    return;
}



const ldv_main_exported_7: ref;

axiom ldv_main_exported_7 == $sub.ref(0, 580547);

procedure ldv_main_exported_7();
  free requires assertsPassed;
  modifies $M.64, $M.0, $M.65, $M.53, $M.66, $CurrAddr;



implementation ldv_main_exported_7()
{
  var $i0: i32;
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $i57: i32;
  var $i58: i1;
  var $p59: ref;
  var $i60: i32;
  var $i61: i32;
  var $i62: i1;
  var $i63: i32;
  var $i64: i32;
  var $i65: i32;
  var $i66: i1;
  var $p67: ref;
  var $i69: i32;
  var $i70: i1;
  var $p71: ref;
  var $i73: i32;
  var $i74: i1;
  var $p75: ref;
  var $i77: i32;
  var $i78: i1;
  var $p79: ref;
  var $i81: i32;
  var $i82: i1;
  var $p83: ref;
  var $i85: i32;
  var $i86: i1;
  var $p87: ref;
  var vslice_dummy_var_281: i64;
  var vslice_dummy_var_282: i64;
  var vslice_dummy_var_283: i32;
  var vslice_dummy_var_284: i32;
  var vslice_dummy_var_285: i32;
  var vslice_dummy_var_286: i32;
  var vslice_dummy_var_287: i32;
  var vslice_dummy_var_288: i32;
  var vslice_dummy_var_289: ref;
  var vslice_dummy_var_290: ref;
  var vslice_dummy_var_291: i32;
  var vslice_dummy_var_292: i32;
  var vslice_dummy_var_293: i32;
  var vslice_dummy_var_294: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7672;

  corral_source_split_7672:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1370} $i0 := __VERIFIER_nondet_uint();
    call {:si_unique_call 1371} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i0);
    call {:si_unique_call 1372} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_7673;

  corral_source_split_7673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1373} $p1 := ldv_zalloc(608);
    goto corral_source_split_7674;

  corral_source_split_7674:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_7675;

  corral_source_split_7675:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1374} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1375} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    call {:si_unique_call 1376} {:cexpr "tmp___1"} boogie_si_record_i64($i3);
    goto corral_source_split_7676;

  corral_source_split_7676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1377} $p4 := ldv_zalloc(1);
    goto corral_source_split_7677;

  corral_source_split_7677:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1378} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 1379} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    call {:si_unique_call 1380} {:cexpr "tmp___3"} boogie_si_record_i32($i5);
    goto corral_source_split_7678;

  corral_source_split_7678:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1381} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 1382} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    call {:si_unique_call 1383} {:cexpr "tmp___4"} boogie_si_record_i32($i6);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i6, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i6, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i6, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i6, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i6, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1420} ldv_stop();
    goto corral_source_split_7833;

  corral_source_split_7833:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i11 == 1;
    goto corral_source_split_7688;

  corral_source_split_7688:
    assume {:verifier.code 0} true;
    $i81 := $M.64;
    goto corral_source_split_7689;

  corral_source_split_7689:
    assume {:verifier.code 0} true;
    $i82 := $eq.i32($i81, 1);
    goto corral_source_split_7690;

  corral_source_split_7690:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $i85 := $M.64;
    goto corral_source_split_7825;

  corral_source_split_7825:
    assume {:verifier.code 0} true;
    $i86 := $eq.i32($i85, 2);
    goto corral_source_split_7826;

  corral_source_split_7826:
    assume {:verifier.code 0} true;
    assume {:branchcond $i86} true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb75:
    assume $i86 == 1;
    goto corral_source_split_7828;

  corral_source_split_7828:
    assume {:verifier.code 0} true;
    $p87 := $M.63;
    goto corral_source_split_7829;

  corral_source_split_7829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1418} vslice_dummy_var_294 := snd_pd_capture_trigger($p87, $i5);
    goto corral_source_split_7830;

  corral_source_split_7830:
    assume {:verifier.code 0} true;
    $M.64 := 2;
    call {:si_unique_call 1419} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_7831;

  corral_source_split_7831:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb72:
    assume $i82 == 1;
    goto corral_source_split_7820;

  corral_source_split_7820:
    assume {:verifier.code 0} true;
    $p83 := $M.63;
    goto corral_source_split_7821;

  corral_source_split_7821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1416} vslice_dummy_var_293 := snd_pd_capture_trigger($p83, $i5);
    goto corral_source_split_7822;

  corral_source_split_7822:
    assume {:verifier.code 0} true;
    $M.64 := 1;
    call {:si_unique_call 1417} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_7823;

  corral_source_split_7823:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb8:
    assume $i10 == 1;
    goto corral_source_split_7684;

  corral_source_split_7684:
    assume {:verifier.code 0} true;
    $i73 := $M.64;
    goto corral_source_split_7685;

  corral_source_split_7685:
    assume {:verifier.code 0} true;
    $i74 := $eq.i32($i73, 1);
    goto corral_source_split_7686;

  corral_source_split_7686:
    assume {:verifier.code 0} true;
    assume {:branchcond $i74} true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $i77 := $M.64;
    goto corral_source_split_7812;

  corral_source_split_7812:
    assume {:verifier.code 0} true;
    $i78 := $eq.i32($i77, 2);
    goto corral_source_split_7813;

  corral_source_split_7813:
    assume {:verifier.code 0} true;
    assume {:branchcond $i78} true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb69:
    assume $i78 == 1;
    goto corral_source_split_7815;

  corral_source_split_7815:
    assume {:verifier.code 0} true;
    $p79 := $M.63;
    goto corral_source_split_7816;

  corral_source_split_7816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1414} vslice_dummy_var_292 := snd_pd_hw_capture_params($p79, $p2);
    goto corral_source_split_7817;

  corral_source_split_7817:
    assume {:verifier.code 0} true;
    $M.64 := 2;
    call {:si_unique_call 1415} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_7818;

  corral_source_split_7818:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb66:
    assume $i74 == 1;
    goto corral_source_split_7807;

  corral_source_split_7807:
    assume {:verifier.code 0} true;
    $p75 := $M.63;
    goto corral_source_split_7808;

  corral_source_split_7808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1412} vslice_dummy_var_291 := snd_pd_hw_capture_params($p75, $p2);
    goto corral_source_split_7809;

  corral_source_split_7809:
    assume {:verifier.code 0} true;
    $M.64 := 1;
    call {:si_unique_call 1413} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_7810;

  corral_source_split_7810:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb6:
    assume $i9 == 1;
    goto corral_source_split_7680;

  corral_source_split_7680:
    assume {:verifier.code 0} true;
    $i65 := $M.64;
    goto corral_source_split_7681;

  corral_source_split_7681:
    assume {:verifier.code 0} true;
    $i66 := $eq.i32($i65, 1);
    goto corral_source_split_7682;

  corral_source_split_7682:
    assume {:verifier.code 0} true;
    assume {:branchcond $i66} true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $i69 := $M.64;
    goto corral_source_split_7799;

  corral_source_split_7799:
    assume {:verifier.code 0} true;
    $i70 := $eq.i32($i69, 2);
    goto corral_source_split_7800;

  corral_source_split_7800:
    assume {:verifier.code 0} true;
    assume {:branchcond $i70} true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb63:
    assume $i70 == 1;
    goto corral_source_split_7802;

  corral_source_split_7802:
    assume {:verifier.code 0} true;
    $p71 := $M.63;
    goto corral_source_split_7803;

  corral_source_split_7803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1410} vslice_dummy_var_290 := snd_pcm_pd_get_page($p71, $i3);
    goto corral_source_split_7804;

  corral_source_split_7804:
    assume {:verifier.code 0} true;
    $M.64 := 2;
    call {:si_unique_call 1411} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_7805;

  corral_source_split_7805:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb60:
    assume $i66 == 1;
    goto corral_source_split_7794;

  corral_source_split_7794:
    assume {:verifier.code 0} true;
    $p67 := $M.63;
    goto corral_source_split_7795;

  corral_source_split_7795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1408} vslice_dummy_var_289 := snd_pcm_pd_get_page($p67, $i3);
    goto corral_source_split_7796;

  corral_source_split_7796:
    assume {:verifier.code 0} true;
    $M.64 := 1;
    call {:si_unique_call 1409} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_7797;

  corral_source_split_7797:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb4:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i6, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i12 == 1);
    goto corral_source_split_7696;

  corral_source_split_7696:
    assume {:verifier.code 0} true;
    $i57 := $M.64;
    goto corral_source_split_7697;

  corral_source_split_7697:
    assume {:verifier.code 0} true;
    $i58 := $eq.i32($i57, 2);
    goto corral_source_split_7698;

  corral_source_split_7698:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb54:
    assume $i58 == 1;
    goto corral_source_split_7781;

  corral_source_split_7781:
    assume {:verifier.code 0} true;
    $p59 := $M.63;
    goto corral_source_split_7782;

  corral_source_split_7782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1404} $i60 := snd_pd_pcm_close($p59);
    goto corral_source_split_7783;

  corral_source_split_7783:
    assume {:verifier.code 0} true;
    $M.66 := $i60;
    call {:si_unique_call 1405} {:cexpr "ldv_retval_2"} boogie_si_record_i32($i60);
    goto corral_source_split_7784;

  corral_source_split_7784:
    assume {:verifier.code 0} true;
    $i61 := $M.66;
    goto corral_source_split_7785;

  corral_source_split_7785:
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i61, 0);
    goto corral_source_split_7786;

  corral_source_split_7786:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb56:
    assume $i62 == 1;
    goto corral_source_split_7788;

  corral_source_split_7788:
    assume {:verifier.code 0} true;
    $M.64 := 1;
    call {:si_unique_call 1406} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_7789;

  corral_source_split_7789:
    assume {:verifier.code 0} true;
    $i63 := $M.53;
    goto corral_source_split_7790;

  corral_source_split_7790:
    assume {:verifier.code 0} true;
    $i64 := $sub.i32($i63, 1);
    goto corral_source_split_7791;

  corral_source_split_7791:
    assume {:verifier.code 0} true;
    $M.53 := $i64;
    call {:si_unique_call 1407} {:cexpr "ref_cnt"} boogie_si_record_i32($i64);
    goto corral_source_split_7792;

  corral_source_split_7792:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb13:
    assume $i12 == 1;
    goto corral_source_split_7692;

  corral_source_split_7692:
    assume {:verifier.code 0} true;
    $i49 := $M.64;
    goto corral_source_split_7693;

  corral_source_split_7693:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i49, 1);
    goto corral_source_split_7694;

  corral_source_split_7694:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i53 := $M.64;
    goto corral_source_split_7773;

  corral_source_split_7773:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i53, 2);
    goto corral_source_split_7774;

  corral_source_split_7774:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb51:
    assume $i54 == 1;
    goto corral_source_split_7776;

  corral_source_split_7776:
    assume {:verifier.code 0} true;
    $p55 := $M.63;
    goto corral_source_split_7777;

  corral_source_split_7777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1402} vslice_dummy_var_288 := snd_pd_hw_capture_free($p55);
    goto corral_source_split_7778;

  corral_source_split_7778:
    assume {:verifier.code 0} true;
    $M.64 := 2;
    call {:si_unique_call 1403} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_7779;

  corral_source_split_7779:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb48:
    assume $i50 == 1;
    goto corral_source_split_7768;

  corral_source_split_7768:
    assume {:verifier.code 0} true;
    $p51 := $M.63;
    goto corral_source_split_7769;

  corral_source_split_7769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1400} vslice_dummy_var_287 := snd_pd_hw_capture_free($p51);
    goto corral_source_split_7770;

  corral_source_split_7770:
    assume {:verifier.code 0} true;
    $M.64 := 1;
    call {:si_unique_call 1401} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_7771;

  corral_source_split_7771:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb2:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i6, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i6, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i14 == 1);
    goto corral_source_split_7704;

  corral_source_split_7704:
    assume {:verifier.code 0} true;
    $i41 := $M.64;
    goto corral_source_split_7705;

  corral_source_split_7705:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, 1);
    goto corral_source_split_7706;

  corral_source_split_7706:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i45 := $M.64;
    goto corral_source_split_7760;

  corral_source_split_7760:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i45, 2);
    goto corral_source_split_7761;

  corral_source_split_7761:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb45:
    assume $i46 == 1;
    goto corral_source_split_7763;

  corral_source_split_7763:
    assume {:verifier.code 0} true;
    $p47 := $M.63;
    goto corral_source_split_7764;

  corral_source_split_7764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1398} vslice_dummy_var_286 := snd_pd_prepare($p47);
    goto corral_source_split_7765;

  corral_source_split_7765:
    assume {:verifier.code 0} true;
    $M.64 := 2;
    call {:si_unique_call 1399} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_7766;

  corral_source_split_7766:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb42:
    assume $i42 == 1;
    goto corral_source_split_7755;

  corral_source_split_7755:
    assume {:verifier.code 0} true;
    $p43 := $M.63;
    goto corral_source_split_7756;

  corral_source_split_7756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1396} vslice_dummy_var_285 := snd_pd_prepare($p43);
    goto corral_source_split_7757;

  corral_source_split_7757:
    assume {:verifier.code 0} true;
    $M.64 := 1;
    call {:si_unique_call 1397} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_7758;

  corral_source_split_7758:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb17:
    assume $i14 == 1;
    goto corral_source_split_7700;

  corral_source_split_7700:
    assume {:verifier.code 0} true;
    $i33 := $M.64;
    goto corral_source_split_7701;

  corral_source_split_7701:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 1);
    goto corral_source_split_7702;

  corral_source_split_7702:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i37 := $M.64;
    goto corral_source_split_7747;

  corral_source_split_7747:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 2);
    goto corral_source_split_7748;

  corral_source_split_7748:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb39:
    assume $i38 == 1;
    goto corral_source_split_7750;

  corral_source_split_7750:
    assume {:verifier.code 0} true;
    $p39 := $M.63;
    goto corral_source_split_7751;

  corral_source_split_7751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1394} vslice_dummy_var_284 := snd_pcm_lib_ioctl($p39, $i0, $p4);
    goto corral_source_split_7752;

  corral_source_split_7752:
    assume {:verifier.code 0} true;
    $M.64 := 2;
    call {:si_unique_call 1395} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_7753;

  corral_source_split_7753:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb36:
    assume $i34 == 1;
    goto corral_source_split_7742;

  corral_source_split_7742:
    assume {:verifier.code 0} true;
    $p35 := $M.63;
    goto corral_source_split_7743;

  corral_source_split_7743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1392} vslice_dummy_var_283 := snd_pcm_lib_ioctl($p35, $i0, $p4);
    goto corral_source_split_7744;

  corral_source_split_7744:
    assume {:verifier.code 0} true;
    $M.64 := 1;
    call {:si_unique_call 1393} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_7745;

  corral_source_split_7745:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb15:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i6, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i15 == 1);
    goto corral_source_split_7708;

  corral_source_split_7708:
    assume {:verifier.code 0} true;
    $i25 := $M.64;
    goto corral_source_split_7709;

  corral_source_split_7709:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 1);
    goto corral_source_split_7710;

  corral_source_split_7710:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb30:
    assume $i26 == 1;
    goto corral_source_split_7729;

  corral_source_split_7729:
    assume {:verifier.code 0} true;
    $p27 := $M.63;
    goto corral_source_split_7730;

  corral_source_split_7730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1388} $i28 := snd_pd_capture_open($p27);
    goto corral_source_split_7731;

  corral_source_split_7731:
    assume {:verifier.code 0} true;
    $M.65 := $i28;
    call {:si_unique_call 1389} {:cexpr "ldv_retval_3"} boogie_si_record_i32($i28);
    goto corral_source_split_7732;

  corral_source_split_7732:
    assume {:verifier.code 0} true;
    $i29 := $M.65;
    goto corral_source_split_7733;

  corral_source_split_7733:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 0);
    goto corral_source_split_7734;

  corral_source_split_7734:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb32:
    assume $i30 == 1;
    goto corral_source_split_7736;

  corral_source_split_7736:
    assume {:verifier.code 0} true;
    $M.64 := 2;
    call {:si_unique_call 1390} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_7737;

  corral_source_split_7737:
    assume {:verifier.code 0} true;
    $i31 := $M.53;
    goto corral_source_split_7738;

  corral_source_split_7738:
    assume {:verifier.code 0} true;
    $i32 := $add.i32($i31, 1);
    goto corral_source_split_7739;

  corral_source_split_7739:
    assume {:verifier.code 0} true;
    $M.53 := $i32;
    call {:si_unique_call 1391} {:cexpr "ref_cnt"} boogie_si_record_i32($i32);
    goto corral_source_split_7740;

  corral_source_split_7740:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb19:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i6, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb12;

  $bb21:
    assume $i16 == 1;
    goto corral_source_split_7712;

  corral_source_split_7712:
    assume {:verifier.code 0} true;
    $i17 := $M.64;
    goto corral_source_split_7713;

  corral_source_split_7713:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 1);
    goto corral_source_split_7714;

  corral_source_split_7714:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i21 := $M.64;
    goto corral_source_split_7721;

  corral_source_split_7721:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 2);
    goto corral_source_split_7722;

  corral_source_split_7722:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb26:
    assume $i22 == 1;
    goto corral_source_split_7724;

  corral_source_split_7724:
    assume {:verifier.code 0} true;
    $p23 := $M.63;
    goto corral_source_split_7725;

  corral_source_split_7725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1386} vslice_dummy_var_282 := snd_pd_capture_pointer($p23);
    goto corral_source_split_7726;

  corral_source_split_7726:
    assume {:verifier.code 0} true;
    $M.64 := 2;
    call {:si_unique_call 1387} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_7727;

  corral_source_split_7727:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb23:
    assume $i18 == 1;
    goto corral_source_split_7716;

  corral_source_split_7716:
    assume {:verifier.code 0} true;
    $p19 := $M.63;
    goto corral_source_split_7717;

  corral_source_split_7717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1384} vslice_dummy_var_281 := snd_pd_capture_pointer($p19);
    goto corral_source_split_7718;

  corral_source_split_7718:
    assume {:verifier.code 0} true;
    $M.64 := 1;
    call {:si_unique_call 1385} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_7719;

  corral_source_split_7719:
    assume {:verifier.code 0} true;
    goto $bb25;
}



const ldv_initialize_dvb_frontend_ops_6: ref;

axiom ldv_initialize_dvb_frontend_ops_6 == $sub.ref(0, 581579);

procedure ldv_initialize_dvb_frontend_ops_6();
  free requires assertsPassed;
  modifies $M.67, $M.68, $M.0, $CurrAddr;



implementation ldv_initialize_dvb_frontend_ops_6()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7835;

  corral_source_split_7835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1421} $p0 := ldv_zalloc(36);
    goto corral_source_split_7836;

  corral_source_split_7836:
    assume {:verifier.code 0} true;
    goto corral_source_split_7837;

  corral_source_split_7837:
    assume {:verifier.code 0} true;
    $M.67 := $p0;
    goto corral_source_split_7838;

  corral_source_split_7838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1422} $p2 := ldv_zalloc(952);
    goto corral_source_split_7839;

  corral_source_split_7839:
    assume {:verifier.code 0} true;
    goto corral_source_split_7840;

  corral_source_split_7840:
    assume {:verifier.code 0} true;
    $M.68 := $p2;
    goto corral_source_split_7841;

  corral_source_split_7841:
    assume {:verifier.code 0} true;
    return;
}



const ldv_main_exported_6: ref;

axiom ldv_main_exported_6 == $sub.ref(0, 582611);

procedure ldv_main_exported_6();
  free requires assertsPassed;
  modifies $M.0, $M.69, $M.53, $M.70, $M.3, $M.25, assertsPassed, $CurrAddr;



implementation ldv_main_exported_6()
{
  var $i0: i32;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $p59: ref;
  var $i61: i32;
  var $i62: i1;
  var $p63: ref;
  var $p64: ref;
  var $i66: i32;
  var $i67: i1;
  var $p68: ref;
  var $p69: ref;
  var $i71: i32;
  var $i72: i1;
  var $p73: ref;
  var $i74: i32;
  var $i75: i32;
  var $i76: i32;
  var $i77: i1;
  var $p78: ref;
  var $i79: i32;
  var $i80: i32;
  var $i81: i32;
  var $i82: i1;
  var $p83: ref;
  var $p84: ref;
  var $i86: i32;
  var $i87: i1;
  var $p88: ref;
  var $p89: ref;
  var $i91: i32;
  var $i92: i1;
  var $p93: ref;
  var $p94: ref;
  var $i96: i32;
  var $i97: i1;
  var $p98: ref;
  var $i100: i32;
  var $i101: i1;
  var $p102: ref;
  var $i104: i32;
  var $i105: i1;
  var $p106: ref;
  var $i108: i32;
  var $i109: i1;
  var $p110: ref;
  var $i112: i32;
  var $i113: i1;
  var $p114: ref;
  var $i116: i32;
  var $i117: i1;
  var $p118: ref;
  var $i120: i32;
  var $i121: i1;
  var $p122: ref;
  var $i124: i32;
  var $i125: i1;
  var $p126: ref;
  var $i128: i32;
  var $i129: i1;
  var $p130: ref;
  var $i132: i32;
  var $i133: i1;
  var $p134: ref;
  var $i136: i32;
  var $i137: i1;
  var $p138: ref;
  var $i140: i32;
  var $i141: i1;
  var $p142: ref;
  var $i144: i32;
  var $i145: i1;
  var $p146: ref;
  var $i147: i32;
  var $i148: i32;
  var $i149: i1;
  var $i150: i32;
  var $i151: i1;
  var $p152: ref;
  var $i154: i32;
  var $i155: i1;
  var $p156: ref;
  var $i158: i32;
  var $i159: i1;
  var $p160: ref;
  var $i162: i32;
  var $i163: i1;
  var $i165: i32;
  var $i166: i32;
  var vslice_dummy_var_295: i32;
  var vslice_dummy_var_296: i32;
  var vslice_dummy_var_297: i32;
  var vslice_dummy_var_298: i32;
  var vslice_dummy_var_299: i32;
  var vslice_dummy_var_300: i32;
  var vslice_dummy_var_301: i32;
  var vslice_dummy_var_302: i32;
  var vslice_dummy_var_303: i32;
  var vslice_dummy_var_304: i32;
  var vslice_dummy_var_305: i32;
  var vslice_dummy_var_306: i32;
  var vslice_dummy_var_307: i32;
  var vslice_dummy_var_308: i32;
  var vslice_dummy_var_309: i32;
  var vslice_dummy_var_310: i32;
  var vslice_dummy_var_311: i32;
  var vslice_dummy_var_312: i32;
  var vslice_dummy_var_313: i32;
  var vslice_dummy_var_314: i32;
  var vslice_dummy_var_315: i32;
  var vslice_dummy_var_316: i32;
  var vslice_dummy_var_317: i32;
  var vslice_dummy_var_318: i32;
  var vslice_dummy_var_319: i32;
  var vslice_dummy_var_320: i32;
  var vslice_dummy_var_321: i32;
  var vslice_dummy_var_322: i32;
  var vslice_dummy_var_323: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7843;

  corral_source_split_7843:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1423} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1424} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1425} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_7844;

  corral_source_split_7844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1426} $p1 := ldv_zalloc(48);
    goto corral_source_split_7845;

  corral_source_split_7845:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_7846;

  corral_source_split_7846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1427} $p3 := ldv_zalloc(2);
    goto corral_source_split_7847;

  corral_source_split_7847:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_7848;

  corral_source_split_7848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1428} $p5 := ldv_zalloc(4);
    goto corral_source_split_7849;

  corral_source_split_7849:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_7850;

  corral_source_split_7850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1429} $p7 := ldv_zalloc(2);
    goto corral_source_split_7851;

  corral_source_split_7851:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_7852;

  corral_source_split_7852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1430} $p9 := ldv_zalloc(4);
    goto corral_source_split_7853;

  corral_source_split_7853:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_7854;

  corral_source_split_7854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1431} $p11 := ldv_zalloc(4);
    goto corral_source_split_7855;

  corral_source_split_7855:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_7856;

  corral_source_split_7856:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1432} $i13 := __VERIFIER_nondet_int();
    call {:si_unique_call 1433} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i13);
    call {:si_unique_call 1434} {:cexpr "tmp___6"} boogie_si_record_i32($i13);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i13, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i13, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i13, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i13, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i13, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1503} ldv_stop();
    goto corral_source_split_8146;

  corral_source_split_8146:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i18 == 1;
    goto corral_source_split_7862;

  corral_source_split_7862:
    assume {:verifier.code 0} true;
    $i162 := $M.69;
    goto corral_source_split_7863;

  corral_source_split_7863:
    assume {:verifier.code 0} true;
    $i163 := $eq.i32($i162, 1);
    goto corral_source_split_7864;

  corral_source_split_7864:
    assume {:verifier.code 0} true;
    assume {:branchcond $i163} true;
    goto $bb128, $bb129;

  $bb129:
    assume !($i163 == 1);
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb128:
    assume $i163 == 1;
    goto corral_source_split_8139;

  corral_source_split_8139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1500} vslice_dummy_var_323 := ldv_setup_6();
    goto corral_source_split_8140;

  corral_source_split_8140:
    assume {:verifier.code 0} true;
    $M.69 := 2;
    call {:si_unique_call 1501} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_8141;

  corral_source_split_8141:
    assume {:verifier.code 0} true;
    $i165 := $M.53;
    goto corral_source_split_8142;

  corral_source_split_8142:
    assume {:verifier.code 0} true;
    $i166 := $add.i32($i165, 1);
    goto corral_source_split_8143;

  corral_source_split_8143:
    assume {:verifier.code 0} true;
    $M.53 := $i166;
    call {:si_unique_call 1502} {:cexpr "ref_cnt"} boogie_si_record_i32($i166);
    goto corral_source_split_8144;

  corral_source_split_8144:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_7858;

  corral_source_split_7858:
    assume {:verifier.code 0} true;
    $i150 := $M.69;
    goto corral_source_split_7859;

  corral_source_split_7859:
    assume {:verifier.code 0} true;
    $i151 := $eq.i32($i150, 1);
    goto corral_source_split_7860;

  corral_source_split_7860:
    assume {:verifier.code 0} true;
    assume {:branchcond $i151} true;
    goto $bb119, $bb120;

  $bb120:
    assume !($i151 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    $i154 := $M.69;
    goto corral_source_split_8123;

  corral_source_split_8123:
    assume {:verifier.code 0} true;
    $i155 := $eq.i32($i154, 3);
    goto corral_source_split_8124;

  corral_source_split_8124:
    assume {:verifier.code 0} true;
    assume {:branchcond $i155} true;
    goto $bb122, $bb123;

  $bb123:
    assume !($i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    $i158 := $M.69;
    goto corral_source_split_8131;

  corral_source_split_8131:
    assume {:verifier.code 0} true;
    $i159 := $eq.i32($i158, 2);
    goto corral_source_split_8132;

  corral_source_split_8132:
    assume {:verifier.code 0} true;
    assume {:branchcond $i159} true;
    goto $bb125, $bb126;

  $bb126:
    assume !($i159 == 1);
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb125:
    assume $i159 == 1;
    goto corral_source_split_8134;

  corral_source_split_8134:
    assume {:verifier.code 0} true;
    $p160 := $M.68;
    goto corral_source_split_8135;

  corral_source_split_8135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1498} vslice_dummy_var_322 := poseidon_read_unc_blocks($p160, $p6);
    goto corral_source_split_8136;

  corral_source_split_8136:
    assume {:verifier.code 0} true;
    $M.69 := 2;
    call {:si_unique_call 1499} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_8137;

  corral_source_split_8137:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb122:
    assume $i155 == 1;
    goto corral_source_split_8126;

  corral_source_split_8126:
    assume {:verifier.code 0} true;
    $p156 := $M.68;
    goto corral_source_split_8127;

  corral_source_split_8127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1496} vslice_dummy_var_321 := poseidon_read_unc_blocks($p156, $p6);
    goto corral_source_split_8128;

  corral_source_split_8128:
    assume {:verifier.code 0} true;
    $M.69 := 3;
    call {:si_unique_call 1497} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_8129;

  corral_source_split_8129:
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb119:
    assume $i151 == 1;
    goto corral_source_split_8118;

  corral_source_split_8118:
    assume {:verifier.code 0} true;
    $p152 := $M.68;
    goto corral_source_split_8119;

  corral_source_split_8119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1494} vslice_dummy_var_320 := poseidon_read_unc_blocks($p152, $p6);
    goto corral_source_split_8120;

  corral_source_split_8120:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 1495} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_8121;

  corral_source_split_8121:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb6:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i13, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    goto corral_source_split_7870;

  corral_source_split_7870:
    assume {:verifier.code 0} true;
    $i144 := $M.69;
    goto corral_source_split_7871;

  corral_source_split_7871:
    assume {:verifier.code 0} true;
    $i145 := $eq.i32($i144, 2);
    goto corral_source_split_7872;

  corral_source_split_7872:
    assume {:verifier.code 0} true;
    assume {:branchcond $i145} true;
    goto $bb113, $bb114;

  $bb114:
    assume !($i145 == 1);
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb113:
    assume $i145 == 1;
    goto corral_source_split_8108;

  corral_source_split_8108:
    assume {:verifier.code 0} true;
    $p146 := $M.68;
    goto corral_source_split_8109;

  corral_source_split_8109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1491} $i147 := poseidon_fe_init($p146);
    goto corral_source_split_8110;

  corral_source_split_8110:
    assume {:verifier.code 0} true;
    $M.70 := $i147;
    call {:si_unique_call 1492} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i147);
    goto corral_source_split_8111;

  corral_source_split_8111:
    assume {:verifier.code 0} true;
    $i148 := $M.70;
    goto corral_source_split_8112;

  corral_source_split_8112:
    assume {:verifier.code 0} true;
    $i149 := $eq.i32($i148, 0);
    goto corral_source_split_8113;

  corral_source_split_8113:
    assume {:verifier.code 0} true;
    assume {:branchcond $i149} true;
    goto $bb115, $bb116;

  $bb116:
    assume !($i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb115:
    assume $i149 == 1;
    goto corral_source_split_8115;

  corral_source_split_8115:
    assume {:verifier.code 0} true;
    $M.69 := 3;
    call {:si_unique_call 1493} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_8116;

  corral_source_split_8116:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_7866;

  corral_source_split_7866:
    assume {:verifier.code 0} true;
    $i132 := $M.69;
    goto corral_source_split_7867;

  corral_source_split_7867:
    assume {:verifier.code 0} true;
    $i133 := $eq.i32($i132, 1);
    goto corral_source_split_7868;

  corral_source_split_7868:
    assume {:verifier.code 0} true;
    assume {:branchcond $i133} true;
    goto $bb104, $bb105;

  $bb105:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    $i136 := $M.69;
    goto corral_source_split_8092;

  corral_source_split_8092:
    assume {:verifier.code 0} true;
    $i137 := $eq.i32($i136, 3);
    goto corral_source_split_8093;

  corral_source_split_8093:
    assume {:verifier.code 0} true;
    assume {:branchcond $i137} true;
    goto $bb107, $bb108;

  $bb108:
    assume !($i137 == 1);
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    $i140 := $M.69;
    goto corral_source_split_8100;

  corral_source_split_8100:
    assume {:verifier.code 0} true;
    $i141 := $eq.i32($i140, 2);
    goto corral_source_split_8101;

  corral_source_split_8101:
    assume {:verifier.code 0} true;
    assume {:branchcond $i141} true;
    goto $bb110, $bb111;

  $bb111:
    assume !($i141 == 1);
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb110:
    assume $i141 == 1;
    goto corral_source_split_8103;

  corral_source_split_8103:
    assume {:verifier.code 0} true;
    $p142 := $M.68;
    goto corral_source_split_8104;

  corral_source_split_8104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1489} vslice_dummy_var_319 := poseidon_read_status($p142, $p12);
    goto SeqInstr_454, SeqInstr_455;

  SeqInstr_455:
    assume assertsPassed;
    goto SeqInstr_456;

  SeqInstr_456:
    goto corral_source_split_8105;

  corral_source_split_8105:
    assume {:verifier.code 0} true;
    $M.69 := 2;
    call {:si_unique_call 1490} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_8106;

  corral_source_split_8106:
    assume {:verifier.code 0} true;
    goto $bb112;

  SeqInstr_454:
    assume !assertsPassed;
    return;

  $bb107:
    assume $i137 == 1;
    goto corral_source_split_8095;

  corral_source_split_8095:
    assume {:verifier.code 0} true;
    $p138 := $M.68;
    goto corral_source_split_8096;

  corral_source_split_8096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1487} vslice_dummy_var_318 := poseidon_read_status($p138, $p12);
    goto SeqInstr_451, SeqInstr_452;

  SeqInstr_452:
    assume assertsPassed;
    goto SeqInstr_453;

  SeqInstr_453:
    goto corral_source_split_8097;

  corral_source_split_8097:
    assume {:verifier.code 0} true;
    $M.69 := 3;
    call {:si_unique_call 1488} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_8098;

  corral_source_split_8098:
    assume {:verifier.code 0} true;
    goto $bb109;

  SeqInstr_451:
    assume !assertsPassed;
    return;

  $bb104:
    assume $i133 == 1;
    goto corral_source_split_8087;

  corral_source_split_8087:
    assume {:verifier.code 0} true;
    $p134 := $M.68;
    goto corral_source_split_8088;

  corral_source_split_8088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1485} vslice_dummy_var_317 := poseidon_read_status($p134, $p12);
    goto SeqInstr_448, SeqInstr_449;

  SeqInstr_449:
    assume assertsPassed;
    goto SeqInstr_450;

  SeqInstr_450:
    goto corral_source_split_8089;

  corral_source_split_8089:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 1486} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_8090;

  corral_source_split_8090:
    assume {:verifier.code 0} true;
    goto $bb106;

  SeqInstr_448:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i13, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i13, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i21 == 1);
    goto corral_source_split_7882;

  corral_source_split_7882:
    assume {:verifier.code 0} true;
    $i120 := $M.69;
    goto corral_source_split_7883;

  corral_source_split_7883:
    assume {:verifier.code 0} true;
    $i121 := $eq.i32($i120, 1);
    goto corral_source_split_7884;

  corral_source_split_7884:
    assume {:verifier.code 0} true;
    assume {:branchcond $i121} true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i121 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    $i124 := $M.69;
    goto corral_source_split_8071;

  corral_source_split_8071:
    assume {:verifier.code 0} true;
    $i125 := $eq.i32($i124, 3);
    goto corral_source_split_8072;

  corral_source_split_8072:
    assume {:verifier.code 0} true;
    assume {:branchcond $i125} true;
    goto $bb98, $bb99;

  $bb99:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    $i128 := $M.69;
    goto corral_source_split_8079;

  corral_source_split_8079:
    assume {:verifier.code 0} true;
    $i129 := $eq.i32($i128, 2);
    goto corral_source_split_8080;

  corral_source_split_8080:
    assume {:verifier.code 0} true;
    assume {:branchcond $i129} true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb101:
    assume $i129 == 1;
    goto corral_source_split_8082;

  corral_source_split_8082:
    assume {:verifier.code 0} true;
    $p130 := $M.68;
    goto corral_source_split_8083;

  corral_source_split_8083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1483} vslice_dummy_var_316 := poseidon_fe_get_tune_settings($p130, $p2);
    goto corral_source_split_8084;

  corral_source_split_8084:
    assume {:verifier.code 0} true;
    $M.69 := 2;
    call {:si_unique_call 1484} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_8085;

  corral_source_split_8085:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb98:
    assume $i125 == 1;
    goto corral_source_split_8074;

  corral_source_split_8074:
    assume {:verifier.code 0} true;
    $p126 := $M.68;
    goto corral_source_split_8075;

  corral_source_split_8075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1481} vslice_dummy_var_315 := poseidon_fe_get_tune_settings($p126, $p2);
    goto corral_source_split_8076;

  corral_source_split_8076:
    assume {:verifier.code 0} true;
    $M.69 := 3;
    call {:si_unique_call 1482} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_8077;

  corral_source_split_8077:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb95:
    assume $i121 == 1;
    goto corral_source_split_8066;

  corral_source_split_8066:
    assume {:verifier.code 0} true;
    $p122 := $M.68;
    goto corral_source_split_8067;

  corral_source_split_8067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1479} vslice_dummy_var_314 := poseidon_fe_get_tune_settings($p122, $p2);
    goto corral_source_split_8068;

  corral_source_split_8068:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 1480} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_8069;

  corral_source_split_8069:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb17:
    assume $i21 == 1;
    goto corral_source_split_7878;

  corral_source_split_7878:
    assume {:verifier.code 0} true;
    $i108 := $M.69;
    goto corral_source_split_7879;

  corral_source_split_7879:
    assume {:verifier.code 0} true;
    $i109 := $eq.i32($i108, 1);
    goto corral_source_split_7880;

  corral_source_split_7880:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i109 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $i112 := $M.69;
    goto corral_source_split_8050;

  corral_source_split_8050:
    assume {:verifier.code 0} true;
    $i113 := $eq.i32($i112, 3);
    goto corral_source_split_8051;

  corral_source_split_8051:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    $i116 := $M.69;
    goto corral_source_split_8058;

  corral_source_split_8058:
    assume {:verifier.code 0} true;
    $i117 := $eq.i32($i116, 2);
    goto corral_source_split_8059;

  corral_source_split_8059:
    assume {:verifier.code 0} true;
    assume {:branchcond $i117} true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb92:
    assume $i117 == 1;
    goto corral_source_split_8061;

  corral_source_split_8061:
    assume {:verifier.code 0} true;
    $p118 := $M.68;
    goto corral_source_split_8062;

  corral_source_split_8062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1477} vslice_dummy_var_313 := poseidon_read_signal_strength($p118, $p8);
    goto SeqInstr_445, SeqInstr_446;

  SeqInstr_446:
    assume assertsPassed;
    goto SeqInstr_447;

  SeqInstr_447:
    goto corral_source_split_8063;

  corral_source_split_8063:
    assume {:verifier.code 0} true;
    $M.69 := 2;
    call {:si_unique_call 1478} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_8064;

  corral_source_split_8064:
    assume {:verifier.code 0} true;
    goto $bb94;

  SeqInstr_445:
    assume !assertsPassed;
    return;

  $bb89:
    assume $i113 == 1;
    goto corral_source_split_8053;

  corral_source_split_8053:
    assume {:verifier.code 0} true;
    $p114 := $M.68;
    goto corral_source_split_8054;

  corral_source_split_8054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1475} vslice_dummy_var_312 := poseidon_read_signal_strength($p114, $p8);
    goto SeqInstr_442, SeqInstr_443;

  SeqInstr_443:
    assume assertsPassed;
    goto SeqInstr_444;

  SeqInstr_444:
    goto corral_source_split_8055;

  corral_source_split_8055:
    assume {:verifier.code 0} true;
    $M.69 := 3;
    call {:si_unique_call 1476} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_8056;

  corral_source_split_8056:
    assume {:verifier.code 0} true;
    goto $bb91;

  SeqInstr_442:
    assume !assertsPassed;
    return;

  $bb86:
    assume $i109 == 1;
    goto corral_source_split_8045;

  corral_source_split_8045:
    assume {:verifier.code 0} true;
    $p110 := $M.68;
    goto corral_source_split_8046;

  corral_source_split_8046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1473} vslice_dummy_var_311 := poseidon_read_signal_strength($p110, $p8);
    goto SeqInstr_439, SeqInstr_440;

  SeqInstr_440:
    assume assertsPassed;
    goto SeqInstr_441;

  SeqInstr_441:
    goto corral_source_split_8047;

  corral_source_split_8047:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 1474} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_8048;

  corral_source_split_8048:
    assume {:verifier.code 0} true;
    goto $bb88;

  SeqInstr_439:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i20 == 1;
    goto corral_source_split_7874;

  corral_source_split_7874:
    assume {:verifier.code 0} true;
    $i96 := $M.69;
    goto corral_source_split_7875;

  corral_source_split_7875:
    assume {:verifier.code 0} true;
    $i97 := $eq.i32($i96, 1);
    goto corral_source_split_7876;

  corral_source_split_7876:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $i100 := $M.69;
    goto corral_source_split_8029;

  corral_source_split_8029:
    assume {:verifier.code 0} true;
    $i101 := $eq.i32($i100, 3);
    goto corral_source_split_8030;

  corral_source_split_8030:
    assume {:verifier.code 0} true;
    assume {:branchcond $i101} true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $i104 := $M.69;
    goto corral_source_split_8037;

  corral_source_split_8037:
    assume {:verifier.code 0} true;
    $i105 := $eq.i32($i104, 2);
    goto corral_source_split_8038;

  corral_source_split_8038:
    assume {:verifier.code 0} true;
    assume {:branchcond $i105} true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb83:
    assume $i105 == 1;
    goto corral_source_split_8040;

  corral_source_split_8040:
    assume {:verifier.code 0} true;
    $p106 := $M.68;
    goto corral_source_split_8041;

  corral_source_split_8041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1471} vslice_dummy_var_310 := poseidon_read_ber($p106, $p10);
    goto SeqInstr_436, SeqInstr_437;

  SeqInstr_437:
    assume assertsPassed;
    goto SeqInstr_438;

  SeqInstr_438:
    goto corral_source_split_8042;

  corral_source_split_8042:
    assume {:verifier.code 0} true;
    $M.69 := 2;
    call {:si_unique_call 1472} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_8043;

  corral_source_split_8043:
    assume {:verifier.code 0} true;
    goto $bb85;

  SeqInstr_436:
    assume !assertsPassed;
    return;

  $bb80:
    assume $i101 == 1;
    goto corral_source_split_8032;

  corral_source_split_8032:
    assume {:verifier.code 0} true;
    $p102 := $M.68;
    goto corral_source_split_8033;

  corral_source_split_8033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1469} vslice_dummy_var_309 := poseidon_read_ber($p102, $p10);
    goto SeqInstr_433, SeqInstr_434;

  SeqInstr_434:
    assume assertsPassed;
    goto SeqInstr_435;

  SeqInstr_435:
    goto corral_source_split_8034;

  corral_source_split_8034:
    assume {:verifier.code 0} true;
    $M.69 := 3;
    call {:si_unique_call 1470} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_8035;

  corral_source_split_8035:
    assume {:verifier.code 0} true;
    goto $bb82;

  SeqInstr_433:
    assume !assertsPassed;
    return;

  $bb77:
    assume $i97 == 1;
    goto corral_source_split_8024;

  corral_source_split_8024:
    assume {:verifier.code 0} true;
    $p98 := $M.68;
    goto corral_source_split_8025;

  corral_source_split_8025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1467} vslice_dummy_var_308 := poseidon_read_ber($p98, $p10);
    goto SeqInstr_430, SeqInstr_431;

  SeqInstr_431:
    assume assertsPassed;
    goto SeqInstr_432;

  SeqInstr_432:
    goto corral_source_split_8026;

  corral_source_split_8026:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 1468} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_8027;

  corral_source_split_8027:
    assume {:verifier.code 0} true;
    goto $bb79;

  SeqInstr_430:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i13, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i13, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i13, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i24 == 1);
    goto corral_source_split_7894;

  corral_source_split_7894:
    assume {:verifier.code 0} true;
    $i81 := $M.69;
    goto corral_source_split_7895;

  corral_source_split_7895:
    assume {:verifier.code 0} true;
    $i82 := $eq.i32($i81, 1);
    goto corral_source_split_7896;

  corral_source_split_7896:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $i86 := $M.69;
    goto corral_source_split_8006;

  corral_source_split_8006:
    assume {:verifier.code 0} true;
    $i87 := $eq.i32($i86, 3);
    goto corral_source_split_8007;

  corral_source_split_8007:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $i91 := $M.69;
    goto corral_source_split_8015;

  corral_source_split_8015:
    assume {:verifier.code 0} true;
    $i92 := $eq.i32($i91, 2);
    goto corral_source_split_8016;

  corral_source_split_8016:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb74:
    assume $i92 == 1;
    goto corral_source_split_8018;

  corral_source_split_8018:
    assume {:verifier.code 0} true;
    $p93 := $M.68;
    goto corral_source_split_8019;

  corral_source_split_8019:
    assume {:verifier.code 0} true;
    $p94 := $M.67;
    goto corral_source_split_8020;

  corral_source_split_8020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1465} vslice_dummy_var_307 := poseidon_get_fe($p93, $p94);
    goto corral_source_split_8021;

  corral_source_split_8021:
    assume {:verifier.code 0} true;
    $M.69 := 2;
    call {:si_unique_call 1466} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_8022;

  corral_source_split_8022:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb71:
    assume $i87 == 1;
    goto corral_source_split_8009;

  corral_source_split_8009:
    assume {:verifier.code 0} true;
    $p88 := $M.68;
    goto corral_source_split_8010;

  corral_source_split_8010:
    assume {:verifier.code 0} true;
    $p89 := $M.67;
    goto corral_source_split_8011;

  corral_source_split_8011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1463} vslice_dummy_var_306 := poseidon_get_fe($p88, $p89);
    goto corral_source_split_8012;

  corral_source_split_8012:
    assume {:verifier.code 0} true;
    $M.69 := 3;
    call {:si_unique_call 1464} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_8013;

  corral_source_split_8013:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb68:
    assume $i82 == 1;
    goto corral_source_split_8000;

  corral_source_split_8000:
    assume {:verifier.code 0} true;
    $p83 := $M.68;
    goto corral_source_split_8001;

  corral_source_split_8001:
    assume {:verifier.code 0} true;
    $p84 := $M.67;
    goto corral_source_split_8002;

  corral_source_split_8002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1461} vslice_dummy_var_305 := poseidon_get_fe($p83, $p84);
    goto corral_source_split_8003;

  corral_source_split_8003:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 1462} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_8004;

  corral_source_split_8004:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb23:
    assume $i24 == 1;
    goto corral_source_split_7890;

  corral_source_split_7890:
    assume {:verifier.code 0} true;
    $i71 := $M.69;
    goto corral_source_split_7891;

  corral_source_split_7891:
    assume {:verifier.code 0} true;
    $i72 := $eq.i32($i71, 3);
    goto corral_source_split_7892;

  corral_source_split_7892:
    assume {:verifier.code 0} true;
    assume {:branchcond $i72} true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $i76 := $M.69;
    goto corral_source_split_7989;

  corral_source_split_7989:
    assume {:verifier.code 0} true;
    $i77 := $eq.i32($i76, 2);
    goto corral_source_split_7990;

  corral_source_split_7990:
    assume {:verifier.code 0} true;
    assume {:branchcond $i77} true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb65:
    assume $i77 == 1;
    goto corral_source_split_7992;

  corral_source_split_7992:
    assume {:verifier.code 0} true;
    $p78 := $M.68;
    goto corral_source_split_7993;

  corral_source_split_7993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1458} poseidon_fe_release($p78);
    goto corral_source_split_7994;

  corral_source_split_7994:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 1459} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_7995;

  corral_source_split_7995:
    assume {:verifier.code 0} true;
    $i79 := $M.53;
    goto corral_source_split_7996;

  corral_source_split_7996:
    assume {:verifier.code 0} true;
    $i80 := $sub.i32($i79, 1);
    goto corral_source_split_7997;

  corral_source_split_7997:
    assume {:verifier.code 0} true;
    $M.53 := $i80;
    call {:si_unique_call 1460} {:cexpr "ref_cnt"} boogie_si_record_i32($i80);
    goto corral_source_split_7998;

  corral_source_split_7998:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb62:
    assume $i72 == 1;
    goto corral_source_split_7981;

  corral_source_split_7981:
    assume {:verifier.code 0} true;
    $p73 := $M.68;
    goto corral_source_split_7982;

  corral_source_split_7982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1455} poseidon_fe_release($p73);
    goto corral_source_split_7983;

  corral_source_split_7983:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 1456} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_7984;

  corral_source_split_7984:
    assume {:verifier.code 0} true;
    $i74 := $M.53;
    goto corral_source_split_7985;

  corral_source_split_7985:
    assume {:verifier.code 0} true;
    $i75 := $sub.i32($i74, 1);
    goto corral_source_split_7986;

  corral_source_split_7986:
    assume {:verifier.code 0} true;
    $M.53 := $i75;
    call {:si_unique_call 1457} {:cexpr "ref_cnt"} boogie_si_record_i32($i75);
    goto corral_source_split_7987;

  corral_source_split_7987:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb21:
    assume $i23 == 1;
    goto corral_source_split_7886;

  corral_source_split_7886:
    assume {:verifier.code 0} true;
    $i56 := $M.69;
    goto corral_source_split_7887;

  corral_source_split_7887:
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i56, 1);
    goto corral_source_split_7888;

  corral_source_split_7888:
    assume {:verifier.code 0} true;
    assume {:branchcond $i57} true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $i61 := $M.69;
    goto corral_source_split_7963;

  corral_source_split_7963:
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i61, 3);
    goto corral_source_split_7964;

  corral_source_split_7964:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $i66 := $M.69;
    goto corral_source_split_7972;

  corral_source_split_7972:
    assume {:verifier.code 0} true;
    $i67 := $eq.i32($i66, 2);
    goto corral_source_split_7973;

  corral_source_split_7973:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb59:
    assume $i67 == 1;
    goto corral_source_split_7975;

  corral_source_split_7975:
    assume {:verifier.code 0} true;
    $p68 := $M.68;
    goto corral_source_split_7976;

  corral_source_split_7976:
    assume {:verifier.code 0} true;
    $p69 := $M.67;
    goto corral_source_split_7977;

  corral_source_split_7977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1453} vslice_dummy_var_304 := poseidon_set_fe($p68, $p69);
    goto SeqInstr_427, SeqInstr_428;

  SeqInstr_428:
    assume assertsPassed;
    goto SeqInstr_429;

  SeqInstr_429:
    goto corral_source_split_7978;

  corral_source_split_7978:
    assume {:verifier.code 0} true;
    $M.69 := 2;
    call {:si_unique_call 1454} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_7979;

  corral_source_split_7979:
    assume {:verifier.code 0} true;
    goto $bb61;

  SeqInstr_427:
    assume !assertsPassed;
    return;

  $bb56:
    assume $i62 == 1;
    goto corral_source_split_7966;

  corral_source_split_7966:
    assume {:verifier.code 0} true;
    $p63 := $M.68;
    goto corral_source_split_7967;

  corral_source_split_7967:
    assume {:verifier.code 0} true;
    $p64 := $M.67;
    goto corral_source_split_7968;

  corral_source_split_7968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1451} vslice_dummy_var_303 := poseidon_set_fe($p63, $p64);
    goto SeqInstr_424, SeqInstr_425;

  SeqInstr_425:
    assume assertsPassed;
    goto SeqInstr_426;

  SeqInstr_426:
    goto corral_source_split_7969;

  corral_source_split_7969:
    assume {:verifier.code 0} true;
    $M.69 := 3;
    call {:si_unique_call 1452} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_7970;

  corral_source_split_7970:
    assume {:verifier.code 0} true;
    goto $bb58;

  SeqInstr_424:
    assume !assertsPassed;
    return;

  $bb53:
    assume $i57 == 1;
    goto corral_source_split_7957;

  corral_source_split_7957:
    assume {:verifier.code 0} true;
    $p58 := $M.68;
    goto corral_source_split_7958;

  corral_source_split_7958:
    assume {:verifier.code 0} true;
    $p59 := $M.67;
    goto corral_source_split_7959;

  corral_source_split_7959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1449} vslice_dummy_var_302 := poseidon_set_fe($p58, $p59);
    goto SeqInstr_421, SeqInstr_422;

  SeqInstr_422:
    assume assertsPassed;
    goto SeqInstr_423;

  SeqInstr_423:
    goto corral_source_split_7960;

  corral_source_split_7960:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 1450} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_7961;

  corral_source_split_7961:
    assume {:verifier.code 0} true;
    goto $bb55;

  SeqInstr_421:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i13, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i13, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i26 == 1);
    goto corral_source_split_7902;

  corral_source_split_7902:
    assume {:verifier.code 0} true;
    $i44 := $M.69;
    goto corral_source_split_7903;

  corral_source_split_7903:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i44, 1);
    goto corral_source_split_7904;

  corral_source_split_7904:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $i48 := $M.69;
    goto corral_source_split_7941;

  corral_source_split_7941:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i48, 3);
    goto corral_source_split_7942;

  corral_source_split_7942:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $i52 := $M.69;
    goto corral_source_split_7949;

  corral_source_split_7949:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i52, 2);
    goto corral_source_split_7950;

  corral_source_split_7950:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb50:
    assume $i53 == 1;
    goto corral_source_split_7952;

  corral_source_split_7952:
    assume {:verifier.code 0} true;
    $p54 := $M.68;
    goto corral_source_split_7953;

  corral_source_split_7953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1447} vslice_dummy_var_301 := poseidon_fe_sleep($p54);
    goto corral_source_split_7954;

  corral_source_split_7954:
    assume {:verifier.code 0} true;
    $M.69 := 2;
    call {:si_unique_call 1448} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_7955;

  corral_source_split_7955:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb47:
    assume $i49 == 1;
    goto corral_source_split_7944;

  corral_source_split_7944:
    assume {:verifier.code 0} true;
    $p50 := $M.68;
    goto corral_source_split_7945;

  corral_source_split_7945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1445} vslice_dummy_var_300 := poseidon_fe_sleep($p50);
    goto corral_source_split_7946;

  corral_source_split_7946:
    assume {:verifier.code 0} true;
    $M.69 := 3;
    call {:si_unique_call 1446} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_7947;

  corral_source_split_7947:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb44:
    assume $i45 == 1;
    goto corral_source_split_7936;

  corral_source_split_7936:
    assume {:verifier.code 0} true;
    $p46 := $M.68;
    goto corral_source_split_7937;

  corral_source_split_7937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1443} vslice_dummy_var_299 := poseidon_fe_sleep($p46);
    goto corral_source_split_7938;

  corral_source_split_7938:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 1444} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_7939;

  corral_source_split_7939:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb27:
    assume $i26 == 1;
    goto corral_source_split_7898;

  corral_source_split_7898:
    assume {:verifier.code 0} true;
    $i40 := $M.69;
    goto corral_source_split_7899;

  corral_source_split_7899:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i40, 3);
    goto corral_source_split_7900;

  corral_source_split_7900:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb41:
    assume $i41 == 1;
    goto corral_source_split_7931;

  corral_source_split_7931:
    assume {:verifier.code 0} true;
    $p42 := $M.68;
    goto corral_source_split_7932;

  corral_source_split_7932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1441} vslice_dummy_var_298 := poseidon_read_snr($p42, $p4);
    goto corral_source_split_7933;

  corral_source_split_7933:
    assume {:verifier.code 0} true;
    $M.69 := 3;
    call {:si_unique_call 1442} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_7934;

  corral_source_split_7934:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb25:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i13, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb12;

  $bb29:
    assume $i27 == 1;
    goto corral_source_split_7906;

  corral_source_split_7906:
    assume {:verifier.code 0} true;
    $i28 := $M.69;
    goto corral_source_split_7907;

  corral_source_split_7907:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 1);
    goto corral_source_split_7908;

  corral_source_split_7908:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i32 := $M.69;
    goto corral_source_split_7915;

  corral_source_split_7915:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 3);
    goto corral_source_split_7916;

  corral_source_split_7916:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i36 := $M.69;
    goto corral_source_split_7923;

  corral_source_split_7923:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 2);
    goto corral_source_split_7924;

  corral_source_split_7924:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb37:
    assume $i37 == 1;
    goto corral_source_split_7926;

  corral_source_split_7926:
    assume {:verifier.code 0} true;
    $p38 := $M.68;
    goto corral_source_split_7927;

  corral_source_split_7927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1439} vslice_dummy_var_297 := poseidon_ts_bus_ctrl($p38, $i0);
    goto SeqInstr_418, SeqInstr_419;

  SeqInstr_419:
    assume assertsPassed;
    goto SeqInstr_420;

  SeqInstr_420:
    goto corral_source_split_7928;

  corral_source_split_7928:
    assume {:verifier.code 0} true;
    $M.69 := 2;
    call {:si_unique_call 1440} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_7929;

  corral_source_split_7929:
    assume {:verifier.code 0} true;
    goto $bb39;

  SeqInstr_418:
    assume !assertsPassed;
    return;

  $bb34:
    assume $i33 == 1;
    goto corral_source_split_7918;

  corral_source_split_7918:
    assume {:verifier.code 0} true;
    $p34 := $M.68;
    goto corral_source_split_7919;

  corral_source_split_7919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1437} vslice_dummy_var_296 := poseidon_ts_bus_ctrl($p34, $i0);
    goto SeqInstr_415, SeqInstr_416;

  SeqInstr_416:
    assume assertsPassed;
    goto SeqInstr_417;

  SeqInstr_417:
    goto corral_source_split_7920;

  corral_source_split_7920:
    assume {:verifier.code 0} true;
    $M.69 := 3;
    call {:si_unique_call 1438} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_7921;

  corral_source_split_7921:
    assume {:verifier.code 0} true;
    goto $bb36;

  SeqInstr_415:
    assume !assertsPassed;
    return;

  $bb31:
    assume $i29 == 1;
    goto corral_source_split_7910;

  corral_source_split_7910:
    assume {:verifier.code 0} true;
    $p30 := $M.68;
    goto corral_source_split_7911;

  corral_source_split_7911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1435} vslice_dummy_var_295 := poseidon_ts_bus_ctrl($p30, $i0);
    goto SeqInstr_412, SeqInstr_413;

  SeqInstr_413:
    assume assertsPassed;
    goto SeqInstr_414;

  SeqInstr_414:
    goto corral_source_split_7912;

  corral_source_split_7912:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 1436} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_7913;

  corral_source_split_7913:
    assume {:verifier.code 0} true;
    goto $bb33;

  SeqInstr_412:
    assume !assertsPassed;
    return;
}



const ldv_setup_6: ref;

axiom ldv_setup_6 == $sub.ref(0, 583643);

procedure ldv_setup_6() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_setup_6() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8148;

  corral_source_split_8148:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1504} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1505} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_8149;

  corral_source_split_8149:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_initialize_v4l2_ioctl_ops_4: ref;

axiom ldv_initialize_v4l2_ioctl_ops_4 == $sub.ref(0, 584675);

procedure ldv_initialize_v4l2_ioctl_ops_4();
  free requires assertsPassed;
  modifies $M.71, $M.72, $M.73, $M.74, $M.75, $M.76, $M.0, $CurrAddr;



implementation ldv_initialize_v4l2_ioctl_ops_4()
{
  var $p0: ref;
  var $p2: ref;
  var $p4: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8151;

  corral_source_split_8151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1506} $p0 := ldv_zalloc(336);
    goto corral_source_split_8152;

  corral_source_split_8152:
    assume {:verifier.code 0} true;
    goto corral_source_split_8153;

  corral_source_split_8153:
    assume {:verifier.code 0} true;
    $M.71 := $p0;
    goto corral_source_split_8154;

  corral_source_split_8154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1507} $p2 := ldv_zalloc(52);
    goto corral_source_split_8155;

  corral_source_split_8155:
    assume {:verifier.code 0} true;
    goto corral_source_split_8156;

  corral_source_split_8156:
    assume {:verifier.code 0} true;
    $M.72 := $p2;
    goto corral_source_split_8157;

  corral_source_split_8157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1508} $p4 := ldv_zalloc(44);
    goto corral_source_split_8158;

  corral_source_split_8158:
    assume {:verifier.code 0} true;
    goto corral_source_split_8159;

  corral_source_split_8159:
    assume {:verifier.code 0} true;
    $M.73 := $p4;
    goto corral_source_split_8160;

  corral_source_split_8160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1509} $p6 := ldv_zalloc(84);
    goto corral_source_split_8161;

  corral_source_split_8161:
    assume {:verifier.code 0} true;
    goto corral_source_split_8162;

  corral_source_split_8162:
    assume {:verifier.code 0} true;
    $M.74 := $p6;
    goto corral_source_split_8163;

  corral_source_split_8163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1510} $p8 := ldv_zalloc(32);
    goto corral_source_split_8164;

  corral_source_split_8164:
    assume {:verifier.code 0} true;
    goto corral_source_split_8165;

  corral_source_split_8165:
    assume {:verifier.code 0} true;
    $M.75 := $p8;
    goto corral_source_split_8166;

  corral_source_split_8166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1511} $p10 := ldv_zalloc(8);
    goto corral_source_split_8167;

  corral_source_split_8167:
    assume {:verifier.code 0} true;
    goto corral_source_split_8168;

  corral_source_split_8168:
    assume {:verifier.code 0} true;
    $M.76 := $p10;
    goto corral_source_split_8169;

  corral_source_split_8169:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_v4l2_file_operations_5: ref;

axiom ldv_initialize_v4l2_file_operations_5 == $sub.ref(0, 585707);

procedure ldv_initialize_v4l2_file_operations_5();
  free requires assertsPassed;
  modifies $M.77, $M.0, $CurrAddr;



implementation ldv_initialize_v4l2_file_operations_5()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8171;

  corral_source_split_8171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1512} $p0 := ldv_zalloc(336);
    goto corral_source_split_8172;

  corral_source_split_8172:
    assume {:verifier.code 0} true;
    goto corral_source_split_8173;

  corral_source_split_8173:
    assume {:verifier.code 0} true;
    $M.77 := $p0;
    goto corral_source_split_8174;

  corral_source_split_8174:
    assume {:verifier.code 0} true;
    return;
}



const ldv_main_exported_4: ref;

axiom ldv_main_exported_4 == $sub.ref(0, 586739);

procedure ldv_main_exported_4();
  free requires assertsPassed;
  modifies $M.78, $M.0, $M.29, $M.3, $M.30, $CurrAddr, assertsPassed;



implementation ldv_main_exported_4()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $p54: ref;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $i60: i32;
  var $i61: i1;
  var $p62: ref;
  var $p63: ref;
  var $i65: i32;
  var $i66: i1;
  var $p67: ref;
  var $p68: ref;
  var $i70: i32;
  var $i71: i1;
  var $p72: ref;
  var $i74: i32;
  var $i75: i1;
  var $p76: ref;
  var $p77: ref;
  var $i79: i32;
  var $i80: i1;
  var $p81: ref;
  var $i83: i32;
  var $i84: i1;
  var $p85: ref;
  var $p86: ref;
  var $i88: i32;
  var $i89: i1;
  var $p90: ref;
  var $i92: i32;
  var $i93: i1;
  var $p94: ref;
  var $p95: ref;
  var $i97: i32;
  var $i98: i1;
  var $p99: ref;
  var $p100: ref;
  var $i102: i32;
  var $i103: i1;
  var $p104: ref;
  var $i106: i32;
  var $i107: i1;
  var $p108: ref;
  var $p109: ref;
  var vslice_dummy_var_324: i32;
  var vslice_dummy_var_325: i32;
  var vslice_dummy_var_326: i32;
  var vslice_dummy_var_327: i32;
  var vslice_dummy_var_328: i32;
  var vslice_dummy_var_329: i32;
  var vslice_dummy_var_330: i32;
  var vslice_dummy_var_331: i32;
  var vslice_dummy_var_332: i32;
  var vslice_dummy_var_333: i32;
  var vslice_dummy_var_334: i32;
  var vslice_dummy_var_335: i32;
  var vslice_dummy_var_336: i32;
  var vslice_dummy_var_337: i32;
  var vslice_dummy_var_338: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8176;

  corral_source_split_8176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1513} $p0 := ldv_zalloc(1);
    goto corral_source_split_8177;

  corral_source_split_8177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1514} $p1 := ldv_zalloc(1);
    goto corral_source_split_8178;

  corral_source_split_8178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1515} $p2 := ldv_zalloc(1);
    goto corral_source_split_8179;

  corral_source_split_8179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1516} $p3 := ldv_zalloc(1);
    goto corral_source_split_8180;

  corral_source_split_8180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1517} $p4 := ldv_zalloc(68);
    goto corral_source_split_8181;

  corral_source_split_8181:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_8182;

  corral_source_split_8182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1518} $p6 := ldv_zalloc(1);
    goto corral_source_split_8183;

  corral_source_split_8183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1519} $p7 := ldv_zalloc(1);
    goto corral_source_split_8184;

  corral_source_split_8184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1520} $p8 := ldv_zalloc(44);
    goto corral_source_split_8185;

  corral_source_split_8185:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_8186;

  corral_source_split_8186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1521} $p10 := ldv_zalloc(104);
    goto corral_source_split_8187;

  corral_source_split_8187:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_8188;

  corral_source_split_8188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1522} $p12 := ldv_zalloc(1);
    goto corral_source_split_8189;

  corral_source_split_8189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1523} $p13 := ldv_zalloc(4);
    goto corral_source_split_8190;

  corral_source_split_8190:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_8191;

  corral_source_split_8191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1524} $p15 := ldv_zalloc(1);
    goto corral_source_split_8192;

  corral_source_split_8192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1525} $p16 := ldv_zalloc(1);
    goto corral_source_split_8193;

  corral_source_split_8193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1526} $p17 := ldv_zalloc(1);
    goto corral_source_split_8194;

  corral_source_split_8194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1527} $p18 := ldv_zalloc(1);
    goto corral_source_split_8195;

  corral_source_split_8195:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1528} $i19 := __VERIFIER_nondet_uint();
    call {:si_unique_call 1529} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i19);
    call {:si_unique_call 1530} {:cexpr "tmp___14"} boogie_si_record_i32($i19);
    goto corral_source_split_8196;

  corral_source_split_8196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1531} $p20 := ldv_zalloc(1);
    goto corral_source_split_8197;

  corral_source_split_8197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1532} $p21 := ldv_zalloc(1);
    goto corral_source_split_8198;

  corral_source_split_8198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1533} $p22 := ldv_zalloc(1);
    goto corral_source_split_8199;

  corral_source_split_8199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1534} $p23 := ldv_zalloc(1);
    goto corral_source_split_8200;

  corral_source_split_8200:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1535} $i24 := __VERIFIER_nondet_int();
    call {:si_unique_call 1536} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i24);
    call {:si_unique_call 1537} {:cexpr "tmp___19"} boogie_si_record_i32($i24);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i24, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i24, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i27 := $slt.i32($i24, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i24, 14);
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i24, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1568} ldv_stop();
    goto corral_source_split_8347;

  corral_source_split_8347:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i29 == 1;
    goto corral_source_split_8206;

  corral_source_split_8206:
    assume {:verifier.code 0} true;
    $i106 := $M.78;
    goto corral_source_split_8207;

  corral_source_split_8207:
    assume {:verifier.code 0} true;
    $i107 := $eq.i32($i106, 1);
    goto corral_source_split_8208;

  corral_source_split_8208:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb78:
    assume $i107 == 1;
    goto corral_source_split_8341;

  corral_source_split_8341:
    assume {:verifier.code 0} true;
    $p108 := $M.71;
    goto corral_source_split_8342;

  corral_source_split_8342:
    assume {:verifier.code 0} true;
    $p109 := $M.72;
    goto corral_source_split_8343;

  corral_source_split_8343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1566} vslice_dummy_var_338 := vidioc_s_audio___0($p108, $p15, $p109);
    goto corral_source_split_8344;

  corral_source_split_8344:
    assume {:verifier.code 0} true;
    $M.78 := 1;
    call {:si_unique_call 1567} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8345;

  corral_source_split_8345:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb8:
    assume $i28 == 1;
    goto corral_source_split_8202;

  corral_source_split_8202:
    assume {:verifier.code 0} true;
    $i102 := $M.78;
    goto corral_source_split_8203;

  corral_source_split_8203:
    assume {:verifier.code 0} true;
    $i103 := $eq.i32($i102, 1);
    goto corral_source_split_8204;

  corral_source_split_8204:
    assume {:verifier.code 0} true;
    assume {:branchcond $i103} true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb75:
    assume $i103 == 1;
    goto corral_source_split_8336;

  corral_source_split_8336:
    assume {:verifier.code 0} true;
    $p104 := $M.71;
    goto corral_source_split_8337;

  corral_source_split_8337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1564} vslice_dummy_var_337 := vidioc_s_input___0($p104, $p21, $i19);
    goto corral_source_split_8338;

  corral_source_split_8338:
    assume {:verifier.code 0} true;
    $M.78 := 1;
    call {:si_unique_call 1565} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8339;

  corral_source_split_8339:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb6:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $i30 := $slt.i32($i24, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i30 == 1);
    goto corral_source_split_8214;

  corral_source_split_8214:
    assume {:verifier.code 0} true;
    $i97 := $M.78;
    goto corral_source_split_8215;

  corral_source_split_8215:
    assume {:verifier.code 0} true;
    $i98 := $eq.i32($i97, 1);
    goto corral_source_split_8216;

  corral_source_split_8216:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb72:
    assume $i98 == 1;
    goto corral_source_split_8330;

  corral_source_split_8330:
    assume {:verifier.code 0} true;
    $p99 := $M.71;
    goto corral_source_split_8331;

  corral_source_split_8331:
    assume {:verifier.code 0} true;
    $p100 := $M.75;
    goto corral_source_split_8332;

  corral_source_split_8332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1562} vslice_dummy_var_336 := tlg_fm_vidioc_s_exts_ctrl($p99, $p3, $p100);
    goto corral_source_split_8333;

  corral_source_split_8333:
    assume {:verifier.code 0} true;
    $M.78 := 1;
    call {:si_unique_call 1563} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8334;

  corral_source_split_8334:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb13:
    assume $i30 == 1;
    goto corral_source_split_8210;

  corral_source_split_8210:
    assume {:verifier.code 0} true;
    $i92 := $M.78;
    goto corral_source_split_8211;

  corral_source_split_8211:
    assume {:verifier.code 0} true;
    $i93 := $eq.i32($i92, 1);
    goto corral_source_split_8212;

  corral_source_split_8212:
    assume {:verifier.code 0} true;
    assume {:branchcond $i93} true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb69:
    assume $i93 == 1;
    goto corral_source_split_8324;

  corral_source_split_8324:
    assume {:verifier.code 0} true;
    $p94 := $M.71;
    goto corral_source_split_8325;

  corral_source_split_8325:
    assume {:verifier.code 0} true;
    $p95 := $M.73;
    goto corral_source_split_8326;

  corral_source_split_8326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1560} vslice_dummy_var_335 := fm_set_freq($p94, $p17, $p95);
    goto SeqInstr_460, SeqInstr_461;

  SeqInstr_461:
    assume assertsPassed;
    goto SeqInstr_462;

  SeqInstr_462:
    goto corral_source_split_8327;

  corral_source_split_8327:
    assume {:verifier.code 0} true;
    $M.78 := 1;
    call {:si_unique_call 1561} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8328;

  corral_source_split_8328:
    assume {:verifier.code 0} true;
    goto $bb71;

  SeqInstr_460:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i24, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    $i32 := $slt.i32($i24, 10);
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i32 == 1);
    goto corral_source_split_8222;

  corral_source_split_8222:
    assume {:verifier.code 0} true;
    $i88 := $M.78;
    goto corral_source_split_8223;

  corral_source_split_8223:
    assume {:verifier.code 0} true;
    $i89 := $eq.i32($i88, 1);
    goto corral_source_split_8224;

  corral_source_split_8224:
    assume {:verifier.code 0} true;
    assume {:branchcond $i89} true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb66:
    assume $i89 == 1;
    goto corral_source_split_8319;

  corral_source_split_8319:
    assume {:verifier.code 0} true;
    $p90 := $M.71;
    goto corral_source_split_8320;

  corral_source_split_8320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1558} vslice_dummy_var_334 := vidioc_querycap___0($p90, $p12, $p11);
    goto corral_source_split_8321;

  corral_source_split_8321:
    assume {:verifier.code 0} true;
    $M.78 := 1;
    call {:si_unique_call 1559} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8322;

  corral_source_split_8322:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb17:
    assume $i32 == 1;
    goto corral_source_split_8218;

  corral_source_split_8218:
    assume {:verifier.code 0} true;
    $i83 := $M.78;
    goto corral_source_split_8219;

  corral_source_split_8219:
    assume {:verifier.code 0} true;
    $i84 := $eq.i32($i83, 1);
    goto corral_source_split_8220;

  corral_source_split_8220:
    assume {:verifier.code 0} true;
    assume {:branchcond $i84} true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb63:
    assume $i84 == 1;
    goto corral_source_split_8313;

  corral_source_split_8313:
    assume {:verifier.code 0} true;
    $p85 := $M.71;
    goto corral_source_split_8314;

  corral_source_split_8314:
    assume {:verifier.code 0} true;
    $p86 := $M.72;
    goto corral_source_split_8315;

  corral_source_split_8315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1556} vslice_dummy_var_333 := vidioc_g_audio___0($p85, $p16, $p86);
    goto corral_source_split_8316;

  corral_source_split_8316:
    assume {:verifier.code 0} true;
    $M.78 := 1;
    call {:si_unique_call 1557} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8317;

  corral_source_split_8317:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb15:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    $i33 := $slt.i32($i24, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i33 == 1);
    goto corral_source_split_8230;

  corral_source_split_8230:
    assume {:verifier.code 0} true;
    $i79 := $M.78;
    goto corral_source_split_8231;

  corral_source_split_8231:
    assume {:verifier.code 0} true;
    $i80 := $eq.i32($i79, 1);
    goto corral_source_split_8232;

  corral_source_split_8232:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb60:
    assume $i80 == 1;
    goto corral_source_split_8308;

  corral_source_split_8308:
    assume {:verifier.code 0} true;
    $p81 := $M.71;
    goto corral_source_split_8309;

  corral_source_split_8309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1554} vslice_dummy_var_332 := vidioc_g_input___0($p81, $p22, $p14);
    goto corral_source_split_8310;

  corral_source_split_8310:
    assume {:verifier.code 0} true;
    $M.78 := 1;
    call {:si_unique_call 1555} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8311;

  corral_source_split_8311:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb19:
    assume $i33 == 1;
    goto corral_source_split_8226;

  corral_source_split_8226:
    assume {:verifier.code 0} true;
    $i74 := $M.78;
    goto corral_source_split_8227;

  corral_source_split_8227:
    assume {:verifier.code 0} true;
    $i75 := $eq.i32($i74, 1);
    goto corral_source_split_8228;

  corral_source_split_8228:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb57:
    assume $i75 == 1;
    goto corral_source_split_8302;

  corral_source_split_8302:
    assume {:verifier.code 0} true;
    $p76 := $M.71;
    goto corral_source_split_8303;

  corral_source_split_8303:
    assume {:verifier.code 0} true;
    $p77 := $M.73;
    goto corral_source_split_8304;

  corral_source_split_8304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1552} vslice_dummy_var_331 := fm_get_freq($p76, $p6, $p77);
    goto corral_source_split_8305;

  corral_source_split_8305:
    assume {:verifier.code 0} true;
    $M.78 := 1;
    call {:si_unique_call 1553} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8306;

  corral_source_split_8306:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb2:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $i34 := $slt.i32($i24, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i35 := $slt.i32($i24, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    $i36 := $slt.i32($i24, 6);
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i36 == 1);
    goto corral_source_split_8238;

  corral_source_split_8238:
    assume {:verifier.code 0} true;
    $i70 := $M.78;
    goto corral_source_split_8239;

  corral_source_split_8239:
    assume {:verifier.code 0} true;
    $i71 := $eq.i32($i70, 1);
    goto corral_source_split_8240;

  corral_source_split_8240:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb54:
    assume $i71 == 1;
    goto corral_source_split_8297;

  corral_source_split_8297:
    assume {:verifier.code 0} true;
    $p72 := $M.71;
    goto corral_source_split_8298;

  corral_source_split_8298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1550} vslice_dummy_var_330 := tlg_fm_vidioc_queryctrl($p72, $p7, $p5);
    goto corral_source_split_8299;

  corral_source_split_8299:
    assume {:verifier.code 0} true;
    $M.78 := 1;
    call {:si_unique_call 1551} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8300;

  corral_source_split_8300:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb25:
    assume $i36 == 1;
    goto corral_source_split_8234;

  corral_source_split_8234:
    assume {:verifier.code 0} true;
    $i65 := $M.78;
    goto corral_source_split_8235;

  corral_source_split_8235:
    assume {:verifier.code 0} true;
    $i66 := $eq.i32($i65, 1);
    goto corral_source_split_8236;

  corral_source_split_8236:
    assume {:verifier.code 0} true;
    assume {:branchcond $i66} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb51:
    assume $i66 == 1;
    goto corral_source_split_8291;

  corral_source_split_8291:
    assume {:verifier.code 0} true;
    $p67 := $M.71;
    goto corral_source_split_8292;

  corral_source_split_8292:
    assume {:verifier.code 0} true;
    $p68 := $M.74;
    goto corral_source_split_8293;

  corral_source_split_8293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1548} vslice_dummy_var_329 := vidioc_s_tuner___0($p67, $p20, $p68);
    goto corral_source_split_8294;

  corral_source_split_8294:
    assume {:verifier.code 0} true;
    $M.78 := 1;
    call {:si_unique_call 1549} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8295;

  corral_source_split_8295:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb23:
    assume $i35 == 1;
    assume {:verifier.code 0} true;
    $i37 := $slt.i32($i24, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i37 == 1);
    goto corral_source_split_8246;

  corral_source_split_8246:
    assume {:verifier.code 0} true;
    $i60 := $M.78;
    goto corral_source_split_8247;

  corral_source_split_8247:
    assume {:verifier.code 0} true;
    $i61 := $eq.i32($i60, 1);
    goto corral_source_split_8248;

  corral_source_split_8248:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb48:
    assume $i61 == 1;
    goto corral_source_split_8285;

  corral_source_split_8285:
    assume {:verifier.code 0} true;
    $p62 := $M.71;
    goto corral_source_split_8286;

  corral_source_split_8286:
    assume {:verifier.code 0} true;
    $p63 := $M.76;
    goto corral_source_split_8287;

  corral_source_split_8287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1546} vslice_dummy_var_328 := tlg_fm_vidioc_g_ctrl($p62, $p18, $p63);
    goto corral_source_split_8288;

  corral_source_split_8288:
    assume {:verifier.code 0} true;
    $M.78 := 1;
    call {:si_unique_call 1547} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8289;

  corral_source_split_8289:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb27:
    assume $i37 == 1;
    goto corral_source_split_8242;

  corral_source_split_8242:
    assume {:verifier.code 0} true;
    $i56 := $M.78;
    goto corral_source_split_8243;

  corral_source_split_8243:
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i56, 1);
    goto corral_source_split_8244;

  corral_source_split_8244:
    assume {:verifier.code 0} true;
    assume {:branchcond $i57} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb45:
    assume $i57 == 1;
    goto corral_source_split_8280;

  corral_source_split_8280:
    assume {:verifier.code 0} true;
    $p58 := $M.71;
    goto corral_source_split_8281;

  corral_source_split_8281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1544} vslice_dummy_var_327 := tlg_fm_vidioc_querymenu($p58, $p1, $p9);
    goto corral_source_split_8282;

  corral_source_split_8282:
    assume {:verifier.code 0} true;
    $M.78 := 1;
    call {:si_unique_call 1545} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8283;

  corral_source_split_8283:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb21:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    $i38 := $slt.i32($i24, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    $i39 := $slt.i32($i24, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i39 == 1);
    goto corral_source_split_8254;

  corral_source_split_8254:
    assume {:verifier.code 0} true;
    $i51 := $M.78;
    goto corral_source_split_8255;

  corral_source_split_8255:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i51, 1);
    goto corral_source_split_8256;

  corral_source_split_8256:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb42:
    assume $i52 == 1;
    goto corral_source_split_8274;

  corral_source_split_8274:
    assume {:verifier.code 0} true;
    $p53 := $M.71;
    goto corral_source_split_8275;

  corral_source_split_8275:
    assume {:verifier.code 0} true;
    $p54 := $M.75;
    goto corral_source_split_8276;

  corral_source_split_8276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1542} vslice_dummy_var_326 := tlg_fm_vidioc_g_exts_ctrl($p53, $p0, $p54);
    goto corral_source_split_8277;

  corral_source_split_8277:
    assume {:verifier.code 0} true;
    $M.78 := 1;
    call {:si_unique_call 1543} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8278;

  corral_source_split_8278:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb31:
    assume $i39 == 1;
    goto corral_source_split_8250;

  corral_source_split_8250:
    assume {:verifier.code 0} true;
    $i46 := $M.78;
    goto corral_source_split_8251;

  corral_source_split_8251:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i46, 1);
    goto corral_source_split_8252;

  corral_source_split_8252:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb39:
    assume $i47 == 1;
    goto corral_source_split_8268;

  corral_source_split_8268:
    assume {:verifier.code 0} true;
    $p48 := $M.71;
    goto corral_source_split_8269;

  corral_source_split_8269:
    assume {:verifier.code 0} true;
    $p49 := $M.74;
    goto corral_source_split_8270;

  corral_source_split_8270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1540} vslice_dummy_var_325 := tlg_fm_vidioc_g_tuner($p48, $p2, $p49);
    goto SeqInstr_457, SeqInstr_458;

  SeqInstr_458:
    assume assertsPassed;
    goto SeqInstr_459;

  SeqInstr_459:
    goto corral_source_split_8271;

  corral_source_split_8271:
    assume {:verifier.code 0} true;
    $M.78 := 1;
    call {:si_unique_call 1541} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8272;

  corral_source_split_8272:
    assume {:verifier.code 0} true;
    goto $bb41;

  SeqInstr_457:
    assume !assertsPassed;
    return;

  $bb29:
    assume $i38 == 1;
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i24, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb12;

  $bb33:
    assume $i40 == 1;
    goto corral_source_split_8258;

  corral_source_split_8258:
    assume {:verifier.code 0} true;
    $i41 := $M.78;
    goto corral_source_split_8259;

  corral_source_split_8259:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, 1);
    goto corral_source_split_8260;

  corral_source_split_8260:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb35:
    assume $i42 == 1;
    goto corral_source_split_8262;

  corral_source_split_8262:
    assume {:verifier.code 0} true;
    $p43 := $M.71;
    goto corral_source_split_8263;

  corral_source_split_8263:
    assume {:verifier.code 0} true;
    $p44 := $M.76;
    goto corral_source_split_8264;

  corral_source_split_8264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1538} vslice_dummy_var_324 := tlg_fm_vidioc_s_ctrl($p43, $p23, $p44);
    goto corral_source_split_8265;

  corral_source_split_8265:
    assume {:verifier.code 0} true;
    $M.78 := 1;
    call {:si_unique_call 1539} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8266;

  corral_source_split_8266:
    assume {:verifier.code 0} true;
    goto $bb37;
}



const ldv_main_exported_3: ref;

axiom ldv_main_exported_3 == $sub.ref(0, 587771);

procedure ldv_main_exported_3();
  free requires assertsPassed;
  modifies $M.79, $M.53, $M.0, $CurrAddr;



implementation ldv_main_exported_3()
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i13: i32;
  var $i14: i32;
  var vslice_dummy_var_339: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8349;

  corral_source_split_8349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1569} $p0 := ldv_zalloc(1328);
    goto corral_source_split_8350;

  corral_source_split_8350:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_8351;

  corral_source_split_8351:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1570} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1571} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 1572} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i2, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i2, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1579} ldv_stop();
    goto corral_source_split_8375;

  corral_source_split_8375:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_8353;

  corral_source_split_8353:
    assume {:verifier.code 0} true;
    $i10 := $M.79;
    goto corral_source_split_8354;

  corral_source_split_8354:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 1);
    goto corral_source_split_8355;

  corral_source_split_8355:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb13:
    assume $i11 == 1;
    goto corral_source_split_8368;

  corral_source_split_8368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1576} vslice_dummy_var_339 := ldv_probe_3();
    goto corral_source_split_8369;

  corral_source_split_8369:
    assume {:verifier.code 0} true;
    $M.79 := 2;
    call {:si_unique_call 1577} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_8370;

  corral_source_split_8370:
    assume {:verifier.code 0} true;
    $i13 := $M.53;
    goto corral_source_split_8371;

  corral_source_split_8371:
    assume {:verifier.code 0} true;
    $i14 := $add.i32($i13, 1);
    goto corral_source_split_8372;

  corral_source_split_8372:
    assume {:verifier.code 0} true;
    $M.53 := $i14;
    call {:si_unique_call 1578} {:cexpr "ref_cnt"} boogie_si_record_i32($i14);
    goto corral_source_split_8373;

  corral_source_split_8373:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb2:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i2, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb6;

  $bb7:
    assume $i5 == 1;
    goto corral_source_split_8357;

  corral_source_split_8357:
    assume {:verifier.code 0} true;
    $i6 := $M.79;
    goto corral_source_split_8358;

  corral_source_split_8358:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 2);
    goto corral_source_split_8359;

  corral_source_split_8359:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i7 == 1;
    goto corral_source_split_8361;

  corral_source_split_8361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1573} video_device_release($p1);
    goto corral_source_split_8362;

  corral_source_split_8362:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 1574} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_8363;

  corral_source_split_8363:
    assume {:verifier.code 0} true;
    $i8 := $M.53;
    goto corral_source_split_8364;

  corral_source_split_8364:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32($i8, 1);
    goto corral_source_split_8365;

  corral_source_split_8365:
    assume {:verifier.code 0} true;
    $M.53 := $i9;
    call {:si_unique_call 1575} {:cexpr "ref_cnt"} boogie_si_record_i32($i9);
    goto corral_source_split_8366;

  corral_source_split_8366:
    assume {:verifier.code 0} true;
    goto $bb11;
}



const ldv_probe_3: ref;

axiom ldv_probe_3 == $sub.ref(0, 588803);

procedure ldv_probe_3() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_probe_3() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8377;

  corral_source_split_8377:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1580} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1581} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_8378;

  corral_source_split_8378:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_main_exported_5: ref;

axiom ldv_main_exported_5 == $sub.ref(0, 589835);

procedure ldv_main_exported_5();
  free requires assertsPassed;
  modifies $M.0, $M.81, $M.80, $M.53, $M.3, $M.27, assertsPassed, $CurrAddr;



implementation ldv_main_exported_5()
{
  var $i0: i32;
  var $i1: i64;
  var $i2: i32;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var vslice_dummy_var_340: i32;
  var vslice_dummy_var_341: i64;
  var vslice_dummy_var_342: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8380;

  corral_source_split_8380:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1582} $i0 := __VERIFIER_nondet_uint();
    call {:si_unique_call 1583} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i0);
    call {:si_unique_call 1584} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_8381;

  corral_source_split_8381:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1585} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1586} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    call {:si_unique_call 1587} {:cexpr "tmp___0"} boogie_si_record_i64($i1);
    goto corral_source_split_8382;

  corral_source_split_8382:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1588} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1589} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 1590} {:cexpr "tmp___1"} boogie_si_record_i32($i2);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i2, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i2, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i2, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1602} ldv_stop();
    goto corral_source_split_8430;

  corral_source_split_8430:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i5 == 1;
    goto corral_source_split_8388;

  corral_source_split_8388:
    assume {:verifier.code 0} true;
    $i21 := $M.80;
    goto corral_source_split_8389;

  corral_source_split_8389:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 1);
    goto corral_source_split_8390;

  corral_source_split_8390:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i25 := $M.80;
    goto corral_source_split_8422;

  corral_source_split_8422:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 2);
    goto corral_source_split_8423;

  corral_source_split_8423:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb24:
    assume $i26 == 1;
    goto corral_source_split_8425;

  corral_source_split_8425:
    assume {:verifier.code 0} true;
    $p27 := $M.77;
    goto corral_source_split_8426;

  corral_source_split_8426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1600} vslice_dummy_var_342 := video_ioctl2($p27, $i0, $i1);
    goto corral_source_split_8427;

  corral_source_split_8427:
    assume {:verifier.code 0} true;
    $M.80 := 2;
    call {:si_unique_call 1601} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_8428;

  corral_source_split_8428:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb21:
    assume $i22 == 1;
    goto corral_source_split_8417;

  corral_source_split_8417:
    assume {:verifier.code 0} true;
    $p23 := $M.77;
    goto corral_source_split_8418;

  corral_source_split_8418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1598} vslice_dummy_var_341 := video_ioctl2($p23, $i0, $i1);
    goto corral_source_split_8419;

  corral_source_split_8419:
    assume {:verifier.code 0} true;
    $M.80 := 1;
    call {:si_unique_call 1599} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8420;

  corral_source_split_8420:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_8384;

  corral_source_split_8384:
    assume {:verifier.code 0} true;
    $i15 := $M.80;
    goto corral_source_split_8385;

  corral_source_split_8385:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 2);
    goto corral_source_split_8386;

  corral_source_split_8386:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb18:
    assume $i16 == 1;
    goto corral_source_split_8409;

  corral_source_split_8409:
    assume {:verifier.code 0} true;
    $p17 := $M.77;
    goto corral_source_split_8410;

  corral_source_split_8410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1595} vslice_dummy_var_340 := poseidon_fm_close($p17);
    goto SeqInstr_466, SeqInstr_467;

  SeqInstr_467:
    assume assertsPassed;
    goto SeqInstr_468;

  SeqInstr_468:
    goto corral_source_split_8411;

  corral_source_split_8411:
    assume {:verifier.code 0} true;
    $M.80 := 1;
    call {:si_unique_call 1596} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8412;

  corral_source_split_8412:
    assume {:verifier.code 0} true;
    $i19 := $M.53;
    goto corral_source_split_8413;

  corral_source_split_8413:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32($i19, 1);
    goto corral_source_split_8414;

  corral_source_split_8414:
    assume {:verifier.code 0} true;
    $M.53 := $i20;
    call {:si_unique_call 1597} {:cexpr "ref_cnt"} boogie_si_record_i32($i20);
    goto corral_source_split_8415;

  corral_source_split_8415:
    assume {:verifier.code 0} true;
    goto $bb20;

  SeqInstr_466:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i2, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb8;

  $bb9:
    assume $i6 == 1;
    goto corral_source_split_8392;

  corral_source_split_8392:
    assume {:verifier.code 0} true;
    $i7 := $M.80;
    goto corral_source_split_8393;

  corral_source_split_8393:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 1);
    goto corral_source_split_8394;

  corral_source_split_8394:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb11:
    assume $i8 == 1;
    goto corral_source_split_8396;

  corral_source_split_8396:
    assume {:verifier.code 0} true;
    $p9 := $M.77;
    goto corral_source_split_8397;

  corral_source_split_8397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1591} $i10 := poseidon_fm_open($p9);
    goto SeqInstr_463, SeqInstr_464;

  SeqInstr_464:
    assume assertsPassed;
    goto SeqInstr_465;

  SeqInstr_465:
    goto corral_source_split_8398;

  corral_source_split_8398:
    assume {:verifier.code 0} true;
    $M.81 := $i10;
    call {:si_unique_call 1592} {:cexpr "ldv_retval_10"} boogie_si_record_i32($i10);
    goto corral_source_split_8399;

  corral_source_split_8399:
    assume {:verifier.code 0} true;
    $i11 := $M.81;
    goto corral_source_split_8400;

  corral_source_split_8400:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_8401;

  corral_source_split_8401:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i12 == 1;
    goto corral_source_split_8403;

  corral_source_split_8403:
    assume {:verifier.code 0} true;
    $M.80 := 2;
    call {:si_unique_call 1593} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_8404;

  corral_source_split_8404:
    assume {:verifier.code 0} true;
    $i13 := $M.53;
    goto corral_source_split_8405;

  corral_source_split_8405:
    assume {:verifier.code 0} true;
    $i14 := $add.i32($i13, 1);
    goto corral_source_split_8406;

  corral_source_split_8406:
    assume {:verifier.code 0} true;
    $M.53 := $i14;
    call {:si_unique_call 1594} {:cexpr "ref_cnt"} boogie_si_record_i32($i14);
    goto corral_source_split_8407;

  corral_source_split_8407:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_463:
    assume !assertsPassed;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 590867);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.82, $M.69, $M.55, $M.79, $M.64, $M.61, $M.83, $M.52, $M.84, $M.78, $M.53, $M.85, $M.57, $M.80, $M.0, $M.70, $M.54, $M.56, $M.65, $M.66, $M.59, $M.60, $M.11, $M.12, $M.13, $M.32, $M.86, $M.87, $M.88, $M.90, $M.29, $M.91, $M.77, $M.44, $M.71, $M.72, $M.73, $M.74, $M.75, $M.76, $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.63, $M.42, $M.43, $M.67, $M.68, $M.58, $M.81, $M.89, $M.2, $M.62, $M.108, $M.109, $M.38, $M.28, $M.23, $M.24, $M.113, $M.9, $M.10, $M.8, $M.7, $M.127, $M.128, $M.21, $M.22, $M.14, $M.15, $M.133, $M.6, $M.1, $M.94, $M.93, $M.92, $M.31, $M.3, $M.134, $M.135, $M.136, $M.137, $M.36, $CurrAddr, $M.25, $M.27, $M.33, $M.30, $M.4, assertsPassed, $M.37, $M.41;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $i1: i64;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $i37: i1;
  var $i39: i32;
  var $i40: i1;
  var $i41: i32;
  var $i42: i1;
  var $i43: i32;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;
  var $i50: i32;
  var $i51: i1;
  var $p52: ref;
  var $i53: i32;
  var $i54: i32;
  var $i55: i1;
  var $i56: i32;
  var $i57: i32;
  var $i58: i32;
  var $i59: i1;
  var $p60: ref;
  var $p61: ref;
  var $i62: i32;
  var $i63: i32;
  var $i64: i32;
  var $i65: i1;
  var $i66: i32;
  var $i67: i1;
  var $p68: ref;
  var $i69: i32;
  var $i70: i32;
  var $i71: i1;
  var $i72: i32;
  var $i73: i1;
  var $i74: i32;
  var $i75: i1;
  var $p76: ref;
  var $i77: i32;
  var $i78: i32;
  var $i79: i32;
  var $i80: i1;
  var $i81: i32;
  var $i82: i1;
  var $p83: ref;
  var $i84: i32;
  var $i85: i32;
  var $i86: i32;
  var $i87: i1;
  var $i88: i32;
  var $i89: i32;
  var $i90: i1;
  var $i91: i32;
  var $i92: i1;
  var $i93: i32;
  var $i94: i1;
  var $i95: i32;
  var $i96: i1;
  var $i97: i1;
  var $i98: i1;
  var $i99: i32;
  var $i100: i1;
  var $i101: i32;
  var $i102: i1;
  var $i103: i32;
  var $i104: i1;
  var $i105: i32;
  var $i106: i32;
  var $i107: i1;
  var $i108: i32;
  var $i109: i1;
  var $i110: i32;
  var $i111: i1;
  var $i112: i32;
  var $i113: i1;
  var cmdloc_dummy_var_71: [ref]i8;
  var cmdloc_dummy_var_72: [ref]i8;
  var vslice_dummy_var_343: i32;

  $bb0:
    call {:si_unique_call 1603} $initialize();
    goto corral_source_split_8432;

  corral_source_split_8432:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1604} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    assume {:verifier.code 0} true;
    call {:si_unique_call 1605} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_8433;

  corral_source_split_8433:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1606} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1607} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    call {:si_unique_call 1608} {:cexpr "tmp"} boogie_si_record_i64($i1);
    goto corral_source_split_8434;

  corral_source_split_8434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1609} $p2 := ldv_zalloc(1);
    goto corral_source_split_8435;

  corral_source_split_8435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1610} $p3 := ldv_zalloc(24);
    goto corral_source_split_8436;

  corral_source_split_8436:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_8437;

  corral_source_split_8437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1611} $p5 := ldv_zalloc(24);
    goto corral_source_split_8438;

  corral_source_split_8438:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_8439;

  corral_source_split_8439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1612} ldv_initialize();
    goto corral_source_split_8440;

  corral_source_split_8440:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p0);
    goto corral_source_split_8441;

  corral_source_split_8441:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_71 := $M.82;
    call {:si_unique_call 1613} cmdloc_dummy_var_72 := $memset.i8(cmdloc_dummy_var_71, $p7, 0, 4, $zext.i32.i64(4), 0 == 1);
    $M.82 := cmdloc_dummy_var_72;
    goto corral_source_split_8442;

  corral_source_split_8442:
    assume {:verifier.code 0} true;
    $M.69 := 0;
    call {:si_unique_call 1614} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    goto corral_source_split_8443;

  corral_source_split_8443:
    assume {:verifier.code 0} true;
    $M.55 := 0;
    call {:si_unique_call 1615} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(0);
    goto corral_source_split_8444;

  corral_source_split_8444:
    assume {:verifier.code 0} true;
    $M.79 := 0;
    call {:si_unique_call 1616} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_8445;

  corral_source_split_8445:
    assume {:verifier.code 0} true;
    $M.64 := 0;
    call {:si_unique_call 1617} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    goto corral_source_split_8446;

  corral_source_split_8446:
    assume {:verifier.code 0} true;
    $M.61 := 0;
    call {:si_unique_call 1618} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(0);
    goto corral_source_split_8447;

  corral_source_split_8447:
    assume {:verifier.code 0} true;
    $M.83 := 0;
    call {:si_unique_call 1619} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    goto corral_source_split_8448;

  corral_source_split_8448:
    assume {:verifier.code 0} true;
    $M.52 := 0;
    call {:si_unique_call 1620} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(0);
    goto corral_source_split_8449;

  corral_source_split_8449:
    assume {:verifier.code 0} true;
    $M.84 := 0;
    call {:si_unique_call 1621} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    goto corral_source_split_8450;

  corral_source_split_8450:
    assume {:verifier.code 0} true;
    $M.78 := 0;
    call {:si_unique_call 1622} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_8451;

  corral_source_split_8451:
    assume {:verifier.code 0} true;
    $M.53 := 0;
    call {:si_unique_call 1623} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_8452;

  corral_source_split_8452:
    assume {:verifier.code 0} true;
    $M.85 := 1;
    call {:si_unique_call 1624} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_8453;

  corral_source_split_8453:
    assume {:verifier.code 0} true;
    $M.57 := 0;
    call {:si_unique_call 1625} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(0);
    goto corral_source_split_8454;

  corral_source_split_8454:
    assume {:verifier.code 0} true;
    $M.80 := 0;
    call {:si_unique_call 1626} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    goto corral_source_split_8455;

  corral_source_split_8455:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $p52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $p60, $p61, $i62, $i63, $i64, $i65, $i66, $i67, $p68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $p76, $i77, $i78, $i79, $i80, $i81, $i82, $p83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, vslice_dummy_var_343 := main_loop_$bb1($p0, $i1, $p2, $p4, $p6, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $p52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $p60, $p61, $i62, $i63, $i64, $i65, $i66, $i67, $p68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $p76, $i77, $i78, $i79, $i80, $i81, $i82, $p83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, vslice_dummy_var_343);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i8, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i8, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i8, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i8, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i8, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1696} ldv_stop();
    goto corral_source_split_8693;

  corral_source_split_8693:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb33_dummy;

  $bb11:
    assume $i13 == 1;
    goto corral_source_split_8465;

  corral_source_split_8465:
    assume {:verifier.code 0} true;
    $i112 := $M.80;
    goto corral_source_split_8466;

  corral_source_split_8466:
    assume {:verifier.code 0} true;
    $i113 := $ne.i32($i112, 0);
    goto corral_source_split_8467;

  corral_source_split_8467:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb153, $bb154;

  $bb154:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb153:
    assume $i113 == 1;
    goto corral_source_split_8690;

  corral_source_split_8690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1695} ldv_main_exported_5();
    goto SeqInstr_499, SeqInstr_500;

  SeqInstr_500:
    assume assertsPassed;
    goto SeqInstr_501;

  SeqInstr_501:
    goto corral_source_split_8691;

  corral_source_split_8691:
    assume {:verifier.code 0} true;
    goto $bb155;

  SeqInstr_499:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i12 == 1;
    goto corral_source_split_8461;

  corral_source_split_8461:
    assume {:verifier.code 0} true;
    $i110 := $M.57;
    goto corral_source_split_8462;

  corral_source_split_8462:
    assume {:verifier.code 0} true;
    $i111 := $ne.i32($i110, 0);
    goto corral_source_split_8463;

  corral_source_split_8463:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb150, $bb151;

  $bb151:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb150:
    assume $i111 == 1;
    goto corral_source_split_8687;

  corral_source_split_8687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1694} ldv_main_exported_10();
    goto SeqInstr_496, SeqInstr_497;

  SeqInstr_497:
    assume assertsPassed;
    goto SeqInstr_498;

  SeqInstr_498:
    goto corral_source_split_8688;

  corral_source_split_8688:
    assume {:verifier.code 0} true;
    goto $bb152;

  SeqInstr_496:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i11 == 1;
    goto corral_source_split_8457;

  corral_source_split_8457:
    assume {:verifier.code 0} true;
    $i93 := $M.85;
    goto corral_source_split_8458;

  corral_source_split_8458:
    assume {:verifier.code 0} true;
    $i94 := $ne.i32($i93, 0);
    goto corral_source_split_8459;

  corral_source_split_8459:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb120, $bb121;

  $bb121:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb120:
    assume $i94 == 1;
    goto corral_source_split_8633;

  corral_source_split_8633:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1666} $i95 := __VERIFIER_nondet_int();
    call {:si_unique_call 1667} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i95);
    call {:si_unique_call 1668} {:cexpr "tmp___6"} boogie_si_record_i32($i95);
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    $i96 := $slt.i32($i95, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb123, $bb124;

  $bb124:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    $i97 := $eq.i32($i95, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb125, $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    assume !($i97 == 1);
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1693} ldv_stop();
    goto corral_source_split_8685;

  corral_source_split_8685:
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb125:
    assume $i97 == 1;
    goto corral_source_split_8635;

  corral_source_split_8635:
    assume {:verifier.code 0} true;
    $i103 := $M.85;
    goto corral_source_split_8636;

  corral_source_split_8636:
    assume {:verifier.code 0} true;
    $i104 := $eq.i32($i103, 1);
    goto corral_source_split_8637;

  corral_source_split_8637:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb138, $bb139;

  $bb139:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb138:
    assume $i104 == 1;
    goto corral_source_split_8653;

  corral_source_split_8653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1672} $i105 := poseidon_init();
    goto corral_source_split_8654;

  corral_source_split_8654:
    assume {:verifier.code 0} true;
    $M.91 := $i105;
    call {:si_unique_call 1673} {:cexpr "ldv_retval_8"} boogie_si_record_i32($i105);
    goto corral_source_split_8655;

  corral_source_split_8655:
    assume {:verifier.code 0} true;
    $i106 := $M.91;
    goto corral_source_split_8656;

  corral_source_split_8656:
    assume {:verifier.code 0} true;
    $i107 := $ne.i32($i106, 0);
    goto corral_source_split_8657;

  corral_source_split_8657:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb140, $bb141;

  $bb141:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    $i108 := $M.91;
    goto corral_source_split_8662;

  corral_source_split_8662:
    assume {:verifier.code 0} true;
    $i109 := $eq.i32($i108, 0);
    goto corral_source_split_8663;

  corral_source_split_8663:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb143, $bb144;

  $bb144:
    assume !($i109 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb143:
    assume $i109 == 1;
    goto corral_source_split_8665;

  corral_source_split_8665:
    assume {:verifier.code 0} true;
    $M.85 := 2;
    call {:si_unique_call 1675} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_8666;

  corral_source_split_8666:
    assume {:verifier.code 0} true;
    $M.80 := 1;
    call {:si_unique_call 1676} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8667;

  corral_source_split_8667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1677} ldv_initialize_v4l2_file_operations_5();
    goto corral_source_split_8668;

  corral_source_split_8668:
    assume {:verifier.code 0} true;
    $M.57 := 1;
    call {:si_unique_call 1678} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_8669;

  corral_source_split_8669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1679} ldv_initialize_v4l2_file_operations_10();
    goto corral_source_split_8670;

  corral_source_split_8670:
    assume {:verifier.code 0} true;
    $M.78 := 1;
    call {:si_unique_call 1680} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8671;

  corral_source_split_8671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1681} ldv_initialize_v4l2_ioctl_ops_4();
    goto corral_source_split_8672;

  corral_source_split_8672:
    assume {:verifier.code 0} true;
    $M.52 := 1;
    call {:si_unique_call 1682} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_8673;

  corral_source_split_8673:
    assume {:verifier.code 0} true;
    $M.83 := 1;
    call {:si_unique_call 1683} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_8674;

  corral_source_split_8674:
    assume {:verifier.code 0} true;
    $M.61 := 1;
    call {:si_unique_call 1684} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_8675;

  corral_source_split_8675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1685} ldv_initialize_v4l2_ioctl_ops_9();
    goto corral_source_split_8676;

  corral_source_split_8676:
    assume {:verifier.code 0} true;
    $M.64 := 1;
    call {:si_unique_call 1686} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_8677;

  corral_source_split_8677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1687} ldv_initialize_snd_pcm_ops_7();
    goto corral_source_split_8678;

  corral_source_split_8678:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 1688} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_8679;

  corral_source_split_8679:
    assume {:verifier.code 0} true;
    $M.55 := 1;
    call {:si_unique_call 1689} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_8680;

  corral_source_split_8680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1690} ldv_videobuf_queue_ops_11();
    goto corral_source_split_8681;

  corral_source_split_8681:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 1691} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_8682;

  corral_source_split_8682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1692} ldv_initialize_dvb_frontend_ops_6();
    goto corral_source_split_8683;

  corral_source_split_8683:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb140:
    assume $i107 == 1;
    goto corral_source_split_8659;

  corral_source_split_8659:
    assume {:verifier.code 0} true;
    $M.85 := 3;
    call {:si_unique_call 1674} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_8660;

  corral_source_split_8660:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1671} ldv_check_final_state();
    goto SeqInstr_493, SeqInstr_494;

  SeqInstr_494:
    assume assertsPassed;
    goto SeqInstr_495;

  SeqInstr_495:
    goto corral_source_split_8651;

  corral_source_split_8651:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_493:
    assume !assertsPassed;
    return;

  $bb123:
    assume $i96 == 1;
    assume {:verifier.code 0} true;
    $i98 := $eq.i32($i95, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb128, $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    assume !($i98 == 1);
    goto $bb127;

  $bb128:
    assume $i98 == 1;
    goto corral_source_split_8639;

  corral_source_split_8639:
    assume {:verifier.code 0} true;
    $i99 := $M.85;
    goto corral_source_split_8640;

  corral_source_split_8640:
    assume {:verifier.code 0} true;
    $i100 := $eq.i32($i99, 2);
    goto corral_source_split_8641;

  corral_source_split_8641:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    assume !($i100 == 1);
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb130:
    assume $i100 == 1;
    goto corral_source_split_8643;

  corral_source_split_8643:
    assume {:verifier.code 0} true;
    $i101 := $M.53;
    goto corral_source_split_8644;

  corral_source_split_8644:
    assume {:verifier.code 0} true;
    $i102 := $eq.i32($i101, 0);
    goto corral_source_split_8645;

  corral_source_split_8645:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb133, $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    assume !($i102 == 1);
    goto $bb132;

  $bb133:
    assume $i102 == 1;
    goto corral_source_split_8647;

  corral_source_split_8647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1669} poseidon_exit();
    goto corral_source_split_8648;

  corral_source_split_8648:
    assume {:verifier.code 0} true;
    $M.85 := 3;
    call {:si_unique_call 1670} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_8649;

  corral_source_split_8649:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb5:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i8, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i8, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i15 == 1);
    goto corral_source_split_8477;

  corral_source_split_8477:
    assume {:verifier.code 0} true;
    $i91 := $M.78;
    goto corral_source_split_8478;

  corral_source_split_8478:
    assume {:verifier.code 0} true;
    $i92 := $ne.i32($i91, 0);
    goto corral_source_split_8479;

  corral_source_split_8479:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb117, $bb118;

  $bb118:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb117:
    assume $i92 == 1;
    goto corral_source_split_8630;

  corral_source_split_8630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1665} ldv_main_exported_4();
    goto SeqInstr_490, SeqInstr_491;

  SeqInstr_491:
    assume assertsPassed;
    goto SeqInstr_492;

  SeqInstr_492:
    goto corral_source_split_8631;

  corral_source_split_8631:
    assume {:verifier.code 0} true;
    goto $bb119;

  SeqInstr_490:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i15 == 1;
    goto corral_source_split_8473;

  corral_source_split_8473:
    assume {:verifier.code 0} true;
    $i41 := $M.84;
    goto corral_source_split_8474;

  corral_source_split_8474:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_8475;

  corral_source_split_8475:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb61:
    assume $i42 == 1;
    goto corral_source_split_8535;

  corral_source_split_8535:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1642} $i43 := __VERIFIER_nondet_int();
    call {:si_unique_call 1643} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i43);
    call {:si_unique_call 1644} {:cexpr "tmp___5"} boogie_si_record_i32($i43);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $i44 := $slt.i32($i43, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    $i45 := $slt.i32($i43, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    $i46 := $slt.i32($i43, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i43, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    assume !($i47 == 1);
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1664} ldv_stop();
    goto corral_source_split_8628;

  corral_source_split_8628:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb70:
    assume $i47 == 1;
    goto corral_source_split_8545;

  corral_source_split_8545:
    assume {:verifier.code 0} true;
    $i86 := $M.84;
    goto corral_source_split_8546;

  corral_source_split_8546:
    assume {:verifier.code 0} true;
    $i87 := $eq.i32($i86, 3);
    goto corral_source_split_8547;

  corral_source_split_8547:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb108:
    assume $i87 == 1;
    goto corral_source_split_8619;

  corral_source_split_8619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1661} $i88 := ldv_reset_resume_1();
    goto corral_source_split_8620;

  corral_source_split_8620:
    assume {:verifier.code 0} true;
    $M.90 := $i88;
    call {:si_unique_call 1662} {:cexpr "ldv_retval_4"} boogie_si_record_i32($i88);
    goto corral_source_split_8621;

  corral_source_split_8621:
    assume {:verifier.code 0} true;
    $i89 := $M.90;
    goto corral_source_split_8622;

  corral_source_split_8622:
    assume {:verifier.code 0} true;
    $i90 := $eq.i32($i89, 0);
    goto corral_source_split_8623;

  corral_source_split_8623:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  $bb111:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb110:
    assume $i90 == 1;
    goto corral_source_split_8625;

  corral_source_split_8625:
    assume {:verifier.code 0} true;
    $M.84 := 2;
    call {:si_unique_call 1663} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_8626;

  corral_source_split_8626:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb68:
    assume $i46 == 1;
    goto corral_source_split_8541;

  corral_source_split_8541:
    assume {:verifier.code 0} true;
    $i72 := $M.84;
    goto corral_source_split_8542;

  corral_source_split_8542:
    assume {:verifier.code 0} true;
    $i73 := $eq.i32($i72, 3);
    goto corral_source_split_8543;

  corral_source_split_8543:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    assume !($i73 == 1);
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    $i79 := $M.84;
    goto corral_source_split_8604;

  corral_source_split_8604:
    assume {:verifier.code 0} true;
    $i80 := $eq.i32($i79, 2);
    goto corral_source_split_8605;

  corral_source_split_8605:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb102, $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    assume !($i80 == 1);
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb102:
    assume $i80 == 1;
    goto corral_source_split_8607;

  corral_source_split_8607:
    assume {:verifier.code 0} true;
    $i81 := $M.89;
    goto corral_source_split_8608;

  corral_source_split_8608:
    assume {:verifier.code 0} true;
    $i82 := $eq.i32($i81, 0);
    goto corral_source_split_8609;

  corral_source_split_8609:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    assume !($i82 == 1);
    goto $bb104;

  $bb105:
    assume $i82 == 1;
    goto corral_source_split_8611;

  corral_source_split_8611:
    assume {:verifier.code 0} true;
    $p83 := $M.62;
    goto corral_source_split_8612;

  corral_source_split_8612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1658} poseidon_disconnect($p83);
    goto SeqInstr_487, SeqInstr_488;

  SeqInstr_488:
    assume assertsPassed;
    goto SeqInstr_489;

  SeqInstr_489:
    goto corral_source_split_8613;

  corral_source_split_8613:
    assume {:verifier.code 0} true;
    $M.84 := 1;
    call {:si_unique_call 1659} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_8614;

  corral_source_split_8614:
    assume {:verifier.code 0} true;
    $i84 := $M.53;
    goto corral_source_split_8615;

  corral_source_split_8615:
    assume {:verifier.code 0} true;
    $i85 := $sub.i32($i84, 1);
    goto corral_source_split_8616;

  corral_source_split_8616:
    assume {:verifier.code 0} true;
    $M.53 := $i85;
    call {:si_unique_call 1660} {:cexpr "ref_cnt"} boogie_si_record_i32($i85);
    goto corral_source_split_8617;

  corral_source_split_8617:
    assume {:verifier.code 0} true;
    goto $bb107;

  SeqInstr_487:
    assume !assertsPassed;
    return;

  $bb96:
    assume $i73 == 1;
    goto corral_source_split_8592;

  corral_source_split_8592:
    assume {:verifier.code 0} true;
    $i74 := $M.89;
    goto corral_source_split_8593;

  corral_source_split_8593:
    assume {:verifier.code 0} true;
    $i75 := $eq.i32($i74, 0);
    goto corral_source_split_8594;

  corral_source_split_8594:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    assume !($i75 == 1);
    goto $bb98;

  $bb99:
    assume $i75 == 1;
    goto corral_source_split_8596;

  corral_source_split_8596:
    assume {:verifier.code 0} true;
    $p76 := $M.62;
    goto corral_source_split_8597;

  corral_source_split_8597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1655} poseidon_disconnect($p76);
    goto SeqInstr_484, SeqInstr_485;

  SeqInstr_485:
    assume assertsPassed;
    goto SeqInstr_486;

  SeqInstr_486:
    goto corral_source_split_8598;

  corral_source_split_8598:
    assume {:verifier.code 0} true;
    $M.84 := 1;
    call {:si_unique_call 1656} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_8599;

  corral_source_split_8599:
    assume {:verifier.code 0} true;
    $i77 := $M.53;
    goto corral_source_split_8600;

  corral_source_split_8600:
    assume {:verifier.code 0} true;
    $i78 := $sub.i32($i77, 1);
    goto corral_source_split_8601;

  corral_source_split_8601:
    assume {:verifier.code 0} true;
    $M.53 := $i78;
    call {:si_unique_call 1657} {:cexpr "ref_cnt"} boogie_si_record_i32($i78);
    goto corral_source_split_8602;

  corral_source_split_8602:
    assume {:verifier.code 0} true;
    goto $bb101;

  SeqInstr_484:
    assume !assertsPassed;
    return;

  $bb66:
    assume $i45 == 1;
    goto corral_source_split_8537;

  corral_source_split_8537:
    assume {:verifier.code 0} true;
    $i66 := $M.84;
    goto corral_source_split_8538;

  corral_source_split_8538:
    assume {:verifier.code 0} true;
    $i67 := $eq.i32($i66, 3);
    goto corral_source_split_8539;

  corral_source_split_8539:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb90:
    assume $i67 == 1;
    goto corral_source_split_8582;

  corral_source_split_8582:
    assume {:verifier.code 0} true;
    $p68 := $M.62;
    goto corral_source_split_8583;

  corral_source_split_8583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1652} $i69 := poseidon_resume($p68);
    goto SeqInstr_481, SeqInstr_482;

  SeqInstr_482:
    assume assertsPassed;
    goto SeqInstr_483;

  SeqInstr_483:
    goto corral_source_split_8584;

  corral_source_split_8584:
    assume {:verifier.code 0} true;
    $M.88 := $i69;
    call {:si_unique_call 1653} {:cexpr "ldv_retval_5"} boogie_si_record_i32($i69);
    goto corral_source_split_8585;

  corral_source_split_8585:
    assume {:verifier.code 0} true;
    $i70 := $M.88;
    goto corral_source_split_8586;

  corral_source_split_8586:
    assume {:verifier.code 0} true;
    $i71 := $eq.i32($i70, 0);
    goto corral_source_split_8587;

  corral_source_split_8587:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb92:
    assume $i71 == 1;
    goto corral_source_split_8589;

  corral_source_split_8589:
    assume {:verifier.code 0} true;
    $M.84 := 2;
    call {:si_unique_call 1654} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_8590;

  corral_source_split_8590:
    assume {:verifier.code 0} true;
    goto $bb94;

  SeqInstr_481:
    assume !assertsPassed;
    return;

  $bb64:
    assume $i44 == 1;
    assume {:verifier.code 0} true;
    $i48 := $slt.i32($i43, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i48 == 1);
    goto corral_source_split_8549;

  corral_source_split_8549:
    assume {:verifier.code 0} true;
    $i58 := $M.84;
    goto corral_source_split_8550;

  corral_source_split_8550:
    assume {:verifier.code 0} true;
    $i59 := $eq.i32($i58, 2);
    goto corral_source_split_8551;

  corral_source_split_8551:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb84:
    assume $i59 == 1;
    goto corral_source_split_8570;

  corral_source_split_8570:
    assume {:verifier.code 0} true;
    $p60 := $M.62;
    goto corral_source_split_8571;

  corral_source_split_8571:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_8572;

  corral_source_split_8572:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.82, $p61);
    goto corral_source_split_8573;

  corral_source_split_8573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1649} $i63 := poseidon_suspend($p60, $i62);
    goto SeqInstr_478, SeqInstr_479;

  SeqInstr_479:
    assume assertsPassed;
    goto SeqInstr_480;

  SeqInstr_480:
    goto corral_source_split_8574;

  corral_source_split_8574:
    assume {:verifier.code 0} true;
    $M.87 := $i63;
    call {:si_unique_call 1650} {:cexpr "ldv_retval_6"} boogie_si_record_i32($i63);
    goto corral_source_split_8575;

  corral_source_split_8575:
    assume {:verifier.code 0} true;
    $i64 := $M.87;
    goto corral_source_split_8576;

  corral_source_split_8576:
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i64, 0);
    goto corral_source_split_8577;

  corral_source_split_8577:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb86:
    assume $i65 == 1;
    goto corral_source_split_8579;

  corral_source_split_8579:
    assume {:verifier.code 0} true;
    $M.84 := 3;
    call {:si_unique_call 1651} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_8580;

  corral_source_split_8580:
    assume {:verifier.code 0} true;
    goto $bb88;

  SeqInstr_478:
    assume !assertsPassed;
    return;

  $bb73:
    assume $i48 == 1;
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i43, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    assume !($i49 == 1);
    goto $bb72;

  $bb75:
    assume $i49 == 1;
    goto corral_source_split_8553;

  corral_source_split_8553:
    assume {:verifier.code 0} true;
    $i50 := $M.84;
    goto corral_source_split_8554;

  corral_source_split_8554:
    assume {:verifier.code 0} true;
    $i51 := $eq.i32($i50, 1);
    goto corral_source_split_8555;

  corral_source_split_8555:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb77:
    assume $i51 == 1;
    goto corral_source_split_8557;

  corral_source_split_8557:
    assume {:verifier.code 0} true;
    $p52 := $M.62;
    goto corral_source_split_8558;

  corral_source_split_8558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1645} $i53 := poseidon_probe($p52, $p6);
    goto corral_source_split_8559;

  corral_source_split_8559:
    assume {:verifier.code 0} true;
    $M.86 := $i53;
    call {:si_unique_call 1646} {:cexpr "ldv_retval_7"} boogie_si_record_i32($i53);
    goto corral_source_split_8560;

  corral_source_split_8560:
    assume {:verifier.code 0} true;
    $i54 := $M.86;
    goto corral_source_split_8561;

  corral_source_split_8561:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i54, 0);
    goto corral_source_split_8562;

  corral_source_split_8562:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb79:
    assume $i55 == 1;
    goto corral_source_split_8564;

  corral_source_split_8564:
    assume {:verifier.code 0} true;
    $M.84 := 2;
    call {:si_unique_call 1647} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_8565;

  corral_source_split_8565:
    assume {:verifier.code 0} true;
    $i56 := $M.53;
    goto corral_source_split_8566;

  corral_source_split_8566:
    assume {:verifier.code 0} true;
    $i57 := $add.i32($i56, 1);
    goto corral_source_split_8567;

  corral_source_split_8567:
    assume {:verifier.code 0} true;
    $M.53 := $i57;
    call {:si_unique_call 1648} {:cexpr "ref_cnt"} boogie_si_record_i32($i57);
    goto corral_source_split_8568;

  corral_source_split_8568:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb14:
    assume $i14 == 1;
    goto corral_source_split_8469;

  corral_source_split_8469:
    assume {:verifier.code 0} true;
    $i39 := $M.52;
    goto corral_source_split_8470;

  corral_source_split_8470:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_8471;

  corral_source_split_8471:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb58:
    assume $i40 == 1;
    goto corral_source_split_8532;

  corral_source_split_8532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1641} ldv_main_exported_8();
    goto corral_source_split_8533;

  corral_source_split_8533:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb3:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i8, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i8, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i8, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i18 == 1);
    goto corral_source_split_8489;

  corral_source_split_8489:
    assume {:verifier.code 0} true;
    $i32 := $M.83;
    goto corral_source_split_8490;

  corral_source_split_8490:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_8491;

  corral_source_split_8491:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb46:
    assume $i33 == 1;
    goto corral_source_split_8520;

  corral_source_split_8520:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1635} $i34 := __VERIFIER_nondet_int();
    call {:si_unique_call 1636} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i34);
    call {:si_unique_call 1637} {:cexpr "tmp___4"} boogie_si_record_i32($i34);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1640} ldv_stop();
    goto corral_source_split_8530;

  corral_source_split_8530:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb49:
    assume $i35 == 1;
    goto corral_source_split_8522;

  corral_source_split_8522:
    assume {:verifier.code 0} true;
    $i36 := $M.83;
    goto corral_source_split_8523;

  corral_source_split_8523:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 1);
    goto corral_source_split_8524;

  corral_source_split_8524:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb51:
    assume $i37 == 1;
    goto corral_source_split_8526;

  corral_source_split_8526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1638} vslice_dummy_var_343 := pm_notifier_block($p4, $i1, $p2);
    goto SeqInstr_475, SeqInstr_476;

  SeqInstr_476:
    assume assertsPassed;
    goto SeqInstr_477;

  SeqInstr_477:
    goto corral_source_split_8527;

  corral_source_split_8527:
    assume {:verifier.code 0} true;
    $M.83 := 1;
    call {:si_unique_call 1639} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_8528;

  corral_source_split_8528:
    assume {:verifier.code 0} true;
    goto $bb53;

  SeqInstr_475:
    assume !assertsPassed;
    return;

  $bb22:
    assume $i18 == 1;
    goto corral_source_split_8485;

  corral_source_split_8485:
    assume {:verifier.code 0} true;
    $i30 := $M.61;
    goto corral_source_split_8486;

  corral_source_split_8486:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_8487;

  corral_source_split_8487:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb43:
    assume $i31 == 1;
    goto corral_source_split_8517;

  corral_source_split_8517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1634} ldv_main_exported_9();
    goto SeqInstr_472, SeqInstr_473;

  SeqInstr_473:
    assume assertsPassed;
    goto SeqInstr_474;

  SeqInstr_474:
    goto corral_source_split_8518;

  corral_source_split_8518:
    assume {:verifier.code 0} true;
    goto $bb45;

  SeqInstr_472:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i17 == 1;
    goto corral_source_split_8481;

  corral_source_split_8481:
    assume {:verifier.code 0} true;
    $i28 := $M.64;
    goto corral_source_split_8482;

  corral_source_split_8482:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_8483;

  corral_source_split_8483:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb40:
    assume $i29 == 1;
    goto corral_source_split_8514;

  corral_source_split_8514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1633} ldv_main_exported_7();
    goto corral_source_split_8515;

  corral_source_split_8515:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb18:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i8, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i8, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i20 == 1);
    goto corral_source_split_8497;

  corral_source_split_8497:
    assume {:verifier.code 0} true;
    $i26 := $M.79;
    goto corral_source_split_8498;

  corral_source_split_8498:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_8499;

  corral_source_split_8499:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb37:
    assume $i27 == 1;
    goto corral_source_split_8511;

  corral_source_split_8511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1632} ldv_main_exported_3();
    goto corral_source_split_8512;

  corral_source_split_8512:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb26:
    assume $i20 == 1;
    goto corral_source_split_8493;

  corral_source_split_8493:
    assume {:verifier.code 0} true;
    $i24 := $M.55;
    goto corral_source_split_8494;

  corral_source_split_8494:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_8495;

  corral_source_split_8495:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb34:
    assume $i25 == 1;
    goto corral_source_split_8508;

  corral_source_split_8508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1631} ldv_main_exported_11();
    goto corral_source_split_8509;

  corral_source_split_8509:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb24:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i8, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb13;

  $bb28:
    assume $i21 == 1;
    goto corral_source_split_8501;

  corral_source_split_8501:
    assume {:verifier.code 0} true;
    $i22 := $M.69;
    goto corral_source_split_8502;

  corral_source_split_8502:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_8503;

  corral_source_split_8503:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb30:
    assume $i23 == 1;
    goto corral_source_split_8505;

  corral_source_split_8505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1630} ldv_main_exported_6();
    goto SeqInstr_469, SeqInstr_470;

  SeqInstr_470:
    assume assertsPassed;
    goto SeqInstr_471;

  SeqInstr_471:
    goto corral_source_split_8506;

  corral_source_split_8506:
    assume {:verifier.code 0} true;
    goto $bb32;

  SeqInstr_469:
    assume !assertsPassed;
    return;

  $bb33_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1627} $i8 := __VERIFIER_nondet_int();
    call {:si_unique_call 1628} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i8);
    call {:si_unique_call 1629} {:cexpr "tmp___3"} boogie_si_record_i32($i8);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 591899);

procedure ldv_initialize();
  free requires assertsPassed;
  modifies $M.3, $M.31, $M.92, $M.93, $M.94;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8695;

  corral_source_split_8695:
    assume {:verifier.code 0} true;
    $M.3 := 1;
    call {:si_unique_call 1697} {:cexpr "ldv_mutex_lock_of_poseidon"} boogie_si_record_i32(1);
    goto corral_source_split_8696;

  corral_source_split_8696:
    assume {:verifier.code 0} true;
    $M.31 := 1;
    call {:si_unique_call 1698} {:cexpr "ldv_mutex_mutex_of_device"} boogie_si_record_i32(1);
    goto corral_source_split_8697;

  corral_source_split_8697:
    assume {:verifier.code 0} true;
    $M.92 := 1;
    call {:si_unique_call 1699} {:cexpr "ldv_mutex_pm_mutex"} boogie_si_record_i32(1);
    goto corral_source_split_8698;

  corral_source_split_8698:
    assume {:verifier.code 0} true;
    $M.93 := 1;
    call {:si_unique_call 1700} {:cexpr "ldv_mutex_power_lock_of_snd_card"} boogie_si_record_i32(1);
    goto corral_source_split_8699;

  corral_source_split_8699:
    assume {:verifier.code 0} true;
    $M.94 := 1;
    call {:si_unique_call 1701} {:cexpr "ldv_mutex_vb_lock_of_videobuf_queue"} boogie_si_record_i32(1);
    goto corral_source_split_8700;

  corral_source_split_8700:
    assume {:verifier.code 0} true;
    return;
}



const ldv_reset_resume_1: ref;

axiom ldv_reset_resume_1 == $sub.ref(0, 592931);

procedure ldv_reset_resume_1() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_reset_resume_1() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8702;

  corral_source_split_8702:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1702} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1703} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_8703;

  corral_source_split_8703:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const poseidon_exit: ref;

axiom poseidon_exit == $sub.ref(0, 593963);

procedure poseidon_exit();
  free requires assertsPassed;
  modifies $M.84;



implementation poseidon_exit()
{
  var vslice_dummy_var_344: i32;
  var vslice_dummy_var_345: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8705;

  corral_source_split_8705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1704} vslice_dummy_var_344 := printk.ref.ref.i32(.str, .str.105, 620);
    goto corral_source_split_8706;

  corral_source_split_8706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1705} vslice_dummy_var_345 := unregister_pm_notifier(pm_notifer);
    goto corral_source_split_8707;

  corral_source_split_8707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1706} ldv_usb_deregister_161(poseidon_driver);
    goto corral_source_split_8708;

  corral_source_split_8708:
    assume {:verifier.code 0} true;
    return;
}



const poseidon_init: ref;

axiom poseidon_init == $sub.ref(0, 594995);

procedure poseidon_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.84, $M.89, $M.62, $M.0, $CurrAddr;



implementation poseidon_init() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var vslice_dummy_var_346: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8710;

  corral_source_split_8710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1707} $i0 := usb_register(poseidon_driver);
    call {:si_unique_call 1708} {:cexpr "ret"} boogie_si_record_i32($i0);
    goto corral_source_split_8711;

  corral_source_split_8711:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_8712;

  corral_source_split_8712:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1709} vslice_dummy_var_346 := register_pm_notifier(pm_notifer);
    goto corral_source_split_8716;

  corral_source_split_8716:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_8714;

  corral_source_split_8714:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 596027);

procedure ldv_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8718;

  corral_source_split_8718:
    assume {:verifier.code 0} true;
    $i0 := $M.3;
    goto corral_source_split_8719;

  corral_source_split_8719:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_8720;

  corral_source_split_8720:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_8724;

  corral_source_split_8724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1710} ldv_error();
    goto SeqInstr_502, SeqInstr_503;

  SeqInstr_503:
    assume assertsPassed;
    goto SeqInstr_504;

  SeqInstr_504:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i2 := $M.31;
    goto corral_source_split_8726;

  corral_source_split_8726:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 1);
    goto corral_source_split_8727;

  corral_source_split_8727:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    goto corral_source_split_8731;

  corral_source_split_8731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1711} ldv_error();
    goto SeqInstr_505, SeqInstr_506;

  SeqInstr_506:
    assume assertsPassed;
    goto SeqInstr_507;

  SeqInstr_507:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i4 := $M.92;
    goto corral_source_split_8733;

  corral_source_split_8733:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 1);
    goto corral_source_split_8734;

  corral_source_split_8734:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i5 == 1);
    goto corral_source_split_8738;

  corral_source_split_8738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1712} ldv_error();
    goto SeqInstr_508, SeqInstr_509;

  SeqInstr_509:
    assume assertsPassed;
    goto SeqInstr_510;

  SeqInstr_510:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i6 := $M.93;
    goto corral_source_split_8740;

  corral_source_split_8740:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 1);
    goto corral_source_split_8741;

  corral_source_split_8741:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i7 == 1);
    goto corral_source_split_8745;

  corral_source_split_8745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1713} ldv_error();
    goto SeqInstr_511, SeqInstr_512;

  SeqInstr_512:
    assume assertsPassed;
    goto SeqInstr_513;

  SeqInstr_513:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i8 := $M.94;
    goto corral_source_split_8747;

  corral_source_split_8747:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_8748;

  corral_source_split_8748:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i9 == 1);
    goto corral_source_split_8752;

  corral_source_split_8752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1714} ldv_error();
    goto SeqInstr_514, SeqInstr_515;

  SeqInstr_515:
    assume assertsPassed;
    goto SeqInstr_516;

  SeqInstr_516:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_514:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i9 == 1;
    goto corral_source_split_8750;

  corral_source_split_8750:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_511:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i7 == 1;
    goto corral_source_split_8743;

  corral_source_split_8743:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_508:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i5 == 1;
    goto corral_source_split_8736;

  corral_source_split_8736:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_505:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i3 == 1;
    goto corral_source_split_8729;

  corral_source_split_8729:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_502:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_8722;

  corral_source_split_8722:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const usb_register: ref;

axiom usb_register == $sub.ref(0, 597059);

procedure usb_register($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.84, $M.89, $M.62, $M.0, $CurrAddr;



implementation usb_register($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8754;

  corral_source_split_8754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1715} $i1 := ldv_usb_register_driver_156($p0, __this_module, .str.106);
    call {:si_unique_call 1716} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_8755;

  corral_source_split_8755:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const register_pm_notifier: ref;

axiom register_pm_notifier == $sub.ref(0, 598091);

procedure register_pm_notifier($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation register_pm_notifier($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8757;

  corral_source_split_8757:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1717} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1718} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_8758;

  corral_source_split_8758:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_usb_register_driver_156: ref;

axiom ldv_usb_register_driver_156 == $sub.ref(0, 599123);

procedure ldv_usb_register_driver_156($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.84, $M.89, $M.62, $M.0, $CurrAddr;



implementation ldv_usb_register_driver_156($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8760;

  corral_source_split_8760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1719} $i3 := usb_register_driver($p0, $p1, $p2);
    call {:si_unique_call 1720} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_8761;

  corral_source_split_8761:
    assume {:verifier.code 0} true;
    $M.84 := 1;
    call {:si_unique_call 1721} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_8762;

  corral_source_split_8762:
    assume {:verifier.code 0} true;
    $M.89 := 0;
    call {:si_unique_call 1722} {:cexpr "usb_counter"} boogie_si_record_i32(0);
    goto corral_source_split_8763;

  corral_source_split_8763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1723} ldv_usb_driver_1();
    goto corral_source_split_8764;

  corral_source_split_8764:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const unregister_pm_notifier: ref;

axiom unregister_pm_notifier == $sub.ref(0, 600155);

procedure unregister_pm_notifier($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation unregister_pm_notifier($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8766;

  corral_source_split_8766:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1724} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1725} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_8767;

  corral_source_split_8767:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_usb_deregister_161: ref;

axiom ldv_usb_deregister_161 == $sub.ref(0, 601187);

procedure ldv_usb_deregister_161($p0: ref);
  free requires assertsPassed;
  modifies $M.84;



implementation ldv_usb_deregister_161($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8769;

  corral_source_split_8769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1726} usb_deregister($p0);
    goto corral_source_split_8770;

  corral_source_split_8770:
    assume {:verifier.code 0} true;
    $M.84 := 0;
    call {:si_unique_call 1727} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    goto corral_source_split_8771;

  corral_source_split_8771:
    assume {:verifier.code 0} true;
    return;
}



const usb_deregister: ref;

axiom usb_deregister == $sub.ref(0, 602219);

procedure usb_deregister($p0: ref);
  free requires assertsPassed;



implementation usb_deregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8773;

  corral_source_split_8773:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 603251);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1728} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_8775;

  corral_source_split_8775:
    assume {:verifier.code 1} true;
    goto corral_source_split_8776;

  corral_source_split_8776:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_8777;

  corral_source_split_8777:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 604283);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 605315);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 606347);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8779;

  corral_source_split_8779:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_517, SeqInstr_518;

  SeqInstr_518:
    assume assertsPassed;
    goto SeqInstr_519;

  SeqInstr_519:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_8780;

  corral_source_split_8780:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_517:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 607379);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 608411);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 609443);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 610475);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 611507);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 612539);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 613571);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 614603);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 615635);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 616667);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8782;

  corral_source_split_8782:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1729} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 1730} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1731} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_8783;

  corral_source_split_8783:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_8784;

  corral_source_split_8784:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_8788;

  corral_source_split_8788:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_8789;

  corral_source_split_8789:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1732} __VERIFIER_assume($i4);
    goto corral_source_split_8790;

  corral_source_split_8790:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_8786;

  corral_source_split_8786:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 617699);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 618731);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 619763);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __VERIFIER_nondet_unsigned_int: ref;

axiom __VERIFIER_nondet_unsigned_int == $sub.ref(0, 620795);

procedure __VERIFIER_nondet_unsigned_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8792;

  corral_source_split_8792:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1733} $i0 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1734} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1735} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_8793;

  corral_source_split_8793:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1736} $i1 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1737} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 1738} {:cexpr "min"} boogie_si_record_i32($i1);
    goto corral_source_split_8794;

  corral_source_split_8794:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1739} $i2 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1740} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 1741} {:cexpr "max"} boogie_si_record_i32($i2);
    goto corral_source_split_8795;

  corral_source_split_8795:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_8796;

  corral_source_split_8796:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_8801;

  corral_source_split_8801:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_8802;

  corral_source_split_8802:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1742} __VERIFIER_assume($i7);
    goto corral_source_split_8803;

  corral_source_split_8803:
    assume {:verifier.code 0} true;
    $i8 := $uge.i32($i0, $i1);
    goto corral_source_split_8804;

  corral_source_split_8804:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_8810;

  corral_source_split_8810:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_8811;

  corral_source_split_8811:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1743} __VERIFIER_assume($i11);
    goto corral_source_split_8812;

  corral_source_split_8812:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_8808;

  corral_source_split_8808:
    assume {:verifier.code 1} true;
    $i10 := $ule.i32($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_8798;

  corral_source_split_8798:
    assume {:verifier.code 0} true;
    $i5 := $uge.i32($i2, 4294967295);
    goto corral_source_split_8799;

  corral_source_split_8799:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_8806;

  corral_source_split_8806:
    assume {:verifier.code 1} true;
    $i6 := $ule.i32($i2, 4294967295);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 621827);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __VERIFIER_nondet_long: ref;

axiom __VERIFIER_nondet_long == $sub.ref(0, 622859);

procedure __VERIFIER_nondet_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8814;

  corral_source_split_8814:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1744} $i0 := __SMACK_nondet_long();
    call {:si_unique_call 1745} {:cexpr "smack:ext:__SMACK_nondet_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1746} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_8815;

  corral_source_split_8815:
    assume {:verifier.code 0} true;
    $i1 := $sge.i64($i0, $sub.i64(0, 9223372036854775808));
    goto corral_source_split_8816;

  corral_source_split_8816:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_8820;

  corral_source_split_8820:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_8821;

  corral_source_split_8821:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1747} __VERIFIER_assume($i4);
    goto corral_source_split_8822;

  corral_source_split_8822:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_8818;

  corral_source_split_8818:
    assume {:verifier.code 1} true;
    $i3 := $sle.i64($i0, 9223372036854775807);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 623891);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 624923);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 625955);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 626987);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 628019);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8824;

  corral_source_split_8824:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1748} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1749} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1750} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_8825;

  corral_source_split_8825:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1751} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1752} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 1753} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_8826;

  corral_source_split_8826:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1754} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1755} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 1756} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_8827;

  corral_source_split_8827:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_8828;

  corral_source_split_8828:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_8833;

  corral_source_split_8833:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_8834;

  corral_source_split_8834:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1757} __VERIFIER_assume($i7);
    goto corral_source_split_8835;

  corral_source_split_8835:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_8836;

  corral_source_split_8836:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_8842;

  corral_source_split_8842:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_8843;

  corral_source_split_8843:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1758} __VERIFIER_assume($i11);
    goto corral_source_split_8844;

  corral_source_split_8844:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_8840;

  corral_source_split_8840:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_8830;

  corral_source_split_8830:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_8831;

  corral_source_split_8831:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_8838;

  corral_source_split_8838:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 629051);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 630083);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 631115);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 632147);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 633179);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 634211);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 635243);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 636275);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_uint: ref;

axiom __VERIFIER_nondet_uint == $sub.ref(0, 637307);

procedure __VERIFIER_nondet_uint() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uint() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8846;

  corral_source_split_8846:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1759} $i0 := __VERIFIER_nondet_unsigned_int();
    call {:si_unique_call 1760} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1761} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_8847;

  corral_source_split_8847:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 638339);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8849;

  corral_source_split_8849:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1762} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 1763} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1764} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_8850;

  corral_source_split_8850:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 639371);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8852;

  corral_source_split_8852:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1765} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 1766} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_8853;

  corral_source_split_8853:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 640403);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 641435);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1767} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1768} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 642467);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 643499);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8855;

  corral_source_split_8855:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_8856;

  corral_source_split_8856:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 644531);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_73: [ref]i8;
  var cmdloc_dummy_var_74: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1769} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 1770} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_8858;

  corral_source_split_8858:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1771} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1772} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_8859;

  corral_source_split_8859:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_8860;

  corral_source_split_8860:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_8864;

  corral_source_split_8864:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_8865;

  corral_source_split_8865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1773} $p6 := malloc($i5);
    goto corral_source_split_8866;

  corral_source_split_8866:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_8867;

  corral_source_split_8867:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_73 := $M.0;
    call {:si_unique_call 1774} cmdloc_dummy_var_74 := $memset.i8(cmdloc_dummy_var_73, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_74;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8869;

  corral_source_split_8869:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_8862;

  corral_source_split_8862:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 645563);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 646595);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.42, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.55, $M.56, $M.57, $M.58, $M.61, $M.84, $M.89, $M.2, $M.63, $M.64, $M.65, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $M.78, $M.79, $M.80, $M.81, $M.62, $M.83, $M.85, $M.86, $M.87, $M.88, $M.90, $M.91, $M.108, $M.109, $M.38, $M.0, $M.28, $M.23, $M.24, $M.113, $M.9, $M.10, $M.8, $M.7, $M.127, $M.128, $M.21, $M.22, $M.14, $M.15, $M.133, $M.6, $M.1, $M.94, $M.93, $M.92, $M.31, $M.3, $M.134, $M.135, $M.136, $M.137, $M.36;



implementation __SMACK_static_init()
{

  $bb0:
    call {:si_unique_call 1775} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.42 := $0.ref;
    $M.43 := $0.ref;
    $M.44 := $0.ref;
    $M.45 := $0.ref;
    $M.46 := $0.ref;
    $M.47 := $0.ref;
    $M.48 := $0.ref;
    $M.49 := $0.ref;
    $M.50 := $0.ref;
    $M.51 := $0.ref;
    $M.52 := 0;
    call {:si_unique_call 1776} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(0);
    $M.53 := 0;
    call {:si_unique_call 1777} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.55 := 0;
    call {:si_unique_call 1778} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(0);
    $M.56 := 0;
    call {:si_unique_call 1779} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.57 := 0;
    call {:si_unique_call 1780} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(0);
    $M.58 := 0;
    call {:si_unique_call 1781} {:cexpr "ldv_retval_9"} boogie_si_record_i32(0);
    $M.61 := 0;
    call {:si_unique_call 1782} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(0);
    $M.84 := 0;
    call {:si_unique_call 1783} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.89 := 0;
    call {:si_unique_call 1784} {:cexpr "usb_counter"} boogie_si_record_i32(0);
    $M.2 := 0;
    call {:si_unique_call 1785} {:cexpr "debug_mode"} boogie_si_record_i32(0);
    $M.63 := $0.ref;
    $M.64 := 0;
    call {:si_unique_call 1786} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    $M.65 := 0;
    call {:si_unique_call 1787} {:cexpr "ldv_retval_3"} boogie_si_record_i32(0);
    $M.66 := 0;
    call {:si_unique_call 1788} {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
    $M.67 := $0.ref;
    $M.68 := $0.ref;
    $M.69 := 0;
    call {:si_unique_call 1789} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    $M.70 := 0;
    call {:si_unique_call 1790} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.71 := $0.ref;
    $M.72 := $0.ref;
    $M.73 := $0.ref;
    $M.74 := $0.ref;
    $M.75 := $0.ref;
    $M.76 := $0.ref;
    $M.77 := $0.ref;
    $M.78 := 0;
    call {:si_unique_call 1791} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    $M.79 := 0;
    call {:si_unique_call 1792} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    $M.80 := 0;
    call {:si_unique_call 1793} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    $M.81 := 0;
    call {:si_unique_call 1794} {:cexpr "ldv_retval_10"} boogie_si_record_i32(0);
    $M.62 := $0.ref;
    $M.83 := 0;
    call {:si_unique_call 1795} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.85 := 0;
    call {:si_unique_call 1796} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.86 := 0;
    call {:si_unique_call 1797} {:cexpr "ldv_retval_7"} boogie_si_record_i32(0);
    $M.87 := 0;
    call {:si_unique_call 1798} {:cexpr "ldv_retval_6"} boogie_si_record_i32(0);
    $M.88 := 0;
    call {:si_unique_call 1799} {:cexpr "ldv_retval_5"} boogie_si_record_i32(0);
    $M.90 := 0;
    call {:si_unique_call 1800} {:cexpr "ldv_retval_4"} boogie_si_record_i32(0);
    $M.91 := 0;
    call {:si_unique_call 1801} {:cexpr "ldv_retval_8"} boogie_si_record_i32(0);
    $M.108 := $store.i16($M.108, id_table, 899);
    $M.108 := $store.i16($M.108, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 72)), $mul.ref(0, 24)), $mul.ref(2, 1)), 6948);
    $M.108 := $store.i16($M.108, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 72)), $mul.ref(0, 24)), $mul.ref(4, 1)), 16385);
    $M.108 := $store.i16($M.108, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 72)), $mul.ref(0, 24)), $mul.ref(6, 1)), 0);
    $M.108 := $store.i16($M.108, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 72)), $mul.ref(0, 24)), $mul.ref(8, 1)), 0);
    $M.108 := $store.i8($M.108, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 72)), $mul.ref(0, 24)), $mul.ref(10, 1)), 0);
    $M.108 := $store.i8($M.108, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 72)), $mul.ref(0, 24)), $mul.ref(11, 1)), 0);
    $M.108 := $store.i8($M.108, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 72)), $mul.ref(0, 24)), $mul.ref(12, 1)), 0);
    $M.108 := $store.i8($M.108, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 72)), $mul.ref(0, 24)), $mul.ref(13, 1)), $sub.i8(0, 1));
    $M.108 := $store.i8($M.108, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 72)), $mul.ref(0, 24)), $mul.ref(14, 1)), 1);
    $M.108 := $store.i8($M.108, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 72)), $mul.ref(0, 24)), $mul.ref(15, 1)), 0);
    $M.108 := $store.i64($M.108, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 72)), $mul.ref(0, 24)), $mul.ref(16, 1)), 0);
    $M.108 := $store.i16($M.108, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 72)), $mul.ref(1, 24)), $mul.ref(0, 1)), 899);
    $M.108 := $store.i16($M.108, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 72)), $mul.ref(1, 24)), $mul.ref(2, 1)), 6948);
    $M.108 := $store.i16($M.108, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 72)), $mul.ref(1, 24)), $mul.ref(4, 1)), 16385);
    $M.108 := $store.i16($M.108, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 72)), $mul.ref(1, 24)), $mul.ref(6, 1)), 0);
    $M.108 := $store.i16($M.108, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 72)), $mul.ref(1, 24)), $mul.ref(8, 1)), 0);
    $M.108 := $store.i8($M.108, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 72)), $mul.ref(1, 24)), $mul.ref(10, 1)), 0);
    $M.108 := $store.i8($M.108, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 72)), $mul.ref(1, 24)), $mul.ref(11, 1)), 0);
    $M.108 := $store.i8($M.108, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 72)), $mul.ref(1, 24)), $mul.ref(12, 1)), 0);
    $M.108 := $store.i8($M.108, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 72)), $mul.ref(1, 24)), $mul.ref(13, 1)), $sub.i8(0, 1));
    $M.108 := $store.i8($M.108, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 72)), $mul.ref(1, 24)), $mul.ref(14, 1)), 1);
    $M.108 := $store.i8($M.108, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 72)), $mul.ref(1, 24)), $mul.ref(15, 1)), 1);
    $M.108 := $store.i64($M.108, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 72)), $mul.ref(1, 24)), $mul.ref(16, 1)), 0);
    $M.108 := $store.i16($M.108, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 72)), $mul.ref(2, 24)), $mul.ref(0, 1)), 0);
    $M.108 := $store.i16($M.108, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 72)), $mul.ref(2, 24)), $mul.ref(2, 1)), 0);
    $M.108 := $store.i16($M.108, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 72)), $mul.ref(2, 24)), $mul.ref(4, 1)), 0);
    $M.108 := $store.i16($M.108, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 72)), $mul.ref(2, 24)), $mul.ref(6, 1)), 0);
    $M.108 := $store.i16($M.108, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 72)), $mul.ref(2, 24)), $mul.ref(8, 1)), 0);
    $M.108 := $store.i8($M.108, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 72)), $mul.ref(2, 24)), $mul.ref(10, 1)), 0);
    $M.108 := $store.i8($M.108, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 72)), $mul.ref(2, 24)), $mul.ref(11, 1)), 0);
    $M.108 := $store.i8($M.108, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 72)), $mul.ref(2, 24)), $mul.ref(12, 1)), 0);
    $M.108 := $store.i8($M.108, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 72)), $mul.ref(2, 24)), $mul.ref(13, 1)), 0);
    $M.108 := $store.i8($M.108, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 72)), $mul.ref(2, 24)), $mul.ref(14, 1)), 0);
    $M.108 := $store.i8($M.108, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 72)), $mul.ref(2, 24)), $mul.ref(15, 1)), 0);
    $M.108 := $store.i64($M.108, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 72)), $mul.ref(2, 24)), $mul.ref(16, 1)), 0);
    $M.109 := $store.ref($M.109, poseidon_driver, .str.106);
    $M.109 := $store.ref($M.109, $add.ref($add.ref(poseidon_driver, $mul.ref(0, 288)), $mul.ref(8, 1)), poseidon_probe);
    $M.109 := $store.ref($M.109, $add.ref($add.ref(poseidon_driver, $mul.ref(0, 288)), $mul.ref(16, 1)), poseidon_disconnect);
    $M.109 := $store.ref($M.109, $add.ref($add.ref(poseidon_driver, $mul.ref(0, 288)), $mul.ref(24, 1)), $0.ref);
    $M.109 := $store.ref($M.109, $add.ref($add.ref(poseidon_driver, $mul.ref(0, 288)), $mul.ref(32, 1)), poseidon_suspend);
    $M.109 := $store.ref($M.109, $add.ref($add.ref(poseidon_driver, $mul.ref(0, 288)), $mul.ref(40, 1)), poseidon_resume);
    $M.109 := $store.ref($M.109, $add.ref($add.ref(poseidon_driver, $mul.ref(0, 288)), $mul.ref(48, 1)), $0.ref);
    $M.109 := $store.ref($M.109, $add.ref($add.ref(poseidon_driver, $mul.ref(0, 288)), $mul.ref(56, 1)), $0.ref);
    $M.109 := $store.ref($M.109, $add.ref($add.ref(poseidon_driver, $mul.ref(0, 288)), $mul.ref(64, 1)), $0.ref);
    $M.109 := $store.ref($M.109, $add.ref($add.ref(poseidon_driver, $mul.ref(0, 288)), $mul.ref(72, 1)), id_table);
    $M.109 := $store.i32($M.109, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_driver, $mul.ref(0, 288)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.109 := $store.i32($M.109, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_driver, $mul.ref(0, 288)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.109 := $store.i32($M.109, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_driver, $mul.ref(0, 288)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.109 := $store.ref($M.109, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_driver, $mul.ref(0, 288)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.109 := $store.ref($M.109, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_driver, $mul.ref(0, 288)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.109 := $store.ref($M.109, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_driver, $mul.ref(0, 288)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.109 := $store.ref($M.109, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_driver, $mul.ref(0, 288)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.109 := $store.ref($M.109, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_driver, $mul.ref(0, 288)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.109 := $store.i32($M.109, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_driver, $mul.ref(0, 288)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.109 := $store.i64($M.109, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_driver, $mul.ref(0, 288)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.109 := $store.ref($M.109, $add.ref($add.ref($add.ref($add.ref(poseidon_driver, $mul.ref(0, 288)), $mul.ref(80, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.109 := $store.ref($M.109, $add.ref($add.ref($add.ref($add.ref(poseidon_driver, $mul.ref(0, 288)), $mul.ref(80, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.109 := $store.ref($M.109, $add.ref($add.ref($add.ref($add.ref(poseidon_driver, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.109 := $store.ref($M.109, $add.ref($add.ref($add.ref($add.ref(poseidon_driver, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.109 := $store.ref($M.109, $add.ref($add.ref($add.ref($add.ref(poseidon_driver, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.109 := $store.ref($M.109, $add.ref($add.ref($add.ref($add.ref(poseidon_driver, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $0.ref);
    $M.109 := $store.i8($M.109, $add.ref($add.ref($add.ref($add.ref(poseidon_driver, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), 0);
    $M.109 := $store.ref($M.109, $add.ref($add.ref($add.ref($add.ref(poseidon_driver, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(40, 1)), $0.ref);
    $M.109 := $store.ref($M.109, $add.ref($add.ref($add.ref($add.ref(poseidon_driver, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(48, 1)), $0.ref);
    $M.109 := $store.ref($M.109, $add.ref($add.ref($add.ref($add.ref(poseidon_driver, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(56, 1)), $0.ref);
    $M.109 := $store.ref($M.109, $add.ref($add.ref($add.ref($add.ref(poseidon_driver, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(64, 1)), $0.ref);
    $M.109 := $store.ref($M.109, $add.ref($add.ref($add.ref($add.ref(poseidon_driver, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(72, 1)), $0.ref);
    $M.109 := $store.ref($M.109, $add.ref($add.ref($add.ref($add.ref(poseidon_driver, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(80, 1)), $0.ref);
    $M.109 := $store.ref($M.109, $add.ref($add.ref($add.ref($add.ref(poseidon_driver, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(88, 1)), $0.ref);
    $M.109 := $store.ref($M.109, $add.ref($add.ref($add.ref($add.ref(poseidon_driver, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(96, 1)), $0.ref);
    $M.109 := $store.i32($M.109, $add.ref($add.ref($add.ref(poseidon_driver, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(104, 1)), 0);
    $M.109 := $store.i8($M.109, $add.ref($add.ref(poseidon_driver, $mul.ref(0, 288)), $mul.ref(280, 1)), 2);
    $M.38 := .str.95;
    $M.0 := $store.ref($M.0, pd_device_list, pd_device_list);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_device_list, $mul.ref(0, 16)), $mul.ref(8, 1)), pd_device_list);
    $M.28 := $store.i32($M.28, preemphasis, 0);
    $M.28 := $store.i32($M.28, $add.ref($add.ref(preemphasis, $mul.ref(0, 12)), $mul.ref(1, 4)), 32);
    $M.28 := $store.i32($M.28, $add.ref($add.ref(preemphasis, $mul.ref(0, 12)), $mul.ref(2, 4)), 16);
    $M.0 := $store.ref($M.0, poseidon_fm_ioctl_ops, vidioc_querycap___0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(64, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(80, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(120, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(128, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(136, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(144, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(152, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(160, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(168, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(176, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(184, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(192, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(200, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(208, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(216, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(224, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(232, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(240, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(248, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(256, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(264, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(272, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(280, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(288, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(296, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(304, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(312, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(320, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(328, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(336, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(344, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(352, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(360, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(368, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(376, 1)), vidioc_g_input___0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(384, 1)), vidioc_s_input___0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(392, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(400, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(408, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(416, 1)), tlg_fm_vidioc_queryctrl);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(424, 1)), tlg_fm_vidioc_g_ctrl);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(432, 1)), tlg_fm_vidioc_s_ctrl);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(440, 1)), tlg_fm_vidioc_g_exts_ctrl);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(448, 1)), tlg_fm_vidioc_s_exts_ctrl);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(456, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(464, 1)), tlg_fm_vidioc_querymenu);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(472, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(480, 1)), vidioc_g_audio___0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(488, 1)), vidioc_s_audio___0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(496, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(504, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(512, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(520, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(528, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(536, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(544, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(552, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(560, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(568, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(576, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(584, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(592, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(600, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(608, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(616, 1)), tlg_fm_vidioc_g_tuner);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(624, 1)), vidioc_s_tuner___0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(632, 1)), fm_get_freq);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(640, 1)), fm_set_freq);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(648, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(656, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(664, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(672, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(680, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(688, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(696, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(704, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(712, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(720, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(728, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(736, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(744, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(752, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(760, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(768, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_ioctl_ops, $mul.ref(0, 784)), $mul.ref(776, 1)), $0.ref);
    $M.0 := $store.ref($M.0, poseidon_fm_fops, __this_module);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_fops, $mul.ref(0, 72)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_fops, $mul.ref(0, 72)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_fops, $mul.ref(0, 72)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_fops, $mul.ref(0, 72)), $mul.ref(32, 1)), video_ioctl2);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_fops, $mul.ref(0, 72)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_fops, $mul.ref(0, 72)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_fops, $mul.ref(0, 72)), $mul.ref(56, 1)), poseidon_fm_open);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_fops, $mul.ref(0, 72)), $mul.ref(64, 1)), poseidon_fm_close);
    $M.0 := $store.ref($M.0, poseidon_fm_template, poseidon_fm_fops);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(16, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(16, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(16, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(16, 1)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(16, 1)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(16, 1)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(16, 1)), $mul.ref(56, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(16, 1)), $mul.ref(60, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(80, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(120, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(120, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(120, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(120, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(120, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(120, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(264, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(272, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(280, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(96, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(192, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(52, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(64, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(64, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(64, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(64, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(64, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(64, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(64, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(64, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(64, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(64, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(64, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(64, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(64, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(64, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(64, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(80, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(80, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(80, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(328, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(336, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(336, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(336, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(336, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(336, 1)), $mul.ref(32, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(336, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(336, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(336, 1)), $mul.ref(32, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(336, 1)), $mul.ref(32, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(336, 1)), $mul.ref(32, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(416, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(416, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(416, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(416, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(416, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(416, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(416, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(416, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(416, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(416, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(416, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(416, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(504, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(508, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(512, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(513, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(516, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(520, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(524, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(528, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(536, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(544, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(552, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(560, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(856, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(864, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(872, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(880, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(888, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(888, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(904, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(912, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(912, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(912, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(936, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(944, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(944, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(944, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(944, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(944, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(944, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(944, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(944, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(944, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(944, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(1016, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(1016, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(1032, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(1032, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(1032, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(1032, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(1064, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(1072, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(1080, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1096, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1112, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1120, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(0, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(2, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(4, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(6, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(8, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(9, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(10, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(11, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(12, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(13, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1160, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1164, 1)), $sub.i32(0, 1));
    $M.0 := $store.i16($M.0, $add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1168, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1176, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1184, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1192, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1192, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1192, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1192, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1192, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1192, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1192, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1192, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1192, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1192, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1264, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1264, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1280, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1288, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1296, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1304, 1)), video_device_release);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1312, 1)), poseidon_fm_ioctl_ops);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_fm_template, $mul.ref(0, 1328)), $mul.ref(1320, 1)), $0.ref);
    $M.23 := 3;
    call {:si_unique_call 1802} {:cexpr "dvb_bandwidth_length"} boogie_si_record_i32(3);
    $M.24 := $store.i32($M.24, dvb_bandwidth, 8);
    $M.24 := $store.i32($M.24, $add.ref($add.ref($add.ref(dvb_bandwidth, $mul.ref(0, 24)), $mul.ref(0, 8)), $mul.ref(1, 4)), 0);
    $M.24 := $store.i32($M.24, $add.ref($add.ref($add.ref(dvb_bandwidth, $mul.ref(0, 24)), $mul.ref(1, 8)), $mul.ref(0, 4)), 7);
    $M.24 := $store.i32($M.24, $add.ref($add.ref($add.ref(dvb_bandwidth, $mul.ref(0, 24)), $mul.ref(1, 8)), $mul.ref(1, 4)), 1);
    $M.24 := $store.i32($M.24, $add.ref($add.ref($add.ref(dvb_bandwidth, $mul.ref(0, 24)), $mul.ref(2, 8)), $mul.ref(0, 4)), 6);
    $M.24 := $store.i32($M.24, $add.ref($add.ref($add.ref(dvb_bandwidth, $mul.ref(0, 24)), $mul.ref(2, 8)), $mul.ref(1, 4)), 2);
    $M.0 := $store.i8($M.0, poseidon_frontend_ops, 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(9, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(11, 1)), 66);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(12, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(13, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(33, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(34, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(35, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(37, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(38, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(39, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(41, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(42, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(43, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(45, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(46, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(47, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(49, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(50, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(51, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(53, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(54, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(55, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(57, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(58, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(59, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(60, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(61, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(62, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(63, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(64, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(65, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(66, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(67, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(68, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(69, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(70, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(71, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(72, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(73, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(74, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(75, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(76, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(77, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(78, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(79, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(80, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(81, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(82, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(83, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(84, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(85, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(86, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(87, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(88, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(89, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(90, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(91, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(92, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(93, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(94, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(95, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(96, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(97, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(98, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(99, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(100, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(101, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(102, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(103, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(104, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(105, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(106, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(107, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(108, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(109, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(110, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(111, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(112, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(113, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(114, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(115, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(116, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(117, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(118, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(119, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(120, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(121, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(122, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(123, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(124, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(125, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(126, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(127, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(128, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(132, 1)), 174000000);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(136, 1)), 862000000);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(140, 1)), 62500);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(144, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(148, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(152, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(156, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(160, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(0, 1)), $mul.ref(164, 1)), 1075523247);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(168, 1)), poseidon_fe_release);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(176, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(184, 1)), poseidon_fe_init);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(192, 1)), poseidon_fe_sleep);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(200, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(208, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(216, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(224, 1)), poseidon_set_fe);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(232, 1)), poseidon_fe_get_tune_settings);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(240, 1)), poseidon_get_fe);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(248, 1)), poseidon_read_status);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(256, 1)), poseidon_read_ber);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(264, 1)), poseidon_read_signal_strength);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(272, 1)), poseidon_read_snr);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(280, 1)), poseidon_read_unc_blocks);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(288, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(296, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(304, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(312, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(320, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(328, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(336, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(344, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(352, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(360, 1)), poseidon_ts_bus_ctrl);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(368, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(376, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(33, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(34, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(35, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(37, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(38, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(39, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(41, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(42, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(43, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(45, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(46, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(47, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(49, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(50, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(51, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(53, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(54, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(55, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(57, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(58, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(59, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(60, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(61, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(62, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(63, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(64, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(65, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(66, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(67, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(68, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(69, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(70, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(71, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(72, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(73, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(74, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(75, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(76, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(77, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(78, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(79, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(80, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(81, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(82, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(83, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(84, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(85, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(86, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(87, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(88, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(89, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(90, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(91, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(92, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(93, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(94, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(95, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(96, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(97, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(98, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(99, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(100, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(101, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(102, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(103, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(104, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(105, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(106, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(107, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(108, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(109, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(110, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(111, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(112, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(113, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(114, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(115, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(116, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(117, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(118, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(119, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(120, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(121, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(122, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(123, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(124, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(125, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(126, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(127, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(128, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(132, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(136, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(140, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(144, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(0, 1)), $mul.ref(148, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(152, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(160, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(168, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(176, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(184, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(192, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(200, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(208, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(216, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(224, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(232, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(240, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(248, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(256, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(384, 1)), $mul.ref(264, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(656, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(656, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(656, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(656, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(656, 1)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(656, 1)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(656, 1)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(656, 1)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(656, 1)), $mul.ref(64, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(656, 1)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(736, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(poseidon_frontend_ops, $mul.ref(0, 752)), $mul.ref(744, 1)), $0.ref);
    $M.113 := $store.i16($M.113, adapter_nr, $sub.i16(0, 1));
    $M.113 := $store.i16($M.113, $add.ref($add.ref(adapter_nr, $mul.ref(0, 16)), $mul.ref(1, 2)), $sub.i16(0, 1));
    $M.113 := $store.i16($M.113, $add.ref($add.ref(adapter_nr, $mul.ref(0, 16)), $mul.ref(2, 2)), $sub.i16(0, 1));
    $M.113 := $store.i16($M.113, $add.ref($add.ref(adapter_nr, $mul.ref(0, 16)), $mul.ref(3, 2)), $sub.i16(0, 1));
    $M.113 := $store.i16($M.113, $add.ref($add.ref(adapter_nr, $mul.ref(0, 16)), $mul.ref(4, 2)), $sub.i16(0, 1));
    $M.113 := $store.i16($M.113, $add.ref($add.ref(adapter_nr, $mul.ref(0, 16)), $mul.ref(5, 2)), $sub.i16(0, 1));
    $M.113 := $store.i16($M.113, $add.ref($add.ref(adapter_nr, $mul.ref(0, 16)), $mul.ref(6, 2)), $sub.i16(0, 1));
    $M.113 := $store.i16($M.113, $add.ref($add.ref(adapter_nr, $mul.ref(0, 16)), $mul.ref(7, 2)), $sub.i16(0, 1));
    $M.0 := $store.i32($M.0, snd_pd_hw_capture, 65795);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(snd_pd_hw_capture, $mul.ref(0, 80)), $mul.ref(8, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(snd_pd_hw_capture, $mul.ref(0, 80)), $mul.ref(16, 1)), 128);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(snd_pd_hw_capture, $mul.ref(0, 80)), $mul.ref(20, 1)), 48000);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(snd_pd_hw_capture, $mul.ref(0, 80)), $mul.ref(24, 1)), 48000);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(snd_pd_hw_capture, $mul.ref(0, 80)), $mul.ref(28, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(snd_pd_hw_capture, $mul.ref(0, 80)), $mul.ref(32, 1)), 2);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(snd_pd_hw_capture, $mul.ref(0, 80)), $mul.ref(40, 1)), 32768);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(snd_pd_hw_capture, $mul.ref(0, 80)), $mul.ref(48, 1)), 8192);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(snd_pd_hw_capture, $mul.ref(0, 80)), $mul.ref(56, 1)), 8192);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(snd_pd_hw_capture, $mul.ref(0, 80)), $mul.ref(64, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(snd_pd_hw_capture, $mul.ref(0, 80)), $mul.ref(68, 1)), 4);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(snd_pd_hw_capture, $mul.ref(0, 80)), $mul.ref(72, 1)), 0);
    $M.9 := $store.ref($M.9, pd_inputs, .str.57);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref(pd_inputs, $mul.ref(0, 64)), $mul.ref(0, 16)), $mul.ref(8, 1)), 1);
    $M.9 := $store.ref($M.9, $add.ref($add.ref($add.ref(pd_inputs, $mul.ref(0, 64)), $mul.ref(1, 16)), $mul.ref(0, 1)), .str.58);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref(pd_inputs, $mul.ref(0, 64)), $mul.ref(1, 16)), $mul.ref(8, 1)), 2);
    $M.9 := $store.ref($M.9, $add.ref($add.ref($add.ref(pd_inputs, $mul.ref(0, 64)), $mul.ref(2, 16)), $mul.ref(0, 1)), .str.59);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref(pd_inputs, $mul.ref(0, 64)), $mul.ref(2, 16)), $mul.ref(8, 1)), 4);
    $M.9 := $store.ref($M.9, $add.ref($add.ref($add.ref(pd_inputs, $mul.ref(0, 64)), $mul.ref(3, 16)), $mul.ref(0, 1)), .str.60);
    $M.10 := $store.i32($M.10, $add.ref($add.ref($add.ref(pd_inputs, $mul.ref(0, 64)), $mul.ref(3, 16)), $mul.ref(8, 1)), 8);
    $M.8 := $store.ref($M.8, poseidon_formats, .str.45);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(poseidon_formats, $mul.ref(0, 48)), $mul.ref(0, 24)), $mul.ref(8, 1)), 1448695129);
    $M.127 := $store.i32($M.127, $add.ref($add.ref($add.ref(poseidon_formats, $mul.ref(0, 48)), $mul.ref(0, 24)), $mul.ref(12, 1)), 16);
    $M.128 := $store.i32($M.128, $add.ref($add.ref($add.ref(poseidon_formats, $mul.ref(0, 48)), $mul.ref(0, 24)), $mul.ref(16, 1)), 0);
    $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref(poseidon_formats, $mul.ref(0, 48)), $mul.ref(1, 24)), $mul.ref(0, 1)), .str.46);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(poseidon_formats, $mul.ref(0, 48)), $mul.ref(1, 24)), $mul.ref(8, 1)), 1346520914);
    $M.127 := $store.i32($M.127, $add.ref($add.ref($add.ref(poseidon_formats, $mul.ref(0, 48)), $mul.ref(1, 24)), $mul.ref(12, 1)), 16);
    $M.128 := $store.i32($M.128, $add.ref($add.ref($add.ref(poseidon_formats, $mul.ref(0, 48)), $mul.ref(1, 24)), $mul.ref(16, 1)), 0);
    $M.21 := $store.i64($M.21, poseidon_tvnorms, 32);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(0, 24)), $mul.ref(8, 1)), $mul.ref(0, 1)), 80);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(0, 24)), $mul.ref(8, 1)), $mul.ref(1, 1)), 65);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(0, 24)), $mul.ref(8, 1)), $mul.ref(2, 1)), 76);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(0, 24)), $mul.ref(8, 1)), $mul.ref(3, 1)), 45);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(0, 24)), $mul.ref(8, 1)), $mul.ref(4, 1)), 68);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(0, 24)), $mul.ref(8, 1)), $mul.ref(5, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(0, 24)), $mul.ref(8, 1)), $mul.ref(6, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(0, 24)), $mul.ref(8, 1)), $mul.ref(7, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(0, 24)), $mul.ref(8, 1)), $mul.ref(8, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(0, 24)), $mul.ref(8, 1)), $mul.ref(9, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(0, 24)), $mul.ref(8, 1)), $mul.ref(10, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(0, 24)), $mul.ref(8, 1)), $mul.ref(11, 1)), 0);
    $M.21 := $store.i32($M.21, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(0, 24)), $mul.ref(20, 1)), 32);
    $M.21 := $store.i64($M.21, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(1, 24)), $mul.ref(0, 1)), 1);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(1, 24)), $mul.ref(8, 1)), $mul.ref(0, 1)), 80);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(1, 24)), $mul.ref(8, 1)), $mul.ref(1, 1)), 65);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(1, 24)), $mul.ref(8, 1)), $mul.ref(2, 1)), 76);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(1, 24)), $mul.ref(8, 1)), $mul.ref(3, 1)), 45);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(1, 24)), $mul.ref(8, 1)), $mul.ref(4, 1)), 66);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(1, 24)), $mul.ref(8, 1)), $mul.ref(5, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(1, 24)), $mul.ref(8, 1)), $mul.ref(6, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(1, 24)), $mul.ref(8, 1)), $mul.ref(7, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(1, 24)), $mul.ref(8, 1)), $mul.ref(8, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(1, 24)), $mul.ref(8, 1)), $mul.ref(9, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(1, 24)), $mul.ref(8, 1)), $mul.ref(10, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(1, 24)), $mul.ref(8, 1)), $mul.ref(11, 1)), 0);
    $M.21 := $store.i32($M.21, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(1, 24)), $mul.ref(20, 1)), 16);
    $M.21 := $store.i64($M.21, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(2, 24)), $mul.ref(0, 1)), 4);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(2, 24)), $mul.ref(8, 1)), $mul.ref(0, 1)), 80);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(2, 24)), $mul.ref(8, 1)), $mul.ref(1, 1)), 65);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(2, 24)), $mul.ref(8, 1)), $mul.ref(2, 1)), 76);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(2, 24)), $mul.ref(8, 1)), $mul.ref(3, 1)), 45);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(2, 24)), $mul.ref(8, 1)), $mul.ref(4, 1)), 71);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(2, 24)), $mul.ref(8, 1)), $mul.ref(5, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(2, 24)), $mul.ref(8, 1)), $mul.ref(6, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(2, 24)), $mul.ref(8, 1)), $mul.ref(7, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(2, 24)), $mul.ref(8, 1)), $mul.ref(8, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(2, 24)), $mul.ref(8, 1)), $mul.ref(9, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(2, 24)), $mul.ref(8, 1)), $mul.ref(10, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(2, 24)), $mul.ref(8, 1)), $mul.ref(11, 1)), 0);
    $M.21 := $store.i32($M.21, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(2, 24)), $mul.ref(20, 1)), 64);
    $M.21 := $store.i64($M.21, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(3, 24)), $mul.ref(0, 1)), 8);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(3, 24)), $mul.ref(8, 1)), $mul.ref(0, 1)), 80);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(3, 24)), $mul.ref(8, 1)), $mul.ref(1, 1)), 65);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(3, 24)), $mul.ref(8, 1)), $mul.ref(2, 1)), 76);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(3, 24)), $mul.ref(8, 1)), $mul.ref(3, 1)), 45);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(3, 24)), $mul.ref(8, 1)), $mul.ref(4, 1)), 72);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(3, 24)), $mul.ref(8, 1)), $mul.ref(5, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(3, 24)), $mul.ref(8, 1)), $mul.ref(6, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(3, 24)), $mul.ref(8, 1)), $mul.ref(7, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(3, 24)), $mul.ref(8, 1)), $mul.ref(8, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(3, 24)), $mul.ref(8, 1)), $mul.ref(9, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(3, 24)), $mul.ref(8, 1)), $mul.ref(10, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(3, 24)), $mul.ref(8, 1)), $mul.ref(11, 1)), 0);
    $M.21 := $store.i32($M.21, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(3, 24)), $mul.ref(20, 1)), 128);
    $M.21 := $store.i64($M.21, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(4, 24)), $mul.ref(0, 1)), 16);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(4, 24)), $mul.ref(8, 1)), $mul.ref(0, 1)), 80);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(4, 24)), $mul.ref(8, 1)), $mul.ref(1, 1)), 65);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(4, 24)), $mul.ref(8, 1)), $mul.ref(2, 1)), 76);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(4, 24)), $mul.ref(8, 1)), $mul.ref(3, 1)), 45);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(4, 24)), $mul.ref(8, 1)), $mul.ref(4, 1)), 73);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(4, 24)), $mul.ref(8, 1)), $mul.ref(5, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(4, 24)), $mul.ref(8, 1)), $mul.ref(6, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(4, 24)), $mul.ref(8, 1)), $mul.ref(7, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(4, 24)), $mul.ref(8, 1)), $mul.ref(8, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(4, 24)), $mul.ref(8, 1)), $mul.ref(9, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(4, 24)), $mul.ref(8, 1)), $mul.ref(10, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(4, 24)), $mul.ref(8, 1)), $mul.ref(11, 1)), 0);
    $M.21 := $store.i32($M.21, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(4, 24)), $mul.ref(20, 1)), 256);
    $M.21 := $store.i64($M.21, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(5, 24)), $mul.ref(0, 1)), 256);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(5, 24)), $mul.ref(8, 1)), $mul.ref(0, 1)), 80);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(5, 24)), $mul.ref(8, 1)), $mul.ref(1, 1)), 65);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(5, 24)), $mul.ref(8, 1)), $mul.ref(2, 1)), 76);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(5, 24)), $mul.ref(8, 1)), $mul.ref(3, 1)), 45);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(5, 24)), $mul.ref(8, 1)), $mul.ref(4, 1)), 77);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(5, 24)), $mul.ref(8, 1)), $mul.ref(5, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(5, 24)), $mul.ref(8, 1)), $mul.ref(6, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(5, 24)), $mul.ref(8, 1)), $mul.ref(7, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(5, 24)), $mul.ref(8, 1)), $mul.ref(8, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(5, 24)), $mul.ref(8, 1)), $mul.ref(9, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(5, 24)), $mul.ref(8, 1)), $mul.ref(10, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(5, 24)), $mul.ref(8, 1)), $mul.ref(11, 1)), 0);
    $M.21 := $store.i32($M.21, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(5, 24)), $mul.ref(20, 1)), 512);
    $M.21 := $store.i64($M.21, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(6, 24)), $mul.ref(0, 1)), 512);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(6, 24)), $mul.ref(8, 1)), $mul.ref(0, 1)), 80);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(6, 24)), $mul.ref(8, 1)), $mul.ref(1, 1)), 65);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(6, 24)), $mul.ref(8, 1)), $mul.ref(2, 1)), 76);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(6, 24)), $mul.ref(8, 1)), $mul.ref(3, 1)), 45);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(6, 24)), $mul.ref(8, 1)), $mul.ref(4, 1)), 78);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(6, 24)), $mul.ref(8, 1)), $mul.ref(5, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(6, 24)), $mul.ref(8, 1)), $mul.ref(6, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(6, 24)), $mul.ref(8, 1)), $mul.ref(7, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(6, 24)), $mul.ref(8, 1)), $mul.ref(8, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(6, 24)), $mul.ref(8, 1)), $mul.ref(9, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(6, 24)), $mul.ref(8, 1)), $mul.ref(10, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(6, 24)), $mul.ref(8, 1)), $mul.ref(11, 1)), 0);
    $M.21 := $store.i32($M.21, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(6, 24)), $mul.ref(20, 1)), 1048576);
    $M.21 := $store.i64($M.21, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(7, 24)), $mul.ref(0, 1)), 1024);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(7, 24)), $mul.ref(8, 1)), $mul.ref(0, 1)), 80);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(7, 24)), $mul.ref(8, 1)), $mul.ref(1, 1)), 65);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(7, 24)), $mul.ref(8, 1)), $mul.ref(2, 1)), 76);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(7, 24)), $mul.ref(8, 1)), $mul.ref(3, 1)), 45);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(7, 24)), $mul.ref(8, 1)), $mul.ref(4, 1)), 78);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(7, 24)), $mul.ref(8, 1)), $mul.ref(5, 1)), 99);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(7, 24)), $mul.ref(8, 1)), $mul.ref(6, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(7, 24)), $mul.ref(8, 1)), $mul.ref(7, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(7, 24)), $mul.ref(8, 1)), $mul.ref(8, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(7, 24)), $mul.ref(8, 1)), $mul.ref(9, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(7, 24)), $mul.ref(8, 1)), $mul.ref(10, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(7, 24)), $mul.ref(8, 1)), $mul.ref(11, 1)), 0);
    $M.21 := $store.i32($M.21, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(7, 24)), $mul.ref(20, 1)), 1048576);
    $M.21 := $store.i64($M.21, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(8, 24)), $mul.ref(0, 1)), 4096);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(8, 24)), $mul.ref(8, 1)), $mul.ref(0, 1)), 78);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(8, 24)), $mul.ref(8, 1)), $mul.ref(1, 1)), 84);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(8, 24)), $mul.ref(8, 1)), $mul.ref(2, 1)), 83);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(8, 24)), $mul.ref(8, 1)), $mul.ref(3, 1)), 67);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(8, 24)), $mul.ref(8, 1)), $mul.ref(4, 1)), 45);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(8, 24)), $mul.ref(8, 1)), $mul.ref(5, 1)), 77);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(8, 24)), $mul.ref(8, 1)), $mul.ref(6, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(8, 24)), $mul.ref(8, 1)), $mul.ref(7, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(8, 24)), $mul.ref(8, 1)), $mul.ref(8, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(8, 24)), $mul.ref(8, 1)), $mul.ref(9, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(8, 24)), $mul.ref(8, 1)), $mul.ref(10, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(8, 24)), $mul.ref(8, 1)), $mul.ref(11, 1)), 0);
    $M.21 := $store.i32($M.21, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(8, 24)), $mul.ref(20, 1)), 1);
    $M.21 := $store.i64($M.21, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(9, 24)), $mul.ref(0, 1)), 8192);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(9, 24)), $mul.ref(8, 1)), $mul.ref(0, 1)), 78);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(9, 24)), $mul.ref(8, 1)), $mul.ref(1, 1)), 84);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(9, 24)), $mul.ref(8, 1)), $mul.ref(2, 1)), 83);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(9, 24)), $mul.ref(8, 1)), $mul.ref(3, 1)), 67);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(9, 24)), $mul.ref(8, 1)), $mul.ref(4, 1)), 45);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(9, 24)), $mul.ref(8, 1)), $mul.ref(5, 1)), 74);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(9, 24)), $mul.ref(8, 1)), $mul.ref(6, 1)), 80);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(9, 24)), $mul.ref(8, 1)), $mul.ref(7, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(9, 24)), $mul.ref(8, 1)), $mul.ref(8, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(9, 24)), $mul.ref(8, 1)), $mul.ref(9, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(9, 24)), $mul.ref(8, 1)), $mul.ref(10, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(9, 24)), $mul.ref(8, 1)), $mul.ref(11, 1)), 0);
    $M.21 := $store.i32($M.21, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(9, 24)), $mul.ref(20, 1)), 2);
    $M.21 := $store.i64($M.21, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(10, 24)), $mul.ref(0, 1)), 65536);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(10, 24)), $mul.ref(8, 1)), $mul.ref(0, 1)), 83);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(10, 24)), $mul.ref(8, 1)), $mul.ref(1, 1)), 69);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(10, 24)), $mul.ref(8, 1)), $mul.ref(2, 1)), 67);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(10, 24)), $mul.ref(8, 1)), $mul.ref(3, 1)), 65);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(10, 24)), $mul.ref(8, 1)), $mul.ref(4, 1)), 77);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(10, 24)), $mul.ref(8, 1)), $mul.ref(5, 1)), 45);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(10, 24)), $mul.ref(8, 1)), $mul.ref(6, 1)), 66);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(10, 24)), $mul.ref(8, 1)), $mul.ref(7, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(10, 24)), $mul.ref(8, 1)), $mul.ref(8, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(10, 24)), $mul.ref(8, 1)), $mul.ref(9, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(10, 24)), $mul.ref(8, 1)), $mul.ref(10, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(10, 24)), $mul.ref(8, 1)), $mul.ref(11, 1)), 0);
    $M.21 := $store.i32($M.21, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(10, 24)), $mul.ref(20, 1)), 4096);
    $M.21 := $store.i64($M.21, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(11, 24)), $mul.ref(0, 1)), 131072);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(11, 24)), $mul.ref(8, 1)), $mul.ref(0, 1)), 83);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(11, 24)), $mul.ref(8, 1)), $mul.ref(1, 1)), 69);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(11, 24)), $mul.ref(8, 1)), $mul.ref(2, 1)), 67);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(11, 24)), $mul.ref(8, 1)), $mul.ref(3, 1)), 65);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(11, 24)), $mul.ref(8, 1)), $mul.ref(4, 1)), 77);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(11, 24)), $mul.ref(8, 1)), $mul.ref(5, 1)), 45);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(11, 24)), $mul.ref(8, 1)), $mul.ref(6, 1)), 68);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(11, 24)), $mul.ref(8, 1)), $mul.ref(7, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(11, 24)), $mul.ref(8, 1)), $mul.ref(8, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(11, 24)), $mul.ref(8, 1)), $mul.ref(9, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(11, 24)), $mul.ref(8, 1)), $mul.ref(10, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(11, 24)), $mul.ref(8, 1)), $mul.ref(11, 1)), 0);
    $M.21 := $store.i32($M.21, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(11, 24)), $mul.ref(20, 1)), 8192);
    $M.21 := $store.i64($M.21, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(12, 24)), $mul.ref(0, 1)), 262144);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(12, 24)), $mul.ref(8, 1)), $mul.ref(0, 1)), 83);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(12, 24)), $mul.ref(8, 1)), $mul.ref(1, 1)), 69);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(12, 24)), $mul.ref(8, 1)), $mul.ref(2, 1)), 67);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(12, 24)), $mul.ref(8, 1)), $mul.ref(3, 1)), 65);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(12, 24)), $mul.ref(8, 1)), $mul.ref(4, 1)), 77);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(12, 24)), $mul.ref(8, 1)), $mul.ref(5, 1)), 45);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(12, 24)), $mul.ref(8, 1)), $mul.ref(6, 1)), 71);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(12, 24)), $mul.ref(8, 1)), $mul.ref(7, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(12, 24)), $mul.ref(8, 1)), $mul.ref(8, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(12, 24)), $mul.ref(8, 1)), $mul.ref(9, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(12, 24)), $mul.ref(8, 1)), $mul.ref(10, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(12, 24)), $mul.ref(8, 1)), $mul.ref(11, 1)), 0);
    $M.21 := $store.i32($M.21, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(12, 24)), $mul.ref(20, 1)), 16384);
    $M.21 := $store.i64($M.21, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(13, 24)), $mul.ref(0, 1)), 524288);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(13, 24)), $mul.ref(8, 1)), $mul.ref(0, 1)), 83);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(13, 24)), $mul.ref(8, 1)), $mul.ref(1, 1)), 69);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(13, 24)), $mul.ref(8, 1)), $mul.ref(2, 1)), 67);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(13, 24)), $mul.ref(8, 1)), $mul.ref(3, 1)), 65);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(13, 24)), $mul.ref(8, 1)), $mul.ref(4, 1)), 77);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(13, 24)), $mul.ref(8, 1)), $mul.ref(5, 1)), 45);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(13, 24)), $mul.ref(8, 1)), $mul.ref(6, 1)), 72);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(13, 24)), $mul.ref(8, 1)), $mul.ref(7, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(13, 24)), $mul.ref(8, 1)), $mul.ref(8, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(13, 24)), $mul.ref(8, 1)), $mul.ref(9, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(13, 24)), $mul.ref(8, 1)), $mul.ref(10, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(13, 24)), $mul.ref(8, 1)), $mul.ref(11, 1)), 0);
    $M.21 := $store.i32($M.21, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(13, 24)), $mul.ref(20, 1)), 32768);
    $M.21 := $store.i64($M.21, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(14, 24)), $mul.ref(0, 1)), 1048576);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(14, 24)), $mul.ref(8, 1)), $mul.ref(0, 1)), 83);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(14, 24)), $mul.ref(8, 1)), $mul.ref(1, 1)), 69);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(14, 24)), $mul.ref(8, 1)), $mul.ref(2, 1)), 67);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(14, 24)), $mul.ref(8, 1)), $mul.ref(3, 1)), 65);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(14, 24)), $mul.ref(8, 1)), $mul.ref(4, 1)), 77);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(14, 24)), $mul.ref(8, 1)), $mul.ref(5, 1)), 45);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(14, 24)), $mul.ref(8, 1)), $mul.ref(6, 1)), 75);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(14, 24)), $mul.ref(8, 1)), $mul.ref(7, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(14, 24)), $mul.ref(8, 1)), $mul.ref(8, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(14, 24)), $mul.ref(8, 1)), $mul.ref(9, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(14, 24)), $mul.ref(8, 1)), $mul.ref(10, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(14, 24)), $mul.ref(8, 1)), $mul.ref(11, 1)), 0);
    $M.21 := $store.i32($M.21, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(14, 24)), $mul.ref(20, 1)), 65536);
    $M.21 := $store.i64($M.21, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(15, 24)), $mul.ref(0, 1)), 2097152);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(15, 24)), $mul.ref(8, 1)), $mul.ref(0, 1)), 83);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(15, 24)), $mul.ref(8, 1)), $mul.ref(1, 1)), 69);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(15, 24)), $mul.ref(8, 1)), $mul.ref(2, 1)), 67);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(15, 24)), $mul.ref(8, 1)), $mul.ref(3, 1)), 65);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(15, 24)), $mul.ref(8, 1)), $mul.ref(4, 1)), 77);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(15, 24)), $mul.ref(8, 1)), $mul.ref(5, 1)), 45);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(15, 24)), $mul.ref(8, 1)), $mul.ref(6, 1)), 75);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(15, 24)), $mul.ref(8, 1)), $mul.ref(7, 1)), 49);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(15, 24)), $mul.ref(8, 1)), $mul.ref(8, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(15, 24)), $mul.ref(8, 1)), $mul.ref(9, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(15, 24)), $mul.ref(8, 1)), $mul.ref(10, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(15, 24)), $mul.ref(8, 1)), $mul.ref(11, 1)), 0);
    $M.21 := $store.i32($M.21, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(15, 24)), $mul.ref(20, 1)), 131072);
    $M.21 := $store.i64($M.21, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(16, 24)), $mul.ref(0, 1)), 4194304);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(16, 24)), $mul.ref(8, 1)), $mul.ref(0, 1)), 83);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(16, 24)), $mul.ref(8, 1)), $mul.ref(1, 1)), 69);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(16, 24)), $mul.ref(8, 1)), $mul.ref(2, 1)), 67);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(16, 24)), $mul.ref(8, 1)), $mul.ref(3, 1)), 65);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(16, 24)), $mul.ref(8, 1)), $mul.ref(4, 1)), 77);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(16, 24)), $mul.ref(8, 1)), $mul.ref(5, 1)), 45);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(16, 24)), $mul.ref(8, 1)), $mul.ref(6, 1)), 76);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(16, 24)), $mul.ref(8, 1)), $mul.ref(7, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(16, 24)), $mul.ref(8, 1)), $mul.ref(8, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(16, 24)), $mul.ref(8, 1)), $mul.ref(9, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(16, 24)), $mul.ref(8, 1)), $mul.ref(10, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(16, 24)), $mul.ref(8, 1)), $mul.ref(11, 1)), 0);
    $M.21 := $store.i32($M.21, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(16, 24)), $mul.ref(20, 1)), 262144);
    $M.21 := $store.i64($M.21, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(17, 24)), $mul.ref(0, 1)), 8388608);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(17, 24)), $mul.ref(8, 1)), $mul.ref(0, 1)), 83);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(17, 24)), $mul.ref(8, 1)), $mul.ref(1, 1)), 69);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(17, 24)), $mul.ref(8, 1)), $mul.ref(2, 1)), 67);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(17, 24)), $mul.ref(8, 1)), $mul.ref(3, 1)), 65);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(17, 24)), $mul.ref(8, 1)), $mul.ref(4, 1)), 77);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(17, 24)), $mul.ref(8, 1)), $mul.ref(5, 1)), 45);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(17, 24)), $mul.ref(8, 1)), $mul.ref(6, 1)), 76);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(17, 24)), $mul.ref(8, 1)), $mul.ref(7, 1)), 67);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(17, 24)), $mul.ref(8, 1)), $mul.ref(8, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(17, 24)), $mul.ref(8, 1)), $mul.ref(9, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(17, 24)), $mul.ref(8, 1)), $mul.ref(10, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(17, 24)), $mul.ref(8, 1)), $mul.ref(11, 1)), 0);
    $M.21 := $store.i32($M.21, $add.ref($add.ref($add.ref(poseidon_tvnorms, $mul.ref(0, 432)), $mul.ref(17, 24)), $mul.ref(20, 1)), 524288);
    $M.22 := $store.i32($M.22, pd_audio_modes, 1);
    $M.14 := $store.i32($M.14, $add.ref($add.ref($add.ref(pd_audio_modes, $mul.ref(0, 60)), $mul.ref(0, 12)), $mul.ref(4, 1)), 1);
    $M.15 := $store.i32($M.15, $add.ref($add.ref($add.ref(pd_audio_modes, $mul.ref(0, 60)), $mul.ref(0, 12)), $mul.ref(8, 1)), 0);
    $M.22 := $store.i32($M.22, $add.ref($add.ref($add.ref(pd_audio_modes, $mul.ref(0, 60)), $mul.ref(1, 12)), $mul.ref(0, 1)), 2);
    $M.14 := $store.i32($M.14, $add.ref($add.ref($add.ref(pd_audio_modes, $mul.ref(0, 60)), $mul.ref(1, 12)), $mul.ref(4, 1)), 2);
    $M.15 := $store.i32($M.15, $add.ref($add.ref($add.ref(pd_audio_modes, $mul.ref(0, 60)), $mul.ref(1, 12)), $mul.ref(8, 1)), 1);
    $M.22 := $store.i32($M.22, $add.ref($add.ref($add.ref(pd_audio_modes, $mul.ref(0, 60)), $mul.ref(2, 12)), $mul.ref(0, 1)), 16);
    $M.14 := $store.i32($M.14, $add.ref($add.ref($add.ref(pd_audio_modes, $mul.ref(0, 60)), $mul.ref(2, 12)), $mul.ref(4, 1)), 8);
    $M.15 := $store.i32($M.15, $add.ref($add.ref($add.ref(pd_audio_modes, $mul.ref(0, 60)), $mul.ref(2, 12)), $mul.ref(8, 1)), 3);
    $M.22 := $store.i32($M.22, $add.ref($add.ref($add.ref(pd_audio_modes, $mul.ref(0, 60)), $mul.ref(3, 12)), $mul.ref(0, 1)), 32);
    $M.14 := $store.i32($M.14, $add.ref($add.ref($add.ref(pd_audio_modes, $mul.ref(0, 60)), $mul.ref(3, 12)), $mul.ref(4, 1)), 4);
    $M.15 := $store.i32($M.15, $add.ref($add.ref($add.ref(pd_audio_modes, $mul.ref(0, 60)), $mul.ref(3, 12)), $mul.ref(8, 1)), 2);
    $M.22 := $store.i32($M.22, $add.ref($add.ref($add.ref(pd_audio_modes, $mul.ref(0, 60)), $mul.ref(4, 12)), $mul.ref(0, 1)), 64);
    $M.14 := $store.i32($M.14, $add.ref($add.ref($add.ref(pd_audio_modes, $mul.ref(0, 60)), $mul.ref(4, 12)), $mul.ref(4, 1)), 8);
    $M.15 := $store.i32($M.15, $add.ref($add.ref($add.ref(pd_audio_modes, $mul.ref(0, 60)), $mul.ref(4, 12)), $mul.ref(8, 1)), 4);
    $M.0 := $store.i32($M.0, controls, 9963776);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(4, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(1, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(2, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(3, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(4, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(5, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(6, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(9, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(44, 1)), 10000);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(48, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(52, 1)), 100);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(60, 1)), $mul.ref(0, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(60, 1)), $mul.ref(1, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(0, 72)), $mul.ref(68, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(1, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), 9963777);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(1, 72)), $mul.ref(0, 1)), $mul.ref(4, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(1, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(1, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(1, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(2, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(1, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(3, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(1, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(1, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(5, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(1, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(6, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(1, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(1, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(1, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(1, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(1, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(1, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(1, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(1, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(1, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(1, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(1, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(1, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(1, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(1, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(1, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(1, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(1, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(1, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(1, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(1, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(1, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(1, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(1, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(1, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(1, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(1, 72)), $mul.ref(0, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(1, 72)), $mul.ref(0, 1)), $mul.ref(44, 1)), 10000);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(1, 72)), $mul.ref(0, 1)), $mul.ref(48, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(1, 72)), $mul.ref(0, 1)), $mul.ref(52, 1)), 100);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(1, 72)), $mul.ref(0, 1)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(1, 72)), $mul.ref(0, 1)), $mul.ref(60, 1)), $mul.ref(0, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(1, 72)), $mul.ref(0, 1)), $mul.ref(60, 1)), $mul.ref(1, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(1, 72)), $mul.ref(68, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(2, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), 9963779);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(2, 72)), $mul.ref(0, 1)), $mul.ref(4, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(2, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(2, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(1, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(2, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(2, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(2, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(2, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(2, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(2, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(2, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(2, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(2, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(2, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(2, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(2, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(2, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(2, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(2, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(2, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(2, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(2, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(2, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(2, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(2, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(2, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(2, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(2, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(2, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(2, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(2, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(2, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(2, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(2, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(2, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(2, 72)), $mul.ref(0, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(2, 72)), $mul.ref(0, 1)), $mul.ref(44, 1)), 10000);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(2, 72)), $mul.ref(0, 1)), $mul.ref(48, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(2, 72)), $mul.ref(0, 1)), $mul.ref(52, 1)), 100);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(2, 72)), $mul.ref(0, 1)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(2, 72)), $mul.ref(0, 1)), $mul.ref(60, 1)), $mul.ref(0, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(2, 72)), $mul.ref(0, 1)), $mul.ref(60, 1)), $mul.ref(1, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(2, 72)), $mul.ref(68, 1)), 3);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(3, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), 9963778);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(3, 72)), $mul.ref(0, 1)), $mul.ref(4, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(3, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(3, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(3, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(3, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(3, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(3, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(3, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(5, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(3, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(6, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(3, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(7, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(3, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(3, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(9, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(3, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(3, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(3, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(3, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(3, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(3, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(3, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(3, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(3, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(3, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(3, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(3, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(3, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(3, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(3, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(3, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(3, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(3, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(3, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(3, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(3, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(3, 72)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(3, 72)), $mul.ref(0, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(3, 72)), $mul.ref(0, 1)), $mul.ref(44, 1)), 10000);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(3, 72)), $mul.ref(0, 1)), $mul.ref(48, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(3, 72)), $mul.ref(0, 1)), $mul.ref(52, 1)), 100);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(3, 72)), $mul.ref(0, 1)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(3, 72)), $mul.ref(0, 1)), $mul.ref(60, 1)), $mul.ref(0, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(3, 72)), $mul.ref(0, 1)), $mul.ref(60, 1)), $mul.ref(1, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(controls, $mul.ref(0, 288)), $mul.ref(3, 72)), $mul.ref(68, 1)), 4);
    $M.133 := $store.i64($M.133, video_to_audio_map, 4325425);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(video_to_audio_map, $mul.ref(0, 48)), $mul.ref(0, 16)), $mul.ref(8, 1)), 2);
    $M.133 := $store.i64($M.133, $add.ref($add.ref($add.ref(video_to_audio_map, $mul.ref(0, 48)), $mul.ref(1, 16)), $mul.ref(0, 1)), 4864);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(video_to_audio_map, $mul.ref(0, 48)), $mul.ref(1, 16)), $mul.ref(8, 1)), 8);
    $M.133 := $store.i64($M.133, $add.ref($add.ref($add.ref(video_to_audio_map, $mul.ref(0, 48)), $mul.ref(2, 16)), $mul.ref(0, 1)), 8192);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(video_to_audio_map, $mul.ref(0, 48)), $mul.ref(2, 16)), $mul.ref(8, 1)), 4);
    $M.1 := 0;
    call {:si_unique_call 1803} {:cexpr "usb_transfer_mode"} boogie_si_record_i32(0);
    $M.0 := $store.ref($M.0, pd_video_ioctl_ops, vidioc_querycap);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(24, 1)), vidioc_enum_fmt);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(56, 1)), vidioc_g_fmt);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(64, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(80, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(88, 1)), vidioc_g_fmt_vbi);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(120, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(128, 1)), vidioc_s_fmt);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(136, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(144, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(152, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(160, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(168, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(176, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(184, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(192, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(200, 1)), vidioc_try_fmt);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(208, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(216, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(224, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(232, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(240, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(248, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(256, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(264, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(272, 1)), vidioc_reqbufs);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(280, 1)), vidioc_querybuf);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(288, 1)), vidioc_qbuf);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(296, 1)), vidioc_dqbuf);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(304, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(312, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(320, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(328, 1)), vidioc_streamon);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(336, 1)), vidioc_streamoff);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(344, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(352, 1)), vidioc_s_std);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(360, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(368, 1)), vidioc_enum_input);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(376, 1)), vidioc_g_input);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(384, 1)), vidioc_s_input);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(392, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(400, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(408, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(416, 1)), vidioc_queryctrl);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(424, 1)), vidioc_g_ctrl);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(432, 1)), vidioc_s_ctrl);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(440, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(448, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(456, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(464, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(472, 1)), vidioc_enumaudio);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(480, 1)), vidioc_g_audio);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(488, 1)), vidioc_s_audio);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(496, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(504, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(512, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(520, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(528, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(536, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(544, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(552, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(560, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(568, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(576, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(584, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(592, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(600, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(608, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(616, 1)), vidioc_g_tuner);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(624, 1)), vidioc_s_tuner);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(632, 1)), vidioc_g_frequency);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(640, 1)), vidioc_s_frequency);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(648, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(656, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(664, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(672, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(680, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(688, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(696, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(704, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(712, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(720, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(728, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(736, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(744, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(752, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(760, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(768, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_ioctl_ops, $mul.ref(0, 784)), $mul.ref(776, 1)), $0.ref);
    $M.0 := $store.ref($M.0, pd_video_fops, __this_module);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_fops, $mul.ref(0, 72)), $mul.ref(8, 1)), pd_video_read);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_fops, $mul.ref(0, 72)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_fops, $mul.ref(0, 72)), $mul.ref(24, 1)), pd_video_poll);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_fops, $mul.ref(0, 72)), $mul.ref(32, 1)), video_ioctl2);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_fops, $mul.ref(0, 72)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_fops, $mul.ref(0, 72)), $mul.ref(48, 1)), pd_video_mmap);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_fops, $mul.ref(0, 72)), $mul.ref(56, 1)), pd_video_open);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_fops, $mul.ref(0, 72)), $mul.ref(64, 1)), pd_video_release);
    $M.0 := $store.ref($M.0, pd_video_template, pd_video_fops);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(16, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(16, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(16, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(16, 1)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(16, 1)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(16, 1)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(16, 1)), $mul.ref(56, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(16, 1)), $mul.ref(60, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(80, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(120, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(120, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(120, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(120, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(120, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(96, 1)), $mul.ref(120, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(264, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(272, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(280, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(96, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(192, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(52, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(64, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(64, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(64, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(64, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(64, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(64, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(64, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(64, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(64, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(64, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(64, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(64, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(64, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(64, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(64, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(80, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(80, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $mul.ref(80, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(328, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(336, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(336, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(336, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(336, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(336, 1)), $mul.ref(32, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(336, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(336, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(336, 1)), $mul.ref(32, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(336, 1)), $mul.ref(32, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(336, 1)), $mul.ref(32, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(416, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(416, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(416, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(416, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(416, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(416, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(416, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(416, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(416, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(416, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(416, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(416, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(504, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(508, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(512, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(513, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(516, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(520, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(524, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(528, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(536, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(544, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(552, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(288, 1)), $mul.ref(560, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(856, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(864, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(872, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(880, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(888, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(888, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(904, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(912, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(912, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(912, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(936, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(944, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(944, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(944, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(944, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(944, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(944, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(944, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(944, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(944, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(944, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(1016, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(1016, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(1032, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(1032, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(1032, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(1032, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(1064, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(1072, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(8, 1)), $mul.ref(1080, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1096, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1112, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1120, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(0, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(2, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(4, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(6, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(8, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(9, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(10, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(11, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(13, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1128, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1160, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1164, 1)), $sub.i32(0, 1));
    $M.0 := $store.i16($M.0, $add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1168, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1176, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1184, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1192, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1192, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1192, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1192, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1192, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1192, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1192, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1192, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1192, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1192, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1264, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1264, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1280, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1288, 1)), 16777215);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1296, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1304, 1)), video_device_release);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1312, 1)), pd_video_ioctl_ops);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pd_video_template, $mul.ref(0, 1328)), $mul.ref(1320, 1)), $0.ref);
    $M.94 := 0;
    call {:si_unique_call 1804} {:cexpr "ldv_mutex_vb_lock_of_videobuf_queue"} boogie_si_record_i32(0);
    $M.93 := 0;
    call {:si_unique_call 1805} {:cexpr "ldv_mutex_power_lock_of_snd_card"} boogie_si_record_i32(0);
    $M.92 := 0;
    call {:si_unique_call 1806} {:cexpr "ldv_mutex_pm_mutex"} boogie_si_record_i32(0);
    $M.31 := 0;
    call {:si_unique_call 1807} {:cexpr "ldv_mutex_mutex_of_device"} boogie_si_record_i32(0);
    $M.3 := 0;
    call {:si_unique_call 1808} {:cexpr "ldv_mutex_lock_of_poseidon"} boogie_si_record_i32(0);
    $M.134 := $store.i8($M.134, .str.24, 86);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(.str.24, $mul.ref(0, 5)), $mul.ref(1, 1)), 70);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(.str.24, $mul.ref(0, 5)), $mul.ref(2, 1)), 72);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(.str.24, $mul.ref(0, 5)), $mul.ref(3, 1)), 83);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(.str.24, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.21 := $store.i8($M.21, .str.41, 115);
    $M.21 := $store.i8($M.21, $add.ref($add.ref(.str.41, $mul.ref(0, 8)), $mul.ref(1, 1)), 101);
    $M.21 := $store.i8($M.21, $add.ref($add.ref(.str.41, $mul.ref(0, 8)), $mul.ref(2, 1)), 116);
    $M.21 := $store.i8($M.21, $add.ref($add.ref(.str.41, $mul.ref(0, 8)), $mul.ref(3, 1)), 95);
    $M.21 := $store.i8($M.21, $add.ref($add.ref(.str.41, $mul.ref(0, 8)), $mul.ref(4, 1)), 115);
    $M.21 := $store.i8($M.21, $add.ref($add.ref(.str.41, $mul.ref(0, 8)), $mul.ref(5, 1)), 116);
    $M.21 := $store.i8($M.21, $add.ref($add.ref(.str.41, $mul.ref(0, 8)), $mul.ref(6, 1)), 100);
    $M.21 := $store.i8($M.21, $add.ref($add.ref(.str.41, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.38, 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 17)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 17)), $mul.ref(2, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 17)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 17)), $mul.ref(4, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 17)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 17)), $mul.ref(6, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 17)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 17)), $mul.ref(8, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 17)), $mul.ref(9, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 17)), $mul.ref(10, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 17)), $mul.ref(11, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 17)), $mul.ref(12, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 17)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 17)), $mul.ref(14, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 17)), $mul.ref(15, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, .str.50, 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 13)), $mul.ref(1, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 13)), $mul.ref(2, 1)), 66);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 13)), $mul.ref(3, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 13)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 13)), $mul.ref(5, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 13)), $mul.ref(6, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 13)), $mul.ref(7, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 13)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 13)), $mul.ref(9, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 13)), $mul.ref(10, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 13)), $mul.ref(11, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, .str.52, 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 11)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 11)), $mul.ref(2, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 11)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 11)), $mul.ref(4, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 11)), $mul.ref(5, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 11)), $mul.ref(6, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 11)), $mul.ref(7, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 11)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 11)), $mul.ref(9, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, .str.53, 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 18)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 18)), $mul.ref(2, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 18)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 18)), $mul.ref(4, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 18)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 18)), $mul.ref(6, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 18)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 18)), $mul.ref(8, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 18)), $mul.ref(9, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 18)), $mul.ref(10, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 18)), $mul.ref(11, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 18)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 18)), $mul.ref(13, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 18)), $mul.ref(14, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 18)), $mul.ref(15, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 18)), $mul.ref(16, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.135 := $store.i8($M.135, .str.54, 117);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(.str.54, $mul.ref(0, 10)), $mul.ref(1, 1)), 115);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(.str.54, $mul.ref(0, 10)), $mul.ref(2, 1)), 98);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(.str.54, $mul.ref(0, 10)), $mul.ref(3, 1)), 45);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(.str.54, $mul.ref(0, 10)), $mul.ref(4, 1)), 37);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(.str.54, $mul.ref(0, 10)), $mul.ref(5, 1)), 115);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(.str.54, $mul.ref(0, 10)), $mul.ref(6, 1)), 45);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(.str.54, $mul.ref(0, 10)), $mul.ref(7, 1)), 37);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(.str.54, $mul.ref(0, 10)), $mul.ref(8, 1)), 115);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(.str.54, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, .str.45, 89);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 8)), $mul.ref(1, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 8)), $mul.ref(2, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 8)), $mul.ref(3, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 8)), $mul.ref(4, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 8)), $mul.ref(5, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 8)), $mul.ref(6, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.46, 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 7)), $mul.ref(1, 1)), 71);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 7)), $mul.ref(2, 1)), 66);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 7)), $mul.ref(3, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 7)), $mul.ref(4, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 7)), $mul.ref(5, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, .str.57, 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 11)), $mul.ref(1, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 11)), $mul.ref(2, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 11)), $mul.ref(3, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 11)), $mul.ref(4, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 11)), $mul.ref(5, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 11)), $mul.ref(6, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 11)), $mul.ref(7, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 11)), $mul.ref(8, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 11)), $mul.ref(9, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, .str.58, 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 9)), $mul.ref(1, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 9)), $mul.ref(2, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 9)), $mul.ref(3, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 9)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 9)), $mul.ref(5, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 9)), $mul.ref(6, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 9)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, .str.59, 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 10)), $mul.ref(1, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 10)), $mul.ref(2, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 10)), $mul.ref(3, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 10)), $mul.ref(4, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 10)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 10)), $mul.ref(6, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 10)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 10)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, .str.60, 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 13)), $mul.ref(1, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 13)), $mul.ref(2, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 13)), $mul.ref(3, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 13)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 13)), $mul.ref(5, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 13)), $mul.ref(6, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 13)), $mul.ref(7, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 13)), $mul.ref(8, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 13)), $mul.ref(9, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 13)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 13)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.136 := $store.i8($M.136, .str.73, 68);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(.str.73, $mul.ref(0, 5)), $mul.ref(1, 1)), 86);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(.str.73, $mul.ref(0, 5)), $mul.ref(2, 1)), 72);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(.str.73, $mul.ref(0, 5)), $mul.ref(3, 1)), 83);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(.str.73, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, .str.82, 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 6)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 6)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 6)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 6)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, .str.83, 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.83, $mul.ref(0, 11)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.83, $mul.ref(0, 11)), $mul.ref(2, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.83, $mul.ref(0, 11)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.83, $mul.ref(0, 11)), $mul.ref(4, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.83, $mul.ref(0, 11)), $mul.ref(5, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.83, $mul.ref(0, 11)), $mul.ref(6, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.83, $mul.ref(0, 11)), $mul.ref(7, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.83, $mul.ref(0, 11)), $mul.ref(8, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.83, $mul.ref(0, 11)), $mul.ref(9, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.83, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.137 := $store.i8($M.137, .str.90, 37);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(.str.90, $mul.ref(0, 6)), $mul.ref(1, 1)), 115);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(.str.90, $mul.ref(0, 6)), $mul.ref(2, 1)), 32);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(.str.90, $mul.ref(0, 6)), $mul.ref(3, 1)), 37);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(.str.90, $mul.ref(0, 6)), $mul.ref(4, 1)), 115);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(.str.90, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.36 := $store.i8($M.36, .str.9, 112);
    $M.36 := $store.i8($M.36, $add.ref($add.ref(.str.9, $mul.ref(0, 23)), $mul.ref(1, 1)), 111);
    $M.36 := $store.i8($M.36, $add.ref($add.ref(.str.9, $mul.ref(0, 23)), $mul.ref(2, 1)), 115);
    $M.36 := $store.i8($M.36, $add.ref($add.ref(.str.9, $mul.ref(0, 23)), $mul.ref(3, 1)), 101);
    $M.36 := $store.i8($M.36, $add.ref($add.ref(.str.9, $mul.ref(0, 23)), $mul.ref(4, 1)), 105);
    $M.36 := $store.i8($M.36, $add.ref($add.ref(.str.9, $mul.ref(0, 23)), $mul.ref(5, 1)), 100);
    $M.36 := $store.i8($M.36, $add.ref($add.ref(.str.9, $mul.ref(0, 23)), $mul.ref(6, 1)), 111);
    $M.36 := $store.i8($M.36, $add.ref($add.ref(.str.9, $mul.ref(0, 23)), $mul.ref(7, 1)), 110);
    $M.36 := $store.i8($M.36, $add.ref($add.ref(.str.9, $mul.ref(0, 23)), $mul.ref(8, 1)), 32);
    $M.36 := $store.i8($M.36, $add.ref($add.ref(.str.9, $mul.ref(0, 23)), $mul.ref(9, 1)), 97);
    $M.36 := $store.i8($M.36, $add.ref($add.ref(.str.9, $mul.ref(0, 23)), $mul.ref(10, 1)), 117);
    $M.36 := $store.i8($M.36, $add.ref($add.ref(.str.9, $mul.ref(0, 23)), $mul.ref(11, 1)), 100);
    $M.36 := $store.i8($M.36, $add.ref($add.ref(.str.9, $mul.ref(0, 23)), $mul.ref(12, 1)), 105);
    $M.36 := $store.i8($M.36, $add.ref($add.ref(.str.9, $mul.ref(0, 23)), $mul.ref(13, 1)), 111);
    $M.36 := $store.i8($M.36, $add.ref($add.ref(.str.9, $mul.ref(0, 23)), $mul.ref(14, 1)), 32);
    $M.36 := $store.i8($M.36, $add.ref($add.ref(.str.9, $mul.ref(0, 23)), $mul.ref(15, 1)), 99);
    $M.36 := $store.i8($M.36, $add.ref($add.ref(.str.9, $mul.ref(0, 23)), $mul.ref(16, 1)), 97);
    $M.36 := $store.i8($M.36, $add.ref($add.ref(.str.9, $mul.ref(0, 23)), $mul.ref(17, 1)), 112);
    $M.36 := $store.i8($M.36, $add.ref($add.ref(.str.9, $mul.ref(0, 23)), $mul.ref(18, 1)), 116);
    $M.36 := $store.i8($M.36, $add.ref($add.ref(.str.9, $mul.ref(0, 23)), $mul.ref(19, 1)), 117);
    $M.36 := $store.i8($M.36, $add.ref($add.ref(.str.9, $mul.ref(0, 23)), $mul.ref(20, 1)), 114);
    $M.36 := $store.i8($M.36, $add.ref($add.ref(.str.9, $mul.ref(0, 23)), $mul.ref(21, 1)), 101);
    $M.36 := $store.i8($M.36, $add.ref($add.ref(.str.9, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, .str.10, 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 12)), $mul.ref(1, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 12)), $mul.ref(2, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 12)), $mul.ref(3, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 12)), $mul.ref(4, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 12)), $mul.ref(5, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 12)), $mul.ref(6, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 12)), $mul.ref(7, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 12)), $mul.ref(8, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 12)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 12)), $mul.ref(10, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, .str.11, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 15)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 15)), $mul.ref(2, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 15)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 15)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 15)), $mul.ref(5, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 15)), $mul.ref(6, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 15)), $mul.ref(7, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 15)), $mul.ref(8, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 15)), $mul.ref(9, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 15)), $mul.ref(10, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 15)), $mul.ref(11, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 15)), $mul.ref(12, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 15)), $mul.ref(13, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, .str.12, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 20)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 20)), $mul.ref(2, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 20)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 20)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 20)), $mul.ref(5, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 20)), $mul.ref(6, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 20)), $mul.ref(7, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 20)), $mul.ref(8, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 20)), $mul.ref(9, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 20)), $mul.ref(10, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 20)), $mul.ref(11, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 20)), $mul.ref(12, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 20)), $mul.ref(13, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 20)), $mul.ref(14, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 20)), $mul.ref(15, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 20)), $mul.ref(16, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 20)), $mul.ref(17, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 20)), $mul.ref(18, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    call {:si_unique_call 1809} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 647627);

procedure devirtbounce(funcPtr: ref, arg: ref, arg1: i64, arg2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: ref, arg1: i64, arg2: ref) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 648659);

procedure devirtbounce.1(funcPtr: ref, arg: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 649691);

procedure devirtbounce.2(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation devirtbounce.2(funcPtr: ref, arg: ref, arg1: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $i6: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i6 := $eq.ref(pd_buf_release, $p0);
    assume {:branchcond $i6} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i6 == 1);
    $i5 := $eq.ref(pd_buf_queue, $p0);
    assume {:branchcond $i5} true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i5 == 1);
    assume false;
    return;

  $bb2:
    assume $i5 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1810} pd_buf_queue($p1, $p2);
    return;

  $bb3:
    assume $i6 == 1;
    $p3 := $bitcast.ref.ref(arg);
    $p4 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1811} pd_buf_release($p3, $p4);
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 650723);

procedure devirtbounce.3(funcPtr: ref, arg: ref, arg1: ref, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.3(funcPtr: ref, arg: ref, arg1: ref, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 651755);

procedure devirtbounce.4(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.25, $M.27, $M.3, $M.4, $M.30, $CurrAddr, assertsPassed, $M.31;



implementation devirtbounce.4(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;
  var $i50: i1;
  var $i51: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i51 := $eq.ref(pd_stop_feed, $p0);
    assume true;
    goto $bb20, $bb39;

  $bb39:
    assume !($i51 == 1);
    $i50 := $eq.ref(pd_start_feed, $p0);
    assume {:branchcond $i50} true;
    goto $bb19, $bb38;

  $bb38:
    assume !($i50 == 1);
    $i49 := $eq.ref(poseidon_resume, $p0);
    assume true;
    goto $bb18, $bb37;

  $bb37:
    assume !($i49 == 1);
    $i48 := $eq.ref(pm_fm_resume, $p0);
    assume true;
    goto $bb17, $bb36;

  $bb36:
    assume !($i48 == 1);
    $i47 := $eq.ref(pm_fm_suspend, $p0);
    assume true;
    goto $bb16, $bb35;

  $bb35:
    assume !($i47 == 1);
    $i46 := $eq.ref(poseidon_fm_close, $p0);
    assume true;
    goto $bb15, $bb34;

  $bb34:
    assume !($i46 == 1);
    $i45 := $eq.ref(poseidon_fm_open, $p0);
    assume true;
    goto $bb14, $bb33;

  $bb33:
    assume !($i45 == 1);
    $i44 := $eq.ref(pm_dvb_resume, $p0);
    assume true;
    goto $bb13, $bb32;

  $bb32:
    assume !($i44 == 1);
    $i43 := $eq.ref(pm_dvb_suspend, $p0);
    assume true;
    goto $bb12, $bb31;

  $bb31:
    assume !($i43 == 1);
    $i42 := $eq.ref(poseidon_fe_sleep, $p0);
    assume true;
    goto $bb11, $bb30;

  $bb30:
    assume !($i42 == 1);
    $i41 := $eq.ref(poseidon_fe_init, $p0);
    assume true;
    goto $bb10, $bb29;

  $bb29:
    assume !($i41 == 1);
    $i40 := $eq.ref(snd_pd_prepare, $p0);
    assume true;
    goto $bb9, $bb28;

  $bb28:
    assume !($i40 == 1);
    $i39 := $eq.ref(snd_pd_hw_capture_free, $p0);
    assume true;
    goto $bb8, $bb27;

  $bb27:
    assume !($i39 == 1);
    $i38 := $eq.ref(snd_pd_pcm_close, $p0);
    assume {:branchcond $i38} true;
    goto $bb7, $bb26;

  $bb26:
    assume !($i38 == 1);
    $i37 := $eq.ref(snd_pd_capture_open, $p0);
    assume true;
    goto $bb6, $bb25;

  $bb25:
    assume !($i37 == 1);
    $i36 := $eq.ref(pm_video_resume, $p0);
    assume {:branchcond $i36} true;
    goto $bb5, $bb24;

  $bb24:
    assume !($i36 == 1);
    $i35 := $eq.ref(pm_video_suspend, $p0);
    assume true;
    goto $bb4, $bb23;

  $bb23:
    assume !($i35 == 1);
    $i34 := $eq.ref(pd_video_release, $p0);
    assume true;
    goto $bb3, $bb22;

  $bb22:
    assume !($i34 == 1);
    $i33 := $eq.ref(pd_video_open, $p0);
    assume true;
    goto $bb2, $bb21;

  $bb21:
    assume !($i33 == 1);
    assume false;
    return;

  $bb2:
    assume $i33 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1812} $i2 := pd_video_open($p1);
    goto SeqInstr_520, SeqInstr_521;

  SeqInstr_521:
    assume assertsPassed;
    goto SeqInstr_522;

  SeqInstr_522:
    $r := $i2;
    return;

  SeqInstr_520:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i34 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1813} $i4 := pd_video_release($p3);
    goto SeqInstr_523, SeqInstr_524;

  SeqInstr_524:
    assume assertsPassed;
    goto SeqInstr_525;

  SeqInstr_525:
    $r := $i4;
    return;

  SeqInstr_523:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i35 == 1;
    call {:si_unique_call 1814} $i5 := pm_video_suspend(arg);
    $r := $i5;
    return;

  $bb5:
    assume $i36 == 1;
    call {:si_unique_call 1815} $i6 := pm_video_resume(arg);
    goto SeqInstr_526, SeqInstr_527;

  SeqInstr_527:
    assume assertsPassed;
    goto SeqInstr_528;

  SeqInstr_528:
    $r := $i6;
    return;

  SeqInstr_526:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i37 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1816} $i8 := snd_pd_capture_open($p7);
    $r := $i8;
    return;

  $bb7:
    assume $i38 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1817} $i10 := snd_pd_pcm_close($p9);
    $r := $i10;
    return;

  $bb8:
    assume $i39 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1818} $i12 := snd_pd_hw_capture_free($p11);
    $r := $i12;
    return;

  $bb9:
    assume $i40 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1819} $i14 := snd_pd_prepare($p13);
    $r := $i14;
    return;

  $bb10:
    assume $i41 == 1;
    $p15 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1820} $i16 := poseidon_fe_init($p15);
    $r := $i16;
    return;

  $bb11:
    assume $i42 == 1;
    $p17 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1821} $i18 := poseidon_fe_sleep($p17);
    $r := $i18;
    return;

  $bb12:
    assume $i43 == 1;
    call {:si_unique_call 1822} $i19 := pm_dvb_suspend(arg);
    goto SeqInstr_529, SeqInstr_530;

  SeqInstr_530:
    assume assertsPassed;
    goto SeqInstr_531;

  SeqInstr_531:
    $r := $i19;
    return;

  SeqInstr_529:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i44 == 1;
    call {:si_unique_call 1823} $i20 := pm_dvb_resume(arg);
    goto SeqInstr_532, SeqInstr_533;

  SeqInstr_533:
    assume assertsPassed;
    goto SeqInstr_534;

  SeqInstr_534:
    $r := $i20;
    return;

  SeqInstr_532:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i45 == 1;
    $p21 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1824} $i22 := poseidon_fm_open($p21);
    goto SeqInstr_535, SeqInstr_536;

  SeqInstr_536:
    assume assertsPassed;
    goto SeqInstr_537;

  SeqInstr_537:
    $r := $i22;
    return;

  SeqInstr_535:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i46 == 1;
    $p23 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1825} $i24 := poseidon_fm_close($p23);
    goto SeqInstr_538, SeqInstr_539;

  SeqInstr_539:
    assume assertsPassed;
    goto SeqInstr_540;

  SeqInstr_540:
    $r := $i24;
    return;

  SeqInstr_538:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i47 == 1;
    call {:si_unique_call 1826} $i25 := pm_fm_suspend(arg);
    $r := $i25;
    return;

  $bb17:
    assume $i48 == 1;
    call {:si_unique_call 1827} $i26 := pm_fm_resume(arg);
    goto SeqInstr_541, SeqInstr_542;

  SeqInstr_542:
    assume assertsPassed;
    goto SeqInstr_543;

  SeqInstr_543:
    $r := $i26;
    return;

  SeqInstr_541:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i49 == 1;
    $p27 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1828} $i28 := poseidon_resume($p27);
    goto SeqInstr_544, SeqInstr_545;

  SeqInstr_545:
    assume assertsPassed;
    goto SeqInstr_546;

  SeqInstr_546:
    $r := $i28;
    return;

  SeqInstr_544:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i50 == 1;
    $p29 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1829} $i30 := pd_start_feed($p29);
    goto SeqInstr_547, SeqInstr_548;

  SeqInstr_548:
    assume assertsPassed;
    goto SeqInstr_549;

  SeqInstr_549:
    $r := $i30;
    return;

  SeqInstr_547:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i51 == 1;
    $p31 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1830} $i32 := pd_stop_feed($p31);
    goto SeqInstr_550, SeqInstr_551;

  SeqInstr_551:
    assume assertsPassed;
    goto SeqInstr_552;

  SeqInstr_552:
    $r := $i32;
    return;

  SeqInstr_550:
    assume !assertsPassed;
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 652787);

procedure devirtbounce.5(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.31, assertsPassed;



implementation devirtbounce.5(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i9 := $eq.ref(pm_notifier_block, $p0);
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i9 == 1);
    $i8 := $eq.ref(snd_pcm_lib_ioctl, $p0);
    assume true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i8 == 1);
    assume false;
    return;

  $bb2:
    assume $i8 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 1831} $i3 := snd_pcm_lib_ioctl($p1, arg1, $p2);
    $r := $i3;
    return;

  $bb3:
    assume $i9 == 1;
    $p4 := $bitcast.ref.ref(arg);
    $i5 := $zext.i32.i64(arg1);
    $p6 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 1832} $i7 := pm_notifier_block($p4, $i5, $p6);
    goto SeqInstr_553, SeqInstr_554;

  SeqInstr_554:
    assume assertsPassed;
    goto SeqInstr_555;

  SeqInstr_555:
    $r := $i7;
    return;

  SeqInstr_553:
    assume !assertsPassed;
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.42, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.55, $M.56, $M.57, $M.58, $M.61, $M.84, $M.89, $M.2, $M.63, $M.64, $M.65, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $M.78, $M.79, $M.80, $M.81, $M.62, $M.83, $M.85, $M.86, $M.87, $M.88, $M.90, $M.91, $M.108, $M.109, $M.38, $M.0, $M.28, $M.23, $M.24, $M.113, $M.9, $M.10, $M.8, $M.7, $M.127, $M.128, $M.21, $M.22, $M.14, $M.15, $M.133, $M.6, $M.1, $M.94, $M.93, $M.92, $M.31, $M.3, $M.134, $M.135, $M.136, $M.137, $M.36, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 1833} __SMACK_static_init();
    call {:si_unique_call 1834} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.82, $M.69, $M.55, $M.79, $M.64, $M.61, $M.83, $M.52, $M.84, $M.78, $M.53, $M.85, $M.57, $M.80, $M.0, $M.70, $M.54, $M.56, $M.65, $M.66, $M.59, $M.60, $M.11, $M.12, $M.13, $M.32, $M.86, $M.87, $M.88, $M.90, $M.29, $M.91, $M.77, $M.44, $M.71, $M.72, $M.73, $M.74, $M.75, $M.76, $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.63, $M.42, $M.43, $M.67, $M.68, $M.58, $M.81, $M.89, $M.2, $M.62, $M.108, $M.109, $M.38, $M.28, $M.23, $M.24, $M.113, $M.9, $M.10, $M.8, $M.7, $M.127, $M.128, $M.21, $M.22, $M.14, $M.15, $M.133, $M.6, $M.1, $M.94, $M.93, $M.92, $M.31, $M.3, $M.134, $M.135, $M.136, $M.137, $M.36, $CurrAddr, $M.25, $M.27, $M.33, $M.30, $M.4, $M.37, $M.41;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation free_all_urb_generic_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$i4: i64, in_$p5: ref, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$i12: i32, in_$i13: i64, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$i18: i64, in_$p19: ref, in_$i20: i32, in_$i21: i1, in_$i3: i32) returns (out_$i4: i64, out_$p5: ref, out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$i12: i32, out_$i13: i64, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$i18: i64, out_$p19: ref, out_$i20: i32, out_$i21: i1, out_$i3: i32)
{

  entry:
    out_$i4, out_$p5, out_$p6, out_$i7, out_$i8, out_$p9, out_$p10, out_$p11, out_$i12, out_$i13, out_$p14, out_$p15, out_$p16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i3 := in_$i4, in_$p5, in_$p6, in_$i7, in_$i8, in_$p9, in_$p10, in_$p11, in_$i12, in_$i13, in_$p14, in_$p15, in_$p16, in_$i17, in_$i18, in_$p19, in_$i20, in_$i21, in_$i3;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_594;

  $bb9:
    assume out_$i21 == 1;
    assume {:verifier.code 0} true;
    out_$i3 := out_$i20;
    goto $bb9_dummy;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    out_$i21 := $slt.i32(out_$i20, in_$i1);
    goto corral_source_split_619;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i20 := $add.i32(out_$i3, 1);
    call {:si_unique_call 136} {:cexpr "i"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_618;

  $bb7:
    assume !(out_$i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p19, $0.ref);
    goto corral_source_split_616;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref(in_$p0, $mul.ref(out_$i18, 8));
    goto corral_source_split_615;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    out_$i18 := $sext.i32.i64(out_$i3);
    goto corral_source_split_614;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} usb_free_urb(out_$p6);
    goto corral_source_split_613;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 134} usb_free_coherent(out_$p10, out_$i13, out_$p15, out_$i17);
    goto corral_source_split_612;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    out_$i17 := $load.i64($M.0, out_$p16);
    goto corral_source_split_611;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(out_$p6, $mul.ref(0, 192)), $mul.ref(112, 1));
    goto corral_source_split_610;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    out_$p15 := $load.ref($M.0, out_$p14);
    goto corral_source_split_609;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(out_$p6, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_608;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    out_$i13 := $zext.i32.i64(out_$i12);
    goto corral_source_split_607;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    out_$i12 := $load.i32($M.0, out_$p11);
    goto corral_source_split_606;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(out_$p6, $mul.ref(0, 192)), $mul.ref(132, 1));
    goto corral_source_split_605;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    out_$p10 := $load.ref($M.0, out_$p9);
    goto corral_source_split_604;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(out_$p6, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_603;

  $bb6:
    assume out_$i8 == 1;
    goto corral_source_split_602;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    out_$i8 := $ne.i64(out_$i7, 0);
    goto corral_source_split_600;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    out_$i7 := $p2i.ref.i64(out_$p6);
    goto corral_source_split_599;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    out_$p6 := $load.ref($M.0, out_$p5);
    goto corral_source_split_598;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    out_$p5 := $add.ref(in_$p0, $mul.ref(out_$i4, 8));
    goto corral_source_split_597;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i4 := $sext.i32.i64(out_$i3);
    goto corral_source_split_596;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb9_dummy:
    call {:si_unique_call 1} out_$i4, out_$p5, out_$p6, out_$i7, out_$i8, out_$p9, out_$p10, out_$p11, out_$i12, out_$i13, out_$p14, out_$p15, out_$p16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i3 := free_all_urb_generic_loop_$bb4(in_$p0, in_$i1, out_$i4, out_$p5, out_$p6, out_$i7, out_$i8, out_$p9, out_$p10, out_$p11, out_$i12, out_$i13, out_$p14, out_$p15, out_$p16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i3);
    return;

  exit:
    return;
}



procedure free_all_urb_generic_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$i4: i64, in_$p5: ref, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$i12: i32, in_$i13: i64, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$i18: i64, in_$p19: ref, in_$i20: i32, in_$i21: i1, in_$i3: i32) returns (out_$i4: i64, out_$p5: ref, out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$i12: i32, out_$i13: i64, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$i18: i64, out_$p19: ref, out_$i20: i32, out_$i21: i1, out_$i3: i32);
  modifies $M.0;



implementation vidioc_g_tuner_loop_$bb8(in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p8: ref, in_$p16: ref, in_$p22: ref, in_$p23: ref, in_$i24: i64, in_$i25: i64, in_$p27: ref, in_$i28: i32, in_$i29: i32, in_$i30: i1, in_$i20: i32, in_$i21: i32, in_$i32: i32, in_$i33: i1, in_$i35: i1, in_$i36: i32, in_$i34: i32, in_$i31: i32, in_vslice_dummy_var_117: i64) returns (out_$p22: ref, out_$p23: ref, out_$i24: i64, out_$i25: i64, out_$p27: ref, out_$i28: i32, out_$i29: i32, out_$i30: i1, out_$i20: i32, out_$i21: i32, out_$i32: i32, out_$i33: i1, out_$i35: i1, out_$i36: i32, out_$i34: i32, out_$i31: i32, out_vslice_dummy_var_117: i64)
{

  entry:
    out_$p22, out_$p23, out_$i24, out_$i25, out_$p27, out_$i28, out_$i29, out_$i30, out_$i20, out_$i21, out_$i32, out_$i33, out_$i35, out_$i36, out_$i34, out_$i31, out_vslice_dummy_var_117 := in_$p22, in_$p23, in_$i24, in_$i25, in_$p27, in_$i28, in_$i29, in_$i30, in_$i20, in_$i21, in_$i32, in_$i33, in_$i35, in_$i36, in_$i34, in_$i31, in_vslice_dummy_var_117;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1550;

  $bb11:
    assume out_$i30 == 1;
    assume {:verifier.code 0} true;
    out_$i20, out_$i21 := out_$i28, out_$i32;
    goto $bb11_dummy;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    out_$i31 := out_$i28;
    assume true;
    goto $bb11;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    out_$i30 := $ne.i32(out_$i29, 0);
    goto corral_source_split_1564;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    out_$i29 := $load.i32($M.0, in_$p16);
    goto corral_source_split_1563;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} out_$i28 := send_get_req(in_$p8, 69, 1, out_$p27, in_$p4, 24);
    call {:si_unique_call 333} {:cexpr "ret"} boogie_si_record_i32(out_$i28);
    goto corral_source_split_1562;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    out_$p27 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_1561;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} out_vslice_dummy_var_117 := schedule_timeout(250);
    goto corral_source_split_1560;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    $M.13 := $store.i64($M.13, in_$p5, out_$i25);
    goto corral_source_split_1558;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i64($M.13, in_$p5);
    call {:si_unique_call 330} out_$i25 := devirtbounce(0, out_$p23, out_$i24, out_$p23);
    goto corral_source_split_1557;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p22, $mul.ref(0, 9568)), $mul.ref(0, 1));
    goto corral_source_split_1556;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} out_$p22 := get_current();
    goto corral_source_split_1555;

  $bb9:
    assume {:verifier.code 0} true;
    $M.13 := $store.i64($M.13, in_$p5, 1);
    goto corral_source_split_1554;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb15:
    assume out_$i35 == 1;
    goto corral_source_split_1573;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    out_$i36 := out_$i20;
    assume true;
    goto $bb15;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    out_$i35 := $eq.i32(out_$i20, 0);
    goto corral_source_split_1569;

  $bb13:
    assume out_$i33 == 1;
    goto corral_source_split_1568;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    out_$i34 := out_$i20;
    assume true;
    goto $bb13;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    out_$i33 := $ne.i32(out_$i21, 0);
    goto corral_source_split_1552;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    out_$i32 := $sub.i32(out_$i21, 1);
    call {:si_unique_call 328} {:cexpr "count"} boogie_si_record_i32(out_$i32);
    goto corral_source_split_1551;

  $bb11_dummy:
    call {:si_unique_call 1} out_$p22, out_$p23, out_$i24, out_$i25, out_$p27, out_$i28, out_$i29, out_$i30, out_$i20, out_$i21, out_$i32, out_$i33, out_$i35, out_$i36, out_$i34, out_$i31, out_vslice_dummy_var_117 := vidioc_g_tuner_loop_$bb8(in_$p3, in_$p4, in_$p5, in_$p8, in_$p16, out_$p22, out_$p23, out_$i24, out_$i25, out_$p27, out_$i28, out_$i29, out_$i30, out_$i20, out_$i21, out_$i32, out_$i33, out_$i35, out_$i36, out_$i34, out_$i31, out_vslice_dummy_var_117);
    return;

  exit:
    return;
}



procedure vidioc_g_tuner_loop_$bb8(in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p8: ref, in_$p16: ref, in_$p22: ref, in_$p23: ref, in_$i24: i64, in_$i25: i64, in_$p27: ref, in_$i28: i32, in_$i29: i32, in_$i30: i1, in_$i20: i32, in_$i21: i32, in_$i32: i32, in_$i33: i1, in_$i35: i1, in_$i36: i32, in_$i34: i32, in_$i31: i32, in_vslice_dummy_var_117: i64) returns (out_$p22: ref, out_$p23: ref, out_$i24: i64, out_$i25: i64, out_$p27: ref, out_$i28: i32, out_$i29: i32, out_$i30: i1, out_$i20: i32, out_$i21: i32, out_$i32: i32, out_$i33: i1, out_$i35: i1, out_$i36: i32, out_$i34: i32, out_$i31: i32, out_vslice_dummy_var_117: i64);
  modifies $M.0, $CurrAddr, $M.13;



implementation alloc_bulk_urbs_generic_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$p2: ref, in_$i3: i8, in_$i4: i32, in_$i5: i32, in_$p6: ref, in_$p7: ref, in_$p11: ref, in_$i12: i64, in_$i13: i1, in_$i14: i32, in_$i16: i64, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$i20: i1, in_$i21: i32, in_$p22: ref, in_$i23: i32, in_$i24: i32, in_$i25: i32, in_$p26: ref, in_$i27: i32, in_$i28: i32, in_$p29: ref, in_$i30: i64, in_$p31: ref, in_$i32: i32, in_$i33: i1, in_$i10: i32, in_$i34: i32) returns (out_$p11: ref, out_$i12: i64, out_$i13: i1, out_$i14: i32, out_$i16: i64, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$i20: i1, out_$i21: i32, out_$p22: ref, out_$i23: i32, out_$i24: i32, out_$i25: i32, out_$p26: ref, out_$i27: i32, out_$i28: i32, out_$p29: ref, out_$i30: i64, out_$p31: ref, out_$i32: i32, out_$i33: i1, out_$i10: i32, out_$i34: i32)
{

  entry:
    out_$p11, out_$i12, out_$i13, out_$i14, out_$i16, out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p22, out_$i23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$p29, out_$i30, out_$p31, out_$i32, out_$i33, out_$i10, out_$i34 := in_$p11, in_$i12, in_$i13, in_$i14, in_$i16, in_$p17, in_$p18, in_$i19, in_$i20, in_$i21, in_$p22, in_$i23, in_$i24, in_$i25, in_$p26, in_$i27, in_$i28, in_$p29, in_$i30, in_$p31, in_$i32, in_$i33, in_$i10, in_$i34;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1962;

  $bb13:
    assume out_$i33 == 1;
    assume {:verifier.code 0} true;
    out_$i10 := out_$i32;
    goto $bb13_dummy;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    out_$i34 := out_$i32;
    assume true;
    goto $bb13;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    out_$i33 := $slt.i32(out_$i32, in_$i1);
    goto corral_source_split_1994;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    out_$i32 := $add.i32(out_$i10, 1);
    call {:si_unique_call 413} {:cexpr "i"} boogie_si_record_i32(out_$i32);
    goto corral_source_split_1993;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p31, out_$p11);
    goto corral_source_split_1992;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref(in_$p0, $mul.ref(out_$i30, 8));
    goto corral_source_split_1991;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    out_$i30 := $sext.i32.i64(out_$i10);
    goto corral_source_split_1990;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p29, out_$i28);
    goto corral_source_split_1989;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p11, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_1988;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    out_$i28 := $or.i32(out_$i27, 4);
    goto corral_source_split_1987;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i32($M.0, out_$p26);
    goto corral_source_split_1986;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p11, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_1985;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} usb_fill_bulk_urb(out_$p11, in_$p2, out_$i25, out_$p18, in_$i4, in_$p6, in_$p7);
    goto corral_source_split_1984;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    out_$i25 := $or.i32(out_$i24, $sub.i32(0, 1073741696));
    goto corral_source_split_1983;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} out_$i24 := __create_pipe(in_$p2, out_$i23);
    call {:si_unique_call 411} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_1982;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i23 := $zext.i8.i32(in_$i3);
    goto corral_source_split_1981;

  $bb11:
    assume !(out_$i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    out_$i21, out_$p22 := out_$i10, out_$p11;
    assume true;
    goto $bb11;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    out_$i20 := $eq.i64(out_$i19, 0);
    goto corral_source_split_1976;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    out_$i19 := $p2i.ref.i64(out_$p18);
    goto corral_source_split_1975;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} out_$p18 := usb_alloc_coherent(in_$p2, out_$i16, in_$i5, out_$p17);
    goto corral_source_split_1974;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p11, $mul.ref(0, 192)), $mul.ref(112, 1));
    goto corral_source_split_1973;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i16 := $sext.i32.i64(in_$i4);
    goto corral_source_split_1972;

  $bb7:
    assume !(out_$i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    out_$i14 := out_$i10;
    assume true;
    goto $bb7;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    out_$i13 := $eq.i64(out_$i12, 0);
    goto corral_source_split_1966;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    out_$i12 := $p2i.ref.i64(out_$p11);
    goto corral_source_split_1965;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} out_$p11 := usb_alloc_urb(0, in_$i5);
    goto corral_source_split_1964;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb13_dummy:
    call {:si_unique_call 1} out_$p11, out_$i12, out_$i13, out_$i14, out_$i16, out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p22, out_$i23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$p29, out_$i30, out_$p31, out_$i32, out_$i33, out_$i10, out_$i34 := alloc_bulk_urbs_generic_loop_$bb4(in_$p0, in_$i1, in_$p2, in_$i3, in_$i4, in_$i5, in_$p6, in_$p7, out_$p11, out_$i12, out_$i13, out_$i14, out_$i16, out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p22, out_$i23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$p29, out_$i30, out_$p31, out_$i32, out_$i33, out_$i10, out_$i34);
    return;

  exit:
    return;
}



procedure alloc_bulk_urbs_generic_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$p2: ref, in_$i3: i8, in_$i4: i32, in_$i5: i32, in_$p6: ref, in_$p7: ref, in_$p11: ref, in_$i12: i64, in_$i13: i1, in_$i14: i32, in_$i16: i64, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$i20: i1, in_$i21: i32, in_$p22: ref, in_$i23: i32, in_$i24: i32, in_$i25: i32, in_$p26: ref, in_$i27: i32, in_$i28: i32, in_$p29: ref, in_$i30: i64, in_$p31: ref, in_$i32: i32, in_$i33: i1, in_$i10: i32, in_$i34: i32) returns (out_$p11: ref, out_$i12: i64, out_$i13: i1, out_$i14: i32, out_$i16: i64, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$i20: i1, out_$i21: i32, out_$p22: ref, out_$i23: i32, out_$i24: i32, out_$i25: i32, out_$p26: ref, out_$i27: i32, out_$i28: i32, out_$p29: ref, out_$i30: i64, out_$p31: ref, out_$i32: i32, out_$i33: i1, out_$i10: i32, out_$i34: i32);
  modifies $M.0;



implementation prepare_iso_urb_loop_$bb21(in_$i44: i32, in_$i45: i1, in_$i43: i32) returns (out_$i44: i32, out_$i45: i1, out_$i43: i32)
{

  entry:
    out_$i44, out_$i45, out_$i43 := in_$i44, in_$i45, in_$i43;
    goto $bb21, exit;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_2091;

  $bb23:
    assume out_$i45 == 1;
    assume {:verifier.code 0} true;
    out_$i43 := out_$i44;
    goto $bb23_dummy;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    out_$i45 := $sgt.i32(out_$i44, 0);
    goto corral_source_split_2094;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i44 := $sub.i32(out_$i43, 1);
    call {:si_unique_call 430} {:cexpr "i"} boogie_si_record_i32(out_$i44);
    goto corral_source_split_2093;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb23_dummy:
    call {:si_unique_call 1} out_$i44, out_$i45, out_$i43 := prepare_iso_urb_loop_$bb21(out_$i44, out_$i45, out_$i43);
    return;

  exit:
    return;
}



procedure prepare_iso_urb_loop_$bb21(in_$i44: i32, in_$i45: i1, in_$i43: i32) returns (out_$i44: i32, out_$i45: i1, out_$i43: i32);



implementation check_control_id_loop_$bb4(in_$i0: i32, in_$i3: i64, in_$p7: ref, in_$i8: i32, in_$i9: i1, in_$p10: ref, in_$p12: ref, in_$i13: i64, in_$i14: i1, in_$p5: ref) returns (out_$p7: ref, out_$i8: i32, out_$i9: i1, out_$p10: ref, out_$p12: ref, out_$i13: i64, out_$i14: i1, out_$p5: ref)
{

  entry:
    out_$p7, out_$i8, out_$i9, out_$p10, out_$p12, out_$i13, out_$i14, out_$p5 := in_$p7, in_$i8, in_$i9, in_$p10, in_$p12, in_$i13, in_$i14, in_$p5;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_4382;

  $bb10:
    assume out_$i14 == 1;
    assume {:verifier.code 0} true;
    out_$p5 := out_$p12;
    goto $bb10_dummy;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    out_$i14 := $ugt.i64(in_$i3, out_$i13);
    goto corral_source_split_4394;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    out_$i13 := $p2i.ref.i64(out_$p12);
    goto corral_source_split_4393;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref(out_$p5, $mul.ref(1, 72));
    goto corral_source_split_4392;

  $bb7:
    assume !(out_$i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    out_$p10 := out_$p5;
    assume true;
    goto $bb7;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    out_$i9 := $eq.i32(out_$i8, in_$i0);
    goto corral_source_split_4386;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    out_$i8 := $load.i32($M.0, out_$p7);
    goto corral_source_split_4385;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref($add.ref($add.ref(out_$p5, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4384;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p7, out_$i8, out_$i9, out_$p10, out_$p12, out_$i13, out_$i14, out_$p5 := check_control_id_loop_$bb4(in_$i0, in_$i3, out_$p7, out_$i8, out_$i9, out_$p10, out_$p12, out_$i13, out_$i14, out_$p5);
    return;

  exit:
    return;
}



procedure check_control_id_loop_$bb4(in_$i0: i32, in_$i3: i64, in_$p7: ref, in_$i8: i32, in_$i9: i1, in_$p10: ref, in_$p12: ref, in_$i13: i64, in_$i14: i1, in_$p5: ref) returns (out_$p7: ref, out_$i8: i32, out_$i9: i1, out_$p10: ref, out_$p12: ref, out_$i13: i64, out_$i14: i1, out_$p5: ref);



implementation poseidon_set_fe_loop_$bb8(in_$p1: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i32, in_$i22: i64, in_$p24: ref, in_$i25: i32, in_$i26: i1, in_$i27: i64, in_$p29: ref, in_$i30: i32, in_$i31: i32, in_$i32: i32, in_$i33: i32, in_$i34: i1, in_$i16: i32, in_$i17: i32, in_$i35: i32) returns (out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i32, out_$i22: i64, out_$p24: ref, out_$i25: i32, out_$i26: i1, out_$i27: i64, out_$p29: ref, out_$i30: i32, out_$i31: i32, out_$i32: i32, out_$i33: i32, out_$i34: i1, out_$i16: i32, out_$i17: i32, out_$i35: i32)
{

  entry:
    out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p24, out_$i25, out_$i26, out_$i27, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i16, out_$i17, out_$i35 := in_$p18, in_$p19, in_$p20, in_$i21, in_$i22, in_$p24, in_$i25, in_$i26, in_$i27, in_$p29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i16, in_$i17, in_$i35;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4827;

  $bb13:
    assume out_$i34 == 1;
    assume {:verifier.code 0} true;
    out_$i16, out_$i17 := out_$i31, out_$i32;
    goto $bb13_dummy;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    out_$i35 := out_$i31;
    assume true;
    goto $bb13;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    out_$i34 := $slt.i32(out_$i32, out_$i33);
    goto corral_source_split_4846;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    out_$i33 := $M.23;
    goto corral_source_split_4845;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    out_$i32 := $add.i32(out_$i17, 1);
    call {:si_unique_call 643} {:cexpr "i"} boogie_si_record_i32(out_$i32);
    goto corral_source_split_4844;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_4843;

  $bb11:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    out_$i31 := out_$i16;
    goto $bb12;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    out_$i31 := out_$i30;
    goto $bb12;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i32($M.24, out_$p29);
    call {:si_unique_call 642} {:cexpr "bandwidth"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_4841;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref($add.ref(dvb_bandwidth, $mul.ref(0, 24)), $mul.ref(out_$i27, 8)), $mul.ref(0, 4));
    goto corral_source_split_4840;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    out_$i27 := $sext.i32.i64(out_$i17);
    goto corral_source_split_4839;

  $bb10:
    assume out_$i26 == 1;
    goto corral_source_split_4838;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    out_$i26 := $eq.i32(out_$i21, out_$i25);
    goto corral_source_split_4836;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i32($M.24, out_$p24);
    goto corral_source_split_4835;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref($add.ref(dvb_bandwidth, $mul.ref(0, 24)), $mul.ref(out_$i22, 8)), $mul.ref(1, 4));
    goto corral_source_split_4834;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    out_$i22 := $sext.i32.i64(out_$i17);
    goto corral_source_split_4833;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    out_$i21 := $load.i32($M.0, out_$p20);
    goto corral_source_split_4832;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(out_$p19, $mul.ref(0, 28)), $mul.ref(0, 1));
    goto corral_source_split_4831;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    out_$p19 := $bitcast.ref.ref(out_$p18);
    goto corral_source_split_4830;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(in_$p1, $mul.ref(0, 36)), $mul.ref(8, 1));
    goto corral_source_split_4829;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb13_dummy:
    call {:si_unique_call 1} out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p24, out_$i25, out_$i26, out_$i27, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i16, out_$i17, out_$i35 := poseidon_set_fe_loop_$bb8(in_$p1, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p24, out_$i25, out_$i26, out_$i27, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i16, out_$i17, out_$i35);
    return;

  exit:
    return;
}



procedure poseidon_set_fe_loop_$bb8(in_$p1: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i32, in_$i22: i64, in_$p24: ref, in_$i25: i32, in_$i26: i1, in_$i27: i64, in_$p29: ref, in_$i30: i32, in_$i31: i32, in_$i32: i32, in_$i33: i32, in_$i34: i1, in_$i16: i32, in_$i17: i32, in_$i35: i32) returns (out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i32, out_$i22: i64, out_$p24: ref, out_$i25: i32, out_$i26: i1, out_$i27: i64, out_$p29: ref, out_$i30: i32, out_$i31: i32, out_$i32: i32, out_$i33: i32, out_$i34: i1, out_$i16: i32, out_$i17: i32, out_$i35: i32);



implementation tlg_fm_vidioc_g_exts_ctrl_loop_$bb8(in_$p2: ref, in_$p5: ref, in_$p10: ref, in_$p14: ref, in_$p15: ref, in_$i16: i64, in_$p18: ref, in_$i19: i32, in_$i20: i1, in_$i21: i1, in_$p23: ref, in_$i24: i32, in_$p25: ref, in_$p26: ref, in_$i27: i32, in_$i28: i32, in_$i29: i1, in_$i13: i32) returns (out_$p14: ref, out_$p15: ref, out_$i16: i64, out_$p18: ref, out_$i19: i32, out_$i20: i1, out_$i21: i1, out_$p23: ref, out_$i24: i32, out_$p25: ref, out_$p26: ref, out_$i27: i32, out_$i28: i32, out_$i29: i1, out_$i13: i32)
{

  entry:
    out_$p14, out_$p15, out_$i16, out_$p18, out_$i19, out_$i20, out_$i21, out_$p23, out_$i24, out_$p25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i13 := in_$p14, in_$p15, in_$i16, in_$p18, in_$i19, in_$i20, in_$i21, in_$p23, in_$i24, in_$p25, in_$p26, in_$i27, in_$i28, in_$i29, in_$i13;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_5744;

  $bb17:
    assume out_$i29 == 1;
    assume {:verifier.code 0} true;
    out_$i13 := out_$i27;
    goto $bb17_dummy;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17;

  corral_source_split_5757:
    assume {:verifier.code 0} true;
    out_$i29 := $ult.i32(out_$i27, out_$i28);
    goto corral_source_split_5758;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i32($M.0, in_$p10);
    goto corral_source_split_5757;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i27 := $add.i32(out_$i13, 1);
    call {:si_unique_call 837} {:cexpr "i"} boogie_si_record_i32(out_$i27);
    goto corral_source_split_5756;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb10:
    assume out_$i20 == 1;
    goto corral_source_split_5754;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    out_$i20 := $ne.i32(out_$i19, 10160496);
    goto corral_source_split_5752;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    out_$i19 := $load.i32($M.0, out_$p18);
    goto corral_source_split_5751;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(out_$p15, $mul.ref(out_$i16, 24)), $mul.ref(0, 1));
    goto corral_source_split_5750;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    goto corral_source_split_5749;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    out_$i16 := $sext.i32.i64(out_$i13);
    goto corral_source_split_5748;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    out_$p15 := $load.ref($M.0, out_$p14);
    goto corral_source_split_5747;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(in_$p2, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_5746;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb15:
    assume !(out_$i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_5767:
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_5766:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p26, out_$i24);
    goto corral_source_split_5767;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    out_$p26 := $bitcast.ref.ref(out_$p25);
    goto corral_source_split_5766;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(out_$p15, $mul.ref(out_$i16, 24)), $mul.ref(16, 1));
    goto corral_source_split_5765;

  corral_source_split_5763:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i32($M.0, out_$p23);
    goto corral_source_split_5764;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 3864)), $mul.ref(928, 1)), $mul.ref(12, 1));
    goto corral_source_split_5763;

  $bb14:
    assume out_$i21 == 1;
    goto corral_source_split_5762;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i21 := $sle.i32(out_$i13, 2);
    goto corral_source_split_5760;

  $bb11:
    assume !(out_$i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb17_dummy:
    call {:si_unique_call 1} out_$p14, out_$p15, out_$i16, out_$p18, out_$i19, out_$i20, out_$i21, out_$p23, out_$i24, out_$p25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i13 := tlg_fm_vidioc_g_exts_ctrl_loop_$bb8(in_$p2, in_$p5, in_$p10, out_$p14, out_$p15, out_$i16, out_$p18, out_$i19, out_$i20, out_$i21, out_$p23, out_$i24, out_$p25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i13);
    return;

  exit:
    return;
}



procedure tlg_fm_vidioc_g_exts_ctrl_loop_$bb8(in_$p2: ref, in_$p5: ref, in_$p10: ref, in_$p14: ref, in_$p15: ref, in_$i16: i64, in_$p18: ref, in_$i19: i32, in_$i20: i1, in_$i21: i1, in_$p23: ref, in_$i24: i32, in_$p25: ref, in_$p26: ref, in_$i27: i32, in_$i28: i32, in_$i29: i1, in_$i13: i32) returns (out_$p14: ref, out_$p15: ref, out_$i16: i64, out_$p18: ref, out_$i19: i32, out_$i20: i1, out_$i21: i1, out_$p23: ref, out_$i24: i32, out_$p25: ref, out_$p26: ref, out_$i27: i32, out_$i28: i32, out_$i29: i1, out_$i13: i32);
  modifies $M.0;



implementation tlg_fm_vidioc_s_exts_ctrl_loop_$bb8(in_$p0: ref, in_$p2: ref, in_$p3: ref, in_$p8: ref, in_$p12: ref, in_$p13: ref, in_$i14: i64, in_$p16: ref, in_$i17: i32, in_$i18: i1, in_$p19: ref, in_$p20: ref, in_$i21: i32, in_$i22: i1, in_$p23: ref, in_$p24: ref, in_$i25: i32, in_$i26: i1, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$i32: i32, in_$i33: i64, in_$p34: ref, in_$i35: i32, in_$p38: ref, in_$i39: i32, in_$i40: i32, in_$i41: i1, in_$i11: i32, in_vslice_dummy_var_193: i32) returns (out_$p12: ref, out_$p13: ref, out_$i14: i64, out_$p16: ref, out_$i17: i32, out_$i18: i1, out_$p19: ref, out_$p20: ref, out_$i21: i32, out_$i22: i1, out_$p23: ref, out_$p24: ref, out_$i25: i32, out_$i26: i1, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$i32: i32, out_$i33: i64, out_$p34: ref, out_$i35: i32, out_$p38: ref, out_$i39: i32, out_$i40: i32, out_$i41: i1, out_$i11: i32, out_vslice_dummy_var_193: i32)
{

  entry:
    out_$p12, out_$p13, out_$i14, out_$p16, out_$i17, out_$i18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p27, out_$p28, out_$p29, out_$p30, out_$p31, out_$i32, out_$i33, out_$p34, out_$i35, out_$p38, out_$i39, out_$i40, out_$i41, out_$i11, out_vslice_dummy_var_193 := in_$p12, in_$p13, in_$i14, in_$p16, in_$i17, in_$i18, in_$p19, in_$p20, in_$i21, in_$i22, in_$p23, in_$p24, in_$i25, in_$i26, in_$p27, in_$p28, in_$p29, in_$p30, in_$p31, in_$i32, in_$i33, in_$p34, in_$i35, in_$p38, in_$i39, in_$i40, in_$i41, in_$i11, in_vslice_dummy_var_193;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_5786;

  $bb20:
    assume out_$i41 == 1;
    assume {:verifier.code 0} true;
    out_$i11 := out_$i39;
    goto $bb20_dummy;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20;

  corral_source_split_5799:
    assume {:verifier.code 0} true;
    out_$i41 := $ult.i32(out_$i39, out_$i40);
    goto corral_source_split_5800;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    out_$i40 := $load.i32($M.0, in_$p8);
    goto corral_source_split_5799;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i39 := $add.i32(out_$i11, 1);
    call {:si_unique_call 839} {:cexpr "i"} boogie_si_record_i32(out_$i39);
    goto corral_source_split_5798;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb10:
    assume out_$i18 == 1;
    goto corral_source_split_5796;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_5793:
    assume {:verifier.code 0} true;
    out_$i18 := $ne.i32(out_$i17, 10160496);
    goto corral_source_split_5794;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    out_$i17 := $load.i32($M.0, out_$p16);
    goto corral_source_split_5793;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(out_$p13, $mul.ref(out_$i14, 24)), $mul.ref(0, 1));
    goto corral_source_split_5792;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    goto corral_source_split_5791;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    out_$i14 := $sext.i32.i64(out_$i11);
    goto corral_source_split_5790;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    out_$p13 := $load.ref($M.0, out_$p12);
    goto corral_source_split_5789;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(in_$p2, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_5788;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p38, out_$i35);
    goto corral_source_split_5825;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref($add.ref(out_$p29, $mul.ref(0, 3864)), $mul.ref(928, 1)), $mul.ref(12, 1));
    goto corral_source_split_5824;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} out_vslice_dummy_var_193 := send_set_req(out_$p29, 44, out_$i35, in_$p3);
    goto corral_source_split_5823;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i32($M.28, out_$p34);
    call {:si_unique_call 840} {:cexpr "pre_emphasis"} boogie_si_record_i32(out_$i35);
    goto corral_source_split_5822;

  corral_source_split_5820:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(preemphasis, $mul.ref(0, 12)), $mul.ref(out_$i33, 4));
    goto corral_source_split_5821;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    out_$i33 := $sext.i32.i64(out_$i32);
    goto corral_source_split_5820;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i32($M.0, out_$p31);
    goto corral_source_split_5819;

  corral_source_split_5817:
    assume {:verifier.code 0} true;
    out_$p31 := $bitcast.ref.ref(out_$p30);
    goto corral_source_split_5818;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(out_$p13, $mul.ref(out_$i14, 24)), $mul.ref(16, 1));
    goto corral_source_split_5817;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    out_$p29 := $bitcast.ref.ref(out_$p28);
    goto corral_source_split_5816;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    out_$p28 := $load.ref($M.0, out_$p27);
    goto corral_source_split_5815;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(in_$p0, $mul.ref(0, 336)), $mul.ref(296, 1));
    goto corral_source_split_5814;

  $bb17:
    assume out_$i26 == 1;
    goto corral_source_split_5813;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    out_$i26 := $sle.i32(out_$i25, 2);
    goto corral_source_split_5811;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i32($M.0, out_$p24);
    goto corral_source_split_5810;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    out_$p24 := $bitcast.ref.ref(out_$p23);
    goto corral_source_split_5809;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p13, $mul.ref(out_$i14, 24)), $mul.ref(16, 1));
    goto corral_source_split_5808;

  $bb14:
    assume out_$i22 == 1;
    goto corral_source_split_5807;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    out_$i22 := $sge.i32(out_$i21, 0);
    goto corral_source_split_5805;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    out_$i21 := $load.i32($M.0, out_$p20);
    goto corral_source_split_5804;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    out_$p20 := $bitcast.ref.ref(out_$p19);
    goto corral_source_split_5803;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(out_$p13, $mul.ref(out_$i14, 24)), $mul.ref(16, 1));
    goto corral_source_split_5802;

  $bb11:
    assume !(out_$i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb15:
    assume {:verifier.code 0} true;
    assume !(out_$i22 == 1);
    goto $bb16;

  $bb18:
    assume {:verifier.code 0} true;
    assume !(out_$i26 == 1);
    goto $bb16;

  $bb20_dummy:
    call {:si_unique_call 1} out_$p12, out_$p13, out_$i14, out_$p16, out_$i17, out_$i18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p27, out_$p28, out_$p29, out_$p30, out_$p31, out_$i32, out_$i33, out_$p34, out_$i35, out_$p38, out_$i39, out_$i40, out_$i41, out_$i11, out_vslice_dummy_var_193 := tlg_fm_vidioc_s_exts_ctrl_loop_$bb8(in_$p0, in_$p2, in_$p3, in_$p8, out_$p12, out_$p13, out_$i14, out_$p16, out_$i17, out_$i18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p27, out_$p28, out_$p29, out_$p30, out_$p31, out_$i32, out_$i33, out_$p34, out_$i35, out_$p38, out_$i39, out_$i40, out_$i41, out_$i11, out_vslice_dummy_var_193);
    return;

  exit:
    return;
}



procedure tlg_fm_vidioc_s_exts_ctrl_loop_$bb8(in_$p0: ref, in_$p2: ref, in_$p3: ref, in_$p8: ref, in_$p12: ref, in_$p13: ref, in_$i14: i64, in_$p16: ref, in_$i17: i32, in_$i18: i1, in_$p19: ref, in_$p20: ref, in_$i21: i32, in_$i22: i1, in_$p23: ref, in_$p24: ref, in_$i25: i32, in_$i26: i1, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$i32: i32, in_$i33: i64, in_$p34: ref, in_$i35: i32, in_$p38: ref, in_$i39: i32, in_$i40: i32, in_$i41: i1, in_$i11: i32, in_vslice_dummy_var_193: i32) returns (out_$p12: ref, out_$p13: ref, out_$i14: i64, out_$p16: ref, out_$i17: i32, out_$i18: i1, out_$p19: ref, out_$p20: ref, out_$i21: i32, out_$i22: i1, out_$p23: ref, out_$p24: ref, out_$i25: i32, out_$i26: i1, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$i32: i32, out_$i33: i64, out_$p34: ref, out_$i35: i32, out_$p38: ref, out_$i39: i32, out_$i40: i32, out_$i41: i1, out_$i11: i32, out_vslice_dummy_var_193: i32);
  modifies $M.0, $CurrAddr;



implementation tlg_fm_vidioc_g_tuner_loop_$bb8(in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p13: ref, in_$p29: ref, in_$p35: ref, in_$p36: ref, in_$i37: i64, in_$i38: i64, in_$p40: ref, in_$i41: i32, in_$i42: i32, in_$i43: i1, in_$i33: i32, in_$i34: i32, in_$i45: i32, in_$i46: i1, in_$i48: i1, in_$i49: i32, in_$i47: i32, in_$i44: i32, in_vslice_dummy_var_195: i64) returns (out_$p35: ref, out_$p36: ref, out_$i37: i64, out_$i38: i64, out_$p40: ref, out_$i41: i32, out_$i42: i32, out_$i43: i1, out_$i33: i32, out_$i34: i32, out_$i45: i32, out_$i46: i1, out_$i48: i1, out_$i49: i32, out_$i47: i32, out_$i44: i32, out_vslice_dummy_var_195: i64)
{

  entry:
    out_$p35, out_$p36, out_$i37, out_$i38, out_$p40, out_$i41, out_$i42, out_$i43, out_$i33, out_$i34, out_$i45, out_$i46, out_$i48, out_$i49, out_$i47, out_$i44, out_vslice_dummy_var_195 := in_$p35, in_$p36, in_$i37, in_$i38, in_$p40, in_$i41, in_$i42, in_$i43, in_$i33, in_$i34, in_$i45, in_$i46, in_$i48, in_$i49, in_$i47, in_$i44, in_vslice_dummy_var_195;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5897;

  $bb11:
    assume out_$i43 == 1;
    assume {:verifier.code 0} true;
    out_$i33, out_$i34 := out_$i45, out_$i41;
    goto $bb11_dummy;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    out_$i44 := out_$i41;
    assume true;
    goto $bb11;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    out_$i43 := $ne.i32(out_$i42, 0);
    goto corral_source_split_5911;

  corral_source_split_5909:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i32($M.0, in_$p29);
    goto corral_source_split_5910;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 855} out_$i41 := send_get_req(in_$p13, 69, 4, out_$p40, in_$p4, 20);
    call {:si_unique_call 856} {:cexpr "ret"} boogie_si_record_i32(out_$i41);
    goto corral_source_split_5909;

  corral_source_split_5907:
    assume {:verifier.code 0} true;
    out_$p40 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_5908;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 854} out_vslice_dummy_var_195 := schedule_timeout(250);
    goto corral_source_split_5907;

  corral_source_split_5905:
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    $M.29 := $store.i64($M.29, in_$p5, out_$i38);
    goto corral_source_split_5905;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i64($M.29, in_$p5);
    call {:si_unique_call 853} out_$i38 := devirtbounce(0, out_$p36, out_$i37, out_$p36);
    goto corral_source_split_5904;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(out_$p35, $mul.ref(0, 9568)), $mul.ref(0, 1));
    goto corral_source_split_5903;

  corral_source_split_5901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} out_$p35 := get_current();
    goto corral_source_split_5902;

  $bb9:
    assume {:verifier.code 0} true;
    $M.29 := $store.i64($M.29, in_$p5, 1);
    goto corral_source_split_5901;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb15:
    assume out_$i48 == 1;
    goto corral_source_split_5920;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    out_$i49 := out_$i34;
    assume true;
    goto $bb15;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    out_$i48 := $eq.i32(out_$i34, 0);
    goto corral_source_split_5916;

  $bb13:
    assume out_$i46 == 1;
    goto corral_source_split_5915;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    out_$i47 := out_$i34;
    assume true;
    goto $bb13;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    out_$i46 := $ne.i32(out_$i33, 0);
    goto corral_source_split_5899;

  corral_source_split_5897:
    assume {:verifier.code 0} true;
    out_$i45 := $sub.i32(out_$i33, 1);
    call {:si_unique_call 851} {:cexpr "count"} boogie_si_record_i32(out_$i45);
    goto corral_source_split_5898;

  $bb11_dummy:
    call {:si_unique_call 1} out_$p35, out_$p36, out_$i37, out_$i38, out_$p40, out_$i41, out_$i42, out_$i43, out_$i33, out_$i34, out_$i45, out_$i46, out_$i48, out_$i49, out_$i47, out_$i44, out_vslice_dummy_var_195 := tlg_fm_vidioc_g_tuner_loop_$bb8(in_$p3, in_$p4, in_$p5, in_$p13, in_$p29, out_$p35, out_$p36, out_$i37, out_$i38, out_$p40, out_$i41, out_$i42, out_$i43, out_$i33, out_$i34, out_$i45, out_$i46, out_$i48, out_$i49, out_$i47, out_$i44, out_vslice_dummy_var_195);
    return;

  exit:
    return;
}



procedure tlg_fm_vidioc_g_tuner_loop_$bb8(in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p13: ref, in_$p29: ref, in_$p35: ref, in_$p36: ref, in_$i37: i64, in_$i38: i64, in_$p40: ref, in_$i41: i32, in_$i42: i32, in_$i43: i1, in_$i33: i32, in_$i34: i32, in_$i45: i32, in_$i46: i1, in_$i48: i1, in_$i49: i32, in_$i47: i32, in_$i44: i32, in_vslice_dummy_var_195: i64) returns (out_$p35: ref, out_$p36: ref, out_$i37: i64, out_$i38: i64, out_$p40: ref, out_$i41: i32, out_$i42: i32, out_$i43: i1, out_$i33: i32, out_$i34: i32, out_$i45: i32, out_$i46: i1, out_$i48: i1, out_$i49: i32, out_$i47: i32, out_$i44: i32, out_vslice_dummy_var_195: i64);
  modifies $M.0, $CurrAddr, $M.29;



implementation pm_notifier_block_loop_$bb7(in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$i16: i32, in_$i17: i1, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$i23: i1, in_$p9: ref, in_$p10: ref, in_vslice_dummy_var_204: i32) returns (out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$i16: i32, out_$i17: i1, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$i23: i1, out_$p9: ref, out_$p10: ref, out_vslice_dummy_var_204: i32)
{

  entry:
    out_$p11, out_$p12, out_$p13, out_$p14, out_$p15, out_$i16, out_$i17, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$p9, out_$p10, out_vslice_dummy_var_204 := in_$p11, in_$p12, in_$p13, in_$p14, in_$p15, in_$i16, in_$i17, in_$p19, in_$p20, in_$p21, in_$i22, in_$i23, in_$p9, in_$p10, in_vslice_dummy_var_204;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6098;

  $bb12:
    assume out_$i23 == 1;
    assume {:verifier.code 0} true;
    out_$p9, out_$p10 := out_$p21, out_$p9;
    goto $bb12_dummy;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    out_$i23 := $ne.i64(out_$i22, $p2i.ref.i64(pd_device_list));
    goto corral_source_split_6116;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    out_$i22 := $p2i.ref.i64(out_$p9);
    goto corral_source_split_6115;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    out_$p21 := $load.ref($M.0, out_$p20);
    goto corral_source_split_6114;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(out_$p9, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6113;

  $bb10:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    goto $bb11;

  SeqInstr_327:
    goto corral_source_split_6111;

  SeqInstr_326:
    assume assertsPassed;
    goto SeqInstr_327;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 910} device_unlock(out_$p19);
    goto SeqInstr_326;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(out_$p13, $mul.ref(0, 1904)), $mul.ref(136, 1));
    goto corral_source_split_6110;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 909} out_vslice_dummy_var_204 := usb_reset_device(out_$p13);
    goto corral_source_split_6109;

  $bb9:
    assume out_$i17 == 1;
    goto corral_source_split_6108;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    out_$i17 := $sge.i32(out_$i16, 0);
    goto corral_source_split_6106;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 907} out_$i16 := usb_lock_device_for_reset(out_$p13, out_$p15);
    call {:si_unique_call 908} {:cexpr "rc"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_6105;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    out_$p15 := $load.ref($M.0, out_$p14);
    goto corral_source_split_6104;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(out_$p11, $mul.ref(0, 3864)), $mul.ref(520, 1));
    goto corral_source_split_6103;

  corral_source_split_6101:
    assume {:verifier.code 0} true;
    out_$p13 := $load.ref($M.0, out_$p12);
    goto corral_source_split_6102;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(out_$p11, $mul.ref(0, 3864)), $mul.ref(512, 1));
    goto corral_source_split_6101;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p11 := $bitcast.ref.ref(out_$p10);
    goto corral_source_split_6100;

  corral_source_split_6098:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb12_dummy:
    call {:si_unique_call 1} out_$p11, out_$p12, out_$p13, out_$p14, out_$p15, out_$i16, out_$i17, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$p9, out_$p10, out_vslice_dummy_var_204 := pm_notifier_block_loop_$bb7(out_$p11, out_$p12, out_$p13, out_$p14, out_$p15, out_$i16, out_$i17, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$p9, out_$p10, out_vslice_dummy_var_204);
    return;

  exit:
    return;
}



procedure pm_notifier_block_loop_$bb7(in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$i16: i32, in_$i17: i1, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$i23: i1, in_$p9: ref, in_$p10: ref, in_vslice_dummy_var_204: i32) returns (out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$i16: i32, out_$i17: i1, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$i23: i1, out_$p9: ref, out_$p10: ref, out_vslice_dummy_var_204: i32);
  modifies $M.31, assertsPassed;



implementation pd_dvb_usb_device_exit_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$i6: i64, in_$i7: i64, in_$p9: ref, in_$i10: i32, in_$i11: i1, in_$i12: i32, in_$i13: i1, in_vslice_dummy_var_227: i64) returns (out_$p4: ref, out_$p5: ref, out_$i6: i64, out_$i7: i64, out_$p9: ref, out_$i10: i32, out_$i11: i1, out_$i12: i32, out_$i13: i1, out_vslice_dummy_var_227: i64)
{

  entry:
    out_$p4, out_$p5, out_$i6, out_$i7, out_$p9, out_$i10, out_$i11, out_$i12, out_$i13, out_vslice_dummy_var_227 := in_$p4, in_$p5, in_$i6, in_$i7, in_$p9, in_$i10, in_$i11, in_$i12, in_$i13, in_vslice_dummy_var_227;
    goto $bb1, exit;

  $bb1:
    out_$p9 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3864)), $mul.ref(952, 1)), $mul.ref(2672, 1));
    goto corral_source_split_6464;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    goto corral_source_split_6474_dummy;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1008} out_vslice_dummy_var_227 := schedule_timeout(250);
    goto corral_source_split_6474;

  corral_source_split_6472:
    assume {:verifier.code 0} true;
    goto $bb3;

  corral_source_split_6471:
    assume {:verifier.code 0} true;
    $M.33 := $store.i64($M.33, in_$p1, out_$i7);
    goto corral_source_split_6472;

  corral_source_split_6470:
    assume {:verifier.code 0} true;
    out_$i6 := $load.i64($M.33, in_$p1);
    call {:si_unique_call 1007} out_$i7 := devirtbounce(0, out_$p5, out_$i6, out_$p5);
    goto corral_source_split_6471;

  corral_source_split_6469:
    assume {:verifier.code 0} true;
    out_$p5 := $add.ref($add.ref(out_$p4, $mul.ref(0, 9568)), $mul.ref(0, 1));
    goto corral_source_split_6470;

  corral_source_split_6468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1006} out_$p4 := get_current();
    goto corral_source_split_6469;

  $bb2:
    assume {:verifier.code 0} true;
    $M.33 := $store.i64($M.33, in_$p1, 1);
    goto corral_source_split_6468;

  corral_source_split_6482:
    assume {:verifier.code 0} true;
    goto $bb2;

  corral_source_split_6476:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb4:
    assume out_$i11 == 1;
    goto corral_source_split_6476;

  corral_source_split_6466:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  corral_source_split_6465:
    assume {:verifier.code 0} true;
    out_$i11 := $ne.i32(out_$i10, 0);
    goto corral_source_split_6466;

  corral_source_split_6464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1004} out_$i10 := atomic_read(out_$p9);
    call {:si_unique_call 1005} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i10);
    goto corral_source_split_6465;

  $bb6:
    assume out_$i13 == 1;
    goto corral_source_split_6482;

  corral_source_split_6480:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_6479:
    assume {:verifier.code 0} true;
    out_$i13 := $ne.i32(out_$i12, 0);
    goto corral_source_split_6480;

  corral_source_split_6478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1009} out_$i12 := atomic_read(in_$p3);
    call {:si_unique_call 1010} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i12);
    goto corral_source_split_6479;

  $bb5:
    assume !(out_$i11 == 1);
    goto corral_source_split_6478;

  corral_source_split_6474_dummy:
    call {:si_unique_call 1} out_$p4, out_$p5, out_$i6, out_$i7, out_$p9, out_$i10, out_$i11, out_$i12, out_$i13, out_vslice_dummy_var_227 := pd_dvb_usb_device_exit_loop_$bb1(in_$p0, in_$p1, in_$p3, out_$p4, out_$p5, out_$i6, out_$i7, out_$p9, out_$i10, out_$i11, out_$i12, out_$i13, out_vslice_dummy_var_227);
    return;

  exit:
    return;
}



procedure pd_dvb_usb_device_exit_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$i6: i64, in_$i7: i64, in_$p9: ref, in_$i10: i32, in_$i11: i1, in_$i12: i32, in_$i13: i1, in_vslice_dummy_var_227: i64) returns (out_$p4: ref, out_$p5: ref, out_$i6: i64, out_$i7: i64, out_$p9: ref, out_$i10: i32, out_$i11: i1, out_$i12: i32, out_$i13: i1, out_vslice_dummy_var_227: i64);
  modifies $M.33;



implementation find_old_poseidon_loop_$bb4(in_$p0: ref, in_$p11: ref, in_$i12: i8, in_$i13: i32, in_$p14: ref, in_$i15: i8, in_$i16: i32, in_$i17: i1, in_$p19: ref, in_$i20: i32, in_$i21: i1, in_$p22: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$i35: i1, in_$p10: ref) returns (out_$p11: ref, out_$i12: i8, out_$i13: i32, out_$p14: ref, out_$i15: i8, out_$i16: i32, out_$i17: i1, out_$p19: ref, out_$i20: i32, out_$i21: i1, out_$p22: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$i34: i64, out_$i35: i1, out_$p10: ref)
{

  entry:
    out_$p11, out_$i12, out_$i13, out_$p14, out_$i15, out_$i16, out_$i17, out_$p19, out_$i20, out_$i21, out_$p22, out_$p26, out_$p27, out_$p28, out_$p30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$p10 := in_$p11, in_$i12, in_$i13, in_$p14, in_$i15, in_$i16, in_$i17, in_$p19, in_$i20, in_$i21, in_$p22, in_$p26, in_$p27, in_$p28, in_$p30, in_$p31, in_$p32, in_$p33, in_$i34, in_$i35, in_$p10;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_6613;

  $bb13:
    assume out_$i35 == 1;
    assume {:verifier.code 0} true;
    out_$p10 := out_$p27;
    goto $bb13_dummy;

  corral_source_split_6642:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_6641:
    assume {:verifier.code 0} true;
    out_$i35 := $ne.i64(out_$i34, $p2i.ref.i64(pd_device_list));
    goto corral_source_split_6642;

  corral_source_split_6640:
    assume {:verifier.code 0} true;
    out_$i34 := $p2i.ref.i64(out_$p33);
    goto corral_source_split_6641;

  corral_source_split_6639:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(out_$p28, $mul.ref(0, 3864)), $mul.ref(0, 1));
    goto corral_source_split_6640;

  corral_source_split_6638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1048} llvm.prefetch(out_$p32, 0, 3, 1);
    goto corral_source_split_6639;

  corral_source_split_6637:
    assume {:verifier.code 0} true;
    out_$p32 := $bitcast.ref.ref(out_$p31);
    goto corral_source_split_6638;

  corral_source_split_6636:
    assume {:verifier.code 0} true;
    out_$p31 := $load.ref($M.0, out_$p30);
    goto corral_source_split_6637;

  corral_source_split_6635:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref($add.ref(out_$p28, $mul.ref(0, 3864)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6636;

  corral_source_split_6634:
    assume {:verifier.code 0} true;
    out_$p28 := $bitcast.ref.ref(out_$p27);
    goto corral_source_split_6635;

  corral_source_split_6633:
    assume {:verifier.code 0} true;
    out_$p27 := $load.ref($M.0, out_$p26);
    goto corral_source_split_6634;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref($add.ref(out_$p10, $mul.ref(0, 3864)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6633;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i17 == 1);
    goto $bb8;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i21 == 1);
    goto $bb8;

  corral_source_split_6626:
    assume {:verifier.code 0} true;
    out_$p22 := out_$p10;
    assume true;
    goto $bb10;

  corral_source_split_6625:
    assume {:verifier.code 0} true;
    out_$i21 := $eq.i32(out_$i20, 1);
    goto corral_source_split_6626;

  corral_source_split_6624:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i32($M.0, out_$p19);
    goto corral_source_split_6625;

  corral_source_split_6623:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref($add.ref(out_$p10, $mul.ref(0, 3864)), $mul.ref(3768, 1)), $mul.ref(0, 1));
    goto corral_source_split_6624;

  $bb6:
    assume out_$i17 == 1;
    goto corral_source_split_6623;

  corral_source_split_6621:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    out_$i17 := $eq.i32(out_$i13, out_$i16);
    goto corral_source_split_6621;

  corral_source_split_6619:
    assume {:verifier.code 0} true;
    out_$i16 := $zext.i8.i32(out_$i15);
    goto corral_source_split_6620;

  corral_source_split_6618:
    assume {:verifier.code 0} true;
    out_$i15 := $load.i8($M.0, out_$p14);
    goto corral_source_split_6619;

  corral_source_split_6617:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1904)), $mul.ref(1530, 1));
    goto corral_source_split_6618;

  corral_source_split_6616:
    assume {:verifier.code 0} true;
    out_$i13 := $zext.i8.i32(out_$i12);
    goto corral_source_split_6617;

  corral_source_split_6615:
    assume {:verifier.code 0} true;
    out_$i12 := $load.i8($M.0, out_$p11);
    goto corral_source_split_6616;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(out_$p10, $mul.ref(0, 3864)), $mul.ref(3856, 1));
    goto corral_source_split_6615;

  corral_source_split_6613:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb13_dummy:
    call {:si_unique_call 1} out_$p11, out_$i12, out_$i13, out_$p14, out_$i15, out_$i16, out_$i17, out_$p19, out_$i20, out_$i21, out_$p22, out_$p26, out_$p27, out_$p28, out_$p30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$p10 := find_old_poseidon_loop_$bb4(in_$p0, out_$p11, out_$i12, out_$i13, out_$p14, out_$i15, out_$i16, out_$i17, out_$p19, out_$i20, out_$i21, out_$p22, out_$p26, out_$p27, out_$p28, out_$p30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$p10);
    return;

  exit:
    return;
}



procedure find_old_poseidon_loop_$bb4(in_$p0: ref, in_$p11: ref, in_$i12: i8, in_$i13: i32, in_$p14: ref, in_$i15: i8, in_$i16: i32, in_$i17: i1, in_$p19: ref, in_$i20: i32, in_$i21: i1, in_$p22: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$i35: i1, in_$p10: ref) returns (out_$p11: ref, out_$i12: i8, out_$i13: i32, out_$p14: ref, out_$i15: i8, out_$i16: i32, out_$i17: i1, out_$p19: ref, out_$i20: i32, out_$i21: i1, out_$p22: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$i34: i64, out_$i35: i1, out_$p10: ref);



implementation fixup_loop_$bb4(in_$p0: ref, in_$p10: ref, in_$p11: ref, in_$i12: i32, in_$i13: i1, in_$i9: i32) returns (out_$p10: ref, out_$p11: ref, out_$i12: i32, out_$i13: i1, out_$i9: i32)
{

  entry:
    out_$p10, out_$p11, out_$i12, out_$i13, out_$i9 := in_$p10, in_$p11, in_$i12, in_$i13, in_$i9;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_6995;

  $bb6:
    assume out_$i13 == 1;
    assume {:verifier.code 0} true;
    out_$i9 := out_$i12;
    goto $bb6_dummy;

  corral_source_split_7001:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_7000:
    assume {:verifier.code 0} true;
    out_$i13 := $ne.i32(out_$i9, 0);
    goto corral_source_split_7001;

  corral_source_split_6999:
    assume {:verifier.code 0} true;
    out_$i12 := $sub.i32(out_$i9, 1);
    call {:si_unique_call 1149} {:cexpr "count"} boogie_si_record_i32(out_$i12);
    goto corral_source_split_7000;

  corral_source_split_6998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1148} usb_autopm_put_interface(out_$p11);
    goto corral_source_split_6999;

  corral_source_split_6997:
    assume {:verifier.code 0} true;
    out_$p11 := $load.ref($M.0, out_$p10);
    goto corral_source_split_6998;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(in_$p0, $mul.ref(0, 3864)), $mul.ref(520, 1));
    goto corral_source_split_6997;

  corral_source_split_6995:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p10, out_$p11, out_$i12, out_$i13, out_$i9 := fixup_loop_$bb4(in_$p0, out_$p10, out_$p11, out_$i12, out_$i13, out_$i9);
    return;

  exit:
    return;
}



procedure fixup_loop_$bb4(in_$p0: ref, in_$p10: ref, in_$p11: ref, in_$i12: i32, in_$i13: i1, in_$i9: i32) returns (out_$p10: ref, out_$p11: ref, out_$i12: i32, out_$i13: i1, out_$i9: i32);



implementation firmware_download_loop_$bb12(in_$p0: ref, in_$p1: ref, in_$i11: i64, in_$p15: ref, in_$i25: i64, in_$i31: i64, in_$i32: i32, in_$i33: i32, in_$p34: ref, in_$i35: i1, in_$i36: i64, in_$i37: i32, in_$i38: i32, in_$i39: i1, in_$i40: i32, in_$i42: i64, in_$i43: i1, in_$i30: i64, in_$i44: i32) returns (out_$i31: i64, out_$i32: i32, out_$i33: i32, out_$p34: ref, out_$i35: i1, out_$i36: i64, out_$i37: i32, out_$i38: i32, out_$i39: i1, out_$i40: i32, out_$i42: i64, out_$i43: i1, out_$i30: i64, out_$i44: i32)
{

  entry:
    out_$i31, out_$i32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i42, out_$i43, out_$i30, out_$i44 := in_$i31, in_$i32, in_$i33, in_$p34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i42, in_$i43, in_$i30, in_$i44;
    goto $bb12, exit;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_7054;

  $bb21:
    assume out_$i43 == 1;
    assume {:verifier.code 0} true;
    out_$i30 := out_$i42;
    goto $bb21_dummy;

  corral_source_split_7078:
    assume {:verifier.code 0} true;
    out_$i44 := out_$i38;
    assume true;
    goto $bb21;

  corral_source_split_7077:
    assume {:verifier.code 0} true;
    out_$i43 := $ult.i64(out_$i42, in_$i11);
    goto corral_source_split_7078;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i42 := $add.i64(out_$i30, in_$i25);
    call {:si_unique_call 1169} {:cexpr "offset"} boogie_si_record_i64(out_$i42);
    goto corral_source_split_7077;

  $bb18:
    assume !(out_$i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_7070:
    assume {:verifier.code 0} true;
    out_$i40 := out_$i38;
    assume true;
    goto $bb18;

  corral_source_split_7069:
    assume {:verifier.code 0} true;
    out_$i39 := $ne.i32(out_$i38, 0);
    goto corral_source_split_7070;

  corral_source_split_7068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1166} out_$i38 := usb_bulk_msg(in_$p0, out_$i33, out_$p34, out_$i37, in_$p1, 2500);
    call {:si_unique_call 1167} {:cexpr "ret"} boogie_si_record_i32(out_$i38);
    goto corral_source_split_7069;

  corral_source_split_7067:
    assume {:verifier.code 0} true;
    out_$i37 := $trunc.i64.i32(out_$i36);
    goto corral_source_split_7068;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_7067;

  corral_source_split_7065:
    assume {:verifier.code 0} true;
    out_$i36 := out_$i31;
    goto $bb16;

  corral_source_split_7063:
    assume {:verifier.code 0} true;
    out_$i36 := in_$i25;
    goto $bb16;

  $bb14:
    assume out_$i35 == 1;
    goto corral_source_split_7063;

  corral_source_split_7061:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_7060:
    assume {:verifier.code 0} true;
    out_$i35 := $ult.i64(in_$i25, out_$i31);
    goto corral_source_split_7061;

  corral_source_split_7059:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref(in_$p15, $mul.ref(out_$i30, 1));
    goto corral_source_split_7060;

  corral_source_split_7058:
    assume {:verifier.code 0} true;
    out_$i33 := $or.i32(out_$i32, $sub.i32(0, 1073741824));
    goto corral_source_split_7059;

  corral_source_split_7057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1164} out_$i32 := __create_pipe(in_$p0, 1);
    call {:si_unique_call 1165} {:cexpr "tmp"} boogie_si_record_i32(out_$i32);
    goto corral_source_split_7058;

  corral_source_split_7056:
    assume {:verifier.code 0} true;
    out_$i31 := $sub.i64(in_$i11, out_$i30);
    call {:si_unique_call 1163} {:cexpr "_min2"} boogie_si_record_i64(out_$i31);
    goto corral_source_split_7057;

  $bb13:
    assume {:verifier.code 0} true;
    $M.41 := $store.i32($M.41, in_$p1, 0);
    goto corral_source_split_7056;

  corral_source_split_7054:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb15:
    assume !(out_$i35 == 1);
    goto corral_source_split_7065;

  $bb21_dummy:
    call {:si_unique_call 1} out_$i31, out_$i32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i42, out_$i43, out_$i30, out_$i44 := firmware_download_loop_$bb12(in_$p0, in_$p1, in_$i11, in_$p15, in_$i25, out_$i31, out_$i32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i42, out_$i43, out_$i30, out_$i44);
    return;

  exit:
    return;
}



procedure firmware_download_loop_$bb12(in_$p0: ref, in_$p1: ref, in_$i11: i64, in_$p15: ref, in_$i25: i64, in_$i31: i64, in_$i32: i32, in_$i33: i32, in_$p34: ref, in_$i35: i1, in_$i36: i64, in_$i37: i32, in_$i38: i32, in_$i39: i1, in_$i40: i32, in_$i42: i64, in_$i43: i1, in_$i30: i64, in_$i44: i32) returns (out_$i31: i64, out_$i32: i32, out_$i33: i32, out_$p34: ref, out_$i35: i1, out_$i36: i64, out_$i37: i32, out_$i38: i32, out_$i39: i1, out_$i40: i32, out_$i42: i64, out_$i43: i1, out_$i30: i64, out_$i44: i32);
  modifies $M.41;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();



implementation main_loop_$bb1(in_$p0: ref, in_$i1: i64, in_$p2: ref, in_$p4: ref, in_$p6: ref, in_$i8: i32, in_$i9: i1, in_$i10: i1, in_$i11: i1, in_$i12: i1, in_$i13: i1, in_$i14: i1, in_$i15: i1, in_$i16: i1, in_$i17: i1, in_$i18: i1, in_$i19: i1, in_$i20: i1, in_$i21: i1, in_$i22: i32, in_$i23: i1, in_$i24: i32, in_$i25: i1, in_$i26: i32, in_$i27: i1, in_$i28: i32, in_$i29: i1, in_$i30: i32, in_$i31: i1, in_$i32: i32, in_$i33: i1, in_$i34: i32, in_$i35: i1, in_$i36: i32, in_$i37: i1, in_$i39: i32, in_$i40: i1, in_$i41: i32, in_$i42: i1, in_$i43: i32, in_$i44: i1, in_$i45: i1, in_$i46: i1, in_$i47: i1, in_$i48: i1, in_$i49: i1, in_$i50: i32, in_$i51: i1, in_$p52: ref, in_$i53: i32, in_$i54: i32, in_$i55: i1, in_$i56: i32, in_$i57: i32, in_$i58: i32, in_$i59: i1, in_$p60: ref, in_$p61: ref, in_$i62: i32, in_$i63: i32, in_$i64: i32, in_$i65: i1, in_$i66: i32, in_$i67: i1, in_$p68: ref, in_$i69: i32, in_$i70: i32, in_$i71: i1, in_$i72: i32, in_$i73: i1, in_$i74: i32, in_$i75: i1, in_$p76: ref, in_$i77: i32, in_$i78: i32, in_$i79: i32, in_$i80: i1, in_$i81: i32, in_$i82: i1, in_$p83: ref, in_$i84: i32, in_$i85: i32, in_$i86: i32, in_$i87: i1, in_$i88: i32, in_$i89: i32, in_$i90: i1, in_$i91: i32, in_$i92: i1, in_$i93: i32, in_$i94: i1, in_$i95: i32, in_$i96: i1, in_$i97: i1, in_$i98: i1, in_$i99: i32, in_$i100: i1, in_$i101: i32, in_$i102: i1, in_$i103: i32, in_$i104: i1, in_$i105: i32, in_$i106: i32, in_$i107: i1, in_$i108: i32, in_$i109: i1, in_$i110: i32, in_$i111: i1, in_$i112: i32, in_$i113: i1, in_vslice_dummy_var_343: i32) returns (out_$i8: i32, out_$i9: i1, out_$i10: i1, out_$i11: i1, out_$i12: i1, out_$i13: i1, out_$i14: i1, out_$i15: i1, out_$i16: i1, out_$i17: i1, out_$i18: i1, out_$i19: i1, out_$i20: i1, out_$i21: i1, out_$i22: i32, out_$i23: i1, out_$i24: i32, out_$i25: i1, out_$i26: i32, out_$i27: i1, out_$i28: i32, out_$i29: i1, out_$i30: i32, out_$i31: i1, out_$i32: i32, out_$i33: i1, out_$i34: i32, out_$i35: i1, out_$i36: i32, out_$i37: i1, out_$i39: i32, out_$i40: i1, out_$i41: i32, out_$i42: i1, out_$i43: i32, out_$i44: i1, out_$i45: i1, out_$i46: i1, out_$i47: i1, out_$i48: i1, out_$i49: i1, out_$i50: i32, out_$i51: i1, out_$p52: ref, out_$i53: i32, out_$i54: i32, out_$i55: i1, out_$i56: i32, out_$i57: i32, out_$i58: i32, out_$i59: i1, out_$p60: ref, out_$p61: ref, out_$i62: i32, out_$i63: i32, out_$i64: i32, out_$i65: i1, out_$i66: i32, out_$i67: i1, out_$p68: ref, out_$i69: i32, out_$i70: i32, out_$i71: i1, out_$i72: i32, out_$i73: i1, out_$i74: i32, out_$i75: i1, out_$p76: ref, out_$i77: i32, out_$i78: i32, out_$i79: i32, out_$i80: i1, out_$i81: i32, out_$i82: i1, out_$p83: ref, out_$i84: i32, out_$i85: i32, out_$i86: i32, out_$i87: i1, out_$i88: i32, out_$i89: i32, out_$i90: i1, out_$i91: i32, out_$i92: i1, out_$i93: i32, out_$i94: i1, out_$i95: i32, out_$i96: i1, out_$i97: i1, out_$i98: i1, out_$i99: i32, out_$i100: i1, out_$i101: i32, out_$i102: i1, out_$i103: i32, out_$i104: i1, out_$i105: i32, out_$i106: i32, out_$i107: i1, out_$i108: i32, out_$i109: i1, out_$i110: i32, out_$i111: i1, out_$i112: i32, out_$i113: i1, out_vslice_dummy_var_343: i32)
{

  entry:
    out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$p52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$p60, out_$p61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$p76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$p83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_vslice_dummy_var_343 := in_$i8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$p52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i59, in_$p60, in_$p61, in_$i62, in_$i63, in_$i64, in_$i65, in_$i66, in_$i67, in_$p68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i74, in_$i75, in_$p76, in_$i77, in_$i78, in_$i79, in_$i80, in_$i81, in_$i82, in_$p83, in_$i84, in_$i85, in_$i86, in_$i87, in_$i88, in_$i89, in_$i90, in_$i91, in_$i92, in_$i93, in_$i94, in_$i95, in_$i96, in_$i97, in_$i98, in_$i99, in_$i100, in_$i101, in_$i102, in_$i103, in_$i104, in_$i105, in_$i106, in_$i107, in_$i108, in_$i109, in_$i110, in_$i111, in_$i112, in_$i113, in_vslice_dummy_var_343;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1627} out_$i8 := __VERIFIER_nondet_int();
    call {:si_unique_call 1628} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i8);
    call {:si_unique_call 1629} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i8);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb33_dummy;

  $bb157:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb155:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb152:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb149:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb119:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb116:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb31:
    assume !(out_$i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_8506:
    assume {:verifier.code 0} true;
    goto $bb32;

  SeqInstr_471:
    goto corral_source_split_8506;

  SeqInstr_470:
    assume assertsPassed;
    goto SeqInstr_471;

  corral_source_split_8505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1630} ldv_main_exported_6();
    goto SeqInstr_470;

  $bb30:
    assume out_$i23 == 1;
    goto corral_source_split_8505;

  corral_source_split_8503:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  corral_source_split_8502:
    assume {:verifier.code 0} true;
    out_$i23 := $ne.i32(out_$i22, 0);
    goto corral_source_split_8503;

  corral_source_split_8501:
    assume {:verifier.code 0} true;
    out_$i22 := $M.69;
    goto corral_source_split_8502;

  $bb28:
    assume out_$i21 == 1;
    goto corral_source_split_8501;

  $bb24:
    assume out_$i19 == 1;
    assume {:verifier.code 0} true;
    out_$i21 := $eq.i32(out_$i8, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb18:
    assume out_$i16 == 1;
    assume {:verifier.code 0} true;
    out_$i19 := $slt.i32(out_$i8, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb3:
    assume out_$i9 == 1;
    assume {:verifier.code 0} true;
    out_$i16 := $slt.i32(out_$i8, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i9 := $slt.i32(out_$i8, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb35:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_8509:
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_8508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1631} ldv_main_exported_11();
    goto corral_source_split_8509;

  $bb34:
    assume out_$i25 == 1;
    goto corral_source_split_8508;

  corral_source_split_8495:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  corral_source_split_8494:
    assume {:verifier.code 0} true;
    out_$i25 := $ne.i32(out_$i24, 0);
    goto corral_source_split_8495;

  corral_source_split_8493:
    assume {:verifier.code 0} true;
    out_$i24 := $M.55;
    goto corral_source_split_8494;

  $bb26:
    assume out_$i20 == 1;
    goto corral_source_split_8493;

  $bb25:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    out_$i20 := $slt.i32(out_$i8, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb38:
    assume !(out_$i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  corral_source_split_8512:
    assume {:verifier.code 0} true;
    goto $bb39;

  corral_source_split_8511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1632} ldv_main_exported_3();
    goto corral_source_split_8512;

  $bb37:
    assume out_$i27 == 1;
    goto corral_source_split_8511;

  corral_source_split_8499:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  corral_source_split_8498:
    assume {:verifier.code 0} true;
    out_$i27 := $ne.i32(out_$i26, 0);
    goto corral_source_split_8499;

  corral_source_split_8497:
    assume {:verifier.code 0} true;
    out_$i26 := $M.79;
    goto corral_source_split_8498;

  $bb27:
    assume !(out_$i20 == 1);
    goto corral_source_split_8497;

  $bb41:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  corral_source_split_8515:
    assume {:verifier.code 0} true;
    goto $bb42;

  corral_source_split_8514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1633} ldv_main_exported_7();
    goto corral_source_split_8515;

  $bb40:
    assume out_$i29 == 1;
    goto corral_source_split_8514;

  corral_source_split_8483:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  corral_source_split_8482:
    assume {:verifier.code 0} true;
    out_$i29 := $ne.i32(out_$i28, 0);
    goto corral_source_split_8483;

  corral_source_split_8481:
    assume {:verifier.code 0} true;
    out_$i28 := $M.64;
    goto corral_source_split_8482;

  $bb20:
    assume out_$i17 == 1;
    goto corral_source_split_8481;

  $bb19:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    out_$i17 := $slt.i32(out_$i8, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb44:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  corral_source_split_8518:
    assume {:verifier.code 0} true;
    goto $bb45;

  SeqInstr_474:
    goto corral_source_split_8518;

  SeqInstr_473:
    assume assertsPassed;
    goto SeqInstr_474;

  corral_source_split_8517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1634} ldv_main_exported_9();
    goto SeqInstr_473;

  $bb43:
    assume out_$i31 == 1;
    goto corral_source_split_8517;

  corral_source_split_8487:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  corral_source_split_8486:
    assume {:verifier.code 0} true;
    out_$i31 := $ne.i32(out_$i30, 0);
    goto corral_source_split_8487;

  corral_source_split_8485:
    assume {:verifier.code 0} true;
    out_$i30 := $M.61;
    goto corral_source_split_8486;

  $bb22:
    assume out_$i18 == 1;
    goto corral_source_split_8485;

  $bb21:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    out_$i18 := $slt.i32(out_$i8, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb47:
    assume !(out_$i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb52:
    assume !(out_$i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  corral_source_split_8528:
    assume {:verifier.code 0} true;
    goto $bb53;

  corral_source_split_8527:
    assume {:verifier.code 0} true;
    $M.83 := 1;
    call {:si_unique_call 1639} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_8528;

  SeqInstr_477:
    goto corral_source_split_8527;

  SeqInstr_476:
    assume assertsPassed;
    goto SeqInstr_477;

  corral_source_split_8526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1638} out_vslice_dummy_var_343 := pm_notifier_block(in_$p4, in_$i1, in_$p2);
    goto SeqInstr_476;

  $bb51:
    assume out_$i37 == 1;
    goto corral_source_split_8526;

  corral_source_split_8524:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  corral_source_split_8523:
    assume {:verifier.code 0} true;
    out_$i37 := $eq.i32(out_$i36, 1);
    goto corral_source_split_8524;

  corral_source_split_8522:
    assume {:verifier.code 0} true;
    out_$i36 := $M.83;
    goto corral_source_split_8523;

  $bb49:
    assume out_$i35 == 1;
    goto corral_source_split_8522;

  $bb48:
    assume {:verifier.code 0} true;
    out_$i35 := $eq.i32(out_$i34, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  corral_source_split_8520:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1635} out_$i34 := __VERIFIER_nondet_int();
    call {:si_unique_call 1636} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i34);
    call {:si_unique_call 1637} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i34);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb46:
    assume out_$i33 == 1;
    goto corral_source_split_8520;

  corral_source_split_8491:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  corral_source_split_8490:
    assume {:verifier.code 0} true;
    out_$i33 := $ne.i32(out_$i32, 0);
    goto corral_source_split_8491;

  corral_source_split_8489:
    assume {:verifier.code 0} true;
    out_$i32 := $M.83;
    goto corral_source_split_8490;

  $bb23:
    assume !(out_$i18 == 1);
    goto corral_source_split_8489;

  corral_source_split_8530:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1640} ldv_stop();
    goto corral_source_split_8530;

  $bb50:
    assume !(out_$i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb59:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  corral_source_split_8533:
    assume {:verifier.code 0} true;
    goto $bb60;

  corral_source_split_8532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1641} ldv_main_exported_8();
    goto corral_source_split_8533;

  $bb58:
    assume out_$i40 == 1;
    goto corral_source_split_8532;

  corral_source_split_8471:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  corral_source_split_8470:
    assume {:verifier.code 0} true;
    out_$i40 := $ne.i32(out_$i39, 0);
    goto corral_source_split_8471;

  corral_source_split_8469:
    assume {:verifier.code 0} true;
    out_$i39 := $M.52;
    goto corral_source_split_8470;

  $bb14:
    assume out_$i14 == 1;
    goto corral_source_split_8469;

  $bb5:
    assume out_$i10 == 1;
    assume {:verifier.code 0} true;
    out_$i14 := $slt.i32(out_$i8, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb4:
    assume !(out_$i9 == 1);
    assume {:verifier.code 0} true;
    out_$i10 := $slt.i32(out_$i8, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb62:
    assume !(out_$i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb115:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb113:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb107:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb95:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb78:
    assume !(out_$i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb80:
    assume !(out_$i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  corral_source_split_8568:
    assume {:verifier.code 0} true;
    goto $bb81;

  corral_source_split_8567:
    assume {:verifier.code 0} true;
    $M.53 := out_$i57;
    call {:si_unique_call 1648} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i57);
    goto corral_source_split_8568;

  corral_source_split_8566:
    assume {:verifier.code 0} true;
    out_$i57 := $add.i32(out_$i56, 1);
    goto corral_source_split_8567;

  corral_source_split_8565:
    assume {:verifier.code 0} true;
    out_$i56 := $M.53;
    goto corral_source_split_8566;

  corral_source_split_8564:
    assume {:verifier.code 0} true;
    $M.84 := 2;
    call {:si_unique_call 1647} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_8565;

  $bb79:
    assume out_$i55 == 1;
    goto corral_source_split_8564;

  corral_source_split_8562:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  corral_source_split_8561:
    assume {:verifier.code 0} true;
    out_$i55 := $eq.i32(out_$i54, 0);
    goto corral_source_split_8562;

  corral_source_split_8560:
    assume {:verifier.code 0} true;
    out_$i54 := $M.86;
    goto corral_source_split_8561;

  corral_source_split_8559:
    assume {:verifier.code 0} true;
    $M.86 := out_$i53;
    call {:si_unique_call 1646} {:cexpr "ldv_retval_7"} boogie_si_record_i32(out_$i53);
    goto corral_source_split_8560;

  corral_source_split_8558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1645} out_$i53 := poseidon_probe(out_$p52, in_$p6);
    goto corral_source_split_8559;

  corral_source_split_8557:
    assume {:verifier.code 0} true;
    out_$p52 := $M.62;
    goto corral_source_split_8558;

  $bb77:
    assume out_$i51 == 1;
    goto corral_source_split_8557;

  corral_source_split_8555:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  corral_source_split_8554:
    assume {:verifier.code 0} true;
    out_$i51 := $eq.i32(out_$i50, 1);
    goto corral_source_split_8555;

  corral_source_split_8553:
    assume {:verifier.code 0} true;
    out_$i50 := $M.84;
    goto corral_source_split_8554;

  $bb75:
    assume out_$i49 == 1;
    goto corral_source_split_8553;

  $bb73:
    assume out_$i48 == 1;
    assume {:verifier.code 0} true;
    out_$i49 := $eq.i32(out_$i43, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb64:
    assume out_$i44 == 1;
    assume {:verifier.code 0} true;
    out_$i48 := $slt.i32(out_$i43, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb63:
    assume {:verifier.code 0} true;
    out_$i44 := $slt.i32(out_$i43, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  corral_source_split_8535:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1642} out_$i43 := __VERIFIER_nondet_int();
    call {:si_unique_call 1643} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i43);
    call {:si_unique_call 1644} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i43);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb61:
    assume out_$i42 == 1;
    goto corral_source_split_8535;

  corral_source_split_8475:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  corral_source_split_8474:
    assume {:verifier.code 0} true;
    out_$i42 := $ne.i32(out_$i41, 0);
    goto corral_source_split_8475;

  corral_source_split_8473:
    assume {:verifier.code 0} true;
    out_$i41 := $M.84;
    goto corral_source_split_8474;

  $bb16:
    assume out_$i15 == 1;
    goto corral_source_split_8473;

  $bb15:
    assume !(out_$i14 == 1);
    assume {:verifier.code 0} true;
    out_$i15 := $slt.i32(out_$i8, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb85:
    assume !(out_$i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb88:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb87:
    assume !(out_$i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  corral_source_split_8580:
    assume {:verifier.code 0} true;
    goto $bb88;

  corral_source_split_8579:
    assume {:verifier.code 0} true;
    $M.84 := 3;
    call {:si_unique_call 1651} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_8580;

  $bb86:
    assume out_$i65 == 1;
    goto corral_source_split_8579;

  corral_source_split_8577:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  corral_source_split_8576:
    assume {:verifier.code 0} true;
    out_$i65 := $eq.i32(out_$i64, 0);
    goto corral_source_split_8577;

  corral_source_split_8575:
    assume {:verifier.code 0} true;
    out_$i64 := $M.87;
    goto corral_source_split_8576;

  corral_source_split_8574:
    assume {:verifier.code 0} true;
    $M.87 := out_$i63;
    call {:si_unique_call 1650} {:cexpr "ldv_retval_6"} boogie_si_record_i32(out_$i63);
    goto corral_source_split_8575;

  SeqInstr_480:
    goto corral_source_split_8574;

  SeqInstr_479:
    assume assertsPassed;
    goto SeqInstr_480;

  corral_source_split_8573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1649} out_$i63 := poseidon_suspend(out_$p60, out_$i62);
    goto SeqInstr_479;

  corral_source_split_8572:
    assume {:verifier.code 0} true;
    out_$i62 := $load.i32($M.82, out_$p61);
    goto corral_source_split_8573;

  corral_source_split_8571:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(in_$p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_8572;

  corral_source_split_8570:
    assume {:verifier.code 0} true;
    out_$p60 := $M.62;
    goto corral_source_split_8571;

  $bb84:
    assume out_$i59 == 1;
    goto corral_source_split_8570;

  corral_source_split_8551:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  corral_source_split_8550:
    assume {:verifier.code 0} true;
    out_$i59 := $eq.i32(out_$i58, 2);
    goto corral_source_split_8551;

  corral_source_split_8549:
    assume {:verifier.code 0} true;
    out_$i58 := $M.84;
    goto corral_source_split_8550;

  $bb74:
    assume !(out_$i48 == 1);
    goto corral_source_split_8549;

  $bb91:
    assume !(out_$i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb93:
    assume !(out_$i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb94;

  corral_source_split_8590:
    assume {:verifier.code 0} true;
    goto $bb94;

  corral_source_split_8589:
    assume {:verifier.code 0} true;
    $M.84 := 2;
    call {:si_unique_call 1654} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_8590;

  $bb92:
    assume out_$i71 == 1;
    goto corral_source_split_8589;

  corral_source_split_8587:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  corral_source_split_8586:
    assume {:verifier.code 0} true;
    out_$i71 := $eq.i32(out_$i70, 0);
    goto corral_source_split_8587;

  corral_source_split_8585:
    assume {:verifier.code 0} true;
    out_$i70 := $M.88;
    goto corral_source_split_8586;

  corral_source_split_8584:
    assume {:verifier.code 0} true;
    $M.88 := out_$i69;
    call {:si_unique_call 1653} {:cexpr "ldv_retval_5"} boogie_si_record_i32(out_$i69);
    goto corral_source_split_8585;

  SeqInstr_483:
    goto corral_source_split_8584;

  SeqInstr_482:
    assume assertsPassed;
    goto SeqInstr_483;

  corral_source_split_8583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1652} out_$i69 := poseidon_resume(out_$p68);
    goto SeqInstr_482;

  corral_source_split_8582:
    assume {:verifier.code 0} true;
    out_$p68 := $M.62;
    goto corral_source_split_8583;

  $bb90:
    assume out_$i67 == 1;
    goto corral_source_split_8582;

  corral_source_split_8539:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  corral_source_split_8538:
    assume {:verifier.code 0} true;
    out_$i67 := $eq.i32(out_$i66, 3);
    goto corral_source_split_8539;

  corral_source_split_8537:
    assume {:verifier.code 0} true;
    out_$i66 := $M.84;
    goto corral_source_split_8538;

  $bb66:
    assume out_$i45 == 1;
    goto corral_source_split_8537;

  $bb65:
    assume !(out_$i44 == 1);
    assume {:verifier.code 0} true;
    out_$i45 := $slt.i32(out_$i43, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb104:
    assume {:verifier.code 0} true;
    goto $bb107;

  corral_source_split_8617:
    assume {:verifier.code 0} true;
    goto $bb107;

  corral_source_split_8616:
    assume {:verifier.code 0} true;
    $M.53 := out_$i85;
    call {:si_unique_call 1660} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i85);
    goto corral_source_split_8617;

  corral_source_split_8615:
    assume {:verifier.code 0} true;
    out_$i85 := $sub.i32(out_$i84, 1);
    goto corral_source_split_8616;

  corral_source_split_8614:
    assume {:verifier.code 0} true;
    out_$i84 := $M.53;
    goto corral_source_split_8615;

  corral_source_split_8613:
    assume {:verifier.code 0} true;
    $M.84 := 1;
    call {:si_unique_call 1659} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_8614;

  SeqInstr_489:
    goto corral_source_split_8613;

  SeqInstr_488:
    assume assertsPassed;
    goto SeqInstr_489;

  corral_source_split_8612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1658} poseidon_disconnect(out_$p83);
    goto SeqInstr_488;

  corral_source_split_8611:
    assume {:verifier.code 0} true;
    out_$p83 := $M.62;
    goto corral_source_split_8612;

  $bb105:
    assume out_$i82 == 1;
    goto corral_source_split_8611;

  corral_source_split_8609:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  corral_source_split_8608:
    assume {:verifier.code 0} true;
    out_$i82 := $eq.i32(out_$i81, 0);
    goto corral_source_split_8609;

  corral_source_split_8607:
    assume {:verifier.code 0} true;
    out_$i81 := $M.89;
    goto corral_source_split_8608;

  $bb102:
    assume out_$i80 == 1;
    goto corral_source_split_8607;

  corral_source_split_8605:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb102, $bb103;

  corral_source_split_8604:
    assume {:verifier.code 0} true;
    out_$i80 := $eq.i32(out_$i79, 2);
    goto corral_source_split_8605;

  $bb101:
    assume {:verifier.code 0} true;
    out_$i79 := $M.84;
    goto corral_source_split_8604;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb101;

  corral_source_split_8602:
    assume {:verifier.code 0} true;
    goto $bb101;

  corral_source_split_8601:
    assume {:verifier.code 0} true;
    $M.53 := out_$i78;
    call {:si_unique_call 1657} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i78);
    goto corral_source_split_8602;

  corral_source_split_8600:
    assume {:verifier.code 0} true;
    out_$i78 := $sub.i32(out_$i77, 1);
    goto corral_source_split_8601;

  corral_source_split_8599:
    assume {:verifier.code 0} true;
    out_$i77 := $M.53;
    goto corral_source_split_8600;

  corral_source_split_8598:
    assume {:verifier.code 0} true;
    $M.84 := 1;
    call {:si_unique_call 1656} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_8599;

  SeqInstr_486:
    goto corral_source_split_8598;

  SeqInstr_485:
    assume assertsPassed;
    goto SeqInstr_486;

  corral_source_split_8597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1655} poseidon_disconnect(out_$p76);
    goto SeqInstr_485;

  corral_source_split_8596:
    assume {:verifier.code 0} true;
    out_$p76 := $M.62;
    goto corral_source_split_8597;

  $bb99:
    assume out_$i75 == 1;
    goto corral_source_split_8596;

  corral_source_split_8594:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  corral_source_split_8593:
    assume {:verifier.code 0} true;
    out_$i75 := $eq.i32(out_$i74, 0);
    goto corral_source_split_8594;

  corral_source_split_8592:
    assume {:verifier.code 0} true;
    out_$i74 := $M.89;
    goto corral_source_split_8593;

  $bb96:
    assume out_$i73 == 1;
    goto corral_source_split_8592;

  corral_source_split_8543:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  corral_source_split_8542:
    assume {:verifier.code 0} true;
    out_$i73 := $eq.i32(out_$i72, 3);
    goto corral_source_split_8543;

  corral_source_split_8541:
    assume {:verifier.code 0} true;
    out_$i72 := $M.84;
    goto corral_source_split_8542;

  $bb68:
    assume out_$i46 == 1;
    goto corral_source_split_8541;

  $bb67:
    assume !(out_$i45 == 1);
    assume {:verifier.code 0} true;
    out_$i46 := $slt.i32(out_$i43, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb97:
    assume {:verifier.code 0} true;
    assume !(out_$i73 == 1);
    goto $bb98;

  $bb100:
    assume {:verifier.code 0} true;
    assume !(out_$i75 == 1);
    goto $bb98;

  $bb103:
    assume {:verifier.code 0} true;
    assume !(out_$i80 == 1);
    goto $bb104;

  $bb106:
    assume {:verifier.code 0} true;
    assume !(out_$i82 == 1);
    goto $bb104;

  $bb109:
    assume !(out_$i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb112:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb111:
    assume !(out_$i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb112;

  corral_source_split_8626:
    assume {:verifier.code 0} true;
    goto $bb112;

  corral_source_split_8625:
    assume {:verifier.code 0} true;
    $M.84 := 2;
    call {:si_unique_call 1663} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_8626;

  $bb110:
    assume out_$i90 == 1;
    goto corral_source_split_8625;

  corral_source_split_8623:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  corral_source_split_8622:
    assume {:verifier.code 0} true;
    out_$i90 := $eq.i32(out_$i89, 0);
    goto corral_source_split_8623;

  corral_source_split_8621:
    assume {:verifier.code 0} true;
    out_$i89 := $M.90;
    goto corral_source_split_8622;

  corral_source_split_8620:
    assume {:verifier.code 0} true;
    $M.90 := out_$i88;
    call {:si_unique_call 1662} {:cexpr "ldv_retval_4"} boogie_si_record_i32(out_$i88);
    goto corral_source_split_8621;

  corral_source_split_8619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1661} out_$i88 := ldv_reset_resume_1();
    goto corral_source_split_8620;

  $bb108:
    assume out_$i87 == 1;
    goto corral_source_split_8619;

  corral_source_split_8547:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb108, $bb109;

  corral_source_split_8546:
    assume {:verifier.code 0} true;
    out_$i87 := $eq.i32(out_$i86, 3);
    goto corral_source_split_8547;

  corral_source_split_8545:
    assume {:verifier.code 0} true;
    out_$i86 := $M.84;
    goto corral_source_split_8546;

  $bb70:
    assume out_$i47 == 1;
    goto corral_source_split_8545;

  $bb69:
    assume !(out_$i46 == 1);
    assume {:verifier.code 0} true;
    out_$i47 := $eq.i32(out_$i43, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  corral_source_split_8628:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1664} ldv_stop();
    goto corral_source_split_8628;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb71:
    assume {:verifier.code 0} true;
    assume !(out_$i47 == 1);
    goto $bb72;

  $bb76:
    assume {:verifier.code 0} true;
    assume !(out_$i49 == 1);
    goto $bb72;

  $bb118:
    assume !(out_$i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb119;

  corral_source_split_8631:
    assume {:verifier.code 0} true;
    goto $bb119;

  SeqInstr_492:
    goto corral_source_split_8631;

  SeqInstr_491:
    assume assertsPassed;
    goto SeqInstr_492;

  corral_source_split_8630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1665} ldv_main_exported_4();
    goto SeqInstr_491;

  $bb117:
    assume out_$i92 == 1;
    goto corral_source_split_8630;

  corral_source_split_8479:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb117, $bb118;

  corral_source_split_8478:
    assume {:verifier.code 0} true;
    out_$i92 := $ne.i32(out_$i91, 0);
    goto corral_source_split_8479;

  corral_source_split_8477:
    assume {:verifier.code 0} true;
    out_$i91 := $M.78;
    goto corral_source_split_8478;

  $bb17:
    assume !(out_$i15 == 1);
    goto corral_source_split_8477;

  $bb121:
    assume !(out_$i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb137:
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb148:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb146:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb136:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb132:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb131:
    assume {:verifier.code 0} true;
    assume !(out_$i100 == 1);
    goto $bb132;

  $bb134:
    assume {:verifier.code 0} true;
    assume !(out_$i102 == 1);
    goto $bb132;

  corral_source_split_8645:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb134;

  corral_source_split_8644:
    assume {:verifier.code 0} true;
    out_$i102 := $eq.i32(out_$i101, 0);
    goto corral_source_split_8645;

  corral_source_split_8643:
    assume {:verifier.code 0} true;
    out_$i101 := $M.53;
    goto corral_source_split_8644;

  $bb130:
    assume out_$i100 == 1;
    goto corral_source_split_8643;

  corral_source_split_8641:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  corral_source_split_8640:
    assume {:verifier.code 0} true;
    out_$i100 := $eq.i32(out_$i99, 2);
    goto corral_source_split_8641;

  corral_source_split_8639:
    assume {:verifier.code 0} true;
    out_$i99 := $M.85;
    goto corral_source_split_8640;

  $bb128:
    assume out_$i98 == 1;
    goto corral_source_split_8639;

  $bb123:
    assume out_$i96 == 1;
    assume {:verifier.code 0} true;
    out_$i98 := $eq.i32(out_$i95, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb128, $bb129;

  $bb122:
    assume {:verifier.code 0} true;
    out_$i96 := $slt.i32(out_$i95, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb123, $bb124;

  corral_source_split_8633:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1666} out_$i95 := __VERIFIER_nondet_int();
    call {:si_unique_call 1667} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i95);
    call {:si_unique_call 1668} {:cexpr "tmp___6"} boogie_si_record_i32(out_$i95);
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb120:
    assume out_$i94 == 1;
    goto corral_source_split_8633;

  corral_source_split_8459:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb120, $bb121;

  corral_source_split_8458:
    assume {:verifier.code 0} true;
    out_$i94 := $ne.i32(out_$i93, 0);
    goto corral_source_split_8459;

  corral_source_split_8457:
    assume {:verifier.code 0} true;
    out_$i93 := $M.85;
    goto corral_source_split_8458;

  $bb7:
    assume out_$i11 == 1;
    goto corral_source_split_8457;

  $bb6:
    assume !(out_$i10 == 1);
    assume {:verifier.code 0} true;
    out_$i11 := $slt.i32(out_$i8, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb139:
    assume !(out_$i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb145:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb144:
    assume !(out_$i109 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  corral_source_split_8683:
    assume {:verifier.code 0} true;
    goto $bb145;

  corral_source_split_8682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1692} ldv_initialize_dvb_frontend_ops_6();
    goto corral_source_split_8683;

  corral_source_split_8681:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 1691} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_8682;

  corral_source_split_8680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1690} ldv_videobuf_queue_ops_11();
    goto corral_source_split_8681;

  corral_source_split_8679:
    assume {:verifier.code 0} true;
    $M.55 := 1;
    call {:si_unique_call 1689} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_8680;

  corral_source_split_8678:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 1688} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_8679;

  corral_source_split_8677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1687} ldv_initialize_snd_pcm_ops_7();
    goto corral_source_split_8678;

  corral_source_split_8676:
    assume {:verifier.code 0} true;
    $M.64 := 1;
    call {:si_unique_call 1686} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_8677;

  corral_source_split_8675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1685} ldv_initialize_v4l2_ioctl_ops_9();
    goto corral_source_split_8676;

  corral_source_split_8674:
    assume {:verifier.code 0} true;
    $M.61 := 1;
    call {:si_unique_call 1684} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_8675;

  corral_source_split_8673:
    assume {:verifier.code 0} true;
    $M.83 := 1;
    call {:si_unique_call 1683} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_8674;

  corral_source_split_8672:
    assume {:verifier.code 0} true;
    $M.52 := 1;
    call {:si_unique_call 1682} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_8673;

  corral_source_split_8671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1681} ldv_initialize_v4l2_ioctl_ops_4();
    goto corral_source_split_8672;

  corral_source_split_8670:
    assume {:verifier.code 0} true;
    $M.78 := 1;
    call {:si_unique_call 1680} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8671;

  corral_source_split_8669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1679} ldv_initialize_v4l2_file_operations_10();
    goto corral_source_split_8670;

  corral_source_split_8668:
    assume {:verifier.code 0} true;
    $M.57 := 1;
    call {:si_unique_call 1678} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_8669;

  corral_source_split_8667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1677} ldv_initialize_v4l2_file_operations_5();
    goto corral_source_split_8668;

  corral_source_split_8666:
    assume {:verifier.code 0} true;
    $M.80 := 1;
    call {:si_unique_call 1676} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8667;

  corral_source_split_8665:
    assume {:verifier.code 0} true;
    $M.85 := 2;
    call {:si_unique_call 1675} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_8666;

  $bb143:
    assume out_$i109 == 1;
    goto corral_source_split_8665;

  corral_source_split_8663:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb143, $bb144;

  corral_source_split_8662:
    assume {:verifier.code 0} true;
    out_$i109 := $eq.i32(out_$i108, 0);
    goto corral_source_split_8663;

  $bb142:
    assume {:verifier.code 0} true;
    out_$i108 := $M.91;
    goto corral_source_split_8662;

  $bb141:
    assume !(out_$i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb142;

  corral_source_split_8657:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb141;

  corral_source_split_8656:
    assume {:verifier.code 0} true;
    out_$i107 := $ne.i32(out_$i106, 0);
    goto corral_source_split_8657;

  corral_source_split_8655:
    assume {:verifier.code 0} true;
    out_$i106 := $M.91;
    goto corral_source_split_8656;

  corral_source_split_8654:
    assume {:verifier.code 0} true;
    $M.91 := out_$i105;
    call {:si_unique_call 1673} {:cexpr "ldv_retval_8"} boogie_si_record_i32(out_$i105);
    goto corral_source_split_8655;

  corral_source_split_8653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1672} out_$i105 := poseidon_init();
    goto corral_source_split_8654;

  $bb138:
    assume out_$i104 == 1;
    goto corral_source_split_8653;

  corral_source_split_8637:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb138, $bb139;

  corral_source_split_8636:
    assume {:verifier.code 0} true;
    out_$i104 := $eq.i32(out_$i103, 1);
    goto corral_source_split_8637;

  corral_source_split_8635:
    assume {:verifier.code 0} true;
    out_$i103 := $M.85;
    goto corral_source_split_8636;

  $bb125:
    assume out_$i97 == 1;
    goto corral_source_split_8635;

  $bb124:
    assume !(out_$i96 == 1);
    assume {:verifier.code 0} true;
    out_$i97 := $eq.i32(out_$i95, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb125, $bb126;

  corral_source_split_8685:
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1693} ldv_stop();
    goto corral_source_split_8685;

  $bb127:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb126:
    assume {:verifier.code 0} true;
    assume !(out_$i97 == 1);
    goto $bb127;

  $bb129:
    assume {:verifier.code 0} true;
    assume !(out_$i98 == 1);
    goto $bb127;

  $bb151:
    assume !(out_$i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb152;

  corral_source_split_8688:
    assume {:verifier.code 0} true;
    goto $bb152;

  SeqInstr_498:
    goto corral_source_split_8688;

  SeqInstr_497:
    assume assertsPassed;
    goto SeqInstr_498;

  corral_source_split_8687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1694} ldv_main_exported_10();
    goto SeqInstr_497;

  $bb150:
    assume out_$i111 == 1;
    goto corral_source_split_8687;

  corral_source_split_8463:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb150, $bb151;

  corral_source_split_8462:
    assume {:verifier.code 0} true;
    out_$i111 := $ne.i32(out_$i110, 0);
    goto corral_source_split_8463;

  corral_source_split_8461:
    assume {:verifier.code 0} true;
    out_$i110 := $M.57;
    goto corral_source_split_8462;

  $bb9:
    assume out_$i12 == 1;
    goto corral_source_split_8461;

  $bb8:
    assume !(out_$i11 == 1);
    assume {:verifier.code 0} true;
    out_$i12 := $slt.i32(out_$i8, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb154:
    assume !(out_$i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb155;

  corral_source_split_8691:
    assume {:verifier.code 0} true;
    goto $bb155;

  SeqInstr_501:
    goto corral_source_split_8691;

  SeqInstr_500:
    assume assertsPassed;
    goto SeqInstr_501;

  corral_source_split_8690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1695} ldv_main_exported_5();
    goto SeqInstr_500;

  $bb153:
    assume out_$i113 == 1;
    goto corral_source_split_8690;

  corral_source_split_8467:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb153, $bb154;

  corral_source_split_8466:
    assume {:verifier.code 0} true;
    out_$i113 := $ne.i32(out_$i112, 0);
    goto corral_source_split_8467;

  corral_source_split_8465:
    assume {:verifier.code 0} true;
    out_$i112 := $M.80;
    goto corral_source_split_8466;

  $bb11:
    assume out_$i13 == 1;
    goto corral_source_split_8465;

  $bb10:
    assume !(out_$i12 == 1);
    assume {:verifier.code 0} true;
    out_$i13 := $eq.i32(out_$i8, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_8693:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1696} ldv_stop();
    goto corral_source_split_8693;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb12:
    assume {:verifier.code 0} true;
    assume !(out_$i13 == 1);
    goto $bb13;

  $bb29:
    assume {:verifier.code 0} true;
    assume !(out_$i21 == 1);
    goto $bb13;

  $bb33_dummy:
    call {:si_unique_call 1} out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$p52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$p60, out_$p61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$p76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$p83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_vslice_dummy_var_343 := main_loop_$bb1(in_$p0, in_$i1, in_$p2, in_$p4, in_$p6, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$p52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$p60, out_$p61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$p76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$p83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_vslice_dummy_var_343);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p0: ref, in_$i1: i64, in_$p2: ref, in_$p4: ref, in_$p6: ref, in_$i8: i32, in_$i9: i1, in_$i10: i1, in_$i11: i1, in_$i12: i1, in_$i13: i1, in_$i14: i1, in_$i15: i1, in_$i16: i1, in_$i17: i1, in_$i18: i1, in_$i19: i1, in_$i20: i1, in_$i21: i1, in_$i22: i32, in_$i23: i1, in_$i24: i32, in_$i25: i1, in_$i26: i32, in_$i27: i1, in_$i28: i32, in_$i29: i1, in_$i30: i32, in_$i31: i1, in_$i32: i32, in_$i33: i1, in_$i34: i32, in_$i35: i1, in_$i36: i32, in_$i37: i1, in_$i39: i32, in_$i40: i1, in_$i41: i32, in_$i42: i1, in_$i43: i32, in_$i44: i1, in_$i45: i1, in_$i46: i1, in_$i47: i1, in_$i48: i1, in_$i49: i1, in_$i50: i32, in_$i51: i1, in_$p52: ref, in_$i53: i32, in_$i54: i32, in_$i55: i1, in_$i56: i32, in_$i57: i32, in_$i58: i32, in_$i59: i1, in_$p60: ref, in_$p61: ref, in_$i62: i32, in_$i63: i32, in_$i64: i32, in_$i65: i1, in_$i66: i32, in_$i67: i1, in_$p68: ref, in_$i69: i32, in_$i70: i32, in_$i71: i1, in_$i72: i32, in_$i73: i1, in_$i74: i32, in_$i75: i1, in_$p76: ref, in_$i77: i32, in_$i78: i32, in_$i79: i32, in_$i80: i1, in_$i81: i32, in_$i82: i1, in_$p83: ref, in_$i84: i32, in_$i85: i32, in_$i86: i32, in_$i87: i1, in_$i88: i32, in_$i89: i32, in_$i90: i1, in_$i91: i32, in_$i92: i1, in_$i93: i32, in_$i94: i1, in_$i95: i32, in_$i96: i1, in_$i97: i1, in_$i98: i1, in_$i99: i32, in_$i100: i1, in_$i101: i32, in_$i102: i1, in_$i103: i32, in_$i104: i1, in_$i105: i32, in_$i106: i32, in_$i107: i1, in_$i108: i32, in_$i109: i1, in_$i110: i32, in_$i111: i1, in_$i112: i32, in_$i113: i1, in_vslice_dummy_var_343: i32) returns (out_$i8: i32, out_$i9: i1, out_$i10: i1, out_$i11: i1, out_$i12: i1, out_$i13: i1, out_$i14: i1, out_$i15: i1, out_$i16: i1, out_$i17: i1, out_$i18: i1, out_$i19: i1, out_$i20: i1, out_$i21: i1, out_$i22: i32, out_$i23: i1, out_$i24: i32, out_$i25: i1, out_$i26: i32, out_$i27: i1, out_$i28: i32, out_$i29: i1, out_$i30: i32, out_$i31: i1, out_$i32: i32, out_$i33: i1, out_$i34: i32, out_$i35: i1, out_$i36: i32, out_$i37: i1, out_$i39: i32, out_$i40: i1, out_$i41: i32, out_$i42: i1, out_$i43: i32, out_$i44: i1, out_$i45: i1, out_$i46: i1, out_$i47: i1, out_$i48: i1, out_$i49: i1, out_$i50: i32, out_$i51: i1, out_$p52: ref, out_$i53: i32, out_$i54: i32, out_$i55: i1, out_$i56: i32, out_$i57: i32, out_$i58: i32, out_$i59: i1, out_$p60: ref, out_$p61: ref, out_$i62: i32, out_$i63: i32, out_$i64: i32, out_$i65: i1, out_$i66: i32, out_$i67: i1, out_$p68: ref, out_$i69: i32, out_$i70: i32, out_$i71: i1, out_$i72: i32, out_$i73: i1, out_$i74: i32, out_$i75: i1, out_$p76: ref, out_$i77: i32, out_$i78: i32, out_$i79: i32, out_$i80: i1, out_$i81: i32, out_$i82: i1, out_$p83: ref, out_$i84: i32, out_$i85: i32, out_$i86: i32, out_$i87: i1, out_$i88: i32, out_$i89: i32, out_$i90: i1, out_$i91: i32, out_$i92: i1, out_$i93: i32, out_$i94: i1, out_$i95: i32, out_$i96: i1, out_$i97: i1, out_$i98: i1, out_$i99: i32, out_$i100: i1, out_$i101: i32, out_$i102: i1, out_$i103: i32, out_$i104: i1, out_$i105: i32, out_$i106: i32, out_$i107: i1, out_$i108: i32, out_$i109: i1, out_$i110: i32, out_$i111: i1, out_$i112: i32, out_$i113: i1, out_vslice_dummy_var_343: i32);
  modifies $M.0, $M.69, $M.53, $M.70, $M.3, $M.25, assertsPassed, $CurrAddr, $M.54, $M.55, $M.56, $M.79, $M.64, $M.65, $M.66, $M.59, $M.60, $M.61, $M.11, $M.12, $M.13, $M.83, $M.31, $M.52, $M.84, $M.86, $M.32, $M.36, $M.37, $M.41, $M.87, $M.27, $M.4, $M.30, $M.88, $M.33, $M.90, $M.78, $M.29, $M.67, $M.68, $M.42, $M.43, $M.63, $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.71, $M.72, $M.73, $M.74, $M.75, $M.76, $M.44, $M.57, $M.77, $M.80, $M.85, $M.91, $M.89, $M.62, $M.58, $M.81;


