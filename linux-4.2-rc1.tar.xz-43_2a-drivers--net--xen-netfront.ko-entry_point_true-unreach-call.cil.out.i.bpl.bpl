var $M.0: [ref]i8;

var $M.1: [ref]ref;

var $M.2: [ref]ref;

var $M.3: [ref]ref;

var $M.4: [ref]ref;

var $M.5: [ref]i24;

var $M.6: [ref]i8;

var $M.7: [ref]i32;

var $M.8: [ref]i32;

var $M.9: [ref]i32;

var $M.10: [ref]i32;

var $M.11: [ref]i32;

var $M.12: [ref]i32;

var $M.13: [ref]i8;

var $M.14: i32;

var $M.15: ref;

var $M.16: i32;

var $M.17: ref;

var $M.18: i32;

var $M.19: ref;

var $M.20: i32;

var $M.21: ref;

var $M.22: i32;

var $M.23: [ref]ref;

var $M.24: [ref]ref;

var $M.25: [ref]ref;

var $M.26: [ref]ref;

var $M.27: [ref]ref;

var $M.28: [ref]i24;

var $M.29: [ref]i8;

var $M.30: i32;

var $M.31: [ref]i32;

var $M.32: [ref]i32;

var $M.33: [ref]i32;

var $M.34: [ref]i32;

var $M.35: i32;

var $M.36: [ref]i32;

var $M.37: [ref]i32;

var $M.38: [ref]i32;

var $M.39: [ref]i32;

var $M.40: [ref]i32;

var $M.41: [ref]i32;

var $M.42: [ref]i32;

var $M.43: [ref]i32;

var $M.44: [ref]i32;

var $M.45: ref;

var $M.46: ref;

var $M.47: ref;

var $M.49: ref;

var $M.50: ref;

var $M.51: ref;

var $M.52: ref;

var $M.53: i32;

var $M.54: i32;

var $M.55: i32;

var $M.56: i32;

var $M.57: i32;

var $M.58: i32;

var $M.59: i32;

var $M.60: i32;

var $M.61: i32;

var $M.62: i32;

var $M.63: i32;

var $M.64: i32;

var $M.65: i32;

var $M.66: [ref]i8;

var $M.93: [ref]i8;

var $M.94: [ref]i8;

var $M.95: [ref]i8;

var $M.96: [ref]i8;

var $M.97: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 486676);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32864));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 1028);

const ldv_timer_1_0: ref;

axiom ldv_timer_1_0 == $sub.ref(0, 2056);

const ldv_timer_1_1: ref;

axiom ldv_timer_1_1 == $sub.ref(0, 3084);

const ldv_timer_1_2: ref;

axiom ldv_timer_1_2 == $sub.ref(0, 4112);

const ldv_timer_1_3: ref;

axiom ldv_timer_1_3 == $sub.ref(0, 5140);

const dev_attr_rxbuf_min_group0: ref;

axiom dev_attr_rxbuf_min_group0 == $sub.ref(0, 6172);

const dev_attr_rxbuf_min_group1: ref;

axiom dev_attr_rxbuf_min_group1 == $sub.ref(0, 7204);

const xennet_netdev_ops_group1: ref;

axiom xennet_netdev_ops_group1 == $sub.ref(0, 8236);

const ldv_timer_list_1_0: ref;

axiom ldv_timer_list_1_0 == $sub.ref(0, 9268);

const ldv_timer_list_1_1: ref;

axiom ldv_timer_list_1_1 == $sub.ref(0, 10300);

const ldv_timer_list_1_2: ref;

axiom ldv_timer_list_1_2 == $sub.ref(0, 11332);

const ldv_timer_list_1_3: ref;

axiom ldv_timer_list_1_3 == $sub.ref(0, 12364);

const xennet_ethtool_ops_group0: ref;

axiom xennet_ethtool_ops_group0 == $sub.ref(0, 13396);

const netfront_driver_group0: ref;

axiom netfront_driver_group0 == $sub.ref(0, 14428);

const dev_attr_rxbuf_max_group0: ref;

axiom dev_attr_rxbuf_max_group0 == $sub.ref(0, 15460);

const dev_attr_rxbuf_max_group1: ref;

axiom dev_attr_rxbuf_max_group1 == $sub.ref(0, 16492);

const ldv_state_variable_6: ref;

axiom ldv_state_variable_6 == $sub.ref(0, 17520);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 18548);

const ldv_state_variable_7: ref;

axiom ldv_state_variable_7 == $sub.ref(0, 19576);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 20604);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 21632);

const ldv_state_variable_4: ref;

axiom ldv_state_variable_4 == $sub.ref(0, 22660);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 23688);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 24716);

const ldv_state_variable_5: ref;

axiom ldv_state_variable_5 == $sub.ref(0, 25744);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 26772);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 27800);

const ldv_retval_3: ref;

axiom ldv_retval_3 == $sub.ref(0, 28828);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 29856);

const ldv_retval_4: ref;

axiom ldv_retval_4 == $sub.ref(0, 30884);

const ldv_spin: ref;

axiom ldv_spin == $sub.ref(0, 31912);

const {:count 2} netfront_ids: ref;

axiom netfront_ids == $sub.ref(0, 33000);

const netfront_driver: ref;

axiom netfront_driver == $sub.ref(0, 34224);

const dev_attr_rxbuf_cur: ref;

axiom dev_attr_rxbuf_cur == $sub.ref(0, 35296);

const dev_attr_rxbuf_max: ref;

axiom dev_attr_rxbuf_max == $sub.ref(0, 36368);

const dev_attr_rxbuf_min: ref;

axiom dev_attr_rxbuf_min == $sub.ref(0, 37440);

const {:count 4} xennet_dev_attrs: ref;

axiom xennet_dev_attrs == $sub.ref(0, 38496);

const xennet_dev_group: ref;

axiom xennet_dev_group == $sub.ref(0, 39552);

const xennet_ethtool_ops: ref;

axiom xennet_ethtool_ops == $sub.ref(0, 40968);

const xennet_netdev_ops: ref;

axiom xennet_netdev_ops == $sub.ref(0, 42520);

const xennet_max_queues: ref;

axiom xennet_max_queues == $sub.ref(0, 43548);

const xennet_stats: ref;

axiom xennet_stats == $sub.ref(0, 44606);

const {:count 35} .str.4: ref;

axiom .str.4 == $sub.ref(0, 45665);

const {:count 11} .str.11: ref;

axiom .str.11 == $sub.ref(0, 46700);

const {:count 3} .str.12: ref;

axiom .str.12 == $sub.ref(0, 47727);

const {:count 26} .str.13: ref;

axiom .str.13 == $sub.ref(0, 48777);

const {:count 18} .str.14: ref;

axiom .str.14 == $sub.ref(0, 49819);

const {:count 18} .str.15: ref;

axiom .str.15 == $sub.ref(0, 50861);

const {:count 206} .str.1: ref;

axiom .str.1 == $sub.ref(0, 52091);

const {:count 68} .str.2: ref;

axiom .str.2 == $sub.ref(0, 53183);

const {:count 17} .str.3: ref;

axiom .str.3 == $sub.ref(0, 54224);

const __per_cpu_offset: ref;

axiom __per_cpu_offset == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const cpu_possible_mask: ref;

axiom cpu_possible_mask == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const nr_cpu_ids: ref;

axiom nr_cpu_ids == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const {:count 24} .str.16: ref;

axiom .str.16 == $sub.ref(0, 55272);

const this_cpu_off: ref;

axiom this_cpu_off == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

const {:count 63} .str.6: ref;

axiom .str.6 == $sub.ref(0, 56359);

const {:count 13} .str.7: ref;

axiom .str.7 == $sub.ref(0, 57396);

const {:count 18} .str.8: ref;

axiom .str.8 == $sub.ref(0, 58438);

const {:count 50} .str.9: ref;

axiom .str.9 == $sub.ref(0, 59512);

const {:count 64} .str.10: ref;

axiom .str.10 == $sub.ref(0, 60600);

const xen_p2m_size: ref;

axiom xen_p2m_size == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32808));

const xen_p2m_addr: ref;

axiom xen_p2m_addr == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32816));

const xen_max_p2m_pfn: ref;

axiom xen_max_p2m_pfn == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32824));

const xen_features: ref;

axiom xen_features == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32832));

const jiffies: ref;

axiom jiffies == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32840));

const {:count 26} .str.5: ref;

axiom .str.5 == $sub.ref(0, 61650);

const {:count 10} .str.20: ref;

axiom .str.20 == $sub.ref(0, 62684);

const .str: ref;

axiom .str == $sub.ref(0, 63713);

const {:count 10} .str.21: ref;

axiom .str.21 == $sub.ref(0, 64747);

const {:count 10} .str.22: ref;

axiom .str.22 == $sub.ref(0, 65781);

const {:count 16} .str.81: ref;

axiom .str.81 == $sub.ref(0, 66821);

const {:count 4} .str.24: ref;

axiom .str.24 == $sub.ref(0, 67849);

const {:count 48} .str.78: ref;

axiom .str.78 == $sub.ref(0, 68921);

const {:count 19} .str.79: ref;

axiom .str.79 == $sub.ref(0, 69964);

const {:count 14} .str.80: ref;

axiom .str.80 == $sub.ref(0, 71002);

const {:count 16} .str.23: ref;

axiom .str.23 == $sub.ref(0, 72042);

const {:count 16} .str.25: ref;

axiom .str.25 == $sub.ref(0, 73082);

const {:count 3} .str.26: ref;

axiom .str.26 == $sub.ref(0, 74109);

const {:count 47} .str.27: ref;

axiom .str.27 == $sub.ref(0, 75180);

const {:count 23} .str.28: ref;

axiom .str.28 == $sub.ref(0, 76227);

const {:count 29} .str.29: ref;

axiom .str.29 == $sub.ref(0, 77280);

const {:count 15} .str.30: ref;

axiom .str.30 == $sub.ref(0, 78319);

const {:count 21} .str.31: ref;

axiom .str.31 == $sub.ref(0, 79364);

const {:count 23} .str.32: ref;

axiom .str.32 == $sub.ref(0, 80411);

const {:count 31} .str.33: ref;

axiom .str.33 == $sub.ref(0, 81466);

const {:count 16} .str.34: ref;

axiom .str.34 == $sub.ref(0, 82506);

const {:count 24} .str.35: ref;

axiom .str.35 == $sub.ref(0, 83554);

const {:count 18} .str.36: ref;

axiom .str.36 == $sub.ref(0, 84596);

const {:count 26} .str.37: ref;

axiom .str.37 == $sub.ref(0, 85646);

const {:count 19} .str.38: ref;

axiom .str.38 == $sub.ref(0, 86689);

const {:count 26} .str.39: ref;

axiom .str.39 == $sub.ref(0, 87739);

const {:count 2} .str.40: ref;

axiom .str.40 == $sub.ref(0, 88765);

const {:count 26} .str.41: ref;

axiom .str.41 == $sub.ref(0, 89815);

const {:count 34} .str.42: ref;

axiom .str.42 == $sub.ref(0, 90873);

const {:count 23} .str.43: ref;

axiom .str.43 == $sub.ref(0, 91920);

const {:count 3} .str.44: ref;

axiom .str.44 == $sub.ref(0, 92947);

const {:count 44} .str.66: ref;

axiom .str.66 == $sub.ref(0, 94015);

const {:count 12} .str.67: ref;

axiom .str.67 == $sub.ref(0, 95051);

const {:count 12} .str.68: ref;

axiom .str.68 == $sub.ref(0, 96087);

const {:count 20} .str.69: ref;

axiom .str.69 == $sub.ref(0, 97131);

const {:count 12} .str.70: ref;

axiom .str.70 == $sub.ref(0, 98167);

const {:count 20} .str.71: ref;

axiom .str.71 == $sub.ref(0, 99211);

const {:count 14} .str.72: ref;

axiom .str.72 == $sub.ref(0, 100249);

const {:count 22} .str.73: ref;

axiom .str.73 == $sub.ref(0, 101295);

const {:count 17} .str.74: ref;

axiom .str.74 == $sub.ref(0, 102336);

const {:count 25} .str.75: ref;

axiom .str.75 == $sub.ref(0, 103385);

const {:count 17} .str.76: ref;

axiom .str.76 == $sub.ref(0, 104426);

const {:count 25} .str.77: ref;

axiom .str.77 == $sub.ref(0, 105475);

const {:count 24} .str.62: ref;

axiom .str.62 == $sub.ref(0, 106523);

const {:count 24} .str.63: ref;

axiom .str.63 == $sub.ref(0, 107571);

const {:count 6} .str.64: ref;

axiom .str.64 == $sub.ref(0, 108601);

const {:count 6} .str.65: ref;

axiom .str.65 == $sub.ref(0, 109631);

const {:count 24} .str.46: ref;

axiom .str.46 == $sub.ref(0, 110679);

const {:count 11} .str.47: ref;

axiom .str.47 == $sub.ref(0, 111714);

const {:count 42} .str.60: ref;

axiom .str.60 == $sub.ref(0, 112780);

const {:count 32} .str.61: ref;

axiom .str.61 == $sub.ref(0, 113836);

const {:count 26} .str.54: ref;

axiom .str.54 == $sub.ref(0, 114886);

const {:count 24} .str.55: ref;

axiom .str.55 == $sub.ref(0, 115934);

const {:count 17} .str.56: ref;

axiom .str.56 == $sub.ref(0, 116975);

const {:count 16} .str.57: ref;

axiom .str.57 == $sub.ref(0, 118015);

const {:count 20} .str.58: ref;

axiom .str.58 == $sub.ref(0, 119059);

const {:count 24} .str.59: ref;

axiom .str.59 == $sub.ref(0, 120107);

const {:count 22} .str.53: ref;

axiom .str.53 == $sub.ref(0, 121153);

const {:count 26} .str.48: ref;

axiom .str.48 == $sub.ref(0, 122203);

const {:count 26} .str.49: ref;

axiom .str.49 == $sub.ref(0, 123253);

const {:count 7} .str.50: ref;

axiom .str.50 == $sub.ref(0, 124284);

const {:count 42} .str.51: ref;

axiom .str.51 == $sub.ref(0, 125350);

const {:count 42} .str.52: ref;

axiom .str.52 == $sub.ref(0, 126416);

const {:count 4} .str.45: ref;

axiom .str.45 == $sub.ref(0, 127444);

const {:count 16} .str.17: ref;

axiom .str.17 == $sub.ref(0, 128484);

const {:count 43} .str.18: ref;

axiom .str.18 == $sub.ref(0, 129551);

const {:count 15} .str.19: ref;

axiom .str.19 == $sub.ref(0, 130590);

const xen_domain_type: ref;

axiom xen_domain_type == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32848));

const {:count 57} .str.82: ref;

axiom .str.82 == $sub.ref(0, 131671);

const cpu_online_mask: ref;

axiom cpu_online_mask == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32856));

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32864));

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 132703);

const {:count 3} .str.1.180: ref;

axiom .str.1.180 == $sub.ref(0, 133730);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 134768);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 135796);

const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 136828);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const malloc: ref;

axiom malloc == $sub.ref(0, 137860);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 0} $r := $malloc($i0);
    return;
}



const xennet_open: ref;

axiom xennet_open == $sub.ref(0, 138892);

procedure xennet_open($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.15, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $CurrAddr, assertsPassed;



implementation xennet_open($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i1;
  var $i14: i8;
  var $i15: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1} $p1 := netdev_priv($p0);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1028, 1));
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    call {:si_unique_call 2} {:cexpr "num_queues"} boogie_si_record_i32($i4);
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $i5 := $ult.i32(0, $i4);
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} netif_tx_start_all_queues($p0);
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb4;

  $bb4:
    call $p7, $p8, $i9, $p10, $p11, $p12, $i13, $i14, $i15, $p17, $i18, $i19, $p21, $p22, $p23, $p25, $p26, $p27, $i28, $p30, $i31, $i32, $p33, $p34, $i35, $i36, $i6 := xennet_open_loop_$bb4($p0, $p2, $i4, $p7, $p8, $i9, $p10, $p11, $p12, $i13, $i14, $i15, $p17, $i18, $i19, $p21, $p22, $p23, $p25, $p26, $p27, $i28, $p30, $i31, $i32, $p33, $p34, $i35, $i36, $i6);
    goto $bb4_last;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    $i9 := $zext.i32.i64($i6);
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p8, $mul.ref($i9, 8944));
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p8, $mul.ref($i9, 8944)), $mul.ref(40, 1));
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3} napi_enable($p11);
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p8, $mul.ref($i9, 8944)), $mul.ref(5632, 1));
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4} spin_lock_bh($p12);
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5} $i13 := netif_carrier_ok($p0);
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i8($i13);
    call {:si_unique_call 6} {:cexpr "tmp___0"} boogie_si_record_i8($i14);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i8.i1($i14);
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p8, $mul.ref($i9, 8944)), $mul.ref(5632, 1));
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 9} spin_unlock_bh($p34);
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $i35 := $add.i32($i6, 1);
    call {:si_unique_call 10} {:cexpr "i"} boogie_si_record_i32($i35);
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    $i36 := $ult.i32($i35, $i4);
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i36 == 1);
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb12:
    assume $i36 == 1;
    assume {:verifier.code 0} true;
    $i6 := $i35;
    goto $bb12_dummy;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} xennet_alloc_rx_buffers($p10);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p8, $mul.ref($i9, 8944)), $mul.ref(5704, 1)), $mul.ref(4, 1));
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    $i19 := $add.i32($i18, 1);
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p8, $mul.ref($i9, 8944)), $mul.ref(5704, 1)), $mul.ref(16, 1));
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 72)), $mul.ref(12, 1));
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, $i19);
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p8, $mul.ref($i9, 8944)), $mul.ref(5704, 1)), $mul.ref(16, 1));
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p8, $mul.ref($i9, 8944)), $mul.ref(5704, 1)), $mul.ref(4, 1));
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i28, $i31);
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb8:
    assume $i32 == 1;
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p8, $mul.ref($i9, 8944)), $mul.ref(40, 1));
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 8} napi_schedule($p33);
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_1:
    assume !assertsPassed;
    return;

  $bb12_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_10;
}



const xennet_close: ref;

axiom xennet_close == $sub.ref(0, 139924);

procedure xennet_close($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation xennet_close($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 12} $p1 := netdev_priv($p0);
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1028, 1));
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    call {:si_unique_call 13} {:cexpr "num_queues"} boogie_si_record_i32($i4);
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} netif_tx_stop_all_queues($p6);
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    $i7 := $ult.i32(0, $i4);
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb4;

  $bb4:
    call $p9, $p10, $i11, $p13, $i14, $i15, $i8 := xennet_close_loop_$bb4($p2, $i4, $p9, $p10, $i11, $p13, $i14, $i15, $i8);
    goto $bb4_last;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    $i11 := $zext.i32.i64($i8);
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p10, $mul.ref($i11, 8944)), $mul.ref(40, 1));
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} napi_disable($p13);
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    $i14 := $add.i32($i8, 1);
    call {:si_unique_call 16} {:cexpr "i"} boogie_si_record_i32($i14);
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    $i15 := $ult.i32($i14, $i4);
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i15 == 1);
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i8 := $i14;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_66;
}



const xennet_start_xmit: ref;

axiom xennet_start_xmit == $sub.ref(0, 140956);

procedure xennet_start_xmit($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.14, $CurrAddr;



implementation xennet_start_xmit($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i16;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i64;
  var $i22: i64;
  var $i23: i1;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $i27: i32;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $i32: i64;
  var $i33: i64;
  var $i34: i1;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i24;
  var $i44: i24;
  var $i45: i24;
  var $p46: ref;
  var $p47: ref;
  var $i48: i8;
  var $i49: i64;
  var $i50: i64;
  var $i51: i64;
  var $i52: i1;
  var $p53: ref;
  var $i54: i32;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $p58: ref;
  var $i59: i64;
  var $i60: i64;
  var $i61: i64;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i64;
  var $i66: i32;
  var $i67: i32;
  var $i68: i32;
  var $i69: i1;
  var $i70: i8;
  var $i71: i1;
  var $i72: i32;
  var $i73: i1;
  var $i75: i1;
  var $i76: i1;
  var $i77: i8;
  var $i78: i1;
  var $i79: i32;
  var $i80: i1;
  var $i82: i64;
  var $i83: i1;
  var $i84: i8;
  var $i85: i1;
  var $i86: i32;
  var $i81: i32;
  var $i74: i32;
  var $i87: i64;
  var $i88: i64;
  var $i89: i1;
  var $p90: ref;
  var $p91: ref;
  var $i92: i64;
  var $p93: ref;
  var $p94: ref;
  var $i95: i16;
  var $i96: i32;
  var $i97: i32;
  var $p98: ref;
  var $p99: ref;
  var $i100: i8;
  var $i101: i32;
  var $i102: i1;
  var $p103: ref;
  var $i104: i16;
  var $i105: i32;
  var $i106: i32;
  var $i107: i16;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $i111: i8;
  var $i112: i32;
  var $i113: i1;
  var $p114: ref;
  var $i115: i16;
  var $i116: i32;
  var $i117: i32;
  var $i118: i16;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $i123: i16;
  var $i124: i32;
  var $i125: i1;
  var $p127: ref;
  var $i128: i32;
  var $p130: ref;
  var $i131: i32;
  var $i132: i32;
  var $p134: ref;
  var $p136: ref;
  var $i137: i32;
  var $i138: i32;
  var $i139: i32;
  var $i140: i64;
  var $p142: ref;
  var $p143: ref;
  var $p145: ref;
  var $p146: ref;
  var $p147: ref;
  var $p148: ref;
  var $i149: i16;
  var $i150: i32;
  var $i151: i32;
  var $i152: i16;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $p156: ref;
  var $i157: i16;
  var $p158: ref;
  var $p159: ref;
  var $p160: ref;
  var $p161: ref;
  var $p162: ref;
  var $p163: ref;
  var $i164: i16;
  var $i165: i32;
  var $i166: i32;
  var $i167: i1;
  var $i168: i32;
  var $i169: i8;
  var $p170: ref;
  var $p171: ref;
  var $p172: ref;
  var $p173: ref;
  var $p174: ref;
  var $p175: ref;
  var $p176: ref;
  var $p177: ref;
  var $p178: ref;
  var $p179: ref;
  var $p180: ref;
  var $p181: ref;
  var $p182: ref;
  var $p183: ref;
  var $p184: ref;
  var $i185: i8;
  var $i186: i32;
  var $i187: i1;
  var $p190: ref;
  var $p191: ref;
  var $p192: ref;
  var $p193: ref;
  var $i194: i64;
  var $p195: ref;
  var $i196: i32;
  var $p197: ref;
  var $p198: ref;
  var $i199: i32;
  var $p200: ref;
  var $i201: i32;
  var $p202: ref;
  var $p203: ref;
  var $p204: ref;
  var $i205: i8;
  var $i206: i32;
  var $i207: i1;
  var $p188: ref;
  var $i189: i32;
  var $p208: ref;
  var $i209: i32;
  var $i210: i16;
  var $p211: ref;
  var $p213: ref;
  var $p214: ref;
  var $p215: ref;
  var $i216: i32;
  var $p218: ref;
  var $i219: i32;
  var $p221: ref;
  var $p222: ref;
  var $p223: ref;
  var $p225: ref;
  var $p226: ref;
  var $p227: ref;
  var $i228: i32;
  var $i229: i32;
  var $i230: i32;
  var $i231: i1;
  var $i232: i32;
  var $i233: i1;
  var $p234: ref;
  var $i235: i32;
  var $p236: ref;
  var $p237: ref;
  var $i238: i64;
  var $p239: ref;
  var $i240: i32;
  var $i241: i64;
  var $i242: i64;
  var $p243: ref;
  var $p244: ref;
  var $i245: i64;
  var $i246: i64;
  var $p247: ref;
  var $p248: ref;
  var $i249: i32;
  var $i250: i1;
  var $p251: ref;
  var $i252: i32;
  var $p253: ref;
  var $p254: ref;
  var $p256: ref;
  var $i257: i64;
  var $i258: i64;
  var $p260: ref;
  var vslice_dummy_var_11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    call {:si_unique_call 18} $p3 := netdev_priv($p1);
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    call {:si_unique_call 19} $i7 := devirtbounce(0, this_cpu_off, $p6);
    call {:si_unique_call 20} {:cexpr "tcp_ptr__"} boogie_si_record_i64($i7);
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $p8 := $i2p.i64.ref($i7);
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 2968)), $mul.ref(1028, 1));
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    call {:si_unique_call 21} {:cexpr "num_queues"} boogie_si_record_i32($i10);
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} $i12 := skb_get_queue_mapping($p0);
    call {:si_unique_call 24} {:cexpr "queue_index"} boogie_si_record_i16($i12);
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i64($i12);
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p14, $mul.ref($i15, 8944));
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $i19 := $ugt.i32($i18, 65535);
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    $i20 := $zext.i1.i32($i19);
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i20);
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} $i22 := ldv__builtin_expect($i21, 0);
    call {:si_unique_call 26} {:cexpr "tmp___1"} boogie_si_record_i64($i22);
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} $i29 := xennet_count_skb_slots($p0);
    call {:si_unique_call 31} {:cexpr "slots"} boogie_si_record_i32($i29);
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    $i30 := $ugt.i32($i29, 18);
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    $i31 := $zext.i1.i32($i30);
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    $i32 := $sext.i32.i64($i31);
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} $i33 := ldv__builtin_expect($i32, 0);
    call {:si_unique_call 33} {:cexpr "tmp___5"} boogie_si_record_i64($i33);
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, 0);
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $i59 := $p2i.ref.i64($p58);
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} $i60 := __phys_addr($i59);
    call {:si_unique_call 42} {:cexpr "tmp___6"} boogie_si_record_i64($i60);
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $i61 := $lshr.i64($i60, 12);
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($i2p.i64.ref($sub.i64(0, 24189255811072)), $mul.ref($i61, 64));
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    $i65 := $p2i.ref.i64($p64);
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    $i66 := $trunc.i64.i32($i65);
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    $i67 := $and.i32($i66, 4095);
    call {:si_unique_call 43} {:cexpr "offset"} boogie_si_record_i32($i67);
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} $i68 := skb_headlen($p0);
    call {:si_unique_call 45} {:cexpr "len"} boogie_si_record_i32($i68);
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} ldv_spin_lock();
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} $i69 := netif_carrier_ok($p1);
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $i70 := $zext.i1.i8($i69);
    call {:si_unique_call 48} {:cexpr "tmp___7"} boogie_si_record_i8($i70);
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $i71 := $trunc.i8.i1($i70);
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    $i72 := 1;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    $i73 := $ne.i32($i72, 0);
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    assume {:branchcond $i73} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i73 == 1);
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $i75 := $sgt.i32($i29, 1);
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i75 == 1);
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} $i82 := netif_skb_features($p0);
    call {:si_unique_call 54} {:cexpr "tmp___11"} boogie_si_record_i64($i82);
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} $i83 := netif_needs_gso($p0, $i82);
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    $i84 := $zext.i1.i8($i83);
    call {:si_unique_call 56} {:cexpr "tmp___12"} boogie_si_record_i8($i84);
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    $i85 := $trunc.i8.i1($i84);
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    $i86 := 0;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i81 := $i86;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i74 := $i81;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    $i87 := $sext.i32.i64($i74);
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} $i88 := ldv__builtin_expect($i87, 0);
    call {:si_unique_call 50} {:cexpr "tmp___14"} boogie_si_record_i64($i88);
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    $i89 := $ne.i64($i88, 0);
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    assume {:branchcond $i89} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 58} $p91 := xennet_make_one_txreq($p16, $p0, $p62, $i67, $i68);
    $i92 := $add.i64($i61, 1);
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($i2p.i64.ref($sub.i64(0, 24189255811072)), $mul.ref($i92, 64));
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p91, $mul.ref(0, 12)), $mul.ref(10, 1));
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    $i95 := $load.i16($M.0, $p94);
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    $i96 := $zext.i16.i32($i95);
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    $i97 := $sub.i32($i68, $i96);
    call {:si_unique_call 59} {:cexpr "len"} boogie_si_record_i32($i97);
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    $p98 := $bitcast.ref.ref($p0);
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($p98, $mul.ref(145, 1));
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    $i100 := $load.i8($M.0, $p99);
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    $i101 := $zext.i8.i32($i100);
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    $i102 := $eq.i32($i101, 6);
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i102 == 1);
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    $p109 := $bitcast.ref.ref($p0);
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($p109, $mul.ref(145, 1));
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    $i111 := $load.i8($M.0, $p110);
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    $i112 := $zext.i8.i32($i111);
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    $i113 := $eq.i32($i112, 2);
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    assume {:branchcond $i113} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} $p120 := skb_end_pointer($p0);
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    $p121 := $bitcast.ref.ref($p120);
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p121, $mul.ref(0, 320)), $mul.ref(2, 1));
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    $i123 := $load.i16($M.0, $p122);
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    $i124 := $zext.i16.i32($i123);
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $i125 := $ne.i32($i124, 0);
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    assume {:branchcond $i125} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} $p181 := xennet_make_txreqs($p16, $p91, $p0, $p93, 0, $i97);
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} $p182 := skb_end_pointer($p0);
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    $p183 := $bitcast.ref.ref($p182);
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($p183, $mul.ref(0, 320)), $mul.ref(0, 1));
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    $i185 := $load.i8($M.0, $p184);
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    $i186 := $zext.i8.i32($i185);
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    $i187 := $ugt.i32($i186, 0);
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    assume {:branchcond $i187} true;
    goto $bb54, $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    assume !($i187 == 1);
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    $i209 := $load.i32($M.0, $p208);
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    $i210 := $trunc.i32.i16($i209);
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p91, $mul.ref(0, 12)), $mul.ref(10, 1));
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p211, $i210);
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($add.ref($p14, $mul.ref($i15, 8944)), $mul.ref(464, 1)), $mul.ref(16, 1));
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    $p214 := $load.ref($M.0, $p213);
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($p214, $mul.ref(0, 76)), $mul.ref(0, 1));
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    $i216 := $load.i32($M.0, $p215);
    call {:si_unique_call 73} {:cexpr "__old"} boogie_si_record_i32($i216);
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($add.ref($p14, $mul.ref($i15, 8944)), $mul.ref(464, 1)), $mul.ref(0, 1));
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $i219 := $load.i32($M.0, $p218);
    call {:si_unique_call 74} {:cexpr "__new"} boogie_si_record_i32($i219);
    call {:si_unique_call 75} devirtbounce.1(0);
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($add.ref($p14, $mul.ref($i15, 8944)), $mul.ref(464, 1)), $mul.ref(16, 1));
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    $p222 := $load.ref($M.0, $p221);
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($p222, $mul.ref(0, 76)), $mul.ref(0, 1));
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p223, $i219);
    call {:si_unique_call 76} devirtbounce.1(0);
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($add.ref($p14, $mul.ref($i15, 8944)), $mul.ref(464, 1)), $mul.ref(16, 1));
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $p226 := $load.ref($M.0, $p225);
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($p226, $mul.ref(0, 76)), $mul.ref(4, 1));
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $i228 := $load.i32($M.0, $p227);
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $i229 := $sub.i32($i219, $i228);
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    $i230 := $sub.i32($i219, $i216);
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    $i231 := $ult.i32($i229, $i230);
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $i232 := $zext.i1.i32($i231);
    call {:si_unique_call 77} {:cexpr "notify"} boogie_si_record_i32($i232);
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $i233 := $ne.i32($i232, 0);
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    assume {:branchcond $i233} true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i233 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(16, 1));
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 79} u64_stats_init($p236);
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    $i238 := $load.i64($M.0, $p237);
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    $i240 := $load.i32($M.0, $p239);
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    $i241 := $zext.i32.i64($i240);
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    $i242 := $add.i64($i238, $i241);
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p243, $i242);
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    $i245 := $load.i64($M.0, $p244);
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    $i246 := $add.i64($i245, 1);
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p247, $i246);
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(16, 1));
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 80} u64_stats_init($p248);
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 81} xennet_tx_buf_gc($p16);
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 82} $i249 := netfront_tx_slot_available($p16);
    call {:si_unique_call 83} {:cexpr "tmp___24"} boogie_si_record_i32($i249);
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    $i250 := $eq.i32($i249, 0);
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    assume {:branchcond $i250} true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i250 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $p254 := $add.ref($add.ref($p14, $mul.ref($i15, 8944)), $mul.ref(392, 1));
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 86} spin_unlock_irqrestore($p254, $u0);
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb65:
    assume $i250 == 1;
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($add.ref($p14, $mul.ref($i15, 8944)), $mul.ref(0, 1));
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    $i252 := $load.i32($M.0, $p251);
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 84} $p253 := netdev_get_tx_queue($p1, $i252);
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 85} netif_tx_stop_queue($p253);
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb62:
    assume $i233 == 1;
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($p14, $mul.ref($i15, 8944)), $mul.ref(328, 1));
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    $i235 := $load.i32($M.0, $p234);
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 78} notify_remote_via_irq($i235);
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb54:
    assume $i187 == 1;
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    $p188, $i189 := $p181, 0;
    goto $bb57;

  $bb57:
    call $p190, $p191, $p192, $p193, $i194, $p195, $i196, $p197, $p198, $i199, $p200, $i201, $p202, $p203, $p204, $i205, $i206, $i207, $p188, $i189 := xennet_start_xmit_loop_$bb57($p0, $p16, $p190, $p191, $p192, $p193, $i194, $p195, $i196, $p197, $p198, $i199, $p200, $i201, $p202, $p203, $p204, $i205, $i206, $i207, $p188, $i189);
    goto $bb57_last;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    call {:si_unique_call 66} $p190 := skb_end_pointer($p0);
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $p191 := $bitcast.ref.ref($p190);
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($p191, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    $p193 := $bitcast.ref.ref($p192);
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    $i194 := $zext.i32.i64($i189);
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($p193, $mul.ref($i194, 16));
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} $i196 := skb_frag_size($p195);
    call {:si_unique_call 68} {:cexpr "tmp___20"} boogie_si_record_i32($i196);
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 69} $p197 := skb_frag_page($p195);
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p193, $mul.ref($i194, 16)), $mul.ref(8, 1));
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $i199 := $load.i32($M.0, $p198);
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 70} $p200 := xennet_make_txreqs($p16, $p188, $p0, $p197, $i199, $i196);
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    $i201 := $add.i32($i189, 1);
    call {:si_unique_call 71} {:cexpr "i"} boogie_si_record_i32($i201);
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 72} $p202 := skb_end_pointer($p0);
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    $p203 := $bitcast.ref.ref($p202);
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($p203, $mul.ref(0, 320)), $mul.ref(0, 1));
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $i205 := $load.i8($M.0, $p204);
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    $i206 := $zext.i8.i32($i205);
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $i207 := $ugt.i32($i206, $i201);
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i207 == 1);
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb59:
    assume $i207 == 1;
    assume {:verifier.code 0} true;
    $p188, $i189 := $p200, $i201;
    goto $bb59_dummy;

  $bb51:
    assume $i125 == 1;
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($add.ref($p14, $mul.ref($i15, 8944)), $mul.ref(464, 1)), $mul.ref(0, 1));
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $i128 := $load.i32($M.0, $p127);
    call {:si_unique_call 61} {:cexpr "tmp___15"} boogie_si_record_i32($i128);
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($add.ref($p14, $mul.ref($i15, 8944)), $mul.ref(464, 1)), $mul.ref(0, 1));
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    $i131 := $load.i32($M.0, $p130);
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    $i132 := $add.i32($i131, 1);
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($add.ref($p14, $mul.ref($i15, 8944)), $mul.ref(464, 1)), $mul.ref(0, 1));
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p134, $i132);
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($add.ref($p14, $mul.ref($i15, 8944)), $mul.ref(464, 1)), $mul.ref(8, 1));
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    $i137 := $load.i32($M.0, $p136);
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    $i138 := $sub.i32($i137, 1);
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    $i139 := $and.i32($i128, $i138);
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    $i140 := $zext.i32.i64($i139);
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($add.ref($p14, $mul.ref($i15, 8944)), $mul.ref(464, 1)), $mul.ref(16, 1));
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    $p143 := $load.ref($M.0, $p142);
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($add.ref($p143, $mul.ref(0, 76)), $mul.ref(64, 1)), $mul.ref($i140, 12));
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    $p146 := $bitcast.ref.ref($p145);
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    $p147 := $bitcast.ref.ref($p146);
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p91, $mul.ref(0, 12)), $mul.ref(6, 1));
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    $i149 := $load.i16($M.0, $p148);
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    $i150 := $zext.i16.i32($i149);
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    $i151 := $or.i32($i150, 8);
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    $i152 := $trunc.i32.i16($i151);
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p91, $mul.ref(0, 12)), $mul.ref(6, 1));
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p153, $i152);
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} $p154 := skb_end_pointer($p0);
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    $p155 := $bitcast.ref.ref($p154);
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p155, $mul.ref(0, 320)), $mul.ref(2, 1));
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    $i157 := $load.i16($M.0, $p156);
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p147, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    $p159 := $bitcast.ref.ref($p158);
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p159, $mul.ref(0, 6)), $mul.ref(0, 1));
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p160, $i157);
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} $p161 := skb_end_pointer($p0);
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    $p162 := $bitcast.ref.ref($p161);
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p162, $mul.ref(0, 320)), $mul.ref(6, 1));
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    $i164 := $load.i16($M.0, $p163);
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    $i165 := $zext.i16.i32($i164);
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    $i166 := $and.i32($i165, 16);
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    $i167 := $ne.i32($i166, 0);
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $i168 := (if $i167 == 1 then 2 else 1);
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    $i169 := $trunc.i32.i8($i168);
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p147, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    $p171 := $bitcast.ref.ref($p170);
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p171, $mul.ref(0, 6)), $mul.ref(2, 1));
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p172, $i169);
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p147, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    $p174 := $bitcast.ref.ref($p173);
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p174, $mul.ref(0, 6)), $mul.ref(3, 1));
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p175, 0);
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p147, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    $p177 := $bitcast.ref.ref($p176);
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p177, $mul.ref(0, 6)), $mul.ref(4, 1));
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p178, 0);
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($p147, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p179, 1);
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p147, $mul.ref(0, 8)), $mul.ref(1, 1));
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p180, 0);
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb48:
    assume $i113 == 1;
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p91, $mul.ref(0, 12)), $mul.ref(6, 1));
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    $i115 := $load.i16($M.0, $p114);
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    $i116 := $zext.i16.i32($i115);
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    $i117 := $or.i32($i116, 2);
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    $i118 := $trunc.i32.i16($i117);
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p91, $mul.ref(0, 12)), $mul.ref(6, 1));
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p119, $i118);
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb45:
    assume $i102 == 1;
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p91, $mul.ref(0, 12)), $mul.ref(6, 1));
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    $i104 := $load.i16($M.0, $p103);
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    $i105 := $zext.i16.i32($i104);
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    $i106 := $or.i32($i105, 3);
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $i107 := $trunc.i32.i16($i106);
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p91, $mul.ref(0, 12)), $mul.ref(6, 1));
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p108, $i107);
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb42:
    assume $i89 == 1;
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p14, $mul.ref($i15, 8944)), $mul.ref(392, 1));
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} spin_unlock_irqrestore($p90, $u0);
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p256 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(56, 1));
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    $i257 := $load.i64($M.0, $p256);
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    $i258 := $add.i64($i257, 1);
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    $p260 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(56, 1));
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p260, $i258);
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} dev_kfree_skb_any($p0);
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb39:
    assume $i85 == 1;
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    $i86 := 1;
    goto $bb41;

  $bb29:
    assume $i75 == 1;
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} $i76 := xennet_can_sg($p1);
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $i77 := $zext.i1.i8($i76);
    call {:si_unique_call 52} {:cexpr "tmp___9"} boogie_si_record_i8($i77);
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    $i78 := $trunc.i8.i1($i77);
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    $i79 := 1;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $i80 := $ne.i32($i79, 0);
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    assume {:branchcond $i80} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i80 == 1);
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb34:
    assume $i80 == 1;
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i81 := 1;
    goto $bb38;

  $bb31:
    assume $i78 == 1;
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    $i79 := 0;
    goto $bb33;

  $bb26:
    assume $i73 == 1;
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    $i74 := 1;
    goto $bb28;

  $bb23:
    assume $i71 == 1;
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    $i72 := 0;
    goto $bb25;

  $bb11:
    assume $i34 == 1;
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} $i35 := net_ratelimit();
    call {:si_unique_call 35} {:cexpr "tmp___3"} boogie_si_record_i32($i35);
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} $i55 := skb_linearize($p0);
    call {:si_unique_call 40} {:cexpr "tmp___4"} boogie_si_record_i32($i55);
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb19:
    assume $i56 == 1;
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb13:
    assume $i36 == 1;
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p37, .str.7);
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p38, .str.8);
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p39, .str.1);
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p40, .str.9);
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    $i43 := $load.i24($M.5, $p42);
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $i44 := $and.i24($i43, $sub.i24(0, 262144));
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    $i45 := $or.i24($i44, 549);
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p42, $i45);
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p46, 0);
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.6, $p47);
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i64($i48);
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    $i50 := $and.i64($i49, 1);
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} $i51 := ldv__builtin_expect($i50, 0);
    call {:si_unique_call 37} {:cexpr "tmp___2"} boogie_si_record_i64($i51);
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    $i52 := $ne.i64($i51, 0);
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i52 == 1;
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} __dynamic_pr_debug.ref.ref.i32.i32($p2, .str.10, $i29, $i54);
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb5:
    assume $i23 == 1;
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} $i24 := net_ratelimit();
    call {:si_unique_call 28} {:cexpr "tmp___0"} boogie_si_record_i32($i24);
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb7:
    assume $i25 == 1;
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} vslice_dummy_var_11 := printk.ref.i32(.str.6, $i27);
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb59_dummy:
    assume false;
    return;

  $bb57_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_337;
}



const xennet_select_queue: ref;

axiom xennet_select_queue == $sub.ref(0, 141988);

procedure xennet_select_queue($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i16);
  free requires assertsPassed;



implementation xennet_select_queue($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i16)
{
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i8: i32;
  var $i9: i32;
  var $i10: i16;
  var $i7: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1028, 1));
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    call {:si_unique_call 87} {:cexpr "num_queues"} boogie_si_record_i32($i5);
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 1);
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 88} $i8 := skb_get_hash($p1);
    call {:si_unique_call 89} {:cexpr "hash"} boogie_si_record_i32($i8);
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    $i9 := $urem.i32($i8, $i5);
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i16($i9);
    call {:si_unique_call 90} {:cexpr "queue_idx"} boogie_si_record_i16($i10);
    assume {:verifier.code 0} true;
    $i7 := $i10;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;
}



const eth_mac_addr: ref;

axiom eth_mac_addr == $sub.ref(0, 143020);

procedure eth_mac_addr($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation eth_mac_addr($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 1} true;
    call {:si_unique_call 91} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 92} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const eth_validate_addr: ref;

axiom eth_validate_addr == $sub.ref(0, 144052);

procedure eth_validate_addr($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation eth_validate_addr($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 1} true;
    call {:si_unique_call 93} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 94} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const xennet_change_mtu: ref;

axiom xennet_change_mtu == $sub.ref(0, 145084);

procedure xennet_change_mtu($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation xennet_change_mtu($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 95} {:cexpr "xennet_change_mtu:arg:mtu"} boogie_si_record_i32($i1);
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} $i2 := xennet_can_sg($p0);
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 97} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    $i5 := (if $i4 == 1 then 65535 else 1500);
    call {:si_unique_call 98} {:cexpr "max"} boogie_si_record_i32($i5);
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    $i6 := $sgt.i32($i1, $i5);
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(560, 1));
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $i1);
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb3;
}



const xennet_get_stats64: ref;

axiom xennet_get_stats64 == $sub.ref(0, 146116);

procedure xennet_get_stats64($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation xennet_get_stats64($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i64;
  var $p13: ref;
  var $i14: i64;
  var $i15: i64;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $i28: i64;
  var $p29: ref;
  var $i30: i64;
  var $p31: ref;
  var $i32: i1;
  var $i33: i8;
  var $i34: i1;
  var $i35: i64;
  var $i36: i64;
  var $p37: ref;
  var $i38: i32;
  var $p39: ref;
  var $i40: i64;
  var $p41: ref;
  var $i42: i64;
  var $p43: ref;
  var $i44: i1;
  var $i45: i8;
  var $i46: i1;
  var $i47: i64;
  var $i48: i64;
  var $p49: ref;
  var $i50: i64;
  var $i51: i64;
  var $p52: ref;
  var $p53: ref;
  var $i54: i64;
  var $i55: i64;
  var $p56: ref;
  var $p57: ref;
  var $i58: i64;
  var $i59: i64;
  var $p60: ref;
  var $p61: ref;
  var $i62: i64;
  var $i63: i64;
  var $p64: ref;
  var $p65: ref;
  var $i66: i32;
  var $i67: i32;
  var $i68: i1;
  var $i8: i32;
  var $p70: ref;
  var $i71: i64;
  var $p72: ref;
  var $p74: ref;
  var $i75: i64;
  var $p76: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 99} $p2 := netdev_priv($p0);
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 100} $i5 := cpumask_next($sub.i32(0, 1), $p4);
    call {:si_unique_call 101} {:cexpr "tmp___2"} boogie_si_record_i32($i5);
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i5, $i6);
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(32, 1));
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    $i71 := $load.i64($M.0, $p70);
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(32, 1));
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p72, $i71);
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(56, 1));
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    $i75 := $load.i64($M.0, $p74);
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(56, 1));
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p76, $i75);
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    $i8 := $i5;
    goto $bb4;

  $bb4:
    call $p9, $p10, $i11, $i12, $p13, $i14, $i15, $p16, $p17, $p18, $i19, $i20, $p21, $i22, $i23, $p24, $p25, $i26, $p27, $i28, $p29, $i30, $p31, $i32, $i33, $i34, $i35, $i36, $p37, $i38, $p39, $i40, $p41, $i42, $p43, $i44, $i45, $i46, $i47, $i48, $p49, $i50, $i51, $p52, $p53, $i54, $i55, $p56, $p57, $i58, $i59, $p60, $p61, $i62, $i63, $p64, $p65, $i66, $i67, $i68, $i8 := xennet_get_stats64_loop_$bb4($p1, $p3, $p9, $p10, $i11, $i12, $p13, $i14, $i15, $p16, $p17, $p18, $i19, $i20, $p21, $i22, $i23, $p24, $p25, $i26, $p27, $i28, $p29, $i30, $p31, $i32, $i33, $i34, $i35, $i36, $p37, $i38, $p39, $i40, $p41, $i42, $p43, $i44, $i45, $i46, $i47, $i48, $p49, $i50, $i51, $p52, $p53, $i54, $i55, $p56, $p57, $i58, $i59, $p60, $p61, $i62, $i63, $p64, $p65, $i66, $i67, $i68, $i8);
    goto $bb4_last;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    call {:si_unique_call 102} $i11 := devirtbounce.2(0, $p10);
    call {:si_unique_call 103} {:cexpr "__ptr"} boogie_si_record_i64($i11);
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i8);
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref($i12, 8));
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.0, $p13);
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    $i15 := $add.i64($i14, $i11);
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    $p16 := $i2p.i64.ref($i15);
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    call {:si_unique_call 104} $i19 := devirtbounce.2(0, $p18);
    call {:si_unique_call 105} {:cexpr "__ptr___0"} boogie_si_record_i64($i19);
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i8);
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref($i20, 8));
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    $i22 := $load.i64($M.0, $p21);
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    $i23 := $add.i64($i22, $i19);
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    $p24 := $i2p.i64.ref($i23);
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    call $p25, $i26, $p27, $i28, $p29, $i30, $p31, $i32, $i33, $i34, $i35, $i36 := xennet_get_stats64_loop_$bb6($p24, $p25, $i26, $p27, $i28, $p29, $i30, $p31, $i32, $i33, $i34, $i35, $i36);
    goto $bb6_last;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 106} $i26 := u64_stats_fetch_begin_irq($p25);
    call {:si_unique_call 107} {:cexpr "start"} boogie_si_record_i32($i26);
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p24, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $i28 := $load.i64($M.0, $p27);
    call {:si_unique_call 108} {:cexpr "tx_packets"} boogie_si_record_i64($i28);
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p24, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.0, $p29);
    call {:si_unique_call 109} {:cexpr "tx_bytes"} boogie_si_record_i64($i30);
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p24, $mul.ref(0, 16)), $mul.ref(16, 1));
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 110} $i32 := u64_stats_fetch_retry_irq($p31, $i26);
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    $i33 := $zext.i1.i8($i32);
    call {:si_unique_call 111} {:cexpr "tmp___0"} boogie_si_record_i8($i33);
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i8.i1($i33);
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    $i35, $i36 := $i28, $i30;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    call $p37, $i38, $p39, $i40, $p41, $i42, $p43, $i44, $i45, $i46, $i47, $i48 := xennet_get_stats64_loop_$bb10($p16, $p37, $i38, $p39, $i40, $p41, $i42, $p43, $i44, $i45, $i46, $i47, $i48);
    goto $bb10_last;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 112} $i38 := u64_stats_fetch_begin_irq($p37);
    call {:si_unique_call 113} {:cexpr "start"} boogie_si_record_i32($i38);
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p16, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    $i40 := $load.i64($M.0, $p39);
    call {:si_unique_call 114} {:cexpr "rx_packets"} boogie_si_record_i64($i40);
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p16, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    $i42 := $load.i64($M.0, $p41);
    call {:si_unique_call 115} {:cexpr "rx_bytes"} boogie_si_record_i64($i42);
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p16, $mul.ref(0, 16)), $mul.ref(16, 1));
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} $i44 := u64_stats_fetch_retry_irq($p43, $i38);
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $i45 := $zext.i1.i8($i44);
    call {:si_unique_call 117} {:cexpr "tmp___1"} boogie_si_record_i8($i45);
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i8.i1($i45);
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    $i47, $i48 := $i40, $i42;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    $i50 := $load.i64($M.0, $p49);
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    $i51 := $add.i64($i50, $i47);
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p52, $i51);
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(8, 1));
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    $i54 := $load.i64($M.0, $p53);
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    $i55 := $add.i64($i54, $i35);
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(8, 1));
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p56, $i55);
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    $i58 := $load.i64($M.0, $p57);
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    $i59 := $add.i64($i58, $i48);
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p60, $i59);
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(24, 1));
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    $i62 := $load.i64($M.0, $p61);
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    $i63 := $add.i64($i62, $i36);
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(24, 1));
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p64, $i63);
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 118} $i66 := cpumask_next($i8, $p65);
    call {:si_unique_call 119} {:cexpr "tmp___2"} boogie_si_record_i32($i66);
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    $i68 := $slt.i32($i66, $i67);
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i68 == 1);
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb14:
    assume $i68 == 1;
    assume {:verifier.code 0} true;
    $i8 := $i66;
    goto $bb14_dummy;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i46 == 1;
    goto $bb11_dummy;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i34 == 1;
    goto $bb7_dummy;

  $bb11_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p16, $mul.ref(0, 16)), $mul.ref(16, 1));
    goto corral_source_split_491;

  $bb7_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 16)), $mul.ref(16, 1));
    goto corral_source_split_480;

  $bb14_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_463;
}



const xennet_poll_controller: ref;

axiom xennet_poll_controller == $sub.ref(0, 147148);

procedure xennet_poll_controller($p0: ref);
  free requires assertsPassed;
  modifies $M.14, $M.0, $CurrAddr;



implementation xennet_poll_controller($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $i13: i32;
  var $i14: i1;
  var $i6: i32;
  var vslice_dummy_var_12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} $p1 := netdev_priv($p0);
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1028, 1));
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    call {:si_unique_call 121} {:cexpr "num_queues"} boogie_si_record_i32($i4);
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    $i5 := $ult.i32(0, $i4);
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb4;

  $bb4:
    call $p7, $p8, $p9, $i10, $p11, $i13, $i14, $i6, vslice_dummy_var_12 := xennet_poll_controller_loop_$bb4($p2, $i4, $p7, $p8, $p9, $i10, $p11, $i13, $i14, $i6, vslice_dummy_var_12);
    goto $bb4_last;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    $i10 := $zext.i32.i64($i6);
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p9, $mul.ref($i10, 1));
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 122} vslice_dummy_var_12 := xennet_interrupt(0, $p11);
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i6, 1);
    call {:si_unique_call 123} {:cexpr "i"} boogie_si_record_i32($i13);
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $i14 := $ult.i32($i13, $i4);
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i14 == 1);
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i6 := $i13;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_547;
}



const xennet_fix_features: ref;

axiom xennet_fix_features == $sub.ref(0, 148180);

procedure xennet_fix_features($p0: ref, $i1: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $CurrAddr;



implementation xennet_fix_features($p0: ref, $i1: i64) returns ($r: i64)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i1;
  var $i23: i64;
  var $i24: i64;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i1;
  var $i39: i64;
  var $i40: i64;
  var $i41: i64;
  var $i42: i64;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $i51: i32;
  var $i52: i1;
  var $i53: i32;
  var $i54: i1;
  var $i55: i64;
  var $i56: i64;
  var $i57: i64;
  var $i58: i64;
  var $i59: i1;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $i66: i32;
  var $i67: i32;
  var $i68: i1;
  var $i69: i32;
  var $i70: i1;
  var $i71: i64;
  var $i72: i64;
  var $i73: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 124} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 125} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 126} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 127} $p5 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 128} $p6 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 129} {:cexpr "xennet_fix_features:arg:features"} boogie_si_record_i64($i1);
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 130} $p7 := netdev_priv($p0);
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i1);
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 1);
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i25 := $i1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    $i26 := $and.i64($i25, 16);
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    $i41 := $i25;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    $i42 := $and.i64($i41, 65536);
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    $i43 := $ne.i64($i42, 0);
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    $i57 := $i41;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    $i58 := $and.i64($i57, 1048576);
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    $i59 := $ne.i64($i58, 0);
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    $i73 := $i57;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    $r := $i73;
    return;

  $bb28:
    assume $i59 == 1;
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p6, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    $M.11 := $store.i32($M.11, $p60, 0);
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p8, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p62, $mul.ref(0, 1672)), $mul.ref(16, 1));
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p6, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.11, $p65);
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 140} $i67 := xenbus_scanf.i32.ref.ref.ref.ref($i66, $p64, .str.15, .str.12, $p2);
    call {:si_unique_call 141} {:cexpr "tmp___3"} boogie_si_record_i32($i67);
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    $i68 := $slt.i32($i67, 0);
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.8, $p2);
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    $i70 := $eq.i32($i69, 0);
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    $i72 := $i57;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $i73 := $i72;
    goto $bb36;

  $bb33:
    assume $i70 == 1;
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    $i71 := $and.i64($i57, $sub.i64(0, 1048577));
    call {:si_unique_call 142} {:cexpr "features"} boogie_si_record_i64($i71);
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $i72 := $i71;
    goto $bb35;

  $bb30:
    assume $i68 == 1;
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    $M.8 := $store.i32($M.8, $p2, 0);
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb19:
    assume $i43 == 1;
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p5, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    $M.10 := $store.i32($M.10, $p44, 0);
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p8, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p46, $mul.ref(0, 1672)), $mul.ref(16, 1));
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p5, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.10, $p49);
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} $i51 := xenbus_scanf.i32.ref.ref.ref.ref($i50, $p48, .str.14, .str.12, $p2);
    call {:si_unique_call 138} {:cexpr "tmp___2"} boogie_si_record_i32($i51);
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    $i52 := $slt.i32($i51, 0);
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.8, $p2);
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i53, 0);
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    $i56 := $i41;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    $i57 := $i56;
    goto $bb27;

  $bb24:
    assume $i54 == 1;
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    $i55 := $and.i64($i41, $sub.i64(0, 65537));
    call {:si_unique_call 139} {:cexpr "features"} boogie_si_record_i64($i55);
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    $i56 := $i55;
    goto $bb26;

  $bb21:
    assume $i52 == 1;
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    $M.8 := $store.i32($M.8, $p2, 0);
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb10:
    assume $i27 == 1;
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    $M.9 := $store.i32($M.9, $p28, 0);
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p8, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 1672)), $mul.ref(16, 1));
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.9, $p33);
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 134} $i35 := xenbus_scanf.i32.ref.ref.ref.ref($i34, $p32, .str.13, .str.12, $p2);
    call {:si_unique_call 135} {:cexpr "tmp___1"} boogie_si_record_i32($i35);
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    $i36 := $slt.i32($i35, 0);
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.8, $p2);
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 0);
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    $i40 := $i25;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    $i41 := $i40;
    goto $bb18;

  $bb15:
    assume $i38 == 1;
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    $i39 := $and.i64($i25, $sub.i64(0, 17));
    call {:si_unique_call 136} {:cexpr "features"} boogie_si_record_i64($i39);
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $i40 := $i39;
    goto $bb17;

  $bb12:
    assume $i36 == 1;
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    $M.8 := $store.i32($M.8, $p2, 0);
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p12, 0);
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p8, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 1672)), $mul.ref(16, 1));
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.7, $p17);
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} $i19 := xenbus_scanf.i32.ref.ref.ref.ref($i18, $p16, .str.11, .str.12, $p2);
    call {:si_unique_call 132} {:cexpr "tmp___0"} boogie_si_record_i32($i19);
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i19, 0);
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.8, $p2);
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 0);
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i24 := $i1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    $i25 := $i24;
    goto $bb9;

  $bb6:
    assume $i22 == 1;
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    $i23 := $and.i64($i1, $sub.i64(0, 2));
    call {:si_unique_call 133} {:cexpr "features"} boogie_si_record_i64($i23);
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    $i24 := $i23;
    goto $bb8;

  $bb3:
    assume $i20 == 1;
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    $M.8 := $store.i32($M.8, $p2, 0);
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const xennet_set_features: ref;

axiom xennet_set_features == $sub.ref(0, 149212);

procedure xennet_set_features($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation xennet_set_features($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} {:cexpr "xennet_set_features:arg:features"} boogie_si_record_i64($i1);
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $i2 := $and.i64($i1, 1);
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(560, 1));
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $i6 := $ugt.i32($i5, 1500);
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 144} netdev_info.ref.ref($p0, .str.4);
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(560, 1));
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, 1500);
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const netdev_info: ref;

axiom netdev_info == $sub.ref(0, 150244);

procedure netdev_info.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation netdev_info.ref.ref($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    return;
}



const netdev_priv: ref;

axiom netdev_priv == $sub.ref(0, 151276);

procedure netdev_priv($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation netdev_priv($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref(3008, 1));
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const xenbus_scanf: ref;

axiom xenbus_scanf == $sub.ref(0, 152308);

procedure xenbus_scanf.i32.ref.ref.ref.ref($i0: i32, $p1: ref, $p2: ref, $p3: ref, p.4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.12, $CurrAddr;



implementation xenbus_scanf.i32.ref.ref.ref.ref($i0: i32, $p1: ref, $p2: ref, $p3: ref, p.4: ref) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p5, $i0);
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 1} true;
    call {:si_unique_call 146} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 147} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const xennet_interrupt: ref;

axiom xennet_interrupt == $sub.ref(0, 153340);

procedure xennet_interrupt($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.14, $M.0, $CurrAddr;



implementation xennet_interrupt($i0: i32, $p1: ref) returns ($r: i32)
{
  var vslice_dummy_var_13: i32;
  var vslice_dummy_var_14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} {:cexpr "xennet_interrupt:arg:irq"} boogie_si_record_i32($i0);
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} vslice_dummy_var_13 := xennet_tx_interrupt($i0, $p1);
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} vslice_dummy_var_14 := xennet_rx_interrupt($i0, $p1);
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $r := 1;
    return;
}



const xennet_tx_interrupt: ref;

axiom xennet_tx_interrupt == $sub.ref(0, 154372);

procedure xennet_tx_interrupt($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.14, $M.0;



implementation xennet_tx_interrupt($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} {:cexpr "xennet_tx_interrupt:arg:irq"} boogie_si_record_i32($i0);
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} ldv_spin_lock();
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 153} xennet_tx_buf_gc($p2);
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 8944)), $mul.ref(392, 1));
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} spin_unlock_irqrestore($p3, $u0);
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    $r := 1;
    return;
}



const xennet_rx_interrupt: ref;

axiom xennet_rx_interrupt == $sub.ref(0, 155404);

procedure xennet_rx_interrupt($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation xennet_rx_interrupt($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $i8: i8;
  var $i9: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i10: i1;
  var $i20: i32;
  var $i21: i64;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} {:cexpr "xennet_rx_interrupt:arg:irq"} boogie_si_record_i32($i0);
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 8944)), $mul.ref(32, 1));
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} $i7 := netif_carrier_ok($p6);
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i8($i7);
    call {:si_unique_call 157} {:cexpr "tmp"} boogie_si_record_i8($i8);
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i8);
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    $i10 := 0;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    $i20 := $zext.i1.i32($i10);
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i20);
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} $i22 := ldv__builtin_expect($i21, 1);
    call {:si_unique_call 159} {:cexpr "tmp___0"} boogie_si_record_i64($i22);
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := 1;
    return;

  $bb4:
    assume $i23 == 1;
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 8944)), $mul.ref(40, 1));
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} napi_schedule($p24);
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 8944)), $mul.ref(5704, 1)), $mul.ref(16, 1));
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 8944)), $mul.ref(5704, 1)), $mul.ref(4, 1));
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i15, $i18);
    assume {:verifier.code 0} true;
    $i10 := $i19;
    goto $bb3;
}



const netif_carrier_ok: ref;

axiom netif_carrier_ok == $sub.ref(0, 156436);

procedure netif_carrier_ok($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation netif_carrier_ok($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(72, 1));
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} $i2 := constant_test_bit(2, $p1);
    call {:si_unique_call 162} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 157468);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 163} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 164} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const napi_schedule: ref;

axiom napi_schedule == $sub.ref(0, 158500);

procedure napi_schedule($p0: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation napi_schedule($p0: ref)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} $i1 := napi_schedule_prep($p0);
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 166} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} __napi_schedule($p0);
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const napi_schedule_prep: ref;

axiom napi_schedule_prep == $sub.ref(0, 159532);

procedure napi_schedule_prep($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation napi_schedule_prep($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} $i1 := napi_disable_pending($p0);
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 169} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(16, 1));
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} $i7 := test_and_set_bit(0, $p6);
    call {:si_unique_call 171} {:cexpr "tmp___1"} boogie_si_record_i32($i7);
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb9;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    $i9 := 1;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;
}



const __napi_schedule: ref;

axiom __napi_schedule == $sub.ref(0, 160564);

procedure __napi_schedule($p0: ref);
  free requires assertsPassed;



implementation __napi_schedule($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    return;
}



const napi_disable_pending: ref;

axiom napi_disable_pending == $sub.ref(0, 161596);

procedure napi_disable_pending($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation napi_disable_pending($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(16, 1));
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} $i2 := constant_test_bit(1, $p1);
    call {:si_unique_call 173} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const test_and_set_bit: ref;

axiom test_and_set_bit == $sub.ref(0, 162628);

procedure test_and_set_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation test_and_set_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 175} {:cexpr "test_and_set_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 176} devirtbounce.3(0, $p1, $p2, $i0, $p1);
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.13, $p2);
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    $i4 := $sext.i8.i32($i3);
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const constant_test_bit: ref;

axiom constant_test_bit == $sub.ref(0, 163660);

procedure constant_test_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation constant_test_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $i5: i32;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} {:cexpr "constant_test_bit:arg:nr"} boogie_si_record_i64($i0);
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    $i2 := $ashr.i64($i0, 6);
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p1, $mul.ref($i2, 8));
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i0);
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 63);
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    $i8 := $lshr.i64($i4, $i7);
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 1);
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const ldv_spin_lock: ref;

axiom ldv_spin_lock == $sub.ref(0, 164692);

procedure ldv_spin_lock();
  free requires assertsPassed;
  modifies $M.14;



implementation ldv_spin_lock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    $M.14 := 1;
    call {:si_unique_call 178} {:cexpr "ldv_spin"} boogie_si_record_i32(1);
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    return;
}



const xennet_tx_buf_gc: ref;

axiom xennet_tx_buf_gc == $sub.ref(0, 165724);

procedure xennet_tx_buf_gc($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation xennet_tx_buf_gc($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $i6: i8;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i64;
  var $p30: ref;
  var $p31: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i16;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $i40: i16;
  var $i41: i32;
  var $i42: i64;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i64;
  var $p50: ref;
  var $i51: i32;
  var $i52: i32;
  var $i53: i1;
  var $i54: i32;
  var $i55: i64;
  var $i56: i64;
  var $i57: i1;
  var $i59: i32;
  var $i60: i64;
  var $p62: ref;
  var $i63: i32;
  var $p65: ref;
  var $i66: i32;
  var $i67: i64;
  var $p69: ref;
  var $i70: i32;
  var $i71: i32;
  var $i72: i64;
  var $p74: ref;
  var $i75: i32;
  var $i76: i64;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $i82: i32;
  var $i83: i16;
  var $i84: i32;
  var $i85: i1;
  var $i22: i32;
  var $i86: i32;
  var $i21: i32;
  var $p88: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $i93: i32;
  var $i94: i32;
  var $i95: i32;
  var $i96: i32;
  var $i97: i32;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $i102: i1;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $i107: i32;
  var $i108: i1;
  var vslice_dummy_var_15: i32;
  var vslice_dummy_var_16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(32, 1));
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 179} $i5 := netif_carrier_ok($p4);
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i5);
    call {:si_unique_call 180} {:cexpr "tmp"} boogie_si_record_i8($i6);
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} $i10 := ldv__builtin_expect($i9, 0);
    call {:si_unique_call 182} {:cexpr "tmp___1"} boogie_si_record_i64($i10);
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    call $p13, $p14, $p15, $i16, $p18, $i19, $i20, $p24, $i25, $i26, $i27, $i28, $p30, $p31, $p33, $p34, $p35, $i36, $i37, $i38, $p39, $i40, $i41, $i42, $p44, $p45, $p46, $i47, $i48, $p50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i59, $i60, $p62, $i63, $p65, $i66, $i67, $p69, $i70, $i71, $i72, $p74, $i75, $i76, $p78, $p79, $p80, $p81, $i82, $i83, $i84, $i85, $i22, $i86, $i21, $p88, $p90, $p91, $p92, $i93, $i94, $i95, $i96, $i97, $p99, $p100, $p101, $i102, $p104, $p105, $p106, $i107, $i108, vslice_dummy_var_16 := xennet_tx_buf_gc_loop_$bb8($p0, $p13, $p14, $p15, $i16, $p18, $i19, $i20, $p24, $i25, $i26, $i27, $i28, $p30, $p31, $p33, $p34, $p35, $i36, $i37, $i38, $p39, $i40, $i41, $i42, $p44, $p45, $p46, $i47, $i48, $p50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i59, $i60, $p62, $i63, $p65, $i66, $i67, $p69, $i70, $i71, $i72, $p74, $i75, $i76, $p78, $p79, $p80, $p81, $i82, $i83, $i84, $i85, $i22, $i86, $i21, $p88, $p90, $p91, $p92, $i93, $i94, $i95, $i96, $i97, $p99, $p100, $p101, $i102, $p104, $p105, $p106, $i107, $i108, vslice_dummy_var_16);
    goto $bb8_last;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 76)), $mul.ref(8, 1));
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    call {:si_unique_call 184} {:cexpr "prod"} boogie_si_record_i32($i16);
    call {:si_unique_call 185} devirtbounce.1(0);
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(464, 1)), $mul.ref(4, 1));
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    call {:si_unique_call 186} {:cexpr "cons"} boogie_si_record_i32($i19);
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, $i16);
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    $i21 := $i19;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(464, 1)), $mul.ref(4, 1));
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p88, $i16);
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(464, 1)), $mul.ref(16, 1));
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.0, $p90);
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p91, $mul.ref(0, 76)), $mul.ref(0, 1));
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $i93 := $load.i32($M.0, $p92);
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    $i94 := $sub.i32($i93, $i16);
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    $i95 := $lshr.i32($i94, 1);
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $i96 := $add.i32($i95, $i16);
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    $i97 := $add.i32($i96, 1);
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(464, 1)), $mul.ref(16, 1));
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    $p100 := $load.ref($M.0, $p99);
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p100, $mul.ref(0, 76)), $mul.ref(12, 1));
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p101, $i97);
    call {:si_unique_call 199} devirtbounce.1(0);
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    $i102 := $eq.i32($i21, $i16);
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i102 == 1);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 200} xennet_maybe_wake_tx($p0);
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    return;

  $bb25:
    assume $i102 == 1;
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(464, 1)), $mul.ref(16, 1));
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $p105 := $load.ref($M.0, $p104);
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p105, $mul.ref(0, 76)), $mul.ref(8, 1));
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    $i107 := $load.i32($M.0, $p106);
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $i108 := $ne.i32($i107, $i16);
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i108 == 1);
    goto $bb27;

  $bb28:
    assume {:verifier.code 0} true;
    assume $i108 == 1;
    goto $bb28_dummy;

  $bb9:
    assume $i20 == 1;
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    $i22 := $i19;
    goto $bb12;

  $bb12:
    call $p24, $i25, $i26, $i27, $i28, $p30, $p31, $p33, $p34, $p35, $i36, $i37, $i38, $p39, $i40, $i41, $i42, $p44, $p45, $p46, $i47, $i48, $p50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i59, $i60, $p62, $i63, $p65, $i66, $i67, $p69, $i70, $i71, $i72, $p74, $i75, $i76, $p78, $p79, $p80, $p81, $i82, $i83, $i84, $i85, $i22, $i86, vslice_dummy_var_16 := xennet_tx_buf_gc_loop_$bb12($p0, $i16, $p24, $i25, $i26, $i27, $i28, $p30, $p31, $p33, $p34, $p35, $i36, $i37, $i38, $p39, $i40, $i41, $i42, $p44, $p45, $p46, $i47, $i48, $p50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i59, $i60, $p62, $i63, $p65, $i66, $i67, $p69, $i70, $i71, $i72, $p74, $i75, $i76, $p78, $p79, $p80, $p81, $i82, $i83, $i84, $i85, $i22, $i86, vslice_dummy_var_16);
    goto $bb12_last;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(464, 1)), $mul.ref(8, 1));
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32($i25, 1);
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i26, $i22);
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $i28 := $zext.i32.i64($i27);
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(464, 1)), $mul.ref(16, 1));
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p31, $mul.ref(0, 76)), $mul.ref(64, 1)), $mul.ref($i28, 12));
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $i36 := $load.i16($M.0, $p35);
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    $i37 := $sext.i16.i32($i36);
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 1);
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p34, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    $i40 := $load.i16($M.0, $p39);
    call {:si_unique_call 188} {:cexpr "id"} boogie_si_record_i16($i40);
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    $i41 := $zext.i16.i32($i40);
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $i42 := $sext.i32.i64($i41);
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(496, 1)), $mul.ref($i42, 8));
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    $i47 := $zext.i16.i32($i40);
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $i48 := $sext.i32.i64($i47);
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(2548, 1)), $mul.ref($i48, 4));
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 189} $i52 := gnttab_query_foreign_access($i51);
    call {:si_unique_call 190} {:cexpr "tmp___2"} boogie_si_record_i32($i52);
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    $i54 := $zext.i1.i32($i53);
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    $i55 := $sext.i32.i64($i54);
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} $i56 := ldv__builtin_expect($i55, 0);
    call {:si_unique_call 192} {:cexpr "tmp___3"} boogie_si_record_i64($i56);
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $i57 := $ne.i64($i56, 0);
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i59 := $zext.i16.i32($i40);
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    $i60 := $sext.i32.i64($i59);
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(2548, 1)), $mul.ref($i60, 4));
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p62);
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} vslice_dummy_var_16 := gnttab_end_foreign_access_ref($i63, 4);
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(2544, 1));
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $i66 := $zext.i16.i32($i40);
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    $i67 := $sext.i32.i64($i66);
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(2548, 1)), $mul.ref($i67, 4));
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.0, $p69);
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 196} gnttab_release_grant_reference($p65, $i70);
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    $i71 := $zext.i16.i32($i40);
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    $i72 := $sext.i32.i64($i71);
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(2548, 1)), $mul.ref($i72, 4));
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p74, 0);
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    $i75 := $zext.i16.i32($i40);
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    $i76 := $sext.i32.i64($i75);
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(3576, 1)), $mul.ref($i76, 8));
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p78, $0.ref);
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5624, 1));
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(496, 1));
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    $p81 := $bitcast.ref.ref($p80);
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    $i82 := $zext.i16.i32($i40);
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    $i83 := $trunc.i32.i16($i82);
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} add_id_to_freelist($p79, $p81, $i83);
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} dev_kfree_skb_irq($p46);
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i84 := $add.i32($i22, 1);
    call {:si_unique_call 187} {:cexpr "cons"} boogie_si_record_i32($i84);
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    $i85 := $ne.i32($i84, $i16);
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    $i86 := $i84;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    $i21 := $i86;
    goto $bb11;

  $bb22:
    assume $i85 == 1;
    assume {:verifier.code 0} true;
    $i22 := $i84;
    goto $bb22_dummy;

  $bb18:
    assume $i57 == 1;
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} vslice_dummy_var_15 := printk.ref.ref(.str.2, .str.3);
    call {:si_unique_call 194} devirtbounce.4(0, .str.1, 388, 12);
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    call xennet_tx_buf_gc_loop_$bb20();
    goto $bb20_last;

  $bb14:
    assume $i38 == 1;
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb4:
    assume $i11 == 1;
    call {:si_unique_call 183} devirtbounce.4(0, .str.1, 369, 12);
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    call xennet_tx_buf_gc_loop_$bb6();
    goto $bb6_last;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb20_dummy:
    assume false;
    return;

  $bb20_last:
    assume {:verifier.code 0} true;
    goto $bb20_dummy;

  $bb22_dummy:
    assume false;
    return;

  $bb12_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_827;

  $bb28_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(464, 1)), $mul.ref(16, 1));
    goto corral_source_split_817;

  $bb6_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    goto $bb6_dummy;
}



const spin_unlock_irqrestore: ref;

axiom spin_unlock_irqrestore == $sub.ref(0, 166756);

procedure spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.14;



implementation spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} ldv_spin_unlock();
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} ldv_spin_unlock_irqrestore_12($p0, $i1);
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock: ref;

axiom ldv_spin_unlock == $sub.ref(0, 167788);

procedure ldv_spin_unlock();
  free requires assertsPassed;
  modifies $M.14;



implementation ldv_spin_unlock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    $M.14 := 0;
    call {:si_unique_call 204} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock_irqrestore_12: ref;

axiom ldv_spin_unlock_irqrestore_12 == $sub.ref(0, 168820);

procedure ldv_spin_unlock_irqrestore_12($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation ldv_spin_unlock_irqrestore_12($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} {:cexpr "ldv_spin_unlock_irqrestore_12:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} _raw_spin_unlock_irqrestore($p3, $i1);
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irqrestore: ref;

axiom _raw_spin_unlock_irqrestore == $sub.ref(0, 169852);

procedure _raw_spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    return;
}



const gnttab_query_foreign_access: ref;

axiom gnttab_query_foreign_access == $sub.ref(0, 170884);

procedure gnttab_query_foreign_access($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation gnttab_query_foreign_access($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 208} {:cexpr "gnttab_query_foreign_access:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 1} true;
    call {:si_unique_call 209} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 210} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const printk: ref;

axiom printk == $sub.ref(0, 171916);

procedure printk.ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 1} true;
    call {:si_unique_call 211} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 212} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 1} true;
    call {:si_unique_call 213} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 214} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 1} true;
    call {:si_unique_call 215} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 216} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 1} true;
    call {:si_unique_call 217} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 218} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const gnttab_end_foreign_access_ref: ref;

axiom gnttab_end_foreign_access_ref == $sub.ref(0, 172948);

procedure gnttab_end_foreign_access_ref($i0: i32, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation gnttab_end_foreign_access_ref($i0: i32, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 219} {:cexpr "gnttab_end_foreign_access_ref:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 220} {:cexpr "gnttab_end_foreign_access_ref:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 1} true;
    call {:si_unique_call 221} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 222} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const gnttab_release_grant_reference: ref;

axiom gnttab_release_grant_reference == $sub.ref(0, 173980);

procedure gnttab_release_grant_reference($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation gnttab_release_grant_reference($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} {:cexpr "gnttab_release_grant_reference:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    return;
}



const add_id_to_freelist: ref;

axiom add_id_to_freelist == $sub.ref(0, 175012);

procedure add_id_to_freelist($p0: ref, $p1: ref, $i2: i16);
  free requires assertsPassed;
  modifies $M.0;



implementation add_id_to_freelist($p0: ref, $p1: ref, $i2: i16)
{
  var $i3: i64;
  var $p4: ref;
  var $i5: i32;
  var $i6: i16;
  var $i7: i32;
  var $i8: i16;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 224} {:cexpr "add_id_to_freelist:arg:id"} boogie_si_record_i16($i2);
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i64($i2);
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p1, $mul.ref($i3, 8));
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p0);
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i16($i5);
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i6);
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i16($i7);
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 225} skb_entry_set_link($p4, $i8);
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i2);
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p0, $i9);
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    return;
}



const dev_kfree_skb_irq: ref;

axiom dev_kfree_skb_irq == $sub.ref(0, 176044);

procedure dev_kfree_skb_irq($p0: ref);
  free requires assertsPassed;



implementation dev_kfree_skb_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 226} __dev_kfree_skb_irq($p0, 1);
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    return;
}



const xennet_maybe_wake_tx: ref;

axiom xennet_maybe_wake_tx == $sub.ref(0, 177076);

procedure xennet_maybe_wake_tx($p0: ref);
  free requires assertsPassed;



implementation xennet_maybe_wake_tx($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i1;
  var $i9: i8;
  var $i10: i1;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i1;
  var $i17: i8;
  var $i18: i1;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $i23: i32;
  var $p24: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(32, 1));
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(0, 1));
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 227} $p7 := netdev_get_tx_queue($p4, $i6);
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 228} $i8 := netif_tx_queue_stopped($p7);
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i8($i8);
    call {:si_unique_call 229} {:cexpr "tmp___1"} boogie_si_record_i8($i9);
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1($i9);
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i64($i10);
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} $i12 := ldv__builtin_expect($i11, 0);
    call {:si_unique_call 231} {:cexpr "tmp___2"} boogie_si_record_i64($i12);
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 232} $i14 := netfront_tx_slot_available($p0);
    call {:si_unique_call 233} {:cexpr "tmp___3"} boogie_si_record_i32($i14);
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb3:
    assume $i15 == 1;
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 234} $i16 := netif_running($p4);
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i8($i16);
    call {:si_unique_call 235} {:cexpr "tmp___4"} boogie_si_record_i8($i17);
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i8.i1($i17);
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i64($i18);
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} $i20 := ldv__builtin_expect($i19, 1);
    call {:si_unique_call 237} {:cexpr "tmp___5"} boogie_si_record_i64($i20);
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb5:
    assume $i21 == 1;
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(0, 1));
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} $p24 := netdev_get_tx_queue($p4, $i23);
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 239} netif_tx_wake_queue($p24);
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    goto $bb7;
}



const netdev_get_tx_queue: ref;

axiom netdev_get_tx_queue == $sub.ref(0, 178108);

procedure netdev_get_tx_queue($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation netdev_get_tx_queue($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} {:cexpr "netdev_get_tx_queue:arg:index"} boogie_si_record_i32($i1);
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1016, 1));
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    $i4 := $zext.i32.i64($i1);
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p3, $mul.ref($i4, 504));
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const netif_tx_queue_stopped: ref;

axiom netif_tx_queue_stopped == $sub.ref(0, 179140);

procedure netif_tx_queue_stopped($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation netif_tx_queue_stopped($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(424, 1));
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} $i2 := constant_test_bit(0, $p1);
    call {:si_unique_call 242} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const netfront_tx_slot_available: ref;

axiom netfront_tx_slot_available == $sub.ref(0, 180172);

procedure netfront_tx_slot_available($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation netfront_tx_slot_available($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(464, 1)), $mul.ref(0, 1));
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(464, 1)), $mul.ref(4, 1));
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32($i3, $i6);
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $i8 := $ule.i32($i7, 236);
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const netif_running: ref;

axiom netif_running == $sub.ref(0, 181204);

procedure netif_running($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation netif_running($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(72, 1));
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 243} $i2 := constant_test_bit(0, $p1);
    call {:si_unique_call 244} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const netif_tx_wake_queue: ref;

axiom netif_tx_wake_queue == $sub.ref(0, 182236);

procedure netif_tx_wake_queue($p0: ref);
  free requires assertsPassed;



implementation netif_tx_wake_queue($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    return;
}



const __dev_kfree_skb_irq: ref;

axiom __dev_kfree_skb_irq == $sub.ref(0, 183268);

procedure __dev_kfree_skb_irq($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __dev_kfree_skb_irq($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 245} {:cexpr "__dev_kfree_skb_irq:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    return;
}



const skb_entry_set_link: ref;

axiom skb_entry_set_link == $sub.ref(0, 184300);

procedure skb_entry_set_link($p0: ref, $i1: i16);
  free requires assertsPassed;
  modifies $M.0;



implementation skb_entry_set_link($p0: ref, $i1: i16)
{
  var $i2: i64;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} {:cexpr "skb_entry_set_link:arg:id"} boogie_si_record_i16($i1);
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $i2 := $zext.i16.i64($i1);
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p3, $i2);
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    return;
}



const u64_stats_fetch_begin_irq: ref;

axiom u64_stats_fetch_begin_irq == $sub.ref(0, 185332);

procedure u64_stats_fetch_begin_irq($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation u64_stats_fetch_begin_irq($p0: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const u64_stats_fetch_retry_irq: ref;

axiom u64_stats_fetch_retry_irq == $sub.ref(0, 186364);

procedure u64_stats_fetch_retry_irq($p0: ref, $i1: i32) returns ($r: i1);
  free requires assertsPassed;



implementation u64_stats_fetch_retry_irq($p0: ref, $i1: i32) returns ($r: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} {:cexpr "u64_stats_fetch_retry_irq:arg:start"} boogie_si_record_i32($i1);
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const cpumask_next: ref;

axiom cpumask_next == $sub.ref(0, 187396);

procedure cpumask_next($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation cpumask_next($i0: i32, $p1: ref) returns ($r: i32)
{
  var $i2: i1;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i64;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i32;
  var vslice_dummy_var_17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} {:cexpr "cpumask_next:arg:n"} boogie_si_record_i32($i0);
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i0, $sub.i32(0, 1));
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 1024)), $mul.ref(0, 1));
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    $i8 := $add.i32($i0, 1);
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} $i10 := find_next_bit($p5, $i7, $i9);
    call {:si_unique_call 251} {:cexpr "tmp"} boogie_si_record_i64($i10);
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i64.i32($i10);
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 249} vslice_dummy_var_17 := cpumask_check($i0);
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const cpumask_check: ref;

axiom cpumask_check == $sub.ref(0, 188428);

procedure cpumask_check($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation cpumask_check($i0: i32) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $i22: i1;
  var $i23: i32;
  var $i24: i64;
  var vslice_dummy_var_18: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} {:cexpr "cpumask_check:arg:cpu"} boogie_si_record_i32($i0);
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    $i1 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    $i2 := $ule.i32($i1, $i0);
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    call {:si_unique_call 253} {:cexpr "__ret_warn_once"} boogie_si_record_i32($i3);
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 254} $i7 := ldv__builtin_expect($i6, 0);
    call {:si_unique_call 255} {:cexpr "tmp___1"} boogie_si_record_i64($i7);
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i3, 0);
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    $i23 := $zext.i1.i32($i22);
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64($i23);
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 262} vslice_dummy_var_18 := ldv__builtin_expect($i24, 0);
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1(1);
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    $i10 := $xor.i1($i9, 1);
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    call {:si_unique_call 256} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i11);
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} $i15 := ldv__builtin_expect($i14, 0);
    call {:si_unique_call 258} {:cexpr "tmp"} boogie_si_record_i64($i15);
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i11, 0);
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i32($i17);
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i18);
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} $i20 := ldv__builtin_expect($i19, 0);
    call {:si_unique_call 261} {:cexpr "tmp___0"} boogie_si_record_i64($i20);
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i21 == 1;
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i16 == 1;
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} warn_slowpath_null(.str.16, 117);
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const find_next_bit: ref;

axiom find_next_bit == $sub.ref(0, 189460);

procedure find_next_bit($p0: ref, $i1: i64, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation find_next_bit($p0: ref, $i1: i64, $i2: i64) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 263} {:cexpr "find_next_bit:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 264} {:cexpr "find_next_bit:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 1} true;
    call {:si_unique_call 265} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 266} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const warn_slowpath_null: ref;

axiom warn_slowpath_null == $sub.ref(0, 190492);

procedure warn_slowpath_null($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation warn_slowpath_null($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} {:cexpr "warn_slowpath_null:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    return;
}



const xennet_can_sg: ref;

axiom xennet_can_sg == $sub.ref(0, 191524);

procedure xennet_can_sg($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation xennet_can_sg($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(240, 1));
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.0, $p1);
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    $i3 := $and.i64($i2, 1);
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const skb_get_hash: ref;

axiom skb_get_hash == $sub.ref(0, 192556);

procedure skb_get_hash($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation skb_get_hash($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref(145, 1));
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(164, 1));
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p6, $mul.ref(145, 1));
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} __skb_get_hash($p0);
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const __skb_get_hash: ref;

axiom __skb_get_hash == $sub.ref(0, 193588);

procedure __skb_get_hash($p0: ref);
  free requires assertsPassed;



implementation __skb_get_hash($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    return;
}



const skb_get_queue_mapping: ref;

axiom skb_get_queue_mapping == $sub.ref(0, 194620);

procedure skb_get_queue_mapping($p0: ref) returns ($r: i16);
  free requires assertsPassed;



implementation skb_get_queue_mapping($p0: ref) returns ($r: i16)
{
  var $p1: ref;
  var $i2: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(140, 1));
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.0, $p1);
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const net_ratelimit: ref;

axiom net_ratelimit == $sub.ref(0, 195652);

procedure net_ratelimit() returns ($r: i32);
  free requires assertsPassed;



implementation net_ratelimit() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 1} true;
    call {:si_unique_call 269} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 270} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const xennet_count_skb_slots: ref;

axiom xennet_count_skb_slots == $sub.ref(0, 196684);

procedure xennet_count_skb_slots($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation xennet_count_skb_slots($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i64;
  var $i11: i64;
  var $i12: i64;
  var $i13: i64;
  var $i14: i64;
  var $i15: i32;
  var $i16: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $p25: ref;
  var $i26: i32;
  var $i27: i64;
  var $p28: ref;
  var $i29: i32;
  var $i30: i64;
  var $i31: i64;
  var $i32: i64;
  var $i33: i64;
  var $i34: i64;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $i38: i1;
  var $i18: i32;
  var $i19: i32;
  var $i39: i32;
  var $i17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} $p1 := skb_end_pointer($p0);
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 320)), $mul.ref(0, 1));
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    call {:si_unique_call 272} {:cexpr "frags"} boogie_si_record_i32($i5);
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 273} $i6 := skb_headlen($p0);
    call {:si_unique_call 274} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    $i10 := $and.i64($i9, 4095);
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    $i11 := $zext.i32.i64($i6);
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    $i12 := $add.i64($i10, $i11);
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $i13 := $add.i64($i12, 4095);
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $i14 := $lshr.i64($i13, 12);
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i64.i32($i14);
    call {:si_unique_call 275} {:cexpr "pages"} boogie_si_record_i32($i15);
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $i16 := $slt.i32(0, $i5);
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $i17 := $i15;
    assume {:branchcond $i16} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $i18, $i19 := $i15, 0;
    goto $bb4;

  $bb4:
    call $p20, $p21, $p22, $p23, $i24, $p25, $i26, $i27, $p28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i18, $i19, $i39 := xennet_count_skb_slots_loop_$bb4($p0, $i5, $p20, $p21, $p22, $p23, $i24, $p25, $i26, $i27, $p28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i18, $i19, $i39);
    goto $bb4_last;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 276} $p20 := skb_end_pointer($p0);
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64($i19);
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p23, $mul.ref($i24, 16));
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 277} $i26 := skb_frag_size($p25);
    call {:si_unique_call 278} {:cexpr "tmp___2"} boogie_si_record_i32($i26);
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    $i27 := $zext.i32.i64($i26);
    call {:si_unique_call 279} {:cexpr "size"} boogie_si_record_i64($i27);
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p23, $mul.ref($i24, 16)), $mul.ref(8, 1));
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    $i30 := $zext.i32.i64($i29);
    call {:si_unique_call 280} {:cexpr "offset"} boogie_si_record_i64($i30);
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    $i31 := $and.i64($i30, 4095);
    call {:si_unique_call 281} {:cexpr "offset"} boogie_si_record_i64($i31);
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $i32 := $add.i64($i31, $i27);
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    $i33 := $add.i64($i32, 4095);
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $i34 := $lshr.i64($i33, 12);
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i64.i32($i34);
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $i36 := $add.i32($i35, $i18);
    call {:si_unique_call 282} {:cexpr "pages"} boogie_si_record_i32($i36);
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    $i37 := $add.i32($i19, 1);
    call {:si_unique_call 283} {:cexpr "i"} boogie_si_record_i32($i37);
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    $i38 := $slt.i32($i37, $i5);
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    $i39 := $i36;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    $i17 := $i39;
    goto $bb3;

  $bb6:
    assume $i38 == 1;
    assume {:verifier.code 0} true;
    $i18, $i19 := $i36, $i37;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1153;
}



const __dynamic_pr_debug: ref;

axiom __dynamic_pr_debug == $sub.ref(0, 197716);

procedure __dynamic_pr_debug.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    return;
}



const skb_linearize: ref;

axiom skb_linearize == $sub.ref(0, 198748);

procedure skb_linearize($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation skb_linearize($p0: ref) returns ($r: i32)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} $i1 := skb_is_nonlinear($p0);
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 285} {:cexpr "tmp___2"} boogie_si_record_i8($i2);
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} $i4 := __skb_linearize($p0);
    call {:si_unique_call 287} {:cexpr "tmp___0"} boogie_si_record_i32($i4);
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $i5 := $i4;
    goto $bb3;
}



const __phys_addr: ref;

axiom __phys_addr == $sub.ref(0, 199780);

procedure __phys_addr($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation __phys_addr($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 288} {:cexpr "__phys_addr:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 1} true;
    call {:si_unique_call 289} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 290} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const skb_headlen: ref;

axiom skb_headlen == $sub.ref(0, 200812);

procedure skb_headlen($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation skb_headlen($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(132, 1));
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32($i2, $i4);
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const netif_skb_features: ref;

axiom netif_skb_features == $sub.ref(0, 201844);

procedure netif_skb_features($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation netif_skb_features($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 1} true;
    call {:si_unique_call 291} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 292} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const netif_needs_gso: ref;

axiom netif_needs_gso == $sub.ref(0, 202876);

procedure netif_needs_gso($p0: ref, $i1: i64) returns ($r: i1);
  free requires assertsPassed;



implementation netif_needs_gso($p0: ref, $i1: i64) returns ($r: i1)
{
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;
  var $i5: i1;
  var $i6: i8;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i1;
  var $i16: i1;
  var $i22: i32;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $i26: i32;
  var $i10: i32;
  var $i27: i32;
  var $i28: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} {:cexpr "netif_needs_gso:arg:features"} boogie_si_record_i64($i1);
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 294} $i2 := skb_is_gso($p0);
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 295} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i27 := 0;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    $r := $i28;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 296} $i5 := skb_gso_ok($p0, $i1);
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i5);
    call {:si_unique_call 297} {:cexpr "tmp___0"} boogie_si_record_i8($i6);
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i9 == 1);
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p0);
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p11, $mul.ref(145, 1));
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 6);
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    $i16 := 0;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i32($i16);
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i22);
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 298} $i24 := ldv__builtin_expect($i23, 0);
    call {:si_unique_call 299} {:cexpr "tmp___2"} boogie_si_record_i64($i24);
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i26 := 0;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i10 := $i26;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    $i27 := $i10;
    goto $bb15;

  $bb12:
    assume $i25 == 1;
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    $i26 := 1;
    goto $bb14;

  $bb9:
    assume $i15 == 1;
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p0);
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p17, $mul.ref(145, 1));
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 2);
    assume {:verifier.code 0} true;
    $i16 := $i21;
    goto $bb11;

  $bb6:
    assume $i9 == 1;
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $i10 := 1;
    goto $bb8;

  $bb3:
    assume $i7 == 1;
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb5;
}



const xennet_make_one_txreq: ref;

axiom xennet_make_one_txreq == $sub.ref(0, 203908);

procedure xennet_make_one_txreq($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation xennet_make_one_txreq($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32) returns ($r: ref)
{
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i16;
  var $i12: i32;
  var $p14: ref;
  var $i15: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $p21: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $i27: i64;
  var $p29: ref;
  var $p30: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i16;
  var $i37: i32;
  var $i38: i1;
  var $i39: i32;
  var $i40: i64;
  var $i41: i64;
  var $i42: i1;
  var $i43: i64;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $i50: i16;
  var $i51: i32;
  var $i52: i16;
  var $i53: i64;
  var $p55: ref;
  var $p56: ref;
  var $i57: i64;
  var $p59: ref;
  var $i60: i64;
  var $p62: ref;
  var $i63: i16;
  var $p64: ref;
  var $p65: ref;
  var $i66: i16;
  var $p67: ref;
  var $i68: i16;
  var $p69: ref;
  var $p70: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 300} {:cexpr "xennet_make_one_txreq:arg:offset"} boogie_si_record_i32($i3);
    call {:si_unique_call 301} {:cexpr "xennet_make_one_txreq:arg:len"} boogie_si_record_i32($i4);
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(4096, $i3);
    call {:si_unique_call 302} {:cexpr "__min1"} boogie_si_record_i32($i5);
    call {:si_unique_call 303} {:cexpr "xennet_make_one_txreq:arg:__min2"} boogie_si_record_i32($i4);
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $i6 := $ult.i32($i5, $i4);
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $i7 := $i4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5624, 1));
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(496, 1));
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} $i11 := get_id_from_freelist($p8, $p10);
    call {:si_unique_call 305} {:cexpr "tmp"} boogie_si_record_i16($i11);
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i11);
    call {:si_unique_call 306} {:cexpr "id"} boogie_si_record_i32($i12);
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(464, 1)), $mul.ref(0, 1));
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    call {:si_unique_call 307} {:cexpr "tmp___0"} boogie_si_record_i32($i15);
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(464, 1)), $mul.ref(0, 1));
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $i19 := $add.i32($i18, 1);
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(464, 1)), $mul.ref(0, 1));
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, $i19);
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(464, 1)), $mul.ref(8, 1));
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32($i24, 1);
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i15, $i25);
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    $i27 := $zext.i32.i64($i26);
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(464, 1)), $mul.ref(16, 1));
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p30, $mul.ref(0, 76)), $mul.ref(64, 1)), $mul.ref($i27, 12));
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(2544, 1));
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} $i35 := gnttab_claim_grant_reference($p34);
    call {:si_unique_call 309} {:cexpr "tmp___1"} boogie_si_record_i32($i35);
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i32.i16($i35);
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $i37 := $sext.i16.i32($i36);
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    $i38 := $slt.i32($i37, 0);
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $i39 := $zext.i1.i32($i38);
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    $i40 := $sext.i32.i64($i39);
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} $i41 := ldv__builtin_expect($i40, 0);
    call {:si_unique_call 311} {:cexpr "tmp___2"} boogie_si_record_i64($i41);
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, 0);
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} $i43 := page_to_mfn($p2);
    call {:si_unique_call 314} {:cexpr "tmp___3"} boogie_si_record_i64($i43);
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(32, 1));
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p47, $mul.ref(0, 1672)), $mul.ref(24, 1));
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p48);
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i32.i16($i49);
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $i51 := $zext.i16.i32($i50);
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i32.i16($i51);
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} gnttab_grant_foreign_access_ref($i35, $i52, $i43, 4);
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    $i53 := $zext.i32.i64($i12);
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(496, 1)), $mul.ref($i53, 8));
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p55);
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p56, $p1);
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    $i57 := $zext.i32.i64($i12);
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(3576, 1)), $mul.ref($i57, 8));
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p59, $p2);
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    $i60 := $zext.i32.i64($i12);
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(2548, 1)), $mul.ref($i60, 4));
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p62, $i35);
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    $i63 := $trunc.i32.i16($i12);
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p33, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p64, $i63);
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p33, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p65, $i35);
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    $i66 := $trunc.i32.i16($i3);
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p33, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p67, $i66);
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $i68 := $trunc.i32.i16($i7);
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p33, $mul.ref(0, 12)), $mul.ref(10, 1));
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p69, $i68);
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p33, $mul.ref(0, 12)), $mul.ref(6, 1));
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p70, 0);
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    $r := $p33;
    return;

  $bb4:
    assume $i42 == 1;
    call {:si_unique_call 312} devirtbounce.4(0, .str.1, 431, 12);
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    call xennet_make_one_txreq_loop_$bb6();
    goto $bb6_last;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    $i7 := $i5;
    goto $bb3;

  $bb6_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    goto $bb6_dummy;
}



const skb_end_pointer: ref;

axiom skb_end_pointer == $sub.ref(0, 204940);

procedure skb_end_pointer($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation skb_end_pointer($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(208, 1));
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(204, 1));
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    $i5 := $zext.i32.i64($i4);
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p2, $mul.ref($i5, 1));
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const xennet_make_txreqs: ref;

axiom xennet_make_txreqs == $sub.ref(0, 205972);

procedure xennet_make_txreqs($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i32, $i5: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation xennet_make_txreqs($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i32, $i5: i32) returns ($r: ref)
{
  var $i6: i32;
  var $i7: i64;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p16: ref;
  var $i17: i16;
  var $i18: i32;
  var $i19: i32;
  var $i20: i16;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i16;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $p30: ref;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} {:cexpr "xennet_make_txreqs:arg:offset"} boogie_si_record_i32($i4);
    call {:si_unique_call 317} {:cexpr "xennet_make_txreqs:arg:len"} boogie_si_record_i32($i5);
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    $i6 := $lshr.i32($i4, 12);
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p3, $mul.ref($i7, 64));
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i4, 4095);
    call {:si_unique_call 318} {:cexpr "offset"} boogie_si_record_i32($i9);
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i5, 0);
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $p11 := $p1;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $r := $p11;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    $i12, $p13, $i14, $p15 := $i5, $p1, $i9, $p8;
    goto $bb4;

  $bb4:
    call $p16, $i17, $i18, $i19, $i20, $p21, $p22, $p23, $p24, $p25, $i26, $i27, $i28, $i29, $i12, $p13, $i14, $p15, $p30 := xennet_make_txreqs_loop_$bb4($p0, $p2, $p16, $i17, $i18, $i19, $i20, $p21, $p22, $p23, $p24, $p25, $i26, $i27, $i28, $i29, $i12, $p13, $i14, $p15, $p30);
    goto $bb4_last;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p13, $mul.ref(0, 12)), $mul.ref(6, 1));
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    $i17 := $load.i16($M.0, $p16);
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i17);
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    $i19 := $or.i32($i18, 4);
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i16($i19);
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p13, $mul.ref(0, 12)), $mul.ref(6, 1));
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p21, $i20);
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 319} $p22 := skb_get($p2);
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} $p23 := xennet_make_one_txreq($p0, $p22, $p15, $i14, $i12);
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p15, $mul.ref(1, 64));
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p23, $mul.ref(0, 12)), $mul.ref(10, 1));
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    $i26 := $load.i16($M.0, $p25);
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    $i27 := $zext.i16.i32($i26);
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    $i28 := $sub.i32($i12, $i27);
    call {:si_unique_call 321} {:cexpr "len"} boogie_si_record_i32($i28);
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    $p30 := $p23;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    $p11 := $p30;
    goto $bb3;

  $bb6:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    $i12, $p13, $i14, $p15 := $i28, $p23, 0, $p24;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1339;
}



const skb_frag_size: ref;

axiom skb_frag_size == $sub.ref(0, 207004);

procedure skb_frag_size($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation skb_frag_size($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const skb_frag_page: ref;

axiom skb_frag_page == $sub.ref(0, 208036);

procedure skb_frag_page($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation skb_frag_page($p0: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const notify_remote_via_irq: ref;

axiom notify_remote_via_irq == $sub.ref(0, 209068);

procedure notify_remote_via_irq($i0: i32);
  free requires assertsPassed;



implementation notify_remote_via_irq($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} {:cexpr "notify_remote_via_irq:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    return;
}



const u64_stats_init: ref;

axiom u64_stats_init == $sub.ref(0, 210100);

procedure u64_stats_init($p0: ref);
  free requires assertsPassed;



implementation u64_stats_init($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    return;
}



const netif_tx_stop_queue: ref;

axiom netif_tx_stop_queue == $sub.ref(0, 211132);

procedure netif_tx_stop_queue($p0: ref);
  free requires assertsPassed;



implementation netif_tx_stop_queue($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(424, 1));
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} set_bit(0, $p1);
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    return;
}



const dev_kfree_skb_any: ref;

axiom dev_kfree_skb_any == $sub.ref(0, 212164);

procedure dev_kfree_skb_any($p0: ref);
  free requires assertsPassed;



implementation dev_kfree_skb_any($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} __dev_kfree_skb_any($p0, 1);
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    return;
}



const __dev_kfree_skb_any: ref;

axiom __dev_kfree_skb_any == $sub.ref(0, 213196);

procedure __dev_kfree_skb_any($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __dev_kfree_skb_any($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} {:cexpr "__dev_kfree_skb_any:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    return;
}



const set_bit: ref;

axiom set_bit == $sub.ref(0, 214228);

procedure set_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation set_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} {:cexpr "set_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 327} devirtbounce.5(0, $p1, $i0, $p1);
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    return;
}



const skb_get: ref;

axiom skb_get == $sub.ref(0, 215260);

procedure skb_get($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation skb_get($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(228, 1));
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 328} atomic_inc($p1);
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const atomic_inc: ref;

axiom atomic_inc == $sub.ref(0, 216292);

procedure atomic_inc($p0: ref);
  free requires assertsPassed;



implementation atomic_inc($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 329} devirtbounce.6(0, $p1, $p1);
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    return;
}



const get_id_from_freelist: ref;

axiom get_id_from_freelist == $sub.ref(0, 217324);

procedure get_id_from_freelist($p0: ref, $p1: ref) returns ($r: i16);
  free requires assertsPassed;
  modifies $M.0;



implementation get_id_from_freelist($p0: ref, $p1: ref) returns ($r: i16)
{
  var $i2: i32;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i32;
  var $i8: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p0);
    call {:si_unique_call 330} {:cexpr "id"} boogie_si_record_i32($i2);
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    $i3 := $zext.i32.i64($i2);
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p1, $mul.ref($i3, 8));
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.0, $p5);
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i64.i32($i6);
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p0, $i7);
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i16($i2);
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const gnttab_claim_grant_reference: ref;

axiom gnttab_claim_grant_reference == $sub.ref(0, 218356);

procedure gnttab_claim_grant_reference($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation gnttab_claim_grant_reference($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 1} true;
    call {:si_unique_call 331} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 332} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const page_to_mfn: ref;

axiom page_to_mfn == $sub.ref(0, 219388);

procedure page_to_mfn($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation page_to_mfn($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i64;
  var $i3: i64;
  var $i4: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 24189255811072);
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $i3 := $sdiv.i64($i2, 64);
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} $i4 := pfn_to_mfn($i3);
    call {:si_unique_call 334} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const gnttab_grant_foreign_access_ref: ref;

axiom gnttab_grant_foreign_access_ref == $sub.ref(0, 220420);

procedure gnttab_grant_foreign_access_ref($i0: i32, $i1: i16, $i2: i64, $i3: i32);
  free requires assertsPassed;



implementation gnttab_grant_foreign_access_ref($i0: i32, $i1: i16, $i2: i64, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} {:cexpr "gnttab_grant_foreign_access_ref:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 336} {:cexpr "gnttab_grant_foreign_access_ref:arg:arg1"} boogie_si_record_i16($i1);
    call {:si_unique_call 337} {:cexpr "gnttab_grant_foreign_access_ref:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 338} {:cexpr "gnttab_grant_foreign_access_ref:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    return;
}



const pfn_to_mfn: ref;

axiom pfn_to_mfn == $sub.ref(0, 221452);

procedure pfn_to_mfn($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation pfn_to_mfn($i0: i64) returns ($r: i64)
{
  var $i1: i32;
  var $i2: i1;
  var $i4: i64;
  var $i5: i1;
  var $i6: i64;
  var $i7: i64;
  var $i3: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} {:cexpr "pfn_to_mfn:arg:pfn"} boogie_si_record_i64($i0);
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} $i1 := xen_feature(2);
    call {:si_unique_call 341} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} $i4 := __pfn_to_mfn($i0);
    call {:si_unique_call 343} {:cexpr "mfn"} boogie_si_record_i64($i4);
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, $sub.i64(0, 1));
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i7 := $i4;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    $i3 := $i7;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    $i6 := $and.i64($i4, 4611686018427387903);
    call {:si_unique_call 344} {:cexpr "mfn"} boogie_si_record_i64($i6);
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    $i7 := $i6;
    goto $bb7;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    $i3 := $i0;
    goto $bb3;
}



const xen_feature: ref;

axiom xen_feature == $sub.ref(0, 222484);

procedure xen_feature($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation xen_feature($i0: i32) returns ($r: i32)
{
  var $i1: i64;
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} {:cexpr "xen_feature:arg:flag"} boogie_si_record_i32($i0);
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    $i1 := $sext.i32.i64($i0);
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref(xen_features, $mul.ref(0, 32)), $mul.ref($i1, 1));
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const __pfn_to_mfn: ref;

axiom __pfn_to_mfn == $sub.ref(0, 223516);

procedure __pfn_to_mfn($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation __pfn_to_mfn($i0: i64) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $i12: i64;
  var $i14: i64;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $i20: i64;
  var $i13: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} {:cexpr "__pfn_to_mfn:arg:pfn"} boogie_si_record_i64($i0);
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $i1 := $load.i64($M.0, xen_p2m_size);
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $i2 := $ult.i64($i0, $i1);
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.0, xen_max_p2m_pfn);
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $i7 := $ult.i64($i0, $i6);
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} $i10 := ldv__builtin_expect($i9, 0);
    call {:si_unique_call 349} {:cexpr "tmp___0"} boogie_si_record_i64($i10);
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $i14 := $or.i64($i0, 4611686018427387904);
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    $i13 := $i14;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} $i12 := get_phys_to_machine($i0);
    call {:si_unique_call 353} {:cexpr "tmp"} boogie_si_record_i64($i12);
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb6;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, xen_p2m_addr);
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref($i0, 8));
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    $i5 := $load.i64($M.0, $p4);
    call {:si_unique_call 347} {:cexpr "mfn"} boogie_si_record_i64($i5);
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i5, $sub.i64(0, 1));
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 350} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 351} {:cexpr "tmp___2"} boogie_si_record_i64($i18);
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i13 := $i5;
    goto $bb6;

  $bb7:
    assume $i19 == 1;
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} $i20 := get_phys_to_machine($i0);
    call {:si_unique_call 355} {:cexpr "tmp___1"} boogie_si_record_i64($i20);
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    $i13 := $i20;
    goto $bb6;
}



const get_phys_to_machine: ref;

axiom get_phys_to_machine == $sub.ref(0, 224548);

procedure get_phys_to_machine($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation get_phys_to_machine($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 356} {:cexpr "get_phys_to_machine:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 1} true;
    call {:si_unique_call 357} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 358} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const skb_is_gso: ref;

axiom skb_is_gso == $sub.ref(0, 225580);

procedure skb_is_gso($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation skb_is_gso($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;
  var $i6: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} $p1 := skb_end_pointer($p0);
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 320)), $mul.ref(2, 1));
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.0, $p3);
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const skb_gso_ok: ref;

axiom skb_gso_ok == $sub.ref(0, 226612);

procedure skb_gso_ok($p0: ref, $i1: i64) returns ($r: i1);
  free requires assertsPassed;



implementation skb_gso_ok($p0: ref, $i1: i64) returns ($r: i1)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $i7: i1;
  var $i8: i8;
  var $i9: i1;
  var $i10: i1;
  var $i11: i8;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i64;
  var $i16: i1;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 360} {:cexpr "skb_gso_ok:arg:features"} boogie_si_record_i64($i1);
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} $p2 := skb_end_pointer($p0);
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 320)), $mul.ref(6, 1));
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.0, $p4);
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 362} $i7 := net_gso_ok($i1, $i6);
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i8($i7);
    call {:si_unique_call 363} {:cexpr "tmp___0"} boogie_si_record_i8($i8);
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i8);
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 364} $i10 := skb_has_frag_list($p0);
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i8($i10);
    call {:si_unique_call 365} {:cexpr "tmp___1"} boogie_si_record_i8($i11);
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i8.i1($i11);
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb8;

  $bb8:
    assume !($i14 == 1);
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    $i15 := $and.i64($i1, 64);
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    $i18 := $i17;
    goto $bb12;

  $bb9:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i17 := 1;
    goto $bb11;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb7;

  $bb3:
    assume $i12 == 1;
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb5;
}



const net_gso_ok: ref;

axiom net_gso_ok == $sub.ref(0, 227644);

procedure net_gso_ok($i0: i64, $i1: i32) returns ($r: i1);
  free requires assertsPassed;



implementation net_gso_ok($i0: i64, $i1: i32) returns ($r: i1)
{
  var $i2: i32;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} {:cexpr "net_gso_ok:arg:features"} boogie_si_record_i64($i0);
    call {:si_unique_call 367} {:cexpr "net_gso_ok:arg:gso_type"} boogie_si_record_i32($i1);
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    $i2 := $shl.i32($i1, 16);
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    $i3 := $sext.i32.i64($i2);
    call {:si_unique_call 368} {:cexpr "feature"} boogie_si_record_i64($i3);
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    $i4 := $and.i64($i0, $i3);
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, $i3);
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const skb_has_frag_list: ref;

axiom skb_has_frag_list == $sub.ref(0, 228676);

procedure skb_has_frag_list($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation skb_has_frag_list($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} $p1 := skb_end_pointer($p0);
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 320)), $mul.ref(8, 1));
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const skb_is_nonlinear: ref;

axiom skb_is_nonlinear == $sub.ref(0, 229708);

procedure skb_is_nonlinear($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation skb_is_nonlinear($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(132, 1));
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __skb_linearize: ref;

axiom __skb_linearize == $sub.ref(0, 230740);

procedure __skb_linearize($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __skb_linearize($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(132, 1));
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} $p3 := __pskb_pull_tail($p0, $i2);
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    $i6 := (if $i5 == 1 then 0 else $sub.i32(0, 12));
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const __pskb_pull_tail: ref;

axiom __pskb_pull_tail == $sub.ref(0, 231772);

procedure __pskb_pull_tail($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation __pskb_pull_tail($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} {:cexpr "__pskb_pull_tail:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} $p2 := external_alloc();
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 232804);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 1} true;
    call {:si_unique_call 373} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 374} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const netif_tx_stop_all_queues: ref;

axiom netif_tx_stop_all_queues == $sub.ref(0, 233836);

procedure netif_tx_stop_all_queues($p0: ref);
  free requires assertsPassed;



implementation netif_tx_stop_all_queues($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    return;
}



const napi_disable: ref;

axiom napi_disable == $sub.ref(0, 234868);

procedure napi_disable($p0: ref);
  free requires assertsPassed;



implementation napi_disable($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    return;
}



const napi_enable: ref;

axiom napi_enable == $sub.ref(0, 235900);

procedure napi_enable($p0: ref);
  free requires assertsPassed;



implementation napi_enable($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(16, 1));
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} $i2 := constant_test_bit(0, $p1);
    call {:si_unique_call 376} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} $i6 := ldv__builtin_expect($i5, 0);
    call {:si_unique_call 378} {:cexpr "tmp___0"} boogie_si_record_i64($i6);
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call {:si_unique_call 380} devirtbounce.1(0);
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(16, 1));
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 381} clear_bit(0, $p8);
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    call {:si_unique_call 379} devirtbounce.4(0, .str.5, 507, 12);
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call napi_enable_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const spin_lock_bh: ref;

axiom spin_lock_bh == $sub.ref(0, 236932);

procedure spin_lock_bh($p0: ref);
  free requires assertsPassed;
  modifies $M.14;



implementation spin_lock_bh($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} ldv_spin_lock();
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} ldv_spin_lock_bh_6($p0);
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    return;
}



const xennet_alloc_rx_buffers: ref;

axiom xennet_alloc_rx_buffers == $sub.ref(0, 237964);

procedure xennet_alloc_rx_buffers($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.15, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, assertsPassed;



implementation xennet_alloc_rx_buffers($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $i6: i8;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $p13: ref;
  var $i14: i32;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $i25: i32;
  var $i27: i32;
  var $i28: i16;
  var $i29: i32;
  var $i30: i64;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $i36: i32;
  var $i37: i64;
  var $i38: i64;
  var $i39: i1;
  var $i40: i32;
  var $i41: i64;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $i46: i16;
  var $i47: i32;
  var $i48: i1;
  var $i49: i32;
  var $i50: i64;
  var $i51: i64;
  var $i52: i1;
  var $i53: i32;
  var $i54: i64;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i64;
  var $i63: i64;
  var $i64: i64;
  var $p66: ref;
  var $i67: i32;
  var $i68: i32;
  var $i69: i32;
  var $i70: i64;
  var $p72: ref;
  var $p73: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i64;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i83: i32;
  var $i84: i16;
  var $i85: i32;
  var $i86: i16;
  var $p87: ref;
  var $p88: ref;
  var $i89: i32;
  var $i90: i32;
  var $i91: i32;
  var $i92: i1;
  var $i21: i32;
  var $i93: i32;
  var $i20: i32;
  var $i26: i32;
  var $p95: ref;
  var $p97: ref;
  var $i98: i32;
  var $i99: i32;
  var $i100: i1;
  var $p101: ref;
  var $i102: i64;
  var $i103: i64;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $i109: i32;
  var $p111: ref;
  var $i112: i32;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $i121: i32;
  var $i122: i32;
  var $i123: i32;
  var $i124: i1;
  var $i125: i32;
  var $i126: i1;
  var $p127: ref;
  var $i128: i32;
  var vslice_dummy_var_19: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(32, 1));
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} $i5 := netif_carrier_ok($p4);
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i5);
    call {:si_unique_call 385} {:cexpr "tmp"} boogie_si_record_i8($i6);
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} $i10 := ldv__builtin_expect($i9, 0);
    call {:si_unique_call 387} {:cexpr "tmp___1"} boogie_si_record_i64($i10);
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5704, 1)), $mul.ref(0, 1));
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    call {:si_unique_call 388} {:cexpr "req_prod"} boogie_si_record_i32($i14);
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5704, 1)), $mul.ref(4, 1));
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32($i14, $i17);
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    $i19 := $ule.i32($i18, 255);
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $i20 := $i14;
    assume {:branchcond $i19} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i26 := $i20;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5704, 1)), $mul.ref(0, 1));
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p95, $i26);
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5704, 1)), $mul.ref(4, 1));
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    $i98 := $load.i32($M.0, $p97);
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    $i99 := $sub.i32($i26, $i98);
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    $i100 := $ule.i32($i99, 18);
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    call {:si_unique_call 409} devirtbounce.1(0);
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5704, 1)), $mul.ref(16, 1));
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    $p107 := $load.ref($M.0, $p106);
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p107, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    $i109 := $load.i32($M.0, $p108);
    call {:si_unique_call 410} {:cexpr "__old"} boogie_si_record_i32($i109);
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5704, 1)), $mul.ref(0, 1));
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    $i112 := $load.i32($M.0, $p111);
    call {:si_unique_call 411} {:cexpr "__new"} boogie_si_record_i32($i112);
    call {:si_unique_call 412} devirtbounce.1(0);
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5704, 1)), $mul.ref(16, 1));
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    $p115 := $load.ref($M.0, $p114);
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p115, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p116, $i112);
    call {:si_unique_call 413} devirtbounce.1(0);
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5704, 1)), $mul.ref(16, 1));
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    $p119 := $load.ref($M.0, $p118);
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p119, $mul.ref(0, 72)), $mul.ref(4, 1));
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    $i121 := $load.i32($M.0, $p120);
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    $i122 := $sub.i32($i112, $i121);
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    $i123 := $sub.i32($i112, $i109);
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $i124 := $ult.i32($i122, $i123);
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    $i125 := $zext.i1.i32($i124);
    call {:si_unique_call 414} {:cexpr "notify"} boogie_si_record_i32($i125);
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    $i126 := $ne.i32($i125, 0);
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb31:
    assume $i126 == 1;
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(332, 1));
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $i128 := $load.i32($M.0, $p127);
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} notify_remote_via_irq($i128);
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb28:
    assume $i100 == 1;
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5736, 1));
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    $i102 := $load.i64($M.0, jiffies);
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    $i103 := $add.i64($i102, 25);
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} vslice_dummy_var_19 := ldv_mod_timer_40($p101, $i103);
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb8:
    assume $i19 == 1;
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    $i21 := $i14;
    goto $bb11;

  $bb11:
    call $p22, $i23, $i24, $i25, $i27, $i28, $i29, $i30, $p32, $p33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $p43, $p44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $p56, $p57, $p58, $p59, $p60, $p61, $i62, $i63, $i64, $p66, $i67, $i68, $i69, $i70, $p72, $p73, $p75, $p76, $i77, $p78, $p79, $p80, $p81, $p82, $i83, $i84, $i85, $i86, $p87, $p88, $i89, $i90, $i91, $i92, $i21, $i93 := xennet_alloc_rx_buffers_loop_$bb11($p0, $p16, $p22, $i23, $i24, $i25, $i27, $i28, $i29, $i30, $p32, $p33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $p43, $p44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $p56, $p57, $p58, $p59, $p60, $p61, $i62, $i63, $i64, $p66, $i67, $i68, $i69, $i70, $p72, $p73, $p75, $p76, $i77, $p78, $p79, $p80, $p81, $p82, $i83, $i84, $i85, $i86, $p87, $p88, $i89, $i90, $i91, $i92, $i21, $i93);
    goto $bb11_last;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} $p22 := xennet_alloc_one_rx_buffer($p0);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i23, 0);
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $i25 := $i21;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} $i27 := xennet_rxidx($i21);
    call {:si_unique_call 391} {:cexpr "tmp___2"} boogie_si_record_i32($i27);
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i16($i27);
    call {:si_unique_call 392} {:cexpr "id"} boogie_si_record_i16($i28);
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $i29 := $zext.i16.i32($i28);
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i29);
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref($i30, 8));
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p33);
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    $i36 := $zext.i1.i32($i35);
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    $i37 := $sext.i32.i64($i36);
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 393} $i38 := ldv__builtin_expect($i37, 0);
    call {:si_unique_call 394} {:cexpr "tmp___3"} boogie_si_record_i64($i38);
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    $i39 := $ne.i64($i38, 0);
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i40 := $zext.i16.i32($i28);
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    $i41 := $sext.i32.i64($i40);
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref($i41, 8));
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p43, $p22);
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7912, 1));
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} $i45 := gnttab_claim_grant_reference($p44);
    call {:si_unique_call 397} {:cexpr "tmp___4"} boogie_si_record_i32($i45);
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i32.i16($i45);
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $i47 := $sext.i16.i32($i46);
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    $i48 := $slt.i32($i47, 0);
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    $i49 := $zext.i1.i32($i48);
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $i50 := $sext.i32.i64($i49);
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} $i51 := ldv__builtin_expect($i50, 0);
    call {:si_unique_call 399} {:cexpr "tmp___5"} boogie_si_record_i64($i51);
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    $i52 := $ne.i64($i51, 0);
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i53 := $zext.i16.i32($i28);
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    $i54 := $sext.i32.i64($i53);
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref($i54, 4));
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p56, $i45);
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} $p57 := skb_end_pointer($p22);
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p57);
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p58, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p59);
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 402} $p61 := skb_frag_page($p60);
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    $i62 := $p2i.ref.i64($p61);
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    $i63 := $add.i64($i62, 24189255811072);
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    $i64 := $sdiv.i64($i63, 64);
    call {:si_unique_call 403} {:cexpr "pfn"} boogie_si_record_i64($i64);
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5704, 1)), $mul.ref(8, 1));
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.0, $p66);
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    $i68 := $sub.i32($i67, 1);
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    $i69 := $and.i32($i68, $i21);
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    $i70 := $zext.i32.i64($i69);
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5704, 1)), $mul.ref(16, 1));
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.0, $p72);
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($p73, $mul.ref(0, 72)), $mul.ref(64, 1)), $mul.ref($i70, 8));
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p75);
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 404} $i77 := pfn_to_mfn($i64);
    call {:si_unique_call 405} {:cexpr "tmp___8"} boogie_si_record_i64($i77);
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(32, 1));
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.0, $p78);
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p79, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.0, $p80);
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p81, $mul.ref(0, 1672)), $mul.ref(24, 1));
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    $i83 := $load.i32($M.0, $p82);
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    $i84 := $trunc.i32.i16($i83);
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    $i85 := $zext.i16.i32($i84);
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    $i86 := $trunc.i32.i16($i85);
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} gnttab_grant_foreign_access_ref($i45, $i86, $i77, 0);
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p76, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p87, $i28);
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p76, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p88, $i45);
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    $i89 := $add.i32($i21, 1);
    call {:si_unique_call 407} {:cexpr "req_prod"} boogie_si_record_i32($i89);
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    $i90 := $load.i32($M.0, $p16);
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    $i91 := $sub.i32($i89, $i90);
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    $i92 := $ule.i32($i91, 255);
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    $i93 := $i89;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    $i20 := $i93;
    goto $bb10;

  $bb25:
    assume $i92 == 1;
    assume {:verifier.code 0} true;
    $i21 := $i89;
    goto $bb25_dummy;

  $bb21:
    assume $i52 == 1;
    call {:si_unique_call 400} devirtbounce.4(0, .str.1, 307, 12);
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    call xennet_alloc_rx_buffers_loop_$bb23();
    goto $bb23_last;

  $bb17:
    assume $i39 == 1;
    call {:si_unique_call 395} devirtbounce.4(0, .str.1, 303, 12);
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    call xennet_alloc_rx_buffers_loop_$bb19();
    goto $bb19_last;

  $bb13:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $i26 := $i25;
    goto $bb15;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb23_dummy:
    assume false;
    return;

  $bb23_last:
    assume {:verifier.code 0} true;
    goto $bb23_dummy;

  $bb19_dummy:
    assume false;
    return;

  $bb19_last:
    assume {:verifier.code 0} true;
    goto $bb19_dummy;

  $bb25_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1589;
}



const spin_unlock_bh: ref;

axiom spin_unlock_bh == $sub.ref(0, 238996);

procedure spin_unlock_bh($p0: ref);
  free requires assertsPassed;
  modifies $M.14;



implementation spin_unlock_bh($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} ldv_spin_unlock();
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} ldv_spin_unlock_bh_10($p0);
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    return;
}



const netif_tx_start_all_queues: ref;

axiom netif_tx_start_all_queues == $sub.ref(0, 240028);

procedure netif_tx_start_all_queues($p0: ref);
  free requires assertsPassed;



implementation netif_tx_start_all_queues($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1024, 1));
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    $i3 := $ugt.i32($i2, 0);
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb4;

  $bb4:
    call $p5, $i6, $i7, $i8, $i4 := netif_tx_start_all_queues_loop_$bb4($p0, $p1, $p5, $i6, $i7, $i8, $i4);
    goto $bb4_last;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} $p5 := netdev_get_tx_queue($p0, $i4);
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} netif_tx_start_queue($p5);
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    $i6 := $add.i32($i4, 1);
    call {:si_unique_call 420} {:cexpr "i"} boogie_si_record_i32($i6);
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p1);
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    $i8 := $ugt.i32($i7, $i6);
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i8 == 1);
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1722;
}



const netif_tx_start_queue: ref;

axiom netif_tx_start_queue == $sub.ref(0, 241060);

procedure netif_tx_start_queue($p0: ref);
  free requires assertsPassed;



implementation netif_tx_start_queue($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(424, 1));
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} clear_bit(0, $p1);
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    return;
}



const clear_bit: ref;

axiom clear_bit == $sub.ref(0, 242092);

procedure clear_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation clear_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} {:cexpr "clear_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 423} devirtbounce.5(0, $p1, $i0, $p1);
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock_bh_10: ref;

axiom ldv_spin_unlock_bh_10 == $sub.ref(0, 243124);

procedure ldv_spin_unlock_bh_10($p0: ref);
  free requires assertsPassed;



implementation ldv_spin_unlock_bh_10($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} _raw_spin_unlock_bh($p2);
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_bh: ref;

axiom _raw_spin_unlock_bh == $sub.ref(0, 244156);

procedure _raw_spin_unlock_bh($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock_bh($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    return;
}



const xennet_alloc_one_rx_buffer: ref;

axiom xennet_alloc_one_rx_buffer == $sub.ref(0, 245188);

procedure xennet_alloc_one_rx_buffer($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, assertsPassed;



implementation xennet_alloc_one_rx_buffer($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(32, 1));
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} $p5 := ldv___netdev_alloc_skb_39($p4, 256, 544);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 426} $i10 := ldv__builtin_expect($i9, 0);
    call {:si_unique_call 427} {:cexpr "tmp"} boogie_si_record_i64($i10);
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 428} $p13 := alloc_pages(544, 0);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} skb_add_rx_frag($p5, 0, $p13, 0, 0, 4096);
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 431} skb_reserve($p5, 0);
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(32, 1));
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p5, $mul.ref(0, 232)), $mul.ref(32, 1));
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p20, $p19);
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    $p12 := $p5;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    $r := $p12;
    return;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} kfree_skb($p5);
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    $p12 := $0.ref;
    goto $bb3;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    $p12 := $0.ref;
    goto $bb3;

  SeqInstr_7:
    assume !assertsPassed;
    return;
}



const xennet_rxidx: ref;

axiom xennet_rxidx == $sub.ref(0, 246220);

procedure xennet_rxidx($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation xennet_rxidx($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 432} {:cexpr "xennet_rxidx:arg:idx"} boogie_si_record_i32($i0);
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    $i1 := $and.i32($i0, 255);
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_mod_timer_40: ref;

axiom ldv_mod_timer_40 == $sub.ref(0, 247252);

procedure ldv_mod_timer_40($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.15, $M.0, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22;



implementation ldv_mod_timer_40($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} {:cexpr "ldv_mod_timer_40:arg:ldv_func_arg2"} boogie_si_record_i64($i1);
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} $i2 := mod_timer($p0, $i1);
    call {:si_unique_call 435} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} activate_pending_timer_1($p0, $i1, 1);
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const mod_timer: ref;

axiom mod_timer == $sub.ref(0, 248284);

procedure mod_timer($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation mod_timer($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 437} {:cexpr "mod_timer:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 1} true;
    call {:si_unique_call 438} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 439} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const activate_pending_timer_1: ref;

axiom activate_pending_timer_1 == $sub.ref(0, 249316);

procedure activate_pending_timer_1($p0: ref, $i1: i64, $i2: i32);
  free requires assertsPassed;
  modifies $M.15, $M.0, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22;



implementation activate_pending_timer_1($p0: ref, $i1: i64, $i2: i32)
{
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i64;
  var $i33: i1;
  var $i34: i32;
  var $i35: i1;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} {:cexpr "activate_pending_timer_1:arg:data"} boogie_si_record_i64($i1);
    call {:si_unique_call 441} {:cexpr "activate_pending_timer_1:arg:pending_flag"} boogie_si_record_i32($i2);
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    $p3 := $M.15;
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p0);
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i4, $i5);
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p12 := $M.17;
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p0);
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i13, $i14);
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p21 := $M.19;
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p0);
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i22, $i23);
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p30 := $M.21;
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p0);
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    $i33 := $eq.i64($i31, $i32);
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} activate_suitable_timer_1($p0, $i1);
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb29:
    assume $i33 == 1;
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $i34 := $M.22;
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 2);
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb33;

  $bb33:
    assume !($i35 == 1);
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i2, 0);
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb34:
    assume {:verifier.code 0} true;
    assume $i36 == 1;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $M.21 := $p0;
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $p37 := $M.21;
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p38, $i1);
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $M.22 := 1;
    call {:si_unique_call 445} {:cexpr "ldv_timer_1_3"} boogie_si_record_i32(1);
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i35 == 1;
    goto $bb32;

  $bb20:
    assume $i24 == 1;
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    $i25 := $M.20;
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 2);
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb24;

  $bb24:
    assume !($i26 == 1);
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i2, 0);
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $M.19 := $p0;
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    $p28 := $M.19;
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p29, $i1);
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    $M.20 := 1;
    call {:si_unique_call 444} {:cexpr "ldv_timer_1_2"} boogie_si_record_i32(1);
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb23;

  $bb11:
    assume $i15 == 1;
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    $i16 := $M.18;
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 2);
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i17 == 1);
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i2, 0);
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $M.17 := $p0;
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    $p19 := $M.17;
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p20, $i1);
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $M.18 := 1;
    call {:si_unique_call 443} {:cexpr "ldv_timer_1_1"} boogie_si_record_i32(1);
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb14;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    $i7 := $M.16;
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 2);
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i8 == 1);
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i2, 0);
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $M.15 := $p0;
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $p10 := $M.15;
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p11, $i1);
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $M.16 := 1;
    call {:si_unique_call 442} {:cexpr "ldv_timer_1_0"} boogie_si_record_i32(1);
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb4;
}



const activate_suitable_timer_1: ref;

axiom activate_suitable_timer_1 == $sub.ref(0, 250348);

procedure activate_suitable_timer_1($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.15, $M.0, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22;



implementation activate_suitable_timer_1($p0: ref, $i1: i64)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} {:cexpr "activate_suitable_timer_1:arg:data"} boogie_si_record_i64($i1);
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $i2 := $M.16;
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i3 == 1);
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    $i4 := $M.16;
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 2);
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i8 := $M.18;
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i9 == 1);
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $i10 := $M.18;
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 2);
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i14 := $M.20;
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb16;

  $bb16:
    assume !($i15 == 1);
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    $i16 := $M.20;
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 2);
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i20 := $M.22;
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 0);
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i21 == 1);
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    $i22 := $M.22;
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 2);
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $M.21 := $p0;
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    $p24 := $M.21;
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p25, $i1);
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    $M.22 := 1;
    call {:si_unique_call 451} {:cexpr "ldv_timer_1_3"} boogie_si_record_i32(1);
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb21;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $M.19 := $p0;
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    $p18 := $M.19;
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p19, $i1);
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    $M.20 := 1;
    call {:si_unique_call 450} {:cexpr "ldv_timer_1_2"} boogie_si_record_i32(1);
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb15;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $M.17 := $p0;
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    $p12 := $M.17;
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p13, $i1);
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    $M.18 := 1;
    call {:si_unique_call 449} {:cexpr "ldv_timer_1_1"} boogie_si_record_i32(1);
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb9;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $M.15 := $p0;
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    $p6 := $M.15;
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p7, $i1);
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    $M.16 := 1;
    call {:si_unique_call 448} {:cexpr "ldv_timer_1_0"} boogie_si_record_i32(1);
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;
}



const ldv___netdev_alloc_skb_39: ref;

axiom ldv___netdev_alloc_skb_39 == $sub.ref(0, 251380);

procedure ldv___netdev_alloc_skb_39($p0: ref, $i1: i32, $i2: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv___netdev_alloc_skb_39($p0: ref, $i1: i32, $i2: i32) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} {:cexpr "ldv___netdev_alloc_skb_39:arg:ldv_func_arg2"} boogie_si_record_i32($i1);
    call {:si_unique_call 453} {:cexpr "ldv___netdev_alloc_skb_39:arg:flags"} boogie_si_record_i32($i2);
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} ldv_check_alloc_flags($i2);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} $p3 := ldv_undef_ptr();
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  SeqInstr_13:
    assume !assertsPassed;
    return;
}



const alloc_pages: ref;

axiom alloc_pages == $sub.ref(0, 252412);

procedure alloc_pages($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation alloc_pages($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} {:cexpr "alloc_pages:arg:flags"} boogie_si_record_i32($i0);
    call {:si_unique_call 457} {:cexpr "alloc_pages:arg:order"} boogie_si_record_i32($i1);
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 458} ldv_check_alloc_flags($i0);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 459} $p2 := ldv_undef_ptr();
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  SeqInstr_16:
    assume !assertsPassed;
    return;
}



const kfree_skb: ref;

axiom kfree_skb == $sub.ref(0, 253444);

procedure kfree_skb($p0: ref);
  free requires assertsPassed;



implementation kfree_skb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    return;
}



const skb_add_rx_frag: ref;

axiom skb_add_rx_frag == $sub.ref(0, 254476);

procedure skb_add_rx_frag($p0: ref, $i1: i32, $p2: ref, $i3: i32, $i4: i32, $i5: i32);
  free requires assertsPassed;



implementation skb_add_rx_frag($p0: ref, $i1: i32, $p2: ref, $i3: i32, $i4: i32, $i5: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} {:cexpr "skb_add_rx_frag:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 461} {:cexpr "skb_add_rx_frag:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 462} {:cexpr "skb_add_rx_frag:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 463} {:cexpr "skb_add_rx_frag:arg:arg5"} boogie_si_record_i32($i5);
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    return;
}



const skb_reserve: ref;

axiom skb_reserve == $sub.ref(0, 255508);

procedure skb_reserve($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation skb_reserve($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} {:cexpr "skb_reserve:arg:len"} boogie_si_record_i32($i1);
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i1);
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p3, $mul.ref($i4, 1));
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, $p5);
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(200, 1));
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $i9 := $add.i32($i8, $i1);
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(200, 1));
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i9);
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    return;
}



const ldv_check_alloc_flags: ref;

axiom ldv_check_alloc_flags == $sub.ref(0, 256540);

procedure ldv_check_alloc_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_alloc_flags($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} {:cexpr "ldv_check_alloc_flags:arg:flags"} boogie_si_record_i32($i0);
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    $i1 := $M.14;
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i0, 16);
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} ldv_error();
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_19:
    assume !assertsPassed;
    return;
}



const ldv_undef_ptr: ref;

axiom ldv_undef_ptr == $sub.ref(0, 257572);

procedure ldv_undef_ptr() returns ($r: ref);
  free requires assertsPassed;



implementation ldv_undef_ptr() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 1} true;
    call {:si_unique_call 467} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 468} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 258604);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 469} __VERIFIER_error();
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_22:
    assume !assertsPassed;
    return;
}



const ldv_spin_lock_bh_6: ref;

axiom ldv_spin_lock_bh_6 == $sub.ref(0, 259636);

procedure ldv_spin_lock_bh_6($p0: ref);
  free requires assertsPassed;



implementation ldv_spin_lock_bh_6($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} _raw_spin_lock_bh($p2);
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock_bh: ref;

axiom _raw_spin_lock_bh == $sub.ref(0, 260668);

procedure _raw_spin_lock_bh($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock_bh($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    return;
}



const ethtool_op_get_link: ref;

axiom ethtool_op_get_link == $sub.ref(0, 261700);

procedure ethtool_op_get_link($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ethtool_op_get_link($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 1} true;
    call {:si_unique_call 471} $i1 := __VERIFIER_nondet_uint();
    call {:si_unique_call 472} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i1);
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const xennet_get_strings: ref;

axiom xennet_get_strings == $sub.ref(0, 262732);

procedure xennet_get_strings($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation xennet_get_strings($p0: ref, $i1: i32, $p2: ref)
{
  var $i3: i1;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;

  $bb0:
    call {:si_unique_call 473} {:cexpr "xennet_get_strings:arg:stringset"} boogie_si_record_i32($i1);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb2:
    assume $i3 == 1;
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 474} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p2, xennet_stats, 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_2;
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;
}



const xennet_get_ethtool_stats: ref;

axiom xennet_get_ethtool_stats == $sub.ref(0, 263764);

procedure xennet_get_ethtool_stats($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation xennet_get_ethtool_stats($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} $p3 := netdev_priv($p0);
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref(56, 4));
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} $i6 := atomic_read($p5);
    call {:si_unique_call 477} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p2, $i7);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;
}



const xennet_get_sset_count: ref;

axiom xennet_get_sset_count == $sub.ref(0, 264796);

procedure xennet_get_sset_count($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation xennet_get_sset_count($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i1;
  var $i3: i32;

  $bb0:
    call {:si_unique_call 478} {:cexpr "xennet_get_sset_count:arg:string_set"} boogie_si_record_i32($i1);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, 22);
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb2:
    assume $i2 == 1;
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $i3 := 1;
    goto $bb4;
}



const atomic_read: ref;

axiom atomic_read == $sub.ref(0, 265828);

procedure atomic_read($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_read($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 266860);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const show_rxbuf: ref;

axiom show_rxbuf == $sub.ref(0, 267892);

procedure show_rxbuf($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation show_rxbuf($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $i3: i32;
  var $i4: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 479} $i3 := sprintf.ref.ref.i64($p2, .str, 256);
    call {:si_unique_call 480} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const store_rxbuf: ref;

axiom store_rxbuf == $sub.ref(0, 268924);

procedure store_rxbuf($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation store_rxbuf($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64)
{
  var $p4: ref;
  var $i5: i1;
  var $i6: i8;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i11: i64;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $i10: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 481} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 482} {:cexpr "store_rxbuf:arg:len"} boogie_si_record_i64($i3);
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} $i5 := capable(12);
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i5);
    call {:si_unique_call 484} {:cexpr "tmp"} boogie_si_record_i8($i6);
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} $i11 := simple_strtoul($p2, $p4, 0);
    call {:si_unique_call 486} {:cexpr "target"} boogie_si_record_i64($i11);
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.23, $p4);
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p2);
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i13, $i14);
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i10 := $i3;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    $i10 := $sub.i64(0, 74);
    goto $bb6;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    $i10 := $sub.i64(0, 1);
    goto $bb6;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;
}



const capable: ref;

axiom capable == $sub.ref(0, 269956);

procedure capable($i0: i32) returns ($r: i1);
  free requires assertsPassed;



implementation capable($i0: i32) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 487} {:cexpr "capable:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 1} true;
    call {:si_unique_call 488} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 489} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const simple_strtoul: ref;

axiom simple_strtoul == $sub.ref(0, 270988);

procedure simple_strtoul($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation simple_strtoul($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 490} {:cexpr "simple_strtoul:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 1} true;
    call {:si_unique_call 491} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 492} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const sprintf: ref;

axiom sprintf == $sub.ref(0, 272020);

procedure sprintf.ref.ref.i64($p0: ref, $p1: ref, p.2: i64) returns ($r: i32);



const netfront_probe: ref;

axiom netfront_probe == $sub.ref(0, 273052);

procedure netfront_probe($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.30, $M.45, $CurrAddr;



implementation netfront_probe($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i1;
  var $i5: i8;
  var $i6: i1;
  var $p7: ref;
  var $i8: i64;
  var $i9: i32;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p24: ref;
  var $i10: i32;
  var vslice_dummy_var_20: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} $p2 := xennet_create_dev($p0);
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} $i4 := IS_ERR($p3);
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i4);
    call {:si_unique_call 495} {:cexpr "tmp___0"} boogie_si_record_i8($i5);
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i5);
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} $p11 := netdev_priv($p2);
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 1672)), $mul.ref(64, 1));
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p12);
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} dev_set_drvdata($p13, $p14);
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p12, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p16, $mul.ref(0, 2968)), $mul.ref(2792, 1)), $mul.ref(0, 8));
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p18, xennet_dev_group);
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p12, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} $i21 := ldv_register_netdev_42($p20);
    call {:si_unique_call 503} {:cexpr "err"} boogie_si_record_i32($i21);
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb5:
    assume $i22 == 1;
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} vslice_dummy_var_20 := printk.ref.ref.i32(.str.18, .str.19, $i21);
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 505} xennet_free_netdev($p2);
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 1672)), $mul.ref(64, 1));
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} dev_set_drvdata($p24, $0.ref);
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    $i10 := $i21;
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p2);
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} $i8 := PTR_ERR($p7);
    call {:si_unique_call 497} {:cexpr "tmp"} boogie_si_record_i64($i8);
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    call {:si_unique_call 498} {:cexpr "err"} boogie_si_record_i32($i9);
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} xenbus_dev_fatal.ref.i32.ref($p0, $i9, .str.17);
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb3;
}



const netback_changed: ref;

axiom netback_changed == $sub.ref(0, 274084);

procedure netback_changed($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.31, $M.12, $M.32, $M.0, $M.14, $CurrAddr, $M.33, $M.34, $M.36, $M.37, $M.39, $M.41, $M.43, $M.42, $M.15, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.44, assertsPassed;



implementation netback_changed($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i24;
  var $i15: i24;
  var $i16: i24;
  var $p17: ref;
  var $p18: ref;
  var $i19: i8;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $i39: i32;
  var $i40: i1;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var vslice_dummy_var_21: i32;
  var vslice_dummy_var_22: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 508} {:cexpr "netback_changed:arg:backend_state"} boogie_si_record_i32($i1);
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1672)), $mul.ref(64, 1));
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} $p4 := dev_get_drvdata($p3);
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p8, .str.7);
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p9, .str.23);
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p10, .str.1);
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    $M.27 := $store.ref($M.27, $p11, .str.24);
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    $i14 := $load.i24($M.28, $p13);
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $i15 := $and.i24($i14, $sub.i24(0, 262144));
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    $i16 := $or.i24($i15, 1968);
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $M.28 := $store.i24($M.28, $p13, $i16);
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, $p17, 0);
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.29, $p18);
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i64($i19);
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    $i21 := $and.i64($i20, 1);
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} $i22 := ldv__builtin_expect($i21, 0);
    call {:si_unique_call 511} {:cexpr "tmp___1"} boogie_si_record_i64($i22);
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i1, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i27 := $slt.i32($i1, 6);
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i1, 7);
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i1, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb13;

  $bb13:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i1, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb14, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    return;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i30 == 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i29 == 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb9:
    assume $i28 == 1;
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 1672)), $mul.ref(1488, 1));
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i43, 6);
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} vslice_dummy_var_21 := xenbus_frontend_closed($p0);
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb38:
    assume $i44 == 1;
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb7:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i1, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb20;

  $bb18:
    assume $i31 == 1;
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} netdev_notify_peers($p7);
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb5:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    $i32 := $slt.i32($i1, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    $i33 := $slt.i32($i1, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 1672)), $mul.ref(1488, 1));
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 1);
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} $i39 := xennet_connect($p7);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    call {:si_unique_call 517} {:cexpr "tmp___2"} boogie_si_record_i32($i39);
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} vslice_dummy_var_22 := xenbus_switch_state($p0, 4);
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb35:
    assume $i40 == 1;
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    goto $bb31;

  SeqInstr_25:
    assume !assertsPassed;
    return;

  $bb32:
    assume $i38 == 1;
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb21:
    assume $i32 == 1;
    assume {:verifier.code 0} true;
    $i34 := $slt.i32($i1, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i34 == 1);
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb26:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i1, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb17;

  $bb28:
    assume {:verifier.code 0} true;
    assume $i35 == 1;
    goto $bb29;

  $bb1:
    assume $i23 == 1;
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} $p24 := xenbus_strstate($i1);
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 1672)), $mul.ref(64, 1));
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} __dynamic_dev_dbg.ref.ref.ref.ref($p2, $p25, .str.24, $p24);
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const xennet_remove: ref;

axiom xennet_remove == $sub.ref(0, 275116);

procedure xennet_remove($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.0, $M.30, $CurrAddr, $M.14, $M.16, $M.18, $M.20, $M.22;



implementation xennet_remove($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i24;
  var $i12: i24;
  var $i13: i24;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1672)), $mul.ref(64, 1));
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} $p3 := dev_get_drvdata($p2);
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p5, .str.7);
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p6, .str.80);
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p7, .str.1);
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    $M.27 := $store.ref($M.27, $p8, .str.24);
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    $i11 := $load.i24($M.28, $p10);
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    $i12 := $and.i24($i11, $sub.i24(0, 262144));
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    $i13 := $or.i24($i12, 2098);
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $M.28 := $store.i24($M.28, $p10, $i13);
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, $p14, 0);
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.29, $p15);
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i64($i16);
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    $i18 := $and.i64($i17, 1);
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 521} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 522} {:cexpr "tmp___0"} boogie_si_record_i64($i19);
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} xennet_disconnect_backend($p4);
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p4, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 525} ldv_unregister_netdev_44($p25);
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} xennet_destroy_queues($p4);
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p4, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} xennet_free_netdev($p27);
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1672)), $mul.ref(64, 1));
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 1672)), $mul.ref(8, 1));
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} __dynamic_dev_dbg.ref.ref.ref.ref($p1, $p21, .str.24, $p23);
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const netfront_resume: ref;

axiom netfront_resume == $sub.ref(0, 276148);

procedure netfront_resume($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.0, $CurrAddr, $M.14;



implementation netfront_resume($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i24;
  var $i12: i24;
  var $i13: i24;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1672)), $mul.ref(64, 1));
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 529} $p3 := dev_get_drvdata($p2);
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p5, .str.7);
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p6, .str.81);
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p7, .str.1);
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    $M.27 := $store.ref($M.27, $p8, .str.24);
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    $i11 := $load.i24($M.28, $p10);
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    $i12 := $and.i24($i11, $sub.i24(0, 262144));
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    $i13 := $or.i24($i12, 1379);
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    $M.28 := $store.i24($M.28, $p10, $i13);
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, $p14, 0);
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.29, $p15);
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i64($i16);
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    $i18 := $and.i64($i17, 1);
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 531} {:cexpr "tmp___0"} boogie_si_record_i64($i19);
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} xennet_disconnect_backend($p4);
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1672)), $mul.ref(64, 1));
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 1672)), $mul.ref(8, 1));
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} __dynamic_dev_dbg.ref.ref.ref.ref($p1, $p21, .str.24, $p23);
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 277180);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(512, 1));
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __dynamic_dev_dbg: ref;

axiom __dynamic_dev_dbg == $sub.ref(0, 278212);

procedure __dynamic_dev_dbg.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    return;
}



const xennet_disconnect_backend: ref;

axiom xennet_disconnect_backend == $sub.ref(0, 279244);

procedure xennet_disconnect_backend($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.14;



implementation xennet_disconnect_backend($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $p45: ref;
  var $i46: i32;
  var $p47: ref;
  var $i48: i32;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p62: ref;
  var $p64: ref;
  var $i65: i32;
  var $i66: i1;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 2968)), $mul.ref(1028, 1));
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    call {:si_unique_call 534} {:cexpr "num_queues"} boogie_si_record_i32($i4);
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} netif_carrier_off($p6);
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    $i7 := $ult.i32(0, $i4);
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb4;

  $bb4:
    call $p9, $p10, $i11, $p12, $p13, $i14, $i15, $p16, $i17, $p18, $i19, $i20, $p21, $i22, $p23, $p24, $i25, $i26, $p27, $i28, $p29, $i30, $i31, $p32, $i33, $p34, $p35, $i36, $p37, $p38, $p39, $p40, $p41, $p42, $p43, $i44, $p45, $i46, $p47, $i48, $p50, $p51, $p52, $p53, $i54, $p56, $p57, $p58, $p59, $p60, $p62, $p64, $i65, $i66, $i8 := xennet_disconnect_backend_loop_$bb4($p0, $i4, $p9, $p10, $i11, $p12, $p13, $i14, $i15, $p16, $i17, $p18, $i19, $i20, $p21, $i22, $p23, $p24, $i25, $i26, $p27, $i28, $p29, $i30, $i31, $p32, $i33, $p34, $p35, $i36, $p37, $p38, $p39, $p40, $p41, $p42, $p43, $i44, $p45, $i46, $p47, $i48, $p50, $p51, $p52, $p53, $i54, $p56, $p57, $p58, $p59, $p60, $p62, $p64, $i65, $i66, $i8);
    goto $bb4_last;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    $i11 := $zext.i32.i64($i8);
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p10, $mul.ref($i11, 8944));
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p10, $mul.ref($i11, 8944)), $mul.ref(328, 1));
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p10, $mul.ref($i11, 8944)), $mul.ref(328, 1));
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p10, $mul.ref($i11, 8944)), $mul.ref(324, 1));
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p38, 0);
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p10, $mul.ref($i11, 8944)), $mul.ref(320, 1));
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, 0);
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p10, $mul.ref($i11, 8944)), $mul.ref(332, 1));
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p40, 0);
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p10, $mul.ref($i11, 8944)), $mul.ref(328, 1));
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p41, 0);
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p10, $mul.ref($i11, 8944)), $mul.ref(40, 1));
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} napi_synchronize($p42);
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} xennet_release_tx_bufs($p12);
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} xennet_release_rx_bufs($p12);
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p10, $mul.ref($i11, 8944)), $mul.ref(2544, 1));
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} gnttab_free_grant_references($i44);
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p10, $mul.ref($i11, 8944)), $mul.ref(7912, 1));
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} gnttab_free_grant_references($i46);
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p10, $mul.ref($i11, 8944)), $mul.ref(488, 1));
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.0, $p47);
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p10, $mul.ref($i11, 8944)), $mul.ref(464, 1)), $mul.ref(16, 1));
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} xennet_end_access($i48, $p52);
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p10, $mul.ref($i11, 8944)), $mul.ref(5728, 1));
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p10, $mul.ref($i11, 8944)), $mul.ref(5704, 1)), $mul.ref(16, 1));
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p57);
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} xennet_end_access($i54, $p58);
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p10, $mul.ref($i11, 8944)), $mul.ref(488, 1));
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p59, 0);
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p10, $mul.ref($i11, 8944)), $mul.ref(5728, 1));
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p60, 0);
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($p10, $mul.ref($i11, 8944)), $mul.ref(464, 1)), $mul.ref(16, 1));
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p62, $0.ref);
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($p10, $mul.ref($i11, 8944)), $mul.ref(5704, 1)), $mul.ref(16, 1));
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p64, $0.ref);
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    $i65 := $add.i32($i8, 1);
    call {:si_unique_call 546} {:cexpr "i"} boogie_si_record_i32($i65);
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    $i66 := $ult.i32($i65, $i4);
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i66 == 1);
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb18:
    assume $i66 == 1;
    assume {:verifier.code 0} true;
    $i8 := $i65;
    goto $bb18_dummy;

  $bb12:
    assume $i26 == 1;
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p10, $mul.ref($i11, 8944)), $mul.ref(328, 1));
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p10, $mul.ref($i11, 8944)), $mul.ref(332, 1));
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i28, $i30);
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb14;

  $bb15:
    assume $i31 == 1;
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p10, $mul.ref($i11, 8944)), $mul.ref(328, 1));
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p12);
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} unbind_from_irqhandler($i33, $p34);
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p10, $mul.ref($i11, 8944)), $mul.ref(332, 1));
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p12);
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} unbind_from_irqhandler($i36, $p37);
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p10, $mul.ref($i11, 8944)), $mul.ref(328, 1));
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p10, $mul.ref($i11, 8944)), $mul.ref(332, 1));
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i17, $i19);
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb8;

  $bb9:
    assume $i20 == 1;
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p10, $mul.ref($i11, 8944)), $mul.ref(328, 1));
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p12);
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} unbind_from_irqhandler($i22, $p23);
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb18_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2214;
}



const netif_carrier_off: ref;

axiom netif_carrier_off == $sub.ref(0, 280276);

procedure netif_carrier_off($p0: ref);
  free requires assertsPassed;



implementation netif_carrier_off($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    return;
}



const unbind_from_irqhandler: ref;

axiom unbind_from_irqhandler == $sub.ref(0, 281308);

procedure unbind_from_irqhandler($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation unbind_from_irqhandler($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 547} {:cexpr "unbind_from_irqhandler:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    return;
}



const napi_synchronize: ref;

axiom napi_synchronize == $sub.ref(0, 282340);

procedure napi_synchronize($p0: ref);
  free requires assertsPassed;



implementation napi_synchronize($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(16, 1));
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} $i2 := constant_test_bit(0, $p1);
    call {:si_unique_call 549} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $i4, $i5 := napi_synchronize_loop_$bb4($p1, $i4, $i5);
    goto $bb4_last;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} msleep(1);
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} $i4 := constant_test_bit(0, $p1);
    call {:si_unique_call 552} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i5 == 1);
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const xennet_release_tx_bufs: ref;

axiom xennet_release_tx_bufs == $sub.ref(0, 283372);

procedure xennet_release_tx_bufs($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation xennet_release_tx_bufs($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i64;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $p24: ref;
  var $i25: i32;
  var $i26: i64;
  var $i27: i64;
  var $p29: ref;
  var $i30: i64;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i16;
  var $i37: i32;
  var $i38: i16;
  var $i39: i32;
  var $i40: i1;
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    $i1 := 0;
    goto $bb1;

  $bb1:
    call $p2, $p3, $i4, $p5, $i6, $i7, $i8, $p10, $p11, $p12, $i13, $p15, $p16, $i17, $p19, $p20, $p21, $i22, $p24, $i25, $i26, $i27, $p29, $i30, $p32, $p33, $p34, $p35, $i36, $i37, $i38, $i39, $i40, $i1 := xennet_release_tx_bufs_loop_$bb1($p0, $p2, $p3, $i4, $p5, $i6, $i7, $i8, $p10, $p11, $p12, $i13, $p15, $p16, $i17, $p19, $p20, $p21, $i22, $p24, $i25, $i26, $i27, $p29, $i30, $p32, $p33, $p34, $p35, $i36, $i37, $i38, $i39, $i40, $i1);
    goto $bb1_last;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(496, 1));
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i1);
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p3, $mul.ref($i4, 8));
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} $i6 := skb_entry_is_link($p5);
    call {:si_unique_call 554} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i1);
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(496, 1)), $mul.ref($i8, 8));
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i1);
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(3576, 1)), $mul.ref($i13, 8));
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} get_page($p16);
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i1);
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(3576, 1)), $mul.ref($i17, 8));
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} $p21 := lowmem_page_address($p20);
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i1);
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(2548, 1)), $mul.ref($i22, 4));
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p21);
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} gnttab_end_foreign_access($i25, 4, $i26);
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i1);
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(3576, 1)), $mul.ref($i27, 8));
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p29, $0.ref);
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i1);
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(2548, 1)), $mul.ref($i30, 4));
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, 0);
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5624, 1));
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(496, 1));
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i32.i16($i1);
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    $i37 := $zext.i16.i32($i36);
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i32.i16($i37);
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 559} add_id_to_freelist($p33, $p35, $i38);
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} dev_kfree_skb_irq($p12);
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i39 := $add.i32($i1, 1);
    call {:si_unique_call 555} {:cexpr "i"} boogie_si_record_i32($i39);
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    $i40 := $ule.i32($i39, 255);
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i40 == 1;
    assume {:verifier.code 0} true;
    $i1 := $i39;
    goto $bb7_dummy;

  $bb3:
    assume $i7 == 1;
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb7_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2320;
}



const xennet_release_rx_bufs: ref;

axiom xennet_release_rx_bufs == $sub.ref(0, 284404);

procedure xennet_release_rx_bufs($p0: ref);
  free requires assertsPassed;
  modifies $M.14, $M.0;



implementation xennet_release_rx_bufs($p0: ref)
{
  var $p1: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $p19: ref;
  var $p20: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $p38: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $i43: i1;
  var $p45: ref;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i64;
  var $p56: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i64;
  var $i61: i1;
  var $p63: ref;
  var $i64: i32;
  var $i65: i1;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i64;
  var $p74: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i64;
  var $i79: i1;
  var $p81: ref;
  var $i82: i32;
  var $i83: i1;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $i90: i64;
  var $p92: ref;
  var $p94: ref;
  var $p95: ref;
  var $i96: i64;
  var $i97: i1;
  var $p99: ref;
  var $i100: i32;
  var $i101: i1;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $i108: i64;
  var $p110: ref;
  var $p112: ref;
  var $p113: ref;
  var $i114: i64;
  var $i115: i1;
  var $p117: ref;
  var $i118: i32;
  var $i119: i1;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $i126: i64;
  var $p128: ref;
  var $p130: ref;
  var $p131: ref;
  var $i132: i64;
  var $i133: i1;
  var $p135: ref;
  var $i136: i32;
  var $i137: i1;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $i144: i64;
  var $p146: ref;
  var $p148: ref;
  var $p149: ref;
  var $i150: i64;
  var $i151: i1;
  var $p153: ref;
  var $i154: i32;
  var $i155: i1;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $p160: ref;
  var $p161: ref;
  var $i162: i64;
  var $p164: ref;
  var $p166: ref;
  var $p167: ref;
  var $i168: i64;
  var $i169: i1;
  var $p171: ref;
  var $i172: i32;
  var $i173: i1;
  var $p174: ref;
  var $p175: ref;
  var $p176: ref;
  var $p177: ref;
  var $p178: ref;
  var $p179: ref;
  var $i180: i64;
  var $p182: ref;
  var $p184: ref;
  var $p185: ref;
  var $i186: i64;
  var $i187: i1;
  var $p189: ref;
  var $i190: i32;
  var $i191: i1;
  var $p192: ref;
  var $p193: ref;
  var $p194: ref;
  var $p195: ref;
  var $p196: ref;
  var $p197: ref;
  var $i198: i64;
  var $p200: ref;
  var $p202: ref;
  var $p203: ref;
  var $i204: i64;
  var $i205: i1;
  var $p207: ref;
  var $i208: i32;
  var $i209: i1;
  var $p210: ref;
  var $p211: ref;
  var $p212: ref;
  var $p213: ref;
  var $p214: ref;
  var $p215: ref;
  var $i216: i64;
  var $p218: ref;
  var $p220: ref;
  var $p221: ref;
  var $i222: i64;
  var $i223: i1;
  var $p225: ref;
  var $i226: i32;
  var $i227: i1;
  var $p228: ref;
  var $p229: ref;
  var $p230: ref;
  var $p231: ref;
  var $p232: ref;
  var $p233: ref;
  var $i234: i64;
  var $p236: ref;
  var $p238: ref;
  var $p239: ref;
  var $i240: i64;
  var $i241: i1;
  var $p243: ref;
  var $i244: i32;
  var $i245: i1;
  var $p246: ref;
  var $p247: ref;
  var $p248: ref;
  var $p249: ref;
  var $p250: ref;
  var $p251: ref;
  var $i252: i64;
  var $p254: ref;
  var $p256: ref;
  var $p257: ref;
  var $i258: i64;
  var $i259: i1;
  var $p261: ref;
  var $i262: i32;
  var $i263: i1;
  var $p264: ref;
  var $p265: ref;
  var $p266: ref;
  var $p267: ref;
  var $p268: ref;
  var $p269: ref;
  var $i270: i64;
  var $p272: ref;
  var $p274: ref;
  var $p275: ref;
  var $i276: i64;
  var $i277: i1;
  var $p279: ref;
  var $i280: i32;
  var $i281: i1;
  var $p282: ref;
  var $p283: ref;
  var $p284: ref;
  var $p285: ref;
  var $p286: ref;
  var $p287: ref;
  var $i288: i64;
  var $p290: ref;
  var $p292: ref;
  var $p293: ref;
  var $i294: i64;
  var $i295: i1;
  var $p297: ref;
  var $i298: i32;
  var $i299: i1;
  var $p300: ref;
  var $p301: ref;
  var $p302: ref;
  var $p303: ref;
  var $p304: ref;
  var $p305: ref;
  var $i306: i64;
  var $p308: ref;
  var $p310: ref;
  var $p311: ref;
  var $i312: i64;
  var $i313: i1;
  var $p315: ref;
  var $i316: i32;
  var $i317: i1;
  var $p318: ref;
  var $p319: ref;
  var $p320: ref;
  var $p321: ref;
  var $p322: ref;
  var $p323: ref;
  var $i324: i64;
  var $p326: ref;
  var $p328: ref;
  var $p329: ref;
  var $i330: i64;
  var $i331: i1;
  var $p333: ref;
  var $i334: i32;
  var $i335: i1;
  var $p336: ref;
  var $p337: ref;
  var $p338: ref;
  var $p339: ref;
  var $p340: ref;
  var $p341: ref;
  var $i342: i64;
  var $p344: ref;
  var $p346: ref;
  var $p347: ref;
  var $i348: i64;
  var $i349: i1;
  var $p351: ref;
  var $i352: i32;
  var $i353: i1;
  var $p354: ref;
  var $p355: ref;
  var $p356: ref;
  var $p357: ref;
  var $p358: ref;
  var $p359: ref;
  var $i360: i64;
  var $p362: ref;
  var $p364: ref;
  var $p365: ref;
  var $i366: i64;
  var $i367: i1;
  var $p369: ref;
  var $i370: i32;
  var $i371: i1;
  var $p372: ref;
  var $p373: ref;
  var $p374: ref;
  var $p375: ref;
  var $p376: ref;
  var $p377: ref;
  var $i378: i64;
  var $p380: ref;
  var $p382: ref;
  var $p383: ref;
  var $i384: i64;
  var $i385: i1;
  var $p387: ref;
  var $i388: i32;
  var $i389: i1;
  var $p390: ref;
  var $p391: ref;
  var $p392: ref;
  var $p393: ref;
  var $p394: ref;
  var $p395: ref;
  var $i396: i64;
  var $p398: ref;
  var $p400: ref;
  var $p401: ref;
  var $i402: i64;
  var $i403: i1;
  var $p405: ref;
  var $i406: i32;
  var $i407: i1;
  var $p408: ref;
  var $p409: ref;
  var $p410: ref;
  var $p411: ref;
  var $p412: ref;
  var $p413: ref;
  var $i414: i64;
  var $p416: ref;
  var $p418: ref;
  var $p419: ref;
  var $i420: i64;
  var $i421: i1;
  var $p423: ref;
  var $i424: i32;
  var $i425: i1;
  var $p426: ref;
  var $p427: ref;
  var $p428: ref;
  var $p429: ref;
  var $p430: ref;
  var $p431: ref;
  var $i432: i64;
  var $p434: ref;
  var $p436: ref;
  var $p437: ref;
  var $i438: i64;
  var $i439: i1;
  var $p441: ref;
  var $i442: i32;
  var $i443: i1;
  var $p444: ref;
  var $p445: ref;
  var $p446: ref;
  var $p447: ref;
  var $p448: ref;
  var $p449: ref;
  var $i450: i64;
  var $p452: ref;
  var $p454: ref;
  var $p455: ref;
  var $i456: i64;
  var $i457: i1;
  var $p459: ref;
  var $i460: i32;
  var $i461: i1;
  var $p462: ref;
  var $p463: ref;
  var $p464: ref;
  var $p465: ref;
  var $p466: ref;
  var $p467: ref;
  var $i468: i64;
  var $p470: ref;
  var $p472: ref;
  var $p473: ref;
  var $i474: i64;
  var $i475: i1;
  var $p477: ref;
  var $i478: i32;
  var $i479: i1;
  var $p480: ref;
  var $p481: ref;
  var $p482: ref;
  var $p483: ref;
  var $p484: ref;
  var $p485: ref;
  var $i486: i64;
  var $p488: ref;
  var $p490: ref;
  var $p491: ref;
  var $i492: i64;
  var $i493: i1;
  var $p495: ref;
  var $i496: i32;
  var $i497: i1;
  var $p498: ref;
  var $p499: ref;
  var $p500: ref;
  var $p501: ref;
  var $p502: ref;
  var $p503: ref;
  var $i504: i64;
  var $p506: ref;
  var $p508: ref;
  var $p509: ref;
  var $i510: i64;
  var $i511: i1;
  var $p513: ref;
  var $i514: i32;
  var $i515: i1;
  var $p516: ref;
  var $p517: ref;
  var $p518: ref;
  var $p519: ref;
  var $p520: ref;
  var $p521: ref;
  var $i522: i64;
  var $p524: ref;
  var $p526: ref;
  var $p527: ref;
  var $i528: i64;
  var $i529: i1;
  var $p531: ref;
  var $i532: i32;
  var $i533: i1;
  var $p534: ref;
  var $p535: ref;
  var $p536: ref;
  var $p537: ref;
  var $p538: ref;
  var $p539: ref;
  var $i540: i64;
  var $p542: ref;
  var $p544: ref;
  var $p545: ref;
  var $i546: i64;
  var $i547: i1;
  var $p549: ref;
  var $i550: i32;
  var $i551: i1;
  var $p552: ref;
  var $p553: ref;
  var $p554: ref;
  var $p555: ref;
  var $p556: ref;
  var $p557: ref;
  var $i558: i64;
  var $p560: ref;
  var $p562: ref;
  var $p563: ref;
  var $i564: i64;
  var $i565: i1;
  var $p567: ref;
  var $i568: i32;
  var $i569: i1;
  var $p570: ref;
  var $p571: ref;
  var $p572: ref;
  var $p573: ref;
  var $p574: ref;
  var $p575: ref;
  var $i576: i64;
  var $p578: ref;
  var $p580: ref;
  var $p581: ref;
  var $i582: i64;
  var $i583: i1;
  var $p585: ref;
  var $i586: i32;
  var $i587: i1;
  var $p588: ref;
  var $p589: ref;
  var $p590: ref;
  var $p591: ref;
  var $p592: ref;
  var $p593: ref;
  var $i594: i64;
  var $p596: ref;
  var $p598: ref;
  var $p599: ref;
  var $i600: i64;
  var $i601: i1;
  var $p603: ref;
  var $i604: i32;
  var $i605: i1;
  var $p606: ref;
  var $p607: ref;
  var $p608: ref;
  var $p609: ref;
  var $p610: ref;
  var $p611: ref;
  var $i612: i64;
  var $p614: ref;
  var $p616: ref;
  var $p617: ref;
  var $i618: i64;
  var $i619: i1;
  var $p621: ref;
  var $i622: i32;
  var $i623: i1;
  var $p624: ref;
  var $p625: ref;
  var $p626: ref;
  var $p627: ref;
  var $p628: ref;
  var $p629: ref;
  var $i630: i64;
  var $p632: ref;
  var $p634: ref;
  var $p635: ref;
  var $i636: i64;
  var $i637: i1;
  var $p639: ref;
  var $i640: i32;
  var $i641: i1;
  var $p642: ref;
  var $p643: ref;
  var $p644: ref;
  var $p645: ref;
  var $p646: ref;
  var $p647: ref;
  var $i648: i64;
  var $p650: ref;
  var $p652: ref;
  var $p653: ref;
  var $i654: i64;
  var $i655: i1;
  var $p657: ref;
  var $i658: i32;
  var $i659: i1;
  var $p660: ref;
  var $p661: ref;
  var $p662: ref;
  var $p663: ref;
  var $p664: ref;
  var $p665: ref;
  var $i666: i64;
  var $p668: ref;
  var $p670: ref;
  var $p671: ref;
  var $i672: i64;
  var $i673: i1;
  var $p675: ref;
  var $i676: i32;
  var $i677: i1;
  var $p678: ref;
  var $p679: ref;
  var $p680: ref;
  var $p681: ref;
  var $p682: ref;
  var $p683: ref;
  var $i684: i64;
  var $p686: ref;
  var $p688: ref;
  var $p689: ref;
  var $i690: i64;
  var $i691: i1;
  var $p693: ref;
  var $i694: i32;
  var $i695: i1;
  var $p696: ref;
  var $p697: ref;
  var $p698: ref;
  var $p699: ref;
  var $p700: ref;
  var $p701: ref;
  var $i702: i64;
  var $p704: ref;
  var $p706: ref;
  var $p707: ref;
  var $i708: i64;
  var $i709: i1;
  var $p711: ref;
  var $i712: i32;
  var $i713: i1;
  var $p714: ref;
  var $p715: ref;
  var $p716: ref;
  var $p717: ref;
  var $p718: ref;
  var $p719: ref;
  var $i720: i64;
  var $p722: ref;
  var $p724: ref;
  var $p725: ref;
  var $i726: i64;
  var $i727: i1;
  var $p729: ref;
  var $i730: i32;
  var $i731: i1;
  var $p732: ref;
  var $p733: ref;
  var $p734: ref;
  var $p735: ref;
  var $p736: ref;
  var $p737: ref;
  var $i738: i64;
  var $p740: ref;
  var $p742: ref;
  var $p743: ref;
  var $i744: i64;
  var $i745: i1;
  var $p747: ref;
  var $i748: i32;
  var $i749: i1;
  var $p750: ref;
  var $p751: ref;
  var $p752: ref;
  var $p753: ref;
  var $p754: ref;
  var $p755: ref;
  var $i756: i64;
  var $p758: ref;
  var $p760: ref;
  var $p761: ref;
  var $i762: i64;
  var $i763: i1;
  var $p765: ref;
  var $i766: i32;
  var $i767: i1;
  var $p768: ref;
  var $p769: ref;
  var $p770: ref;
  var $p771: ref;
  var $p772: ref;
  var $p773: ref;
  var $i774: i64;
  var $p776: ref;
  var $p778: ref;
  var $p779: ref;
  var $i780: i64;
  var $i781: i1;
  var $p783: ref;
  var $i784: i32;
  var $i785: i1;
  var $p786: ref;
  var $p787: ref;
  var $p788: ref;
  var $p789: ref;
  var $p790: ref;
  var $p791: ref;
  var $i792: i64;
  var $p794: ref;
  var $p796: ref;
  var $p797: ref;
  var $i798: i64;
  var $i799: i1;
  var $p801: ref;
  var $i802: i32;
  var $i803: i1;
  var $p804: ref;
  var $p805: ref;
  var $p806: ref;
  var $p807: ref;
  var $p808: ref;
  var $p809: ref;
  var $i810: i64;
  var $p812: ref;
  var $p814: ref;
  var $p815: ref;
  var $i816: i64;
  var $i817: i1;
  var $p819: ref;
  var $i820: i32;
  var $i821: i1;
  var $p822: ref;
  var $p823: ref;
  var $p824: ref;
  var $p825: ref;
  var $p826: ref;
  var $p827: ref;
  var $i828: i64;
  var $p830: ref;
  var $p832: ref;
  var $p833: ref;
  var $i834: i64;
  var $i835: i1;
  var $p837: ref;
  var $i838: i32;
  var $i839: i1;
  var $p840: ref;
  var $p841: ref;
  var $p842: ref;
  var $p843: ref;
  var $p844: ref;
  var $p845: ref;
  var $i846: i64;
  var $p848: ref;
  var $p850: ref;
  var $p851: ref;
  var $i852: i64;
  var $i853: i1;
  var $p855: ref;
  var $i856: i32;
  var $i857: i1;
  var $p858: ref;
  var $p859: ref;
  var $p860: ref;
  var $p861: ref;
  var $p862: ref;
  var $p863: ref;
  var $i864: i64;
  var $p866: ref;
  var $p868: ref;
  var $p869: ref;
  var $i870: i64;
  var $i871: i1;
  var $p873: ref;
  var $i874: i32;
  var $i875: i1;
  var $p876: ref;
  var $p877: ref;
  var $p878: ref;
  var $p879: ref;
  var $p880: ref;
  var $p881: ref;
  var $i882: i64;
  var $p884: ref;
  var $p886: ref;
  var $p887: ref;
  var $i888: i64;
  var $i889: i1;
  var $p891: ref;
  var $i892: i32;
  var $i893: i1;
  var $p894: ref;
  var $p895: ref;
  var $p896: ref;
  var $p897: ref;
  var $p898: ref;
  var $p899: ref;
  var $i900: i64;
  var $p902: ref;
  var $p904: ref;
  var $p905: ref;
  var $i906: i64;
  var $i907: i1;
  var $p909: ref;
  var $i910: i32;
  var $i911: i1;
  var $p912: ref;
  var $p913: ref;
  var $p914: ref;
  var $p915: ref;
  var $p916: ref;
  var $p917: ref;
  var $i918: i64;
  var $p920: ref;
  var $p922: ref;
  var $p923: ref;
  var $i924: i64;
  var $i925: i1;
  var $p927: ref;
  var $i928: i32;
  var $i929: i1;
  var $p930: ref;
  var $p931: ref;
  var $p932: ref;
  var $p933: ref;
  var $p934: ref;
  var $p935: ref;
  var $i936: i64;
  var $p938: ref;
  var $p940: ref;
  var $p941: ref;
  var $i942: i64;
  var $i943: i1;
  var $p945: ref;
  var $i946: i32;
  var $i947: i1;
  var $p948: ref;
  var $p949: ref;
  var $p950: ref;
  var $p951: ref;
  var $p952: ref;
  var $p953: ref;
  var $i954: i64;
  var $p956: ref;
  var $p958: ref;
  var $p959: ref;
  var $i960: i64;
  var $i961: i1;
  var $p963: ref;
  var $i964: i32;
  var $i965: i1;
  var $p966: ref;
  var $p967: ref;
  var $p968: ref;
  var $p969: ref;
  var $p970: ref;
  var $p971: ref;
  var $i972: i64;
  var $p974: ref;
  var $p976: ref;
  var $p977: ref;
  var $i978: i64;
  var $i979: i1;
  var $p981: ref;
  var $i982: i32;
  var $i983: i1;
  var $p984: ref;
  var $p985: ref;
  var $p986: ref;
  var $p987: ref;
  var $p988: ref;
  var $p989: ref;
  var $i990: i64;
  var $p992: ref;
  var $p994: ref;
  var $p995: ref;
  var $i996: i64;
  var $i997: i1;
  var $p999: ref;
  var $i1000: i32;
  var $i1001: i1;
  var $p1002: ref;
  var $p1003: ref;
  var $p1004: ref;
  var $p1005: ref;
  var $p1006: ref;
  var $p1007: ref;
  var $i1008: i64;
  var $p1010: ref;
  var $p1012: ref;
  var $p1013: ref;
  var $i1014: i64;
  var $i1015: i1;
  var $p1017: ref;
  var $i1018: i32;
  var $i1019: i1;
  var $p1020: ref;
  var $p1021: ref;
  var $p1022: ref;
  var $p1023: ref;
  var $p1024: ref;
  var $p1025: ref;
  var $i1026: i64;
  var $p1028: ref;
  var $p1030: ref;
  var $p1031: ref;
  var $i1032: i64;
  var $i1033: i1;
  var $p1035: ref;
  var $i1036: i32;
  var $i1037: i1;
  var $p1038: ref;
  var $p1039: ref;
  var $p1040: ref;
  var $p1041: ref;
  var $p1042: ref;
  var $p1043: ref;
  var $i1044: i64;
  var $p1046: ref;
  var $p1048: ref;
  var $p1049: ref;
  var $i1050: i64;
  var $i1051: i1;
  var $p1053: ref;
  var $i1054: i32;
  var $i1055: i1;
  var $p1056: ref;
  var $p1057: ref;
  var $p1058: ref;
  var $p1059: ref;
  var $p1060: ref;
  var $p1061: ref;
  var $i1062: i64;
  var $p1064: ref;
  var $p1066: ref;
  var $p1067: ref;
  var $i1068: i64;
  var $i1069: i1;
  var $p1071: ref;
  var $i1072: i32;
  var $i1073: i1;
  var $p1074: ref;
  var $p1075: ref;
  var $p1076: ref;
  var $p1077: ref;
  var $p1078: ref;
  var $p1079: ref;
  var $i1080: i64;
  var $p1082: ref;
  var $p1084: ref;
  var $p1085: ref;
  var $i1086: i64;
  var $i1087: i1;
  var $p1089: ref;
  var $i1090: i32;
  var $i1091: i1;
  var $p1092: ref;
  var $p1093: ref;
  var $p1094: ref;
  var $p1095: ref;
  var $p1096: ref;
  var $p1097: ref;
  var $i1098: i64;
  var $p1100: ref;
  var $p1102: ref;
  var $p1103: ref;
  var $i1104: i64;
  var $i1105: i1;
  var $p1107: ref;
  var $i1108: i32;
  var $i1109: i1;
  var $p1110: ref;
  var $p1111: ref;
  var $p1112: ref;
  var $p1113: ref;
  var $p1114: ref;
  var $p1115: ref;
  var $i1116: i64;
  var $p1118: ref;
  var $p1120: ref;
  var $p1121: ref;
  var $i1122: i64;
  var $i1123: i1;
  var $p1125: ref;
  var $i1126: i32;
  var $i1127: i1;
  var $p1128: ref;
  var $p1129: ref;
  var $p1130: ref;
  var $p1131: ref;
  var $p1132: ref;
  var $p1133: ref;
  var $i1134: i64;
  var $p1136: ref;
  var $p1138: ref;
  var $p1139: ref;
  var $i1140: i64;
  var $i1141: i1;
  var $p1143: ref;
  var $i1144: i32;
  var $i1145: i1;
  var $p1146: ref;
  var $p1147: ref;
  var $p1148: ref;
  var $p1149: ref;
  var $p1150: ref;
  var $p1151: ref;
  var $i1152: i64;
  var $p1154: ref;
  var $p1156: ref;
  var $p1157: ref;
  var $i1158: i64;
  var $i1159: i1;
  var $p1161: ref;
  var $i1162: i32;
  var $i1163: i1;
  var $p1164: ref;
  var $p1165: ref;
  var $p1166: ref;
  var $p1167: ref;
  var $p1168: ref;
  var $p1169: ref;
  var $i1170: i64;
  var $p1172: ref;
  var $p1174: ref;
  var $p1175: ref;
  var $i1176: i64;
  var $i1177: i1;
  var $p1179: ref;
  var $i1180: i32;
  var $i1181: i1;
  var $p1182: ref;
  var $p1183: ref;
  var $p1184: ref;
  var $p1185: ref;
  var $p1186: ref;
  var $p1187: ref;
  var $i1188: i64;
  var $p1190: ref;
  var $p1192: ref;
  var $p1193: ref;
  var $i1194: i64;
  var $i1195: i1;
  var $p1197: ref;
  var $i1198: i32;
  var $i1199: i1;
  var $p1200: ref;
  var $p1201: ref;
  var $p1202: ref;
  var $p1203: ref;
  var $p1204: ref;
  var $p1205: ref;
  var $i1206: i64;
  var $p1208: ref;
  var $p1210: ref;
  var $p1211: ref;
  var $i1212: i64;
  var $i1213: i1;
  var $p1215: ref;
  var $i1216: i32;
  var $i1217: i1;
  var $p1218: ref;
  var $p1219: ref;
  var $p1220: ref;
  var $p1221: ref;
  var $p1222: ref;
  var $p1223: ref;
  var $i1224: i64;
  var $p1226: ref;
  var $p1228: ref;
  var $p1229: ref;
  var $i1230: i64;
  var $i1231: i1;
  var $p1233: ref;
  var $i1234: i32;
  var $i1235: i1;
  var $p1236: ref;
  var $p1237: ref;
  var $p1238: ref;
  var $p1239: ref;
  var $p1240: ref;
  var $p1241: ref;
  var $i1242: i64;
  var $p1244: ref;
  var $p1246: ref;
  var $p1247: ref;
  var $i1248: i64;
  var $i1249: i1;
  var $p1251: ref;
  var $i1252: i32;
  var $i1253: i1;
  var $p1254: ref;
  var $p1255: ref;
  var $p1256: ref;
  var $p1257: ref;
  var $p1258: ref;
  var $p1259: ref;
  var $i1260: i64;
  var $p1262: ref;
  var $p1264: ref;
  var $p1265: ref;
  var $i1266: i64;
  var $i1267: i1;
  var $p1269: ref;
  var $i1270: i32;
  var $i1271: i1;
  var $p1272: ref;
  var $p1273: ref;
  var $p1274: ref;
  var $p1275: ref;
  var $p1276: ref;
  var $p1277: ref;
  var $i1278: i64;
  var $p1280: ref;
  var $p1282: ref;
  var $p1283: ref;
  var $i1284: i64;
  var $i1285: i1;
  var $p1287: ref;
  var $i1288: i32;
  var $i1289: i1;
  var $p1290: ref;
  var $p1291: ref;
  var $p1292: ref;
  var $p1293: ref;
  var $p1294: ref;
  var $p1295: ref;
  var $i1296: i64;
  var $p1298: ref;
  var $p1300: ref;
  var $p1301: ref;
  var $i1302: i64;
  var $i1303: i1;
  var $p1305: ref;
  var $i1306: i32;
  var $i1307: i1;
  var $p1308: ref;
  var $p1309: ref;
  var $p1310: ref;
  var $p1311: ref;
  var $p1312: ref;
  var $p1313: ref;
  var $i1314: i64;
  var $p1316: ref;
  var $p1318: ref;
  var $p1319: ref;
  var $i1320: i64;
  var $i1321: i1;
  var $p1323: ref;
  var $i1324: i32;
  var $i1325: i1;
  var $p1326: ref;
  var $p1327: ref;
  var $p1328: ref;
  var $p1329: ref;
  var $p1330: ref;
  var $p1331: ref;
  var $i1332: i64;
  var $p1334: ref;
  var $p1336: ref;
  var $p1337: ref;
  var $i1338: i64;
  var $i1339: i1;
  var $p1341: ref;
  var $i1342: i32;
  var $i1343: i1;
  var $p1344: ref;
  var $p1345: ref;
  var $p1346: ref;
  var $p1347: ref;
  var $p1348: ref;
  var $p1349: ref;
  var $i1350: i64;
  var $p1352: ref;
  var $p1354: ref;
  var $p1355: ref;
  var $i1356: i64;
  var $i1357: i1;
  var $p1359: ref;
  var $i1360: i32;
  var $i1361: i1;
  var $p1362: ref;
  var $p1363: ref;
  var $p1364: ref;
  var $p1365: ref;
  var $p1366: ref;
  var $p1367: ref;
  var $i1368: i64;
  var $p1370: ref;
  var $p1372: ref;
  var $p1373: ref;
  var $i1374: i64;
  var $i1375: i1;
  var $p1377: ref;
  var $i1378: i32;
  var $i1379: i1;
  var $p1380: ref;
  var $p1381: ref;
  var $p1382: ref;
  var $p1383: ref;
  var $p1384: ref;
  var $p1385: ref;
  var $i1386: i64;
  var $p1388: ref;
  var $p1390: ref;
  var $p1391: ref;
  var $i1392: i64;
  var $i1393: i1;
  var $p1395: ref;
  var $i1396: i32;
  var $i1397: i1;
  var $p1398: ref;
  var $p1399: ref;
  var $p1400: ref;
  var $p1401: ref;
  var $p1402: ref;
  var $p1403: ref;
  var $i1404: i64;
  var $p1406: ref;
  var $p1408: ref;
  var $p1409: ref;
  var $i1410: i64;
  var $i1411: i1;
  var $p1413: ref;
  var $i1414: i32;
  var $i1415: i1;
  var $p1416: ref;
  var $p1417: ref;
  var $p1418: ref;
  var $p1419: ref;
  var $p1420: ref;
  var $p1421: ref;
  var $i1422: i64;
  var $p1424: ref;
  var $p1426: ref;
  var $p1427: ref;
  var $i1428: i64;
  var $i1429: i1;
  var $p1431: ref;
  var $i1432: i32;
  var $i1433: i1;
  var $p1434: ref;
  var $p1435: ref;
  var $p1436: ref;
  var $p1437: ref;
  var $p1438: ref;
  var $p1439: ref;
  var $i1440: i64;
  var $p1442: ref;
  var $p1444: ref;
  var $p1445: ref;
  var $i1446: i64;
  var $i1447: i1;
  var $p1449: ref;
  var $i1450: i32;
  var $i1451: i1;
  var $p1452: ref;
  var $p1453: ref;
  var $p1454: ref;
  var $p1455: ref;
  var $p1456: ref;
  var $p1457: ref;
  var $i1458: i64;
  var $p1460: ref;
  var $p1462: ref;
  var $p1463: ref;
  var $i1464: i64;
  var $i1465: i1;
  var $p1467: ref;
  var $i1468: i32;
  var $i1469: i1;
  var $p1470: ref;
  var $p1471: ref;
  var $p1472: ref;
  var $p1473: ref;
  var $p1474: ref;
  var $p1475: ref;
  var $i1476: i64;
  var $p1478: ref;
  var $p1480: ref;
  var $p1481: ref;
  var $i1482: i64;
  var $i1483: i1;
  var $p1485: ref;
  var $i1486: i32;
  var $i1487: i1;
  var $p1488: ref;
  var $p1489: ref;
  var $p1490: ref;
  var $p1491: ref;
  var $p1492: ref;
  var $p1493: ref;
  var $i1494: i64;
  var $p1496: ref;
  var $p1498: ref;
  var $p1499: ref;
  var $i1500: i64;
  var $i1501: i1;
  var $p1503: ref;
  var $i1504: i32;
  var $i1505: i1;
  var $p1506: ref;
  var $p1507: ref;
  var $p1508: ref;
  var $p1509: ref;
  var $p1510: ref;
  var $p1511: ref;
  var $i1512: i64;
  var $p1514: ref;
  var $p1516: ref;
  var $p1517: ref;
  var $i1518: i64;
  var $i1519: i1;
  var $p1521: ref;
  var $i1522: i32;
  var $i1523: i1;
  var $p1524: ref;
  var $p1525: ref;
  var $p1526: ref;
  var $p1527: ref;
  var $p1528: ref;
  var $p1529: ref;
  var $i1530: i64;
  var $p1532: ref;
  var $p1534: ref;
  var $p1535: ref;
  var $i1536: i64;
  var $i1537: i1;
  var $p1539: ref;
  var $i1540: i32;
  var $i1541: i1;
  var $p1542: ref;
  var $p1543: ref;
  var $p1544: ref;
  var $p1545: ref;
  var $p1546: ref;
  var $p1547: ref;
  var $i1548: i64;
  var $p1550: ref;
  var $p1552: ref;
  var $p1553: ref;
  var $i1554: i64;
  var $i1555: i1;
  var $p1557: ref;
  var $i1558: i32;
  var $i1559: i1;
  var $p1560: ref;
  var $p1561: ref;
  var $p1562: ref;
  var $p1563: ref;
  var $p1564: ref;
  var $p1565: ref;
  var $i1566: i64;
  var $p1568: ref;
  var $p1570: ref;
  var $p1571: ref;
  var $i1572: i64;
  var $i1573: i1;
  var $p1575: ref;
  var $i1576: i32;
  var $i1577: i1;
  var $p1578: ref;
  var $p1579: ref;
  var $p1580: ref;
  var $p1581: ref;
  var $p1582: ref;
  var $p1583: ref;
  var $i1584: i64;
  var $p1586: ref;
  var $p1588: ref;
  var $p1589: ref;
  var $i1590: i64;
  var $i1591: i1;
  var $p1593: ref;
  var $i1594: i32;
  var $i1595: i1;
  var $p1596: ref;
  var $p1597: ref;
  var $p1598: ref;
  var $p1599: ref;
  var $p1600: ref;
  var $p1601: ref;
  var $i1602: i64;
  var $p1604: ref;
  var $p1606: ref;
  var $p1607: ref;
  var $i1608: i64;
  var $i1609: i1;
  var $p1611: ref;
  var $i1612: i32;
  var $i1613: i1;
  var $p1614: ref;
  var $p1615: ref;
  var $p1616: ref;
  var $p1617: ref;
  var $p1618: ref;
  var $p1619: ref;
  var $i1620: i64;
  var $p1622: ref;
  var $p1624: ref;
  var $p1625: ref;
  var $i1626: i64;
  var $i1627: i1;
  var $p1629: ref;
  var $i1630: i32;
  var $i1631: i1;
  var $p1632: ref;
  var $p1633: ref;
  var $p1634: ref;
  var $p1635: ref;
  var $p1636: ref;
  var $p1637: ref;
  var $i1638: i64;
  var $p1640: ref;
  var $p1642: ref;
  var $p1643: ref;
  var $i1644: i64;
  var $i1645: i1;
  var $p1647: ref;
  var $i1648: i32;
  var $i1649: i1;
  var $p1650: ref;
  var $p1651: ref;
  var $p1652: ref;
  var $p1653: ref;
  var $p1654: ref;
  var $p1655: ref;
  var $i1656: i64;
  var $p1658: ref;
  var $p1660: ref;
  var $p1661: ref;
  var $i1662: i64;
  var $i1663: i1;
  var $p1665: ref;
  var $i1666: i32;
  var $i1667: i1;
  var $p1668: ref;
  var $p1669: ref;
  var $p1670: ref;
  var $p1671: ref;
  var $p1672: ref;
  var $p1673: ref;
  var $i1674: i64;
  var $p1676: ref;
  var $p1678: ref;
  var $p1679: ref;
  var $i1680: i64;
  var $i1681: i1;
  var $p1683: ref;
  var $i1684: i32;
  var $i1685: i1;
  var $p1686: ref;
  var $p1687: ref;
  var $p1688: ref;
  var $p1689: ref;
  var $p1690: ref;
  var $p1691: ref;
  var $i1692: i64;
  var $p1694: ref;
  var $p1696: ref;
  var $p1697: ref;
  var $i1698: i64;
  var $i1699: i1;
  var $p1701: ref;
  var $i1702: i32;
  var $i1703: i1;
  var $p1704: ref;
  var $p1705: ref;
  var $p1706: ref;
  var $p1707: ref;
  var $p1708: ref;
  var $p1709: ref;
  var $i1710: i64;
  var $p1712: ref;
  var $p1714: ref;
  var $p1715: ref;
  var $i1716: i64;
  var $i1717: i1;
  var $p1719: ref;
  var $i1720: i32;
  var $i1721: i1;
  var $p1722: ref;
  var $p1723: ref;
  var $p1724: ref;
  var $p1725: ref;
  var $p1726: ref;
  var $p1727: ref;
  var $i1728: i64;
  var $p1730: ref;
  var $p1732: ref;
  var $p1733: ref;
  var $i1734: i64;
  var $i1735: i1;
  var $p1737: ref;
  var $i1738: i32;
  var $i1739: i1;
  var $p1740: ref;
  var $p1741: ref;
  var $p1742: ref;
  var $p1743: ref;
  var $p1744: ref;
  var $p1745: ref;
  var $i1746: i64;
  var $p1748: ref;
  var $p1750: ref;
  var $p1751: ref;
  var $i1752: i64;
  var $i1753: i1;
  var $p1755: ref;
  var $i1756: i32;
  var $i1757: i1;
  var $p1758: ref;
  var $p1759: ref;
  var $p1760: ref;
  var $p1761: ref;
  var $p1762: ref;
  var $p1763: ref;
  var $i1764: i64;
  var $p1766: ref;
  var $p1768: ref;
  var $p1769: ref;
  var $i1770: i64;
  var $i1771: i1;
  var $p1773: ref;
  var $i1774: i32;
  var $i1775: i1;
  var $p1776: ref;
  var $p1777: ref;
  var $p1778: ref;
  var $p1779: ref;
  var $p1780: ref;
  var $p1781: ref;
  var $i1782: i64;
  var $p1784: ref;
  var $p1786: ref;
  var $p1787: ref;
  var $i1788: i64;
  var $i1789: i1;
  var $p1791: ref;
  var $i1792: i32;
  var $i1793: i1;
  var $p1794: ref;
  var $p1795: ref;
  var $p1796: ref;
  var $p1797: ref;
  var $p1798: ref;
  var $p1799: ref;
  var $i1800: i64;
  var $p1802: ref;
  var $p1804: ref;
  var $p1805: ref;
  var $i1806: i64;
  var $i1807: i1;
  var $p1809: ref;
  var $i1810: i32;
  var $i1811: i1;
  var $p1812: ref;
  var $p1813: ref;
  var $p1814: ref;
  var $p1815: ref;
  var $p1816: ref;
  var $p1817: ref;
  var $i1818: i64;
  var $p1820: ref;
  var $p1822: ref;
  var $p1823: ref;
  var $i1824: i64;
  var $i1825: i1;
  var $p1827: ref;
  var $i1828: i32;
  var $i1829: i1;
  var $p1830: ref;
  var $p1831: ref;
  var $p1832: ref;
  var $p1833: ref;
  var $p1834: ref;
  var $p1835: ref;
  var $i1836: i64;
  var $p1838: ref;
  var $p1840: ref;
  var $p1841: ref;
  var $i1842: i64;
  var $i1843: i1;
  var $p1845: ref;
  var $i1846: i32;
  var $i1847: i1;
  var $p1848: ref;
  var $p1849: ref;
  var $p1850: ref;
  var $p1851: ref;
  var $p1852: ref;
  var $p1853: ref;
  var $i1854: i64;
  var $p1856: ref;
  var $p1858: ref;
  var $p1859: ref;
  var $i1860: i64;
  var $i1861: i1;
  var $p1863: ref;
  var $i1864: i32;
  var $i1865: i1;
  var $p1866: ref;
  var $p1867: ref;
  var $p1868: ref;
  var $p1869: ref;
  var $p1870: ref;
  var $p1871: ref;
  var $i1872: i64;
  var $p1874: ref;
  var $p1876: ref;
  var $p1877: ref;
  var $i1878: i64;
  var $i1879: i1;
  var $p1881: ref;
  var $i1882: i32;
  var $i1883: i1;
  var $p1884: ref;
  var $p1885: ref;
  var $p1886: ref;
  var $p1887: ref;
  var $p1888: ref;
  var $p1889: ref;
  var $i1890: i64;
  var $p1892: ref;
  var $p1894: ref;
  var $p1895: ref;
  var $i1896: i64;
  var $i1897: i1;
  var $p1899: ref;
  var $i1900: i32;
  var $i1901: i1;
  var $p1902: ref;
  var $p1903: ref;
  var $p1904: ref;
  var $p1905: ref;
  var $p1906: ref;
  var $p1907: ref;
  var $i1908: i64;
  var $p1910: ref;
  var $p1912: ref;
  var $p1913: ref;
  var $i1914: i64;
  var $i1915: i1;
  var $p1917: ref;
  var $i1918: i32;
  var $i1919: i1;
  var $p1920: ref;
  var $p1921: ref;
  var $p1922: ref;
  var $p1923: ref;
  var $p1924: ref;
  var $p1925: ref;
  var $i1926: i64;
  var $p1928: ref;
  var $p1930: ref;
  var $p1931: ref;
  var $i1932: i64;
  var $i1933: i1;
  var $p1935: ref;
  var $i1936: i32;
  var $i1937: i1;
  var $p1938: ref;
  var $p1939: ref;
  var $p1940: ref;
  var $p1941: ref;
  var $p1942: ref;
  var $p1943: ref;
  var $i1944: i64;
  var $p1946: ref;
  var $p1948: ref;
  var $p1949: ref;
  var $i1950: i64;
  var $i1951: i1;
  var $p1953: ref;
  var $i1954: i32;
  var $i1955: i1;
  var $p1956: ref;
  var $p1957: ref;
  var $p1958: ref;
  var $p1959: ref;
  var $p1960: ref;
  var $p1961: ref;
  var $i1962: i64;
  var $p1964: ref;
  var $p1966: ref;
  var $p1967: ref;
  var $i1968: i64;
  var $i1969: i1;
  var $p1971: ref;
  var $i1972: i32;
  var $i1973: i1;
  var $p1974: ref;
  var $p1975: ref;
  var $p1976: ref;
  var $p1977: ref;
  var $p1978: ref;
  var $p1979: ref;
  var $i1980: i64;
  var $p1982: ref;
  var $p1984: ref;
  var $p1985: ref;
  var $i1986: i64;
  var $i1987: i1;
  var $p1989: ref;
  var $i1990: i32;
  var $i1991: i1;
  var $p1992: ref;
  var $p1993: ref;
  var $p1994: ref;
  var $p1995: ref;
  var $p1996: ref;
  var $p1997: ref;
  var $i1998: i64;
  var $p2000: ref;
  var $p2002: ref;
  var $p2003: ref;
  var $i2004: i64;
  var $i2005: i1;
  var $p2007: ref;
  var $i2008: i32;
  var $i2009: i1;
  var $p2010: ref;
  var $p2011: ref;
  var $p2012: ref;
  var $p2013: ref;
  var $p2014: ref;
  var $p2015: ref;
  var $i2016: i64;
  var $p2018: ref;
  var $p2020: ref;
  var $p2021: ref;
  var $i2022: i64;
  var $i2023: i1;
  var $p2025: ref;
  var $i2026: i32;
  var $i2027: i1;
  var $p2028: ref;
  var $p2029: ref;
  var $p2030: ref;
  var $p2031: ref;
  var $p2032: ref;
  var $p2033: ref;
  var $i2034: i64;
  var $p2036: ref;
  var $p2038: ref;
  var $p2039: ref;
  var $i2040: i64;
  var $i2041: i1;
  var $p2043: ref;
  var $i2044: i32;
  var $i2045: i1;
  var $p2046: ref;
  var $p2047: ref;
  var $p2048: ref;
  var $p2049: ref;
  var $p2050: ref;
  var $p2051: ref;
  var $i2052: i64;
  var $p2054: ref;
  var $p2056: ref;
  var $p2057: ref;
  var $i2058: i64;
  var $i2059: i1;
  var $p2061: ref;
  var $i2062: i32;
  var $i2063: i1;
  var $p2064: ref;
  var $p2065: ref;
  var $p2066: ref;
  var $p2067: ref;
  var $p2068: ref;
  var $p2069: ref;
  var $i2070: i64;
  var $p2072: ref;
  var $p2074: ref;
  var $p2075: ref;
  var $i2076: i64;
  var $i2077: i1;
  var $p2079: ref;
  var $i2080: i32;
  var $i2081: i1;
  var $p2082: ref;
  var $p2083: ref;
  var $p2084: ref;
  var $p2085: ref;
  var $p2086: ref;
  var $p2087: ref;
  var $i2088: i64;
  var $p2090: ref;
  var $p2092: ref;
  var $p2093: ref;
  var $i2094: i64;
  var $i2095: i1;
  var $p2097: ref;
  var $i2098: i32;
  var $i2099: i1;
  var $p2100: ref;
  var $p2101: ref;
  var $p2102: ref;
  var $p2103: ref;
  var $p2104: ref;
  var $p2105: ref;
  var $i2106: i64;
  var $p2108: ref;
  var $p2110: ref;
  var $p2111: ref;
  var $i2112: i64;
  var $i2113: i1;
  var $p2115: ref;
  var $i2116: i32;
  var $i2117: i1;
  var $p2118: ref;
  var $p2119: ref;
  var $p2120: ref;
  var $p2121: ref;
  var $p2122: ref;
  var $p2123: ref;
  var $i2124: i64;
  var $p2126: ref;
  var $p2128: ref;
  var $p2129: ref;
  var $i2130: i64;
  var $i2131: i1;
  var $p2133: ref;
  var $i2134: i32;
  var $i2135: i1;
  var $p2136: ref;
  var $p2137: ref;
  var $p2138: ref;
  var $p2139: ref;
  var $p2140: ref;
  var $p2141: ref;
  var $i2142: i64;
  var $p2144: ref;
  var $p2146: ref;
  var $p2147: ref;
  var $i2148: i64;
  var $i2149: i1;
  var $p2151: ref;
  var $i2152: i32;
  var $i2153: i1;
  var $p2154: ref;
  var $p2155: ref;
  var $p2156: ref;
  var $p2157: ref;
  var $p2158: ref;
  var $p2159: ref;
  var $i2160: i64;
  var $p2162: ref;
  var $p2164: ref;
  var $p2165: ref;
  var $i2166: i64;
  var $i2167: i1;
  var $p2169: ref;
  var $i2170: i32;
  var $i2171: i1;
  var $p2172: ref;
  var $p2173: ref;
  var $p2174: ref;
  var $p2175: ref;
  var $p2176: ref;
  var $p2177: ref;
  var $i2178: i64;
  var $p2180: ref;
  var $p2182: ref;
  var $p2183: ref;
  var $i2184: i64;
  var $i2185: i1;
  var $p2187: ref;
  var $i2188: i32;
  var $i2189: i1;
  var $p2190: ref;
  var $p2191: ref;
  var $p2192: ref;
  var $p2193: ref;
  var $p2194: ref;
  var $p2195: ref;
  var $i2196: i64;
  var $p2198: ref;
  var $p2200: ref;
  var $p2201: ref;
  var $i2202: i64;
  var $i2203: i1;
  var $p2205: ref;
  var $i2206: i32;
  var $i2207: i1;
  var $p2208: ref;
  var $p2209: ref;
  var $p2210: ref;
  var $p2211: ref;
  var $p2212: ref;
  var $p2213: ref;
  var $i2214: i64;
  var $p2216: ref;
  var $p2218: ref;
  var $p2219: ref;
  var $i2220: i64;
  var $i2221: i1;
  var $p2223: ref;
  var $i2224: i32;
  var $i2225: i1;
  var $p2226: ref;
  var $p2227: ref;
  var $p2228: ref;
  var $p2229: ref;
  var $p2230: ref;
  var $p2231: ref;
  var $i2232: i64;
  var $p2234: ref;
  var $p2236: ref;
  var $p2237: ref;
  var $i2238: i64;
  var $i2239: i1;
  var $p2241: ref;
  var $i2242: i32;
  var $i2243: i1;
  var $p2244: ref;
  var $p2245: ref;
  var $p2246: ref;
  var $p2247: ref;
  var $p2248: ref;
  var $p2249: ref;
  var $i2250: i64;
  var $p2252: ref;
  var $p2254: ref;
  var $p2255: ref;
  var $i2256: i64;
  var $i2257: i1;
  var $p2259: ref;
  var $i2260: i32;
  var $i2261: i1;
  var $p2262: ref;
  var $p2263: ref;
  var $p2264: ref;
  var $p2265: ref;
  var $p2266: ref;
  var $p2267: ref;
  var $i2268: i64;
  var $p2270: ref;
  var $p2272: ref;
  var $p2273: ref;
  var $i2274: i64;
  var $i2275: i1;
  var $p2277: ref;
  var $i2278: i32;
  var $i2279: i1;
  var $p2280: ref;
  var $p2281: ref;
  var $p2282: ref;
  var $p2283: ref;
  var $p2284: ref;
  var $p2285: ref;
  var $i2286: i64;
  var $p2288: ref;
  var $p2290: ref;
  var $p2291: ref;
  var $i2292: i64;
  var $i2293: i1;
  var $p2295: ref;
  var $i2296: i32;
  var $i2297: i1;
  var $p2298: ref;
  var $p2299: ref;
  var $p2300: ref;
  var $p2301: ref;
  var $p2302: ref;
  var $p2303: ref;
  var $i2304: i64;
  var $p2306: ref;
  var $p2308: ref;
  var $p2309: ref;
  var $i2310: i64;
  var $i2311: i1;
  var $p2313: ref;
  var $i2314: i32;
  var $i2315: i1;
  var $p2316: ref;
  var $p2317: ref;
  var $p2318: ref;
  var $p2319: ref;
  var $p2320: ref;
  var $p2321: ref;
  var $i2322: i64;
  var $p2324: ref;
  var $p2326: ref;
  var $p2327: ref;
  var $i2328: i64;
  var $i2329: i1;
  var $p2331: ref;
  var $i2332: i32;
  var $i2333: i1;
  var $p2334: ref;
  var $p2335: ref;
  var $p2336: ref;
  var $p2337: ref;
  var $p2338: ref;
  var $p2339: ref;
  var $i2340: i64;
  var $p2342: ref;
  var $p2344: ref;
  var $p2345: ref;
  var $i2346: i64;
  var $i2347: i1;
  var $p2349: ref;
  var $i2350: i32;
  var $i2351: i1;
  var $p2352: ref;
  var $p2353: ref;
  var $p2354: ref;
  var $p2355: ref;
  var $p2356: ref;
  var $p2357: ref;
  var $i2358: i64;
  var $p2360: ref;
  var $p2362: ref;
  var $p2363: ref;
  var $i2364: i64;
  var $i2365: i1;
  var $p2367: ref;
  var $i2368: i32;
  var $i2369: i1;
  var $p2370: ref;
  var $p2371: ref;
  var $p2372: ref;
  var $p2373: ref;
  var $p2374: ref;
  var $p2375: ref;
  var $i2376: i64;
  var $p2378: ref;
  var $p2380: ref;
  var $p2381: ref;
  var $i2382: i64;
  var $i2383: i1;
  var $p2385: ref;
  var $i2386: i32;
  var $i2387: i1;
  var $p2388: ref;
  var $p2389: ref;
  var $p2390: ref;
  var $p2391: ref;
  var $p2392: ref;
  var $p2393: ref;
  var $i2394: i64;
  var $p2396: ref;
  var $p2398: ref;
  var $p2399: ref;
  var $i2400: i64;
  var $i2401: i1;
  var $p2403: ref;
  var $i2404: i32;
  var $i2405: i1;
  var $p2406: ref;
  var $p2407: ref;
  var $p2408: ref;
  var $p2409: ref;
  var $p2410: ref;
  var $p2411: ref;
  var $i2412: i64;
  var $p2414: ref;
  var $p2416: ref;
  var $p2417: ref;
  var $i2418: i64;
  var $i2419: i1;
  var $p2421: ref;
  var $i2422: i32;
  var $i2423: i1;
  var $p2424: ref;
  var $p2425: ref;
  var $p2426: ref;
  var $p2427: ref;
  var $p2428: ref;
  var $p2429: ref;
  var $i2430: i64;
  var $p2432: ref;
  var $p2434: ref;
  var $p2435: ref;
  var $i2436: i64;
  var $i2437: i1;
  var $p2439: ref;
  var $i2440: i32;
  var $i2441: i1;
  var $p2442: ref;
  var $p2443: ref;
  var $p2444: ref;
  var $p2445: ref;
  var $p2446: ref;
  var $p2447: ref;
  var $i2448: i64;
  var $p2450: ref;
  var $p2452: ref;
  var $p2453: ref;
  var $i2454: i64;
  var $i2455: i1;
  var $p2457: ref;
  var $i2458: i32;
  var $i2459: i1;
  var $p2460: ref;
  var $p2461: ref;
  var $p2462: ref;
  var $p2463: ref;
  var $p2464: ref;
  var $p2465: ref;
  var $i2466: i64;
  var $p2468: ref;
  var $p2470: ref;
  var $p2471: ref;
  var $i2472: i64;
  var $i2473: i1;
  var $p2475: ref;
  var $i2476: i32;
  var $i2477: i1;
  var $p2478: ref;
  var $p2479: ref;
  var $p2480: ref;
  var $p2481: ref;
  var $p2482: ref;
  var $p2483: ref;
  var $i2484: i64;
  var $p2486: ref;
  var $p2488: ref;
  var $p2489: ref;
  var $i2490: i64;
  var $i2491: i1;
  var $p2493: ref;
  var $i2494: i32;
  var $i2495: i1;
  var $p2496: ref;
  var $p2497: ref;
  var $p2498: ref;
  var $p2499: ref;
  var $p2500: ref;
  var $p2501: ref;
  var $i2502: i64;
  var $p2504: ref;
  var $p2506: ref;
  var $p2507: ref;
  var $i2508: i64;
  var $i2509: i1;
  var $p2511: ref;
  var $i2512: i32;
  var $i2513: i1;
  var $p2514: ref;
  var $p2515: ref;
  var $p2516: ref;
  var $p2517: ref;
  var $p2518: ref;
  var $p2519: ref;
  var $i2520: i64;
  var $p2522: ref;
  var $p2524: ref;
  var $p2525: ref;
  var $i2526: i64;
  var $i2527: i1;
  var $p2529: ref;
  var $i2530: i32;
  var $i2531: i1;
  var $p2532: ref;
  var $p2533: ref;
  var $p2534: ref;
  var $p2535: ref;
  var $p2536: ref;
  var $p2537: ref;
  var $i2538: i64;
  var $p2540: ref;
  var $p2542: ref;
  var $p2543: ref;
  var $i2544: i64;
  var $i2545: i1;
  var $p2547: ref;
  var $i2548: i32;
  var $i2549: i1;
  var $p2550: ref;
  var $p2551: ref;
  var $p2552: ref;
  var $p2553: ref;
  var $p2554: ref;
  var $p2555: ref;
  var $i2556: i64;
  var $p2558: ref;
  var $p2560: ref;
  var $p2561: ref;
  var $i2562: i64;
  var $i2563: i1;
  var $p2565: ref;
  var $i2566: i32;
  var $i2567: i1;
  var $p2568: ref;
  var $p2569: ref;
  var $p2570: ref;
  var $p2571: ref;
  var $p2572: ref;
  var $p2573: ref;
  var $i2574: i64;
  var $p2576: ref;
  var $p2578: ref;
  var $p2579: ref;
  var $i2580: i64;
  var $i2581: i1;
  var $p2583: ref;
  var $i2584: i32;
  var $i2585: i1;
  var $p2586: ref;
  var $p2587: ref;
  var $p2588: ref;
  var $p2589: ref;
  var $p2590: ref;
  var $p2591: ref;
  var $i2592: i64;
  var $p2594: ref;
  var $p2596: ref;
  var $p2597: ref;
  var $i2598: i64;
  var $i2599: i1;
  var $p2601: ref;
  var $i2602: i32;
  var $i2603: i1;
  var $p2604: ref;
  var $p2605: ref;
  var $p2606: ref;
  var $p2607: ref;
  var $p2608: ref;
  var $p2609: ref;
  var $i2610: i64;
  var $p2612: ref;
  var $p2614: ref;
  var $p2615: ref;
  var $i2616: i64;
  var $i2617: i1;
  var $p2619: ref;
  var $i2620: i32;
  var $i2621: i1;
  var $p2622: ref;
  var $p2623: ref;
  var $p2624: ref;
  var $p2625: ref;
  var $p2626: ref;
  var $p2627: ref;
  var $i2628: i64;
  var $p2630: ref;
  var $p2632: ref;
  var $p2633: ref;
  var $i2634: i64;
  var $i2635: i1;
  var $p2637: ref;
  var $i2638: i32;
  var $i2639: i1;
  var $p2640: ref;
  var $p2641: ref;
  var $p2642: ref;
  var $p2643: ref;
  var $p2644: ref;
  var $p2645: ref;
  var $i2646: i64;
  var $p2648: ref;
  var $p2650: ref;
  var $p2651: ref;
  var $i2652: i64;
  var $i2653: i1;
  var $p2655: ref;
  var $i2656: i32;
  var $i2657: i1;
  var $p2658: ref;
  var $p2659: ref;
  var $p2660: ref;
  var $p2661: ref;
  var $p2662: ref;
  var $p2663: ref;
  var $i2664: i64;
  var $p2666: ref;
  var $p2668: ref;
  var $p2669: ref;
  var $i2670: i64;
  var $i2671: i1;
  var $p2673: ref;
  var $i2674: i32;
  var $i2675: i1;
  var $p2676: ref;
  var $p2677: ref;
  var $p2678: ref;
  var $p2679: ref;
  var $p2680: ref;
  var $p2681: ref;
  var $i2682: i64;
  var $p2684: ref;
  var $p2686: ref;
  var $p2687: ref;
  var $i2688: i64;
  var $i2689: i1;
  var $p2691: ref;
  var $i2692: i32;
  var $i2693: i1;
  var $p2694: ref;
  var $p2695: ref;
  var $p2696: ref;
  var $p2697: ref;
  var $p2698: ref;
  var $p2699: ref;
  var $i2700: i64;
  var $p2702: ref;
  var $p2704: ref;
  var $p2705: ref;
  var $i2706: i64;
  var $i2707: i1;
  var $p2709: ref;
  var $i2710: i32;
  var $i2711: i1;
  var $p2712: ref;
  var $p2713: ref;
  var $p2714: ref;
  var $p2715: ref;
  var $p2716: ref;
  var $p2717: ref;
  var $i2718: i64;
  var $p2720: ref;
  var $p2722: ref;
  var $p2723: ref;
  var $i2724: i64;
  var $i2725: i1;
  var $p2727: ref;
  var $i2728: i32;
  var $i2729: i1;
  var $p2730: ref;
  var $p2731: ref;
  var $p2732: ref;
  var $p2733: ref;
  var $p2734: ref;
  var $p2735: ref;
  var $i2736: i64;
  var $p2738: ref;
  var $p2740: ref;
  var $p2741: ref;
  var $i2742: i64;
  var $i2743: i1;
  var $p2745: ref;
  var $i2746: i32;
  var $i2747: i1;
  var $p2748: ref;
  var $p2749: ref;
  var $p2750: ref;
  var $p2751: ref;
  var $p2752: ref;
  var $p2753: ref;
  var $i2754: i64;
  var $p2756: ref;
  var $p2758: ref;
  var $p2759: ref;
  var $i2760: i64;
  var $i2761: i1;
  var $p2763: ref;
  var $i2764: i32;
  var $i2765: i1;
  var $p2766: ref;
  var $p2767: ref;
  var $p2768: ref;
  var $p2769: ref;
  var $p2770: ref;
  var $p2771: ref;
  var $i2772: i64;
  var $p2774: ref;
  var $p2776: ref;
  var $p2777: ref;
  var $i2778: i64;
  var $i2779: i1;
  var $p2781: ref;
  var $i2782: i32;
  var $i2783: i1;
  var $p2784: ref;
  var $p2785: ref;
  var $p2786: ref;
  var $p2787: ref;
  var $p2788: ref;
  var $p2789: ref;
  var $i2790: i64;
  var $p2792: ref;
  var $p2794: ref;
  var $p2795: ref;
  var $i2796: i64;
  var $i2797: i1;
  var $p2799: ref;
  var $i2800: i32;
  var $i2801: i1;
  var $p2802: ref;
  var $p2803: ref;
  var $p2804: ref;
  var $p2805: ref;
  var $p2806: ref;
  var $p2807: ref;
  var $i2808: i64;
  var $p2810: ref;
  var $p2812: ref;
  var $p2813: ref;
  var $i2814: i64;
  var $i2815: i1;
  var $p2817: ref;
  var $i2818: i32;
  var $i2819: i1;
  var $p2820: ref;
  var $p2821: ref;
  var $p2822: ref;
  var $p2823: ref;
  var $p2824: ref;
  var $p2825: ref;
  var $i2826: i64;
  var $p2828: ref;
  var $p2830: ref;
  var $p2831: ref;
  var $i2832: i64;
  var $i2833: i1;
  var $p2835: ref;
  var $i2836: i32;
  var $i2837: i1;
  var $p2838: ref;
  var $p2839: ref;
  var $p2840: ref;
  var $p2841: ref;
  var $p2842: ref;
  var $p2843: ref;
  var $i2844: i64;
  var $p2846: ref;
  var $p2848: ref;
  var $p2849: ref;
  var $i2850: i64;
  var $i2851: i1;
  var $p2853: ref;
  var $i2854: i32;
  var $i2855: i1;
  var $p2856: ref;
  var $p2857: ref;
  var $p2858: ref;
  var $p2859: ref;
  var $p2860: ref;
  var $p2861: ref;
  var $i2862: i64;
  var $p2864: ref;
  var $p2866: ref;
  var $p2867: ref;
  var $i2868: i64;
  var $i2869: i1;
  var $p2871: ref;
  var $i2872: i32;
  var $i2873: i1;
  var $p2874: ref;
  var $p2875: ref;
  var $p2876: ref;
  var $p2877: ref;
  var $p2878: ref;
  var $p2879: ref;
  var $i2880: i64;
  var $p2882: ref;
  var $p2884: ref;
  var $p2885: ref;
  var $i2886: i64;
  var $i2887: i1;
  var $p2889: ref;
  var $i2890: i32;
  var $i2891: i1;
  var $p2892: ref;
  var $p2893: ref;
  var $p2894: ref;
  var $p2895: ref;
  var $p2896: ref;
  var $p2897: ref;
  var $i2898: i64;
  var $p2900: ref;
  var $p2902: ref;
  var $p2903: ref;
  var $i2904: i64;
  var $i2905: i1;
  var $p2907: ref;
  var $i2908: i32;
  var $i2909: i1;
  var $p2910: ref;
  var $p2911: ref;
  var $p2912: ref;
  var $p2913: ref;
  var $p2914: ref;
  var $p2915: ref;
  var $i2916: i64;
  var $p2918: ref;
  var $p2920: ref;
  var $p2921: ref;
  var $i2922: i64;
  var $i2923: i1;
  var $p2925: ref;
  var $i2926: i32;
  var $i2927: i1;
  var $p2928: ref;
  var $p2929: ref;
  var $p2930: ref;
  var $p2931: ref;
  var $p2932: ref;
  var $p2933: ref;
  var $i2934: i64;
  var $p2936: ref;
  var $p2938: ref;
  var $p2939: ref;
  var $i2940: i64;
  var $i2941: i1;
  var $p2943: ref;
  var $i2944: i32;
  var $i2945: i1;
  var $p2946: ref;
  var $p2947: ref;
  var $p2948: ref;
  var $p2949: ref;
  var $p2950: ref;
  var $p2951: ref;
  var $i2952: i64;
  var $p2954: ref;
  var $p2956: ref;
  var $p2957: ref;
  var $i2958: i64;
  var $i2959: i1;
  var $p2961: ref;
  var $i2962: i32;
  var $i2963: i1;
  var $p2964: ref;
  var $p2965: ref;
  var $p2966: ref;
  var $p2967: ref;
  var $p2968: ref;
  var $p2969: ref;
  var $i2970: i64;
  var $p2972: ref;
  var $p2974: ref;
  var $p2975: ref;
  var $i2976: i64;
  var $i2977: i1;
  var $p2979: ref;
  var $i2980: i32;
  var $i2981: i1;
  var $p2982: ref;
  var $p2983: ref;
  var $p2984: ref;
  var $p2985: ref;
  var $p2986: ref;
  var $p2987: ref;
  var $i2988: i64;
  var $p2990: ref;
  var $p2992: ref;
  var $p2993: ref;
  var $i2994: i64;
  var $i2995: i1;
  var $p2997: ref;
  var $i2998: i32;
  var $i2999: i1;
  var $p3000: ref;
  var $p3001: ref;
  var $p3002: ref;
  var $p3003: ref;
  var $p3004: ref;
  var $p3005: ref;
  var $i3006: i64;
  var $p3008: ref;
  var $p3010: ref;
  var $p3011: ref;
  var $i3012: i64;
  var $i3013: i1;
  var $p3015: ref;
  var $i3016: i32;
  var $i3017: i1;
  var $p3018: ref;
  var $p3019: ref;
  var $p3020: ref;
  var $p3021: ref;
  var $p3022: ref;
  var $p3023: ref;
  var $i3024: i64;
  var $p3026: ref;
  var $p3028: ref;
  var $p3029: ref;
  var $i3030: i64;
  var $i3031: i1;
  var $p3033: ref;
  var $i3034: i32;
  var $i3035: i1;
  var $p3036: ref;
  var $p3037: ref;
  var $p3038: ref;
  var $p3039: ref;
  var $p3040: ref;
  var $p3041: ref;
  var $i3042: i64;
  var $p3044: ref;
  var $p3046: ref;
  var $p3047: ref;
  var $i3048: i64;
  var $i3049: i1;
  var $p3051: ref;
  var $i3052: i32;
  var $i3053: i1;
  var $p3054: ref;
  var $p3055: ref;
  var $p3056: ref;
  var $p3057: ref;
  var $p3058: ref;
  var $p3059: ref;
  var $i3060: i64;
  var $p3062: ref;
  var $p3064: ref;
  var $p3065: ref;
  var $i3066: i64;
  var $i3067: i1;
  var $p3069: ref;
  var $i3070: i32;
  var $i3071: i1;
  var $p3072: ref;
  var $p3073: ref;
  var $p3074: ref;
  var $p3075: ref;
  var $p3076: ref;
  var $p3077: ref;
  var $i3078: i64;
  var $p3080: ref;
  var $p3082: ref;
  var $p3083: ref;
  var $i3084: i64;
  var $i3085: i1;
  var $p3087: ref;
  var $i3088: i32;
  var $i3089: i1;
  var $p3090: ref;
  var $p3091: ref;
  var $p3092: ref;
  var $p3093: ref;
  var $p3094: ref;
  var $p3095: ref;
  var $i3096: i64;
  var $p3098: ref;
  var $p3100: ref;
  var $p3101: ref;
  var $i3102: i64;
  var $i3103: i1;
  var $p3105: ref;
  var $i3106: i32;
  var $i3107: i1;
  var $p3108: ref;
  var $p3109: ref;
  var $p3110: ref;
  var $p3111: ref;
  var $p3112: ref;
  var $p3113: ref;
  var $i3114: i64;
  var $p3116: ref;
  var $p3118: ref;
  var $p3119: ref;
  var $i3120: i64;
  var $i3121: i1;
  var $p3123: ref;
  var $i3124: i32;
  var $i3125: i1;
  var $p3126: ref;
  var $p3127: ref;
  var $p3128: ref;
  var $p3129: ref;
  var $p3130: ref;
  var $p3131: ref;
  var $i3132: i64;
  var $p3134: ref;
  var $p3136: ref;
  var $p3137: ref;
  var $i3138: i64;
  var $i3139: i1;
  var $p3141: ref;
  var $i3142: i32;
  var $i3143: i1;
  var $p3144: ref;
  var $p3145: ref;
  var $p3146: ref;
  var $p3147: ref;
  var $p3148: ref;
  var $p3149: ref;
  var $i3150: i64;
  var $p3152: ref;
  var $p3154: ref;
  var $p3155: ref;
  var $i3156: i64;
  var $i3157: i1;
  var $p3159: ref;
  var $i3160: i32;
  var $i3161: i1;
  var $p3162: ref;
  var $p3163: ref;
  var $p3164: ref;
  var $p3165: ref;
  var $p3166: ref;
  var $p3167: ref;
  var $i3168: i64;
  var $p3170: ref;
  var $p3172: ref;
  var $p3173: ref;
  var $i3174: i64;
  var $i3175: i1;
  var $p3177: ref;
  var $i3178: i32;
  var $i3179: i1;
  var $p3180: ref;
  var $p3181: ref;
  var $p3182: ref;
  var $p3183: ref;
  var $p3184: ref;
  var $p3185: ref;
  var $i3186: i64;
  var $p3188: ref;
  var $p3190: ref;
  var $p3191: ref;
  var $i3192: i64;
  var $i3193: i1;
  var $p3195: ref;
  var $i3196: i32;
  var $i3197: i1;
  var $p3198: ref;
  var $p3199: ref;
  var $p3200: ref;
  var $p3201: ref;
  var $p3202: ref;
  var $p3203: ref;
  var $i3204: i64;
  var $p3206: ref;
  var $p3208: ref;
  var $p3209: ref;
  var $i3210: i64;
  var $i3211: i1;
  var $p3213: ref;
  var $i3214: i32;
  var $i3215: i1;
  var $p3216: ref;
  var $p3217: ref;
  var $p3218: ref;
  var $p3219: ref;
  var $p3220: ref;
  var $p3221: ref;
  var $i3222: i64;
  var $p3224: ref;
  var $p3226: ref;
  var $p3227: ref;
  var $i3228: i64;
  var $i3229: i1;
  var $p3231: ref;
  var $i3232: i32;
  var $i3233: i1;
  var $p3234: ref;
  var $p3235: ref;
  var $p3236: ref;
  var $p3237: ref;
  var $p3238: ref;
  var $p3239: ref;
  var $i3240: i64;
  var $p3242: ref;
  var $p3244: ref;
  var $p3245: ref;
  var $i3246: i64;
  var $i3247: i1;
  var $p3249: ref;
  var $i3250: i32;
  var $i3251: i1;
  var $p3252: ref;
  var $p3253: ref;
  var $p3254: ref;
  var $p3255: ref;
  var $p3256: ref;
  var $p3257: ref;
  var $i3258: i64;
  var $p3260: ref;
  var $p3262: ref;
  var $p3263: ref;
  var $i3264: i64;
  var $i3265: i1;
  var $p3267: ref;
  var $i3268: i32;
  var $i3269: i1;
  var $p3270: ref;
  var $p3271: ref;
  var $p3272: ref;
  var $p3273: ref;
  var $p3274: ref;
  var $p3275: ref;
  var $i3276: i64;
  var $p3278: ref;
  var $p3280: ref;
  var $p3281: ref;
  var $i3282: i64;
  var $i3283: i1;
  var $p3285: ref;
  var $i3286: i32;
  var $i3287: i1;
  var $p3288: ref;
  var $p3289: ref;
  var $p3290: ref;
  var $p3291: ref;
  var $p3292: ref;
  var $p3293: ref;
  var $i3294: i64;
  var $p3296: ref;
  var $p3298: ref;
  var $p3299: ref;
  var $i3300: i64;
  var $i3301: i1;
  var $p3303: ref;
  var $i3304: i32;
  var $i3305: i1;
  var $p3306: ref;
  var $p3307: ref;
  var $p3308: ref;
  var $p3309: ref;
  var $p3310: ref;
  var $p3311: ref;
  var $i3312: i64;
  var $p3314: ref;
  var $p3316: ref;
  var $p3317: ref;
  var $i3318: i64;
  var $i3319: i1;
  var $p3321: ref;
  var $i3322: i32;
  var $i3323: i1;
  var $p3324: ref;
  var $p3325: ref;
  var $p3326: ref;
  var $p3327: ref;
  var $p3328: ref;
  var $p3329: ref;
  var $i3330: i64;
  var $p3332: ref;
  var $p3334: ref;
  var $p3335: ref;
  var $i3336: i64;
  var $i3337: i1;
  var $p3339: ref;
  var $i3340: i32;
  var $i3341: i1;
  var $p3342: ref;
  var $p3343: ref;
  var $p3344: ref;
  var $p3345: ref;
  var $p3346: ref;
  var $p3347: ref;
  var $i3348: i64;
  var $p3350: ref;
  var $p3352: ref;
  var $p3353: ref;
  var $i3354: i64;
  var $i3355: i1;
  var $p3357: ref;
  var $i3358: i32;
  var $i3359: i1;
  var $p3360: ref;
  var $p3361: ref;
  var $p3362: ref;
  var $p3363: ref;
  var $p3364: ref;
  var $p3365: ref;
  var $i3366: i64;
  var $p3368: ref;
  var $p3370: ref;
  var $p3371: ref;
  var $i3372: i64;
  var $i3373: i1;
  var $p3375: ref;
  var $i3376: i32;
  var $i3377: i1;
  var $p3378: ref;
  var $p3379: ref;
  var $p3380: ref;
  var $p3381: ref;
  var $p3382: ref;
  var $p3383: ref;
  var $i3384: i64;
  var $p3386: ref;
  var $p3388: ref;
  var $p3389: ref;
  var $i3390: i64;
  var $i3391: i1;
  var $p3393: ref;
  var $i3394: i32;
  var $i3395: i1;
  var $p3396: ref;
  var $p3397: ref;
  var $p3398: ref;
  var $p3399: ref;
  var $p3400: ref;
  var $p3401: ref;
  var $i3402: i64;
  var $p3404: ref;
  var $p3406: ref;
  var $p3407: ref;
  var $i3408: i64;
  var $i3409: i1;
  var $p3411: ref;
  var $i3412: i32;
  var $i3413: i1;
  var $p3414: ref;
  var $p3415: ref;
  var $p3416: ref;
  var $p3417: ref;
  var $p3418: ref;
  var $p3419: ref;
  var $i3420: i64;
  var $p3422: ref;
  var $p3424: ref;
  var $p3425: ref;
  var $i3426: i64;
  var $i3427: i1;
  var $p3429: ref;
  var $i3430: i32;
  var $i3431: i1;
  var $p3432: ref;
  var $p3433: ref;
  var $p3434: ref;
  var $p3435: ref;
  var $p3436: ref;
  var $p3437: ref;
  var $i3438: i64;
  var $p3440: ref;
  var $p3442: ref;
  var $p3443: ref;
  var $i3444: i64;
  var $i3445: i1;
  var $p3447: ref;
  var $i3448: i32;
  var $i3449: i1;
  var $p3450: ref;
  var $p3451: ref;
  var $p3452: ref;
  var $p3453: ref;
  var $p3454: ref;
  var $p3455: ref;
  var $i3456: i64;
  var $p3458: ref;
  var $p3460: ref;
  var $p3461: ref;
  var $i3462: i64;
  var $i3463: i1;
  var $p3465: ref;
  var $i3466: i32;
  var $i3467: i1;
  var $p3468: ref;
  var $p3469: ref;
  var $p3470: ref;
  var $p3471: ref;
  var $p3472: ref;
  var $p3473: ref;
  var $i3474: i64;
  var $p3476: ref;
  var $p3478: ref;
  var $p3479: ref;
  var $i3480: i64;
  var $i3481: i1;
  var $p3483: ref;
  var $i3484: i32;
  var $i3485: i1;
  var $p3486: ref;
  var $p3487: ref;
  var $p3488: ref;
  var $p3489: ref;
  var $p3490: ref;
  var $p3491: ref;
  var $i3492: i64;
  var $p3494: ref;
  var $p3496: ref;
  var $p3497: ref;
  var $i3498: i64;
  var $i3499: i1;
  var $p3501: ref;
  var $i3502: i32;
  var $i3503: i1;
  var $p3504: ref;
  var $p3505: ref;
  var $p3506: ref;
  var $p3507: ref;
  var $p3508: ref;
  var $p3509: ref;
  var $i3510: i64;
  var $p3512: ref;
  var $p3514: ref;
  var $p3515: ref;
  var $i3516: i64;
  var $i3517: i1;
  var $p3519: ref;
  var $i3520: i32;
  var $i3521: i1;
  var $p3522: ref;
  var $p3523: ref;
  var $p3524: ref;
  var $p3525: ref;
  var $p3526: ref;
  var $p3527: ref;
  var $i3528: i64;
  var $p3530: ref;
  var $p3532: ref;
  var $p3533: ref;
  var $i3534: i64;
  var $i3535: i1;
  var $p3537: ref;
  var $i3538: i32;
  var $i3539: i1;
  var $p3540: ref;
  var $p3541: ref;
  var $p3542: ref;
  var $p3543: ref;
  var $p3544: ref;
  var $p3545: ref;
  var $i3546: i64;
  var $p3548: ref;
  var $p3550: ref;
  var $p3551: ref;
  var $i3552: i64;
  var $i3553: i1;
  var $p3555: ref;
  var $i3556: i32;
  var $i3557: i1;
  var $p3558: ref;
  var $p3559: ref;
  var $p3560: ref;
  var $p3561: ref;
  var $p3562: ref;
  var $p3563: ref;
  var $i3564: i64;
  var $p3566: ref;
  var $p3568: ref;
  var $p3569: ref;
  var $i3570: i64;
  var $i3571: i1;
  var $p3573: ref;
  var $i3574: i32;
  var $i3575: i1;
  var $p3576: ref;
  var $p3577: ref;
  var $p3578: ref;
  var $p3579: ref;
  var $p3580: ref;
  var $p3581: ref;
  var $i3582: i64;
  var $p3584: ref;
  var $p3586: ref;
  var $p3587: ref;
  var $i3588: i64;
  var $i3589: i1;
  var $p3591: ref;
  var $i3592: i32;
  var $i3593: i1;
  var $p3594: ref;
  var $p3595: ref;
  var $p3596: ref;
  var $p3597: ref;
  var $p3598: ref;
  var $p3599: ref;
  var $i3600: i64;
  var $p3602: ref;
  var $p3604: ref;
  var $p3605: ref;
  var $i3606: i64;
  var $i3607: i1;
  var $p3609: ref;
  var $i3610: i32;
  var $i3611: i1;
  var $p3612: ref;
  var $p3613: ref;
  var $p3614: ref;
  var $p3615: ref;
  var $p3616: ref;
  var $p3617: ref;
  var $i3618: i64;
  var $p3620: ref;
  var $p3622: ref;
  var $p3623: ref;
  var $i3624: i64;
  var $i3625: i1;
  var $p3627: ref;
  var $i3628: i32;
  var $i3629: i1;
  var $p3630: ref;
  var $p3631: ref;
  var $p3632: ref;
  var $p3633: ref;
  var $p3634: ref;
  var $p3635: ref;
  var $i3636: i64;
  var $p3638: ref;
  var $p3640: ref;
  var $p3641: ref;
  var $i3642: i64;
  var $i3643: i1;
  var $p3645: ref;
  var $i3646: i32;
  var $i3647: i1;
  var $p3648: ref;
  var $p3649: ref;
  var $p3650: ref;
  var $p3651: ref;
  var $p3652: ref;
  var $p3653: ref;
  var $i3654: i64;
  var $p3656: ref;
  var $p3658: ref;
  var $p3659: ref;
  var $i3660: i64;
  var $i3661: i1;
  var $p3663: ref;
  var $i3664: i32;
  var $i3665: i1;
  var $p3666: ref;
  var $p3667: ref;
  var $p3668: ref;
  var $p3669: ref;
  var $p3670: ref;
  var $p3671: ref;
  var $i3672: i64;
  var $p3674: ref;
  var $p3676: ref;
  var $p3677: ref;
  var $i3678: i64;
  var $i3679: i1;
  var $p3681: ref;
  var $i3682: i32;
  var $i3683: i1;
  var $p3684: ref;
  var $p3685: ref;
  var $p3686: ref;
  var $p3687: ref;
  var $p3688: ref;
  var $p3689: ref;
  var $i3690: i64;
  var $p3692: ref;
  var $p3694: ref;
  var $p3695: ref;
  var $i3696: i64;
  var $i3697: i1;
  var $p3699: ref;
  var $i3700: i32;
  var $i3701: i1;
  var $p3702: ref;
  var $p3703: ref;
  var $p3704: ref;
  var $p3705: ref;
  var $p3706: ref;
  var $p3707: ref;
  var $i3708: i64;
  var $p3710: ref;
  var $p3712: ref;
  var $p3713: ref;
  var $i3714: i64;
  var $i3715: i1;
  var $p3717: ref;
  var $i3718: i32;
  var $i3719: i1;
  var $p3720: ref;
  var $p3721: ref;
  var $p3722: ref;
  var $p3723: ref;
  var $p3724: ref;
  var $p3725: ref;
  var $i3726: i64;
  var $p3728: ref;
  var $p3730: ref;
  var $p3731: ref;
  var $i3732: i64;
  var $i3733: i1;
  var $p3735: ref;
  var $i3736: i32;
  var $i3737: i1;
  var $p3738: ref;
  var $p3739: ref;
  var $p3740: ref;
  var $p3741: ref;
  var $p3742: ref;
  var $p3743: ref;
  var $i3744: i64;
  var $p3746: ref;
  var $p3748: ref;
  var $p3749: ref;
  var $i3750: i64;
  var $i3751: i1;
  var $p3753: ref;
  var $i3754: i32;
  var $i3755: i1;
  var $p3756: ref;
  var $p3757: ref;
  var $p3758: ref;
  var $p3759: ref;
  var $p3760: ref;
  var $p3761: ref;
  var $i3762: i64;
  var $p3764: ref;
  var $p3766: ref;
  var $p3767: ref;
  var $i3768: i64;
  var $i3769: i1;
  var $p3771: ref;
  var $i3772: i32;
  var $i3773: i1;
  var $p3774: ref;
  var $p3775: ref;
  var $p3776: ref;
  var $p3777: ref;
  var $p3778: ref;
  var $p3779: ref;
  var $i3780: i64;
  var $p3782: ref;
  var $p3784: ref;
  var $p3785: ref;
  var $i3786: i64;
  var $i3787: i1;
  var $p3789: ref;
  var $i3790: i32;
  var $i3791: i1;
  var $p3792: ref;
  var $p3793: ref;
  var $p3794: ref;
  var $p3795: ref;
  var $p3796: ref;
  var $p3797: ref;
  var $i3798: i64;
  var $p3800: ref;
  var $p3802: ref;
  var $p3803: ref;
  var $i3804: i64;
  var $i3805: i1;
  var $p3807: ref;
  var $i3808: i32;
  var $i3809: i1;
  var $p3810: ref;
  var $p3811: ref;
  var $p3812: ref;
  var $p3813: ref;
  var $p3814: ref;
  var $p3815: ref;
  var $i3816: i64;
  var $p3818: ref;
  var $p3820: ref;
  var $p3821: ref;
  var $i3822: i64;
  var $i3823: i1;
  var $p3825: ref;
  var $i3826: i32;
  var $i3827: i1;
  var $p3828: ref;
  var $p3829: ref;
  var $p3830: ref;
  var $p3831: ref;
  var $p3832: ref;
  var $p3833: ref;
  var $i3834: i64;
  var $p3836: ref;
  var $p3838: ref;
  var $p3839: ref;
  var $i3840: i64;
  var $i3841: i1;
  var $p3843: ref;
  var $i3844: i32;
  var $i3845: i1;
  var $p3846: ref;
  var $p3847: ref;
  var $p3848: ref;
  var $p3849: ref;
  var $p3850: ref;
  var $p3851: ref;
  var $i3852: i64;
  var $p3854: ref;
  var $p3856: ref;
  var $p3857: ref;
  var $i3858: i64;
  var $i3859: i1;
  var $p3861: ref;
  var $i3862: i32;
  var $i3863: i1;
  var $p3864: ref;
  var $p3865: ref;
  var $p3866: ref;
  var $p3867: ref;
  var $p3868: ref;
  var $p3869: ref;
  var $i3870: i64;
  var $p3872: ref;
  var $p3874: ref;
  var $p3875: ref;
  var $i3876: i64;
  var $i3877: i1;
  var $p3879: ref;
  var $i3880: i32;
  var $i3881: i1;
  var $p3882: ref;
  var $p3883: ref;
  var $p3884: ref;
  var $p3885: ref;
  var $p3886: ref;
  var $p3887: ref;
  var $i3888: i64;
  var $p3890: ref;
  var $p3892: ref;
  var $p3893: ref;
  var $i3894: i64;
  var $i3895: i1;
  var $p3897: ref;
  var $i3898: i32;
  var $i3899: i1;
  var $p3900: ref;
  var $p3901: ref;
  var $p3902: ref;
  var $p3903: ref;
  var $p3904: ref;
  var $p3905: ref;
  var $i3906: i64;
  var $p3908: ref;
  var $p3910: ref;
  var $p3911: ref;
  var $i3912: i64;
  var $i3913: i1;
  var $p3915: ref;
  var $i3916: i32;
  var $i3917: i1;
  var $p3918: ref;
  var $p3919: ref;
  var $p3920: ref;
  var $p3921: ref;
  var $p3922: ref;
  var $p3923: ref;
  var $i3924: i64;
  var $p3926: ref;
  var $p3928: ref;
  var $p3929: ref;
  var $i3930: i64;
  var $i3931: i1;
  var $p3933: ref;
  var $i3934: i32;
  var $i3935: i1;
  var $p3936: ref;
  var $p3937: ref;
  var $p3938: ref;
  var $p3939: ref;
  var $p3940: ref;
  var $p3941: ref;
  var $i3942: i64;
  var $p3944: ref;
  var $p3946: ref;
  var $p3947: ref;
  var $i3948: i64;
  var $i3949: i1;
  var $p3951: ref;
  var $i3952: i32;
  var $i3953: i1;
  var $p3954: ref;
  var $p3955: ref;
  var $p3956: ref;
  var $p3957: ref;
  var $p3958: ref;
  var $p3959: ref;
  var $i3960: i64;
  var $p3962: ref;
  var $p3964: ref;
  var $p3965: ref;
  var $i3966: i64;
  var $i3967: i1;
  var $p3969: ref;
  var $i3970: i32;
  var $i3971: i1;
  var $p3972: ref;
  var $p3973: ref;
  var $p3974: ref;
  var $p3975: ref;
  var $p3976: ref;
  var $p3977: ref;
  var $i3978: i64;
  var $p3980: ref;
  var $p3982: ref;
  var $p3983: ref;
  var $i3984: i64;
  var $i3985: i1;
  var $p3987: ref;
  var $i3988: i32;
  var $i3989: i1;
  var $p3990: ref;
  var $p3991: ref;
  var $p3992: ref;
  var $p3993: ref;
  var $p3994: ref;
  var $p3995: ref;
  var $i3996: i64;
  var $p3998: ref;
  var $p4000: ref;
  var $p4001: ref;
  var $i4002: i64;
  var $i4003: i1;
  var $p4005: ref;
  var $i4006: i32;
  var $i4007: i1;
  var $p4008: ref;
  var $p4009: ref;
  var $p4010: ref;
  var $p4011: ref;
  var $p4012: ref;
  var $p4013: ref;
  var $i4014: i64;
  var $p4016: ref;
  var $p4018: ref;
  var $p4019: ref;
  var $i4020: i64;
  var $i4021: i1;
  var $p4023: ref;
  var $i4024: i32;
  var $i4025: i1;
  var $p4026: ref;
  var $p4027: ref;
  var $p4028: ref;
  var $p4029: ref;
  var $p4030: ref;
  var $p4031: ref;
  var $i4032: i64;
  var $p4034: ref;
  var $p4036: ref;
  var $p4037: ref;
  var $i4038: i64;
  var $i4039: i1;
  var $p4041: ref;
  var $i4042: i32;
  var $i4043: i1;
  var $p4044: ref;
  var $p4045: ref;
  var $p4046: ref;
  var $p4047: ref;
  var $p4048: ref;
  var $p4049: ref;
  var $i4050: i64;
  var $p4052: ref;
  var $p4054: ref;
  var $p4055: ref;
  var $i4056: i64;
  var $i4057: i1;
  var $p4059: ref;
  var $i4060: i32;
  var $i4061: i1;
  var $p4062: ref;
  var $p4063: ref;
  var $p4064: ref;
  var $p4065: ref;
  var $p4066: ref;
  var $p4067: ref;
  var $i4068: i64;
  var $p4070: ref;
  var $p4072: ref;
  var $p4073: ref;
  var $i4074: i64;
  var $i4075: i1;
  var $p4077: ref;
  var $i4078: i32;
  var $i4079: i1;
  var $p4080: ref;
  var $p4081: ref;
  var $p4082: ref;
  var $p4083: ref;
  var $p4084: ref;
  var $p4085: ref;
  var $i4086: i64;
  var $p4088: ref;
  var $p4090: ref;
  var $p4091: ref;
  var $i4092: i64;
  var $i4093: i1;
  var $p4095: ref;
  var $i4096: i32;
  var $i4097: i1;
  var $p4098: ref;
  var $p4099: ref;
  var $p4100: ref;
  var $p4101: ref;
  var $p4102: ref;
  var $p4103: ref;
  var $i4104: i64;
  var $p4106: ref;
  var $p4108: ref;
  var $p4109: ref;
  var $i4110: i64;
  var $i4111: i1;
  var $p4113: ref;
  var $i4114: i32;
  var $i4115: i1;
  var $p4116: ref;
  var $p4117: ref;
  var $p4118: ref;
  var $p4119: ref;
  var $p4120: ref;
  var $p4121: ref;
  var $i4122: i64;
  var $p4124: ref;
  var $p4126: ref;
  var $p4127: ref;
  var $i4128: i64;
  var $i4129: i1;
  var $p4131: ref;
  var $i4132: i32;
  var $i4133: i1;
  var $p4134: ref;
  var $p4135: ref;
  var $p4136: ref;
  var $p4137: ref;
  var $p4138: ref;
  var $p4139: ref;
  var $i4140: i64;
  var $p4142: ref;
  var $p4144: ref;
  var $p4145: ref;
  var $i4146: i64;
  var $i4147: i1;
  var $p4149: ref;
  var $i4150: i32;
  var $i4151: i1;
  var $p4152: ref;
  var $p4153: ref;
  var $p4154: ref;
  var $p4155: ref;
  var $p4156: ref;
  var $p4157: ref;
  var $i4158: i64;
  var $p4160: ref;
  var $p4162: ref;
  var $p4163: ref;
  var $i4164: i64;
  var $i4165: i1;
  var $p4167: ref;
  var $i4168: i32;
  var $i4169: i1;
  var $p4170: ref;
  var $p4171: ref;
  var $p4172: ref;
  var $p4173: ref;
  var $p4174: ref;
  var $p4175: ref;
  var $i4176: i64;
  var $p4178: ref;
  var $p4180: ref;
  var $p4181: ref;
  var $i4182: i64;
  var $i4183: i1;
  var $p4185: ref;
  var $i4186: i32;
  var $i4187: i1;
  var $p4188: ref;
  var $p4189: ref;
  var $p4190: ref;
  var $p4191: ref;
  var $p4192: ref;
  var $p4193: ref;
  var $i4194: i64;
  var $p4196: ref;
  var $p4198: ref;
  var $p4199: ref;
  var $i4200: i64;
  var $i4201: i1;
  var $p4203: ref;
  var $i4204: i32;
  var $i4205: i1;
  var $p4206: ref;
  var $p4207: ref;
  var $p4208: ref;
  var $p4209: ref;
  var $p4210: ref;
  var $p4211: ref;
  var $i4212: i64;
  var $p4214: ref;
  var $p4216: ref;
  var $p4217: ref;
  var $i4218: i64;
  var $i4219: i1;
  var $p4221: ref;
  var $i4222: i32;
  var $i4223: i1;
  var $p4224: ref;
  var $p4225: ref;
  var $p4226: ref;
  var $p4227: ref;
  var $p4228: ref;
  var $p4229: ref;
  var $i4230: i64;
  var $p4232: ref;
  var $p4234: ref;
  var $p4235: ref;
  var $i4236: i64;
  var $i4237: i1;
  var $p4239: ref;
  var $i4240: i32;
  var $i4241: i1;
  var $p4242: ref;
  var $p4243: ref;
  var $p4244: ref;
  var $p4245: ref;
  var $p4246: ref;
  var $p4247: ref;
  var $i4248: i64;
  var $p4250: ref;
  var $p4252: ref;
  var $p4253: ref;
  var $i4254: i64;
  var $i4255: i1;
  var $p4257: ref;
  var $i4258: i32;
  var $i4259: i1;
  var $p4260: ref;
  var $p4261: ref;
  var $p4262: ref;
  var $p4263: ref;
  var $p4264: ref;
  var $p4265: ref;
  var $i4266: i64;
  var $p4268: ref;
  var $p4270: ref;
  var $p4271: ref;
  var $i4272: i64;
  var $i4273: i1;
  var $p4275: ref;
  var $i4276: i32;
  var $i4277: i1;
  var $p4278: ref;
  var $p4279: ref;
  var $p4280: ref;
  var $p4281: ref;
  var $p4282: ref;
  var $p4283: ref;
  var $i4284: i64;
  var $p4286: ref;
  var $p4288: ref;
  var $p4289: ref;
  var $i4290: i64;
  var $i4291: i1;
  var $p4293: ref;
  var $i4294: i32;
  var $i4295: i1;
  var $p4296: ref;
  var $p4297: ref;
  var $p4298: ref;
  var $p4299: ref;
  var $p4300: ref;
  var $p4301: ref;
  var $i4302: i64;
  var $p4304: ref;
  var $p4306: ref;
  var $p4307: ref;
  var $i4308: i64;
  var $i4309: i1;
  var $p4311: ref;
  var $i4312: i32;
  var $i4313: i1;
  var $p4314: ref;
  var $p4315: ref;
  var $p4316: ref;
  var $p4317: ref;
  var $p4318: ref;
  var $p4319: ref;
  var $i4320: i64;
  var $p4322: ref;
  var $p4324: ref;
  var $p4325: ref;
  var $i4326: i64;
  var $i4327: i1;
  var $p4329: ref;
  var $i4330: i32;
  var $i4331: i1;
  var $p4332: ref;
  var $p4333: ref;
  var $p4334: ref;
  var $p4335: ref;
  var $p4336: ref;
  var $p4337: ref;
  var $i4338: i64;
  var $p4340: ref;
  var $p4342: ref;
  var $p4343: ref;
  var $i4344: i64;
  var $i4345: i1;
  var $p4347: ref;
  var $i4348: i32;
  var $i4349: i1;
  var $p4350: ref;
  var $p4351: ref;
  var $p4352: ref;
  var $p4353: ref;
  var $p4354: ref;
  var $p4355: ref;
  var $i4356: i64;
  var $p4358: ref;
  var $p4360: ref;
  var $p4361: ref;
  var $i4362: i64;
  var $i4363: i1;
  var $p4365: ref;
  var $i4366: i32;
  var $i4367: i1;
  var $p4368: ref;
  var $p4369: ref;
  var $p4370: ref;
  var $p4371: ref;
  var $p4372: ref;
  var $p4373: ref;
  var $i4374: i64;
  var $p4376: ref;
  var $p4378: ref;
  var $p4379: ref;
  var $i4380: i64;
  var $i4381: i1;
  var $p4383: ref;
  var $i4384: i32;
  var $i4385: i1;
  var $p4386: ref;
  var $p4387: ref;
  var $p4388: ref;
  var $p4389: ref;
  var $p4390: ref;
  var $p4391: ref;
  var $i4392: i64;
  var $p4394: ref;
  var $p4396: ref;
  var $p4397: ref;
  var $i4398: i64;
  var $i4399: i1;
  var $p4401: ref;
  var $i4402: i32;
  var $i4403: i1;
  var $p4404: ref;
  var $p4405: ref;
  var $p4406: ref;
  var $p4407: ref;
  var $p4408: ref;
  var $p4409: ref;
  var $i4410: i64;
  var $p4412: ref;
  var $p4414: ref;
  var $p4415: ref;
  var $i4416: i64;
  var $i4417: i1;
  var $p4419: ref;
  var $i4420: i32;
  var $i4421: i1;
  var $p4422: ref;
  var $p4423: ref;
  var $p4424: ref;
  var $p4425: ref;
  var $p4426: ref;
  var $p4427: ref;
  var $i4428: i64;
  var $p4430: ref;
  var $p4432: ref;
  var $p4433: ref;
  var $i4434: i64;
  var $i4435: i1;
  var $p4437: ref;
  var $i4438: i32;
  var $i4439: i1;
  var $p4440: ref;
  var $p4441: ref;
  var $p4442: ref;
  var $p4443: ref;
  var $p4444: ref;
  var $p4445: ref;
  var $i4446: i64;
  var $p4448: ref;
  var $p4450: ref;
  var $p4451: ref;
  var $i4452: i64;
  var $i4453: i1;
  var $p4455: ref;
  var $i4456: i32;
  var $i4457: i1;
  var $p4458: ref;
  var $p4459: ref;
  var $p4460: ref;
  var $p4461: ref;
  var $p4462: ref;
  var $p4463: ref;
  var $i4464: i64;
  var $p4466: ref;
  var $p4468: ref;
  var $p4469: ref;
  var $i4470: i64;
  var $i4471: i1;
  var $p4473: ref;
  var $i4474: i32;
  var $i4475: i1;
  var $p4476: ref;
  var $p4477: ref;
  var $p4478: ref;
  var $p4479: ref;
  var $p4480: ref;
  var $p4481: ref;
  var $i4482: i64;
  var $p4484: ref;
  var $p4486: ref;
  var $p4487: ref;
  var $i4488: i64;
  var $i4489: i1;
  var $p4491: ref;
  var $i4492: i32;
  var $i4493: i1;
  var $p4494: ref;
  var $p4495: ref;
  var $p4496: ref;
  var $p4497: ref;
  var $p4498: ref;
  var $p4499: ref;
  var $i4500: i64;
  var $p4502: ref;
  var $p4504: ref;
  var $p4505: ref;
  var $i4506: i64;
  var $i4507: i1;
  var $p4509: ref;
  var $i4510: i32;
  var $i4511: i1;
  var $p4512: ref;
  var $p4513: ref;
  var $p4514: ref;
  var $p4515: ref;
  var $p4516: ref;
  var $p4517: ref;
  var $i4518: i64;
  var $p4520: ref;
  var $p4522: ref;
  var $p4523: ref;
  var $i4524: i64;
  var $i4525: i1;
  var $p4527: ref;
  var $i4528: i32;
  var $i4529: i1;
  var $p4530: ref;
  var $p4531: ref;
  var $p4532: ref;
  var $p4533: ref;
  var $p4534: ref;
  var $p4535: ref;
  var $i4536: i64;
  var $p4538: ref;
  var $p4540: ref;
  var $p4541: ref;
  var $i4542: i64;
  var $i4543: i1;
  var $p4545: ref;
  var $i4546: i32;
  var $i4547: i1;
  var $p4548: ref;
  var $p4549: ref;
  var $p4550: ref;
  var $p4551: ref;
  var $p4552: ref;
  var $p4553: ref;
  var $i4554: i64;
  var $p4556: ref;
  var $p4558: ref;
  var $p4559: ref;
  var $i4560: i64;
  var $i4561: i1;
  var $p4563: ref;
  var $i4564: i32;
  var $i4565: i1;
  var $p4566: ref;
  var $p4567: ref;
  var $p4568: ref;
  var $p4569: ref;
  var $p4570: ref;
  var $p4571: ref;
  var $i4572: i64;
  var $p4574: ref;
  var $p4576: ref;
  var $p4577: ref;
  var $i4578: i64;
  var $i4579: i1;
  var $p4581: ref;
  var $i4582: i32;
  var $i4583: i1;
  var $p4584: ref;
  var $p4585: ref;
  var $p4586: ref;
  var $p4587: ref;
  var $p4588: ref;
  var $p4589: ref;
  var $i4590: i64;
  var $p4592: ref;
  var $p4594: ref;
  var $p4595: ref;
  var $i4596: i64;
  var $i4597: i1;
  var $p4599: ref;
  var $i4600: i32;
  var $i4601: i1;
  var $p4602: ref;
  var $p4603: ref;
  var $p4604: ref;
  var $p4605: ref;
  var $p4606: ref;
  var $p4607: ref;
  var $i4608: i64;
  var $p4610: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5632, 1));
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} spin_lock_bh($p1);
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(0, 8));
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(0, 4));
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    call {:si_unique_call 562} {:cexpr "ref"} boogie_si_record_i32($i9);
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} $p11 := skb_end_pointer($p4);
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} $p15 := skb_frag_page($p14);
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} get_page($p15);
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} $p16 := lowmem_page_address($p15);
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 567} gnttab_end_foreign_access($i9, 0, $i17);
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(0, 4));
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, 0);
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} kfree_skb($p4);
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(1, 8));
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    $i25 := $eq.i64($i24, 0);
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(1, 4));
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 0);
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} $p30 := skb_end_pointer($p23);
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} $p34 := skb_frag_page($p33);
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} get_page($p34);
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} $p35 := lowmem_page_address($p34);
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} gnttab_end_foreign_access($i28, 0, $i36);
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(1, 4));
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p38, 0);
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} kfree_skb($p23);
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(2, 8));
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    $i43 := $eq.i64($i42, 0);
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(2, 4));
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i46, 0);
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} $p48 := skb_end_pointer($p41);
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p49, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} $p52 := skb_frag_page($p51);
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 578} get_page($p52);
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 579} $p53 := lowmem_page_address($p52);
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    $i54 := $p2i.ref.i64($p53);
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 580} gnttab_end_foreign_access($i46, 0, $i54);
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(2, 4));
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p56, 0);
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} kfree_skb($p41);
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(3, 8));
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    $i60 := $p2i.ref.i64($p59);
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    $i61 := $eq.i64($i60, 0);
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(3, 4));
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.0, $p63);
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i64, 0);
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 582} $p66 := skb_end_pointer($p59);
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p66);
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p67, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p68);
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} $p70 := skb_frag_page($p69);
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 584} get_page($p70);
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 585} $p71 := lowmem_page_address($p70);
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    $i72 := $p2i.ref.i64($p71);
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} gnttab_end_foreign_access($i64, 0, $i72);
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(3, 4));
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p74, 0);
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} kfree_skb($p59);
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(4, 8));
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $i78 := $p2i.ref.i64($p77);
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    $i79 := $eq.i64($i78, 0);
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    assume {:branchcond $i79} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(4, 4));
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.0, $p81);
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    $i83 := $eq.i32($i82, 0);
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 588} $p84 := skb_end_pointer($p77);
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    $p85 := $bitcast.ref.ref($p84);
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p85, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    $p87 := $bitcast.ref.ref($p86);
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} $p88 := skb_frag_page($p87);
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 590} get_page($p88);
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} $p89 := lowmem_page_address($p88);
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    $i90 := $p2i.ref.i64($p89);
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} gnttab_end_foreign_access($i82, 0, $i90);
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(4, 4));
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p92, 0);
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} kfree_skb($p77);
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(5, 8));
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    $p95 := $load.ref($M.0, $p94);
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $i96 := $p2i.ref.i64($p95);
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    $i97 := $eq.i64($i96, 0);
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(5, 4));
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    $i100 := $load.i32($M.0, $p99);
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    $i101 := $eq.i32($i100, 0);
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} $p102 := skb_end_pointer($p95);
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    $p103 := $bitcast.ref.ref($p102);
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p103, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    $p105 := $bitcast.ref.ref($p104);
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 595} $p106 := skb_frag_page($p105);
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 596} get_page($p106);
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} $p107 := lowmem_page_address($p106);
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    $i108 := $p2i.ref.i64($p107);
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} gnttab_end_foreign_access($i100, 0, $i108);
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(5, 4));
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p110, 0);
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} kfree_skb($p95);
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(6, 8));
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    $p113 := $load.ref($M.0, $p112);
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    $i114 := $p2i.ref.i64($p113);
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $i115 := $eq.i64($i114, 0);
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    assume {:branchcond $i115} true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(6, 4));
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    $i118 := $load.i32($M.0, $p117);
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $i119 := $eq.i32($i118, 0);
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    assume {:branchcond $i119} true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    call {:si_unique_call 600} $p120 := skb_end_pointer($p113);
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    $p121 := $bitcast.ref.ref($p120);
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p121, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    $p123 := $bitcast.ref.ref($p122);
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} $p124 := skb_frag_page($p123);
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} get_page($p124);
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} $p125 := lowmem_page_address($p124);
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    $i126 := $p2i.ref.i64($p125);
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 604} gnttab_end_foreign_access($i118, 0, $i126);
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(6, 4));
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p128, 0);
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 605} kfree_skb($p113);
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(7, 8));
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $p131 := $load.ref($M.0, $p130);
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    $i132 := $p2i.ref.i64($p131);
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    $i133 := $eq.i64($i132, 0);
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    assume {:branchcond $i133} true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(7, 4));
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $i136 := $load.i32($M.0, $p135);
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    $i137 := $eq.i32($i136, 0);
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    assume {:branchcond $i137} true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i137 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} $p138 := skb_end_pointer($p131);
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    $p139 := $bitcast.ref.ref($p138);
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p139, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    $p141 := $bitcast.ref.ref($p140);
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 607} $p142 := skb_frag_page($p141);
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} get_page($p142);
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} $p143 := lowmem_page_address($p142);
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    $i144 := $p2i.ref.i64($p143);
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} gnttab_end_foreign_access($i136, 0, $i144);
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(7, 4));
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p146, 0);
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 611} kfree_skb($p131);
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(8, 8));
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    $p149 := $load.ref($M.0, $p148);
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    $i150 := $p2i.ref.i64($p149);
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    $i151 := $eq.i64($i150, 0);
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    assume {:branchcond $i151} true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i151 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(8, 4));
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    $i154 := $load.i32($M.0, $p153);
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    $i155 := $eq.i32($i154, 0);
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} $p156 := skb_end_pointer($p149);
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    $p157 := $bitcast.ref.ref($p156);
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p157, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    $p159 := $bitcast.ref.ref($p158);
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} $p160 := skb_frag_page($p159);
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 614} get_page($p160);
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} $p161 := lowmem_page_address($p160);
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $i162 := $p2i.ref.i64($p161);
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} gnttab_end_foreign_access($i154, 0, $i162);
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(8, 4));
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p164, 0);
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} kfree_skb($p149);
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(9, 8));
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    $p167 := $load.ref($M.0, $p166);
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    $i168 := $p2i.ref.i64($p167);
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    $i169 := $eq.i64($i168, 0);
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    assume {:branchcond $i169} true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i169 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(9, 4));
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    $i172 := $load.i32($M.0, $p171);
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    $i173 := $eq.i32($i172, 0);
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    assume {:branchcond $i173} true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i173 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} $p174 := skb_end_pointer($p167);
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    $p175 := $bitcast.ref.ref($p174);
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p175, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    $p177 := $bitcast.ref.ref($p176);
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 619} $p178 := skb_frag_page($p177);
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} get_page($p178);
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} $p179 := lowmem_page_address($p178);
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    $i180 := $p2i.ref.i64($p179);
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} gnttab_end_foreign_access($i172, 0, $i180);
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(9, 4));
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p182, 0);
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 623} kfree_skb($p167);
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(10, 8));
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    $p185 := $load.ref($M.0, $p184);
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    $i186 := $p2i.ref.i64($p185);
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    $i187 := $eq.i64($i186, 0);
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    assume {:branchcond $i187} true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i187 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(10, 4));
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $i190 := $load.i32($M.0, $p189);
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $i191 := $eq.i32($i190, 0);
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    assume {:branchcond $i191} true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i191 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} $p192 := skb_end_pointer($p185);
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $p193 := $bitcast.ref.ref($p192);
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p193, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    $p195 := $bitcast.ref.ref($p194);
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} $p196 := skb_frag_page($p195);
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} get_page($p196);
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} $p197 := lowmem_page_address($p196);
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    $i198 := $p2i.ref.i64($p197);
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} gnttab_end_foreign_access($i190, 0, $i198);
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(10, 4));
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p200, 0);
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} kfree_skb($p185);
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(11, 8));
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    $p203 := $load.ref($M.0, $p202);
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    $i204 := $p2i.ref.i64($p203);
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    $i205 := $eq.i64($i204, 0);
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    assume {:branchcond $i205} true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i205 == 1);
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(11, 4));
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    $i208 := $load.i32($M.0, $p207);
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    $i209 := $eq.i32($i208, 0);
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    assume {:branchcond $i209} true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i209 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    call {:si_unique_call 630} $p210 := skb_end_pointer($p203);
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    $p211 := $bitcast.ref.ref($p210);
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($p211, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    $p213 := $bitcast.ref.ref($p212);
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} $p214 := skb_frag_page($p213);
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} get_page($p214);
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} $p215 := lowmem_page_address($p214);
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    $i216 := $p2i.ref.i64($p215);
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 634} gnttab_end_foreign_access($i208, 0, $i216);
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(11, 4));
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p218, 0);
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} kfree_skb($p203);
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(12, 8));
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    $p221 := $load.ref($M.0, $p220);
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    $i222 := $p2i.ref.i64($p221);
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    $i223 := $eq.i64($i222, 0);
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    assume {:branchcond $i223} true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i223 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(12, 4));
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    $i226 := $load.i32($M.0, $p225);
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $i227 := $eq.i32($i226, 0);
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i227 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} $p228 := skb_end_pointer($p221);
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    $p229 := $bitcast.ref.ref($p228);
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($p229, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $p231 := $bitcast.ref.ref($p230);
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} $p232 := skb_frag_page($p231);
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} get_page($p232);
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} $p233 := lowmem_page_address($p232);
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $i234 := $p2i.ref.i64($p233);
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} gnttab_end_foreign_access($i226, 0, $i234);
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(12, 4));
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p236, 0);
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} kfree_skb($p221);
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(13, 8));
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $p239 := $load.ref($M.0, $p238);
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $i240 := $p2i.ref.i64($p239);
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    $i241 := $eq.i64($i240, 0);
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i241 == 1);
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(13, 4));
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    $i244 := $load.i32($M.0, $p243);
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    $i245 := $eq.i32($i244, 0);
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  $bb112:
    assume !($i245 == 1);
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} $p246 := skb_end_pointer($p239);
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    $p247 := $bitcast.ref.ref($p246);
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($add.ref($p247, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $p249 := $bitcast.ref.ref($p248);
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} $p250 := skb_frag_page($p249);
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} get_page($p250);
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} $p251 := lowmem_page_address($p250);
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $i252 := $p2i.ref.i64($p251);
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} gnttab_end_foreign_access($i244, 0, $i252);
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    $p254 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(13, 4));
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p254, 0);
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} kfree_skb($p239);
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    $p256 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(14, 8));
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    $p257 := $load.ref($M.0, $p256);
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    $i258 := $p2i.ref.i64($p257);
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    $i259 := $eq.i64($i258, 0);
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    assume {:branchcond $i259} true;
    goto $bb116, $bb117;

  $bb117:
    assume !($i259 == 1);
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(14, 4));
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $i262 := $load.i32($M.0, $p261);
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    $i263 := $eq.i32($i262, 0);
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    assume {:branchcond $i263} true;
    goto $bb119, $bb120;

  $bb120:
    assume !($i263 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} $p264 := skb_end_pointer($p257);
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    $p265 := $bitcast.ref.ref($p264);
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    $p266 := $add.ref($add.ref($p265, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    $p267 := $bitcast.ref.ref($p266);
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 649} $p268 := skb_frag_page($p267);
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} get_page($p268);
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} $p269 := lowmem_page_address($p268);
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    $i270 := $p2i.ref.i64($p269);
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} gnttab_end_foreign_access($i262, 0, $i270);
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    $p272 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(14, 4));
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p272, 0);
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 653} kfree_skb($p257);
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    $p274 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(15, 8));
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $p275 := $load.ref($M.0, $p274);
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    $i276 := $p2i.ref.i64($p275);
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    $i277 := $eq.i64($i276, 0);
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  $bb125:
    assume !($i277 == 1);
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    $p279 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(15, 4));
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    $i280 := $load.i32($M.0, $p279);
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    $i281 := $eq.i32($i280, 0);
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb127, $bb128;

  $bb128:
    assume !($i281 == 1);
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 654} $p282 := skb_end_pointer($p275);
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    $p283 := $bitcast.ref.ref($p282);
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    $p284 := $add.ref($add.ref($p283, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    $p285 := $bitcast.ref.ref($p284);
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} $p286 := skb_frag_page($p285);
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} get_page($p286);
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} $p287 := lowmem_page_address($p286);
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $i288 := $p2i.ref.i64($p287);
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} gnttab_end_foreign_access($i280, 0, $i288);
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    $p290 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(15, 4));
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p290, 0);
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} kfree_skb($p275);
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    $p292 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(16, 8));
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    $p293 := $load.ref($M.0, $p292);
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    $i294 := $p2i.ref.i64($p293);
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    $i295 := $eq.i64($i294, 0);
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    assume {:branchcond $i295} true;
    goto $bb132, $bb133;

  $bb133:
    assume !($i295 == 1);
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    $p297 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(16, 4));
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    $i298 := $load.i32($M.0, $p297);
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    $i299 := $eq.i32($i298, 0);
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    assume {:branchcond $i299} true;
    goto $bb135, $bb136;

  $bb136:
    assume !($i299 == 1);
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} $p300 := skb_end_pointer($p293);
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    $p301 := $bitcast.ref.ref($p300);
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    $p302 := $add.ref($add.ref($p301, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    $p303 := $bitcast.ref.ref($p302);
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} $p304 := skb_frag_page($p303);
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} get_page($p304);
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 663} $p305 := lowmem_page_address($p304);
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    $i306 := $p2i.ref.i64($p305);
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} gnttab_end_foreign_access($i298, 0, $i306);
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    $p308 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(16, 4));
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p308, 0);
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} kfree_skb($p293);
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    $p310 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(17, 8));
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    $p311 := $load.ref($M.0, $p310);
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    $i312 := $p2i.ref.i64($p311);
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    $i313 := $eq.i64($i312, 0);
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb140, $bb141;

  $bb141:
    assume !($i313 == 1);
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    $p315 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(17, 4));
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $i316 := $load.i32($M.0, $p315);
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    $i317 := $eq.i32($i316, 0);
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    assume {:branchcond $i317} true;
    goto $bb143, $bb144;

  $bb144:
    assume !($i317 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} $p318 := skb_end_pointer($p311);
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    $p319 := $bitcast.ref.ref($p318);
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    $p320 := $add.ref($add.ref($p319, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    $p321 := $bitcast.ref.ref($p320);
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} $p322 := skb_frag_page($p321);
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 668} get_page($p322);
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 669} $p323 := lowmem_page_address($p322);
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    $i324 := $p2i.ref.i64($p323);
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} gnttab_end_foreign_access($i316, 0, $i324);
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    $p326 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(17, 4));
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p326, 0);
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} kfree_skb($p311);
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    $p328 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(18, 8));
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    $p329 := $load.ref($M.0, $p328);
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    $i330 := $p2i.ref.i64($p329);
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    $i331 := $eq.i64($i330, 0);
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    assume {:branchcond $i331} true;
    goto $bb148, $bb149;

  $bb149:
    assume !($i331 == 1);
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    $p333 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(18, 4));
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    $i334 := $load.i32($M.0, $p333);
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    $i335 := $eq.i32($i334, 0);
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    assume {:branchcond $i335} true;
    goto $bb151, $bb152;

  $bb152:
    assume !($i335 == 1);
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} $p336 := skb_end_pointer($p329);
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    $p337 := $bitcast.ref.ref($p336);
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    $p338 := $add.ref($add.ref($p337, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    $p339 := $bitcast.ref.ref($p338);
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 673} $p340 := skb_frag_page($p339);
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} get_page($p340);
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} $p341 := lowmem_page_address($p340);
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    $i342 := $p2i.ref.i64($p341);
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 676} gnttab_end_foreign_access($i334, 0, $i342);
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    $p344 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(18, 4));
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p344, 0);
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} kfree_skb($p329);
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    $p346 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(19, 8));
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    $p347 := $load.ref($M.0, $p346);
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    $i348 := $p2i.ref.i64($p347);
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    $i349 := $eq.i64($i348, 0);
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    assume {:branchcond $i349} true;
    goto $bb156, $bb157;

  $bb157:
    assume !($i349 == 1);
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    $p351 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(19, 4));
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    $i352 := $load.i32($M.0, $p351);
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    $i353 := $eq.i32($i352, 0);
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    assume {:branchcond $i353} true;
    goto $bb159, $bb160;

  $bb160:
    assume !($i353 == 1);
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 678} $p354 := skb_end_pointer($p347);
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    $p355 := $bitcast.ref.ref($p354);
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    $p356 := $add.ref($add.ref($p355, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    $p357 := $bitcast.ref.ref($p356);
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} $p358 := skb_frag_page($p357);
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 680} get_page($p358);
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} $p359 := lowmem_page_address($p358);
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $i360 := $p2i.ref.i64($p359);
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 682} gnttab_end_foreign_access($i352, 0, $i360);
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    $p362 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(19, 4));
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p362, 0);
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} kfree_skb($p347);
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    $p364 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(20, 8));
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    $p365 := $load.ref($M.0, $p364);
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    $i366 := $p2i.ref.i64($p365);
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    $i367 := $eq.i64($i366, 0);
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    assume {:branchcond $i367} true;
    goto $bb164, $bb165;

  $bb165:
    assume !($i367 == 1);
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    $p369 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(20, 4));
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $i370 := $load.i32($M.0, $p369);
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    $i371 := $eq.i32($i370, 0);
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    assume {:branchcond $i371} true;
    goto $bb167, $bb168;

  $bb168:
    assume !($i371 == 1);
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} $p372 := skb_end_pointer($p365);
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    $p373 := $bitcast.ref.ref($p372);
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    $p374 := $add.ref($add.ref($p373, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    $p375 := $bitcast.ref.ref($p374);
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 685} $p376 := skb_frag_page($p375);
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} get_page($p376);
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} $p377 := lowmem_page_address($p376);
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $i378 := $p2i.ref.i64($p377);
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} gnttab_end_foreign_access($i370, 0, $i378);
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    $p380 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(20, 4));
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p380, 0);
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} kfree_skb($p365);
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    $p382 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(21, 8));
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $p383 := $load.ref($M.0, $p382);
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    $i384 := $p2i.ref.i64($p383);
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    $i385 := $eq.i64($i384, 0);
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    assume {:branchcond $i385} true;
    goto $bb172, $bb173;

  $bb173:
    assume !($i385 == 1);
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    $p387 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(21, 4));
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    $i388 := $load.i32($M.0, $p387);
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    $i389 := $eq.i32($i388, 0);
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    assume {:branchcond $i389} true;
    goto $bb175, $bb176;

  $bb176:
    assume !($i389 == 1);
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 690} $p390 := skb_end_pointer($p383);
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    $p391 := $bitcast.ref.ref($p390);
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    $p392 := $add.ref($add.ref($p391, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    $p393 := $bitcast.ref.ref($p392);
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} $p394 := skb_frag_page($p393);
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 692} get_page($p394);
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} $p395 := lowmem_page_address($p394);
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    $i396 := $p2i.ref.i64($p395);
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} gnttab_end_foreign_access($i388, 0, $i396);
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    $p398 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(21, 4));
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p398, 0);
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} kfree_skb($p383);
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    $p400 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(22, 8));
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    $p401 := $load.ref($M.0, $p400);
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    $i402 := $p2i.ref.i64($p401);
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    $i403 := $eq.i64($i402, 0);
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    assume {:branchcond $i403} true;
    goto $bb180, $bb181;

  $bb181:
    assume !($i403 == 1);
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    $p405 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(22, 4));
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    $i406 := $load.i32($M.0, $p405);
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    $i407 := $eq.i32($i406, 0);
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    assume {:branchcond $i407} true;
    goto $bb183, $bb184;

  $bb184:
    assume !($i407 == 1);
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} $p408 := skb_end_pointer($p401);
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    $p409 := $bitcast.ref.ref($p408);
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    $p410 := $add.ref($add.ref($p409, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    $p411 := $bitcast.ref.ref($p410);
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} $p412 := skb_frag_page($p411);
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} get_page($p412);
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} $p413 := lowmem_page_address($p412);
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    $i414 := $p2i.ref.i64($p413);
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 700} gnttab_end_foreign_access($i406, 0, $i414);
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    $p416 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(22, 4));
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p416, 0);
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} kfree_skb($p401);
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    $p418 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(23, 8));
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    $p419 := $load.ref($M.0, $p418);
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    $i420 := $p2i.ref.i64($p419);
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    $i421 := $eq.i64($i420, 0);
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    assume {:branchcond $i421} true;
    goto $bb188, $bb189;

  $bb189:
    assume !($i421 == 1);
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    $p423 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(23, 4));
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    $i424 := $load.i32($M.0, $p423);
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    $i425 := $eq.i32($i424, 0);
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    assume {:branchcond $i425} true;
    goto $bb191, $bb192;

  $bb192:
    assume !($i425 == 1);
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 702} $p426 := skb_end_pointer($p419);
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    $p427 := $bitcast.ref.ref($p426);
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    $p428 := $add.ref($add.ref($p427, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    $p429 := $bitcast.ref.ref($p428);
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} $p430 := skb_frag_page($p429);
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 704} get_page($p430);
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} $p431 := lowmem_page_address($p430);
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    $i432 := $p2i.ref.i64($p431);
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 706} gnttab_end_foreign_access($i424, 0, $i432);
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    $p434 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(23, 4));
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p434, 0);
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} kfree_skb($p419);
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    $p436 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(24, 8));
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    $p437 := $load.ref($M.0, $p436);
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    $i438 := $p2i.ref.i64($p437);
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    $i439 := $eq.i64($i438, 0);
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    assume {:branchcond $i439} true;
    goto $bb196, $bb197;

  $bb197:
    assume !($i439 == 1);
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    $p441 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(24, 4));
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    $i442 := $load.i32($M.0, $p441);
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    $i443 := $eq.i32($i442, 0);
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    assume {:branchcond $i443} true;
    goto $bb199, $bb200;

  $bb200:
    assume !($i443 == 1);
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 708} $p444 := skb_end_pointer($p437);
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    $p445 := $bitcast.ref.ref($p444);
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    $p446 := $add.ref($add.ref($p445, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    $p447 := $bitcast.ref.ref($p446);
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} $p448 := skb_frag_page($p447);
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 710} get_page($p448);
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 711} $p449 := lowmem_page_address($p448);
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    $i450 := $p2i.ref.i64($p449);
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 712} gnttab_end_foreign_access($i442, 0, $i450);
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $p452 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(24, 4));
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p452, 0);
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 713} kfree_skb($p437);
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    $p454 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(25, 8));
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $p455 := $load.ref($M.0, $p454);
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    $i456 := $p2i.ref.i64($p455);
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    $i457 := $eq.i64($i456, 0);
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    assume {:branchcond $i457} true;
    goto $bb204, $bb205;

  $bb205:
    assume !($i457 == 1);
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    $p459 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(25, 4));
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    $i460 := $load.i32($M.0, $p459);
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    $i461 := $eq.i32($i460, 0);
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    assume {:branchcond $i461} true;
    goto $bb207, $bb208;

  $bb208:
    assume !($i461 == 1);
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 714} $p462 := skb_end_pointer($p455);
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    $p463 := $bitcast.ref.ref($p462);
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    $p464 := $add.ref($add.ref($p463, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    $p465 := $bitcast.ref.ref($p464);
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} $p466 := skb_frag_page($p465);
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 716} get_page($p466);
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 717} $p467 := lowmem_page_address($p466);
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    $i468 := $p2i.ref.i64($p467);
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} gnttab_end_foreign_access($i460, 0, $i468);
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    $p470 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(25, 4));
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p470, 0);
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 719} kfree_skb($p455);
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb211:
    assume {:verifier.code 0} true;
    $p472 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(26, 8));
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    $p473 := $load.ref($M.0, $p472);
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    $i474 := $p2i.ref.i64($p473);
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $i475 := $eq.i64($i474, 0);
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    assume {:branchcond $i475} true;
    goto $bb212, $bb213;

  $bb213:
    assume !($i475 == 1);
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb214:
    assume {:verifier.code 0} true;
    $p477 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(26, 4));
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    $i478 := $load.i32($M.0, $p477);
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    $i479 := $eq.i32($i478, 0);
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    assume {:branchcond $i479} true;
    goto $bb215, $bb216;

  $bb216:
    assume !($i479 == 1);
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 720} $p480 := skb_end_pointer($p473);
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    $p481 := $bitcast.ref.ref($p480);
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    $p482 := $add.ref($add.ref($p481, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    $p483 := $bitcast.ref.ref($p482);
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} $p484 := skb_frag_page($p483);
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 722} get_page($p484);
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 723} $p485 := lowmem_page_address($p484);
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    $i486 := $p2i.ref.i64($p485);
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 724} gnttab_end_foreign_access($i478, 0, $i486);
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    $p488 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(26, 4));
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p488, 0);
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} kfree_skb($p473);
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb218:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    $p490 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(27, 8));
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    $p491 := $load.ref($M.0, $p490);
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $i492 := $p2i.ref.i64($p491);
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    $i493 := $eq.i64($i492, 0);
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    assume {:branchcond $i493} true;
    goto $bb220, $bb221;

  $bb221:
    assume !($i493 == 1);
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    $p495 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(27, 4));
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    $i496 := $load.i32($M.0, $p495);
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    $i497 := $eq.i32($i496, 0);
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    assume {:branchcond $i497} true;
    goto $bb223, $bb224;

  $bb224:
    assume !($i497 == 1);
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} $p498 := skb_end_pointer($p491);
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    $p499 := $bitcast.ref.ref($p498);
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    $p500 := $add.ref($add.ref($p499, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    $p501 := $bitcast.ref.ref($p500);
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} $p502 := skb_frag_page($p501);
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 728} get_page($p502);
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} $p503 := lowmem_page_address($p502);
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    $i504 := $p2i.ref.i64($p503);
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} gnttab_end_foreign_access($i496, 0, $i504);
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $p506 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(27, 4));
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p506, 0);
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} kfree_skb($p491);
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb226:
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb227:
    assume {:verifier.code 0} true;
    $p508 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(28, 8));
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    $p509 := $load.ref($M.0, $p508);
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    $i510 := $p2i.ref.i64($p509);
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    $i511 := $eq.i64($i510, 0);
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    assume {:branchcond $i511} true;
    goto $bb228, $bb229;

  $bb229:
    assume !($i511 == 1);
    assume {:verifier.code 0} true;
    goto $bb230;

  $bb230:
    assume {:verifier.code 0} true;
    $p513 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(28, 4));
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    $i514 := $load.i32($M.0, $p513);
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    $i515 := $eq.i32($i514, 0);
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    assume {:branchcond $i515} true;
    goto $bb231, $bb232;

  $bb232:
    assume !($i515 == 1);
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} $p516 := skb_end_pointer($p509);
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    $p517 := $bitcast.ref.ref($p516);
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    $p518 := $add.ref($add.ref($p517, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    $p519 := $bitcast.ref.ref($p518);
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 733} $p520 := skb_frag_page($p519);
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 734} get_page($p520);
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 735} $p521 := lowmem_page_address($p520);
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    $i522 := $p2i.ref.i64($p521);
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} gnttab_end_foreign_access($i514, 0, $i522);
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    $p524 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(28, 4));
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p524, 0);
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} kfree_skb($p509);
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb234:
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb235:
    assume {:verifier.code 0} true;
    $p526 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(29, 8));
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    $p527 := $load.ref($M.0, $p526);
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    $i528 := $p2i.ref.i64($p527);
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    $i529 := $eq.i64($i528, 0);
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    assume {:branchcond $i529} true;
    goto $bb236, $bb237;

  $bb237:
    assume !($i529 == 1);
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb238:
    assume {:verifier.code 0} true;
    $p531 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(29, 4));
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    $i532 := $load.i32($M.0, $p531);
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    $i533 := $eq.i32($i532, 0);
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    assume {:branchcond $i533} true;
    goto $bb239, $bb240;

  $bb240:
    assume !($i533 == 1);
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 738} $p534 := skb_end_pointer($p527);
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    $p535 := $bitcast.ref.ref($p534);
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    $p536 := $add.ref($add.ref($p535, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    $p537 := $bitcast.ref.ref($p536);
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} $p538 := skb_frag_page($p537);
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 740} get_page($p538);
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} $p539 := lowmem_page_address($p538);
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $i540 := $p2i.ref.i64($p539);
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} gnttab_end_foreign_access($i532, 0, $i540);
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    $p542 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(29, 4));
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p542, 0);
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 743} kfree_skb($p527);
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb242:
    assume {:verifier.code 0} true;
    goto $bb243;

  $bb243:
    assume {:verifier.code 0} true;
    $p544 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(30, 8));
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    $p545 := $load.ref($M.0, $p544);
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    $i546 := $p2i.ref.i64($p545);
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    $i547 := $eq.i64($i546, 0);
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    assume {:branchcond $i547} true;
    goto $bb244, $bb245;

  $bb245:
    assume !($i547 == 1);
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb246:
    assume {:verifier.code 0} true;
    $p549 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(30, 4));
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    $i550 := $load.i32($M.0, $p549);
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    $i551 := $eq.i32($i550, 0);
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    assume {:branchcond $i551} true;
    goto $bb247, $bb248;

  $bb248:
    assume !($i551 == 1);
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} $p552 := skb_end_pointer($p545);
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    $p553 := $bitcast.ref.ref($p552);
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    $p554 := $add.ref($add.ref($p553, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    $p555 := $bitcast.ref.ref($p554);
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} $p556 := skb_frag_page($p555);
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} get_page($p556);
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 747} $p557 := lowmem_page_address($p556);
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    $i558 := $p2i.ref.i64($p557);
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} gnttab_end_foreign_access($i550, 0, $i558);
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    $p560 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(30, 4));
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p560, 0);
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} kfree_skb($p545);
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb250:
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb251:
    assume {:verifier.code 0} true;
    $p562 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(31, 8));
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    $p563 := $load.ref($M.0, $p562);
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $i564 := $p2i.ref.i64($p563);
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    $i565 := $eq.i64($i564, 0);
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    assume {:branchcond $i565} true;
    goto $bb252, $bb253;

  $bb253:
    assume !($i565 == 1);
    assume {:verifier.code 0} true;
    goto $bb254;

  $bb254:
    assume {:verifier.code 0} true;
    $p567 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(31, 4));
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $i568 := $load.i32($M.0, $p567);
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $i569 := $eq.i32($i568, 0);
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    assume {:branchcond $i569} true;
    goto $bb255, $bb256;

  $bb256:
    assume !($i569 == 1);
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 750} $p570 := skb_end_pointer($p563);
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    $p571 := $bitcast.ref.ref($p570);
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    $p572 := $add.ref($add.ref($p571, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    $p573 := $bitcast.ref.ref($p572);
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 751} $p574 := skb_frag_page($p573);
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} get_page($p574);
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} $p575 := lowmem_page_address($p574);
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    $i576 := $p2i.ref.i64($p575);
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} gnttab_end_foreign_access($i568, 0, $i576);
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    $p578 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(31, 4));
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p578, 0);
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 755} kfree_skb($p563);
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb258:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb259:
    assume {:verifier.code 0} true;
    $p580 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(32, 8));
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    $p581 := $load.ref($M.0, $p580);
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    $i582 := $p2i.ref.i64($p581);
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    $i583 := $eq.i64($i582, 0);
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    assume {:branchcond $i583} true;
    goto $bb260, $bb261;

  $bb261:
    assume !($i583 == 1);
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb262:
    assume {:verifier.code 0} true;
    $p585 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(32, 4));
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    $i586 := $load.i32($M.0, $p585);
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    $i587 := $eq.i32($i586, 0);
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    assume {:branchcond $i587} true;
    goto $bb263, $bb264;

  $bb264:
    assume !($i587 == 1);
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} $p588 := skb_end_pointer($p581);
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    $p589 := $bitcast.ref.ref($p588);
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    $p590 := $add.ref($add.ref($p589, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    $p591 := $bitcast.ref.ref($p590);
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} $p592 := skb_frag_page($p591);
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} get_page($p592);
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 759} $p593 := lowmem_page_address($p592);
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    $i594 := $p2i.ref.i64($p593);
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} gnttab_end_foreign_access($i586, 0, $i594);
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    $p596 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(32, 4));
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p596, 0);
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 761} kfree_skb($p581);
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb266:
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb267:
    assume {:verifier.code 0} true;
    $p598 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(33, 8));
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    $p599 := $load.ref($M.0, $p598);
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    $i600 := $p2i.ref.i64($p599);
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    $i601 := $eq.i64($i600, 0);
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    assume {:branchcond $i601} true;
    goto $bb268, $bb269;

  $bb269:
    assume !($i601 == 1);
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb270:
    assume {:verifier.code 0} true;
    $p603 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(33, 4));
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    $i604 := $load.i32($M.0, $p603);
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    $i605 := $eq.i32($i604, 0);
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    assume {:branchcond $i605} true;
    goto $bb271, $bb272;

  $bb272:
    assume !($i605 == 1);
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} $p606 := skb_end_pointer($p599);
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $p607 := $bitcast.ref.ref($p606);
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    $p608 := $add.ref($add.ref($p607, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    $p609 := $bitcast.ref.ref($p608);
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} $p610 := skb_frag_page($p609);
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} get_page($p610);
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} $p611 := lowmem_page_address($p610);
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    $i612 := $p2i.ref.i64($p611);
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} gnttab_end_foreign_access($i604, 0, $i612);
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    $p614 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(33, 4));
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p614, 0);
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 767} kfree_skb($p599);
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb274:
    assume {:verifier.code 0} true;
    goto $bb275;

  $bb275:
    assume {:verifier.code 0} true;
    $p616 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(34, 8));
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    $p617 := $load.ref($M.0, $p616);
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    $i618 := $p2i.ref.i64($p617);
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    $i619 := $eq.i64($i618, 0);
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    assume {:branchcond $i619} true;
    goto $bb276, $bb277;

  $bb277:
    assume !($i619 == 1);
    assume {:verifier.code 0} true;
    goto $bb278;

  $bb278:
    assume {:verifier.code 0} true;
    $p621 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(34, 4));
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    $i622 := $load.i32($M.0, $p621);
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    $i623 := $eq.i32($i622, 0);
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    assume {:branchcond $i623} true;
    goto $bb279, $bb280;

  $bb280:
    assume !($i623 == 1);
    assume {:verifier.code 0} true;
    goto $bb281;

  $bb281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} $p624 := skb_end_pointer($p617);
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    $p625 := $bitcast.ref.ref($p624);
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    $p626 := $add.ref($add.ref($p625, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    $p627 := $bitcast.ref.ref($p626);
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} $p628 := skb_frag_page($p627);
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} get_page($p628);
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} $p629 := lowmem_page_address($p628);
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    $i630 := $p2i.ref.i64($p629);
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} gnttab_end_foreign_access($i622, 0, $i630);
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    $p632 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(34, 4));
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p632, 0);
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} kfree_skb($p617);
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    goto $bb282;

  $bb282:
    assume {:verifier.code 0} true;
    goto $bb283;

  $bb283:
    assume {:verifier.code 0} true;
    $p634 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(35, 8));
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    $p635 := $load.ref($M.0, $p634);
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $i636 := $p2i.ref.i64($p635);
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    $i637 := $eq.i64($i636, 0);
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    assume {:branchcond $i637} true;
    goto $bb284, $bb285;

  $bb285:
    assume !($i637 == 1);
    assume {:verifier.code 0} true;
    goto $bb286;

  $bb286:
    assume {:verifier.code 0} true;
    $p639 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(35, 4));
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    $i640 := $load.i32($M.0, $p639);
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    $i641 := $eq.i32($i640, 0);
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    assume {:branchcond $i641} true;
    goto $bb287, $bb288;

  $bb288:
    assume !($i641 == 1);
    assume {:verifier.code 0} true;
    goto $bb289;

  $bb289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} $p642 := skb_end_pointer($p635);
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    $p643 := $bitcast.ref.ref($p642);
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    $p644 := $add.ref($add.ref($p643, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    $p645 := $bitcast.ref.ref($p644);
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 775} $p646 := skb_frag_page($p645);
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 776} get_page($p646);
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} $p647 := lowmem_page_address($p646);
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    $i648 := $p2i.ref.i64($p647);
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 778} gnttab_end_foreign_access($i640, 0, $i648);
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    $p650 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(35, 4));
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p650, 0);
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} kfree_skb($p635);
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    goto $bb290;

  $bb290:
    assume {:verifier.code 0} true;
    goto $bb291;

  $bb291:
    assume {:verifier.code 0} true;
    $p652 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(36, 8));
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    $p653 := $load.ref($M.0, $p652);
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    $i654 := $p2i.ref.i64($p653);
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    $i655 := $eq.i64($i654, 0);
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    assume {:branchcond $i655} true;
    goto $bb292, $bb293;

  $bb293:
    assume !($i655 == 1);
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb294:
    assume {:verifier.code 0} true;
    $p657 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(36, 4));
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    $i658 := $load.i32($M.0, $p657);
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    $i659 := $eq.i32($i658, 0);
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    assume {:branchcond $i659} true;
    goto $bb295, $bb296;

  $bb296:
    assume !($i659 == 1);
    assume {:verifier.code 0} true;
    goto $bb297;

  $bb297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} $p660 := skb_end_pointer($p653);
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    $p661 := $bitcast.ref.ref($p660);
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    $p662 := $add.ref($add.ref($p661, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    $p663 := $bitcast.ref.ref($p662);
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} $p664 := skb_frag_page($p663);
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} get_page($p664);
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} $p665 := lowmem_page_address($p664);
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    $i666 := $p2i.ref.i64($p665);
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} gnttab_end_foreign_access($i658, 0, $i666);
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    $p668 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(36, 4));
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p668, 0);
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} kfree_skb($p653);
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    goto $bb298;

  $bb298:
    assume {:verifier.code 0} true;
    goto $bb299;

  $bb299:
    assume {:verifier.code 0} true;
    $p670 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(37, 8));
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $p671 := $load.ref($M.0, $p670);
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    $i672 := $p2i.ref.i64($p671);
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    $i673 := $eq.i64($i672, 0);
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    assume {:branchcond $i673} true;
    goto $bb300, $bb301;

  $bb301:
    assume !($i673 == 1);
    assume {:verifier.code 0} true;
    goto $bb302;

  $bb302:
    assume {:verifier.code 0} true;
    $p675 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(37, 4));
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    $i676 := $load.i32($M.0, $p675);
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    $i677 := $eq.i32($i676, 0);
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    assume {:branchcond $i677} true;
    goto $bb303, $bb304;

  $bb304:
    assume !($i677 == 1);
    assume {:verifier.code 0} true;
    goto $bb305;

  $bb305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} $p678 := skb_end_pointer($p671);
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    $p679 := $bitcast.ref.ref($p678);
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    $p680 := $add.ref($add.ref($p679, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    $p681 := $bitcast.ref.ref($p680);
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} $p682 := skb_frag_page($p681);
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} get_page($p682);
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 789} $p683 := lowmem_page_address($p682);
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    $i684 := $p2i.ref.i64($p683);
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 790} gnttab_end_foreign_access($i676, 0, $i684);
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $p686 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(37, 4));
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p686, 0);
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} kfree_skb($p671);
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    goto $bb306;

  $bb306:
    assume {:verifier.code 0} true;
    goto $bb307;

  $bb307:
    assume {:verifier.code 0} true;
    $p688 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(38, 8));
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    $p689 := $load.ref($M.0, $p688);
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    $i690 := $p2i.ref.i64($p689);
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    $i691 := $eq.i64($i690, 0);
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    assume {:branchcond $i691} true;
    goto $bb308, $bb309;

  $bb309:
    assume !($i691 == 1);
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb310:
    assume {:verifier.code 0} true;
    $p693 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(38, 4));
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    $i694 := $load.i32($M.0, $p693);
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    $i695 := $eq.i32($i694, 0);
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    assume {:branchcond $i695} true;
    goto $bb311, $bb312;

  $bb312:
    assume !($i695 == 1);
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} $p696 := skb_end_pointer($p689);
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    $p697 := $bitcast.ref.ref($p696);
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    $p698 := $add.ref($add.ref($p697, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    $p699 := $bitcast.ref.ref($p698);
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} $p700 := skb_frag_page($p699);
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 794} get_page($p700);
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} $p701 := lowmem_page_address($p700);
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    $i702 := $p2i.ref.i64($p701);
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} gnttab_end_foreign_access($i694, 0, $i702);
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    $p704 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(38, 4));
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p704, 0);
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 797} kfree_skb($p689);
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    goto $bb314;

  $bb314:
    assume {:verifier.code 0} true;
    goto $bb315;

  $bb315:
    assume {:verifier.code 0} true;
    $p706 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(39, 8));
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    $p707 := $load.ref($M.0, $p706);
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    $i708 := $p2i.ref.i64($p707);
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    $i709 := $eq.i64($i708, 0);
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    assume {:branchcond $i709} true;
    goto $bb316, $bb317;

  $bb317:
    assume !($i709 == 1);
    assume {:verifier.code 0} true;
    goto $bb318;

  $bb318:
    assume {:verifier.code 0} true;
    $p711 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(39, 4));
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    $i712 := $load.i32($M.0, $p711);
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    $i713 := $eq.i32($i712, 0);
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    assume {:branchcond $i713} true;
    goto $bb319, $bb320;

  $bb320:
    assume !($i713 == 1);
    assume {:verifier.code 0} true;
    goto $bb321;

  $bb321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} $p714 := skb_end_pointer($p707);
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    $p715 := $bitcast.ref.ref($p714);
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    $p716 := $add.ref($add.ref($p715, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    $p717 := $bitcast.ref.ref($p716);
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 799} $p718 := skb_frag_page($p717);
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} get_page($p718);
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} $p719 := lowmem_page_address($p718);
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    $i720 := $p2i.ref.i64($p719);
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} gnttab_end_foreign_access($i712, 0, $i720);
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    $p722 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(39, 4));
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p722, 0);
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 803} kfree_skb($p707);
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    goto $bb322;

  $bb322:
    assume {:verifier.code 0} true;
    goto $bb323;

  $bb323:
    assume {:verifier.code 0} true;
    $p724 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(40, 8));
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    $p725 := $load.ref($M.0, $p724);
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    $i726 := $p2i.ref.i64($p725);
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    $i727 := $eq.i64($i726, 0);
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    assume {:branchcond $i727} true;
    goto $bb324, $bb325;

  $bb325:
    assume !($i727 == 1);
    assume {:verifier.code 0} true;
    goto $bb326;

  $bb326:
    assume {:verifier.code 0} true;
    $p729 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(40, 4));
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    $i730 := $load.i32($M.0, $p729);
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    $i731 := $eq.i32($i730, 0);
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    assume {:branchcond $i731} true;
    goto $bb327, $bb328;

  $bb328:
    assume !($i731 == 1);
    assume {:verifier.code 0} true;
    goto $bb329;

  $bb329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} $p732 := skb_end_pointer($p725);
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    $p733 := $bitcast.ref.ref($p732);
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    $p734 := $add.ref($add.ref($p733, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    $p735 := $bitcast.ref.ref($p734);
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 805} $p736 := skb_frag_page($p735);
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} get_page($p736);
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 807} $p737 := lowmem_page_address($p736);
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    $i738 := $p2i.ref.i64($p737);
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} gnttab_end_foreign_access($i730, 0, $i738);
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    $p740 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(40, 4));
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p740, 0);
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 809} kfree_skb($p725);
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    goto $bb330;

  $bb330:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb331:
    assume {:verifier.code 0} true;
    $p742 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(41, 8));
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    $p743 := $load.ref($M.0, $p742);
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    $i744 := $p2i.ref.i64($p743);
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    $i745 := $eq.i64($i744, 0);
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    assume {:branchcond $i745} true;
    goto $bb332, $bb333;

  $bb333:
    assume !($i745 == 1);
    assume {:verifier.code 0} true;
    goto $bb334;

  $bb334:
    assume {:verifier.code 0} true;
    $p747 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(41, 4));
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    $i748 := $load.i32($M.0, $p747);
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $i749 := $eq.i32($i748, 0);
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    assume {:branchcond $i749} true;
    goto $bb335, $bb336;

  $bb336:
    assume !($i749 == 1);
    assume {:verifier.code 0} true;
    goto $bb337;

  $bb337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} $p750 := skb_end_pointer($p743);
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    $p751 := $bitcast.ref.ref($p750);
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    $p752 := $add.ref($add.ref($p751, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    $p753 := $bitcast.ref.ref($p752);
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 811} $p754 := skb_frag_page($p753);
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} get_page($p754);
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 813} $p755 := lowmem_page_address($p754);
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    $i756 := $p2i.ref.i64($p755);
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} gnttab_end_foreign_access($i748, 0, $i756);
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    $p758 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(41, 4));
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p758, 0);
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 815} kfree_skb($p743);
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    goto $bb338;

  $bb338:
    assume {:verifier.code 0} true;
    goto $bb339;

  $bb339:
    assume {:verifier.code 0} true;
    $p760 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(42, 8));
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    $p761 := $load.ref($M.0, $p760);
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    $i762 := $p2i.ref.i64($p761);
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    $i763 := $eq.i64($i762, 0);
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    assume {:branchcond $i763} true;
    goto $bb340, $bb341;

  $bb341:
    assume !($i763 == 1);
    assume {:verifier.code 0} true;
    goto $bb342;

  $bb342:
    assume {:verifier.code 0} true;
    $p765 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(42, 4));
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    $i766 := $load.i32($M.0, $p765);
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    $i767 := $eq.i32($i766, 0);
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    assume {:branchcond $i767} true;
    goto $bb343, $bb344;

  $bb344:
    assume !($i767 == 1);
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 816} $p768 := skb_end_pointer($p761);
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    $p769 := $bitcast.ref.ref($p768);
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    $p770 := $add.ref($add.ref($p769, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    $p771 := $bitcast.ref.ref($p770);
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 817} $p772 := skb_frag_page($p771);
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 818} get_page($p772);
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 819} $p773 := lowmem_page_address($p772);
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    $i774 := $p2i.ref.i64($p773);
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 820} gnttab_end_foreign_access($i766, 0, $i774);
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    $p776 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(42, 4));
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p776, 0);
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 821} kfree_skb($p761);
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb346:
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb347:
    assume {:verifier.code 0} true;
    $p778 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(43, 8));
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    $p779 := $load.ref($M.0, $p778);
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    $i780 := $p2i.ref.i64($p779);
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    $i781 := $eq.i64($i780, 0);
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    assume {:branchcond $i781} true;
    goto $bb348, $bb349;

  $bb349:
    assume !($i781 == 1);
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb350:
    assume {:verifier.code 0} true;
    $p783 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(43, 4));
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    $i784 := $load.i32($M.0, $p783);
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    $i785 := $eq.i32($i784, 0);
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    assume {:branchcond $i785} true;
    goto $bb351, $bb352;

  $bb352:
    assume !($i785 == 1);
    assume {:verifier.code 0} true;
    goto $bb353;

  $bb353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 822} $p786 := skb_end_pointer($p779);
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    $p787 := $bitcast.ref.ref($p786);
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    $p788 := $add.ref($add.ref($p787, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    $p789 := $bitcast.ref.ref($p788);
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 823} $p790 := skb_frag_page($p789);
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 824} get_page($p790);
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} $p791 := lowmem_page_address($p790);
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    $i792 := $p2i.ref.i64($p791);
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 826} gnttab_end_foreign_access($i784, 0, $i792);
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    $p794 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(43, 4));
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p794, 0);
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} kfree_skb($p779);
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb354:
    assume {:verifier.code 0} true;
    goto $bb355;

  $bb355:
    assume {:verifier.code 0} true;
    $p796 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(44, 8));
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    $p797 := $load.ref($M.0, $p796);
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    $i798 := $p2i.ref.i64($p797);
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    $i799 := $eq.i64($i798, 0);
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    assume {:branchcond $i799} true;
    goto $bb356, $bb357;

  $bb357:
    assume !($i799 == 1);
    assume {:verifier.code 0} true;
    goto $bb358;

  $bb358:
    assume {:verifier.code 0} true;
    $p801 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(44, 4));
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    $i802 := $load.i32($M.0, $p801);
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    $i803 := $eq.i32($i802, 0);
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    assume {:branchcond $i803} true;
    goto $bb359, $bb360;

  $bb360:
    assume !($i803 == 1);
    assume {:verifier.code 0} true;
    goto $bb361;

  $bb361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} $p804 := skb_end_pointer($p797);
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    $p805 := $bitcast.ref.ref($p804);
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    $p806 := $add.ref($add.ref($p805, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    $p807 := $bitcast.ref.ref($p806);
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} $p808 := skb_frag_page($p807);
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 830} get_page($p808);
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} $p809 := lowmem_page_address($p808);
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    $i810 := $p2i.ref.i64($p809);
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 832} gnttab_end_foreign_access($i802, 0, $i810);
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    $p812 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(44, 4));
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p812, 0);
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} kfree_skb($p797);
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    goto $bb362;

  $bb362:
    assume {:verifier.code 0} true;
    goto $bb363;

  $bb363:
    assume {:verifier.code 0} true;
    $p814 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(45, 8));
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    $p815 := $load.ref($M.0, $p814);
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    $i816 := $p2i.ref.i64($p815);
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    $i817 := $eq.i64($i816, 0);
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    assume {:branchcond $i817} true;
    goto $bb364, $bb365;

  $bb365:
    assume !($i817 == 1);
    assume {:verifier.code 0} true;
    goto $bb366;

  $bb366:
    assume {:verifier.code 0} true;
    $p819 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(45, 4));
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    $i820 := $load.i32($M.0, $p819);
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    $i821 := $eq.i32($i820, 0);
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    assume {:branchcond $i821} true;
    goto $bb367, $bb368;

  $bb368:
    assume !($i821 == 1);
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} $p822 := skb_end_pointer($p815);
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    $p823 := $bitcast.ref.ref($p822);
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    $p824 := $add.ref($add.ref($p823, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    $p825 := $bitcast.ref.ref($p824);
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} $p826 := skb_frag_page($p825);
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} get_page($p826);
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 837} $p827 := lowmem_page_address($p826);
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    $i828 := $p2i.ref.i64($p827);
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 838} gnttab_end_foreign_access($i820, 0, $i828);
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    $p830 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(45, 4));
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p830, 0);
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 839} kfree_skb($p815);
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    goto $bb370;

  $bb370:
    assume {:verifier.code 0} true;
    goto $bb371;

  $bb371:
    assume {:verifier.code 0} true;
    $p832 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(46, 8));
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    $p833 := $load.ref($M.0, $p832);
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    $i834 := $p2i.ref.i64($p833);
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $i835 := $eq.i64($i834, 0);
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    assume {:branchcond $i835} true;
    goto $bb372, $bb373;

  $bb373:
    assume !($i835 == 1);
    assume {:verifier.code 0} true;
    goto $bb374;

  $bb374:
    assume {:verifier.code 0} true;
    $p837 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(46, 4));
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    $i838 := $load.i32($M.0, $p837);
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    $i839 := $eq.i32($i838, 0);
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    assume {:branchcond $i839} true;
    goto $bb375, $bb376;

  $bb376:
    assume !($i839 == 1);
    assume {:verifier.code 0} true;
    goto $bb377;

  $bb377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} $p840 := skb_end_pointer($p833);
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    $p841 := $bitcast.ref.ref($p840);
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    $p842 := $add.ref($add.ref($p841, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    $p843 := $bitcast.ref.ref($p842);
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} $p844 := skb_frag_page($p843);
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} get_page($p844);
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} $p845 := lowmem_page_address($p844);
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    $i846 := $p2i.ref.i64($p845);
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 844} gnttab_end_foreign_access($i838, 0, $i846);
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    $p848 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(46, 4));
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p848, 0);
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 845} kfree_skb($p833);
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    goto $bb378;

  $bb378:
    assume {:verifier.code 0} true;
    goto $bb379;

  $bb379:
    assume {:verifier.code 0} true;
    $p850 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(47, 8));
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $p851 := $load.ref($M.0, $p850);
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    $i852 := $p2i.ref.i64($p851);
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    $i853 := $eq.i64($i852, 0);
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    assume {:branchcond $i853} true;
    goto $bb380, $bb381;

  $bb381:
    assume !($i853 == 1);
    assume {:verifier.code 0} true;
    goto $bb382;

  $bb382:
    assume {:verifier.code 0} true;
    $p855 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(47, 4));
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    $i856 := $load.i32($M.0, $p855);
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    $i857 := $eq.i32($i856, 0);
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    assume {:branchcond $i857} true;
    goto $bb383, $bb384;

  $bb384:
    assume !($i857 == 1);
    assume {:verifier.code 0} true;
    goto $bb385;

  $bb385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 846} $p858 := skb_end_pointer($p851);
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    $p859 := $bitcast.ref.ref($p858);
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    $p860 := $add.ref($add.ref($p859, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    $p861 := $bitcast.ref.ref($p860);
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} $p862 := skb_frag_page($p861);
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 848} get_page($p862);
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} $p863 := lowmem_page_address($p862);
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    $i864 := $p2i.ref.i64($p863);
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 850} gnttab_end_foreign_access($i856, 0, $i864);
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    $p866 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(47, 4));
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p866, 0);
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} kfree_skb($p851);
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    goto $bb386;

  $bb386:
    assume {:verifier.code 0} true;
    goto $bb387;

  $bb387:
    assume {:verifier.code 0} true;
    $p868 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(48, 8));
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    $p869 := $load.ref($M.0, $p868);
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    $i870 := $p2i.ref.i64($p869);
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    $i871 := $eq.i64($i870, 0);
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    assume {:branchcond $i871} true;
    goto $bb388, $bb389;

  $bb389:
    assume !($i871 == 1);
    assume {:verifier.code 0} true;
    goto $bb390;

  $bb390:
    assume {:verifier.code 0} true;
    $p873 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(48, 4));
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    $i874 := $load.i32($M.0, $p873);
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    $i875 := $eq.i32($i874, 0);
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    assume {:branchcond $i875} true;
    goto $bb391, $bb392;

  $bb392:
    assume !($i875 == 1);
    assume {:verifier.code 0} true;
    goto $bb393;

  $bb393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} $p876 := skb_end_pointer($p869);
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    $p877 := $bitcast.ref.ref($p876);
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    $p878 := $add.ref($add.ref($p877, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    $p879 := $bitcast.ref.ref($p878);
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 853} $p880 := skb_frag_page($p879);
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 854} get_page($p880);
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 855} $p881 := lowmem_page_address($p880);
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    $i882 := $p2i.ref.i64($p881);
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 856} gnttab_end_foreign_access($i874, 0, $i882);
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    $p884 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(48, 4));
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p884, 0);
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 857} kfree_skb($p869);
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    goto $bb394;

  $bb394:
    assume {:verifier.code 0} true;
    goto $bb395;

  $bb395:
    assume {:verifier.code 0} true;
    $p886 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(49, 8));
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    $p887 := $load.ref($M.0, $p886);
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    $i888 := $p2i.ref.i64($p887);
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    $i889 := $eq.i64($i888, 0);
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    assume {:branchcond $i889} true;
    goto $bb396, $bb397;

  $bb397:
    assume !($i889 == 1);
    assume {:verifier.code 0} true;
    goto $bb398;

  $bb398:
    assume {:verifier.code 0} true;
    $p891 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(49, 4));
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    $i892 := $load.i32($M.0, $p891);
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    $i893 := $eq.i32($i892, 0);
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    assume {:branchcond $i893} true;
    goto $bb399, $bb400;

  $bb400:
    assume !($i893 == 1);
    assume {:verifier.code 0} true;
    goto $bb401;

  $bb401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 858} $p894 := skb_end_pointer($p887);
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    $p895 := $bitcast.ref.ref($p894);
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    $p896 := $add.ref($add.ref($p895, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    $p897 := $bitcast.ref.ref($p896);
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 859} $p898 := skb_frag_page($p897);
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 860} get_page($p898);
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 861} $p899 := lowmem_page_address($p898);
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    $i900 := $p2i.ref.i64($p899);
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} gnttab_end_foreign_access($i892, 0, $i900);
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    $p902 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(49, 4));
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p902, 0);
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 863} kfree_skb($p887);
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    goto $bb402;

  $bb402:
    assume {:verifier.code 0} true;
    goto $bb403;

  $bb403:
    assume {:verifier.code 0} true;
    $p904 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(50, 8));
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    $p905 := $load.ref($M.0, $p904);
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    $i906 := $p2i.ref.i64($p905);
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    $i907 := $eq.i64($i906, 0);
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    assume {:branchcond $i907} true;
    goto $bb404, $bb405;

  $bb405:
    assume !($i907 == 1);
    assume {:verifier.code 0} true;
    goto $bb406;

  $bb406:
    assume {:verifier.code 0} true;
    $p909 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(50, 4));
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    $i910 := $load.i32($M.0, $p909);
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    $i911 := $eq.i32($i910, 0);
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    assume {:branchcond $i911} true;
    goto $bb407, $bb408;

  $bb408:
    assume !($i911 == 1);
    assume {:verifier.code 0} true;
    goto $bb409;

  $bb409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 864} $p912 := skb_end_pointer($p905);
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    $p913 := $bitcast.ref.ref($p912);
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    $p914 := $add.ref($add.ref($p913, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    $p915 := $bitcast.ref.ref($p914);
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 865} $p916 := skb_frag_page($p915);
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} get_page($p916);
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 867} $p917 := lowmem_page_address($p916);
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    $i918 := $p2i.ref.i64($p917);
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} gnttab_end_foreign_access($i910, 0, $i918);
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    $p920 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(50, 4));
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p920, 0);
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 869} kfree_skb($p905);
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    goto $bb410;

  $bb410:
    assume {:verifier.code 0} true;
    goto $bb411;

  $bb411:
    assume {:verifier.code 0} true;
    $p922 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(51, 8));
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    $p923 := $load.ref($M.0, $p922);
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    $i924 := $p2i.ref.i64($p923);
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    $i925 := $eq.i64($i924, 0);
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    assume {:branchcond $i925} true;
    goto $bb412, $bb413;

  $bb413:
    assume !($i925 == 1);
    assume {:verifier.code 0} true;
    goto $bb414;

  $bb414:
    assume {:verifier.code 0} true;
    $p927 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(51, 4));
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    $i928 := $load.i32($M.0, $p927);
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    $i929 := $eq.i32($i928, 0);
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    assume {:branchcond $i929} true;
    goto $bb415, $bb416;

  $bb416:
    assume !($i929 == 1);
    assume {:verifier.code 0} true;
    goto $bb417;

  $bb417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 870} $p930 := skb_end_pointer($p923);
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    $p931 := $bitcast.ref.ref($p930);
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    $p932 := $add.ref($add.ref($p931, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    $p933 := $bitcast.ref.ref($p932);
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 871} $p934 := skb_frag_page($p933);
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 872} get_page($p934);
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 873} $p935 := lowmem_page_address($p934);
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    $i936 := $p2i.ref.i64($p935);
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 874} gnttab_end_foreign_access($i928, 0, $i936);
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    $p938 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(51, 4));
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p938, 0);
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 875} kfree_skb($p923);
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    goto $bb418;

  $bb418:
    assume {:verifier.code 0} true;
    goto $bb419;

  $bb419:
    assume {:verifier.code 0} true;
    $p940 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(52, 8));
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    $p941 := $load.ref($M.0, $p940);
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    $i942 := $p2i.ref.i64($p941);
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    $i943 := $eq.i64($i942, 0);
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    assume {:branchcond $i943} true;
    goto $bb420, $bb421;

  $bb421:
    assume !($i943 == 1);
    assume {:verifier.code 0} true;
    goto $bb422;

  $bb422:
    assume {:verifier.code 0} true;
    $p945 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(52, 4));
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    $i946 := $load.i32($M.0, $p945);
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    $i947 := $eq.i32($i946, 0);
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    assume {:branchcond $i947} true;
    goto $bb423, $bb424;

  $bb424:
    assume !($i947 == 1);
    assume {:verifier.code 0} true;
    goto $bb425;

  $bb425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} $p948 := skb_end_pointer($p941);
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    $p949 := $bitcast.ref.ref($p948);
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    $p950 := $add.ref($add.ref($p949, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    $p951 := $bitcast.ref.ref($p950);
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 877} $p952 := skb_frag_page($p951);
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 878} get_page($p952);
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} $p953 := lowmem_page_address($p952);
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    $i954 := $p2i.ref.i64($p953);
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} gnttab_end_foreign_access($i946, 0, $i954);
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    $p956 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(52, 4));
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p956, 0);
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 881} kfree_skb($p941);
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    goto $bb426;

  $bb426:
    assume {:verifier.code 0} true;
    goto $bb427;

  $bb427:
    assume {:verifier.code 0} true;
    $p958 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(53, 8));
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    $p959 := $load.ref($M.0, $p958);
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    $i960 := $p2i.ref.i64($p959);
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    $i961 := $eq.i64($i960, 0);
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    assume {:branchcond $i961} true;
    goto $bb428, $bb429;

  $bb429:
    assume !($i961 == 1);
    assume {:verifier.code 0} true;
    goto $bb430;

  $bb430:
    assume {:verifier.code 0} true;
    $p963 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(53, 4));
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    $i964 := $load.i32($M.0, $p963);
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    $i965 := $eq.i32($i964, 0);
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    assume {:branchcond $i965} true;
    goto $bb431, $bb432;

  $bb432:
    assume !($i965 == 1);
    assume {:verifier.code 0} true;
    goto $bb433;

  $bb433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} $p966 := skb_end_pointer($p959);
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    $p967 := $bitcast.ref.ref($p966);
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    $p968 := $add.ref($add.ref($p967, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    $p969 := $bitcast.ref.ref($p968);
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 883} $p970 := skb_frag_page($p969);
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 884} get_page($p970);
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} $p971 := lowmem_page_address($p970);
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    $i972 := $p2i.ref.i64($p971);
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} gnttab_end_foreign_access($i964, 0, $i972);
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    $p974 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(53, 4));
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p974, 0);
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 887} kfree_skb($p959);
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    goto $bb434;

  $bb434:
    assume {:verifier.code 0} true;
    goto $bb435;

  $bb435:
    assume {:verifier.code 0} true;
    $p976 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(54, 8));
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    $p977 := $load.ref($M.0, $p976);
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    $i978 := $p2i.ref.i64($p977);
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    $i979 := $eq.i64($i978, 0);
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    assume {:branchcond $i979} true;
    goto $bb436, $bb437;

  $bb437:
    assume !($i979 == 1);
    assume {:verifier.code 0} true;
    goto $bb438;

  $bb438:
    assume {:verifier.code 0} true;
    $p981 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(54, 4));
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    $i982 := $load.i32($M.0, $p981);
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    $i983 := $eq.i32($i982, 0);
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    assume {:branchcond $i983} true;
    goto $bb439, $bb440;

  $bb440:
    assume !($i983 == 1);
    assume {:verifier.code 0} true;
    goto $bb441;

  $bb441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} $p984 := skb_end_pointer($p977);
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    $p985 := $bitcast.ref.ref($p984);
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    $p986 := $add.ref($add.ref($p985, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    $p987 := $bitcast.ref.ref($p986);
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 889} $p988 := skb_frag_page($p987);
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} get_page($p988);
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 891} $p989 := lowmem_page_address($p988);
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    $i990 := $p2i.ref.i64($p989);
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} gnttab_end_foreign_access($i982, 0, $i990);
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    $p992 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(54, 4));
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p992, 0);
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} kfree_skb($p977);
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    goto $bb442;

  $bb442:
    assume {:verifier.code 0} true;
    goto $bb443;

  $bb443:
    assume {:verifier.code 0} true;
    $p994 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(55, 8));
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    $p995 := $load.ref($M.0, $p994);
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    $i996 := $p2i.ref.i64($p995);
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    $i997 := $eq.i64($i996, 0);
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    assume {:branchcond $i997} true;
    goto $bb444, $bb445;

  $bb445:
    assume !($i997 == 1);
    assume {:verifier.code 0} true;
    goto $bb446;

  $bb446:
    assume {:verifier.code 0} true;
    $p999 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(55, 4));
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    $i1000 := $load.i32($M.0, $p999);
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    $i1001 := $eq.i32($i1000, 0);
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1001} true;
    goto $bb447, $bb448;

  $bb448:
    assume !($i1001 == 1);
    assume {:verifier.code 0} true;
    goto $bb449;

  $bb449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 894} $p1002 := skb_end_pointer($p995);
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    $p1003 := $bitcast.ref.ref($p1002);
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    $p1004 := $add.ref($add.ref($p1003, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    $p1005 := $bitcast.ref.ref($p1004);
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 895} $p1006 := skb_frag_page($p1005);
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 896} get_page($p1006);
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 897} $p1007 := lowmem_page_address($p1006);
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    $i1008 := $p2i.ref.i64($p1007);
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 898} gnttab_end_foreign_access($i1000, 0, $i1008);
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    $p1010 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(55, 4));
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1010, 0);
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 899} kfree_skb($p995);
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    goto $bb450;

  $bb450:
    assume {:verifier.code 0} true;
    goto $bb451;

  $bb451:
    assume {:verifier.code 0} true;
    $p1012 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(56, 8));
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    $p1013 := $load.ref($M.0, $p1012);
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    $i1014 := $p2i.ref.i64($p1013);
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    $i1015 := $eq.i64($i1014, 0);
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1015} true;
    goto $bb452, $bb453;

  $bb453:
    assume !($i1015 == 1);
    assume {:verifier.code 0} true;
    goto $bb454;

  $bb454:
    assume {:verifier.code 0} true;
    $p1017 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(56, 4));
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    $i1018 := $load.i32($M.0, $p1017);
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    $i1019 := $eq.i32($i1018, 0);
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1019} true;
    goto $bb455, $bb456;

  $bb456:
    assume !($i1019 == 1);
    assume {:verifier.code 0} true;
    goto $bb457;

  $bb457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} $p1020 := skb_end_pointer($p1013);
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    $p1021 := $bitcast.ref.ref($p1020);
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    $p1022 := $add.ref($add.ref($p1021, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    $p1023 := $bitcast.ref.ref($p1022);
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 901} $p1024 := skb_frag_page($p1023);
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 902} get_page($p1024);
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 903} $p1025 := lowmem_page_address($p1024);
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    $i1026 := $p2i.ref.i64($p1025);
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} gnttab_end_foreign_access($i1018, 0, $i1026);
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    $p1028 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(56, 4));
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1028, 0);
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 905} kfree_skb($p1013);
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    goto $bb458;

  $bb458:
    assume {:verifier.code 0} true;
    goto $bb459;

  $bb459:
    assume {:verifier.code 0} true;
    $p1030 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(57, 8));
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    $p1031 := $load.ref($M.0, $p1030);
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    $i1032 := $p2i.ref.i64($p1031);
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    $i1033 := $eq.i64($i1032, 0);
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1033} true;
    goto $bb460, $bb461;

  $bb461:
    assume !($i1033 == 1);
    assume {:verifier.code 0} true;
    goto $bb462;

  $bb462:
    assume {:verifier.code 0} true;
    $p1035 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(57, 4));
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    $i1036 := $load.i32($M.0, $p1035);
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    $i1037 := $eq.i32($i1036, 0);
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1037} true;
    goto $bb463, $bb464;

  $bb464:
    assume !($i1037 == 1);
    assume {:verifier.code 0} true;
    goto $bb465;

  $bb465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 906} $p1038 := skb_end_pointer($p1031);
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    $p1039 := $bitcast.ref.ref($p1038);
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    $p1040 := $add.ref($add.ref($p1039, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    $p1041 := $bitcast.ref.ref($p1040);
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 907} $p1042 := skb_frag_page($p1041);
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 908} get_page($p1042);
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 909} $p1043 := lowmem_page_address($p1042);
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    $i1044 := $p2i.ref.i64($p1043);
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 910} gnttab_end_foreign_access($i1036, 0, $i1044);
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    $p1046 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(57, 4));
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1046, 0);
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 911} kfree_skb($p1031);
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    goto $bb466;

  $bb466:
    assume {:verifier.code 0} true;
    goto $bb467;

  $bb467:
    assume {:verifier.code 0} true;
    $p1048 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(58, 8));
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    $p1049 := $load.ref($M.0, $p1048);
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    $i1050 := $p2i.ref.i64($p1049);
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    $i1051 := $eq.i64($i1050, 0);
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1051} true;
    goto $bb468, $bb469;

  $bb469:
    assume !($i1051 == 1);
    assume {:verifier.code 0} true;
    goto $bb470;

  $bb470:
    assume {:verifier.code 0} true;
    $p1053 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(58, 4));
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    $i1054 := $load.i32($M.0, $p1053);
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    $i1055 := $eq.i32($i1054, 0);
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1055} true;
    goto $bb471, $bb472;

  $bb472:
    assume !($i1055 == 1);
    assume {:verifier.code 0} true;
    goto $bb473;

  $bb473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} $p1056 := skb_end_pointer($p1049);
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    $p1057 := $bitcast.ref.ref($p1056);
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    $p1058 := $add.ref($add.ref($p1057, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    $p1059 := $bitcast.ref.ref($p1058);
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 913} $p1060 := skb_frag_page($p1059);
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} get_page($p1060);
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 915} $p1061 := lowmem_page_address($p1060);
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    $i1062 := $p2i.ref.i64($p1061);
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 916} gnttab_end_foreign_access($i1054, 0, $i1062);
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    $p1064 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(58, 4));
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1064, 0);
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 917} kfree_skb($p1049);
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    goto $bb474;

  $bb474:
    assume {:verifier.code 0} true;
    goto $bb475;

  $bb475:
    assume {:verifier.code 0} true;
    $p1066 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(59, 8));
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    $p1067 := $load.ref($M.0, $p1066);
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    $i1068 := $p2i.ref.i64($p1067);
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    $i1069 := $eq.i64($i1068, 0);
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1069} true;
    goto $bb476, $bb477;

  $bb477:
    assume !($i1069 == 1);
    assume {:verifier.code 0} true;
    goto $bb478;

  $bb478:
    assume {:verifier.code 0} true;
    $p1071 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(59, 4));
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    $i1072 := $load.i32($M.0, $p1071);
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    $i1073 := $eq.i32($i1072, 0);
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1073} true;
    goto $bb479, $bb480;

  $bb480:
    assume !($i1073 == 1);
    assume {:verifier.code 0} true;
    goto $bb481;

  $bb481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 918} $p1074 := skb_end_pointer($p1067);
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    $p1075 := $bitcast.ref.ref($p1074);
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    $p1076 := $add.ref($add.ref($p1075, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    $p1077 := $bitcast.ref.ref($p1076);
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 919} $p1078 := skb_frag_page($p1077);
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 920} get_page($p1078);
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 921} $p1079 := lowmem_page_address($p1078);
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    $i1080 := $p2i.ref.i64($p1079);
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 922} gnttab_end_foreign_access($i1072, 0, $i1080);
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    $p1082 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(59, 4));
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1082, 0);
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 923} kfree_skb($p1067);
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    goto $bb482;

  $bb482:
    assume {:verifier.code 0} true;
    goto $bb483;

  $bb483:
    assume {:verifier.code 0} true;
    $p1084 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(60, 8));
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    $p1085 := $load.ref($M.0, $p1084);
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    $i1086 := $p2i.ref.i64($p1085);
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    $i1087 := $eq.i64($i1086, 0);
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1087} true;
    goto $bb484, $bb485;

  $bb485:
    assume !($i1087 == 1);
    assume {:verifier.code 0} true;
    goto $bb486;

  $bb486:
    assume {:verifier.code 0} true;
    $p1089 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(60, 4));
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    $i1090 := $load.i32($M.0, $p1089);
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    $i1091 := $eq.i32($i1090, 0);
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1091} true;
    goto $bb487, $bb488;

  $bb488:
    assume !($i1091 == 1);
    assume {:verifier.code 0} true;
    goto $bb489;

  $bb489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} $p1092 := skb_end_pointer($p1085);
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    $p1093 := $bitcast.ref.ref($p1092);
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    $p1094 := $add.ref($add.ref($p1093, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    $p1095 := $bitcast.ref.ref($p1094);
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 925} $p1096 := skb_frag_page($p1095);
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 926} get_page($p1096);
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 927} $p1097 := lowmem_page_address($p1096);
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    $i1098 := $p2i.ref.i64($p1097);
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 928} gnttab_end_foreign_access($i1090, 0, $i1098);
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    $p1100 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(60, 4));
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1100, 0);
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 929} kfree_skb($p1085);
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    goto $bb490;

  $bb490:
    assume {:verifier.code 0} true;
    goto $bb491;

  $bb491:
    assume {:verifier.code 0} true;
    $p1102 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(61, 8));
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    $p1103 := $load.ref($M.0, $p1102);
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    $i1104 := $p2i.ref.i64($p1103);
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    $i1105 := $eq.i64($i1104, 0);
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1105} true;
    goto $bb492, $bb493;

  $bb493:
    assume !($i1105 == 1);
    assume {:verifier.code 0} true;
    goto $bb494;

  $bb494:
    assume {:verifier.code 0} true;
    $p1107 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(61, 4));
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    $i1108 := $load.i32($M.0, $p1107);
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    $i1109 := $eq.i32($i1108, 0);
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1109} true;
    goto $bb495, $bb496;

  $bb496:
    assume !($i1109 == 1);
    assume {:verifier.code 0} true;
    goto $bb497;

  $bb497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 930} $p1110 := skb_end_pointer($p1103);
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    $p1111 := $bitcast.ref.ref($p1110);
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    $p1112 := $add.ref($add.ref($p1111, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    $p1113 := $bitcast.ref.ref($p1112);
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 931} $p1114 := skb_frag_page($p1113);
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 932} get_page($p1114);
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 933} $p1115 := lowmem_page_address($p1114);
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    $i1116 := $p2i.ref.i64($p1115);
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 934} gnttab_end_foreign_access($i1108, 0, $i1116);
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    $p1118 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(61, 4));
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1118, 0);
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 935} kfree_skb($p1103);
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    goto $bb498;

  $bb498:
    assume {:verifier.code 0} true;
    goto $bb499;

  $bb499:
    assume {:verifier.code 0} true;
    $p1120 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(62, 8));
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    $p1121 := $load.ref($M.0, $p1120);
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    $i1122 := $p2i.ref.i64($p1121);
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    $i1123 := $eq.i64($i1122, 0);
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1123} true;
    goto $bb500, $bb501;

  $bb501:
    assume !($i1123 == 1);
    assume {:verifier.code 0} true;
    goto $bb502;

  $bb502:
    assume {:verifier.code 0} true;
    $p1125 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(62, 4));
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    $i1126 := $load.i32($M.0, $p1125);
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    $i1127 := $eq.i32($i1126, 0);
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1127} true;
    goto $bb503, $bb504;

  $bb504:
    assume !($i1127 == 1);
    assume {:verifier.code 0} true;
    goto $bb505;

  $bb505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 936} $p1128 := skb_end_pointer($p1121);
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    $p1129 := $bitcast.ref.ref($p1128);
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    $p1130 := $add.ref($add.ref($p1129, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    $p1131 := $bitcast.ref.ref($p1130);
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 937} $p1132 := skb_frag_page($p1131);
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} get_page($p1132);
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 939} $p1133 := lowmem_page_address($p1132);
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    $i1134 := $p2i.ref.i64($p1133);
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 940} gnttab_end_foreign_access($i1126, 0, $i1134);
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    $p1136 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(62, 4));
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1136, 0);
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 941} kfree_skb($p1121);
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    goto $bb506;

  $bb506:
    assume {:verifier.code 0} true;
    goto $bb507;

  $bb507:
    assume {:verifier.code 0} true;
    $p1138 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(63, 8));
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    $p1139 := $load.ref($M.0, $p1138);
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    $i1140 := $p2i.ref.i64($p1139);
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    $i1141 := $eq.i64($i1140, 0);
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1141} true;
    goto $bb508, $bb509;

  $bb509:
    assume !($i1141 == 1);
    assume {:verifier.code 0} true;
    goto $bb510;

  $bb510:
    assume {:verifier.code 0} true;
    $p1143 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(63, 4));
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    $i1144 := $load.i32($M.0, $p1143);
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    $i1145 := $eq.i32($i1144, 0);
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1145} true;
    goto $bb511, $bb512;

  $bb512:
    assume !($i1145 == 1);
    assume {:verifier.code 0} true;
    goto $bb513;

  $bb513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} $p1146 := skb_end_pointer($p1139);
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    $p1147 := $bitcast.ref.ref($p1146);
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    $p1148 := $add.ref($add.ref($p1147, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    $p1149 := $bitcast.ref.ref($p1148);
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 943} $p1150 := skb_frag_page($p1149);
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 944} get_page($p1150);
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 945} $p1151 := lowmem_page_address($p1150);
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    $i1152 := $p2i.ref.i64($p1151);
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 946} gnttab_end_foreign_access($i1144, 0, $i1152);
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    $p1154 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(63, 4));
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1154, 0);
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 947} kfree_skb($p1139);
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    goto $bb514;

  $bb514:
    assume {:verifier.code 0} true;
    goto $bb515;

  $bb515:
    assume {:verifier.code 0} true;
    $p1156 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(64, 8));
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    $p1157 := $load.ref($M.0, $p1156);
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    $i1158 := $p2i.ref.i64($p1157);
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    $i1159 := $eq.i64($i1158, 0);
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1159} true;
    goto $bb516, $bb517;

  $bb517:
    assume !($i1159 == 1);
    assume {:verifier.code 0} true;
    goto $bb518;

  $bb518:
    assume {:verifier.code 0} true;
    $p1161 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(64, 4));
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    $i1162 := $load.i32($M.0, $p1161);
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $i1163 := $eq.i32($i1162, 0);
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1163} true;
    goto $bb519, $bb520;

  $bb520:
    assume !($i1163 == 1);
    assume {:verifier.code 0} true;
    goto $bb521;

  $bb521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 948} $p1164 := skb_end_pointer($p1157);
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    $p1165 := $bitcast.ref.ref($p1164);
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    $p1166 := $add.ref($add.ref($p1165, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    $p1167 := $bitcast.ref.ref($p1166);
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 949} $p1168 := skb_frag_page($p1167);
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 950} get_page($p1168);
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 951} $p1169 := lowmem_page_address($p1168);
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    $i1170 := $p2i.ref.i64($p1169);
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 952} gnttab_end_foreign_access($i1162, 0, $i1170);
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    $p1172 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(64, 4));
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1172, 0);
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 953} kfree_skb($p1157);
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    goto $bb522;

  $bb522:
    assume {:verifier.code 0} true;
    goto $bb523;

  $bb523:
    assume {:verifier.code 0} true;
    $p1174 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(65, 8));
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    $p1175 := $load.ref($M.0, $p1174);
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    $i1176 := $p2i.ref.i64($p1175);
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    $i1177 := $eq.i64($i1176, 0);
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1177} true;
    goto $bb524, $bb525;

  $bb525:
    assume !($i1177 == 1);
    assume {:verifier.code 0} true;
    goto $bb526;

  $bb526:
    assume {:verifier.code 0} true;
    $p1179 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(65, 4));
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    $i1180 := $load.i32($M.0, $p1179);
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    $i1181 := $eq.i32($i1180, 0);
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1181} true;
    goto $bb527, $bb528;

  $bb528:
    assume !($i1181 == 1);
    assume {:verifier.code 0} true;
    goto $bb529;

  $bb529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 954} $p1182 := skb_end_pointer($p1175);
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    $p1183 := $bitcast.ref.ref($p1182);
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    $p1184 := $add.ref($add.ref($p1183, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    $p1185 := $bitcast.ref.ref($p1184);
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 955} $p1186 := skb_frag_page($p1185);
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} get_page($p1186);
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 957} $p1187 := lowmem_page_address($p1186);
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    $i1188 := $p2i.ref.i64($p1187);
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} gnttab_end_foreign_access($i1180, 0, $i1188);
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    $p1190 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(65, 4));
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1190, 0);
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 959} kfree_skb($p1175);
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    goto $bb530;

  $bb530:
    assume {:verifier.code 0} true;
    goto $bb531;

  $bb531:
    assume {:verifier.code 0} true;
    $p1192 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(66, 8));
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    $p1193 := $load.ref($M.0, $p1192);
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    $i1194 := $p2i.ref.i64($p1193);
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    $i1195 := $eq.i64($i1194, 0);
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1195} true;
    goto $bb532, $bb533;

  $bb533:
    assume !($i1195 == 1);
    assume {:verifier.code 0} true;
    goto $bb534;

  $bb534:
    assume {:verifier.code 0} true;
    $p1197 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(66, 4));
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    $i1198 := $load.i32($M.0, $p1197);
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    $i1199 := $eq.i32($i1198, 0);
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1199} true;
    goto $bb535, $bb536;

  $bb536:
    assume !($i1199 == 1);
    assume {:verifier.code 0} true;
    goto $bb537;

  $bb537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 960} $p1200 := skb_end_pointer($p1193);
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    $p1201 := $bitcast.ref.ref($p1200);
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    $p1202 := $add.ref($add.ref($p1201, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    $p1203 := $bitcast.ref.ref($p1202);
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 961} $p1204 := skb_frag_page($p1203);
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} get_page($p1204);
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 963} $p1205 := lowmem_page_address($p1204);
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    $i1206 := $p2i.ref.i64($p1205);
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 964} gnttab_end_foreign_access($i1198, 0, $i1206);
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    $p1208 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(66, 4));
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1208, 0);
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 965} kfree_skb($p1193);
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    goto $bb538;

  $bb538:
    assume {:verifier.code 0} true;
    goto $bb539;

  $bb539:
    assume {:verifier.code 0} true;
    $p1210 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(67, 8));
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    $p1211 := $load.ref($M.0, $p1210);
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    $i1212 := $p2i.ref.i64($p1211);
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    $i1213 := $eq.i64($i1212, 0);
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1213} true;
    goto $bb540, $bb541;

  $bb541:
    assume !($i1213 == 1);
    assume {:verifier.code 0} true;
    goto $bb542;

  $bb542:
    assume {:verifier.code 0} true;
    $p1215 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(67, 4));
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    $i1216 := $load.i32($M.0, $p1215);
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    $i1217 := $eq.i32($i1216, 0);
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1217} true;
    goto $bb543, $bb544;

  $bb544:
    assume !($i1217 == 1);
    assume {:verifier.code 0} true;
    goto $bb545;

  $bb545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} $p1218 := skb_end_pointer($p1211);
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    $p1219 := $bitcast.ref.ref($p1218);
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    $p1220 := $add.ref($add.ref($p1219, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    $p1221 := $bitcast.ref.ref($p1220);
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 967} $p1222 := skb_frag_page($p1221);
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} get_page($p1222);
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 969} $p1223 := lowmem_page_address($p1222);
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    $i1224 := $p2i.ref.i64($p1223);
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 970} gnttab_end_foreign_access($i1216, 0, $i1224);
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    $p1226 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(67, 4));
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1226, 0);
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 971} kfree_skb($p1211);
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    goto $bb546;

  $bb546:
    assume {:verifier.code 0} true;
    goto $bb547;

  $bb547:
    assume {:verifier.code 0} true;
    $p1228 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(68, 8));
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    $p1229 := $load.ref($M.0, $p1228);
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    $i1230 := $p2i.ref.i64($p1229);
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    $i1231 := $eq.i64($i1230, 0);
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1231} true;
    goto $bb548, $bb549;

  $bb549:
    assume !($i1231 == 1);
    assume {:verifier.code 0} true;
    goto $bb550;

  $bb550:
    assume {:verifier.code 0} true;
    $p1233 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(68, 4));
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    $i1234 := $load.i32($M.0, $p1233);
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    $i1235 := $eq.i32($i1234, 0);
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1235} true;
    goto $bb551, $bb552;

  $bb552:
    assume !($i1235 == 1);
    assume {:verifier.code 0} true;
    goto $bb553;

  $bb553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} $p1236 := skb_end_pointer($p1229);
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    $p1237 := $bitcast.ref.ref($p1236);
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    $p1238 := $add.ref($add.ref($p1237, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    $p1239 := $bitcast.ref.ref($p1238);
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 973} $p1240 := skb_frag_page($p1239);
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 974} get_page($p1240);
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 975} $p1241 := lowmem_page_address($p1240);
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    $i1242 := $p2i.ref.i64($p1241);
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 976} gnttab_end_foreign_access($i1234, 0, $i1242);
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    $p1244 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(68, 4));
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1244, 0);
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 977} kfree_skb($p1229);
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    goto $bb554;

  $bb554:
    assume {:verifier.code 0} true;
    goto $bb555;

  $bb555:
    assume {:verifier.code 0} true;
    $p1246 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(69, 8));
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    $p1247 := $load.ref($M.0, $p1246);
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    $i1248 := $p2i.ref.i64($p1247);
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    $i1249 := $eq.i64($i1248, 0);
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1249} true;
    goto $bb556, $bb557;

  $bb557:
    assume !($i1249 == 1);
    assume {:verifier.code 0} true;
    goto $bb558;

  $bb558:
    assume {:verifier.code 0} true;
    $p1251 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(69, 4));
    goto corral_source_split_4174;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    $i1252 := $load.i32($M.0, $p1251);
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    $i1253 := $eq.i32($i1252, 0);
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1253} true;
    goto $bb559, $bb560;

  $bb560:
    assume !($i1253 == 1);
    assume {:verifier.code 0} true;
    goto $bb561;

  $bb561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 978} $p1254 := skb_end_pointer($p1247);
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    $p1255 := $bitcast.ref.ref($p1254);
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $p1256 := $add.ref($add.ref($p1255, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    $p1257 := $bitcast.ref.ref($p1256);
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 979} $p1258 := skb_frag_page($p1257);
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 980} get_page($p1258);
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 981} $p1259 := lowmem_page_address($p1258);
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    $i1260 := $p2i.ref.i64($p1259);
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 982} gnttab_end_foreign_access($i1252, 0, $i1260);
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    $p1262 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(69, 4));
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1262, 0);
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 983} kfree_skb($p1247);
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    goto $bb562;

  $bb562:
    assume {:verifier.code 0} true;
    goto $bb563;

  $bb563:
    assume {:verifier.code 0} true;
    $p1264 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(70, 8));
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    $p1265 := $load.ref($M.0, $p1264);
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    $i1266 := $p2i.ref.i64($p1265);
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    $i1267 := $eq.i64($i1266, 0);
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1267} true;
    goto $bb564, $bb565;

  $bb565:
    assume !($i1267 == 1);
    assume {:verifier.code 0} true;
    goto $bb566;

  $bb566:
    assume {:verifier.code 0} true;
    $p1269 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(70, 4));
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    $i1270 := $load.i32($M.0, $p1269);
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    $i1271 := $eq.i32($i1270, 0);
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1271} true;
    goto $bb567, $bb568;

  $bb568:
    assume !($i1271 == 1);
    assume {:verifier.code 0} true;
    goto $bb569;

  $bb569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 984} $p1272 := skb_end_pointer($p1265);
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    $p1273 := $bitcast.ref.ref($p1272);
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    $p1274 := $add.ref($add.ref($p1273, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    $p1275 := $bitcast.ref.ref($p1274);
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 985} $p1276 := skb_frag_page($p1275);
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 986} get_page($p1276);
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 987} $p1277 := lowmem_page_address($p1276);
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    $i1278 := $p2i.ref.i64($p1277);
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 988} gnttab_end_foreign_access($i1270, 0, $i1278);
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    $p1280 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(70, 4));
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1280, 0);
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 989} kfree_skb($p1265);
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    goto $bb570;

  $bb570:
    assume {:verifier.code 0} true;
    goto $bb571;

  $bb571:
    assume {:verifier.code 0} true;
    $p1282 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(71, 8));
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    $p1283 := $load.ref($M.0, $p1282);
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    $i1284 := $p2i.ref.i64($p1283);
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    $i1285 := $eq.i64($i1284, 0);
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1285} true;
    goto $bb572, $bb573;

  $bb573:
    assume !($i1285 == 1);
    assume {:verifier.code 0} true;
    goto $bb574;

  $bb574:
    assume {:verifier.code 0} true;
    $p1287 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(71, 4));
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    $i1288 := $load.i32($M.0, $p1287);
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    $i1289 := $eq.i32($i1288, 0);
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1289} true;
    goto $bb575, $bb576;

  $bb576:
    assume !($i1289 == 1);
    assume {:verifier.code 0} true;
    goto $bb577;

  $bb577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 990} $p1290 := skb_end_pointer($p1283);
    goto corral_source_split_4232;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    $p1291 := $bitcast.ref.ref($p1290);
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    $p1292 := $add.ref($add.ref($p1291, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    $p1293 := $bitcast.ref.ref($p1292);
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 991} $p1294 := skb_frag_page($p1293);
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 992} get_page($p1294);
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} $p1295 := lowmem_page_address($p1294);
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    $i1296 := $p2i.ref.i64($p1295);
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 994} gnttab_end_foreign_access($i1288, 0, $i1296);
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    $p1298 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(71, 4));
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1298, 0);
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} kfree_skb($p1283);
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    goto $bb578;

  $bb578:
    assume {:verifier.code 0} true;
    goto $bb579;

  $bb579:
    assume {:verifier.code 0} true;
    $p1300 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(72, 8));
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    $p1301 := $load.ref($M.0, $p1300);
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    $i1302 := $p2i.ref.i64($p1301);
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    $i1303 := $eq.i64($i1302, 0);
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1303} true;
    goto $bb580, $bb581;

  $bb581:
    assume !($i1303 == 1);
    assume {:verifier.code 0} true;
    goto $bb582;

  $bb582:
    assume {:verifier.code 0} true;
    $p1305 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(72, 4));
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    $i1306 := $load.i32($M.0, $p1305);
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    $i1307 := $eq.i32($i1306, 0);
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1307} true;
    goto $bb583, $bb584;

  $bb584:
    assume !($i1307 == 1);
    assume {:verifier.code 0} true;
    goto $bb585;

  $bb585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 996} $p1308 := skb_end_pointer($p1301);
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    $p1309 := $bitcast.ref.ref($p1308);
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    $p1310 := $add.ref($add.ref($p1309, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    $p1311 := $bitcast.ref.ref($p1310);
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 997} $p1312 := skb_frag_page($p1311);
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 998} get_page($p1312);
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 999} $p1313 := lowmem_page_address($p1312);
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    $i1314 := $p2i.ref.i64($p1313);
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1000} gnttab_end_foreign_access($i1306, 0, $i1314);
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    $p1316 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(72, 4));
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1316, 0);
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1001} kfree_skb($p1301);
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    goto $bb586;

  $bb586:
    assume {:verifier.code 0} true;
    goto $bb587;

  $bb587:
    assume {:verifier.code 0} true;
    $p1318 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(73, 8));
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    $p1319 := $load.ref($M.0, $p1318);
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    $i1320 := $p2i.ref.i64($p1319);
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    $i1321 := $eq.i64($i1320, 0);
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1321} true;
    goto $bb588, $bb589;

  $bb589:
    assume !($i1321 == 1);
    assume {:verifier.code 0} true;
    goto $bb590;

  $bb590:
    assume {:verifier.code 0} true;
    $p1323 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(73, 4));
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    $i1324 := $load.i32($M.0, $p1323);
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    $i1325 := $eq.i32($i1324, 0);
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1325} true;
    goto $bb591, $bb592;

  $bb592:
    assume !($i1325 == 1);
    assume {:verifier.code 0} true;
    goto $bb593;

  $bb593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1002} $p1326 := skb_end_pointer($p1319);
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    $p1327 := $bitcast.ref.ref($p1326);
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    $p1328 := $add.ref($add.ref($p1327, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    $p1329 := $bitcast.ref.ref($p1328);
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1003} $p1330 := skb_frag_page($p1329);
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1004} get_page($p1330);
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1005} $p1331 := lowmem_page_address($p1330);
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    $i1332 := $p2i.ref.i64($p1331);
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1006} gnttab_end_foreign_access($i1324, 0, $i1332);
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    $p1334 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(73, 4));
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1334, 0);
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1007} kfree_skb($p1319);
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    goto $bb594;

  $bb594:
    assume {:verifier.code 0} true;
    goto $bb595;

  $bb595:
    assume {:verifier.code 0} true;
    $p1336 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(74, 8));
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    $p1337 := $load.ref($M.0, $p1336);
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    $i1338 := $p2i.ref.i64($p1337);
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    $i1339 := $eq.i64($i1338, 0);
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1339} true;
    goto $bb596, $bb597;

  $bb597:
    assume !($i1339 == 1);
    assume {:verifier.code 0} true;
    goto $bb598;

  $bb598:
    assume {:verifier.code 0} true;
    $p1341 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(74, 4));
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    $i1342 := $load.i32($M.0, $p1341);
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    $i1343 := $eq.i32($i1342, 0);
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1343} true;
    goto $bb599, $bb600;

  $bb600:
    assume !($i1343 == 1);
    assume {:verifier.code 0} true;
    goto $bb601;

  $bb601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1008} $p1344 := skb_end_pointer($p1337);
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    $p1345 := $bitcast.ref.ref($p1344);
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    $p1346 := $add.ref($add.ref($p1345, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_4312;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    $p1347 := $bitcast.ref.ref($p1346);
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1009} $p1348 := skb_frag_page($p1347);
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1010} get_page($p1348);
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1011} $p1349 := lowmem_page_address($p1348);
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    $i1350 := $p2i.ref.i64($p1349);
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1012} gnttab_end_foreign_access($i1342, 0, $i1350);
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    $p1352 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(74, 4));
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1352, 0);
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1013} kfree_skb($p1337);
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    goto $bb602;

  $bb602:
    assume {:verifier.code 0} true;
    goto $bb603;

  $bb603:
    assume {:verifier.code 0} true;
    $p1354 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(75, 8));
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    $p1355 := $load.ref($M.0, $p1354);
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    $i1356 := $p2i.ref.i64($p1355);
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    $i1357 := $eq.i64($i1356, 0);
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1357} true;
    goto $bb604, $bb605;

  $bb605:
    assume !($i1357 == 1);
    assume {:verifier.code 0} true;
    goto $bb606;

  $bb606:
    assume {:verifier.code 0} true;
    $p1359 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(75, 4));
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    $i1360 := $load.i32($M.0, $p1359);
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    $i1361 := $eq.i32($i1360, 0);
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1361} true;
    goto $bb607, $bb608;

  $bb608:
    assume !($i1361 == 1);
    assume {:verifier.code 0} true;
    goto $bb609;

  $bb609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1014} $p1362 := skb_end_pointer($p1355);
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    $p1363 := $bitcast.ref.ref($p1362);
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    $p1364 := $add.ref($add.ref($p1363, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    $p1365 := $bitcast.ref.ref($p1364);
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1015} $p1366 := skb_frag_page($p1365);
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1016} get_page($p1366);
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1017} $p1367 := lowmem_page_address($p1366);
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    $i1368 := $p2i.ref.i64($p1367);
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1018} gnttab_end_foreign_access($i1360, 0, $i1368);
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    $p1370 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(75, 4));
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1370, 0);
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1019} kfree_skb($p1355);
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    goto $bb610;

  $bb610:
    assume {:verifier.code 0} true;
    goto $bb611;

  $bb611:
    assume {:verifier.code 0} true;
    $p1372 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(76, 8));
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    $p1373 := $load.ref($M.0, $p1372);
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    $i1374 := $p2i.ref.i64($p1373);
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    $i1375 := $eq.i64($i1374, 0);
    goto corral_source_split_4352;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1375} true;
    goto $bb612, $bb613;

  $bb613:
    assume !($i1375 == 1);
    assume {:verifier.code 0} true;
    goto $bb614;

  $bb614:
    assume {:verifier.code 0} true;
    $p1377 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(76, 4));
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    $i1378 := $load.i32($M.0, $p1377);
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    $i1379 := $eq.i32($i1378, 0);
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1379} true;
    goto $bb615, $bb616;

  $bb616:
    assume !($i1379 == 1);
    assume {:verifier.code 0} true;
    goto $bb617;

  $bb617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1020} $p1380 := skb_end_pointer($p1373);
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    $p1381 := $bitcast.ref.ref($p1380);
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    $p1382 := $add.ref($add.ref($p1381, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    $p1383 := $bitcast.ref.ref($p1382);
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1021} $p1384 := skb_frag_page($p1383);
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1022} get_page($p1384);
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1023} $p1385 := lowmem_page_address($p1384);
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    $i1386 := $p2i.ref.i64($p1385);
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1024} gnttab_end_foreign_access($i1378, 0, $i1386);
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    $p1388 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(76, 4));
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1388, 0);
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1025} kfree_skb($p1373);
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    goto $bb618;

  $bb618:
    assume {:verifier.code 0} true;
    goto $bb619;

  $bb619:
    assume {:verifier.code 0} true;
    $p1390 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(77, 8));
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    $p1391 := $load.ref($M.0, $p1390);
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    $i1392 := $p2i.ref.i64($p1391);
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    $i1393 := $eq.i64($i1392, 0);
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1393} true;
    goto $bb620, $bb621;

  $bb621:
    assume !($i1393 == 1);
    assume {:verifier.code 0} true;
    goto $bb622;

  $bb622:
    assume {:verifier.code 0} true;
    $p1395 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(77, 4));
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    $i1396 := $load.i32($M.0, $p1395);
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    $i1397 := $eq.i32($i1396, 0);
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1397} true;
    goto $bb623, $bb624;

  $bb624:
    assume !($i1397 == 1);
    assume {:verifier.code 0} true;
    goto $bb625;

  $bb625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1026} $p1398 := skb_end_pointer($p1391);
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    $p1399 := $bitcast.ref.ref($p1398);
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    $p1400 := $add.ref($add.ref($p1399, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    $p1401 := $bitcast.ref.ref($p1400);
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1027} $p1402 := skb_frag_page($p1401);
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1028} get_page($p1402);
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1029} $p1403 := lowmem_page_address($p1402);
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    $i1404 := $p2i.ref.i64($p1403);
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1030} gnttab_end_foreign_access($i1396, 0, $i1404);
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    $p1406 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(77, 4));
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1406, 0);
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1031} kfree_skb($p1391);
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    goto $bb626;

  $bb626:
    assume {:verifier.code 0} true;
    goto $bb627;

  $bb627:
    assume {:verifier.code 0} true;
    $p1408 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(78, 8));
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    $p1409 := $load.ref($M.0, $p1408);
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    $i1410 := $p2i.ref.i64($p1409);
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    $i1411 := $eq.i64($i1410, 0);
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1411} true;
    goto $bb628, $bb629;

  $bb629:
    assume !($i1411 == 1);
    assume {:verifier.code 0} true;
    goto $bb630;

  $bb630:
    assume {:verifier.code 0} true;
    $p1413 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(78, 4));
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    $i1414 := $load.i32($M.0, $p1413);
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    $i1415 := $eq.i32($i1414, 0);
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1415} true;
    goto $bb631, $bb632;

  $bb632:
    assume !($i1415 == 1);
    assume {:verifier.code 0} true;
    goto $bb633;

  $bb633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1032} $p1416 := skb_end_pointer($p1409);
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    $p1417 := $bitcast.ref.ref($p1416);
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    $p1418 := $add.ref($add.ref($p1417, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    $p1419 := $bitcast.ref.ref($p1418);
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1033} $p1420 := skb_frag_page($p1419);
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1034} get_page($p1420);
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1035} $p1421 := lowmem_page_address($p1420);
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    $i1422 := $p2i.ref.i64($p1421);
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1036} gnttab_end_foreign_access($i1414, 0, $i1422);
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    $p1424 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(78, 4));
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1424, 0);
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1037} kfree_skb($p1409);
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    goto $bb634;

  $bb634:
    assume {:verifier.code 0} true;
    goto $bb635;

  $bb635:
    assume {:verifier.code 0} true;
    $p1426 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(79, 8));
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    $p1427 := $load.ref($M.0, $p1426);
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    $i1428 := $p2i.ref.i64($p1427);
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    $i1429 := $eq.i64($i1428, 0);
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1429} true;
    goto $bb636, $bb637;

  $bb637:
    assume !($i1429 == 1);
    assume {:verifier.code 0} true;
    goto $bb638;

  $bb638:
    assume {:verifier.code 0} true;
    $p1431 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(79, 4));
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    $i1432 := $load.i32($M.0, $p1431);
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    $i1433 := $eq.i32($i1432, 0);
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1433} true;
    goto $bb639, $bb640;

  $bb640:
    assume !($i1433 == 1);
    assume {:verifier.code 0} true;
    goto $bb641;

  $bb641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1038} $p1434 := skb_end_pointer($p1427);
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    $p1435 := $bitcast.ref.ref($p1434);
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    $p1436 := $add.ref($add.ref($p1435, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    $p1437 := $bitcast.ref.ref($p1436);
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1039} $p1438 := skb_frag_page($p1437);
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1040} get_page($p1438);
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1041} $p1439 := lowmem_page_address($p1438);
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    $i1440 := $p2i.ref.i64($p1439);
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1042} gnttab_end_foreign_access($i1432, 0, $i1440);
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    $p1442 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(79, 4));
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1442, 0);
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1043} kfree_skb($p1427);
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    goto $bb642;

  $bb642:
    assume {:verifier.code 0} true;
    goto $bb643;

  $bb643:
    assume {:verifier.code 0} true;
    $p1444 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(80, 8));
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    $p1445 := $load.ref($M.0, $p1444);
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    $i1446 := $p2i.ref.i64($p1445);
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    $i1447 := $eq.i64($i1446, 0);
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1447} true;
    goto $bb644, $bb645;

  $bb645:
    assume !($i1447 == 1);
    assume {:verifier.code 0} true;
    goto $bb646;

  $bb646:
    assume {:verifier.code 0} true;
    $p1449 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(80, 4));
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    $i1450 := $load.i32($M.0, $p1449);
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    $i1451 := $eq.i32($i1450, 0);
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1451} true;
    goto $bb647, $bb648;

  $bb648:
    assume !($i1451 == 1);
    assume {:verifier.code 0} true;
    goto $bb649;

  $bb649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1044} $p1452 := skb_end_pointer($p1445);
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    $p1453 := $bitcast.ref.ref($p1452);
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    $p1454 := $add.ref($add.ref($p1453, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    $p1455 := $bitcast.ref.ref($p1454);
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1045} $p1456 := skb_frag_page($p1455);
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1046} get_page($p1456);
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1047} $p1457 := lowmem_page_address($p1456);
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    $i1458 := $p2i.ref.i64($p1457);
    goto corral_source_split_4473;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1048} gnttab_end_foreign_access($i1450, 0, $i1458);
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    $p1460 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(80, 4));
    goto corral_source_split_4475;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1460, 0);
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1049} kfree_skb($p1445);
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    goto $bb650;

  $bb650:
    assume {:verifier.code 0} true;
    goto $bb651;

  $bb651:
    assume {:verifier.code 0} true;
    $p1462 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(81, 8));
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    $p1463 := $load.ref($M.0, $p1462);
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    $i1464 := $p2i.ref.i64($p1463);
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    $i1465 := $eq.i64($i1464, 0);
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1465} true;
    goto $bb652, $bb653;

  $bb653:
    assume !($i1465 == 1);
    assume {:verifier.code 0} true;
    goto $bb654;

  $bb654:
    assume {:verifier.code 0} true;
    $p1467 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(81, 4));
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    $i1468 := $load.i32($M.0, $p1467);
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    $i1469 := $eq.i32($i1468, 0);
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1469} true;
    goto $bb655, $bb656;

  $bb656:
    assume !($i1469 == 1);
    assume {:verifier.code 0} true;
    goto $bb657;

  $bb657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1050} $p1470 := skb_end_pointer($p1463);
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    $p1471 := $bitcast.ref.ref($p1470);
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    $p1472 := $add.ref($add.ref($p1471, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    $p1473 := $bitcast.ref.ref($p1472);
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1051} $p1474 := skb_frag_page($p1473);
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1052} get_page($p1474);
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1053} $p1475 := lowmem_page_address($p1474);
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    $i1476 := $p2i.ref.i64($p1475);
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1054} gnttab_end_foreign_access($i1468, 0, $i1476);
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    $p1478 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(81, 4));
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1478, 0);
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1055} kfree_skb($p1463);
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    goto $bb658;

  $bb658:
    assume {:verifier.code 0} true;
    goto $bb659;

  $bb659:
    assume {:verifier.code 0} true;
    $p1480 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(82, 8));
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    $p1481 := $load.ref($M.0, $p1480);
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    $i1482 := $p2i.ref.i64($p1481);
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    $i1483 := $eq.i64($i1482, 0);
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1483} true;
    goto $bb660, $bb661;

  $bb661:
    assume !($i1483 == 1);
    assume {:verifier.code 0} true;
    goto $bb662;

  $bb662:
    assume {:verifier.code 0} true;
    $p1485 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(82, 4));
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    $i1486 := $load.i32($M.0, $p1485);
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    $i1487 := $eq.i32($i1486, 0);
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1487} true;
    goto $bb663, $bb664;

  $bb664:
    assume !($i1487 == 1);
    assume {:verifier.code 0} true;
    goto $bb665;

  $bb665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1056} $p1488 := skb_end_pointer($p1481);
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    $p1489 := $bitcast.ref.ref($p1488);
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    $p1490 := $add.ref($add.ref($p1489, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    $p1491 := $bitcast.ref.ref($p1490);
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1057} $p1492 := skb_frag_page($p1491);
    goto corral_source_split_4522;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1058} get_page($p1492);
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1059} $p1493 := lowmem_page_address($p1492);
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    $i1494 := $p2i.ref.i64($p1493);
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1060} gnttab_end_foreign_access($i1486, 0, $i1494);
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    $p1496 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(82, 4));
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1496, 0);
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1061} kfree_skb($p1481);
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    goto $bb666;

  $bb666:
    assume {:verifier.code 0} true;
    goto $bb667;

  $bb667:
    assume {:verifier.code 0} true;
    $p1498 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(83, 8));
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    $p1499 := $load.ref($M.0, $p1498);
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    $i1500 := $p2i.ref.i64($p1499);
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    $i1501 := $eq.i64($i1500, 0);
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1501} true;
    goto $bb668, $bb669;

  $bb669:
    assume !($i1501 == 1);
    assume {:verifier.code 0} true;
    goto $bb670;

  $bb670:
    assume {:verifier.code 0} true;
    $p1503 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(83, 4));
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    $i1504 := $load.i32($M.0, $p1503);
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    $i1505 := $eq.i32($i1504, 0);
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1505} true;
    goto $bb671, $bb672;

  $bb672:
    assume !($i1505 == 1);
    assume {:verifier.code 0} true;
    goto $bb673;

  $bb673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1062} $p1506 := skb_end_pointer($p1499);
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    $p1507 := $bitcast.ref.ref($p1506);
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    $p1508 := $add.ref($add.ref($p1507, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    $p1509 := $bitcast.ref.ref($p1508);
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1063} $p1510 := skb_frag_page($p1509);
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1064} get_page($p1510);
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1065} $p1511 := lowmem_page_address($p1510);
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    $i1512 := $p2i.ref.i64($p1511);
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1066} gnttab_end_foreign_access($i1504, 0, $i1512);
    goto corral_source_split_4552;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    $p1514 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(83, 4));
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1514, 0);
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1067} kfree_skb($p1499);
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    goto $bb674;

  $bb674:
    assume {:verifier.code 0} true;
    goto $bb675;

  $bb675:
    assume {:verifier.code 0} true;
    $p1516 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(84, 8));
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    $p1517 := $load.ref($M.0, $p1516);
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    $i1518 := $p2i.ref.i64($p1517);
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    $i1519 := $eq.i64($i1518, 0);
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1519} true;
    goto $bb676, $bb677;

  $bb677:
    assume !($i1519 == 1);
    assume {:verifier.code 0} true;
    goto $bb678;

  $bb678:
    assume {:verifier.code 0} true;
    $p1521 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(84, 4));
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    $i1522 := $load.i32($M.0, $p1521);
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    $i1523 := $eq.i32($i1522, 0);
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1523} true;
    goto $bb679, $bb680;

  $bb680:
    assume !($i1523 == 1);
    assume {:verifier.code 0} true;
    goto $bb681;

  $bb681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1068} $p1524 := skb_end_pointer($p1517);
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    $p1525 := $bitcast.ref.ref($p1524);
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    $p1526 := $add.ref($add.ref($p1525, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    $p1527 := $bitcast.ref.ref($p1526);
    goto corral_source_split_4573;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1069} $p1528 := skb_frag_page($p1527);
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1070} get_page($p1528);
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1071} $p1529 := lowmem_page_address($p1528);
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    $i1530 := $p2i.ref.i64($p1529);
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1072} gnttab_end_foreign_access($i1522, 0, $i1530);
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    $p1532 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(84, 4));
    goto corral_source_split_4579;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1532, 0);
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1073} kfree_skb($p1517);
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    goto $bb682;

  $bb682:
    assume {:verifier.code 0} true;
    goto $bb683;

  $bb683:
    assume {:verifier.code 0} true;
    $p1534 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(85, 8));
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    $p1535 := $load.ref($M.0, $p1534);
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    $i1536 := $p2i.ref.i64($p1535);
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    $i1537 := $eq.i64($i1536, 0);
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1537} true;
    goto $bb684, $bb685;

  $bb685:
    assume !($i1537 == 1);
    assume {:verifier.code 0} true;
    goto $bb686;

  $bb686:
    assume {:verifier.code 0} true;
    $p1539 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(85, 4));
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    $i1540 := $load.i32($M.0, $p1539);
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    $i1541 := $eq.i32($i1540, 0);
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1541} true;
    goto $bb687, $bb688;

  $bb688:
    assume !($i1541 == 1);
    assume {:verifier.code 0} true;
    goto $bb689;

  $bb689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1074} $p1542 := skb_end_pointer($p1535);
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    $p1543 := $bitcast.ref.ref($p1542);
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    $p1544 := $add.ref($add.ref($p1543, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    $p1545 := $bitcast.ref.ref($p1544);
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1075} $p1546 := skb_frag_page($p1545);
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1076} get_page($p1546);
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1077} $p1547 := lowmem_page_address($p1546);
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    $i1548 := $p2i.ref.i64($p1547);
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1078} gnttab_end_foreign_access($i1540, 0, $i1548);
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    $p1550 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(85, 4));
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1550, 0);
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1079} kfree_skb($p1535);
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    goto $bb690;

  $bb690:
    assume {:verifier.code 0} true;
    goto $bb691;

  $bb691:
    assume {:verifier.code 0} true;
    $p1552 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(86, 8));
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    $p1553 := $load.ref($M.0, $p1552);
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    $i1554 := $p2i.ref.i64($p1553);
    goto corral_source_split_4611;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    $i1555 := $eq.i64($i1554, 0);
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1555} true;
    goto $bb692, $bb693;

  $bb693:
    assume !($i1555 == 1);
    assume {:verifier.code 0} true;
    goto $bb694;

  $bb694:
    assume {:verifier.code 0} true;
    $p1557 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(86, 4));
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    $i1558 := $load.i32($M.0, $p1557);
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    $i1559 := $eq.i32($i1558, 0);
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1559} true;
    goto $bb695, $bb696;

  $bb696:
    assume !($i1559 == 1);
    assume {:verifier.code 0} true;
    goto $bb697;

  $bb697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1080} $p1560 := skb_end_pointer($p1553);
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    $p1561 := $bitcast.ref.ref($p1560);
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    $p1562 := $add.ref($add.ref($p1561, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_4624;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    $p1563 := $bitcast.ref.ref($p1562);
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1081} $p1564 := skb_frag_page($p1563);
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1082} get_page($p1564);
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1083} $p1565 := lowmem_page_address($p1564);
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    $i1566 := $p2i.ref.i64($p1565);
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1084} gnttab_end_foreign_access($i1558, 0, $i1566);
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    $p1568 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(86, 4));
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1568, 0);
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1085} kfree_skb($p1553);
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    goto $bb698;

  $bb698:
    assume {:verifier.code 0} true;
    goto $bb699;

  $bb699:
    assume {:verifier.code 0} true;
    $p1570 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(87, 8));
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    $p1571 := $load.ref($M.0, $p1570);
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    $i1572 := $p2i.ref.i64($p1571);
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    $i1573 := $eq.i64($i1572, 0);
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1573} true;
    goto $bb700, $bb701;

  $bb701:
    assume !($i1573 == 1);
    assume {:verifier.code 0} true;
    goto $bb702;

  $bb702:
    assume {:verifier.code 0} true;
    $p1575 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(87, 4));
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    $i1576 := $load.i32($M.0, $p1575);
    goto corral_source_split_4643;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    $i1577 := $eq.i32($i1576, 0);
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1577} true;
    goto $bb703, $bb704;

  $bb704:
    assume !($i1577 == 1);
    assume {:verifier.code 0} true;
    goto $bb705;

  $bb705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1086} $p1578 := skb_end_pointer($p1571);
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    $p1579 := $bitcast.ref.ref($p1578);
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    $p1580 := $add.ref($add.ref($p1579, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    $p1581 := $bitcast.ref.ref($p1580);
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1087} $p1582 := skb_frag_page($p1581);
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1088} get_page($p1582);
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1089} $p1583 := lowmem_page_address($p1582);
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    $i1584 := $p2i.ref.i64($p1583);
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1090} gnttab_end_foreign_access($i1576, 0, $i1584);
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    $p1586 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(87, 4));
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1586, 0);
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1091} kfree_skb($p1571);
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    goto $bb706;

  $bb706:
    assume {:verifier.code 0} true;
    goto $bb707;

  $bb707:
    assume {:verifier.code 0} true;
    $p1588 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(88, 8));
    goto corral_source_split_4661;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    $p1589 := $load.ref($M.0, $p1588);
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    $i1590 := $p2i.ref.i64($p1589);
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    $i1591 := $eq.i64($i1590, 0);
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1591} true;
    goto $bb708, $bb709;

  $bb709:
    assume !($i1591 == 1);
    assume {:verifier.code 0} true;
    goto $bb710;

  $bb710:
    assume {:verifier.code 0} true;
    $p1593 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(88, 4));
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    $i1594 := $load.i32($M.0, $p1593);
    goto corral_source_split_4669;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    $i1595 := $eq.i32($i1594, 0);
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1595} true;
    goto $bb711, $bb712;

  $bb712:
    assume !($i1595 == 1);
    assume {:verifier.code 0} true;
    goto $bb713;

  $bb713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1092} $p1596 := skb_end_pointer($p1589);
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    $p1597 := $bitcast.ref.ref($p1596);
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    $p1598 := $add.ref($add.ref($p1597, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    $p1599 := $bitcast.ref.ref($p1598);
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1093} $p1600 := skb_frag_page($p1599);
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1094} get_page($p1600);
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1095} $p1601 := lowmem_page_address($p1600);
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    $i1602 := $p2i.ref.i64($p1601);
    goto corral_source_split_4681;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1096} gnttab_end_foreign_access($i1594, 0, $i1602);
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    $p1604 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(88, 4));
    goto corral_source_split_4683;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1604, 0);
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1097} kfree_skb($p1589);
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    goto $bb714;

  $bb714:
    assume {:verifier.code 0} true;
    goto $bb715;

  $bb715:
    assume {:verifier.code 0} true;
    $p1606 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(89, 8));
    goto corral_source_split_4687;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    $p1607 := $load.ref($M.0, $p1606);
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    $i1608 := $p2i.ref.i64($p1607);
    goto corral_source_split_4689;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    $i1609 := $eq.i64($i1608, 0);
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1609} true;
    goto $bb716, $bb717;

  $bb717:
    assume !($i1609 == 1);
    assume {:verifier.code 0} true;
    goto $bb718;

  $bb718:
    assume {:verifier.code 0} true;
    $p1611 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(89, 4));
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    $i1612 := $load.i32($M.0, $p1611);
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    $i1613 := $eq.i32($i1612, 0);
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1613} true;
    goto $bb719, $bb720;

  $bb720:
    assume !($i1613 == 1);
    assume {:verifier.code 0} true;
    goto $bb721;

  $bb721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1098} $p1614 := skb_end_pointer($p1607);
    goto corral_source_split_4700;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    $p1615 := $bitcast.ref.ref($p1614);
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    $p1616 := $add.ref($add.ref($p1615, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    $p1617 := $bitcast.ref.ref($p1616);
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1099} $p1618 := skb_frag_page($p1617);
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1100} get_page($p1618);
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1101} $p1619 := lowmem_page_address($p1618);
    goto corral_source_split_4706;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    $i1620 := $p2i.ref.i64($p1619);
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1102} gnttab_end_foreign_access($i1612, 0, $i1620);
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    $p1622 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(89, 4));
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1622, 0);
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1103} kfree_skb($p1607);
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    goto $bb722;

  $bb722:
    assume {:verifier.code 0} true;
    goto $bb723;

  $bb723:
    assume {:verifier.code 0} true;
    $p1624 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(90, 8));
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    $p1625 := $load.ref($M.0, $p1624);
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    $i1626 := $p2i.ref.i64($p1625);
    goto corral_source_split_4715;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    $i1627 := $eq.i64($i1626, 0);
    goto corral_source_split_4716;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1627} true;
    goto $bb724, $bb725;

  $bb725:
    assume !($i1627 == 1);
    assume {:verifier.code 0} true;
    goto $bb726;

  $bb726:
    assume {:verifier.code 0} true;
    $p1629 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(90, 4));
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    $i1630 := $load.i32($M.0, $p1629);
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    $i1631 := $eq.i32($i1630, 0);
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1631} true;
    goto $bb727, $bb728;

  $bb728:
    assume !($i1631 == 1);
    assume {:verifier.code 0} true;
    goto $bb729;

  $bb729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1104} $p1632 := skb_end_pointer($p1625);
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    $p1633 := $bitcast.ref.ref($p1632);
    goto corral_source_split_4727;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    $p1634 := $add.ref($add.ref($p1633, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    $p1635 := $bitcast.ref.ref($p1634);
    goto corral_source_split_4729;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1105} $p1636 := skb_frag_page($p1635);
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1106} get_page($p1636);
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1107} $p1637 := lowmem_page_address($p1636);
    goto corral_source_split_4732;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    $i1638 := $p2i.ref.i64($p1637);
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1108} gnttab_end_foreign_access($i1630, 0, $i1638);
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    $p1640 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(90, 4));
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1640, 0);
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1109} kfree_skb($p1625);
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    goto $bb730;

  $bb730:
    assume {:verifier.code 0} true;
    goto $bb731;

  $bb731:
    assume {:verifier.code 0} true;
    $p1642 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(91, 8));
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    $p1643 := $load.ref($M.0, $p1642);
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    $i1644 := $p2i.ref.i64($p1643);
    goto corral_source_split_4741;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    $i1645 := $eq.i64($i1644, 0);
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1645} true;
    goto $bb732, $bb733;

  $bb733:
    assume !($i1645 == 1);
    assume {:verifier.code 0} true;
    goto $bb734;

  $bb734:
    assume {:verifier.code 0} true;
    $p1647 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(91, 4));
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    $i1648 := $load.i32($M.0, $p1647);
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    $i1649 := $eq.i32($i1648, 0);
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1649} true;
    goto $bb735, $bb736;

  $bb736:
    assume !($i1649 == 1);
    assume {:verifier.code 0} true;
    goto $bb737;

  $bb737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1110} $p1650 := skb_end_pointer($p1643);
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    $p1651 := $bitcast.ref.ref($p1650);
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    $p1652 := $add.ref($add.ref($p1651, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    $p1653 := $bitcast.ref.ref($p1652);
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1111} $p1654 := skb_frag_page($p1653);
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1112} get_page($p1654);
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1113} $p1655 := lowmem_page_address($p1654);
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    $i1656 := $p2i.ref.i64($p1655);
    goto corral_source_split_4759;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1114} gnttab_end_foreign_access($i1648, 0, $i1656);
    goto corral_source_split_4760;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    $p1658 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(91, 4));
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1658, 0);
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1115} kfree_skb($p1643);
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    goto $bb738;

  $bb738:
    assume {:verifier.code 0} true;
    goto $bb739;

  $bb739:
    assume {:verifier.code 0} true;
    $p1660 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(92, 8));
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    $p1661 := $load.ref($M.0, $p1660);
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    $i1662 := $p2i.ref.i64($p1661);
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    $i1663 := $eq.i64($i1662, 0);
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1663} true;
    goto $bb740, $bb741;

  $bb741:
    assume !($i1663 == 1);
    assume {:verifier.code 0} true;
    goto $bb742;

  $bb742:
    assume {:verifier.code 0} true;
    $p1665 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(92, 4));
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    $i1666 := $load.i32($M.0, $p1665);
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    $i1667 := $eq.i32($i1666, 0);
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1667} true;
    goto $bb743, $bb744;

  $bb744:
    assume !($i1667 == 1);
    assume {:verifier.code 0} true;
    goto $bb745;

  $bb745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1116} $p1668 := skb_end_pointer($p1661);
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    $p1669 := $bitcast.ref.ref($p1668);
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    $p1670 := $add.ref($add.ref($p1669, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    $p1671 := $bitcast.ref.ref($p1670);
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1117} $p1672 := skb_frag_page($p1671);
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1118} get_page($p1672);
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1119} $p1673 := lowmem_page_address($p1672);
    goto corral_source_split_4784;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    $i1674 := $p2i.ref.i64($p1673);
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1120} gnttab_end_foreign_access($i1666, 0, $i1674);
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    $p1676 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(92, 4));
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1676, 0);
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1121} kfree_skb($p1661);
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    goto $bb746;

  $bb746:
    assume {:verifier.code 0} true;
    goto $bb747;

  $bb747:
    assume {:verifier.code 0} true;
    $p1678 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(93, 8));
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    $p1679 := $load.ref($M.0, $p1678);
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    $i1680 := $p2i.ref.i64($p1679);
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    $i1681 := $eq.i64($i1680, 0);
    goto corral_source_split_4794;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1681} true;
    goto $bb748, $bb749;

  $bb749:
    assume !($i1681 == 1);
    assume {:verifier.code 0} true;
    goto $bb750;

  $bb750:
    assume {:verifier.code 0} true;
    $p1683 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(93, 4));
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    $i1684 := $load.i32($M.0, $p1683);
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    $i1685 := $eq.i32($i1684, 0);
    goto corral_source_split_4800;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1685} true;
    goto $bb751, $bb752;

  $bb752:
    assume !($i1685 == 1);
    assume {:verifier.code 0} true;
    goto $bb753;

  $bb753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1122} $p1686 := skb_end_pointer($p1679);
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    $p1687 := $bitcast.ref.ref($p1686);
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    $p1688 := $add.ref($add.ref($p1687, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_4806;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    $p1689 := $bitcast.ref.ref($p1688);
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1123} $p1690 := skb_frag_page($p1689);
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1124} get_page($p1690);
    goto corral_source_split_4809;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1125} $p1691 := lowmem_page_address($p1690);
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    $i1692 := $p2i.ref.i64($p1691);
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1126} gnttab_end_foreign_access($i1684, 0, $i1692);
    goto corral_source_split_4812;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    $p1694 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(93, 4));
    goto corral_source_split_4813;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1694, 0);
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1127} kfree_skb($p1679);
    goto corral_source_split_4815;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    goto $bb754;

  $bb754:
    assume {:verifier.code 0} true;
    goto $bb755;

  $bb755:
    assume {:verifier.code 0} true;
    $p1696 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(94, 8));
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    $p1697 := $load.ref($M.0, $p1696);
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    $i1698 := $p2i.ref.i64($p1697);
    goto corral_source_split_4819;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    $i1699 := $eq.i64($i1698, 0);
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1699} true;
    goto $bb756, $bb757;

  $bb757:
    assume !($i1699 == 1);
    assume {:verifier.code 0} true;
    goto $bb758;

  $bb758:
    assume {:verifier.code 0} true;
    $p1701 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(94, 4));
    goto corral_source_split_4824;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    $i1702 := $load.i32($M.0, $p1701);
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    $i1703 := $eq.i32($i1702, 0);
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1703} true;
    goto $bb759, $bb760;

  $bb760:
    assume !($i1703 == 1);
    assume {:verifier.code 0} true;
    goto $bb761;

  $bb761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1128} $p1704 := skb_end_pointer($p1697);
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    $p1705 := $bitcast.ref.ref($p1704);
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    $p1706 := $add.ref($add.ref($p1705, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    $p1707 := $bitcast.ref.ref($p1706);
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1129} $p1708 := skb_frag_page($p1707);
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1130} get_page($p1708);
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1131} $p1709 := lowmem_page_address($p1708);
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    $i1710 := $p2i.ref.i64($p1709);
    goto corral_source_split_4837;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1132} gnttab_end_foreign_access($i1702, 0, $i1710);
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    $p1712 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(94, 4));
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1712, 0);
    goto corral_source_split_4840;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1133} kfree_skb($p1697);
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    goto $bb762;

  $bb762:
    assume {:verifier.code 0} true;
    goto $bb763;

  $bb763:
    assume {:verifier.code 0} true;
    $p1714 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(95, 8));
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    $p1715 := $load.ref($M.0, $p1714);
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    $i1716 := $p2i.ref.i64($p1715);
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    $i1717 := $eq.i64($i1716, 0);
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1717} true;
    goto $bb764, $bb765;

  $bb765:
    assume !($i1717 == 1);
    assume {:verifier.code 0} true;
    goto $bb766;

  $bb766:
    assume {:verifier.code 0} true;
    $p1719 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(95, 4));
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    $i1720 := $load.i32($M.0, $p1719);
    goto corral_source_split_4851;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    $i1721 := $eq.i32($i1720, 0);
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1721} true;
    goto $bb767, $bb768;

  $bb768:
    assume !($i1721 == 1);
    assume {:verifier.code 0} true;
    goto $bb769;

  $bb769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1134} $p1722 := skb_end_pointer($p1715);
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    $p1723 := $bitcast.ref.ref($p1722);
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    $p1724 := $add.ref($add.ref($p1723, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_4858;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    $p1725 := $bitcast.ref.ref($p1724);
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1135} $p1726 := skb_frag_page($p1725);
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1136} get_page($p1726);
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1137} $p1727 := lowmem_page_address($p1726);
    goto corral_source_split_4862;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    $i1728 := $p2i.ref.i64($p1727);
    goto corral_source_split_4863;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1138} gnttab_end_foreign_access($i1720, 0, $i1728);
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    $p1730 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(95, 4));
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1730, 0);
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1139} kfree_skb($p1715);
    goto corral_source_split_4867;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    goto $bb770;

  $bb770:
    assume {:verifier.code 0} true;
    goto $bb771;

  $bb771:
    assume {:verifier.code 0} true;
    $p1732 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(96, 8));
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    $p1733 := $load.ref($M.0, $p1732);
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    $i1734 := $p2i.ref.i64($p1733);
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    $i1735 := $eq.i64($i1734, 0);
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1735} true;
    goto $bb772, $bb773;

  $bb773:
    assume !($i1735 == 1);
    assume {:verifier.code 0} true;
    goto $bb774;

  $bb774:
    assume {:verifier.code 0} true;
    $p1737 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(96, 4));
    goto corral_source_split_4876;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    $i1738 := $load.i32($M.0, $p1737);
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    $i1739 := $eq.i32($i1738, 0);
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1739} true;
    goto $bb775, $bb776;

  $bb776:
    assume !($i1739 == 1);
    assume {:verifier.code 0} true;
    goto $bb777;

  $bb777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1140} $p1740 := skb_end_pointer($p1733);
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    $p1741 := $bitcast.ref.ref($p1740);
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    $p1742 := $add.ref($add.ref($p1741, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_4884;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    $p1743 := $bitcast.ref.ref($p1742);
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1141} $p1744 := skb_frag_page($p1743);
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1142} get_page($p1744);
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1143} $p1745 := lowmem_page_address($p1744);
    goto corral_source_split_4888;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    $i1746 := $p2i.ref.i64($p1745);
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1144} gnttab_end_foreign_access($i1738, 0, $i1746);
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    $p1748 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(96, 4));
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1748, 0);
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1145} kfree_skb($p1733);
    goto corral_source_split_4893;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    goto $bb778;

  $bb778:
    assume {:verifier.code 0} true;
    goto $bb779;

  $bb779:
    assume {:verifier.code 0} true;
    $p1750 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(97, 8));
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    $p1751 := $load.ref($M.0, $p1750);
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    $i1752 := $p2i.ref.i64($p1751);
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    $i1753 := $eq.i64($i1752, 0);
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1753} true;
    goto $bb780, $bb781;

  $bb781:
    assume !($i1753 == 1);
    assume {:verifier.code 0} true;
    goto $bb782;

  $bb782:
    assume {:verifier.code 0} true;
    $p1755 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(97, 4));
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    $i1756 := $load.i32($M.0, $p1755);
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    $i1757 := $eq.i32($i1756, 0);
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1757} true;
    goto $bb783, $bb784;

  $bb784:
    assume !($i1757 == 1);
    assume {:verifier.code 0} true;
    goto $bb785;

  $bb785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1146} $p1758 := skb_end_pointer($p1751);
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    $p1759 := $bitcast.ref.ref($p1758);
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    $p1760 := $add.ref($add.ref($p1759, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    $p1761 := $bitcast.ref.ref($p1760);
    goto corral_source_split_4911;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1147} $p1762 := skb_frag_page($p1761);
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1148} get_page($p1762);
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1149} $p1763 := lowmem_page_address($p1762);
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    $i1764 := $p2i.ref.i64($p1763);
    goto corral_source_split_4915;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1150} gnttab_end_foreign_access($i1756, 0, $i1764);
    goto corral_source_split_4916;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    $p1766 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(97, 4));
    goto corral_source_split_4917;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1766, 0);
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1151} kfree_skb($p1751);
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    goto $bb786;

  $bb786:
    assume {:verifier.code 0} true;
    goto $bb787;

  $bb787:
    assume {:verifier.code 0} true;
    $p1768 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(98, 8));
    goto corral_source_split_4921;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    $p1769 := $load.ref($M.0, $p1768);
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    $i1770 := $p2i.ref.i64($p1769);
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    $i1771 := $eq.i64($i1770, 0);
    goto corral_source_split_4924;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1771} true;
    goto $bb788, $bb789;

  $bb789:
    assume !($i1771 == 1);
    assume {:verifier.code 0} true;
    goto $bb790;

  $bb790:
    assume {:verifier.code 0} true;
    $p1773 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(98, 4));
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    $i1774 := $load.i32($M.0, $p1773);
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    $i1775 := $eq.i32($i1774, 0);
    goto corral_source_split_4930;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1775} true;
    goto $bb791, $bb792;

  $bb792:
    assume !($i1775 == 1);
    assume {:verifier.code 0} true;
    goto $bb793;

  $bb793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1152} $p1776 := skb_end_pointer($p1769);
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    $p1777 := $bitcast.ref.ref($p1776);
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    $p1778 := $add.ref($add.ref($p1777, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    $p1779 := $bitcast.ref.ref($p1778);
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1153} $p1780 := skb_frag_page($p1779);
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1154} get_page($p1780);
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1155} $p1781 := lowmem_page_address($p1780);
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    $i1782 := $p2i.ref.i64($p1781);
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1156} gnttab_end_foreign_access($i1774, 0, $i1782);
    goto corral_source_split_4942;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    $p1784 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(98, 4));
    goto corral_source_split_4943;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1784, 0);
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1157} kfree_skb($p1769);
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    goto $bb794;

  $bb794:
    assume {:verifier.code 0} true;
    goto $bb795;

  $bb795:
    assume {:verifier.code 0} true;
    $p1786 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(99, 8));
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    $p1787 := $load.ref($M.0, $p1786);
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    $i1788 := $p2i.ref.i64($p1787);
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    $i1789 := $eq.i64($i1788, 0);
    goto corral_source_split_4950;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1789} true;
    goto $bb796, $bb797;

  $bb797:
    assume !($i1789 == 1);
    assume {:verifier.code 0} true;
    goto $bb798;

  $bb798:
    assume {:verifier.code 0} true;
    $p1791 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(99, 4));
    goto corral_source_split_4954;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    $i1792 := $load.i32($M.0, $p1791);
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    $i1793 := $eq.i32($i1792, 0);
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1793} true;
    goto $bb799, $bb800;

  $bb800:
    assume !($i1793 == 1);
    assume {:verifier.code 0} true;
    goto $bb801;

  $bb801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1158} $p1794 := skb_end_pointer($p1787);
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    $p1795 := $bitcast.ref.ref($p1794);
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    $p1796 := $add.ref($add.ref($p1795, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    $p1797 := $bitcast.ref.ref($p1796);
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1159} $p1798 := skb_frag_page($p1797);
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1160} get_page($p1798);
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1161} $p1799 := lowmem_page_address($p1798);
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    $i1800 := $p2i.ref.i64($p1799);
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1162} gnttab_end_foreign_access($i1792, 0, $i1800);
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    $p1802 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(99, 4));
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1802, 0);
    goto corral_source_split_4970;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1163} kfree_skb($p1787);
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    goto $bb802;

  $bb802:
    assume {:verifier.code 0} true;
    goto $bb803;

  $bb803:
    assume {:verifier.code 0} true;
    $p1804 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(100, 8));
    goto corral_source_split_4973;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    $p1805 := $load.ref($M.0, $p1804);
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    $i1806 := $p2i.ref.i64($p1805);
    goto corral_source_split_4975;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    $i1807 := $eq.i64($i1806, 0);
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1807} true;
    goto $bb804, $bb805;

  $bb805:
    assume !($i1807 == 1);
    assume {:verifier.code 0} true;
    goto $bb806;

  $bb806:
    assume {:verifier.code 0} true;
    $p1809 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(100, 4));
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    $i1810 := $load.i32($M.0, $p1809);
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    $i1811 := $eq.i32($i1810, 0);
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1811} true;
    goto $bb807, $bb808;

  $bb808:
    assume !($i1811 == 1);
    assume {:verifier.code 0} true;
    goto $bb809;

  $bb809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1164} $p1812 := skb_end_pointer($p1805);
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    $p1813 := $bitcast.ref.ref($p1812);
    goto corral_source_split_4987;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    $p1814 := $add.ref($add.ref($p1813, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    $p1815 := $bitcast.ref.ref($p1814);
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1165} $p1816 := skb_frag_page($p1815);
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1166} get_page($p1816);
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1167} $p1817 := lowmem_page_address($p1816);
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    $i1818 := $p2i.ref.i64($p1817);
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1168} gnttab_end_foreign_access($i1810, 0, $i1818);
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    $p1820 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(100, 4));
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1820, 0);
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1169} kfree_skb($p1805);
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    goto $bb810;

  $bb810:
    assume {:verifier.code 0} true;
    goto $bb811;

  $bb811:
    assume {:verifier.code 0} true;
    $p1822 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(101, 8));
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    $p1823 := $load.ref($M.0, $p1822);
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    $i1824 := $p2i.ref.i64($p1823);
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    $i1825 := $eq.i64($i1824, 0);
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1825} true;
    goto $bb812, $bb813;

  $bb813:
    assume !($i1825 == 1);
    assume {:verifier.code 0} true;
    goto $bb814;

  $bb814:
    assume {:verifier.code 0} true;
    $p1827 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(101, 4));
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    $i1828 := $load.i32($M.0, $p1827);
    goto corral_source_split_5007;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    $i1829 := $eq.i32($i1828, 0);
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1829} true;
    goto $bb815, $bb816;

  $bb816:
    assume !($i1829 == 1);
    assume {:verifier.code 0} true;
    goto $bb817;

  $bb817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1170} $p1830 := skb_end_pointer($p1823);
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    $p1831 := $bitcast.ref.ref($p1830);
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    $p1832 := $add.ref($add.ref($p1831, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    $p1833 := $bitcast.ref.ref($p1832);
    goto corral_source_split_5015;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1171} $p1834 := skb_frag_page($p1833);
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1172} get_page($p1834);
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1173} $p1835 := lowmem_page_address($p1834);
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    $i1836 := $p2i.ref.i64($p1835);
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1174} gnttab_end_foreign_access($i1828, 0, $i1836);
    goto corral_source_split_5020;

  corral_source_split_5020:
    assume {:verifier.code 0} true;
    $p1838 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(101, 4));
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1838, 0);
    goto corral_source_split_5022;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1175} kfree_skb($p1823);
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    goto $bb818;

  $bb818:
    assume {:verifier.code 0} true;
    goto $bb819;

  $bb819:
    assume {:verifier.code 0} true;
    $p1840 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(102, 8));
    goto corral_source_split_5025;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    $p1841 := $load.ref($M.0, $p1840);
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    $i1842 := $p2i.ref.i64($p1841);
    goto corral_source_split_5027;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    $i1843 := $eq.i64($i1842, 0);
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1843} true;
    goto $bb820, $bb821;

  $bb821:
    assume !($i1843 == 1);
    assume {:verifier.code 0} true;
    goto $bb822;

  $bb822:
    assume {:verifier.code 0} true;
    $p1845 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(102, 4));
    goto corral_source_split_5032;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    $i1846 := $load.i32($M.0, $p1845);
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    $i1847 := $eq.i32($i1846, 0);
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1847} true;
    goto $bb823, $bb824;

  $bb824:
    assume !($i1847 == 1);
    assume {:verifier.code 0} true;
    goto $bb825;

  $bb825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1176} $p1848 := skb_end_pointer($p1841);
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    $p1849 := $bitcast.ref.ref($p1848);
    goto corral_source_split_5039;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    $p1850 := $add.ref($add.ref($p1849, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    $p1851 := $bitcast.ref.ref($p1850);
    goto corral_source_split_5041;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1177} $p1852 := skb_frag_page($p1851);
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1178} get_page($p1852);
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1179} $p1853 := lowmem_page_address($p1852);
    goto corral_source_split_5044;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    $i1854 := $p2i.ref.i64($p1853);
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1180} gnttab_end_foreign_access($i1846, 0, $i1854);
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    $p1856 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(102, 4));
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1856, 0);
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1181} kfree_skb($p1841);
    goto corral_source_split_5049;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    goto $bb826;

  $bb826:
    assume {:verifier.code 0} true;
    goto $bb827;

  $bb827:
    assume {:verifier.code 0} true;
    $p1858 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(103, 8));
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    $p1859 := $load.ref($M.0, $p1858);
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    $i1860 := $p2i.ref.i64($p1859);
    goto corral_source_split_5053;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    $i1861 := $eq.i64($i1860, 0);
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1861} true;
    goto $bb828, $bb829;

  $bb829:
    assume !($i1861 == 1);
    assume {:verifier.code 0} true;
    goto $bb830;

  $bb830:
    assume {:verifier.code 0} true;
    $p1863 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(103, 4));
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    $i1864 := $load.i32($M.0, $p1863);
    goto corral_source_split_5059;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    $i1865 := $eq.i32($i1864, 0);
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1865} true;
    goto $bb831, $bb832;

  $bb832:
    assume !($i1865 == 1);
    assume {:verifier.code 0} true;
    goto $bb833;

  $bb833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1182} $p1866 := skb_end_pointer($p1859);
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    $p1867 := $bitcast.ref.ref($p1866);
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    $p1868 := $add.ref($add.ref($p1867, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    $p1869 := $bitcast.ref.ref($p1868);
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1183} $p1870 := skb_frag_page($p1869);
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1184} get_page($p1870);
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1185} $p1871 := lowmem_page_address($p1870);
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    $i1872 := $p2i.ref.i64($p1871);
    goto corral_source_split_5071;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1186} gnttab_end_foreign_access($i1864, 0, $i1872);
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    $p1874 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(103, 4));
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1874, 0);
    goto corral_source_split_5074;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1187} kfree_skb($p1859);
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    goto $bb834;

  $bb834:
    assume {:verifier.code 0} true;
    goto $bb835;

  $bb835:
    assume {:verifier.code 0} true;
    $p1876 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(104, 8));
    goto corral_source_split_5077;

  corral_source_split_5077:
    assume {:verifier.code 0} true;
    $p1877 := $load.ref($M.0, $p1876);
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    $i1878 := $p2i.ref.i64($p1877);
    goto corral_source_split_5079;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    $i1879 := $eq.i64($i1878, 0);
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1879} true;
    goto $bb836, $bb837;

  $bb837:
    assume !($i1879 == 1);
    assume {:verifier.code 0} true;
    goto $bb838;

  $bb838:
    assume {:verifier.code 0} true;
    $p1881 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(104, 4));
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    $i1882 := $load.i32($M.0, $p1881);
    goto corral_source_split_5085;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    $i1883 := $eq.i32($i1882, 0);
    goto corral_source_split_5086;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1883} true;
    goto $bb839, $bb840;

  $bb840:
    assume !($i1883 == 1);
    assume {:verifier.code 0} true;
    goto $bb841;

  $bb841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1188} $p1884 := skb_end_pointer($p1877);
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    $p1885 := $bitcast.ref.ref($p1884);
    goto corral_source_split_5091;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    $p1886 := $add.ref($add.ref($p1885, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    $p1887 := $bitcast.ref.ref($p1886);
    goto corral_source_split_5093;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1189} $p1888 := skb_frag_page($p1887);
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1190} get_page($p1888);
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1191} $p1889 := lowmem_page_address($p1888);
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    $i1890 := $p2i.ref.i64($p1889);
    goto corral_source_split_5097;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1192} gnttab_end_foreign_access($i1882, 0, $i1890);
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    $p1892 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(104, 4));
    goto corral_source_split_5099;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1892, 0);
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1193} kfree_skb($p1877);
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    goto $bb842;

  $bb842:
    assume {:verifier.code 0} true;
    goto $bb843;

  $bb843:
    assume {:verifier.code 0} true;
    $p1894 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(105, 8));
    goto corral_source_split_5103;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    $p1895 := $load.ref($M.0, $p1894);
    goto corral_source_split_5104;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    $i1896 := $p2i.ref.i64($p1895);
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    $i1897 := $eq.i64($i1896, 0);
    goto corral_source_split_5106;

  corral_source_split_5106:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1897} true;
    goto $bb844, $bb845;

  $bb845:
    assume !($i1897 == 1);
    assume {:verifier.code 0} true;
    goto $bb846;

  $bb846:
    assume {:verifier.code 0} true;
    $p1899 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(105, 4));
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    $i1900 := $load.i32($M.0, $p1899);
    goto corral_source_split_5111;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    $i1901 := $eq.i32($i1900, 0);
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1901} true;
    goto $bb847, $bb848;

  $bb848:
    assume !($i1901 == 1);
    assume {:verifier.code 0} true;
    goto $bb849;

  $bb849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1194} $p1902 := skb_end_pointer($p1895);
    goto corral_source_split_5116;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    $p1903 := $bitcast.ref.ref($p1902);
    goto corral_source_split_5117;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    $p1904 := $add.ref($add.ref($p1903, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    $p1905 := $bitcast.ref.ref($p1904);
    goto corral_source_split_5119;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1195} $p1906 := skb_frag_page($p1905);
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1196} get_page($p1906);
    goto corral_source_split_5121;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1197} $p1907 := lowmem_page_address($p1906);
    goto corral_source_split_5122;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    $i1908 := $p2i.ref.i64($p1907);
    goto corral_source_split_5123;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1198} gnttab_end_foreign_access($i1900, 0, $i1908);
    goto corral_source_split_5124;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    $p1910 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(105, 4));
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1910, 0);
    goto corral_source_split_5126;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1199} kfree_skb($p1895);
    goto corral_source_split_5127;

  corral_source_split_5127:
    assume {:verifier.code 0} true;
    goto $bb850;

  $bb850:
    assume {:verifier.code 0} true;
    goto $bb851;

  $bb851:
    assume {:verifier.code 0} true;
    $p1912 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(106, 8));
    goto corral_source_split_5129;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    $p1913 := $load.ref($M.0, $p1912);
    goto corral_source_split_5130;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    $i1914 := $p2i.ref.i64($p1913);
    goto corral_source_split_5131;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    $i1915 := $eq.i64($i1914, 0);
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1915} true;
    goto $bb852, $bb853;

  $bb853:
    assume !($i1915 == 1);
    assume {:verifier.code 0} true;
    goto $bb854;

  $bb854:
    assume {:verifier.code 0} true;
    $p1917 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(106, 4));
    goto corral_source_split_5136;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    $i1918 := $load.i32($M.0, $p1917);
    goto corral_source_split_5137;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    $i1919 := $eq.i32($i1918, 0);
    goto corral_source_split_5138;

  corral_source_split_5138:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1919} true;
    goto $bb855, $bb856;

  $bb856:
    assume !($i1919 == 1);
    assume {:verifier.code 0} true;
    goto $bb857;

  $bb857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1200} $p1920 := skb_end_pointer($p1913);
    goto corral_source_split_5142;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    $p1921 := $bitcast.ref.ref($p1920);
    goto corral_source_split_5143;

  corral_source_split_5143:
    assume {:verifier.code 0} true;
    $p1922 := $add.ref($add.ref($p1921, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    $p1923 := $bitcast.ref.ref($p1922);
    goto corral_source_split_5145;

  corral_source_split_5145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1201} $p1924 := skb_frag_page($p1923);
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1202} get_page($p1924);
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1203} $p1925 := lowmem_page_address($p1924);
    goto corral_source_split_5148;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    $i1926 := $p2i.ref.i64($p1925);
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1204} gnttab_end_foreign_access($i1918, 0, $i1926);
    goto corral_source_split_5150;

  corral_source_split_5150:
    assume {:verifier.code 0} true;
    $p1928 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(106, 4));
    goto corral_source_split_5151;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1928, 0);
    goto corral_source_split_5152;

  corral_source_split_5152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1205} kfree_skb($p1913);
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    goto $bb858;

  $bb858:
    assume {:verifier.code 0} true;
    goto $bb859;

  $bb859:
    assume {:verifier.code 0} true;
    $p1930 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(107, 8));
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    $p1931 := $load.ref($M.0, $p1930);
    goto corral_source_split_5156;

  corral_source_split_5156:
    assume {:verifier.code 0} true;
    $i1932 := $p2i.ref.i64($p1931);
    goto corral_source_split_5157;

  corral_source_split_5157:
    assume {:verifier.code 0} true;
    $i1933 := $eq.i64($i1932, 0);
    goto corral_source_split_5158;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1933} true;
    goto $bb860, $bb861;

  $bb861:
    assume !($i1933 == 1);
    assume {:verifier.code 0} true;
    goto $bb862;

  $bb862:
    assume {:verifier.code 0} true;
    $p1935 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(107, 4));
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    $i1936 := $load.i32($M.0, $p1935);
    goto corral_source_split_5163;

  corral_source_split_5163:
    assume {:verifier.code 0} true;
    $i1937 := $eq.i32($i1936, 0);
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1937} true;
    goto $bb863, $bb864;

  $bb864:
    assume !($i1937 == 1);
    assume {:verifier.code 0} true;
    goto $bb865;

  $bb865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1206} $p1938 := skb_end_pointer($p1931);
    goto corral_source_split_5168;

  corral_source_split_5168:
    assume {:verifier.code 0} true;
    $p1939 := $bitcast.ref.ref($p1938);
    goto corral_source_split_5169;

  corral_source_split_5169:
    assume {:verifier.code 0} true;
    $p1940 := $add.ref($add.ref($p1939, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    $p1941 := $bitcast.ref.ref($p1940);
    goto corral_source_split_5171;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1207} $p1942 := skb_frag_page($p1941);
    goto corral_source_split_5172;

  corral_source_split_5172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1208} get_page($p1942);
    goto corral_source_split_5173;

  corral_source_split_5173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1209} $p1943 := lowmem_page_address($p1942);
    goto corral_source_split_5174;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    $i1944 := $p2i.ref.i64($p1943);
    goto corral_source_split_5175;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1210} gnttab_end_foreign_access($i1936, 0, $i1944);
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    $p1946 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(107, 4));
    goto corral_source_split_5177;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1946, 0);
    goto corral_source_split_5178;

  corral_source_split_5178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1211} kfree_skb($p1931);
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    goto $bb866;

  $bb866:
    assume {:verifier.code 0} true;
    goto $bb867;

  $bb867:
    assume {:verifier.code 0} true;
    $p1948 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(108, 8));
    goto corral_source_split_5181;

  corral_source_split_5181:
    assume {:verifier.code 0} true;
    $p1949 := $load.ref($M.0, $p1948);
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    $i1950 := $p2i.ref.i64($p1949);
    goto corral_source_split_5183;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    $i1951 := $eq.i64($i1950, 0);
    goto corral_source_split_5184;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1951} true;
    goto $bb868, $bb869;

  $bb869:
    assume !($i1951 == 1);
    assume {:verifier.code 0} true;
    goto $bb870;

  $bb870:
    assume {:verifier.code 0} true;
    $p1953 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(108, 4));
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    $i1954 := $load.i32($M.0, $p1953);
    goto corral_source_split_5189;

  corral_source_split_5189:
    assume {:verifier.code 0} true;
    $i1955 := $eq.i32($i1954, 0);
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1955} true;
    goto $bb871, $bb872;

  $bb872:
    assume !($i1955 == 1);
    assume {:verifier.code 0} true;
    goto $bb873;

  $bb873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1212} $p1956 := skb_end_pointer($p1949);
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    $p1957 := $bitcast.ref.ref($p1956);
    goto corral_source_split_5195;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    $p1958 := $add.ref($add.ref($p1957, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_5196;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    $p1959 := $bitcast.ref.ref($p1958);
    goto corral_source_split_5197;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1213} $p1960 := skb_frag_page($p1959);
    goto corral_source_split_5198;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1214} get_page($p1960);
    goto corral_source_split_5199;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1215} $p1961 := lowmem_page_address($p1960);
    goto corral_source_split_5200;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    $i1962 := $p2i.ref.i64($p1961);
    goto corral_source_split_5201;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1216} gnttab_end_foreign_access($i1954, 0, $i1962);
    goto corral_source_split_5202;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    $p1964 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(108, 4));
    goto corral_source_split_5203;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1964, 0);
    goto corral_source_split_5204;

  corral_source_split_5204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1217} kfree_skb($p1949);
    goto corral_source_split_5205;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    goto $bb874;

  $bb874:
    assume {:verifier.code 0} true;
    goto $bb875;

  $bb875:
    assume {:verifier.code 0} true;
    $p1966 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(109, 8));
    goto corral_source_split_5207;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    $p1967 := $load.ref($M.0, $p1966);
    goto corral_source_split_5208;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    $i1968 := $p2i.ref.i64($p1967);
    goto corral_source_split_5209;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    $i1969 := $eq.i64($i1968, 0);
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1969} true;
    goto $bb876, $bb877;

  $bb877:
    assume !($i1969 == 1);
    assume {:verifier.code 0} true;
    goto $bb878;

  $bb878:
    assume {:verifier.code 0} true;
    $p1971 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(109, 4));
    goto corral_source_split_5214;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    $i1972 := $load.i32($M.0, $p1971);
    goto corral_source_split_5215;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    $i1973 := $eq.i32($i1972, 0);
    goto corral_source_split_5216;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1973} true;
    goto $bb879, $bb880;

  $bb880:
    assume !($i1973 == 1);
    assume {:verifier.code 0} true;
    goto $bb881;

  $bb881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1218} $p1974 := skb_end_pointer($p1967);
    goto corral_source_split_5220;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    $p1975 := $bitcast.ref.ref($p1974);
    goto corral_source_split_5221;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    $p1976 := $add.ref($add.ref($p1975, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_5222;

  corral_source_split_5222:
    assume {:verifier.code 0} true;
    $p1977 := $bitcast.ref.ref($p1976);
    goto corral_source_split_5223;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1219} $p1978 := skb_frag_page($p1977);
    goto corral_source_split_5224;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1220} get_page($p1978);
    goto corral_source_split_5225;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1221} $p1979 := lowmem_page_address($p1978);
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    $i1980 := $p2i.ref.i64($p1979);
    goto corral_source_split_5227;

  corral_source_split_5227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1222} gnttab_end_foreign_access($i1972, 0, $i1980);
    goto corral_source_split_5228;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    $p1982 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(109, 4));
    goto corral_source_split_5229;

  corral_source_split_5229:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1982, 0);
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1223} kfree_skb($p1967);
    goto corral_source_split_5231;

  corral_source_split_5231:
    assume {:verifier.code 0} true;
    goto $bb882;

  $bb882:
    assume {:verifier.code 0} true;
    goto $bb883;

  $bb883:
    assume {:verifier.code 0} true;
    $p1984 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(110, 8));
    goto corral_source_split_5233;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    $p1985 := $load.ref($M.0, $p1984);
    goto corral_source_split_5234;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    $i1986 := $p2i.ref.i64($p1985);
    goto corral_source_split_5235;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    $i1987 := $eq.i64($i1986, 0);
    goto corral_source_split_5236;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1987} true;
    goto $bb884, $bb885;

  $bb885:
    assume !($i1987 == 1);
    assume {:verifier.code 0} true;
    goto $bb886;

  $bb886:
    assume {:verifier.code 0} true;
    $p1989 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(110, 4));
    goto corral_source_split_5240;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    $i1990 := $load.i32($M.0, $p1989);
    goto corral_source_split_5241;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    $i1991 := $eq.i32($i1990, 0);
    goto corral_source_split_5242;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1991} true;
    goto $bb887, $bb888;

  $bb888:
    assume !($i1991 == 1);
    assume {:verifier.code 0} true;
    goto $bb889;

  $bb889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1224} $p1992 := skb_end_pointer($p1985);
    goto corral_source_split_5246;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    $p1993 := $bitcast.ref.ref($p1992);
    goto corral_source_split_5247;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    $p1994 := $add.ref($add.ref($p1993, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_5248;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    $p1995 := $bitcast.ref.ref($p1994);
    goto corral_source_split_5249;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1225} $p1996 := skb_frag_page($p1995);
    goto corral_source_split_5250;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1226} get_page($p1996);
    goto corral_source_split_5251;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1227} $p1997 := lowmem_page_address($p1996);
    goto corral_source_split_5252;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    $i1998 := $p2i.ref.i64($p1997);
    goto corral_source_split_5253;

  corral_source_split_5253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1228} gnttab_end_foreign_access($i1990, 0, $i1998);
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    $p2000 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(110, 4));
    goto corral_source_split_5255;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2000, 0);
    goto corral_source_split_5256;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1229} kfree_skb($p1985);
    goto corral_source_split_5257;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    goto $bb890;

  $bb890:
    assume {:verifier.code 0} true;
    goto $bb891;

  $bb891:
    assume {:verifier.code 0} true;
    $p2002 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(111, 8));
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    $p2003 := $load.ref($M.0, $p2002);
    goto corral_source_split_5260;

  corral_source_split_5260:
    assume {:verifier.code 0} true;
    $i2004 := $p2i.ref.i64($p2003);
    goto corral_source_split_5261;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    $i2005 := $eq.i64($i2004, 0);
    goto corral_source_split_5262;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2005} true;
    goto $bb892, $bb893;

  $bb893:
    assume !($i2005 == 1);
    assume {:verifier.code 0} true;
    goto $bb894;

  $bb894:
    assume {:verifier.code 0} true;
    $p2007 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(111, 4));
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    $i2008 := $load.i32($M.0, $p2007);
    goto corral_source_split_5267;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    $i2009 := $eq.i32($i2008, 0);
    goto corral_source_split_5268;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2009} true;
    goto $bb895, $bb896;

  $bb896:
    assume !($i2009 == 1);
    assume {:verifier.code 0} true;
    goto $bb897;

  $bb897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1230} $p2010 := skb_end_pointer($p2003);
    goto corral_source_split_5272;

  corral_source_split_5272:
    assume {:verifier.code 0} true;
    $p2011 := $bitcast.ref.ref($p2010);
    goto corral_source_split_5273;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    $p2012 := $add.ref($add.ref($p2011, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_5274;

  corral_source_split_5274:
    assume {:verifier.code 0} true;
    $p2013 := $bitcast.ref.ref($p2012);
    goto corral_source_split_5275;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1231} $p2014 := skb_frag_page($p2013);
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1232} get_page($p2014);
    goto corral_source_split_5277;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1233} $p2015 := lowmem_page_address($p2014);
    goto corral_source_split_5278;

  corral_source_split_5278:
    assume {:verifier.code 0} true;
    $i2016 := $p2i.ref.i64($p2015);
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1234} gnttab_end_foreign_access($i2008, 0, $i2016);
    goto corral_source_split_5280;

  corral_source_split_5280:
    assume {:verifier.code 0} true;
    $p2018 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(111, 4));
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2018, 0);
    goto corral_source_split_5282;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1235} kfree_skb($p2003);
    goto corral_source_split_5283;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    goto $bb898;

  $bb898:
    assume {:verifier.code 0} true;
    goto $bb899;

  $bb899:
    assume {:verifier.code 0} true;
    $p2020 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(112, 8));
    goto corral_source_split_5285;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    $p2021 := $load.ref($M.0, $p2020);
    goto corral_source_split_5286;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    $i2022 := $p2i.ref.i64($p2021);
    goto corral_source_split_5287;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    $i2023 := $eq.i64($i2022, 0);
    goto corral_source_split_5288;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2023} true;
    goto $bb900, $bb901;

  $bb901:
    assume !($i2023 == 1);
    assume {:verifier.code 0} true;
    goto $bb902;

  $bb902:
    assume {:verifier.code 0} true;
    $p2025 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(112, 4));
    goto corral_source_split_5292;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    $i2026 := $load.i32($M.0, $p2025);
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    $i2027 := $eq.i32($i2026, 0);
    goto corral_source_split_5294;

  corral_source_split_5294:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2027} true;
    goto $bb903, $bb904;

  $bb904:
    assume !($i2027 == 1);
    assume {:verifier.code 0} true;
    goto $bb905;

  $bb905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1236} $p2028 := skb_end_pointer($p2021);
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    $p2029 := $bitcast.ref.ref($p2028);
    goto corral_source_split_5299;

  corral_source_split_5299:
    assume {:verifier.code 0} true;
    $p2030 := $add.ref($add.ref($p2029, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_5300;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    $p2031 := $bitcast.ref.ref($p2030);
    goto corral_source_split_5301;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1237} $p2032 := skb_frag_page($p2031);
    goto corral_source_split_5302;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1238} get_page($p2032);
    goto corral_source_split_5303;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1239} $p2033 := lowmem_page_address($p2032);
    goto corral_source_split_5304;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    $i2034 := $p2i.ref.i64($p2033);
    goto corral_source_split_5305;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1240} gnttab_end_foreign_access($i2026, 0, $i2034);
    goto corral_source_split_5306;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    $p2036 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(112, 4));
    goto corral_source_split_5307;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2036, 0);
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1241} kfree_skb($p2021);
    goto corral_source_split_5309;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    goto $bb906;

  $bb906:
    assume {:verifier.code 0} true;
    goto $bb907;

  $bb907:
    assume {:verifier.code 0} true;
    $p2038 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(113, 8));
    goto corral_source_split_5311;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    $p2039 := $load.ref($M.0, $p2038);
    goto corral_source_split_5312;

  corral_source_split_5312:
    assume {:verifier.code 0} true;
    $i2040 := $p2i.ref.i64($p2039);
    goto corral_source_split_5313;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    $i2041 := $eq.i64($i2040, 0);
    goto corral_source_split_5314;

  corral_source_split_5314:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2041} true;
    goto $bb908, $bb909;

  $bb909:
    assume !($i2041 == 1);
    assume {:verifier.code 0} true;
    goto $bb910;

  $bb910:
    assume {:verifier.code 0} true;
    $p2043 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(113, 4));
    goto corral_source_split_5318;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    $i2044 := $load.i32($M.0, $p2043);
    goto corral_source_split_5319;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    $i2045 := $eq.i32($i2044, 0);
    goto corral_source_split_5320;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2045} true;
    goto $bb911, $bb912;

  $bb912:
    assume !($i2045 == 1);
    assume {:verifier.code 0} true;
    goto $bb913;

  $bb913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1242} $p2046 := skb_end_pointer($p2039);
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    $p2047 := $bitcast.ref.ref($p2046);
    goto corral_source_split_5325;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    $p2048 := $add.ref($add.ref($p2047, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_5326;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    $p2049 := $bitcast.ref.ref($p2048);
    goto corral_source_split_5327;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1243} $p2050 := skb_frag_page($p2049);
    goto corral_source_split_5328;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1244} get_page($p2050);
    goto corral_source_split_5329;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1245} $p2051 := lowmem_page_address($p2050);
    goto corral_source_split_5330;

  corral_source_split_5330:
    assume {:verifier.code 0} true;
    $i2052 := $p2i.ref.i64($p2051);
    goto corral_source_split_5331;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1246} gnttab_end_foreign_access($i2044, 0, $i2052);
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    $p2054 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(113, 4));
    goto corral_source_split_5333;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2054, 0);
    goto corral_source_split_5334;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1247} kfree_skb($p2039);
    goto corral_source_split_5335;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    goto $bb914;

  $bb914:
    assume {:verifier.code 0} true;
    goto $bb915;

  $bb915:
    assume {:verifier.code 0} true;
    $p2056 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(114, 8));
    goto corral_source_split_5337;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    $p2057 := $load.ref($M.0, $p2056);
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    $i2058 := $p2i.ref.i64($p2057);
    goto corral_source_split_5339;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    $i2059 := $eq.i64($i2058, 0);
    goto corral_source_split_5340;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2059} true;
    goto $bb916, $bb917;

  $bb917:
    assume !($i2059 == 1);
    assume {:verifier.code 0} true;
    goto $bb918;

  $bb918:
    assume {:verifier.code 0} true;
    $p2061 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(114, 4));
    goto corral_source_split_5344;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    $i2062 := $load.i32($M.0, $p2061);
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    $i2063 := $eq.i32($i2062, 0);
    goto corral_source_split_5346;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2063} true;
    goto $bb919, $bb920;

  $bb920:
    assume !($i2063 == 1);
    assume {:verifier.code 0} true;
    goto $bb921;

  $bb921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1248} $p2064 := skb_end_pointer($p2057);
    goto corral_source_split_5350;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    $p2065 := $bitcast.ref.ref($p2064);
    goto corral_source_split_5351;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    $p2066 := $add.ref($add.ref($p2065, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_5352;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    $p2067 := $bitcast.ref.ref($p2066);
    goto corral_source_split_5353;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1249} $p2068 := skb_frag_page($p2067);
    goto corral_source_split_5354;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1250} get_page($p2068);
    goto corral_source_split_5355;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1251} $p2069 := lowmem_page_address($p2068);
    goto corral_source_split_5356;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    $i2070 := $p2i.ref.i64($p2069);
    goto corral_source_split_5357;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1252} gnttab_end_foreign_access($i2062, 0, $i2070);
    goto corral_source_split_5358;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    $p2072 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(114, 4));
    goto corral_source_split_5359;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2072, 0);
    goto corral_source_split_5360;

  corral_source_split_5360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1253} kfree_skb($p2057);
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    goto $bb922;

  $bb922:
    assume {:verifier.code 0} true;
    goto $bb923;

  $bb923:
    assume {:verifier.code 0} true;
    $p2074 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(115, 8));
    goto corral_source_split_5363;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    $p2075 := $load.ref($M.0, $p2074);
    goto corral_source_split_5364;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    $i2076 := $p2i.ref.i64($p2075);
    goto corral_source_split_5365;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    $i2077 := $eq.i64($i2076, 0);
    goto corral_source_split_5366;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2077} true;
    goto $bb924, $bb925;

  $bb925:
    assume !($i2077 == 1);
    assume {:verifier.code 0} true;
    goto $bb926;

  $bb926:
    assume {:verifier.code 0} true;
    $p2079 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(115, 4));
    goto corral_source_split_5370;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    $i2080 := $load.i32($M.0, $p2079);
    goto corral_source_split_5371;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    $i2081 := $eq.i32($i2080, 0);
    goto corral_source_split_5372;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2081} true;
    goto $bb927, $bb928;

  $bb928:
    assume !($i2081 == 1);
    assume {:verifier.code 0} true;
    goto $bb929;

  $bb929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1254} $p2082 := skb_end_pointer($p2075);
    goto corral_source_split_5376;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    $p2083 := $bitcast.ref.ref($p2082);
    goto corral_source_split_5377;

  corral_source_split_5377:
    assume {:verifier.code 0} true;
    $p2084 := $add.ref($add.ref($p2083, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_5378;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    $p2085 := $bitcast.ref.ref($p2084);
    goto corral_source_split_5379;

  corral_source_split_5379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1255} $p2086 := skb_frag_page($p2085);
    goto corral_source_split_5380;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1256} get_page($p2086);
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1257} $p2087 := lowmem_page_address($p2086);
    goto corral_source_split_5382;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    $i2088 := $p2i.ref.i64($p2087);
    goto corral_source_split_5383;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1258} gnttab_end_foreign_access($i2080, 0, $i2088);
    goto corral_source_split_5384;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    $p2090 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(115, 4));
    goto corral_source_split_5385;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2090, 0);
    goto corral_source_split_5386;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1259} kfree_skb($p2075);
    goto corral_source_split_5387;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    goto $bb930;

  $bb930:
    assume {:verifier.code 0} true;
    goto $bb931;

  $bb931:
    assume {:verifier.code 0} true;
    $p2092 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(116, 8));
    goto corral_source_split_5389;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    $p2093 := $load.ref($M.0, $p2092);
    goto corral_source_split_5390;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    $i2094 := $p2i.ref.i64($p2093);
    goto corral_source_split_5391;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    $i2095 := $eq.i64($i2094, 0);
    goto corral_source_split_5392;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2095} true;
    goto $bb932, $bb933;

  $bb933:
    assume !($i2095 == 1);
    assume {:verifier.code 0} true;
    goto $bb934;

  $bb934:
    assume {:verifier.code 0} true;
    $p2097 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(116, 4));
    goto corral_source_split_5396;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    $i2098 := $load.i32($M.0, $p2097);
    goto corral_source_split_5397;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    $i2099 := $eq.i32($i2098, 0);
    goto corral_source_split_5398;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2099} true;
    goto $bb935, $bb936;

  $bb936:
    assume !($i2099 == 1);
    assume {:verifier.code 0} true;
    goto $bb937;

  $bb937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1260} $p2100 := skb_end_pointer($p2093);
    goto corral_source_split_5402;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    $p2101 := $bitcast.ref.ref($p2100);
    goto corral_source_split_5403;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    $p2102 := $add.ref($add.ref($p2101, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_5404;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    $p2103 := $bitcast.ref.ref($p2102);
    goto corral_source_split_5405;

  corral_source_split_5405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1261} $p2104 := skb_frag_page($p2103);
    goto corral_source_split_5406;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1262} get_page($p2104);
    goto corral_source_split_5407;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1263} $p2105 := lowmem_page_address($p2104);
    goto corral_source_split_5408;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    $i2106 := $p2i.ref.i64($p2105);
    goto corral_source_split_5409;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1264} gnttab_end_foreign_access($i2098, 0, $i2106);
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    $p2108 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(116, 4));
    goto corral_source_split_5411;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2108, 0);
    goto corral_source_split_5412;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1265} kfree_skb($p2093);
    goto corral_source_split_5413;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    goto $bb938;

  $bb938:
    assume {:verifier.code 0} true;
    goto $bb939;

  $bb939:
    assume {:verifier.code 0} true;
    $p2110 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(117, 8));
    goto corral_source_split_5415;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    $p2111 := $load.ref($M.0, $p2110);
    goto corral_source_split_5416;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    $i2112 := $p2i.ref.i64($p2111);
    goto corral_source_split_5417;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    $i2113 := $eq.i64($i2112, 0);
    goto corral_source_split_5418;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2113} true;
    goto $bb940, $bb941;

  $bb941:
    assume !($i2113 == 1);
    assume {:verifier.code 0} true;
    goto $bb942;

  $bb942:
    assume {:verifier.code 0} true;
    $p2115 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(117, 4));
    goto corral_source_split_5422;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    $i2116 := $load.i32($M.0, $p2115);
    goto corral_source_split_5423;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    $i2117 := $eq.i32($i2116, 0);
    goto corral_source_split_5424;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2117} true;
    goto $bb943, $bb944;

  $bb944:
    assume !($i2117 == 1);
    assume {:verifier.code 0} true;
    goto $bb945;

  $bb945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1266} $p2118 := skb_end_pointer($p2111);
    goto corral_source_split_5428;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    $p2119 := $bitcast.ref.ref($p2118);
    goto corral_source_split_5429;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    $p2120 := $add.ref($add.ref($p2119, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_5430;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    $p2121 := $bitcast.ref.ref($p2120);
    goto corral_source_split_5431;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1267} $p2122 := skb_frag_page($p2121);
    goto corral_source_split_5432;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1268} get_page($p2122);
    goto corral_source_split_5433;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1269} $p2123 := lowmem_page_address($p2122);
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    $i2124 := $p2i.ref.i64($p2123);
    goto corral_source_split_5435;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1270} gnttab_end_foreign_access($i2116, 0, $i2124);
    goto corral_source_split_5436;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    $p2126 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(117, 4));
    goto corral_source_split_5437;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2126, 0);
    goto corral_source_split_5438;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1271} kfree_skb($p2111);
    goto corral_source_split_5439;

  corral_source_split_5439:
    assume {:verifier.code 0} true;
    goto $bb946;

  $bb946:
    assume {:verifier.code 0} true;
    goto $bb947;

  $bb947:
    assume {:verifier.code 0} true;
    $p2128 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(118, 8));
    goto corral_source_split_5441;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    $p2129 := $load.ref($M.0, $p2128);
    goto corral_source_split_5442;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    $i2130 := $p2i.ref.i64($p2129);
    goto corral_source_split_5443;

  corral_source_split_5443:
    assume {:verifier.code 0} true;
    $i2131 := $eq.i64($i2130, 0);
    goto corral_source_split_5444;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2131} true;
    goto $bb948, $bb949;

  $bb949:
    assume !($i2131 == 1);
    assume {:verifier.code 0} true;
    goto $bb950;

  $bb950:
    assume {:verifier.code 0} true;
    $p2133 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(118, 4));
    goto corral_source_split_5448;

  corral_source_split_5448:
    assume {:verifier.code 0} true;
    $i2134 := $load.i32($M.0, $p2133);
    goto corral_source_split_5449;

  corral_source_split_5449:
    assume {:verifier.code 0} true;
    $i2135 := $eq.i32($i2134, 0);
    goto corral_source_split_5450;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2135} true;
    goto $bb951, $bb952;

  $bb952:
    assume !($i2135 == 1);
    assume {:verifier.code 0} true;
    goto $bb953;

  $bb953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1272} $p2136 := skb_end_pointer($p2129);
    goto corral_source_split_5454;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    $p2137 := $bitcast.ref.ref($p2136);
    goto corral_source_split_5455;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    $p2138 := $add.ref($add.ref($p2137, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_5456;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    $p2139 := $bitcast.ref.ref($p2138);
    goto corral_source_split_5457;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1273} $p2140 := skb_frag_page($p2139);
    goto corral_source_split_5458;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1274} get_page($p2140);
    goto corral_source_split_5459;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1275} $p2141 := lowmem_page_address($p2140);
    goto corral_source_split_5460;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    $i2142 := $p2i.ref.i64($p2141);
    goto corral_source_split_5461;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1276} gnttab_end_foreign_access($i2134, 0, $i2142);
    goto corral_source_split_5462;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    $p2144 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(118, 4));
    goto corral_source_split_5463;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2144, 0);
    goto corral_source_split_5464;

  corral_source_split_5464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1277} kfree_skb($p2129);
    goto corral_source_split_5465;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    goto $bb954;

  $bb954:
    assume {:verifier.code 0} true;
    goto $bb955;

  $bb955:
    assume {:verifier.code 0} true;
    $p2146 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(119, 8));
    goto corral_source_split_5467;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    $p2147 := $load.ref($M.0, $p2146);
    goto corral_source_split_5468;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    $i2148 := $p2i.ref.i64($p2147);
    goto corral_source_split_5469;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    $i2149 := $eq.i64($i2148, 0);
    goto corral_source_split_5470;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2149} true;
    goto $bb956, $bb957;

  $bb957:
    assume !($i2149 == 1);
    assume {:verifier.code 0} true;
    goto $bb958;

  $bb958:
    assume {:verifier.code 0} true;
    $p2151 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(119, 4));
    goto corral_source_split_5474;

  corral_source_split_5474:
    assume {:verifier.code 0} true;
    $i2152 := $load.i32($M.0, $p2151);
    goto corral_source_split_5475;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    $i2153 := $eq.i32($i2152, 0);
    goto corral_source_split_5476;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2153} true;
    goto $bb959, $bb960;

  $bb960:
    assume !($i2153 == 1);
    assume {:verifier.code 0} true;
    goto $bb961;

  $bb961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1278} $p2154 := skb_end_pointer($p2147);
    goto corral_source_split_5480;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    $p2155 := $bitcast.ref.ref($p2154);
    goto corral_source_split_5481;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    $p2156 := $add.ref($add.ref($p2155, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_5482;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    $p2157 := $bitcast.ref.ref($p2156);
    goto corral_source_split_5483;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1279} $p2158 := skb_frag_page($p2157);
    goto corral_source_split_5484;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1280} get_page($p2158);
    goto corral_source_split_5485;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1281} $p2159 := lowmem_page_address($p2158);
    goto corral_source_split_5486;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    $i2160 := $p2i.ref.i64($p2159);
    goto corral_source_split_5487;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1282} gnttab_end_foreign_access($i2152, 0, $i2160);
    goto corral_source_split_5488;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    $p2162 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(119, 4));
    goto corral_source_split_5489;

  corral_source_split_5489:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2162, 0);
    goto corral_source_split_5490;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1283} kfree_skb($p2147);
    goto corral_source_split_5491;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    goto $bb962;

  $bb962:
    assume {:verifier.code 0} true;
    goto $bb963;

  $bb963:
    assume {:verifier.code 0} true;
    $p2164 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(120, 8));
    goto corral_source_split_5493;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    $p2165 := $load.ref($M.0, $p2164);
    goto corral_source_split_5494;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    $i2166 := $p2i.ref.i64($p2165);
    goto corral_source_split_5495;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    $i2167 := $eq.i64($i2166, 0);
    goto corral_source_split_5496;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2167} true;
    goto $bb964, $bb965;

  $bb965:
    assume !($i2167 == 1);
    assume {:verifier.code 0} true;
    goto $bb966;

  $bb966:
    assume {:verifier.code 0} true;
    $p2169 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(120, 4));
    goto corral_source_split_5500;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    $i2170 := $load.i32($M.0, $p2169);
    goto corral_source_split_5501;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    $i2171 := $eq.i32($i2170, 0);
    goto corral_source_split_5502;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2171} true;
    goto $bb967, $bb968;

  $bb968:
    assume !($i2171 == 1);
    assume {:verifier.code 0} true;
    goto $bb969;

  $bb969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1284} $p2172 := skb_end_pointer($p2165);
    goto corral_source_split_5506;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    $p2173 := $bitcast.ref.ref($p2172);
    goto corral_source_split_5507;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    $p2174 := $add.ref($add.ref($p2173, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_5508;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    $p2175 := $bitcast.ref.ref($p2174);
    goto corral_source_split_5509;

  corral_source_split_5509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1285} $p2176 := skb_frag_page($p2175);
    goto corral_source_split_5510;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1286} get_page($p2176);
    goto corral_source_split_5511;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1287} $p2177 := lowmem_page_address($p2176);
    goto corral_source_split_5512;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    $i2178 := $p2i.ref.i64($p2177);
    goto corral_source_split_5513;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1288} gnttab_end_foreign_access($i2170, 0, $i2178);
    goto corral_source_split_5514;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    $p2180 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(120, 4));
    goto corral_source_split_5515;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2180, 0);
    goto corral_source_split_5516;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1289} kfree_skb($p2165);
    goto corral_source_split_5517;

  corral_source_split_5517:
    assume {:verifier.code 0} true;
    goto $bb970;

  $bb970:
    assume {:verifier.code 0} true;
    goto $bb971;

  $bb971:
    assume {:verifier.code 0} true;
    $p2182 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(121, 8));
    goto corral_source_split_5519;

  corral_source_split_5519:
    assume {:verifier.code 0} true;
    $p2183 := $load.ref($M.0, $p2182);
    goto corral_source_split_5520;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    $i2184 := $p2i.ref.i64($p2183);
    goto corral_source_split_5521;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    $i2185 := $eq.i64($i2184, 0);
    goto corral_source_split_5522;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2185} true;
    goto $bb972, $bb973;

  $bb973:
    assume !($i2185 == 1);
    assume {:verifier.code 0} true;
    goto $bb974;

  $bb974:
    assume {:verifier.code 0} true;
    $p2187 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(121, 4));
    goto corral_source_split_5526;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    $i2188 := $load.i32($M.0, $p2187);
    goto corral_source_split_5527;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    $i2189 := $eq.i32($i2188, 0);
    goto corral_source_split_5528;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2189} true;
    goto $bb975, $bb976;

  $bb976:
    assume !($i2189 == 1);
    assume {:verifier.code 0} true;
    goto $bb977;

  $bb977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1290} $p2190 := skb_end_pointer($p2183);
    goto corral_source_split_5532;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    $p2191 := $bitcast.ref.ref($p2190);
    goto corral_source_split_5533;

  corral_source_split_5533:
    assume {:verifier.code 0} true;
    $p2192 := $add.ref($add.ref($p2191, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_5534;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    $p2193 := $bitcast.ref.ref($p2192);
    goto corral_source_split_5535;

  corral_source_split_5535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1291} $p2194 := skb_frag_page($p2193);
    goto corral_source_split_5536;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1292} get_page($p2194);
    goto corral_source_split_5537;

  corral_source_split_5537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1293} $p2195 := lowmem_page_address($p2194);
    goto corral_source_split_5538;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    $i2196 := $p2i.ref.i64($p2195);
    goto corral_source_split_5539;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1294} gnttab_end_foreign_access($i2188, 0, $i2196);
    goto corral_source_split_5540;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    $p2198 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(121, 4));
    goto corral_source_split_5541;

  corral_source_split_5541:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2198, 0);
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1295} kfree_skb($p2183);
    goto corral_source_split_5543;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    goto $bb978;

  $bb978:
    assume {:verifier.code 0} true;
    goto $bb979;

  $bb979:
    assume {:verifier.code 0} true;
    $p2200 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(122, 8));
    goto corral_source_split_5545;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    $p2201 := $load.ref($M.0, $p2200);
    goto corral_source_split_5546;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    $i2202 := $p2i.ref.i64($p2201);
    goto corral_source_split_5547;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    $i2203 := $eq.i64($i2202, 0);
    goto corral_source_split_5548;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2203} true;
    goto $bb980, $bb981;

  $bb981:
    assume !($i2203 == 1);
    assume {:verifier.code 0} true;
    goto $bb982;

  $bb982:
    assume {:verifier.code 0} true;
    $p2205 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(122, 4));
    goto corral_source_split_5552;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    $i2206 := $load.i32($M.0, $p2205);
    goto corral_source_split_5553;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    $i2207 := $eq.i32($i2206, 0);
    goto corral_source_split_5554;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2207} true;
    goto $bb983, $bb984;

  $bb984:
    assume !($i2207 == 1);
    assume {:verifier.code 0} true;
    goto $bb985;

  $bb985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1296} $p2208 := skb_end_pointer($p2201);
    goto corral_source_split_5558;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    $p2209 := $bitcast.ref.ref($p2208);
    goto corral_source_split_5559;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    $p2210 := $add.ref($add.ref($p2209, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_5560;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    $p2211 := $bitcast.ref.ref($p2210);
    goto corral_source_split_5561;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1297} $p2212 := skb_frag_page($p2211);
    goto corral_source_split_5562;

  corral_source_split_5562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1298} get_page($p2212);
    goto corral_source_split_5563;

  corral_source_split_5563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1299} $p2213 := lowmem_page_address($p2212);
    goto corral_source_split_5564;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    $i2214 := $p2i.ref.i64($p2213);
    goto corral_source_split_5565;

  corral_source_split_5565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1300} gnttab_end_foreign_access($i2206, 0, $i2214);
    goto corral_source_split_5566;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    $p2216 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(122, 4));
    goto corral_source_split_5567;

  corral_source_split_5567:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2216, 0);
    goto corral_source_split_5568;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1301} kfree_skb($p2201);
    goto corral_source_split_5569;

  corral_source_split_5569:
    assume {:verifier.code 0} true;
    goto $bb986;

  $bb986:
    assume {:verifier.code 0} true;
    goto $bb987;

  $bb987:
    assume {:verifier.code 0} true;
    $p2218 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(123, 8));
    goto corral_source_split_5571;

  corral_source_split_5571:
    assume {:verifier.code 0} true;
    $p2219 := $load.ref($M.0, $p2218);
    goto corral_source_split_5572;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    $i2220 := $p2i.ref.i64($p2219);
    goto corral_source_split_5573;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    $i2221 := $eq.i64($i2220, 0);
    goto corral_source_split_5574;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2221} true;
    goto $bb988, $bb989;

  $bb989:
    assume !($i2221 == 1);
    assume {:verifier.code 0} true;
    goto $bb990;

  $bb990:
    assume {:verifier.code 0} true;
    $p2223 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(123, 4));
    goto corral_source_split_5578;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    $i2224 := $load.i32($M.0, $p2223);
    goto corral_source_split_5579;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    $i2225 := $eq.i32($i2224, 0);
    goto corral_source_split_5580;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2225} true;
    goto $bb991, $bb992;

  $bb992:
    assume !($i2225 == 1);
    assume {:verifier.code 0} true;
    goto $bb993;

  $bb993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1302} $p2226 := skb_end_pointer($p2219);
    goto corral_source_split_5584;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    $p2227 := $bitcast.ref.ref($p2226);
    goto corral_source_split_5585;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    $p2228 := $add.ref($add.ref($p2227, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_5586;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    $p2229 := $bitcast.ref.ref($p2228);
    goto corral_source_split_5587;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1303} $p2230 := skb_frag_page($p2229);
    goto corral_source_split_5588;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1304} get_page($p2230);
    goto corral_source_split_5589;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1305} $p2231 := lowmem_page_address($p2230);
    goto corral_source_split_5590;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    $i2232 := $p2i.ref.i64($p2231);
    goto corral_source_split_5591;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1306} gnttab_end_foreign_access($i2224, 0, $i2232);
    goto corral_source_split_5592;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    $p2234 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(123, 4));
    goto corral_source_split_5593;

  corral_source_split_5593:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2234, 0);
    goto corral_source_split_5594;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1307} kfree_skb($p2219);
    goto corral_source_split_5595;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    goto $bb994;

  $bb994:
    assume {:verifier.code 0} true;
    goto $bb995;

  $bb995:
    assume {:verifier.code 0} true;
    $p2236 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(124, 8));
    goto corral_source_split_5597;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    $p2237 := $load.ref($M.0, $p2236);
    goto corral_source_split_5598;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    $i2238 := $p2i.ref.i64($p2237);
    goto corral_source_split_5599;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    $i2239 := $eq.i64($i2238, 0);
    goto corral_source_split_5600;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2239} true;
    goto $bb996, $bb997;

  $bb997:
    assume !($i2239 == 1);
    assume {:verifier.code 0} true;
    goto $bb998;

  $bb998:
    assume {:verifier.code 0} true;
    $p2241 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(124, 4));
    goto corral_source_split_5604;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    $i2242 := $load.i32($M.0, $p2241);
    goto corral_source_split_5605;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    $i2243 := $eq.i32($i2242, 0);
    goto corral_source_split_5606;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2243} true;
    goto $bb999, $bb1000;

  $bb1000:
    assume !($i2243 == 1);
    assume {:verifier.code 0} true;
    goto $bb1001;

  $bb1001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1308} $p2244 := skb_end_pointer($p2237);
    goto corral_source_split_5610;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    $p2245 := $bitcast.ref.ref($p2244);
    goto corral_source_split_5611;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    $p2246 := $add.ref($add.ref($p2245, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_5612;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    $p2247 := $bitcast.ref.ref($p2246);
    goto corral_source_split_5613;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1309} $p2248 := skb_frag_page($p2247);
    goto corral_source_split_5614;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1310} get_page($p2248);
    goto corral_source_split_5615;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1311} $p2249 := lowmem_page_address($p2248);
    goto corral_source_split_5616;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    $i2250 := $p2i.ref.i64($p2249);
    goto corral_source_split_5617;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1312} gnttab_end_foreign_access($i2242, 0, $i2250);
    goto corral_source_split_5618;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    $p2252 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(124, 4));
    goto corral_source_split_5619;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2252, 0);
    goto corral_source_split_5620;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1313} kfree_skb($p2237);
    goto corral_source_split_5621;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    goto $bb1002;

  $bb1002:
    assume {:verifier.code 0} true;
    goto $bb1003;

  $bb1003:
    assume {:verifier.code 0} true;
    $p2254 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(125, 8));
    goto corral_source_split_5623;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    $p2255 := $load.ref($M.0, $p2254);
    goto corral_source_split_5624;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    $i2256 := $p2i.ref.i64($p2255);
    goto corral_source_split_5625;

  corral_source_split_5625:
    assume {:verifier.code 0} true;
    $i2257 := $eq.i64($i2256, 0);
    goto corral_source_split_5626;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2257} true;
    goto $bb1004, $bb1005;

  $bb1005:
    assume !($i2257 == 1);
    assume {:verifier.code 0} true;
    goto $bb1006;

  $bb1006:
    assume {:verifier.code 0} true;
    $p2259 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(125, 4));
    goto corral_source_split_5630;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    $i2260 := $load.i32($M.0, $p2259);
    goto corral_source_split_5631;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    $i2261 := $eq.i32($i2260, 0);
    goto corral_source_split_5632;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2261} true;
    goto $bb1007, $bb1008;

  $bb1008:
    assume !($i2261 == 1);
    assume {:verifier.code 0} true;
    goto $bb1009;

  $bb1009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1314} $p2262 := skb_end_pointer($p2255);
    goto corral_source_split_5636;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    $p2263 := $bitcast.ref.ref($p2262);
    goto corral_source_split_5637;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    $p2264 := $add.ref($add.ref($p2263, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_5638;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    $p2265 := $bitcast.ref.ref($p2264);
    goto corral_source_split_5639;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1315} $p2266 := skb_frag_page($p2265);
    goto corral_source_split_5640;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1316} get_page($p2266);
    goto corral_source_split_5641;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1317} $p2267 := lowmem_page_address($p2266);
    goto corral_source_split_5642;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    $i2268 := $p2i.ref.i64($p2267);
    goto corral_source_split_5643;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1318} gnttab_end_foreign_access($i2260, 0, $i2268);
    goto corral_source_split_5644;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    $p2270 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(125, 4));
    goto corral_source_split_5645;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2270, 0);
    goto corral_source_split_5646;

  corral_source_split_5646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1319} kfree_skb($p2255);
    goto corral_source_split_5647;

  corral_source_split_5647:
    assume {:verifier.code 0} true;
    goto $bb1010;

  $bb1010:
    assume {:verifier.code 0} true;
    goto $bb1011;

  $bb1011:
    assume {:verifier.code 0} true;
    $p2272 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(126, 8));
    goto corral_source_split_5649;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    $p2273 := $load.ref($M.0, $p2272);
    goto corral_source_split_5650;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    $i2274 := $p2i.ref.i64($p2273);
    goto corral_source_split_5651;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    $i2275 := $eq.i64($i2274, 0);
    goto corral_source_split_5652;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2275} true;
    goto $bb1012, $bb1013;

  $bb1013:
    assume !($i2275 == 1);
    assume {:verifier.code 0} true;
    goto $bb1014;

  $bb1014:
    assume {:verifier.code 0} true;
    $p2277 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(126, 4));
    goto corral_source_split_5656;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    $i2278 := $load.i32($M.0, $p2277);
    goto corral_source_split_5657;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    $i2279 := $eq.i32($i2278, 0);
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2279} true;
    goto $bb1015, $bb1016;

  $bb1016:
    assume !($i2279 == 1);
    assume {:verifier.code 0} true;
    goto $bb1017;

  $bb1017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1320} $p2280 := skb_end_pointer($p2273);
    goto corral_source_split_5662;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    $p2281 := $bitcast.ref.ref($p2280);
    goto corral_source_split_5663;

  corral_source_split_5663:
    assume {:verifier.code 0} true;
    $p2282 := $add.ref($add.ref($p2281, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_5664;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    $p2283 := $bitcast.ref.ref($p2282);
    goto corral_source_split_5665;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1321} $p2284 := skb_frag_page($p2283);
    goto corral_source_split_5666;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1322} get_page($p2284);
    goto corral_source_split_5667;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1323} $p2285 := lowmem_page_address($p2284);
    goto corral_source_split_5668;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    $i2286 := $p2i.ref.i64($p2285);
    goto corral_source_split_5669;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1324} gnttab_end_foreign_access($i2278, 0, $i2286);
    goto corral_source_split_5670;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    $p2288 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(126, 4));
    goto corral_source_split_5671;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2288, 0);
    goto corral_source_split_5672;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1325} kfree_skb($p2273);
    goto corral_source_split_5673;

  corral_source_split_5673:
    assume {:verifier.code 0} true;
    goto $bb1018;

  $bb1018:
    assume {:verifier.code 0} true;
    goto $bb1019;

  $bb1019:
    assume {:verifier.code 0} true;
    $p2290 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(127, 8));
    goto corral_source_split_5675;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    $p2291 := $load.ref($M.0, $p2290);
    goto corral_source_split_5676;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    $i2292 := $p2i.ref.i64($p2291);
    goto corral_source_split_5677;

  corral_source_split_5677:
    assume {:verifier.code 0} true;
    $i2293 := $eq.i64($i2292, 0);
    goto corral_source_split_5678;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2293} true;
    goto $bb1020, $bb1021;

  $bb1021:
    assume !($i2293 == 1);
    assume {:verifier.code 0} true;
    goto $bb1022;

  $bb1022:
    assume {:verifier.code 0} true;
    $p2295 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(127, 4));
    goto corral_source_split_5682;

  corral_source_split_5682:
    assume {:verifier.code 0} true;
    $i2296 := $load.i32($M.0, $p2295);
    goto corral_source_split_5683;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    $i2297 := $eq.i32($i2296, 0);
    goto corral_source_split_5684;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2297} true;
    goto $bb1023, $bb1024;

  $bb1024:
    assume !($i2297 == 1);
    assume {:verifier.code 0} true;
    goto $bb1025;

  $bb1025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1326} $p2298 := skb_end_pointer($p2291);
    goto corral_source_split_5688;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    $p2299 := $bitcast.ref.ref($p2298);
    goto corral_source_split_5689;

  corral_source_split_5689:
    assume {:verifier.code 0} true;
    $p2300 := $add.ref($add.ref($p2299, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_5690;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    $p2301 := $bitcast.ref.ref($p2300);
    goto corral_source_split_5691;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1327} $p2302 := skb_frag_page($p2301);
    goto corral_source_split_5692;

  corral_source_split_5692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1328} get_page($p2302);
    goto corral_source_split_5693;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1329} $p2303 := lowmem_page_address($p2302);
    goto corral_source_split_5694;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    $i2304 := $p2i.ref.i64($p2303);
    goto corral_source_split_5695;

  corral_source_split_5695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1330} gnttab_end_foreign_access($i2296, 0, $i2304);
    goto corral_source_split_5696;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    $p2306 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(127, 4));
    goto corral_source_split_5697;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2306, 0);
    goto corral_source_split_5698;

  corral_source_split_5698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1331} kfree_skb($p2291);
    goto corral_source_split_5699;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    goto $bb1026;

  $bb1026:
    assume {:verifier.code 0} true;
    goto $bb1027;

  $bb1027:
    assume {:verifier.code 0} true;
    $p2308 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(128, 8));
    goto corral_source_split_5701;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    $p2309 := $load.ref($M.0, $p2308);
    goto corral_source_split_5702;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    $i2310 := $p2i.ref.i64($p2309);
    goto corral_source_split_5703;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    $i2311 := $eq.i64($i2310, 0);
    goto corral_source_split_5704;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2311} true;
    goto $bb1028, $bb1029;

  $bb1029:
    assume !($i2311 == 1);
    assume {:verifier.code 0} true;
    goto $bb1030;

  $bb1030:
    assume {:verifier.code 0} true;
    $p2313 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(128, 4));
    goto corral_source_split_5708;

  corral_source_split_5708:
    assume {:verifier.code 0} true;
    $i2314 := $load.i32($M.0, $p2313);
    goto corral_source_split_5709;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    $i2315 := $eq.i32($i2314, 0);
    goto corral_source_split_5710;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2315} true;
    goto $bb1031, $bb1032;

  $bb1032:
    assume !($i2315 == 1);
    assume {:verifier.code 0} true;
    goto $bb1033;

  $bb1033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1332} $p2316 := skb_end_pointer($p2309);
    goto corral_source_split_5714;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    $p2317 := $bitcast.ref.ref($p2316);
    goto corral_source_split_5715;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    $p2318 := $add.ref($add.ref($p2317, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_5716;

  corral_source_split_5716:
    assume {:verifier.code 0} true;
    $p2319 := $bitcast.ref.ref($p2318);
    goto corral_source_split_5717;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1333} $p2320 := skb_frag_page($p2319);
    goto corral_source_split_5718;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1334} get_page($p2320);
    goto corral_source_split_5719;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1335} $p2321 := lowmem_page_address($p2320);
    goto corral_source_split_5720;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    $i2322 := $p2i.ref.i64($p2321);
    goto corral_source_split_5721;

  corral_source_split_5721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1336} gnttab_end_foreign_access($i2314, 0, $i2322);
    goto corral_source_split_5722;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    $p2324 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(128, 4));
    goto corral_source_split_5723;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2324, 0);
    goto corral_source_split_5724;

  corral_source_split_5724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1337} kfree_skb($p2309);
    goto corral_source_split_5725;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    goto $bb1034;

  $bb1034:
    assume {:verifier.code 0} true;
    goto $bb1035;

  $bb1035:
    assume {:verifier.code 0} true;
    $p2326 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(129, 8));
    goto corral_source_split_5727;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    $p2327 := $load.ref($M.0, $p2326);
    goto corral_source_split_5728;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    $i2328 := $p2i.ref.i64($p2327);
    goto corral_source_split_5729;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    $i2329 := $eq.i64($i2328, 0);
    goto corral_source_split_5730;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2329} true;
    goto $bb1036, $bb1037;

  $bb1037:
    assume !($i2329 == 1);
    assume {:verifier.code 0} true;
    goto $bb1038;

  $bb1038:
    assume {:verifier.code 0} true;
    $p2331 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(129, 4));
    goto corral_source_split_5734;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    $i2332 := $load.i32($M.0, $p2331);
    goto corral_source_split_5735;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    $i2333 := $eq.i32($i2332, 0);
    goto corral_source_split_5736;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2333} true;
    goto $bb1039, $bb1040;

  $bb1040:
    assume !($i2333 == 1);
    assume {:verifier.code 0} true;
    goto $bb1041;

  $bb1041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1338} $p2334 := skb_end_pointer($p2327);
    goto corral_source_split_5740;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    $p2335 := $bitcast.ref.ref($p2334);
    goto corral_source_split_5741;

  corral_source_split_5741:
    assume {:verifier.code 0} true;
    $p2336 := $add.ref($add.ref($p2335, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_5742;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    $p2337 := $bitcast.ref.ref($p2336);
    goto corral_source_split_5743;

  corral_source_split_5743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1339} $p2338 := skb_frag_page($p2337);
    goto corral_source_split_5744;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1340} get_page($p2338);
    goto corral_source_split_5745;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1341} $p2339 := lowmem_page_address($p2338);
    goto corral_source_split_5746;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    $i2340 := $p2i.ref.i64($p2339);
    goto corral_source_split_5747;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1342} gnttab_end_foreign_access($i2332, 0, $i2340);
    goto corral_source_split_5748;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    $p2342 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(129, 4));
    goto corral_source_split_5749;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2342, 0);
    goto corral_source_split_5750;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1343} kfree_skb($p2327);
    goto corral_source_split_5751;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    goto $bb1042;

  $bb1042:
    assume {:verifier.code 0} true;
    goto $bb1043;

  $bb1043:
    assume {:verifier.code 0} true;
    $p2344 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(130, 8));
    goto corral_source_split_5753;

  corral_source_split_5753:
    assume {:verifier.code 0} true;
    $p2345 := $load.ref($M.0, $p2344);
    goto corral_source_split_5754;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    $i2346 := $p2i.ref.i64($p2345);
    goto corral_source_split_5755;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    $i2347 := $eq.i64($i2346, 0);
    goto corral_source_split_5756;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2347} true;
    goto $bb1044, $bb1045;

  $bb1045:
    assume !($i2347 == 1);
    assume {:verifier.code 0} true;
    goto $bb1046;

  $bb1046:
    assume {:verifier.code 0} true;
    $p2349 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(130, 4));
    goto corral_source_split_5760;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    $i2350 := $load.i32($M.0, $p2349);
    goto corral_source_split_5761;

  corral_source_split_5761:
    assume {:verifier.code 0} true;
    $i2351 := $eq.i32($i2350, 0);
    goto corral_source_split_5762;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2351} true;
    goto $bb1047, $bb1048;

  $bb1048:
    assume !($i2351 == 1);
    assume {:verifier.code 0} true;
    goto $bb1049;

  $bb1049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1344} $p2352 := skb_end_pointer($p2345);
    goto corral_source_split_5766;

  corral_source_split_5766:
    assume {:verifier.code 0} true;
    $p2353 := $bitcast.ref.ref($p2352);
    goto corral_source_split_5767;

  corral_source_split_5767:
    assume {:verifier.code 0} true;
    $p2354 := $add.ref($add.ref($p2353, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_5768;

  corral_source_split_5768:
    assume {:verifier.code 0} true;
    $p2355 := $bitcast.ref.ref($p2354);
    goto corral_source_split_5769;

  corral_source_split_5769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1345} $p2356 := skb_frag_page($p2355);
    goto corral_source_split_5770;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1346} get_page($p2356);
    goto corral_source_split_5771;

  corral_source_split_5771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1347} $p2357 := lowmem_page_address($p2356);
    goto corral_source_split_5772;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    $i2358 := $p2i.ref.i64($p2357);
    goto corral_source_split_5773;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1348} gnttab_end_foreign_access($i2350, 0, $i2358);
    goto corral_source_split_5774;

  corral_source_split_5774:
    assume {:verifier.code 0} true;
    $p2360 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(130, 4));
    goto corral_source_split_5775;

  corral_source_split_5775:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2360, 0);
    goto corral_source_split_5776;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1349} kfree_skb($p2345);
    goto corral_source_split_5777;

  corral_source_split_5777:
    assume {:verifier.code 0} true;
    goto $bb1050;

  $bb1050:
    assume {:verifier.code 0} true;
    goto $bb1051;

  $bb1051:
    assume {:verifier.code 0} true;
    $p2362 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(131, 8));
    goto corral_source_split_5779;

  corral_source_split_5779:
    assume {:verifier.code 0} true;
    $p2363 := $load.ref($M.0, $p2362);
    goto corral_source_split_5780;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    $i2364 := $p2i.ref.i64($p2363);
    goto corral_source_split_5781;

  corral_source_split_5781:
    assume {:verifier.code 0} true;
    $i2365 := $eq.i64($i2364, 0);
    goto corral_source_split_5782;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2365} true;
    goto $bb1052, $bb1053;

  $bb1053:
    assume !($i2365 == 1);
    assume {:verifier.code 0} true;
    goto $bb1054;

  $bb1054:
    assume {:verifier.code 0} true;
    $p2367 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(131, 4));
    goto corral_source_split_5786;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    $i2368 := $load.i32($M.0, $p2367);
    goto corral_source_split_5787;

  corral_source_split_5787:
    assume {:verifier.code 0} true;
    $i2369 := $eq.i32($i2368, 0);
    goto corral_source_split_5788;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2369} true;
    goto $bb1055, $bb1056;

  $bb1056:
    assume !($i2369 == 1);
    assume {:verifier.code 0} true;
    goto $bb1057;

  $bb1057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1350} $p2370 := skb_end_pointer($p2363);
    goto corral_source_split_5792;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    $p2371 := $bitcast.ref.ref($p2370);
    goto corral_source_split_5793;

  corral_source_split_5793:
    assume {:verifier.code 0} true;
    $p2372 := $add.ref($add.ref($p2371, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_5794;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    $p2373 := $bitcast.ref.ref($p2372);
    goto corral_source_split_5795;

  corral_source_split_5795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1351} $p2374 := skb_frag_page($p2373);
    goto corral_source_split_5796;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1352} get_page($p2374);
    goto corral_source_split_5797;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1353} $p2375 := lowmem_page_address($p2374);
    goto corral_source_split_5798;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    $i2376 := $p2i.ref.i64($p2375);
    goto corral_source_split_5799;

  corral_source_split_5799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1354} gnttab_end_foreign_access($i2368, 0, $i2376);
    goto corral_source_split_5800;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    $p2378 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(131, 4));
    goto corral_source_split_5801;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2378, 0);
    goto corral_source_split_5802;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1355} kfree_skb($p2363);
    goto corral_source_split_5803;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    goto $bb1058;

  $bb1058:
    assume {:verifier.code 0} true;
    goto $bb1059;

  $bb1059:
    assume {:verifier.code 0} true;
    $p2380 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(132, 8));
    goto corral_source_split_5805;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    $p2381 := $load.ref($M.0, $p2380);
    goto corral_source_split_5806;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    $i2382 := $p2i.ref.i64($p2381);
    goto corral_source_split_5807;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    $i2383 := $eq.i64($i2382, 0);
    goto corral_source_split_5808;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2383} true;
    goto $bb1060, $bb1061;

  $bb1061:
    assume !($i2383 == 1);
    assume {:verifier.code 0} true;
    goto $bb1062;

  $bb1062:
    assume {:verifier.code 0} true;
    $p2385 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(132, 4));
    goto corral_source_split_5812;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    $i2386 := $load.i32($M.0, $p2385);
    goto corral_source_split_5813;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    $i2387 := $eq.i32($i2386, 0);
    goto corral_source_split_5814;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2387} true;
    goto $bb1063, $bb1064;

  $bb1064:
    assume !($i2387 == 1);
    assume {:verifier.code 0} true;
    goto $bb1065;

  $bb1065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1356} $p2388 := skb_end_pointer($p2381);
    goto corral_source_split_5818;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    $p2389 := $bitcast.ref.ref($p2388);
    goto corral_source_split_5819;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    $p2390 := $add.ref($add.ref($p2389, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_5820;

  corral_source_split_5820:
    assume {:verifier.code 0} true;
    $p2391 := $bitcast.ref.ref($p2390);
    goto corral_source_split_5821;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1357} $p2392 := skb_frag_page($p2391);
    goto corral_source_split_5822;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1358} get_page($p2392);
    goto corral_source_split_5823;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1359} $p2393 := lowmem_page_address($p2392);
    goto corral_source_split_5824;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    $i2394 := $p2i.ref.i64($p2393);
    goto corral_source_split_5825;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1360} gnttab_end_foreign_access($i2386, 0, $i2394);
    goto corral_source_split_5826;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    $p2396 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(132, 4));
    goto corral_source_split_5827;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2396, 0);
    goto corral_source_split_5828;

  corral_source_split_5828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1361} kfree_skb($p2381);
    goto corral_source_split_5829;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    goto $bb1066;

  $bb1066:
    assume {:verifier.code 0} true;
    goto $bb1067;

  $bb1067:
    assume {:verifier.code 0} true;
    $p2398 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(133, 8));
    goto corral_source_split_5831;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    $p2399 := $load.ref($M.0, $p2398);
    goto corral_source_split_5832;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    $i2400 := $p2i.ref.i64($p2399);
    goto corral_source_split_5833;

  corral_source_split_5833:
    assume {:verifier.code 0} true;
    $i2401 := $eq.i64($i2400, 0);
    goto corral_source_split_5834;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2401} true;
    goto $bb1068, $bb1069;

  $bb1069:
    assume !($i2401 == 1);
    assume {:verifier.code 0} true;
    goto $bb1070;

  $bb1070:
    assume {:verifier.code 0} true;
    $p2403 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(133, 4));
    goto corral_source_split_5838;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    $i2404 := $load.i32($M.0, $p2403);
    goto corral_source_split_5839;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    $i2405 := $eq.i32($i2404, 0);
    goto corral_source_split_5840;

  corral_source_split_5840:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2405} true;
    goto $bb1071, $bb1072;

  $bb1072:
    assume !($i2405 == 1);
    assume {:verifier.code 0} true;
    goto $bb1073;

  $bb1073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1362} $p2406 := skb_end_pointer($p2399);
    goto corral_source_split_5844;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    $p2407 := $bitcast.ref.ref($p2406);
    goto corral_source_split_5845;

  corral_source_split_5845:
    assume {:verifier.code 0} true;
    $p2408 := $add.ref($add.ref($p2407, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_5846;

  corral_source_split_5846:
    assume {:verifier.code 0} true;
    $p2409 := $bitcast.ref.ref($p2408);
    goto corral_source_split_5847;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1363} $p2410 := skb_frag_page($p2409);
    goto corral_source_split_5848;

  corral_source_split_5848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1364} get_page($p2410);
    goto corral_source_split_5849;

  corral_source_split_5849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1365} $p2411 := lowmem_page_address($p2410);
    goto corral_source_split_5850;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    $i2412 := $p2i.ref.i64($p2411);
    goto corral_source_split_5851;

  corral_source_split_5851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1366} gnttab_end_foreign_access($i2404, 0, $i2412);
    goto corral_source_split_5852;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    $p2414 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(133, 4));
    goto corral_source_split_5853;

  corral_source_split_5853:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2414, 0);
    goto corral_source_split_5854;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1367} kfree_skb($p2399);
    goto corral_source_split_5855;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    goto $bb1074;

  $bb1074:
    assume {:verifier.code 0} true;
    goto $bb1075;

  $bb1075:
    assume {:verifier.code 0} true;
    $p2416 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(134, 8));
    goto corral_source_split_5857;

  corral_source_split_5857:
    assume {:verifier.code 0} true;
    $p2417 := $load.ref($M.0, $p2416);
    goto corral_source_split_5858;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    $i2418 := $p2i.ref.i64($p2417);
    goto corral_source_split_5859;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    $i2419 := $eq.i64($i2418, 0);
    goto corral_source_split_5860;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2419} true;
    goto $bb1076, $bb1077;

  $bb1077:
    assume !($i2419 == 1);
    assume {:verifier.code 0} true;
    goto $bb1078;

  $bb1078:
    assume {:verifier.code 0} true;
    $p2421 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(134, 4));
    goto corral_source_split_5864;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    $i2422 := $load.i32($M.0, $p2421);
    goto corral_source_split_5865;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    $i2423 := $eq.i32($i2422, 0);
    goto corral_source_split_5866;

  corral_source_split_5866:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2423} true;
    goto $bb1079, $bb1080;

  $bb1080:
    assume !($i2423 == 1);
    assume {:verifier.code 0} true;
    goto $bb1081;

  $bb1081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1368} $p2424 := skb_end_pointer($p2417);
    goto corral_source_split_5870;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    $p2425 := $bitcast.ref.ref($p2424);
    goto corral_source_split_5871;

  corral_source_split_5871:
    assume {:verifier.code 0} true;
    $p2426 := $add.ref($add.ref($p2425, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_5872;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    $p2427 := $bitcast.ref.ref($p2426);
    goto corral_source_split_5873;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1369} $p2428 := skb_frag_page($p2427);
    goto corral_source_split_5874;

  corral_source_split_5874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1370} get_page($p2428);
    goto corral_source_split_5875;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1371} $p2429 := lowmem_page_address($p2428);
    goto corral_source_split_5876;

  corral_source_split_5876:
    assume {:verifier.code 0} true;
    $i2430 := $p2i.ref.i64($p2429);
    goto corral_source_split_5877;

  corral_source_split_5877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1372} gnttab_end_foreign_access($i2422, 0, $i2430);
    goto corral_source_split_5878;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    $p2432 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(134, 4));
    goto corral_source_split_5879;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2432, 0);
    goto corral_source_split_5880;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1373} kfree_skb($p2417);
    goto corral_source_split_5881;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    goto $bb1082;

  $bb1082:
    assume {:verifier.code 0} true;
    goto $bb1083;

  $bb1083:
    assume {:verifier.code 0} true;
    $p2434 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(135, 8));
    goto corral_source_split_5883;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    $p2435 := $load.ref($M.0, $p2434);
    goto corral_source_split_5884;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    $i2436 := $p2i.ref.i64($p2435);
    goto corral_source_split_5885;

  corral_source_split_5885:
    assume {:verifier.code 0} true;
    $i2437 := $eq.i64($i2436, 0);
    goto corral_source_split_5886;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2437} true;
    goto $bb1084, $bb1085;

  $bb1085:
    assume !($i2437 == 1);
    assume {:verifier.code 0} true;
    goto $bb1086;

  $bb1086:
    assume {:verifier.code 0} true;
    $p2439 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(135, 4));
    goto corral_source_split_5890;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    $i2440 := $load.i32($M.0, $p2439);
    goto corral_source_split_5891;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    $i2441 := $eq.i32($i2440, 0);
    goto corral_source_split_5892;

  corral_source_split_5892:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2441} true;
    goto $bb1087, $bb1088;

  $bb1088:
    assume !($i2441 == 1);
    assume {:verifier.code 0} true;
    goto $bb1089;

  $bb1089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1374} $p2442 := skb_end_pointer($p2435);
    goto corral_source_split_5896;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    $p2443 := $bitcast.ref.ref($p2442);
    goto corral_source_split_5897;

  corral_source_split_5897:
    assume {:verifier.code 0} true;
    $p2444 := $add.ref($add.ref($p2443, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_5898;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    $p2445 := $bitcast.ref.ref($p2444);
    goto corral_source_split_5899;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1375} $p2446 := skb_frag_page($p2445);
    goto corral_source_split_5900;

  corral_source_split_5900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1376} get_page($p2446);
    goto corral_source_split_5901;

  corral_source_split_5901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1377} $p2447 := lowmem_page_address($p2446);
    goto corral_source_split_5902;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    $i2448 := $p2i.ref.i64($p2447);
    goto corral_source_split_5903;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1378} gnttab_end_foreign_access($i2440, 0, $i2448);
    goto corral_source_split_5904;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    $p2450 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(135, 4));
    goto corral_source_split_5905;

  corral_source_split_5905:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2450, 0);
    goto corral_source_split_5906;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1379} kfree_skb($p2435);
    goto corral_source_split_5907;

  corral_source_split_5907:
    assume {:verifier.code 0} true;
    goto $bb1090;

  $bb1090:
    assume {:verifier.code 0} true;
    goto $bb1091;

  $bb1091:
    assume {:verifier.code 0} true;
    $p2452 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(136, 8));
    goto corral_source_split_5909;

  corral_source_split_5909:
    assume {:verifier.code 0} true;
    $p2453 := $load.ref($M.0, $p2452);
    goto corral_source_split_5910;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    $i2454 := $p2i.ref.i64($p2453);
    goto corral_source_split_5911;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    $i2455 := $eq.i64($i2454, 0);
    goto corral_source_split_5912;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2455} true;
    goto $bb1092, $bb1093;

  $bb1093:
    assume !($i2455 == 1);
    assume {:verifier.code 0} true;
    goto $bb1094;

  $bb1094:
    assume {:verifier.code 0} true;
    $p2457 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(136, 4));
    goto corral_source_split_5916;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    $i2458 := $load.i32($M.0, $p2457);
    goto corral_source_split_5917;

  corral_source_split_5917:
    assume {:verifier.code 0} true;
    $i2459 := $eq.i32($i2458, 0);
    goto corral_source_split_5918;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2459} true;
    goto $bb1095, $bb1096;

  $bb1096:
    assume !($i2459 == 1);
    assume {:verifier.code 0} true;
    goto $bb1097;

  $bb1097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1380} $p2460 := skb_end_pointer($p2453);
    goto corral_source_split_5922;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    $p2461 := $bitcast.ref.ref($p2460);
    goto corral_source_split_5923;

  corral_source_split_5923:
    assume {:verifier.code 0} true;
    $p2462 := $add.ref($add.ref($p2461, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_5924;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    $p2463 := $bitcast.ref.ref($p2462);
    goto corral_source_split_5925;

  corral_source_split_5925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1381} $p2464 := skb_frag_page($p2463);
    goto corral_source_split_5926;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1382} get_page($p2464);
    goto corral_source_split_5927;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1383} $p2465 := lowmem_page_address($p2464);
    goto corral_source_split_5928;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    $i2466 := $p2i.ref.i64($p2465);
    goto corral_source_split_5929;

  corral_source_split_5929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1384} gnttab_end_foreign_access($i2458, 0, $i2466);
    goto corral_source_split_5930;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    $p2468 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(136, 4));
    goto corral_source_split_5931;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2468, 0);
    goto corral_source_split_5932;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1385} kfree_skb($p2453);
    goto corral_source_split_5933;

  corral_source_split_5933:
    assume {:verifier.code 0} true;
    goto $bb1098;

  $bb1098:
    assume {:verifier.code 0} true;
    goto $bb1099;

  $bb1099:
    assume {:verifier.code 0} true;
    $p2470 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(137, 8));
    goto corral_source_split_5935;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    $p2471 := $load.ref($M.0, $p2470);
    goto corral_source_split_5936;

  corral_source_split_5936:
    assume {:verifier.code 0} true;
    $i2472 := $p2i.ref.i64($p2471);
    goto corral_source_split_5937;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    $i2473 := $eq.i64($i2472, 0);
    goto corral_source_split_5938;

  corral_source_split_5938:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2473} true;
    goto $bb1100, $bb1101;

  $bb1101:
    assume !($i2473 == 1);
    assume {:verifier.code 0} true;
    goto $bb1102;

  $bb1102:
    assume {:verifier.code 0} true;
    $p2475 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(137, 4));
    goto corral_source_split_5942;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    $i2476 := $load.i32($M.0, $p2475);
    goto corral_source_split_5943;

  corral_source_split_5943:
    assume {:verifier.code 0} true;
    $i2477 := $eq.i32($i2476, 0);
    goto corral_source_split_5944;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2477} true;
    goto $bb1103, $bb1104;

  $bb1104:
    assume !($i2477 == 1);
    assume {:verifier.code 0} true;
    goto $bb1105;

  $bb1105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1386} $p2478 := skb_end_pointer($p2471);
    goto corral_source_split_5948;

  corral_source_split_5948:
    assume {:verifier.code 0} true;
    $p2479 := $bitcast.ref.ref($p2478);
    goto corral_source_split_5949;

  corral_source_split_5949:
    assume {:verifier.code 0} true;
    $p2480 := $add.ref($add.ref($p2479, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_5950;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    $p2481 := $bitcast.ref.ref($p2480);
    goto corral_source_split_5951;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1387} $p2482 := skb_frag_page($p2481);
    goto corral_source_split_5952;

  corral_source_split_5952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1388} get_page($p2482);
    goto corral_source_split_5953;

  corral_source_split_5953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1389} $p2483 := lowmem_page_address($p2482);
    goto corral_source_split_5954;

  corral_source_split_5954:
    assume {:verifier.code 0} true;
    $i2484 := $p2i.ref.i64($p2483);
    goto corral_source_split_5955;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1390} gnttab_end_foreign_access($i2476, 0, $i2484);
    goto corral_source_split_5956;

  corral_source_split_5956:
    assume {:verifier.code 0} true;
    $p2486 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(137, 4));
    goto corral_source_split_5957;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2486, 0);
    goto corral_source_split_5958;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1391} kfree_skb($p2471);
    goto corral_source_split_5959;

  corral_source_split_5959:
    assume {:verifier.code 0} true;
    goto $bb1106;

  $bb1106:
    assume {:verifier.code 0} true;
    goto $bb1107;

  $bb1107:
    assume {:verifier.code 0} true;
    $p2488 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(138, 8));
    goto corral_source_split_5961;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    $p2489 := $load.ref($M.0, $p2488);
    goto corral_source_split_5962;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    $i2490 := $p2i.ref.i64($p2489);
    goto corral_source_split_5963;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    $i2491 := $eq.i64($i2490, 0);
    goto corral_source_split_5964;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2491} true;
    goto $bb1108, $bb1109;

  $bb1109:
    assume !($i2491 == 1);
    assume {:verifier.code 0} true;
    goto $bb1110;

  $bb1110:
    assume {:verifier.code 0} true;
    $p2493 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(138, 4));
    goto corral_source_split_5968;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    $i2494 := $load.i32($M.0, $p2493);
    goto corral_source_split_5969;

  corral_source_split_5969:
    assume {:verifier.code 0} true;
    $i2495 := $eq.i32($i2494, 0);
    goto corral_source_split_5970;

  corral_source_split_5970:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2495} true;
    goto $bb1111, $bb1112;

  $bb1112:
    assume !($i2495 == 1);
    assume {:verifier.code 0} true;
    goto $bb1113;

  $bb1113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1392} $p2496 := skb_end_pointer($p2489);
    goto corral_source_split_5974;

  corral_source_split_5974:
    assume {:verifier.code 0} true;
    $p2497 := $bitcast.ref.ref($p2496);
    goto corral_source_split_5975;

  corral_source_split_5975:
    assume {:verifier.code 0} true;
    $p2498 := $add.ref($add.ref($p2497, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_5976;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    $p2499 := $bitcast.ref.ref($p2498);
    goto corral_source_split_5977;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1393} $p2500 := skb_frag_page($p2499);
    goto corral_source_split_5978;

  corral_source_split_5978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1394} get_page($p2500);
    goto corral_source_split_5979;

  corral_source_split_5979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1395} $p2501 := lowmem_page_address($p2500);
    goto corral_source_split_5980;

  corral_source_split_5980:
    assume {:verifier.code 0} true;
    $i2502 := $p2i.ref.i64($p2501);
    goto corral_source_split_5981;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1396} gnttab_end_foreign_access($i2494, 0, $i2502);
    goto corral_source_split_5982;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    $p2504 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(138, 4));
    goto corral_source_split_5983;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2504, 0);
    goto corral_source_split_5984;

  corral_source_split_5984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1397} kfree_skb($p2489);
    goto corral_source_split_5985;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    goto $bb1114;

  $bb1114:
    assume {:verifier.code 0} true;
    goto $bb1115;

  $bb1115:
    assume {:verifier.code 0} true;
    $p2506 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(139, 8));
    goto corral_source_split_5987;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    $p2507 := $load.ref($M.0, $p2506);
    goto corral_source_split_5988;

  corral_source_split_5988:
    assume {:verifier.code 0} true;
    $i2508 := $p2i.ref.i64($p2507);
    goto corral_source_split_5989;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    $i2509 := $eq.i64($i2508, 0);
    goto corral_source_split_5990;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2509} true;
    goto $bb1116, $bb1117;

  $bb1117:
    assume !($i2509 == 1);
    assume {:verifier.code 0} true;
    goto $bb1118;

  $bb1118:
    assume {:verifier.code 0} true;
    $p2511 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(139, 4));
    goto corral_source_split_5994;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    $i2512 := $load.i32($M.0, $p2511);
    goto corral_source_split_5995;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    $i2513 := $eq.i32($i2512, 0);
    goto corral_source_split_5996;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2513} true;
    goto $bb1119, $bb1120;

  $bb1120:
    assume !($i2513 == 1);
    assume {:verifier.code 0} true;
    goto $bb1121;

  $bb1121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1398} $p2514 := skb_end_pointer($p2507);
    goto corral_source_split_6000;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    $p2515 := $bitcast.ref.ref($p2514);
    goto corral_source_split_6001;

  corral_source_split_6001:
    assume {:verifier.code 0} true;
    $p2516 := $add.ref($add.ref($p2515, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_6002;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    $p2517 := $bitcast.ref.ref($p2516);
    goto corral_source_split_6003;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1399} $p2518 := skb_frag_page($p2517);
    goto corral_source_split_6004;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1400} get_page($p2518);
    goto corral_source_split_6005;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1401} $p2519 := lowmem_page_address($p2518);
    goto corral_source_split_6006;

  corral_source_split_6006:
    assume {:verifier.code 0} true;
    $i2520 := $p2i.ref.i64($p2519);
    goto corral_source_split_6007;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1402} gnttab_end_foreign_access($i2512, 0, $i2520);
    goto corral_source_split_6008;

  corral_source_split_6008:
    assume {:verifier.code 0} true;
    $p2522 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(139, 4));
    goto corral_source_split_6009;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2522, 0);
    goto corral_source_split_6010;

  corral_source_split_6010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1403} kfree_skb($p2507);
    goto corral_source_split_6011;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    goto $bb1122;

  $bb1122:
    assume {:verifier.code 0} true;
    goto $bb1123;

  $bb1123:
    assume {:verifier.code 0} true;
    $p2524 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(140, 8));
    goto corral_source_split_6013;

  corral_source_split_6013:
    assume {:verifier.code 0} true;
    $p2525 := $load.ref($M.0, $p2524);
    goto corral_source_split_6014;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    $i2526 := $p2i.ref.i64($p2525);
    goto corral_source_split_6015;

  corral_source_split_6015:
    assume {:verifier.code 0} true;
    $i2527 := $eq.i64($i2526, 0);
    goto corral_source_split_6016;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2527} true;
    goto $bb1124, $bb1125;

  $bb1125:
    assume !($i2527 == 1);
    assume {:verifier.code 0} true;
    goto $bb1126;

  $bb1126:
    assume {:verifier.code 0} true;
    $p2529 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(140, 4));
    goto corral_source_split_6020;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    $i2530 := $load.i32($M.0, $p2529);
    goto corral_source_split_6021;

  corral_source_split_6021:
    assume {:verifier.code 0} true;
    $i2531 := $eq.i32($i2530, 0);
    goto corral_source_split_6022;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2531} true;
    goto $bb1127, $bb1128;

  $bb1128:
    assume !($i2531 == 1);
    assume {:verifier.code 0} true;
    goto $bb1129;

  $bb1129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1404} $p2532 := skb_end_pointer($p2525);
    goto corral_source_split_6026;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    $p2533 := $bitcast.ref.ref($p2532);
    goto corral_source_split_6027;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    $p2534 := $add.ref($add.ref($p2533, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_6028;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    $p2535 := $bitcast.ref.ref($p2534);
    goto corral_source_split_6029;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1405} $p2536 := skb_frag_page($p2535);
    goto corral_source_split_6030;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1406} get_page($p2536);
    goto corral_source_split_6031;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1407} $p2537 := lowmem_page_address($p2536);
    goto corral_source_split_6032;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    $i2538 := $p2i.ref.i64($p2537);
    goto corral_source_split_6033;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1408} gnttab_end_foreign_access($i2530, 0, $i2538);
    goto corral_source_split_6034;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    $p2540 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(140, 4));
    goto corral_source_split_6035;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2540, 0);
    goto corral_source_split_6036;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1409} kfree_skb($p2525);
    goto corral_source_split_6037;

  corral_source_split_6037:
    assume {:verifier.code 0} true;
    goto $bb1130;

  $bb1130:
    assume {:verifier.code 0} true;
    goto $bb1131;

  $bb1131:
    assume {:verifier.code 0} true;
    $p2542 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(141, 8));
    goto corral_source_split_6039;

  corral_source_split_6039:
    assume {:verifier.code 0} true;
    $p2543 := $load.ref($M.0, $p2542);
    goto corral_source_split_6040;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    $i2544 := $p2i.ref.i64($p2543);
    goto corral_source_split_6041;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    $i2545 := $eq.i64($i2544, 0);
    goto corral_source_split_6042;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2545} true;
    goto $bb1132, $bb1133;

  $bb1133:
    assume !($i2545 == 1);
    assume {:verifier.code 0} true;
    goto $bb1134;

  $bb1134:
    assume {:verifier.code 0} true;
    $p2547 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(141, 4));
    goto corral_source_split_6046;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    $i2548 := $load.i32($M.0, $p2547);
    goto corral_source_split_6047;

  corral_source_split_6047:
    assume {:verifier.code 0} true;
    $i2549 := $eq.i32($i2548, 0);
    goto corral_source_split_6048;

  corral_source_split_6048:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2549} true;
    goto $bb1135, $bb1136;

  $bb1136:
    assume !($i2549 == 1);
    assume {:verifier.code 0} true;
    goto $bb1137;

  $bb1137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1410} $p2550 := skb_end_pointer($p2543);
    goto corral_source_split_6052;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    $p2551 := $bitcast.ref.ref($p2550);
    goto corral_source_split_6053;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    $p2552 := $add.ref($add.ref($p2551, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_6054;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    $p2553 := $bitcast.ref.ref($p2552);
    goto corral_source_split_6055;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1411} $p2554 := skb_frag_page($p2553);
    goto corral_source_split_6056;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1412} get_page($p2554);
    goto corral_source_split_6057;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1413} $p2555 := lowmem_page_address($p2554);
    goto corral_source_split_6058;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    $i2556 := $p2i.ref.i64($p2555);
    goto corral_source_split_6059;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1414} gnttab_end_foreign_access($i2548, 0, $i2556);
    goto corral_source_split_6060;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    $p2558 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(141, 4));
    goto corral_source_split_6061;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2558, 0);
    goto corral_source_split_6062;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1415} kfree_skb($p2543);
    goto corral_source_split_6063;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    goto $bb1138;

  $bb1138:
    assume {:verifier.code 0} true;
    goto $bb1139;

  $bb1139:
    assume {:verifier.code 0} true;
    $p2560 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(142, 8));
    goto corral_source_split_6065;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    $p2561 := $load.ref($M.0, $p2560);
    goto corral_source_split_6066;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    $i2562 := $p2i.ref.i64($p2561);
    goto corral_source_split_6067;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    $i2563 := $eq.i64($i2562, 0);
    goto corral_source_split_6068;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2563} true;
    goto $bb1140, $bb1141;

  $bb1141:
    assume !($i2563 == 1);
    assume {:verifier.code 0} true;
    goto $bb1142;

  $bb1142:
    assume {:verifier.code 0} true;
    $p2565 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(142, 4));
    goto corral_source_split_6072;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    $i2566 := $load.i32($M.0, $p2565);
    goto corral_source_split_6073;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    $i2567 := $eq.i32($i2566, 0);
    goto corral_source_split_6074;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2567} true;
    goto $bb1143, $bb1144;

  $bb1144:
    assume !($i2567 == 1);
    assume {:verifier.code 0} true;
    goto $bb1145;

  $bb1145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1416} $p2568 := skb_end_pointer($p2561);
    goto corral_source_split_6078;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    $p2569 := $bitcast.ref.ref($p2568);
    goto corral_source_split_6079;

  corral_source_split_6079:
    assume {:verifier.code 0} true;
    $p2570 := $add.ref($add.ref($p2569, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_6080;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    $p2571 := $bitcast.ref.ref($p2570);
    goto corral_source_split_6081;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1417} $p2572 := skb_frag_page($p2571);
    goto corral_source_split_6082;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1418} get_page($p2572);
    goto corral_source_split_6083;

  corral_source_split_6083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1419} $p2573 := lowmem_page_address($p2572);
    goto corral_source_split_6084;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    $i2574 := $p2i.ref.i64($p2573);
    goto corral_source_split_6085;

  corral_source_split_6085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1420} gnttab_end_foreign_access($i2566, 0, $i2574);
    goto corral_source_split_6086;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    $p2576 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(142, 4));
    goto corral_source_split_6087;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2576, 0);
    goto corral_source_split_6088;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1421} kfree_skb($p2561);
    goto corral_source_split_6089;

  corral_source_split_6089:
    assume {:verifier.code 0} true;
    goto $bb1146;

  $bb1146:
    assume {:verifier.code 0} true;
    goto $bb1147;

  $bb1147:
    assume {:verifier.code 0} true;
    $p2578 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(143, 8));
    goto corral_source_split_6091;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    $p2579 := $load.ref($M.0, $p2578);
    goto corral_source_split_6092;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    $i2580 := $p2i.ref.i64($p2579);
    goto corral_source_split_6093;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    $i2581 := $eq.i64($i2580, 0);
    goto corral_source_split_6094;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2581} true;
    goto $bb1148, $bb1149;

  $bb1149:
    assume !($i2581 == 1);
    assume {:verifier.code 0} true;
    goto $bb1150;

  $bb1150:
    assume {:verifier.code 0} true;
    $p2583 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(143, 4));
    goto corral_source_split_6098;

  corral_source_split_6098:
    assume {:verifier.code 0} true;
    $i2584 := $load.i32($M.0, $p2583);
    goto corral_source_split_6099;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    $i2585 := $eq.i32($i2584, 0);
    goto corral_source_split_6100;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2585} true;
    goto $bb1151, $bb1152;

  $bb1152:
    assume !($i2585 == 1);
    assume {:verifier.code 0} true;
    goto $bb1153;

  $bb1153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1422} $p2586 := skb_end_pointer($p2579);
    goto corral_source_split_6104;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    $p2587 := $bitcast.ref.ref($p2586);
    goto corral_source_split_6105;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    $p2588 := $add.ref($add.ref($p2587, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_6106;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    $p2589 := $bitcast.ref.ref($p2588);
    goto corral_source_split_6107;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1423} $p2590 := skb_frag_page($p2589);
    goto corral_source_split_6108;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1424} get_page($p2590);
    goto corral_source_split_6109;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1425} $p2591 := lowmem_page_address($p2590);
    goto corral_source_split_6110;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    $i2592 := $p2i.ref.i64($p2591);
    goto corral_source_split_6111;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1426} gnttab_end_foreign_access($i2584, 0, $i2592);
    goto corral_source_split_6112;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    $p2594 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(143, 4));
    goto corral_source_split_6113;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2594, 0);
    goto corral_source_split_6114;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1427} kfree_skb($p2579);
    goto corral_source_split_6115;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    goto $bb1154;

  $bb1154:
    assume {:verifier.code 0} true;
    goto $bb1155;

  $bb1155:
    assume {:verifier.code 0} true;
    $p2596 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(144, 8));
    goto corral_source_split_6117;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    $p2597 := $load.ref($M.0, $p2596);
    goto corral_source_split_6118;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    $i2598 := $p2i.ref.i64($p2597);
    goto corral_source_split_6119;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    $i2599 := $eq.i64($i2598, 0);
    goto corral_source_split_6120;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2599} true;
    goto $bb1156, $bb1157;

  $bb1157:
    assume !($i2599 == 1);
    assume {:verifier.code 0} true;
    goto $bb1158;

  $bb1158:
    assume {:verifier.code 0} true;
    $p2601 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(144, 4));
    goto corral_source_split_6124;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    $i2602 := $load.i32($M.0, $p2601);
    goto corral_source_split_6125;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    $i2603 := $eq.i32($i2602, 0);
    goto corral_source_split_6126;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2603} true;
    goto $bb1159, $bb1160;

  $bb1160:
    assume !($i2603 == 1);
    assume {:verifier.code 0} true;
    goto $bb1161;

  $bb1161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1428} $p2604 := skb_end_pointer($p2597);
    goto corral_source_split_6130;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    $p2605 := $bitcast.ref.ref($p2604);
    goto corral_source_split_6131;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    $p2606 := $add.ref($add.ref($p2605, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_6132;

  corral_source_split_6132:
    assume {:verifier.code 0} true;
    $p2607 := $bitcast.ref.ref($p2606);
    goto corral_source_split_6133;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1429} $p2608 := skb_frag_page($p2607);
    goto corral_source_split_6134;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1430} get_page($p2608);
    goto corral_source_split_6135;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1431} $p2609 := lowmem_page_address($p2608);
    goto corral_source_split_6136;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    $i2610 := $p2i.ref.i64($p2609);
    goto corral_source_split_6137;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1432} gnttab_end_foreign_access($i2602, 0, $i2610);
    goto corral_source_split_6138;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    $p2612 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(144, 4));
    goto corral_source_split_6139;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2612, 0);
    goto corral_source_split_6140;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1433} kfree_skb($p2597);
    goto corral_source_split_6141;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    goto $bb1162;

  $bb1162:
    assume {:verifier.code 0} true;
    goto $bb1163;

  $bb1163:
    assume {:verifier.code 0} true;
    $p2614 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(145, 8));
    goto corral_source_split_6143;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    $p2615 := $load.ref($M.0, $p2614);
    goto corral_source_split_6144;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    $i2616 := $p2i.ref.i64($p2615);
    goto corral_source_split_6145;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    $i2617 := $eq.i64($i2616, 0);
    goto corral_source_split_6146;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2617} true;
    goto $bb1164, $bb1165;

  $bb1165:
    assume !($i2617 == 1);
    assume {:verifier.code 0} true;
    goto $bb1166;

  $bb1166:
    assume {:verifier.code 0} true;
    $p2619 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(145, 4));
    goto corral_source_split_6150;

  corral_source_split_6150:
    assume {:verifier.code 0} true;
    $i2620 := $load.i32($M.0, $p2619);
    goto corral_source_split_6151;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    $i2621 := $eq.i32($i2620, 0);
    goto corral_source_split_6152;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2621} true;
    goto $bb1167, $bb1168;

  $bb1168:
    assume !($i2621 == 1);
    assume {:verifier.code 0} true;
    goto $bb1169;

  $bb1169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1434} $p2622 := skb_end_pointer($p2615);
    goto corral_source_split_6156;

  corral_source_split_6156:
    assume {:verifier.code 0} true;
    $p2623 := $bitcast.ref.ref($p2622);
    goto corral_source_split_6157;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    $p2624 := $add.ref($add.ref($p2623, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_6158;

  corral_source_split_6158:
    assume {:verifier.code 0} true;
    $p2625 := $bitcast.ref.ref($p2624);
    goto corral_source_split_6159;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1435} $p2626 := skb_frag_page($p2625);
    goto corral_source_split_6160;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1436} get_page($p2626);
    goto corral_source_split_6161;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1437} $p2627 := lowmem_page_address($p2626);
    goto corral_source_split_6162;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    $i2628 := $p2i.ref.i64($p2627);
    goto corral_source_split_6163;

  corral_source_split_6163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1438} gnttab_end_foreign_access($i2620, 0, $i2628);
    goto corral_source_split_6164;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    $p2630 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(145, 4));
    goto corral_source_split_6165;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2630, 0);
    goto corral_source_split_6166;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1439} kfree_skb($p2615);
    goto corral_source_split_6167;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    goto $bb1170;

  $bb1170:
    assume {:verifier.code 0} true;
    goto $bb1171;

  $bb1171:
    assume {:verifier.code 0} true;
    $p2632 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(146, 8));
    goto corral_source_split_6169;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    $p2633 := $load.ref($M.0, $p2632);
    goto corral_source_split_6170;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    $i2634 := $p2i.ref.i64($p2633);
    goto corral_source_split_6171;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    $i2635 := $eq.i64($i2634, 0);
    goto corral_source_split_6172;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2635} true;
    goto $bb1172, $bb1173;

  $bb1173:
    assume !($i2635 == 1);
    assume {:verifier.code 0} true;
    goto $bb1174;

  $bb1174:
    assume {:verifier.code 0} true;
    $p2637 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(146, 4));
    goto corral_source_split_6176;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    $i2638 := $load.i32($M.0, $p2637);
    goto corral_source_split_6177;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    $i2639 := $eq.i32($i2638, 0);
    goto corral_source_split_6178;

  corral_source_split_6178:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2639} true;
    goto $bb1175, $bb1176;

  $bb1176:
    assume !($i2639 == 1);
    assume {:verifier.code 0} true;
    goto $bb1177;

  $bb1177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1440} $p2640 := skb_end_pointer($p2633);
    goto corral_source_split_6182;

  corral_source_split_6182:
    assume {:verifier.code 0} true;
    $p2641 := $bitcast.ref.ref($p2640);
    goto corral_source_split_6183;

  corral_source_split_6183:
    assume {:verifier.code 0} true;
    $p2642 := $add.ref($add.ref($p2641, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_6184;

  corral_source_split_6184:
    assume {:verifier.code 0} true;
    $p2643 := $bitcast.ref.ref($p2642);
    goto corral_source_split_6185;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1441} $p2644 := skb_frag_page($p2643);
    goto corral_source_split_6186;

  corral_source_split_6186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1442} get_page($p2644);
    goto corral_source_split_6187;

  corral_source_split_6187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1443} $p2645 := lowmem_page_address($p2644);
    goto corral_source_split_6188;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    $i2646 := $p2i.ref.i64($p2645);
    goto corral_source_split_6189;

  corral_source_split_6189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1444} gnttab_end_foreign_access($i2638, 0, $i2646);
    goto corral_source_split_6190;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    $p2648 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(146, 4));
    goto corral_source_split_6191;

  corral_source_split_6191:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2648, 0);
    goto corral_source_split_6192;

  corral_source_split_6192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1445} kfree_skb($p2633);
    goto corral_source_split_6193;

  corral_source_split_6193:
    assume {:verifier.code 0} true;
    goto $bb1178;

  $bb1178:
    assume {:verifier.code 0} true;
    goto $bb1179;

  $bb1179:
    assume {:verifier.code 0} true;
    $p2650 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(147, 8));
    goto corral_source_split_6195;

  corral_source_split_6195:
    assume {:verifier.code 0} true;
    $p2651 := $load.ref($M.0, $p2650);
    goto corral_source_split_6196;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    $i2652 := $p2i.ref.i64($p2651);
    goto corral_source_split_6197;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    $i2653 := $eq.i64($i2652, 0);
    goto corral_source_split_6198;

  corral_source_split_6198:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2653} true;
    goto $bb1180, $bb1181;

  $bb1181:
    assume !($i2653 == 1);
    assume {:verifier.code 0} true;
    goto $bb1182;

  $bb1182:
    assume {:verifier.code 0} true;
    $p2655 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(147, 4));
    goto corral_source_split_6202;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    $i2656 := $load.i32($M.0, $p2655);
    goto corral_source_split_6203;

  corral_source_split_6203:
    assume {:verifier.code 0} true;
    $i2657 := $eq.i32($i2656, 0);
    goto corral_source_split_6204;

  corral_source_split_6204:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2657} true;
    goto $bb1183, $bb1184;

  $bb1184:
    assume !($i2657 == 1);
    assume {:verifier.code 0} true;
    goto $bb1185;

  $bb1185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1446} $p2658 := skb_end_pointer($p2651);
    goto corral_source_split_6208;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    $p2659 := $bitcast.ref.ref($p2658);
    goto corral_source_split_6209;

  corral_source_split_6209:
    assume {:verifier.code 0} true;
    $p2660 := $add.ref($add.ref($p2659, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_6210;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    $p2661 := $bitcast.ref.ref($p2660);
    goto corral_source_split_6211;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1447} $p2662 := skb_frag_page($p2661);
    goto corral_source_split_6212;

  corral_source_split_6212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1448} get_page($p2662);
    goto corral_source_split_6213;

  corral_source_split_6213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1449} $p2663 := lowmem_page_address($p2662);
    goto corral_source_split_6214;

  corral_source_split_6214:
    assume {:verifier.code 0} true;
    $i2664 := $p2i.ref.i64($p2663);
    goto corral_source_split_6215;

  corral_source_split_6215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1450} gnttab_end_foreign_access($i2656, 0, $i2664);
    goto corral_source_split_6216;

  corral_source_split_6216:
    assume {:verifier.code 0} true;
    $p2666 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(147, 4));
    goto corral_source_split_6217;

  corral_source_split_6217:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2666, 0);
    goto corral_source_split_6218;

  corral_source_split_6218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1451} kfree_skb($p2651);
    goto corral_source_split_6219;

  corral_source_split_6219:
    assume {:verifier.code 0} true;
    goto $bb1186;

  $bb1186:
    assume {:verifier.code 0} true;
    goto $bb1187;

  $bb1187:
    assume {:verifier.code 0} true;
    $p2668 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(148, 8));
    goto corral_source_split_6221;

  corral_source_split_6221:
    assume {:verifier.code 0} true;
    $p2669 := $load.ref($M.0, $p2668);
    goto corral_source_split_6222;

  corral_source_split_6222:
    assume {:verifier.code 0} true;
    $i2670 := $p2i.ref.i64($p2669);
    goto corral_source_split_6223;

  corral_source_split_6223:
    assume {:verifier.code 0} true;
    $i2671 := $eq.i64($i2670, 0);
    goto corral_source_split_6224;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2671} true;
    goto $bb1188, $bb1189;

  $bb1189:
    assume !($i2671 == 1);
    assume {:verifier.code 0} true;
    goto $bb1190;

  $bb1190:
    assume {:verifier.code 0} true;
    $p2673 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(148, 4));
    goto corral_source_split_6228;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    $i2674 := $load.i32($M.0, $p2673);
    goto corral_source_split_6229;

  corral_source_split_6229:
    assume {:verifier.code 0} true;
    $i2675 := $eq.i32($i2674, 0);
    goto corral_source_split_6230;

  corral_source_split_6230:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2675} true;
    goto $bb1191, $bb1192;

  $bb1192:
    assume !($i2675 == 1);
    assume {:verifier.code 0} true;
    goto $bb1193;

  $bb1193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1452} $p2676 := skb_end_pointer($p2669);
    goto corral_source_split_6234;

  corral_source_split_6234:
    assume {:verifier.code 0} true;
    $p2677 := $bitcast.ref.ref($p2676);
    goto corral_source_split_6235;

  corral_source_split_6235:
    assume {:verifier.code 0} true;
    $p2678 := $add.ref($add.ref($p2677, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_6236;

  corral_source_split_6236:
    assume {:verifier.code 0} true;
    $p2679 := $bitcast.ref.ref($p2678);
    goto corral_source_split_6237;

  corral_source_split_6237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1453} $p2680 := skb_frag_page($p2679);
    goto corral_source_split_6238;

  corral_source_split_6238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1454} get_page($p2680);
    goto corral_source_split_6239;

  corral_source_split_6239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1455} $p2681 := lowmem_page_address($p2680);
    goto corral_source_split_6240;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    $i2682 := $p2i.ref.i64($p2681);
    goto corral_source_split_6241;

  corral_source_split_6241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1456} gnttab_end_foreign_access($i2674, 0, $i2682);
    goto corral_source_split_6242;

  corral_source_split_6242:
    assume {:verifier.code 0} true;
    $p2684 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(148, 4));
    goto corral_source_split_6243;

  corral_source_split_6243:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2684, 0);
    goto corral_source_split_6244;

  corral_source_split_6244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1457} kfree_skb($p2669);
    goto corral_source_split_6245;

  corral_source_split_6245:
    assume {:verifier.code 0} true;
    goto $bb1194;

  $bb1194:
    assume {:verifier.code 0} true;
    goto $bb1195;

  $bb1195:
    assume {:verifier.code 0} true;
    $p2686 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(149, 8));
    goto corral_source_split_6247;

  corral_source_split_6247:
    assume {:verifier.code 0} true;
    $p2687 := $load.ref($M.0, $p2686);
    goto corral_source_split_6248;

  corral_source_split_6248:
    assume {:verifier.code 0} true;
    $i2688 := $p2i.ref.i64($p2687);
    goto corral_source_split_6249;

  corral_source_split_6249:
    assume {:verifier.code 0} true;
    $i2689 := $eq.i64($i2688, 0);
    goto corral_source_split_6250;

  corral_source_split_6250:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2689} true;
    goto $bb1196, $bb1197;

  $bb1197:
    assume !($i2689 == 1);
    assume {:verifier.code 0} true;
    goto $bb1198;

  $bb1198:
    assume {:verifier.code 0} true;
    $p2691 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(149, 4));
    goto corral_source_split_6254;

  corral_source_split_6254:
    assume {:verifier.code 0} true;
    $i2692 := $load.i32($M.0, $p2691);
    goto corral_source_split_6255;

  corral_source_split_6255:
    assume {:verifier.code 0} true;
    $i2693 := $eq.i32($i2692, 0);
    goto corral_source_split_6256;

  corral_source_split_6256:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2693} true;
    goto $bb1199, $bb1200;

  $bb1200:
    assume !($i2693 == 1);
    assume {:verifier.code 0} true;
    goto $bb1201;

  $bb1201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1458} $p2694 := skb_end_pointer($p2687);
    goto corral_source_split_6260;

  corral_source_split_6260:
    assume {:verifier.code 0} true;
    $p2695 := $bitcast.ref.ref($p2694);
    goto corral_source_split_6261;

  corral_source_split_6261:
    assume {:verifier.code 0} true;
    $p2696 := $add.ref($add.ref($p2695, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_6262;

  corral_source_split_6262:
    assume {:verifier.code 0} true;
    $p2697 := $bitcast.ref.ref($p2696);
    goto corral_source_split_6263;

  corral_source_split_6263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1459} $p2698 := skb_frag_page($p2697);
    goto corral_source_split_6264;

  corral_source_split_6264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1460} get_page($p2698);
    goto corral_source_split_6265;

  corral_source_split_6265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1461} $p2699 := lowmem_page_address($p2698);
    goto corral_source_split_6266;

  corral_source_split_6266:
    assume {:verifier.code 0} true;
    $i2700 := $p2i.ref.i64($p2699);
    goto corral_source_split_6267;

  corral_source_split_6267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1462} gnttab_end_foreign_access($i2692, 0, $i2700);
    goto corral_source_split_6268;

  corral_source_split_6268:
    assume {:verifier.code 0} true;
    $p2702 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(149, 4));
    goto corral_source_split_6269;

  corral_source_split_6269:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2702, 0);
    goto corral_source_split_6270;

  corral_source_split_6270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1463} kfree_skb($p2687);
    goto corral_source_split_6271;

  corral_source_split_6271:
    assume {:verifier.code 0} true;
    goto $bb1202;

  $bb1202:
    assume {:verifier.code 0} true;
    goto $bb1203;

  $bb1203:
    assume {:verifier.code 0} true;
    $p2704 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(150, 8));
    goto corral_source_split_6273;

  corral_source_split_6273:
    assume {:verifier.code 0} true;
    $p2705 := $load.ref($M.0, $p2704);
    goto corral_source_split_6274;

  corral_source_split_6274:
    assume {:verifier.code 0} true;
    $i2706 := $p2i.ref.i64($p2705);
    goto corral_source_split_6275;

  corral_source_split_6275:
    assume {:verifier.code 0} true;
    $i2707 := $eq.i64($i2706, 0);
    goto corral_source_split_6276;

  corral_source_split_6276:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2707} true;
    goto $bb1204, $bb1205;

  $bb1205:
    assume !($i2707 == 1);
    assume {:verifier.code 0} true;
    goto $bb1206;

  $bb1206:
    assume {:verifier.code 0} true;
    $p2709 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(150, 4));
    goto corral_source_split_6280;

  corral_source_split_6280:
    assume {:verifier.code 0} true;
    $i2710 := $load.i32($M.0, $p2709);
    goto corral_source_split_6281;

  corral_source_split_6281:
    assume {:verifier.code 0} true;
    $i2711 := $eq.i32($i2710, 0);
    goto corral_source_split_6282;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2711} true;
    goto $bb1207, $bb1208;

  $bb1208:
    assume !($i2711 == 1);
    assume {:verifier.code 0} true;
    goto $bb1209;

  $bb1209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1464} $p2712 := skb_end_pointer($p2705);
    goto corral_source_split_6286;

  corral_source_split_6286:
    assume {:verifier.code 0} true;
    $p2713 := $bitcast.ref.ref($p2712);
    goto corral_source_split_6287;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    $p2714 := $add.ref($add.ref($p2713, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_6288;

  corral_source_split_6288:
    assume {:verifier.code 0} true;
    $p2715 := $bitcast.ref.ref($p2714);
    goto corral_source_split_6289;

  corral_source_split_6289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1465} $p2716 := skb_frag_page($p2715);
    goto corral_source_split_6290;

  corral_source_split_6290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1466} get_page($p2716);
    goto corral_source_split_6291;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1467} $p2717 := lowmem_page_address($p2716);
    goto corral_source_split_6292;

  corral_source_split_6292:
    assume {:verifier.code 0} true;
    $i2718 := $p2i.ref.i64($p2717);
    goto corral_source_split_6293;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1468} gnttab_end_foreign_access($i2710, 0, $i2718);
    goto corral_source_split_6294;

  corral_source_split_6294:
    assume {:verifier.code 0} true;
    $p2720 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(150, 4));
    goto corral_source_split_6295;

  corral_source_split_6295:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2720, 0);
    goto corral_source_split_6296;

  corral_source_split_6296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1469} kfree_skb($p2705);
    goto corral_source_split_6297;

  corral_source_split_6297:
    assume {:verifier.code 0} true;
    goto $bb1210;

  $bb1210:
    assume {:verifier.code 0} true;
    goto $bb1211;

  $bb1211:
    assume {:verifier.code 0} true;
    $p2722 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(151, 8));
    goto corral_source_split_6299;

  corral_source_split_6299:
    assume {:verifier.code 0} true;
    $p2723 := $load.ref($M.0, $p2722);
    goto corral_source_split_6300;

  corral_source_split_6300:
    assume {:verifier.code 0} true;
    $i2724 := $p2i.ref.i64($p2723);
    goto corral_source_split_6301;

  corral_source_split_6301:
    assume {:verifier.code 0} true;
    $i2725 := $eq.i64($i2724, 0);
    goto corral_source_split_6302;

  corral_source_split_6302:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2725} true;
    goto $bb1212, $bb1213;

  $bb1213:
    assume !($i2725 == 1);
    assume {:verifier.code 0} true;
    goto $bb1214;

  $bb1214:
    assume {:verifier.code 0} true;
    $p2727 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(151, 4));
    goto corral_source_split_6306;

  corral_source_split_6306:
    assume {:verifier.code 0} true;
    $i2728 := $load.i32($M.0, $p2727);
    goto corral_source_split_6307;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    $i2729 := $eq.i32($i2728, 0);
    goto corral_source_split_6308;

  corral_source_split_6308:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2729} true;
    goto $bb1215, $bb1216;

  $bb1216:
    assume !($i2729 == 1);
    assume {:verifier.code 0} true;
    goto $bb1217;

  $bb1217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1470} $p2730 := skb_end_pointer($p2723);
    goto corral_source_split_6312;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    $p2731 := $bitcast.ref.ref($p2730);
    goto corral_source_split_6313;

  corral_source_split_6313:
    assume {:verifier.code 0} true;
    $p2732 := $add.ref($add.ref($p2731, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_6314;

  corral_source_split_6314:
    assume {:verifier.code 0} true;
    $p2733 := $bitcast.ref.ref($p2732);
    goto corral_source_split_6315;

  corral_source_split_6315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1471} $p2734 := skb_frag_page($p2733);
    goto corral_source_split_6316;

  corral_source_split_6316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1472} get_page($p2734);
    goto corral_source_split_6317;

  corral_source_split_6317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1473} $p2735 := lowmem_page_address($p2734);
    goto corral_source_split_6318;

  corral_source_split_6318:
    assume {:verifier.code 0} true;
    $i2736 := $p2i.ref.i64($p2735);
    goto corral_source_split_6319;

  corral_source_split_6319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1474} gnttab_end_foreign_access($i2728, 0, $i2736);
    goto corral_source_split_6320;

  corral_source_split_6320:
    assume {:verifier.code 0} true;
    $p2738 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(151, 4));
    goto corral_source_split_6321;

  corral_source_split_6321:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2738, 0);
    goto corral_source_split_6322;

  corral_source_split_6322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1475} kfree_skb($p2723);
    goto corral_source_split_6323;

  corral_source_split_6323:
    assume {:verifier.code 0} true;
    goto $bb1218;

  $bb1218:
    assume {:verifier.code 0} true;
    goto $bb1219;

  $bb1219:
    assume {:verifier.code 0} true;
    $p2740 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(152, 8));
    goto corral_source_split_6325;

  corral_source_split_6325:
    assume {:verifier.code 0} true;
    $p2741 := $load.ref($M.0, $p2740);
    goto corral_source_split_6326;

  corral_source_split_6326:
    assume {:verifier.code 0} true;
    $i2742 := $p2i.ref.i64($p2741);
    goto corral_source_split_6327;

  corral_source_split_6327:
    assume {:verifier.code 0} true;
    $i2743 := $eq.i64($i2742, 0);
    goto corral_source_split_6328;

  corral_source_split_6328:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2743} true;
    goto $bb1220, $bb1221;

  $bb1221:
    assume !($i2743 == 1);
    assume {:verifier.code 0} true;
    goto $bb1222;

  $bb1222:
    assume {:verifier.code 0} true;
    $p2745 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(152, 4));
    goto corral_source_split_6332;

  corral_source_split_6332:
    assume {:verifier.code 0} true;
    $i2746 := $load.i32($M.0, $p2745);
    goto corral_source_split_6333;

  corral_source_split_6333:
    assume {:verifier.code 0} true;
    $i2747 := $eq.i32($i2746, 0);
    goto corral_source_split_6334;

  corral_source_split_6334:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2747} true;
    goto $bb1223, $bb1224;

  $bb1224:
    assume !($i2747 == 1);
    assume {:verifier.code 0} true;
    goto $bb1225;

  $bb1225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1476} $p2748 := skb_end_pointer($p2741);
    goto corral_source_split_6338;

  corral_source_split_6338:
    assume {:verifier.code 0} true;
    $p2749 := $bitcast.ref.ref($p2748);
    goto corral_source_split_6339;

  corral_source_split_6339:
    assume {:verifier.code 0} true;
    $p2750 := $add.ref($add.ref($p2749, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_6340;

  corral_source_split_6340:
    assume {:verifier.code 0} true;
    $p2751 := $bitcast.ref.ref($p2750);
    goto corral_source_split_6341;

  corral_source_split_6341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1477} $p2752 := skb_frag_page($p2751);
    goto corral_source_split_6342;

  corral_source_split_6342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1478} get_page($p2752);
    goto corral_source_split_6343;

  corral_source_split_6343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1479} $p2753 := lowmem_page_address($p2752);
    goto corral_source_split_6344;

  corral_source_split_6344:
    assume {:verifier.code 0} true;
    $i2754 := $p2i.ref.i64($p2753);
    goto corral_source_split_6345;

  corral_source_split_6345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1480} gnttab_end_foreign_access($i2746, 0, $i2754);
    goto corral_source_split_6346;

  corral_source_split_6346:
    assume {:verifier.code 0} true;
    $p2756 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(152, 4));
    goto corral_source_split_6347;

  corral_source_split_6347:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2756, 0);
    goto corral_source_split_6348;

  corral_source_split_6348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1481} kfree_skb($p2741);
    goto corral_source_split_6349;

  corral_source_split_6349:
    assume {:verifier.code 0} true;
    goto $bb1226;

  $bb1226:
    assume {:verifier.code 0} true;
    goto $bb1227;

  $bb1227:
    assume {:verifier.code 0} true;
    $p2758 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(153, 8));
    goto corral_source_split_6351;

  corral_source_split_6351:
    assume {:verifier.code 0} true;
    $p2759 := $load.ref($M.0, $p2758);
    goto corral_source_split_6352;

  corral_source_split_6352:
    assume {:verifier.code 0} true;
    $i2760 := $p2i.ref.i64($p2759);
    goto corral_source_split_6353;

  corral_source_split_6353:
    assume {:verifier.code 0} true;
    $i2761 := $eq.i64($i2760, 0);
    goto corral_source_split_6354;

  corral_source_split_6354:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2761} true;
    goto $bb1228, $bb1229;

  $bb1229:
    assume !($i2761 == 1);
    assume {:verifier.code 0} true;
    goto $bb1230;

  $bb1230:
    assume {:verifier.code 0} true;
    $p2763 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(153, 4));
    goto corral_source_split_6358;

  corral_source_split_6358:
    assume {:verifier.code 0} true;
    $i2764 := $load.i32($M.0, $p2763);
    goto corral_source_split_6359;

  corral_source_split_6359:
    assume {:verifier.code 0} true;
    $i2765 := $eq.i32($i2764, 0);
    goto corral_source_split_6360;

  corral_source_split_6360:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2765} true;
    goto $bb1231, $bb1232;

  $bb1232:
    assume !($i2765 == 1);
    assume {:verifier.code 0} true;
    goto $bb1233;

  $bb1233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1482} $p2766 := skb_end_pointer($p2759);
    goto corral_source_split_6364;

  corral_source_split_6364:
    assume {:verifier.code 0} true;
    $p2767 := $bitcast.ref.ref($p2766);
    goto corral_source_split_6365;

  corral_source_split_6365:
    assume {:verifier.code 0} true;
    $p2768 := $add.ref($add.ref($p2767, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_6366;

  corral_source_split_6366:
    assume {:verifier.code 0} true;
    $p2769 := $bitcast.ref.ref($p2768);
    goto corral_source_split_6367;

  corral_source_split_6367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1483} $p2770 := skb_frag_page($p2769);
    goto corral_source_split_6368;

  corral_source_split_6368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1484} get_page($p2770);
    goto corral_source_split_6369;

  corral_source_split_6369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1485} $p2771 := lowmem_page_address($p2770);
    goto corral_source_split_6370;

  corral_source_split_6370:
    assume {:verifier.code 0} true;
    $i2772 := $p2i.ref.i64($p2771);
    goto corral_source_split_6371;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1486} gnttab_end_foreign_access($i2764, 0, $i2772);
    goto corral_source_split_6372;

  corral_source_split_6372:
    assume {:verifier.code 0} true;
    $p2774 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(153, 4));
    goto corral_source_split_6373;

  corral_source_split_6373:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2774, 0);
    goto corral_source_split_6374;

  corral_source_split_6374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1487} kfree_skb($p2759);
    goto corral_source_split_6375;

  corral_source_split_6375:
    assume {:verifier.code 0} true;
    goto $bb1234;

  $bb1234:
    assume {:verifier.code 0} true;
    goto $bb1235;

  $bb1235:
    assume {:verifier.code 0} true;
    $p2776 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(154, 8));
    goto corral_source_split_6377;

  corral_source_split_6377:
    assume {:verifier.code 0} true;
    $p2777 := $load.ref($M.0, $p2776);
    goto corral_source_split_6378;

  corral_source_split_6378:
    assume {:verifier.code 0} true;
    $i2778 := $p2i.ref.i64($p2777);
    goto corral_source_split_6379;

  corral_source_split_6379:
    assume {:verifier.code 0} true;
    $i2779 := $eq.i64($i2778, 0);
    goto corral_source_split_6380;

  corral_source_split_6380:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2779} true;
    goto $bb1236, $bb1237;

  $bb1237:
    assume !($i2779 == 1);
    assume {:verifier.code 0} true;
    goto $bb1238;

  $bb1238:
    assume {:verifier.code 0} true;
    $p2781 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(154, 4));
    goto corral_source_split_6384;

  corral_source_split_6384:
    assume {:verifier.code 0} true;
    $i2782 := $load.i32($M.0, $p2781);
    goto corral_source_split_6385;

  corral_source_split_6385:
    assume {:verifier.code 0} true;
    $i2783 := $eq.i32($i2782, 0);
    goto corral_source_split_6386;

  corral_source_split_6386:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2783} true;
    goto $bb1239, $bb1240;

  $bb1240:
    assume !($i2783 == 1);
    assume {:verifier.code 0} true;
    goto $bb1241;

  $bb1241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1488} $p2784 := skb_end_pointer($p2777);
    goto corral_source_split_6390;

  corral_source_split_6390:
    assume {:verifier.code 0} true;
    $p2785 := $bitcast.ref.ref($p2784);
    goto corral_source_split_6391;

  corral_source_split_6391:
    assume {:verifier.code 0} true;
    $p2786 := $add.ref($add.ref($p2785, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_6392;

  corral_source_split_6392:
    assume {:verifier.code 0} true;
    $p2787 := $bitcast.ref.ref($p2786);
    goto corral_source_split_6393;

  corral_source_split_6393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1489} $p2788 := skb_frag_page($p2787);
    goto corral_source_split_6394;

  corral_source_split_6394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1490} get_page($p2788);
    goto corral_source_split_6395;

  corral_source_split_6395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1491} $p2789 := lowmem_page_address($p2788);
    goto corral_source_split_6396;

  corral_source_split_6396:
    assume {:verifier.code 0} true;
    $i2790 := $p2i.ref.i64($p2789);
    goto corral_source_split_6397;

  corral_source_split_6397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1492} gnttab_end_foreign_access($i2782, 0, $i2790);
    goto corral_source_split_6398;

  corral_source_split_6398:
    assume {:verifier.code 0} true;
    $p2792 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(154, 4));
    goto corral_source_split_6399;

  corral_source_split_6399:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2792, 0);
    goto corral_source_split_6400;

  corral_source_split_6400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1493} kfree_skb($p2777);
    goto corral_source_split_6401;

  corral_source_split_6401:
    assume {:verifier.code 0} true;
    goto $bb1242;

  $bb1242:
    assume {:verifier.code 0} true;
    goto $bb1243;

  $bb1243:
    assume {:verifier.code 0} true;
    $p2794 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(155, 8));
    goto corral_source_split_6403;

  corral_source_split_6403:
    assume {:verifier.code 0} true;
    $p2795 := $load.ref($M.0, $p2794);
    goto corral_source_split_6404;

  corral_source_split_6404:
    assume {:verifier.code 0} true;
    $i2796 := $p2i.ref.i64($p2795);
    goto corral_source_split_6405;

  corral_source_split_6405:
    assume {:verifier.code 0} true;
    $i2797 := $eq.i64($i2796, 0);
    goto corral_source_split_6406;

  corral_source_split_6406:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2797} true;
    goto $bb1244, $bb1245;

  $bb1245:
    assume !($i2797 == 1);
    assume {:verifier.code 0} true;
    goto $bb1246;

  $bb1246:
    assume {:verifier.code 0} true;
    $p2799 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(155, 4));
    goto corral_source_split_6410;

  corral_source_split_6410:
    assume {:verifier.code 0} true;
    $i2800 := $load.i32($M.0, $p2799);
    goto corral_source_split_6411;

  corral_source_split_6411:
    assume {:verifier.code 0} true;
    $i2801 := $eq.i32($i2800, 0);
    goto corral_source_split_6412;

  corral_source_split_6412:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2801} true;
    goto $bb1247, $bb1248;

  $bb1248:
    assume !($i2801 == 1);
    assume {:verifier.code 0} true;
    goto $bb1249;

  $bb1249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1494} $p2802 := skb_end_pointer($p2795);
    goto corral_source_split_6416;

  corral_source_split_6416:
    assume {:verifier.code 0} true;
    $p2803 := $bitcast.ref.ref($p2802);
    goto corral_source_split_6417;

  corral_source_split_6417:
    assume {:verifier.code 0} true;
    $p2804 := $add.ref($add.ref($p2803, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_6418;

  corral_source_split_6418:
    assume {:verifier.code 0} true;
    $p2805 := $bitcast.ref.ref($p2804);
    goto corral_source_split_6419;

  corral_source_split_6419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1495} $p2806 := skb_frag_page($p2805);
    goto corral_source_split_6420;

  corral_source_split_6420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1496} get_page($p2806);
    goto corral_source_split_6421;

  corral_source_split_6421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1497} $p2807 := lowmem_page_address($p2806);
    goto corral_source_split_6422;

  corral_source_split_6422:
    assume {:verifier.code 0} true;
    $i2808 := $p2i.ref.i64($p2807);
    goto corral_source_split_6423;

  corral_source_split_6423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1498} gnttab_end_foreign_access($i2800, 0, $i2808);
    goto corral_source_split_6424;

  corral_source_split_6424:
    assume {:verifier.code 0} true;
    $p2810 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(155, 4));
    goto corral_source_split_6425;

  corral_source_split_6425:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2810, 0);
    goto corral_source_split_6426;

  corral_source_split_6426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1499} kfree_skb($p2795);
    goto corral_source_split_6427;

  corral_source_split_6427:
    assume {:verifier.code 0} true;
    goto $bb1250;

  $bb1250:
    assume {:verifier.code 0} true;
    goto $bb1251;

  $bb1251:
    assume {:verifier.code 0} true;
    $p2812 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(156, 8));
    goto corral_source_split_6429;

  corral_source_split_6429:
    assume {:verifier.code 0} true;
    $p2813 := $load.ref($M.0, $p2812);
    goto corral_source_split_6430;

  corral_source_split_6430:
    assume {:verifier.code 0} true;
    $i2814 := $p2i.ref.i64($p2813);
    goto corral_source_split_6431;

  corral_source_split_6431:
    assume {:verifier.code 0} true;
    $i2815 := $eq.i64($i2814, 0);
    goto corral_source_split_6432;

  corral_source_split_6432:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2815} true;
    goto $bb1252, $bb1253;

  $bb1253:
    assume !($i2815 == 1);
    assume {:verifier.code 0} true;
    goto $bb1254;

  $bb1254:
    assume {:verifier.code 0} true;
    $p2817 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(156, 4));
    goto corral_source_split_6436;

  corral_source_split_6436:
    assume {:verifier.code 0} true;
    $i2818 := $load.i32($M.0, $p2817);
    goto corral_source_split_6437;

  corral_source_split_6437:
    assume {:verifier.code 0} true;
    $i2819 := $eq.i32($i2818, 0);
    goto corral_source_split_6438;

  corral_source_split_6438:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2819} true;
    goto $bb1255, $bb1256;

  $bb1256:
    assume !($i2819 == 1);
    assume {:verifier.code 0} true;
    goto $bb1257;

  $bb1257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1500} $p2820 := skb_end_pointer($p2813);
    goto corral_source_split_6442;

  corral_source_split_6442:
    assume {:verifier.code 0} true;
    $p2821 := $bitcast.ref.ref($p2820);
    goto corral_source_split_6443;

  corral_source_split_6443:
    assume {:verifier.code 0} true;
    $p2822 := $add.ref($add.ref($p2821, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_6444;

  corral_source_split_6444:
    assume {:verifier.code 0} true;
    $p2823 := $bitcast.ref.ref($p2822);
    goto corral_source_split_6445;

  corral_source_split_6445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1501} $p2824 := skb_frag_page($p2823);
    goto corral_source_split_6446;

  corral_source_split_6446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1502} get_page($p2824);
    goto corral_source_split_6447;

  corral_source_split_6447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1503} $p2825 := lowmem_page_address($p2824);
    goto corral_source_split_6448;

  corral_source_split_6448:
    assume {:verifier.code 0} true;
    $i2826 := $p2i.ref.i64($p2825);
    goto corral_source_split_6449;

  corral_source_split_6449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1504} gnttab_end_foreign_access($i2818, 0, $i2826);
    goto corral_source_split_6450;

  corral_source_split_6450:
    assume {:verifier.code 0} true;
    $p2828 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(156, 4));
    goto corral_source_split_6451;

  corral_source_split_6451:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2828, 0);
    goto corral_source_split_6452;

  corral_source_split_6452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1505} kfree_skb($p2813);
    goto corral_source_split_6453;

  corral_source_split_6453:
    assume {:verifier.code 0} true;
    goto $bb1258;

  $bb1258:
    assume {:verifier.code 0} true;
    goto $bb1259;

  $bb1259:
    assume {:verifier.code 0} true;
    $p2830 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(157, 8));
    goto corral_source_split_6455;

  corral_source_split_6455:
    assume {:verifier.code 0} true;
    $p2831 := $load.ref($M.0, $p2830);
    goto corral_source_split_6456;

  corral_source_split_6456:
    assume {:verifier.code 0} true;
    $i2832 := $p2i.ref.i64($p2831);
    goto corral_source_split_6457;

  corral_source_split_6457:
    assume {:verifier.code 0} true;
    $i2833 := $eq.i64($i2832, 0);
    goto corral_source_split_6458;

  corral_source_split_6458:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2833} true;
    goto $bb1260, $bb1261;

  $bb1261:
    assume !($i2833 == 1);
    assume {:verifier.code 0} true;
    goto $bb1262;

  $bb1262:
    assume {:verifier.code 0} true;
    $p2835 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(157, 4));
    goto corral_source_split_6462;

  corral_source_split_6462:
    assume {:verifier.code 0} true;
    $i2836 := $load.i32($M.0, $p2835);
    goto corral_source_split_6463;

  corral_source_split_6463:
    assume {:verifier.code 0} true;
    $i2837 := $eq.i32($i2836, 0);
    goto corral_source_split_6464;

  corral_source_split_6464:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2837} true;
    goto $bb1263, $bb1264;

  $bb1264:
    assume !($i2837 == 1);
    assume {:verifier.code 0} true;
    goto $bb1265;

  $bb1265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1506} $p2838 := skb_end_pointer($p2831);
    goto corral_source_split_6468;

  corral_source_split_6468:
    assume {:verifier.code 0} true;
    $p2839 := $bitcast.ref.ref($p2838);
    goto corral_source_split_6469;

  corral_source_split_6469:
    assume {:verifier.code 0} true;
    $p2840 := $add.ref($add.ref($p2839, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_6470;

  corral_source_split_6470:
    assume {:verifier.code 0} true;
    $p2841 := $bitcast.ref.ref($p2840);
    goto corral_source_split_6471;

  corral_source_split_6471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1507} $p2842 := skb_frag_page($p2841);
    goto corral_source_split_6472;

  corral_source_split_6472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1508} get_page($p2842);
    goto corral_source_split_6473;

  corral_source_split_6473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1509} $p2843 := lowmem_page_address($p2842);
    goto corral_source_split_6474;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    $i2844 := $p2i.ref.i64($p2843);
    goto corral_source_split_6475;

  corral_source_split_6475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1510} gnttab_end_foreign_access($i2836, 0, $i2844);
    goto corral_source_split_6476;

  corral_source_split_6476:
    assume {:verifier.code 0} true;
    $p2846 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(157, 4));
    goto corral_source_split_6477;

  corral_source_split_6477:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2846, 0);
    goto corral_source_split_6478;

  corral_source_split_6478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1511} kfree_skb($p2831);
    goto corral_source_split_6479;

  corral_source_split_6479:
    assume {:verifier.code 0} true;
    goto $bb1266;

  $bb1266:
    assume {:verifier.code 0} true;
    goto $bb1267;

  $bb1267:
    assume {:verifier.code 0} true;
    $p2848 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(158, 8));
    goto corral_source_split_6481;

  corral_source_split_6481:
    assume {:verifier.code 0} true;
    $p2849 := $load.ref($M.0, $p2848);
    goto corral_source_split_6482;

  corral_source_split_6482:
    assume {:verifier.code 0} true;
    $i2850 := $p2i.ref.i64($p2849);
    goto corral_source_split_6483;

  corral_source_split_6483:
    assume {:verifier.code 0} true;
    $i2851 := $eq.i64($i2850, 0);
    goto corral_source_split_6484;

  corral_source_split_6484:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2851} true;
    goto $bb1268, $bb1269;

  $bb1269:
    assume !($i2851 == 1);
    assume {:verifier.code 0} true;
    goto $bb1270;

  $bb1270:
    assume {:verifier.code 0} true;
    $p2853 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(158, 4));
    goto corral_source_split_6488;

  corral_source_split_6488:
    assume {:verifier.code 0} true;
    $i2854 := $load.i32($M.0, $p2853);
    goto corral_source_split_6489;

  corral_source_split_6489:
    assume {:verifier.code 0} true;
    $i2855 := $eq.i32($i2854, 0);
    goto corral_source_split_6490;

  corral_source_split_6490:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2855} true;
    goto $bb1271, $bb1272;

  $bb1272:
    assume !($i2855 == 1);
    assume {:verifier.code 0} true;
    goto $bb1273;

  $bb1273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1512} $p2856 := skb_end_pointer($p2849);
    goto corral_source_split_6494;

  corral_source_split_6494:
    assume {:verifier.code 0} true;
    $p2857 := $bitcast.ref.ref($p2856);
    goto corral_source_split_6495;

  corral_source_split_6495:
    assume {:verifier.code 0} true;
    $p2858 := $add.ref($add.ref($p2857, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_6496;

  corral_source_split_6496:
    assume {:verifier.code 0} true;
    $p2859 := $bitcast.ref.ref($p2858);
    goto corral_source_split_6497;

  corral_source_split_6497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1513} $p2860 := skb_frag_page($p2859);
    goto corral_source_split_6498;

  corral_source_split_6498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1514} get_page($p2860);
    goto corral_source_split_6499;

  corral_source_split_6499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1515} $p2861 := lowmem_page_address($p2860);
    goto corral_source_split_6500;

  corral_source_split_6500:
    assume {:verifier.code 0} true;
    $i2862 := $p2i.ref.i64($p2861);
    goto corral_source_split_6501;

  corral_source_split_6501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1516} gnttab_end_foreign_access($i2854, 0, $i2862);
    goto corral_source_split_6502;

  corral_source_split_6502:
    assume {:verifier.code 0} true;
    $p2864 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(158, 4));
    goto corral_source_split_6503;

  corral_source_split_6503:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2864, 0);
    goto corral_source_split_6504;

  corral_source_split_6504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1517} kfree_skb($p2849);
    goto corral_source_split_6505;

  corral_source_split_6505:
    assume {:verifier.code 0} true;
    goto $bb1274;

  $bb1274:
    assume {:verifier.code 0} true;
    goto $bb1275;

  $bb1275:
    assume {:verifier.code 0} true;
    $p2866 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(159, 8));
    goto corral_source_split_6507;

  corral_source_split_6507:
    assume {:verifier.code 0} true;
    $p2867 := $load.ref($M.0, $p2866);
    goto corral_source_split_6508;

  corral_source_split_6508:
    assume {:verifier.code 0} true;
    $i2868 := $p2i.ref.i64($p2867);
    goto corral_source_split_6509;

  corral_source_split_6509:
    assume {:verifier.code 0} true;
    $i2869 := $eq.i64($i2868, 0);
    goto corral_source_split_6510;

  corral_source_split_6510:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2869} true;
    goto $bb1276, $bb1277;

  $bb1277:
    assume !($i2869 == 1);
    assume {:verifier.code 0} true;
    goto $bb1278;

  $bb1278:
    assume {:verifier.code 0} true;
    $p2871 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(159, 4));
    goto corral_source_split_6514;

  corral_source_split_6514:
    assume {:verifier.code 0} true;
    $i2872 := $load.i32($M.0, $p2871);
    goto corral_source_split_6515;

  corral_source_split_6515:
    assume {:verifier.code 0} true;
    $i2873 := $eq.i32($i2872, 0);
    goto corral_source_split_6516;

  corral_source_split_6516:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2873} true;
    goto $bb1279, $bb1280;

  $bb1280:
    assume !($i2873 == 1);
    assume {:verifier.code 0} true;
    goto $bb1281;

  $bb1281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1518} $p2874 := skb_end_pointer($p2867);
    goto corral_source_split_6520;

  corral_source_split_6520:
    assume {:verifier.code 0} true;
    $p2875 := $bitcast.ref.ref($p2874);
    goto corral_source_split_6521;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    $p2876 := $add.ref($add.ref($p2875, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_6522;

  corral_source_split_6522:
    assume {:verifier.code 0} true;
    $p2877 := $bitcast.ref.ref($p2876);
    goto corral_source_split_6523;

  corral_source_split_6523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1519} $p2878 := skb_frag_page($p2877);
    goto corral_source_split_6524;

  corral_source_split_6524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1520} get_page($p2878);
    goto corral_source_split_6525;

  corral_source_split_6525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1521} $p2879 := lowmem_page_address($p2878);
    goto corral_source_split_6526;

  corral_source_split_6526:
    assume {:verifier.code 0} true;
    $i2880 := $p2i.ref.i64($p2879);
    goto corral_source_split_6527;

  corral_source_split_6527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1522} gnttab_end_foreign_access($i2872, 0, $i2880);
    goto corral_source_split_6528;

  corral_source_split_6528:
    assume {:verifier.code 0} true;
    $p2882 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(159, 4));
    goto corral_source_split_6529;

  corral_source_split_6529:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2882, 0);
    goto corral_source_split_6530;

  corral_source_split_6530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1523} kfree_skb($p2867);
    goto corral_source_split_6531;

  corral_source_split_6531:
    assume {:verifier.code 0} true;
    goto $bb1282;

  $bb1282:
    assume {:verifier.code 0} true;
    goto $bb1283;

  $bb1283:
    assume {:verifier.code 0} true;
    $p2884 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(160, 8));
    goto corral_source_split_6533;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    $p2885 := $load.ref($M.0, $p2884);
    goto corral_source_split_6534;

  corral_source_split_6534:
    assume {:verifier.code 0} true;
    $i2886 := $p2i.ref.i64($p2885);
    goto corral_source_split_6535;

  corral_source_split_6535:
    assume {:verifier.code 0} true;
    $i2887 := $eq.i64($i2886, 0);
    goto corral_source_split_6536;

  corral_source_split_6536:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2887} true;
    goto $bb1284, $bb1285;

  $bb1285:
    assume !($i2887 == 1);
    assume {:verifier.code 0} true;
    goto $bb1286;

  $bb1286:
    assume {:verifier.code 0} true;
    $p2889 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(160, 4));
    goto corral_source_split_6540;

  corral_source_split_6540:
    assume {:verifier.code 0} true;
    $i2890 := $load.i32($M.0, $p2889);
    goto corral_source_split_6541;

  corral_source_split_6541:
    assume {:verifier.code 0} true;
    $i2891 := $eq.i32($i2890, 0);
    goto corral_source_split_6542;

  corral_source_split_6542:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2891} true;
    goto $bb1287, $bb1288;

  $bb1288:
    assume !($i2891 == 1);
    assume {:verifier.code 0} true;
    goto $bb1289;

  $bb1289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1524} $p2892 := skb_end_pointer($p2885);
    goto corral_source_split_6546;

  corral_source_split_6546:
    assume {:verifier.code 0} true;
    $p2893 := $bitcast.ref.ref($p2892);
    goto corral_source_split_6547;

  corral_source_split_6547:
    assume {:verifier.code 0} true;
    $p2894 := $add.ref($add.ref($p2893, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_6548;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    $p2895 := $bitcast.ref.ref($p2894);
    goto corral_source_split_6549;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1525} $p2896 := skb_frag_page($p2895);
    goto corral_source_split_6550;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1526} get_page($p2896);
    goto corral_source_split_6551;

  corral_source_split_6551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1527} $p2897 := lowmem_page_address($p2896);
    goto corral_source_split_6552;

  corral_source_split_6552:
    assume {:verifier.code 0} true;
    $i2898 := $p2i.ref.i64($p2897);
    goto corral_source_split_6553;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1528} gnttab_end_foreign_access($i2890, 0, $i2898);
    goto corral_source_split_6554;

  corral_source_split_6554:
    assume {:verifier.code 0} true;
    $p2900 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(160, 4));
    goto corral_source_split_6555;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2900, 0);
    goto corral_source_split_6556;

  corral_source_split_6556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1529} kfree_skb($p2885);
    goto corral_source_split_6557;

  corral_source_split_6557:
    assume {:verifier.code 0} true;
    goto $bb1290;

  $bb1290:
    assume {:verifier.code 0} true;
    goto $bb1291;

  $bb1291:
    assume {:verifier.code 0} true;
    $p2902 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(161, 8));
    goto corral_source_split_6559;

  corral_source_split_6559:
    assume {:verifier.code 0} true;
    $p2903 := $load.ref($M.0, $p2902);
    goto corral_source_split_6560;

  corral_source_split_6560:
    assume {:verifier.code 0} true;
    $i2904 := $p2i.ref.i64($p2903);
    goto corral_source_split_6561;

  corral_source_split_6561:
    assume {:verifier.code 0} true;
    $i2905 := $eq.i64($i2904, 0);
    goto corral_source_split_6562;

  corral_source_split_6562:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2905} true;
    goto $bb1292, $bb1293;

  $bb1293:
    assume !($i2905 == 1);
    assume {:verifier.code 0} true;
    goto $bb1294;

  $bb1294:
    assume {:verifier.code 0} true;
    $p2907 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(161, 4));
    goto corral_source_split_6566;

  corral_source_split_6566:
    assume {:verifier.code 0} true;
    $i2908 := $load.i32($M.0, $p2907);
    goto corral_source_split_6567;

  corral_source_split_6567:
    assume {:verifier.code 0} true;
    $i2909 := $eq.i32($i2908, 0);
    goto corral_source_split_6568;

  corral_source_split_6568:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2909} true;
    goto $bb1295, $bb1296;

  $bb1296:
    assume !($i2909 == 1);
    assume {:verifier.code 0} true;
    goto $bb1297;

  $bb1297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1530} $p2910 := skb_end_pointer($p2903);
    goto corral_source_split_6572;

  corral_source_split_6572:
    assume {:verifier.code 0} true;
    $p2911 := $bitcast.ref.ref($p2910);
    goto corral_source_split_6573;

  corral_source_split_6573:
    assume {:verifier.code 0} true;
    $p2912 := $add.ref($add.ref($p2911, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_6574;

  corral_source_split_6574:
    assume {:verifier.code 0} true;
    $p2913 := $bitcast.ref.ref($p2912);
    goto corral_source_split_6575;

  corral_source_split_6575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1531} $p2914 := skb_frag_page($p2913);
    goto corral_source_split_6576;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1532} get_page($p2914);
    goto corral_source_split_6577;

  corral_source_split_6577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1533} $p2915 := lowmem_page_address($p2914);
    goto corral_source_split_6578;

  corral_source_split_6578:
    assume {:verifier.code 0} true;
    $i2916 := $p2i.ref.i64($p2915);
    goto corral_source_split_6579;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1534} gnttab_end_foreign_access($i2908, 0, $i2916);
    goto corral_source_split_6580;

  corral_source_split_6580:
    assume {:verifier.code 0} true;
    $p2918 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(161, 4));
    goto corral_source_split_6581;

  corral_source_split_6581:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2918, 0);
    goto corral_source_split_6582;

  corral_source_split_6582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1535} kfree_skb($p2903);
    goto corral_source_split_6583;

  corral_source_split_6583:
    assume {:verifier.code 0} true;
    goto $bb1298;

  $bb1298:
    assume {:verifier.code 0} true;
    goto $bb1299;

  $bb1299:
    assume {:verifier.code 0} true;
    $p2920 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(162, 8));
    goto corral_source_split_6585;

  corral_source_split_6585:
    assume {:verifier.code 0} true;
    $p2921 := $load.ref($M.0, $p2920);
    goto corral_source_split_6586;

  corral_source_split_6586:
    assume {:verifier.code 0} true;
    $i2922 := $p2i.ref.i64($p2921);
    goto corral_source_split_6587;

  corral_source_split_6587:
    assume {:verifier.code 0} true;
    $i2923 := $eq.i64($i2922, 0);
    goto corral_source_split_6588;

  corral_source_split_6588:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2923} true;
    goto $bb1300, $bb1301;

  $bb1301:
    assume !($i2923 == 1);
    assume {:verifier.code 0} true;
    goto $bb1302;

  $bb1302:
    assume {:verifier.code 0} true;
    $p2925 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(162, 4));
    goto corral_source_split_6592;

  corral_source_split_6592:
    assume {:verifier.code 0} true;
    $i2926 := $load.i32($M.0, $p2925);
    goto corral_source_split_6593;

  corral_source_split_6593:
    assume {:verifier.code 0} true;
    $i2927 := $eq.i32($i2926, 0);
    goto corral_source_split_6594;

  corral_source_split_6594:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2927} true;
    goto $bb1303, $bb1304;

  $bb1304:
    assume !($i2927 == 1);
    assume {:verifier.code 0} true;
    goto $bb1305;

  $bb1305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1536} $p2928 := skb_end_pointer($p2921);
    goto corral_source_split_6598;

  corral_source_split_6598:
    assume {:verifier.code 0} true;
    $p2929 := $bitcast.ref.ref($p2928);
    goto corral_source_split_6599;

  corral_source_split_6599:
    assume {:verifier.code 0} true;
    $p2930 := $add.ref($add.ref($p2929, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_6600;

  corral_source_split_6600:
    assume {:verifier.code 0} true;
    $p2931 := $bitcast.ref.ref($p2930);
    goto corral_source_split_6601;

  corral_source_split_6601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1537} $p2932 := skb_frag_page($p2931);
    goto corral_source_split_6602;

  corral_source_split_6602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1538} get_page($p2932);
    goto corral_source_split_6603;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1539} $p2933 := lowmem_page_address($p2932);
    goto corral_source_split_6604;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    $i2934 := $p2i.ref.i64($p2933);
    goto corral_source_split_6605;

  corral_source_split_6605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1540} gnttab_end_foreign_access($i2926, 0, $i2934);
    goto corral_source_split_6606;

  corral_source_split_6606:
    assume {:verifier.code 0} true;
    $p2936 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(162, 4));
    goto corral_source_split_6607;

  corral_source_split_6607:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2936, 0);
    goto corral_source_split_6608;

  corral_source_split_6608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1541} kfree_skb($p2921);
    goto corral_source_split_6609;

  corral_source_split_6609:
    assume {:verifier.code 0} true;
    goto $bb1306;

  $bb1306:
    assume {:verifier.code 0} true;
    goto $bb1307;

  $bb1307:
    assume {:verifier.code 0} true;
    $p2938 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(163, 8));
    goto corral_source_split_6611;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    $p2939 := $load.ref($M.0, $p2938);
    goto corral_source_split_6612;

  corral_source_split_6612:
    assume {:verifier.code 0} true;
    $i2940 := $p2i.ref.i64($p2939);
    goto corral_source_split_6613;

  corral_source_split_6613:
    assume {:verifier.code 0} true;
    $i2941 := $eq.i64($i2940, 0);
    goto corral_source_split_6614;

  corral_source_split_6614:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2941} true;
    goto $bb1308, $bb1309;

  $bb1309:
    assume !($i2941 == 1);
    assume {:verifier.code 0} true;
    goto $bb1310;

  $bb1310:
    assume {:verifier.code 0} true;
    $p2943 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(163, 4));
    goto corral_source_split_6618;

  corral_source_split_6618:
    assume {:verifier.code 0} true;
    $i2944 := $load.i32($M.0, $p2943);
    goto corral_source_split_6619;

  corral_source_split_6619:
    assume {:verifier.code 0} true;
    $i2945 := $eq.i32($i2944, 0);
    goto corral_source_split_6620;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2945} true;
    goto $bb1311, $bb1312;

  $bb1312:
    assume !($i2945 == 1);
    assume {:verifier.code 0} true;
    goto $bb1313;

  $bb1313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1542} $p2946 := skb_end_pointer($p2939);
    goto corral_source_split_6624;

  corral_source_split_6624:
    assume {:verifier.code 0} true;
    $p2947 := $bitcast.ref.ref($p2946);
    goto corral_source_split_6625;

  corral_source_split_6625:
    assume {:verifier.code 0} true;
    $p2948 := $add.ref($add.ref($p2947, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_6626;

  corral_source_split_6626:
    assume {:verifier.code 0} true;
    $p2949 := $bitcast.ref.ref($p2948);
    goto corral_source_split_6627;

  corral_source_split_6627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1543} $p2950 := skb_frag_page($p2949);
    goto corral_source_split_6628;

  corral_source_split_6628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1544} get_page($p2950);
    goto corral_source_split_6629;

  corral_source_split_6629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1545} $p2951 := lowmem_page_address($p2950);
    goto corral_source_split_6630;

  corral_source_split_6630:
    assume {:verifier.code 0} true;
    $i2952 := $p2i.ref.i64($p2951);
    goto corral_source_split_6631;

  corral_source_split_6631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1546} gnttab_end_foreign_access($i2944, 0, $i2952);
    goto corral_source_split_6632;

  corral_source_split_6632:
    assume {:verifier.code 0} true;
    $p2954 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(163, 4));
    goto corral_source_split_6633;

  corral_source_split_6633:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2954, 0);
    goto corral_source_split_6634;

  corral_source_split_6634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1547} kfree_skb($p2939);
    goto corral_source_split_6635;

  corral_source_split_6635:
    assume {:verifier.code 0} true;
    goto $bb1314;

  $bb1314:
    assume {:verifier.code 0} true;
    goto $bb1315;

  $bb1315:
    assume {:verifier.code 0} true;
    $p2956 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(164, 8));
    goto corral_source_split_6637;

  corral_source_split_6637:
    assume {:verifier.code 0} true;
    $p2957 := $load.ref($M.0, $p2956);
    goto corral_source_split_6638;

  corral_source_split_6638:
    assume {:verifier.code 0} true;
    $i2958 := $p2i.ref.i64($p2957);
    goto corral_source_split_6639;

  corral_source_split_6639:
    assume {:verifier.code 0} true;
    $i2959 := $eq.i64($i2958, 0);
    goto corral_source_split_6640;

  corral_source_split_6640:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2959} true;
    goto $bb1316, $bb1317;

  $bb1317:
    assume !($i2959 == 1);
    assume {:verifier.code 0} true;
    goto $bb1318;

  $bb1318:
    assume {:verifier.code 0} true;
    $p2961 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(164, 4));
    goto corral_source_split_6644;

  corral_source_split_6644:
    assume {:verifier.code 0} true;
    $i2962 := $load.i32($M.0, $p2961);
    goto corral_source_split_6645;

  corral_source_split_6645:
    assume {:verifier.code 0} true;
    $i2963 := $eq.i32($i2962, 0);
    goto corral_source_split_6646;

  corral_source_split_6646:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2963} true;
    goto $bb1319, $bb1320;

  $bb1320:
    assume !($i2963 == 1);
    assume {:verifier.code 0} true;
    goto $bb1321;

  $bb1321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1548} $p2964 := skb_end_pointer($p2957);
    goto corral_source_split_6650;

  corral_source_split_6650:
    assume {:verifier.code 0} true;
    $p2965 := $bitcast.ref.ref($p2964);
    goto corral_source_split_6651;

  corral_source_split_6651:
    assume {:verifier.code 0} true;
    $p2966 := $add.ref($add.ref($p2965, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_6652;

  corral_source_split_6652:
    assume {:verifier.code 0} true;
    $p2967 := $bitcast.ref.ref($p2966);
    goto corral_source_split_6653;

  corral_source_split_6653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1549} $p2968 := skb_frag_page($p2967);
    goto corral_source_split_6654;

  corral_source_split_6654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1550} get_page($p2968);
    goto corral_source_split_6655;

  corral_source_split_6655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1551} $p2969 := lowmem_page_address($p2968);
    goto corral_source_split_6656;

  corral_source_split_6656:
    assume {:verifier.code 0} true;
    $i2970 := $p2i.ref.i64($p2969);
    goto corral_source_split_6657;

  corral_source_split_6657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1552} gnttab_end_foreign_access($i2962, 0, $i2970);
    goto corral_source_split_6658;

  corral_source_split_6658:
    assume {:verifier.code 0} true;
    $p2972 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(164, 4));
    goto corral_source_split_6659;

  corral_source_split_6659:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2972, 0);
    goto corral_source_split_6660;

  corral_source_split_6660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1553} kfree_skb($p2957);
    goto corral_source_split_6661;

  corral_source_split_6661:
    assume {:verifier.code 0} true;
    goto $bb1322;

  $bb1322:
    assume {:verifier.code 0} true;
    goto $bb1323;

  $bb1323:
    assume {:verifier.code 0} true;
    $p2974 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(165, 8));
    goto corral_source_split_6663;

  corral_source_split_6663:
    assume {:verifier.code 0} true;
    $p2975 := $load.ref($M.0, $p2974);
    goto corral_source_split_6664;

  corral_source_split_6664:
    assume {:verifier.code 0} true;
    $i2976 := $p2i.ref.i64($p2975);
    goto corral_source_split_6665;

  corral_source_split_6665:
    assume {:verifier.code 0} true;
    $i2977 := $eq.i64($i2976, 0);
    goto corral_source_split_6666;

  corral_source_split_6666:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2977} true;
    goto $bb1324, $bb1325;

  $bb1325:
    assume !($i2977 == 1);
    assume {:verifier.code 0} true;
    goto $bb1326;

  $bb1326:
    assume {:verifier.code 0} true;
    $p2979 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(165, 4));
    goto corral_source_split_6670;

  corral_source_split_6670:
    assume {:verifier.code 0} true;
    $i2980 := $load.i32($M.0, $p2979);
    goto corral_source_split_6671;

  corral_source_split_6671:
    assume {:verifier.code 0} true;
    $i2981 := $eq.i32($i2980, 0);
    goto corral_source_split_6672;

  corral_source_split_6672:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2981} true;
    goto $bb1327, $bb1328;

  $bb1328:
    assume !($i2981 == 1);
    assume {:verifier.code 0} true;
    goto $bb1329;

  $bb1329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1554} $p2982 := skb_end_pointer($p2975);
    goto corral_source_split_6676;

  corral_source_split_6676:
    assume {:verifier.code 0} true;
    $p2983 := $bitcast.ref.ref($p2982);
    goto corral_source_split_6677;

  corral_source_split_6677:
    assume {:verifier.code 0} true;
    $p2984 := $add.ref($add.ref($p2983, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_6678;

  corral_source_split_6678:
    assume {:verifier.code 0} true;
    $p2985 := $bitcast.ref.ref($p2984);
    goto corral_source_split_6679;

  corral_source_split_6679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1555} $p2986 := skb_frag_page($p2985);
    goto corral_source_split_6680;

  corral_source_split_6680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1556} get_page($p2986);
    goto corral_source_split_6681;

  corral_source_split_6681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1557} $p2987 := lowmem_page_address($p2986);
    goto corral_source_split_6682;

  corral_source_split_6682:
    assume {:verifier.code 0} true;
    $i2988 := $p2i.ref.i64($p2987);
    goto corral_source_split_6683;

  corral_source_split_6683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1558} gnttab_end_foreign_access($i2980, 0, $i2988);
    goto corral_source_split_6684;

  corral_source_split_6684:
    assume {:verifier.code 0} true;
    $p2990 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(165, 4));
    goto corral_source_split_6685;

  corral_source_split_6685:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2990, 0);
    goto corral_source_split_6686;

  corral_source_split_6686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1559} kfree_skb($p2975);
    goto corral_source_split_6687;

  corral_source_split_6687:
    assume {:verifier.code 0} true;
    goto $bb1330;

  $bb1330:
    assume {:verifier.code 0} true;
    goto $bb1331;

  $bb1331:
    assume {:verifier.code 0} true;
    $p2992 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(166, 8));
    goto corral_source_split_6689;

  corral_source_split_6689:
    assume {:verifier.code 0} true;
    $p2993 := $load.ref($M.0, $p2992);
    goto corral_source_split_6690;

  corral_source_split_6690:
    assume {:verifier.code 0} true;
    $i2994 := $p2i.ref.i64($p2993);
    goto corral_source_split_6691;

  corral_source_split_6691:
    assume {:verifier.code 0} true;
    $i2995 := $eq.i64($i2994, 0);
    goto corral_source_split_6692;

  corral_source_split_6692:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2995} true;
    goto $bb1332, $bb1333;

  $bb1333:
    assume !($i2995 == 1);
    assume {:verifier.code 0} true;
    goto $bb1334;

  $bb1334:
    assume {:verifier.code 0} true;
    $p2997 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(166, 4));
    goto corral_source_split_6696;

  corral_source_split_6696:
    assume {:verifier.code 0} true;
    $i2998 := $load.i32($M.0, $p2997);
    goto corral_source_split_6697;

  corral_source_split_6697:
    assume {:verifier.code 0} true;
    $i2999 := $eq.i32($i2998, 0);
    goto corral_source_split_6698;

  corral_source_split_6698:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2999} true;
    goto $bb1335, $bb1336;

  $bb1336:
    assume !($i2999 == 1);
    assume {:verifier.code 0} true;
    goto $bb1337;

  $bb1337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1560} $p3000 := skb_end_pointer($p2993);
    goto corral_source_split_6702;

  corral_source_split_6702:
    assume {:verifier.code 0} true;
    $p3001 := $bitcast.ref.ref($p3000);
    goto corral_source_split_6703;

  corral_source_split_6703:
    assume {:verifier.code 0} true;
    $p3002 := $add.ref($add.ref($p3001, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_6704;

  corral_source_split_6704:
    assume {:verifier.code 0} true;
    $p3003 := $bitcast.ref.ref($p3002);
    goto corral_source_split_6705;

  corral_source_split_6705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1561} $p3004 := skb_frag_page($p3003);
    goto corral_source_split_6706;

  corral_source_split_6706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1562} get_page($p3004);
    goto corral_source_split_6707;

  corral_source_split_6707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1563} $p3005 := lowmem_page_address($p3004);
    goto corral_source_split_6708;

  corral_source_split_6708:
    assume {:verifier.code 0} true;
    $i3006 := $p2i.ref.i64($p3005);
    goto corral_source_split_6709;

  corral_source_split_6709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1564} gnttab_end_foreign_access($i2998, 0, $i3006);
    goto corral_source_split_6710;

  corral_source_split_6710:
    assume {:verifier.code 0} true;
    $p3008 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(166, 4));
    goto corral_source_split_6711;

  corral_source_split_6711:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3008, 0);
    goto corral_source_split_6712;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1565} kfree_skb($p2993);
    goto corral_source_split_6713;

  corral_source_split_6713:
    assume {:verifier.code 0} true;
    goto $bb1338;

  $bb1338:
    assume {:verifier.code 0} true;
    goto $bb1339;

  $bb1339:
    assume {:verifier.code 0} true;
    $p3010 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(167, 8));
    goto corral_source_split_6715;

  corral_source_split_6715:
    assume {:verifier.code 0} true;
    $p3011 := $load.ref($M.0, $p3010);
    goto corral_source_split_6716;

  corral_source_split_6716:
    assume {:verifier.code 0} true;
    $i3012 := $p2i.ref.i64($p3011);
    goto corral_source_split_6717;

  corral_source_split_6717:
    assume {:verifier.code 0} true;
    $i3013 := $eq.i64($i3012, 0);
    goto corral_source_split_6718;

  corral_source_split_6718:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3013} true;
    goto $bb1340, $bb1341;

  $bb1341:
    assume !($i3013 == 1);
    assume {:verifier.code 0} true;
    goto $bb1342;

  $bb1342:
    assume {:verifier.code 0} true;
    $p3015 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(167, 4));
    goto corral_source_split_6722;

  corral_source_split_6722:
    assume {:verifier.code 0} true;
    $i3016 := $load.i32($M.0, $p3015);
    goto corral_source_split_6723;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    $i3017 := $eq.i32($i3016, 0);
    goto corral_source_split_6724;

  corral_source_split_6724:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3017} true;
    goto $bb1343, $bb1344;

  $bb1344:
    assume !($i3017 == 1);
    assume {:verifier.code 0} true;
    goto $bb1345;

  $bb1345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1566} $p3018 := skb_end_pointer($p3011);
    goto corral_source_split_6728;

  corral_source_split_6728:
    assume {:verifier.code 0} true;
    $p3019 := $bitcast.ref.ref($p3018);
    goto corral_source_split_6729;

  corral_source_split_6729:
    assume {:verifier.code 0} true;
    $p3020 := $add.ref($add.ref($p3019, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_6730;

  corral_source_split_6730:
    assume {:verifier.code 0} true;
    $p3021 := $bitcast.ref.ref($p3020);
    goto corral_source_split_6731;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1567} $p3022 := skb_frag_page($p3021);
    goto corral_source_split_6732;

  corral_source_split_6732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1568} get_page($p3022);
    goto corral_source_split_6733;

  corral_source_split_6733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1569} $p3023 := lowmem_page_address($p3022);
    goto corral_source_split_6734;

  corral_source_split_6734:
    assume {:verifier.code 0} true;
    $i3024 := $p2i.ref.i64($p3023);
    goto corral_source_split_6735;

  corral_source_split_6735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1570} gnttab_end_foreign_access($i3016, 0, $i3024);
    goto corral_source_split_6736;

  corral_source_split_6736:
    assume {:verifier.code 0} true;
    $p3026 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(167, 4));
    goto corral_source_split_6737;

  corral_source_split_6737:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3026, 0);
    goto corral_source_split_6738;

  corral_source_split_6738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1571} kfree_skb($p3011);
    goto corral_source_split_6739;

  corral_source_split_6739:
    assume {:verifier.code 0} true;
    goto $bb1346;

  $bb1346:
    assume {:verifier.code 0} true;
    goto $bb1347;

  $bb1347:
    assume {:verifier.code 0} true;
    $p3028 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(168, 8));
    goto corral_source_split_6741;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    $p3029 := $load.ref($M.0, $p3028);
    goto corral_source_split_6742;

  corral_source_split_6742:
    assume {:verifier.code 0} true;
    $i3030 := $p2i.ref.i64($p3029);
    goto corral_source_split_6743;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    $i3031 := $eq.i64($i3030, 0);
    goto corral_source_split_6744;

  corral_source_split_6744:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3031} true;
    goto $bb1348, $bb1349;

  $bb1349:
    assume !($i3031 == 1);
    assume {:verifier.code 0} true;
    goto $bb1350;

  $bb1350:
    assume {:verifier.code 0} true;
    $p3033 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(168, 4));
    goto corral_source_split_6748;

  corral_source_split_6748:
    assume {:verifier.code 0} true;
    $i3034 := $load.i32($M.0, $p3033);
    goto corral_source_split_6749;

  corral_source_split_6749:
    assume {:verifier.code 0} true;
    $i3035 := $eq.i32($i3034, 0);
    goto corral_source_split_6750;

  corral_source_split_6750:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3035} true;
    goto $bb1351, $bb1352;

  $bb1352:
    assume !($i3035 == 1);
    assume {:verifier.code 0} true;
    goto $bb1353;

  $bb1353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1572} $p3036 := skb_end_pointer($p3029);
    goto corral_source_split_6754;

  corral_source_split_6754:
    assume {:verifier.code 0} true;
    $p3037 := $bitcast.ref.ref($p3036);
    goto corral_source_split_6755;

  corral_source_split_6755:
    assume {:verifier.code 0} true;
    $p3038 := $add.ref($add.ref($p3037, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_6756;

  corral_source_split_6756:
    assume {:verifier.code 0} true;
    $p3039 := $bitcast.ref.ref($p3038);
    goto corral_source_split_6757;

  corral_source_split_6757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1573} $p3040 := skb_frag_page($p3039);
    goto corral_source_split_6758;

  corral_source_split_6758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1574} get_page($p3040);
    goto corral_source_split_6759;

  corral_source_split_6759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1575} $p3041 := lowmem_page_address($p3040);
    goto corral_source_split_6760;

  corral_source_split_6760:
    assume {:verifier.code 0} true;
    $i3042 := $p2i.ref.i64($p3041);
    goto corral_source_split_6761;

  corral_source_split_6761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1576} gnttab_end_foreign_access($i3034, 0, $i3042);
    goto corral_source_split_6762;

  corral_source_split_6762:
    assume {:verifier.code 0} true;
    $p3044 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(168, 4));
    goto corral_source_split_6763;

  corral_source_split_6763:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3044, 0);
    goto corral_source_split_6764;

  corral_source_split_6764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1577} kfree_skb($p3029);
    goto corral_source_split_6765;

  corral_source_split_6765:
    assume {:verifier.code 0} true;
    goto $bb1354;

  $bb1354:
    assume {:verifier.code 0} true;
    goto $bb1355;

  $bb1355:
    assume {:verifier.code 0} true;
    $p3046 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(169, 8));
    goto corral_source_split_6767;

  corral_source_split_6767:
    assume {:verifier.code 0} true;
    $p3047 := $load.ref($M.0, $p3046);
    goto corral_source_split_6768;

  corral_source_split_6768:
    assume {:verifier.code 0} true;
    $i3048 := $p2i.ref.i64($p3047);
    goto corral_source_split_6769;

  corral_source_split_6769:
    assume {:verifier.code 0} true;
    $i3049 := $eq.i64($i3048, 0);
    goto corral_source_split_6770;

  corral_source_split_6770:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3049} true;
    goto $bb1356, $bb1357;

  $bb1357:
    assume !($i3049 == 1);
    assume {:verifier.code 0} true;
    goto $bb1358;

  $bb1358:
    assume {:verifier.code 0} true;
    $p3051 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(169, 4));
    goto corral_source_split_6774;

  corral_source_split_6774:
    assume {:verifier.code 0} true;
    $i3052 := $load.i32($M.0, $p3051);
    goto corral_source_split_6775;

  corral_source_split_6775:
    assume {:verifier.code 0} true;
    $i3053 := $eq.i32($i3052, 0);
    goto corral_source_split_6776;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3053} true;
    goto $bb1359, $bb1360;

  $bb1360:
    assume !($i3053 == 1);
    assume {:verifier.code 0} true;
    goto $bb1361;

  $bb1361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1578} $p3054 := skb_end_pointer($p3047);
    goto corral_source_split_6780;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    $p3055 := $bitcast.ref.ref($p3054);
    goto corral_source_split_6781;

  corral_source_split_6781:
    assume {:verifier.code 0} true;
    $p3056 := $add.ref($add.ref($p3055, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_6782;

  corral_source_split_6782:
    assume {:verifier.code 0} true;
    $p3057 := $bitcast.ref.ref($p3056);
    goto corral_source_split_6783;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1579} $p3058 := skb_frag_page($p3057);
    goto corral_source_split_6784;

  corral_source_split_6784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1580} get_page($p3058);
    goto corral_source_split_6785;

  corral_source_split_6785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1581} $p3059 := lowmem_page_address($p3058);
    goto corral_source_split_6786;

  corral_source_split_6786:
    assume {:verifier.code 0} true;
    $i3060 := $p2i.ref.i64($p3059);
    goto corral_source_split_6787;

  corral_source_split_6787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1582} gnttab_end_foreign_access($i3052, 0, $i3060);
    goto corral_source_split_6788;

  corral_source_split_6788:
    assume {:verifier.code 0} true;
    $p3062 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(169, 4));
    goto corral_source_split_6789;

  corral_source_split_6789:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3062, 0);
    goto corral_source_split_6790;

  corral_source_split_6790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1583} kfree_skb($p3047);
    goto corral_source_split_6791;

  corral_source_split_6791:
    assume {:verifier.code 0} true;
    goto $bb1362;

  $bb1362:
    assume {:verifier.code 0} true;
    goto $bb1363;

  $bb1363:
    assume {:verifier.code 0} true;
    $p3064 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(170, 8));
    goto corral_source_split_6793;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    $p3065 := $load.ref($M.0, $p3064);
    goto corral_source_split_6794;

  corral_source_split_6794:
    assume {:verifier.code 0} true;
    $i3066 := $p2i.ref.i64($p3065);
    goto corral_source_split_6795;

  corral_source_split_6795:
    assume {:verifier.code 0} true;
    $i3067 := $eq.i64($i3066, 0);
    goto corral_source_split_6796;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3067} true;
    goto $bb1364, $bb1365;

  $bb1365:
    assume !($i3067 == 1);
    assume {:verifier.code 0} true;
    goto $bb1366;

  $bb1366:
    assume {:verifier.code 0} true;
    $p3069 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(170, 4));
    goto corral_source_split_6800;

  corral_source_split_6800:
    assume {:verifier.code 0} true;
    $i3070 := $load.i32($M.0, $p3069);
    goto corral_source_split_6801;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    $i3071 := $eq.i32($i3070, 0);
    goto corral_source_split_6802;

  corral_source_split_6802:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3071} true;
    goto $bb1367, $bb1368;

  $bb1368:
    assume !($i3071 == 1);
    assume {:verifier.code 0} true;
    goto $bb1369;

  $bb1369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1584} $p3072 := skb_end_pointer($p3065);
    goto corral_source_split_6806;

  corral_source_split_6806:
    assume {:verifier.code 0} true;
    $p3073 := $bitcast.ref.ref($p3072);
    goto corral_source_split_6807;

  corral_source_split_6807:
    assume {:verifier.code 0} true;
    $p3074 := $add.ref($add.ref($p3073, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_6808;

  corral_source_split_6808:
    assume {:verifier.code 0} true;
    $p3075 := $bitcast.ref.ref($p3074);
    goto corral_source_split_6809;

  corral_source_split_6809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1585} $p3076 := skb_frag_page($p3075);
    goto corral_source_split_6810;

  corral_source_split_6810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1586} get_page($p3076);
    goto corral_source_split_6811;

  corral_source_split_6811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1587} $p3077 := lowmem_page_address($p3076);
    goto corral_source_split_6812;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    $i3078 := $p2i.ref.i64($p3077);
    goto corral_source_split_6813;

  corral_source_split_6813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1588} gnttab_end_foreign_access($i3070, 0, $i3078);
    goto corral_source_split_6814;

  corral_source_split_6814:
    assume {:verifier.code 0} true;
    $p3080 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(170, 4));
    goto corral_source_split_6815;

  corral_source_split_6815:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3080, 0);
    goto corral_source_split_6816;

  corral_source_split_6816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1589} kfree_skb($p3065);
    goto corral_source_split_6817;

  corral_source_split_6817:
    assume {:verifier.code 0} true;
    goto $bb1370;

  $bb1370:
    assume {:verifier.code 0} true;
    goto $bb1371;

  $bb1371:
    assume {:verifier.code 0} true;
    $p3082 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(171, 8));
    goto corral_source_split_6819;

  corral_source_split_6819:
    assume {:verifier.code 0} true;
    $p3083 := $load.ref($M.0, $p3082);
    goto corral_source_split_6820;

  corral_source_split_6820:
    assume {:verifier.code 0} true;
    $i3084 := $p2i.ref.i64($p3083);
    goto corral_source_split_6821;

  corral_source_split_6821:
    assume {:verifier.code 0} true;
    $i3085 := $eq.i64($i3084, 0);
    goto corral_source_split_6822;

  corral_source_split_6822:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3085} true;
    goto $bb1372, $bb1373;

  $bb1373:
    assume !($i3085 == 1);
    assume {:verifier.code 0} true;
    goto $bb1374;

  $bb1374:
    assume {:verifier.code 0} true;
    $p3087 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(171, 4));
    goto corral_source_split_6826;

  corral_source_split_6826:
    assume {:verifier.code 0} true;
    $i3088 := $load.i32($M.0, $p3087);
    goto corral_source_split_6827;

  corral_source_split_6827:
    assume {:verifier.code 0} true;
    $i3089 := $eq.i32($i3088, 0);
    goto corral_source_split_6828;

  corral_source_split_6828:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3089} true;
    goto $bb1375, $bb1376;

  $bb1376:
    assume !($i3089 == 1);
    assume {:verifier.code 0} true;
    goto $bb1377;

  $bb1377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1590} $p3090 := skb_end_pointer($p3083);
    goto corral_source_split_6832;

  corral_source_split_6832:
    assume {:verifier.code 0} true;
    $p3091 := $bitcast.ref.ref($p3090);
    goto corral_source_split_6833;

  corral_source_split_6833:
    assume {:verifier.code 0} true;
    $p3092 := $add.ref($add.ref($p3091, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_6834;

  corral_source_split_6834:
    assume {:verifier.code 0} true;
    $p3093 := $bitcast.ref.ref($p3092);
    goto corral_source_split_6835;

  corral_source_split_6835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1591} $p3094 := skb_frag_page($p3093);
    goto corral_source_split_6836;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1592} get_page($p3094);
    goto corral_source_split_6837;

  corral_source_split_6837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1593} $p3095 := lowmem_page_address($p3094);
    goto corral_source_split_6838;

  corral_source_split_6838:
    assume {:verifier.code 0} true;
    $i3096 := $p2i.ref.i64($p3095);
    goto corral_source_split_6839;

  corral_source_split_6839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1594} gnttab_end_foreign_access($i3088, 0, $i3096);
    goto corral_source_split_6840;

  corral_source_split_6840:
    assume {:verifier.code 0} true;
    $p3098 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(171, 4));
    goto corral_source_split_6841;

  corral_source_split_6841:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3098, 0);
    goto corral_source_split_6842;

  corral_source_split_6842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1595} kfree_skb($p3083);
    goto corral_source_split_6843;

  corral_source_split_6843:
    assume {:verifier.code 0} true;
    goto $bb1378;

  $bb1378:
    assume {:verifier.code 0} true;
    goto $bb1379;

  $bb1379:
    assume {:verifier.code 0} true;
    $p3100 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(172, 8));
    goto corral_source_split_6845;

  corral_source_split_6845:
    assume {:verifier.code 0} true;
    $p3101 := $load.ref($M.0, $p3100);
    goto corral_source_split_6846;

  corral_source_split_6846:
    assume {:verifier.code 0} true;
    $i3102 := $p2i.ref.i64($p3101);
    goto corral_source_split_6847;

  corral_source_split_6847:
    assume {:verifier.code 0} true;
    $i3103 := $eq.i64($i3102, 0);
    goto corral_source_split_6848;

  corral_source_split_6848:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3103} true;
    goto $bb1380, $bb1381;

  $bb1381:
    assume !($i3103 == 1);
    assume {:verifier.code 0} true;
    goto $bb1382;

  $bb1382:
    assume {:verifier.code 0} true;
    $p3105 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(172, 4));
    goto corral_source_split_6852;

  corral_source_split_6852:
    assume {:verifier.code 0} true;
    $i3106 := $load.i32($M.0, $p3105);
    goto corral_source_split_6853;

  corral_source_split_6853:
    assume {:verifier.code 0} true;
    $i3107 := $eq.i32($i3106, 0);
    goto corral_source_split_6854;

  corral_source_split_6854:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3107} true;
    goto $bb1383, $bb1384;

  $bb1384:
    assume !($i3107 == 1);
    assume {:verifier.code 0} true;
    goto $bb1385;

  $bb1385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1596} $p3108 := skb_end_pointer($p3101);
    goto corral_source_split_6858;

  corral_source_split_6858:
    assume {:verifier.code 0} true;
    $p3109 := $bitcast.ref.ref($p3108);
    goto corral_source_split_6859;

  corral_source_split_6859:
    assume {:verifier.code 0} true;
    $p3110 := $add.ref($add.ref($p3109, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_6860;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    $p3111 := $bitcast.ref.ref($p3110);
    goto corral_source_split_6861;

  corral_source_split_6861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1597} $p3112 := skb_frag_page($p3111);
    goto corral_source_split_6862;

  corral_source_split_6862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1598} get_page($p3112);
    goto corral_source_split_6863;

  corral_source_split_6863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1599} $p3113 := lowmem_page_address($p3112);
    goto corral_source_split_6864;

  corral_source_split_6864:
    assume {:verifier.code 0} true;
    $i3114 := $p2i.ref.i64($p3113);
    goto corral_source_split_6865;

  corral_source_split_6865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1600} gnttab_end_foreign_access($i3106, 0, $i3114);
    goto corral_source_split_6866;

  corral_source_split_6866:
    assume {:verifier.code 0} true;
    $p3116 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(172, 4));
    goto corral_source_split_6867;

  corral_source_split_6867:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3116, 0);
    goto corral_source_split_6868;

  corral_source_split_6868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1601} kfree_skb($p3101);
    goto corral_source_split_6869;

  corral_source_split_6869:
    assume {:verifier.code 0} true;
    goto $bb1386;

  $bb1386:
    assume {:verifier.code 0} true;
    goto $bb1387;

  $bb1387:
    assume {:verifier.code 0} true;
    $p3118 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(173, 8));
    goto corral_source_split_6871;

  corral_source_split_6871:
    assume {:verifier.code 0} true;
    $p3119 := $load.ref($M.0, $p3118);
    goto corral_source_split_6872;

  corral_source_split_6872:
    assume {:verifier.code 0} true;
    $i3120 := $p2i.ref.i64($p3119);
    goto corral_source_split_6873;

  corral_source_split_6873:
    assume {:verifier.code 0} true;
    $i3121 := $eq.i64($i3120, 0);
    goto corral_source_split_6874;

  corral_source_split_6874:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3121} true;
    goto $bb1388, $bb1389;

  $bb1389:
    assume !($i3121 == 1);
    assume {:verifier.code 0} true;
    goto $bb1390;

  $bb1390:
    assume {:verifier.code 0} true;
    $p3123 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(173, 4));
    goto corral_source_split_6878;

  corral_source_split_6878:
    assume {:verifier.code 0} true;
    $i3124 := $load.i32($M.0, $p3123);
    goto corral_source_split_6879;

  corral_source_split_6879:
    assume {:verifier.code 0} true;
    $i3125 := $eq.i32($i3124, 0);
    goto corral_source_split_6880;

  corral_source_split_6880:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3125} true;
    goto $bb1391, $bb1392;

  $bb1392:
    assume !($i3125 == 1);
    assume {:verifier.code 0} true;
    goto $bb1393;

  $bb1393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1602} $p3126 := skb_end_pointer($p3119);
    goto corral_source_split_6884;

  corral_source_split_6884:
    assume {:verifier.code 0} true;
    $p3127 := $bitcast.ref.ref($p3126);
    goto corral_source_split_6885;

  corral_source_split_6885:
    assume {:verifier.code 0} true;
    $p3128 := $add.ref($add.ref($p3127, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_6886;

  corral_source_split_6886:
    assume {:verifier.code 0} true;
    $p3129 := $bitcast.ref.ref($p3128);
    goto corral_source_split_6887;

  corral_source_split_6887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1603} $p3130 := skb_frag_page($p3129);
    goto corral_source_split_6888;

  corral_source_split_6888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1604} get_page($p3130);
    goto corral_source_split_6889;

  corral_source_split_6889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1605} $p3131 := lowmem_page_address($p3130);
    goto corral_source_split_6890;

  corral_source_split_6890:
    assume {:verifier.code 0} true;
    $i3132 := $p2i.ref.i64($p3131);
    goto corral_source_split_6891;

  corral_source_split_6891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1606} gnttab_end_foreign_access($i3124, 0, $i3132);
    goto corral_source_split_6892;

  corral_source_split_6892:
    assume {:verifier.code 0} true;
    $p3134 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(173, 4));
    goto corral_source_split_6893;

  corral_source_split_6893:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3134, 0);
    goto corral_source_split_6894;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1607} kfree_skb($p3119);
    goto corral_source_split_6895;

  corral_source_split_6895:
    assume {:verifier.code 0} true;
    goto $bb1394;

  $bb1394:
    assume {:verifier.code 0} true;
    goto $bb1395;

  $bb1395:
    assume {:verifier.code 0} true;
    $p3136 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(174, 8));
    goto corral_source_split_6897;

  corral_source_split_6897:
    assume {:verifier.code 0} true;
    $p3137 := $load.ref($M.0, $p3136);
    goto corral_source_split_6898;

  corral_source_split_6898:
    assume {:verifier.code 0} true;
    $i3138 := $p2i.ref.i64($p3137);
    goto corral_source_split_6899;

  corral_source_split_6899:
    assume {:verifier.code 0} true;
    $i3139 := $eq.i64($i3138, 0);
    goto corral_source_split_6900;

  corral_source_split_6900:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3139} true;
    goto $bb1396, $bb1397;

  $bb1397:
    assume !($i3139 == 1);
    assume {:verifier.code 0} true;
    goto $bb1398;

  $bb1398:
    assume {:verifier.code 0} true;
    $p3141 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(174, 4));
    goto corral_source_split_6904;

  corral_source_split_6904:
    assume {:verifier.code 0} true;
    $i3142 := $load.i32($M.0, $p3141);
    goto corral_source_split_6905;

  corral_source_split_6905:
    assume {:verifier.code 0} true;
    $i3143 := $eq.i32($i3142, 0);
    goto corral_source_split_6906;

  corral_source_split_6906:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3143} true;
    goto $bb1399, $bb1400;

  $bb1400:
    assume !($i3143 == 1);
    assume {:verifier.code 0} true;
    goto $bb1401;

  $bb1401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1608} $p3144 := skb_end_pointer($p3137);
    goto corral_source_split_6910;

  corral_source_split_6910:
    assume {:verifier.code 0} true;
    $p3145 := $bitcast.ref.ref($p3144);
    goto corral_source_split_6911;

  corral_source_split_6911:
    assume {:verifier.code 0} true;
    $p3146 := $add.ref($add.ref($p3145, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_6912;

  corral_source_split_6912:
    assume {:verifier.code 0} true;
    $p3147 := $bitcast.ref.ref($p3146);
    goto corral_source_split_6913;

  corral_source_split_6913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1609} $p3148 := skb_frag_page($p3147);
    goto corral_source_split_6914;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1610} get_page($p3148);
    goto corral_source_split_6915;

  corral_source_split_6915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1611} $p3149 := lowmem_page_address($p3148);
    goto corral_source_split_6916;

  corral_source_split_6916:
    assume {:verifier.code 0} true;
    $i3150 := $p2i.ref.i64($p3149);
    goto corral_source_split_6917;

  corral_source_split_6917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1612} gnttab_end_foreign_access($i3142, 0, $i3150);
    goto corral_source_split_6918;

  corral_source_split_6918:
    assume {:verifier.code 0} true;
    $p3152 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(174, 4));
    goto corral_source_split_6919;

  corral_source_split_6919:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3152, 0);
    goto corral_source_split_6920;

  corral_source_split_6920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1613} kfree_skb($p3137);
    goto corral_source_split_6921;

  corral_source_split_6921:
    assume {:verifier.code 0} true;
    goto $bb1402;

  $bb1402:
    assume {:verifier.code 0} true;
    goto $bb1403;

  $bb1403:
    assume {:verifier.code 0} true;
    $p3154 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(175, 8));
    goto corral_source_split_6923;

  corral_source_split_6923:
    assume {:verifier.code 0} true;
    $p3155 := $load.ref($M.0, $p3154);
    goto corral_source_split_6924;

  corral_source_split_6924:
    assume {:verifier.code 0} true;
    $i3156 := $p2i.ref.i64($p3155);
    goto corral_source_split_6925;

  corral_source_split_6925:
    assume {:verifier.code 0} true;
    $i3157 := $eq.i64($i3156, 0);
    goto corral_source_split_6926;

  corral_source_split_6926:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3157} true;
    goto $bb1404, $bb1405;

  $bb1405:
    assume !($i3157 == 1);
    assume {:verifier.code 0} true;
    goto $bb1406;

  $bb1406:
    assume {:verifier.code 0} true;
    $p3159 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(175, 4));
    goto corral_source_split_6930;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    $i3160 := $load.i32($M.0, $p3159);
    goto corral_source_split_6931;

  corral_source_split_6931:
    assume {:verifier.code 0} true;
    $i3161 := $eq.i32($i3160, 0);
    goto corral_source_split_6932;

  corral_source_split_6932:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3161} true;
    goto $bb1407, $bb1408;

  $bb1408:
    assume !($i3161 == 1);
    assume {:verifier.code 0} true;
    goto $bb1409;

  $bb1409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1614} $p3162 := skb_end_pointer($p3155);
    goto corral_source_split_6936;

  corral_source_split_6936:
    assume {:verifier.code 0} true;
    $p3163 := $bitcast.ref.ref($p3162);
    goto corral_source_split_6937;

  corral_source_split_6937:
    assume {:verifier.code 0} true;
    $p3164 := $add.ref($add.ref($p3163, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_6938;

  corral_source_split_6938:
    assume {:verifier.code 0} true;
    $p3165 := $bitcast.ref.ref($p3164);
    goto corral_source_split_6939;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1615} $p3166 := skb_frag_page($p3165);
    goto corral_source_split_6940;

  corral_source_split_6940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1616} get_page($p3166);
    goto corral_source_split_6941;

  corral_source_split_6941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1617} $p3167 := lowmem_page_address($p3166);
    goto corral_source_split_6942;

  corral_source_split_6942:
    assume {:verifier.code 0} true;
    $i3168 := $p2i.ref.i64($p3167);
    goto corral_source_split_6943;

  corral_source_split_6943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1618} gnttab_end_foreign_access($i3160, 0, $i3168);
    goto corral_source_split_6944;

  corral_source_split_6944:
    assume {:verifier.code 0} true;
    $p3170 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(175, 4));
    goto corral_source_split_6945;

  corral_source_split_6945:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3170, 0);
    goto corral_source_split_6946;

  corral_source_split_6946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1619} kfree_skb($p3155);
    goto corral_source_split_6947;

  corral_source_split_6947:
    assume {:verifier.code 0} true;
    goto $bb1410;

  $bb1410:
    assume {:verifier.code 0} true;
    goto $bb1411;

  $bb1411:
    assume {:verifier.code 0} true;
    $p3172 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(176, 8));
    goto corral_source_split_6949;

  corral_source_split_6949:
    assume {:verifier.code 0} true;
    $p3173 := $load.ref($M.0, $p3172);
    goto corral_source_split_6950;

  corral_source_split_6950:
    assume {:verifier.code 0} true;
    $i3174 := $p2i.ref.i64($p3173);
    goto corral_source_split_6951;

  corral_source_split_6951:
    assume {:verifier.code 0} true;
    $i3175 := $eq.i64($i3174, 0);
    goto corral_source_split_6952;

  corral_source_split_6952:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3175} true;
    goto $bb1412, $bb1413;

  $bb1413:
    assume !($i3175 == 1);
    assume {:verifier.code 0} true;
    goto $bb1414;

  $bb1414:
    assume {:verifier.code 0} true;
    $p3177 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(176, 4));
    goto corral_source_split_6956;

  corral_source_split_6956:
    assume {:verifier.code 0} true;
    $i3178 := $load.i32($M.0, $p3177);
    goto corral_source_split_6957;

  corral_source_split_6957:
    assume {:verifier.code 0} true;
    $i3179 := $eq.i32($i3178, 0);
    goto corral_source_split_6958;

  corral_source_split_6958:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3179} true;
    goto $bb1415, $bb1416;

  $bb1416:
    assume !($i3179 == 1);
    assume {:verifier.code 0} true;
    goto $bb1417;

  $bb1417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1620} $p3180 := skb_end_pointer($p3173);
    goto corral_source_split_6962;

  corral_source_split_6962:
    assume {:verifier.code 0} true;
    $p3181 := $bitcast.ref.ref($p3180);
    goto corral_source_split_6963;

  corral_source_split_6963:
    assume {:verifier.code 0} true;
    $p3182 := $add.ref($add.ref($p3181, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_6964;

  corral_source_split_6964:
    assume {:verifier.code 0} true;
    $p3183 := $bitcast.ref.ref($p3182);
    goto corral_source_split_6965;

  corral_source_split_6965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1621} $p3184 := skb_frag_page($p3183);
    goto corral_source_split_6966;

  corral_source_split_6966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1622} get_page($p3184);
    goto corral_source_split_6967;

  corral_source_split_6967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1623} $p3185 := lowmem_page_address($p3184);
    goto corral_source_split_6968;

  corral_source_split_6968:
    assume {:verifier.code 0} true;
    $i3186 := $p2i.ref.i64($p3185);
    goto corral_source_split_6969;

  corral_source_split_6969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1624} gnttab_end_foreign_access($i3178, 0, $i3186);
    goto corral_source_split_6970;

  corral_source_split_6970:
    assume {:verifier.code 0} true;
    $p3188 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(176, 4));
    goto corral_source_split_6971;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3188, 0);
    goto corral_source_split_6972;

  corral_source_split_6972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1625} kfree_skb($p3173);
    goto corral_source_split_6973;

  corral_source_split_6973:
    assume {:verifier.code 0} true;
    goto $bb1418;

  $bb1418:
    assume {:verifier.code 0} true;
    goto $bb1419;

  $bb1419:
    assume {:verifier.code 0} true;
    $p3190 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(177, 8));
    goto corral_source_split_6975;

  corral_source_split_6975:
    assume {:verifier.code 0} true;
    $p3191 := $load.ref($M.0, $p3190);
    goto corral_source_split_6976;

  corral_source_split_6976:
    assume {:verifier.code 0} true;
    $i3192 := $p2i.ref.i64($p3191);
    goto corral_source_split_6977;

  corral_source_split_6977:
    assume {:verifier.code 0} true;
    $i3193 := $eq.i64($i3192, 0);
    goto corral_source_split_6978;

  corral_source_split_6978:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3193} true;
    goto $bb1420, $bb1421;

  $bb1421:
    assume !($i3193 == 1);
    assume {:verifier.code 0} true;
    goto $bb1422;

  $bb1422:
    assume {:verifier.code 0} true;
    $p3195 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(177, 4));
    goto corral_source_split_6982;

  corral_source_split_6982:
    assume {:verifier.code 0} true;
    $i3196 := $load.i32($M.0, $p3195);
    goto corral_source_split_6983;

  corral_source_split_6983:
    assume {:verifier.code 0} true;
    $i3197 := $eq.i32($i3196, 0);
    goto corral_source_split_6984;

  corral_source_split_6984:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3197} true;
    goto $bb1423, $bb1424;

  $bb1424:
    assume !($i3197 == 1);
    assume {:verifier.code 0} true;
    goto $bb1425;

  $bb1425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1626} $p3198 := skb_end_pointer($p3191);
    goto corral_source_split_6988;

  corral_source_split_6988:
    assume {:verifier.code 0} true;
    $p3199 := $bitcast.ref.ref($p3198);
    goto corral_source_split_6989;

  corral_source_split_6989:
    assume {:verifier.code 0} true;
    $p3200 := $add.ref($add.ref($p3199, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_6990;

  corral_source_split_6990:
    assume {:verifier.code 0} true;
    $p3201 := $bitcast.ref.ref($p3200);
    goto corral_source_split_6991;

  corral_source_split_6991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1627} $p3202 := skb_frag_page($p3201);
    goto corral_source_split_6992;

  corral_source_split_6992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1628} get_page($p3202);
    goto corral_source_split_6993;

  corral_source_split_6993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1629} $p3203 := lowmem_page_address($p3202);
    goto corral_source_split_6994;

  corral_source_split_6994:
    assume {:verifier.code 0} true;
    $i3204 := $p2i.ref.i64($p3203);
    goto corral_source_split_6995;

  corral_source_split_6995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1630} gnttab_end_foreign_access($i3196, 0, $i3204);
    goto corral_source_split_6996;

  corral_source_split_6996:
    assume {:verifier.code 0} true;
    $p3206 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(177, 4));
    goto corral_source_split_6997;

  corral_source_split_6997:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3206, 0);
    goto corral_source_split_6998;

  corral_source_split_6998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1631} kfree_skb($p3191);
    goto corral_source_split_6999;

  corral_source_split_6999:
    assume {:verifier.code 0} true;
    goto $bb1426;

  $bb1426:
    assume {:verifier.code 0} true;
    goto $bb1427;

  $bb1427:
    assume {:verifier.code 0} true;
    $p3208 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(178, 8));
    goto corral_source_split_7001;

  corral_source_split_7001:
    assume {:verifier.code 0} true;
    $p3209 := $load.ref($M.0, $p3208);
    goto corral_source_split_7002;

  corral_source_split_7002:
    assume {:verifier.code 0} true;
    $i3210 := $p2i.ref.i64($p3209);
    goto corral_source_split_7003;

  corral_source_split_7003:
    assume {:verifier.code 0} true;
    $i3211 := $eq.i64($i3210, 0);
    goto corral_source_split_7004;

  corral_source_split_7004:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3211} true;
    goto $bb1428, $bb1429;

  $bb1429:
    assume !($i3211 == 1);
    assume {:verifier.code 0} true;
    goto $bb1430;

  $bb1430:
    assume {:verifier.code 0} true;
    $p3213 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(178, 4));
    goto corral_source_split_7008;

  corral_source_split_7008:
    assume {:verifier.code 0} true;
    $i3214 := $load.i32($M.0, $p3213);
    goto corral_source_split_7009;

  corral_source_split_7009:
    assume {:verifier.code 0} true;
    $i3215 := $eq.i32($i3214, 0);
    goto corral_source_split_7010;

  corral_source_split_7010:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3215} true;
    goto $bb1431, $bb1432;

  $bb1432:
    assume !($i3215 == 1);
    assume {:verifier.code 0} true;
    goto $bb1433;

  $bb1433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1632} $p3216 := skb_end_pointer($p3209);
    goto corral_source_split_7014;

  corral_source_split_7014:
    assume {:verifier.code 0} true;
    $p3217 := $bitcast.ref.ref($p3216);
    goto corral_source_split_7015;

  corral_source_split_7015:
    assume {:verifier.code 0} true;
    $p3218 := $add.ref($add.ref($p3217, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_7016;

  corral_source_split_7016:
    assume {:verifier.code 0} true;
    $p3219 := $bitcast.ref.ref($p3218);
    goto corral_source_split_7017;

  corral_source_split_7017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1633} $p3220 := skb_frag_page($p3219);
    goto corral_source_split_7018;

  corral_source_split_7018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1634} get_page($p3220);
    goto corral_source_split_7019;

  corral_source_split_7019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1635} $p3221 := lowmem_page_address($p3220);
    goto corral_source_split_7020;

  corral_source_split_7020:
    assume {:verifier.code 0} true;
    $i3222 := $p2i.ref.i64($p3221);
    goto corral_source_split_7021;

  corral_source_split_7021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1636} gnttab_end_foreign_access($i3214, 0, $i3222);
    goto corral_source_split_7022;

  corral_source_split_7022:
    assume {:verifier.code 0} true;
    $p3224 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(178, 4));
    goto corral_source_split_7023;

  corral_source_split_7023:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3224, 0);
    goto corral_source_split_7024;

  corral_source_split_7024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1637} kfree_skb($p3209);
    goto corral_source_split_7025;

  corral_source_split_7025:
    assume {:verifier.code 0} true;
    goto $bb1434;

  $bb1434:
    assume {:verifier.code 0} true;
    goto $bb1435;

  $bb1435:
    assume {:verifier.code 0} true;
    $p3226 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(179, 8));
    goto corral_source_split_7027;

  corral_source_split_7027:
    assume {:verifier.code 0} true;
    $p3227 := $load.ref($M.0, $p3226);
    goto corral_source_split_7028;

  corral_source_split_7028:
    assume {:verifier.code 0} true;
    $i3228 := $p2i.ref.i64($p3227);
    goto corral_source_split_7029;

  corral_source_split_7029:
    assume {:verifier.code 0} true;
    $i3229 := $eq.i64($i3228, 0);
    goto corral_source_split_7030;

  corral_source_split_7030:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3229} true;
    goto $bb1436, $bb1437;

  $bb1437:
    assume !($i3229 == 1);
    assume {:verifier.code 0} true;
    goto $bb1438;

  $bb1438:
    assume {:verifier.code 0} true;
    $p3231 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(179, 4));
    goto corral_source_split_7034;

  corral_source_split_7034:
    assume {:verifier.code 0} true;
    $i3232 := $load.i32($M.0, $p3231);
    goto corral_source_split_7035;

  corral_source_split_7035:
    assume {:verifier.code 0} true;
    $i3233 := $eq.i32($i3232, 0);
    goto corral_source_split_7036;

  corral_source_split_7036:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3233} true;
    goto $bb1439, $bb1440;

  $bb1440:
    assume !($i3233 == 1);
    assume {:verifier.code 0} true;
    goto $bb1441;

  $bb1441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1638} $p3234 := skb_end_pointer($p3227);
    goto corral_source_split_7040;

  corral_source_split_7040:
    assume {:verifier.code 0} true;
    $p3235 := $bitcast.ref.ref($p3234);
    goto corral_source_split_7041;

  corral_source_split_7041:
    assume {:verifier.code 0} true;
    $p3236 := $add.ref($add.ref($p3235, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_7042;

  corral_source_split_7042:
    assume {:verifier.code 0} true;
    $p3237 := $bitcast.ref.ref($p3236);
    goto corral_source_split_7043;

  corral_source_split_7043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1639} $p3238 := skb_frag_page($p3237);
    goto corral_source_split_7044;

  corral_source_split_7044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1640} get_page($p3238);
    goto corral_source_split_7045;

  corral_source_split_7045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1641} $p3239 := lowmem_page_address($p3238);
    goto corral_source_split_7046;

  corral_source_split_7046:
    assume {:verifier.code 0} true;
    $i3240 := $p2i.ref.i64($p3239);
    goto corral_source_split_7047;

  corral_source_split_7047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1642} gnttab_end_foreign_access($i3232, 0, $i3240);
    goto corral_source_split_7048;

  corral_source_split_7048:
    assume {:verifier.code 0} true;
    $p3242 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(179, 4));
    goto corral_source_split_7049;

  corral_source_split_7049:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3242, 0);
    goto corral_source_split_7050;

  corral_source_split_7050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1643} kfree_skb($p3227);
    goto corral_source_split_7051;

  corral_source_split_7051:
    assume {:verifier.code 0} true;
    goto $bb1442;

  $bb1442:
    assume {:verifier.code 0} true;
    goto $bb1443;

  $bb1443:
    assume {:verifier.code 0} true;
    $p3244 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(180, 8));
    goto corral_source_split_7053;

  corral_source_split_7053:
    assume {:verifier.code 0} true;
    $p3245 := $load.ref($M.0, $p3244);
    goto corral_source_split_7054;

  corral_source_split_7054:
    assume {:verifier.code 0} true;
    $i3246 := $p2i.ref.i64($p3245);
    goto corral_source_split_7055;

  corral_source_split_7055:
    assume {:verifier.code 0} true;
    $i3247 := $eq.i64($i3246, 0);
    goto corral_source_split_7056;

  corral_source_split_7056:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3247} true;
    goto $bb1444, $bb1445;

  $bb1445:
    assume !($i3247 == 1);
    assume {:verifier.code 0} true;
    goto $bb1446;

  $bb1446:
    assume {:verifier.code 0} true;
    $p3249 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(180, 4));
    goto corral_source_split_7060;

  corral_source_split_7060:
    assume {:verifier.code 0} true;
    $i3250 := $load.i32($M.0, $p3249);
    goto corral_source_split_7061;

  corral_source_split_7061:
    assume {:verifier.code 0} true;
    $i3251 := $eq.i32($i3250, 0);
    goto corral_source_split_7062;

  corral_source_split_7062:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3251} true;
    goto $bb1447, $bb1448;

  $bb1448:
    assume !($i3251 == 1);
    assume {:verifier.code 0} true;
    goto $bb1449;

  $bb1449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1644} $p3252 := skb_end_pointer($p3245);
    goto corral_source_split_7066;

  corral_source_split_7066:
    assume {:verifier.code 0} true;
    $p3253 := $bitcast.ref.ref($p3252);
    goto corral_source_split_7067;

  corral_source_split_7067:
    assume {:verifier.code 0} true;
    $p3254 := $add.ref($add.ref($p3253, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_7068;

  corral_source_split_7068:
    assume {:verifier.code 0} true;
    $p3255 := $bitcast.ref.ref($p3254);
    goto corral_source_split_7069;

  corral_source_split_7069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1645} $p3256 := skb_frag_page($p3255);
    goto corral_source_split_7070;

  corral_source_split_7070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1646} get_page($p3256);
    goto corral_source_split_7071;

  corral_source_split_7071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1647} $p3257 := lowmem_page_address($p3256);
    goto corral_source_split_7072;

  corral_source_split_7072:
    assume {:verifier.code 0} true;
    $i3258 := $p2i.ref.i64($p3257);
    goto corral_source_split_7073;

  corral_source_split_7073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1648} gnttab_end_foreign_access($i3250, 0, $i3258);
    goto corral_source_split_7074;

  corral_source_split_7074:
    assume {:verifier.code 0} true;
    $p3260 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(180, 4));
    goto corral_source_split_7075;

  corral_source_split_7075:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3260, 0);
    goto corral_source_split_7076;

  corral_source_split_7076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1649} kfree_skb($p3245);
    goto corral_source_split_7077;

  corral_source_split_7077:
    assume {:verifier.code 0} true;
    goto $bb1450;

  $bb1450:
    assume {:verifier.code 0} true;
    goto $bb1451;

  $bb1451:
    assume {:verifier.code 0} true;
    $p3262 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(181, 8));
    goto corral_source_split_7079;

  corral_source_split_7079:
    assume {:verifier.code 0} true;
    $p3263 := $load.ref($M.0, $p3262);
    goto corral_source_split_7080;

  corral_source_split_7080:
    assume {:verifier.code 0} true;
    $i3264 := $p2i.ref.i64($p3263);
    goto corral_source_split_7081;

  corral_source_split_7081:
    assume {:verifier.code 0} true;
    $i3265 := $eq.i64($i3264, 0);
    goto corral_source_split_7082;

  corral_source_split_7082:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3265} true;
    goto $bb1452, $bb1453;

  $bb1453:
    assume !($i3265 == 1);
    assume {:verifier.code 0} true;
    goto $bb1454;

  $bb1454:
    assume {:verifier.code 0} true;
    $p3267 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(181, 4));
    goto corral_source_split_7086;

  corral_source_split_7086:
    assume {:verifier.code 0} true;
    $i3268 := $load.i32($M.0, $p3267);
    goto corral_source_split_7087;

  corral_source_split_7087:
    assume {:verifier.code 0} true;
    $i3269 := $eq.i32($i3268, 0);
    goto corral_source_split_7088;

  corral_source_split_7088:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3269} true;
    goto $bb1455, $bb1456;

  $bb1456:
    assume !($i3269 == 1);
    assume {:verifier.code 0} true;
    goto $bb1457;

  $bb1457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1650} $p3270 := skb_end_pointer($p3263);
    goto corral_source_split_7092;

  corral_source_split_7092:
    assume {:verifier.code 0} true;
    $p3271 := $bitcast.ref.ref($p3270);
    goto corral_source_split_7093;

  corral_source_split_7093:
    assume {:verifier.code 0} true;
    $p3272 := $add.ref($add.ref($p3271, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_7094;

  corral_source_split_7094:
    assume {:verifier.code 0} true;
    $p3273 := $bitcast.ref.ref($p3272);
    goto corral_source_split_7095;

  corral_source_split_7095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1651} $p3274 := skb_frag_page($p3273);
    goto corral_source_split_7096;

  corral_source_split_7096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1652} get_page($p3274);
    goto corral_source_split_7097;

  corral_source_split_7097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1653} $p3275 := lowmem_page_address($p3274);
    goto corral_source_split_7098;

  corral_source_split_7098:
    assume {:verifier.code 0} true;
    $i3276 := $p2i.ref.i64($p3275);
    goto corral_source_split_7099;

  corral_source_split_7099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1654} gnttab_end_foreign_access($i3268, 0, $i3276);
    goto corral_source_split_7100;

  corral_source_split_7100:
    assume {:verifier.code 0} true;
    $p3278 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(181, 4));
    goto corral_source_split_7101;

  corral_source_split_7101:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3278, 0);
    goto corral_source_split_7102;

  corral_source_split_7102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1655} kfree_skb($p3263);
    goto corral_source_split_7103;

  corral_source_split_7103:
    assume {:verifier.code 0} true;
    goto $bb1458;

  $bb1458:
    assume {:verifier.code 0} true;
    goto $bb1459;

  $bb1459:
    assume {:verifier.code 0} true;
    $p3280 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(182, 8));
    goto corral_source_split_7105;

  corral_source_split_7105:
    assume {:verifier.code 0} true;
    $p3281 := $load.ref($M.0, $p3280);
    goto corral_source_split_7106;

  corral_source_split_7106:
    assume {:verifier.code 0} true;
    $i3282 := $p2i.ref.i64($p3281);
    goto corral_source_split_7107;

  corral_source_split_7107:
    assume {:verifier.code 0} true;
    $i3283 := $eq.i64($i3282, 0);
    goto corral_source_split_7108;

  corral_source_split_7108:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3283} true;
    goto $bb1460, $bb1461;

  $bb1461:
    assume !($i3283 == 1);
    assume {:verifier.code 0} true;
    goto $bb1462;

  $bb1462:
    assume {:verifier.code 0} true;
    $p3285 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(182, 4));
    goto corral_source_split_7112;

  corral_source_split_7112:
    assume {:verifier.code 0} true;
    $i3286 := $load.i32($M.0, $p3285);
    goto corral_source_split_7113;

  corral_source_split_7113:
    assume {:verifier.code 0} true;
    $i3287 := $eq.i32($i3286, 0);
    goto corral_source_split_7114;

  corral_source_split_7114:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3287} true;
    goto $bb1463, $bb1464;

  $bb1464:
    assume !($i3287 == 1);
    assume {:verifier.code 0} true;
    goto $bb1465;

  $bb1465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1656} $p3288 := skb_end_pointer($p3281);
    goto corral_source_split_7118;

  corral_source_split_7118:
    assume {:verifier.code 0} true;
    $p3289 := $bitcast.ref.ref($p3288);
    goto corral_source_split_7119;

  corral_source_split_7119:
    assume {:verifier.code 0} true;
    $p3290 := $add.ref($add.ref($p3289, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_7120;

  corral_source_split_7120:
    assume {:verifier.code 0} true;
    $p3291 := $bitcast.ref.ref($p3290);
    goto corral_source_split_7121;

  corral_source_split_7121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1657} $p3292 := skb_frag_page($p3291);
    goto corral_source_split_7122;

  corral_source_split_7122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1658} get_page($p3292);
    goto corral_source_split_7123;

  corral_source_split_7123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1659} $p3293 := lowmem_page_address($p3292);
    goto corral_source_split_7124;

  corral_source_split_7124:
    assume {:verifier.code 0} true;
    $i3294 := $p2i.ref.i64($p3293);
    goto corral_source_split_7125;

  corral_source_split_7125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1660} gnttab_end_foreign_access($i3286, 0, $i3294);
    goto corral_source_split_7126;

  corral_source_split_7126:
    assume {:verifier.code 0} true;
    $p3296 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(182, 4));
    goto corral_source_split_7127;

  corral_source_split_7127:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3296, 0);
    goto corral_source_split_7128;

  corral_source_split_7128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1661} kfree_skb($p3281);
    goto corral_source_split_7129;

  corral_source_split_7129:
    assume {:verifier.code 0} true;
    goto $bb1466;

  $bb1466:
    assume {:verifier.code 0} true;
    goto $bb1467;

  $bb1467:
    assume {:verifier.code 0} true;
    $p3298 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(183, 8));
    goto corral_source_split_7131;

  corral_source_split_7131:
    assume {:verifier.code 0} true;
    $p3299 := $load.ref($M.0, $p3298);
    goto corral_source_split_7132;

  corral_source_split_7132:
    assume {:verifier.code 0} true;
    $i3300 := $p2i.ref.i64($p3299);
    goto corral_source_split_7133;

  corral_source_split_7133:
    assume {:verifier.code 0} true;
    $i3301 := $eq.i64($i3300, 0);
    goto corral_source_split_7134;

  corral_source_split_7134:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3301} true;
    goto $bb1468, $bb1469;

  $bb1469:
    assume !($i3301 == 1);
    assume {:verifier.code 0} true;
    goto $bb1470;

  $bb1470:
    assume {:verifier.code 0} true;
    $p3303 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(183, 4));
    goto corral_source_split_7138;

  corral_source_split_7138:
    assume {:verifier.code 0} true;
    $i3304 := $load.i32($M.0, $p3303);
    goto corral_source_split_7139;

  corral_source_split_7139:
    assume {:verifier.code 0} true;
    $i3305 := $eq.i32($i3304, 0);
    goto corral_source_split_7140;

  corral_source_split_7140:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3305} true;
    goto $bb1471, $bb1472;

  $bb1472:
    assume !($i3305 == 1);
    assume {:verifier.code 0} true;
    goto $bb1473;

  $bb1473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1662} $p3306 := skb_end_pointer($p3299);
    goto corral_source_split_7144;

  corral_source_split_7144:
    assume {:verifier.code 0} true;
    $p3307 := $bitcast.ref.ref($p3306);
    goto corral_source_split_7145;

  corral_source_split_7145:
    assume {:verifier.code 0} true;
    $p3308 := $add.ref($add.ref($p3307, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_7146;

  corral_source_split_7146:
    assume {:verifier.code 0} true;
    $p3309 := $bitcast.ref.ref($p3308);
    goto corral_source_split_7147;

  corral_source_split_7147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1663} $p3310 := skb_frag_page($p3309);
    goto corral_source_split_7148;

  corral_source_split_7148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1664} get_page($p3310);
    goto corral_source_split_7149;

  corral_source_split_7149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1665} $p3311 := lowmem_page_address($p3310);
    goto corral_source_split_7150;

  corral_source_split_7150:
    assume {:verifier.code 0} true;
    $i3312 := $p2i.ref.i64($p3311);
    goto corral_source_split_7151;

  corral_source_split_7151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1666} gnttab_end_foreign_access($i3304, 0, $i3312);
    goto corral_source_split_7152;

  corral_source_split_7152:
    assume {:verifier.code 0} true;
    $p3314 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(183, 4));
    goto corral_source_split_7153;

  corral_source_split_7153:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3314, 0);
    goto corral_source_split_7154;

  corral_source_split_7154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1667} kfree_skb($p3299);
    goto corral_source_split_7155;

  corral_source_split_7155:
    assume {:verifier.code 0} true;
    goto $bb1474;

  $bb1474:
    assume {:verifier.code 0} true;
    goto $bb1475;

  $bb1475:
    assume {:verifier.code 0} true;
    $p3316 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(184, 8));
    goto corral_source_split_7157;

  corral_source_split_7157:
    assume {:verifier.code 0} true;
    $p3317 := $load.ref($M.0, $p3316);
    goto corral_source_split_7158;

  corral_source_split_7158:
    assume {:verifier.code 0} true;
    $i3318 := $p2i.ref.i64($p3317);
    goto corral_source_split_7159;

  corral_source_split_7159:
    assume {:verifier.code 0} true;
    $i3319 := $eq.i64($i3318, 0);
    goto corral_source_split_7160;

  corral_source_split_7160:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3319} true;
    goto $bb1476, $bb1477;

  $bb1477:
    assume !($i3319 == 1);
    assume {:verifier.code 0} true;
    goto $bb1478;

  $bb1478:
    assume {:verifier.code 0} true;
    $p3321 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(184, 4));
    goto corral_source_split_7164;

  corral_source_split_7164:
    assume {:verifier.code 0} true;
    $i3322 := $load.i32($M.0, $p3321);
    goto corral_source_split_7165;

  corral_source_split_7165:
    assume {:verifier.code 0} true;
    $i3323 := $eq.i32($i3322, 0);
    goto corral_source_split_7166;

  corral_source_split_7166:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3323} true;
    goto $bb1479, $bb1480;

  $bb1480:
    assume !($i3323 == 1);
    assume {:verifier.code 0} true;
    goto $bb1481;

  $bb1481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1668} $p3324 := skb_end_pointer($p3317);
    goto corral_source_split_7170;

  corral_source_split_7170:
    assume {:verifier.code 0} true;
    $p3325 := $bitcast.ref.ref($p3324);
    goto corral_source_split_7171;

  corral_source_split_7171:
    assume {:verifier.code 0} true;
    $p3326 := $add.ref($add.ref($p3325, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_7172;

  corral_source_split_7172:
    assume {:verifier.code 0} true;
    $p3327 := $bitcast.ref.ref($p3326);
    goto corral_source_split_7173;

  corral_source_split_7173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1669} $p3328 := skb_frag_page($p3327);
    goto corral_source_split_7174;

  corral_source_split_7174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1670} get_page($p3328);
    goto corral_source_split_7175;

  corral_source_split_7175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1671} $p3329 := lowmem_page_address($p3328);
    goto corral_source_split_7176;

  corral_source_split_7176:
    assume {:verifier.code 0} true;
    $i3330 := $p2i.ref.i64($p3329);
    goto corral_source_split_7177;

  corral_source_split_7177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1672} gnttab_end_foreign_access($i3322, 0, $i3330);
    goto corral_source_split_7178;

  corral_source_split_7178:
    assume {:verifier.code 0} true;
    $p3332 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(184, 4));
    goto corral_source_split_7179;

  corral_source_split_7179:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3332, 0);
    goto corral_source_split_7180;

  corral_source_split_7180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1673} kfree_skb($p3317);
    goto corral_source_split_7181;

  corral_source_split_7181:
    assume {:verifier.code 0} true;
    goto $bb1482;

  $bb1482:
    assume {:verifier.code 0} true;
    goto $bb1483;

  $bb1483:
    assume {:verifier.code 0} true;
    $p3334 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(185, 8));
    goto corral_source_split_7183;

  corral_source_split_7183:
    assume {:verifier.code 0} true;
    $p3335 := $load.ref($M.0, $p3334);
    goto corral_source_split_7184;

  corral_source_split_7184:
    assume {:verifier.code 0} true;
    $i3336 := $p2i.ref.i64($p3335);
    goto corral_source_split_7185;

  corral_source_split_7185:
    assume {:verifier.code 0} true;
    $i3337 := $eq.i64($i3336, 0);
    goto corral_source_split_7186;

  corral_source_split_7186:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3337} true;
    goto $bb1484, $bb1485;

  $bb1485:
    assume !($i3337 == 1);
    assume {:verifier.code 0} true;
    goto $bb1486;

  $bb1486:
    assume {:verifier.code 0} true;
    $p3339 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(185, 4));
    goto corral_source_split_7190;

  corral_source_split_7190:
    assume {:verifier.code 0} true;
    $i3340 := $load.i32($M.0, $p3339);
    goto corral_source_split_7191;

  corral_source_split_7191:
    assume {:verifier.code 0} true;
    $i3341 := $eq.i32($i3340, 0);
    goto corral_source_split_7192;

  corral_source_split_7192:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3341} true;
    goto $bb1487, $bb1488;

  $bb1488:
    assume !($i3341 == 1);
    assume {:verifier.code 0} true;
    goto $bb1489;

  $bb1489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1674} $p3342 := skb_end_pointer($p3335);
    goto corral_source_split_7196;

  corral_source_split_7196:
    assume {:verifier.code 0} true;
    $p3343 := $bitcast.ref.ref($p3342);
    goto corral_source_split_7197;

  corral_source_split_7197:
    assume {:verifier.code 0} true;
    $p3344 := $add.ref($add.ref($p3343, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_7198;

  corral_source_split_7198:
    assume {:verifier.code 0} true;
    $p3345 := $bitcast.ref.ref($p3344);
    goto corral_source_split_7199;

  corral_source_split_7199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1675} $p3346 := skb_frag_page($p3345);
    goto corral_source_split_7200;

  corral_source_split_7200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1676} get_page($p3346);
    goto corral_source_split_7201;

  corral_source_split_7201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1677} $p3347 := lowmem_page_address($p3346);
    goto corral_source_split_7202;

  corral_source_split_7202:
    assume {:verifier.code 0} true;
    $i3348 := $p2i.ref.i64($p3347);
    goto corral_source_split_7203;

  corral_source_split_7203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1678} gnttab_end_foreign_access($i3340, 0, $i3348);
    goto corral_source_split_7204;

  corral_source_split_7204:
    assume {:verifier.code 0} true;
    $p3350 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(185, 4));
    goto corral_source_split_7205;

  corral_source_split_7205:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3350, 0);
    goto corral_source_split_7206;

  corral_source_split_7206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1679} kfree_skb($p3335);
    goto corral_source_split_7207;

  corral_source_split_7207:
    assume {:verifier.code 0} true;
    goto $bb1490;

  $bb1490:
    assume {:verifier.code 0} true;
    goto $bb1491;

  $bb1491:
    assume {:verifier.code 0} true;
    $p3352 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(186, 8));
    goto corral_source_split_7209;

  corral_source_split_7209:
    assume {:verifier.code 0} true;
    $p3353 := $load.ref($M.0, $p3352);
    goto corral_source_split_7210;

  corral_source_split_7210:
    assume {:verifier.code 0} true;
    $i3354 := $p2i.ref.i64($p3353);
    goto corral_source_split_7211;

  corral_source_split_7211:
    assume {:verifier.code 0} true;
    $i3355 := $eq.i64($i3354, 0);
    goto corral_source_split_7212;

  corral_source_split_7212:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3355} true;
    goto $bb1492, $bb1493;

  $bb1493:
    assume !($i3355 == 1);
    assume {:verifier.code 0} true;
    goto $bb1494;

  $bb1494:
    assume {:verifier.code 0} true;
    $p3357 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(186, 4));
    goto corral_source_split_7216;

  corral_source_split_7216:
    assume {:verifier.code 0} true;
    $i3358 := $load.i32($M.0, $p3357);
    goto corral_source_split_7217;

  corral_source_split_7217:
    assume {:verifier.code 0} true;
    $i3359 := $eq.i32($i3358, 0);
    goto corral_source_split_7218;

  corral_source_split_7218:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3359} true;
    goto $bb1495, $bb1496;

  $bb1496:
    assume !($i3359 == 1);
    assume {:verifier.code 0} true;
    goto $bb1497;

  $bb1497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1680} $p3360 := skb_end_pointer($p3353);
    goto corral_source_split_7222;

  corral_source_split_7222:
    assume {:verifier.code 0} true;
    $p3361 := $bitcast.ref.ref($p3360);
    goto corral_source_split_7223;

  corral_source_split_7223:
    assume {:verifier.code 0} true;
    $p3362 := $add.ref($add.ref($p3361, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_7224;

  corral_source_split_7224:
    assume {:verifier.code 0} true;
    $p3363 := $bitcast.ref.ref($p3362);
    goto corral_source_split_7225;

  corral_source_split_7225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1681} $p3364 := skb_frag_page($p3363);
    goto corral_source_split_7226;

  corral_source_split_7226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1682} get_page($p3364);
    goto corral_source_split_7227;

  corral_source_split_7227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1683} $p3365 := lowmem_page_address($p3364);
    goto corral_source_split_7228;

  corral_source_split_7228:
    assume {:verifier.code 0} true;
    $i3366 := $p2i.ref.i64($p3365);
    goto corral_source_split_7229;

  corral_source_split_7229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1684} gnttab_end_foreign_access($i3358, 0, $i3366);
    goto corral_source_split_7230;

  corral_source_split_7230:
    assume {:verifier.code 0} true;
    $p3368 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(186, 4));
    goto corral_source_split_7231;

  corral_source_split_7231:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3368, 0);
    goto corral_source_split_7232;

  corral_source_split_7232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1685} kfree_skb($p3353);
    goto corral_source_split_7233;

  corral_source_split_7233:
    assume {:verifier.code 0} true;
    goto $bb1498;

  $bb1498:
    assume {:verifier.code 0} true;
    goto $bb1499;

  $bb1499:
    assume {:verifier.code 0} true;
    $p3370 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(187, 8));
    goto corral_source_split_7235;

  corral_source_split_7235:
    assume {:verifier.code 0} true;
    $p3371 := $load.ref($M.0, $p3370);
    goto corral_source_split_7236;

  corral_source_split_7236:
    assume {:verifier.code 0} true;
    $i3372 := $p2i.ref.i64($p3371);
    goto corral_source_split_7237;

  corral_source_split_7237:
    assume {:verifier.code 0} true;
    $i3373 := $eq.i64($i3372, 0);
    goto corral_source_split_7238;

  corral_source_split_7238:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3373} true;
    goto $bb1500, $bb1501;

  $bb1501:
    assume !($i3373 == 1);
    assume {:verifier.code 0} true;
    goto $bb1502;

  $bb1502:
    assume {:verifier.code 0} true;
    $p3375 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(187, 4));
    goto corral_source_split_7242;

  corral_source_split_7242:
    assume {:verifier.code 0} true;
    $i3376 := $load.i32($M.0, $p3375);
    goto corral_source_split_7243;

  corral_source_split_7243:
    assume {:verifier.code 0} true;
    $i3377 := $eq.i32($i3376, 0);
    goto corral_source_split_7244;

  corral_source_split_7244:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3377} true;
    goto $bb1503, $bb1504;

  $bb1504:
    assume !($i3377 == 1);
    assume {:verifier.code 0} true;
    goto $bb1505;

  $bb1505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1686} $p3378 := skb_end_pointer($p3371);
    goto corral_source_split_7248;

  corral_source_split_7248:
    assume {:verifier.code 0} true;
    $p3379 := $bitcast.ref.ref($p3378);
    goto corral_source_split_7249;

  corral_source_split_7249:
    assume {:verifier.code 0} true;
    $p3380 := $add.ref($add.ref($p3379, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_7250;

  corral_source_split_7250:
    assume {:verifier.code 0} true;
    $p3381 := $bitcast.ref.ref($p3380);
    goto corral_source_split_7251;

  corral_source_split_7251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1687} $p3382 := skb_frag_page($p3381);
    goto corral_source_split_7252;

  corral_source_split_7252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1688} get_page($p3382);
    goto corral_source_split_7253;

  corral_source_split_7253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1689} $p3383 := lowmem_page_address($p3382);
    goto corral_source_split_7254;

  corral_source_split_7254:
    assume {:verifier.code 0} true;
    $i3384 := $p2i.ref.i64($p3383);
    goto corral_source_split_7255;

  corral_source_split_7255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1690} gnttab_end_foreign_access($i3376, 0, $i3384);
    goto corral_source_split_7256;

  corral_source_split_7256:
    assume {:verifier.code 0} true;
    $p3386 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(187, 4));
    goto corral_source_split_7257;

  corral_source_split_7257:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3386, 0);
    goto corral_source_split_7258;

  corral_source_split_7258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1691} kfree_skb($p3371);
    goto corral_source_split_7259;

  corral_source_split_7259:
    assume {:verifier.code 0} true;
    goto $bb1506;

  $bb1506:
    assume {:verifier.code 0} true;
    goto $bb1507;

  $bb1507:
    assume {:verifier.code 0} true;
    $p3388 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(188, 8));
    goto corral_source_split_7261;

  corral_source_split_7261:
    assume {:verifier.code 0} true;
    $p3389 := $load.ref($M.0, $p3388);
    goto corral_source_split_7262;

  corral_source_split_7262:
    assume {:verifier.code 0} true;
    $i3390 := $p2i.ref.i64($p3389);
    goto corral_source_split_7263;

  corral_source_split_7263:
    assume {:verifier.code 0} true;
    $i3391 := $eq.i64($i3390, 0);
    goto corral_source_split_7264;

  corral_source_split_7264:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3391} true;
    goto $bb1508, $bb1509;

  $bb1509:
    assume !($i3391 == 1);
    assume {:verifier.code 0} true;
    goto $bb1510;

  $bb1510:
    assume {:verifier.code 0} true;
    $p3393 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(188, 4));
    goto corral_source_split_7268;

  corral_source_split_7268:
    assume {:verifier.code 0} true;
    $i3394 := $load.i32($M.0, $p3393);
    goto corral_source_split_7269;

  corral_source_split_7269:
    assume {:verifier.code 0} true;
    $i3395 := $eq.i32($i3394, 0);
    goto corral_source_split_7270;

  corral_source_split_7270:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3395} true;
    goto $bb1511, $bb1512;

  $bb1512:
    assume !($i3395 == 1);
    assume {:verifier.code 0} true;
    goto $bb1513;

  $bb1513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1692} $p3396 := skb_end_pointer($p3389);
    goto corral_source_split_7274;

  corral_source_split_7274:
    assume {:verifier.code 0} true;
    $p3397 := $bitcast.ref.ref($p3396);
    goto corral_source_split_7275;

  corral_source_split_7275:
    assume {:verifier.code 0} true;
    $p3398 := $add.ref($add.ref($p3397, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_7276;

  corral_source_split_7276:
    assume {:verifier.code 0} true;
    $p3399 := $bitcast.ref.ref($p3398);
    goto corral_source_split_7277;

  corral_source_split_7277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1693} $p3400 := skb_frag_page($p3399);
    goto corral_source_split_7278;

  corral_source_split_7278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1694} get_page($p3400);
    goto corral_source_split_7279;

  corral_source_split_7279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1695} $p3401 := lowmem_page_address($p3400);
    goto corral_source_split_7280;

  corral_source_split_7280:
    assume {:verifier.code 0} true;
    $i3402 := $p2i.ref.i64($p3401);
    goto corral_source_split_7281;

  corral_source_split_7281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1696} gnttab_end_foreign_access($i3394, 0, $i3402);
    goto corral_source_split_7282;

  corral_source_split_7282:
    assume {:verifier.code 0} true;
    $p3404 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(188, 4));
    goto corral_source_split_7283;

  corral_source_split_7283:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3404, 0);
    goto corral_source_split_7284;

  corral_source_split_7284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1697} kfree_skb($p3389);
    goto corral_source_split_7285;

  corral_source_split_7285:
    assume {:verifier.code 0} true;
    goto $bb1514;

  $bb1514:
    assume {:verifier.code 0} true;
    goto $bb1515;

  $bb1515:
    assume {:verifier.code 0} true;
    $p3406 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(189, 8));
    goto corral_source_split_7287;

  corral_source_split_7287:
    assume {:verifier.code 0} true;
    $p3407 := $load.ref($M.0, $p3406);
    goto corral_source_split_7288;

  corral_source_split_7288:
    assume {:verifier.code 0} true;
    $i3408 := $p2i.ref.i64($p3407);
    goto corral_source_split_7289;

  corral_source_split_7289:
    assume {:verifier.code 0} true;
    $i3409 := $eq.i64($i3408, 0);
    goto corral_source_split_7290;

  corral_source_split_7290:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3409} true;
    goto $bb1516, $bb1517;

  $bb1517:
    assume !($i3409 == 1);
    assume {:verifier.code 0} true;
    goto $bb1518;

  $bb1518:
    assume {:verifier.code 0} true;
    $p3411 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(189, 4));
    goto corral_source_split_7294;

  corral_source_split_7294:
    assume {:verifier.code 0} true;
    $i3412 := $load.i32($M.0, $p3411);
    goto corral_source_split_7295;

  corral_source_split_7295:
    assume {:verifier.code 0} true;
    $i3413 := $eq.i32($i3412, 0);
    goto corral_source_split_7296;

  corral_source_split_7296:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3413} true;
    goto $bb1519, $bb1520;

  $bb1520:
    assume !($i3413 == 1);
    assume {:verifier.code 0} true;
    goto $bb1521;

  $bb1521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1698} $p3414 := skb_end_pointer($p3407);
    goto corral_source_split_7300;

  corral_source_split_7300:
    assume {:verifier.code 0} true;
    $p3415 := $bitcast.ref.ref($p3414);
    goto corral_source_split_7301;

  corral_source_split_7301:
    assume {:verifier.code 0} true;
    $p3416 := $add.ref($add.ref($p3415, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_7302;

  corral_source_split_7302:
    assume {:verifier.code 0} true;
    $p3417 := $bitcast.ref.ref($p3416);
    goto corral_source_split_7303;

  corral_source_split_7303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1699} $p3418 := skb_frag_page($p3417);
    goto corral_source_split_7304;

  corral_source_split_7304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1700} get_page($p3418);
    goto corral_source_split_7305;

  corral_source_split_7305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1701} $p3419 := lowmem_page_address($p3418);
    goto corral_source_split_7306;

  corral_source_split_7306:
    assume {:verifier.code 0} true;
    $i3420 := $p2i.ref.i64($p3419);
    goto corral_source_split_7307;

  corral_source_split_7307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1702} gnttab_end_foreign_access($i3412, 0, $i3420);
    goto corral_source_split_7308;

  corral_source_split_7308:
    assume {:verifier.code 0} true;
    $p3422 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(189, 4));
    goto corral_source_split_7309;

  corral_source_split_7309:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3422, 0);
    goto corral_source_split_7310;

  corral_source_split_7310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1703} kfree_skb($p3407);
    goto corral_source_split_7311;

  corral_source_split_7311:
    assume {:verifier.code 0} true;
    goto $bb1522;

  $bb1522:
    assume {:verifier.code 0} true;
    goto $bb1523;

  $bb1523:
    assume {:verifier.code 0} true;
    $p3424 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(190, 8));
    goto corral_source_split_7313;

  corral_source_split_7313:
    assume {:verifier.code 0} true;
    $p3425 := $load.ref($M.0, $p3424);
    goto corral_source_split_7314;

  corral_source_split_7314:
    assume {:verifier.code 0} true;
    $i3426 := $p2i.ref.i64($p3425);
    goto corral_source_split_7315;

  corral_source_split_7315:
    assume {:verifier.code 0} true;
    $i3427 := $eq.i64($i3426, 0);
    goto corral_source_split_7316;

  corral_source_split_7316:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3427} true;
    goto $bb1524, $bb1525;

  $bb1525:
    assume !($i3427 == 1);
    assume {:verifier.code 0} true;
    goto $bb1526;

  $bb1526:
    assume {:verifier.code 0} true;
    $p3429 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(190, 4));
    goto corral_source_split_7320;

  corral_source_split_7320:
    assume {:verifier.code 0} true;
    $i3430 := $load.i32($M.0, $p3429);
    goto corral_source_split_7321;

  corral_source_split_7321:
    assume {:verifier.code 0} true;
    $i3431 := $eq.i32($i3430, 0);
    goto corral_source_split_7322;

  corral_source_split_7322:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3431} true;
    goto $bb1527, $bb1528;

  $bb1528:
    assume !($i3431 == 1);
    assume {:verifier.code 0} true;
    goto $bb1529;

  $bb1529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1704} $p3432 := skb_end_pointer($p3425);
    goto corral_source_split_7326;

  corral_source_split_7326:
    assume {:verifier.code 0} true;
    $p3433 := $bitcast.ref.ref($p3432);
    goto corral_source_split_7327;

  corral_source_split_7327:
    assume {:verifier.code 0} true;
    $p3434 := $add.ref($add.ref($p3433, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_7328;

  corral_source_split_7328:
    assume {:verifier.code 0} true;
    $p3435 := $bitcast.ref.ref($p3434);
    goto corral_source_split_7329;

  corral_source_split_7329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1705} $p3436 := skb_frag_page($p3435);
    goto corral_source_split_7330;

  corral_source_split_7330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1706} get_page($p3436);
    goto corral_source_split_7331;

  corral_source_split_7331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1707} $p3437 := lowmem_page_address($p3436);
    goto corral_source_split_7332;

  corral_source_split_7332:
    assume {:verifier.code 0} true;
    $i3438 := $p2i.ref.i64($p3437);
    goto corral_source_split_7333;

  corral_source_split_7333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1708} gnttab_end_foreign_access($i3430, 0, $i3438);
    goto corral_source_split_7334;

  corral_source_split_7334:
    assume {:verifier.code 0} true;
    $p3440 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(190, 4));
    goto corral_source_split_7335;

  corral_source_split_7335:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3440, 0);
    goto corral_source_split_7336;

  corral_source_split_7336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1709} kfree_skb($p3425);
    goto corral_source_split_7337;

  corral_source_split_7337:
    assume {:verifier.code 0} true;
    goto $bb1530;

  $bb1530:
    assume {:verifier.code 0} true;
    goto $bb1531;

  $bb1531:
    assume {:verifier.code 0} true;
    $p3442 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(191, 8));
    goto corral_source_split_7339;

  corral_source_split_7339:
    assume {:verifier.code 0} true;
    $p3443 := $load.ref($M.0, $p3442);
    goto corral_source_split_7340;

  corral_source_split_7340:
    assume {:verifier.code 0} true;
    $i3444 := $p2i.ref.i64($p3443);
    goto corral_source_split_7341;

  corral_source_split_7341:
    assume {:verifier.code 0} true;
    $i3445 := $eq.i64($i3444, 0);
    goto corral_source_split_7342;

  corral_source_split_7342:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3445} true;
    goto $bb1532, $bb1533;

  $bb1533:
    assume !($i3445 == 1);
    assume {:verifier.code 0} true;
    goto $bb1534;

  $bb1534:
    assume {:verifier.code 0} true;
    $p3447 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(191, 4));
    goto corral_source_split_7346;

  corral_source_split_7346:
    assume {:verifier.code 0} true;
    $i3448 := $load.i32($M.0, $p3447);
    goto corral_source_split_7347;

  corral_source_split_7347:
    assume {:verifier.code 0} true;
    $i3449 := $eq.i32($i3448, 0);
    goto corral_source_split_7348;

  corral_source_split_7348:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3449} true;
    goto $bb1535, $bb1536;

  $bb1536:
    assume !($i3449 == 1);
    assume {:verifier.code 0} true;
    goto $bb1537;

  $bb1537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1710} $p3450 := skb_end_pointer($p3443);
    goto corral_source_split_7352;

  corral_source_split_7352:
    assume {:verifier.code 0} true;
    $p3451 := $bitcast.ref.ref($p3450);
    goto corral_source_split_7353;

  corral_source_split_7353:
    assume {:verifier.code 0} true;
    $p3452 := $add.ref($add.ref($p3451, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_7354;

  corral_source_split_7354:
    assume {:verifier.code 0} true;
    $p3453 := $bitcast.ref.ref($p3452);
    goto corral_source_split_7355;

  corral_source_split_7355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1711} $p3454 := skb_frag_page($p3453);
    goto corral_source_split_7356;

  corral_source_split_7356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1712} get_page($p3454);
    goto corral_source_split_7357;

  corral_source_split_7357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1713} $p3455 := lowmem_page_address($p3454);
    goto corral_source_split_7358;

  corral_source_split_7358:
    assume {:verifier.code 0} true;
    $i3456 := $p2i.ref.i64($p3455);
    goto corral_source_split_7359;

  corral_source_split_7359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1714} gnttab_end_foreign_access($i3448, 0, $i3456);
    goto corral_source_split_7360;

  corral_source_split_7360:
    assume {:verifier.code 0} true;
    $p3458 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(191, 4));
    goto corral_source_split_7361;

  corral_source_split_7361:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3458, 0);
    goto corral_source_split_7362;

  corral_source_split_7362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1715} kfree_skb($p3443);
    goto corral_source_split_7363;

  corral_source_split_7363:
    assume {:verifier.code 0} true;
    goto $bb1538;

  $bb1538:
    assume {:verifier.code 0} true;
    goto $bb1539;

  $bb1539:
    assume {:verifier.code 0} true;
    $p3460 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(192, 8));
    goto corral_source_split_7365;

  corral_source_split_7365:
    assume {:verifier.code 0} true;
    $p3461 := $load.ref($M.0, $p3460);
    goto corral_source_split_7366;

  corral_source_split_7366:
    assume {:verifier.code 0} true;
    $i3462 := $p2i.ref.i64($p3461);
    goto corral_source_split_7367;

  corral_source_split_7367:
    assume {:verifier.code 0} true;
    $i3463 := $eq.i64($i3462, 0);
    goto corral_source_split_7368;

  corral_source_split_7368:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3463} true;
    goto $bb1540, $bb1541;

  $bb1541:
    assume !($i3463 == 1);
    assume {:verifier.code 0} true;
    goto $bb1542;

  $bb1542:
    assume {:verifier.code 0} true;
    $p3465 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(192, 4));
    goto corral_source_split_7372;

  corral_source_split_7372:
    assume {:verifier.code 0} true;
    $i3466 := $load.i32($M.0, $p3465);
    goto corral_source_split_7373;

  corral_source_split_7373:
    assume {:verifier.code 0} true;
    $i3467 := $eq.i32($i3466, 0);
    goto corral_source_split_7374;

  corral_source_split_7374:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3467} true;
    goto $bb1543, $bb1544;

  $bb1544:
    assume !($i3467 == 1);
    assume {:verifier.code 0} true;
    goto $bb1545;

  $bb1545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1716} $p3468 := skb_end_pointer($p3461);
    goto corral_source_split_7378;

  corral_source_split_7378:
    assume {:verifier.code 0} true;
    $p3469 := $bitcast.ref.ref($p3468);
    goto corral_source_split_7379;

  corral_source_split_7379:
    assume {:verifier.code 0} true;
    $p3470 := $add.ref($add.ref($p3469, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_7380;

  corral_source_split_7380:
    assume {:verifier.code 0} true;
    $p3471 := $bitcast.ref.ref($p3470);
    goto corral_source_split_7381;

  corral_source_split_7381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1717} $p3472 := skb_frag_page($p3471);
    goto corral_source_split_7382;

  corral_source_split_7382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1718} get_page($p3472);
    goto corral_source_split_7383;

  corral_source_split_7383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1719} $p3473 := lowmem_page_address($p3472);
    goto corral_source_split_7384;

  corral_source_split_7384:
    assume {:verifier.code 0} true;
    $i3474 := $p2i.ref.i64($p3473);
    goto corral_source_split_7385;

  corral_source_split_7385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1720} gnttab_end_foreign_access($i3466, 0, $i3474);
    goto corral_source_split_7386;

  corral_source_split_7386:
    assume {:verifier.code 0} true;
    $p3476 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(192, 4));
    goto corral_source_split_7387;

  corral_source_split_7387:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3476, 0);
    goto corral_source_split_7388;

  corral_source_split_7388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1721} kfree_skb($p3461);
    goto corral_source_split_7389;

  corral_source_split_7389:
    assume {:verifier.code 0} true;
    goto $bb1546;

  $bb1546:
    assume {:verifier.code 0} true;
    goto $bb1547;

  $bb1547:
    assume {:verifier.code 0} true;
    $p3478 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(193, 8));
    goto corral_source_split_7391;

  corral_source_split_7391:
    assume {:verifier.code 0} true;
    $p3479 := $load.ref($M.0, $p3478);
    goto corral_source_split_7392;

  corral_source_split_7392:
    assume {:verifier.code 0} true;
    $i3480 := $p2i.ref.i64($p3479);
    goto corral_source_split_7393;

  corral_source_split_7393:
    assume {:verifier.code 0} true;
    $i3481 := $eq.i64($i3480, 0);
    goto corral_source_split_7394;

  corral_source_split_7394:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3481} true;
    goto $bb1548, $bb1549;

  $bb1549:
    assume !($i3481 == 1);
    assume {:verifier.code 0} true;
    goto $bb1550;

  $bb1550:
    assume {:verifier.code 0} true;
    $p3483 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(193, 4));
    goto corral_source_split_7398;

  corral_source_split_7398:
    assume {:verifier.code 0} true;
    $i3484 := $load.i32($M.0, $p3483);
    goto corral_source_split_7399;

  corral_source_split_7399:
    assume {:verifier.code 0} true;
    $i3485 := $eq.i32($i3484, 0);
    goto corral_source_split_7400;

  corral_source_split_7400:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3485} true;
    goto $bb1551, $bb1552;

  $bb1552:
    assume !($i3485 == 1);
    assume {:verifier.code 0} true;
    goto $bb1553;

  $bb1553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1722} $p3486 := skb_end_pointer($p3479);
    goto corral_source_split_7404;

  corral_source_split_7404:
    assume {:verifier.code 0} true;
    $p3487 := $bitcast.ref.ref($p3486);
    goto corral_source_split_7405;

  corral_source_split_7405:
    assume {:verifier.code 0} true;
    $p3488 := $add.ref($add.ref($p3487, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_7406;

  corral_source_split_7406:
    assume {:verifier.code 0} true;
    $p3489 := $bitcast.ref.ref($p3488);
    goto corral_source_split_7407;

  corral_source_split_7407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1723} $p3490 := skb_frag_page($p3489);
    goto corral_source_split_7408;

  corral_source_split_7408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1724} get_page($p3490);
    goto corral_source_split_7409;

  corral_source_split_7409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1725} $p3491 := lowmem_page_address($p3490);
    goto corral_source_split_7410;

  corral_source_split_7410:
    assume {:verifier.code 0} true;
    $i3492 := $p2i.ref.i64($p3491);
    goto corral_source_split_7411;

  corral_source_split_7411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1726} gnttab_end_foreign_access($i3484, 0, $i3492);
    goto corral_source_split_7412;

  corral_source_split_7412:
    assume {:verifier.code 0} true;
    $p3494 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(193, 4));
    goto corral_source_split_7413;

  corral_source_split_7413:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3494, 0);
    goto corral_source_split_7414;

  corral_source_split_7414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1727} kfree_skb($p3479);
    goto corral_source_split_7415;

  corral_source_split_7415:
    assume {:verifier.code 0} true;
    goto $bb1554;

  $bb1554:
    assume {:verifier.code 0} true;
    goto $bb1555;

  $bb1555:
    assume {:verifier.code 0} true;
    $p3496 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(194, 8));
    goto corral_source_split_7417;

  corral_source_split_7417:
    assume {:verifier.code 0} true;
    $p3497 := $load.ref($M.0, $p3496);
    goto corral_source_split_7418;

  corral_source_split_7418:
    assume {:verifier.code 0} true;
    $i3498 := $p2i.ref.i64($p3497);
    goto corral_source_split_7419;

  corral_source_split_7419:
    assume {:verifier.code 0} true;
    $i3499 := $eq.i64($i3498, 0);
    goto corral_source_split_7420;

  corral_source_split_7420:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3499} true;
    goto $bb1556, $bb1557;

  $bb1557:
    assume !($i3499 == 1);
    assume {:verifier.code 0} true;
    goto $bb1558;

  $bb1558:
    assume {:verifier.code 0} true;
    $p3501 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(194, 4));
    goto corral_source_split_7424;

  corral_source_split_7424:
    assume {:verifier.code 0} true;
    $i3502 := $load.i32($M.0, $p3501);
    goto corral_source_split_7425;

  corral_source_split_7425:
    assume {:verifier.code 0} true;
    $i3503 := $eq.i32($i3502, 0);
    goto corral_source_split_7426;

  corral_source_split_7426:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3503} true;
    goto $bb1559, $bb1560;

  $bb1560:
    assume !($i3503 == 1);
    assume {:verifier.code 0} true;
    goto $bb1561;

  $bb1561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1728} $p3504 := skb_end_pointer($p3497);
    goto corral_source_split_7430;

  corral_source_split_7430:
    assume {:verifier.code 0} true;
    $p3505 := $bitcast.ref.ref($p3504);
    goto corral_source_split_7431;

  corral_source_split_7431:
    assume {:verifier.code 0} true;
    $p3506 := $add.ref($add.ref($p3505, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_7432;

  corral_source_split_7432:
    assume {:verifier.code 0} true;
    $p3507 := $bitcast.ref.ref($p3506);
    goto corral_source_split_7433;

  corral_source_split_7433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1729} $p3508 := skb_frag_page($p3507);
    goto corral_source_split_7434;

  corral_source_split_7434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1730} get_page($p3508);
    goto corral_source_split_7435;

  corral_source_split_7435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1731} $p3509 := lowmem_page_address($p3508);
    goto corral_source_split_7436;

  corral_source_split_7436:
    assume {:verifier.code 0} true;
    $i3510 := $p2i.ref.i64($p3509);
    goto corral_source_split_7437;

  corral_source_split_7437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1732} gnttab_end_foreign_access($i3502, 0, $i3510);
    goto corral_source_split_7438;

  corral_source_split_7438:
    assume {:verifier.code 0} true;
    $p3512 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(194, 4));
    goto corral_source_split_7439;

  corral_source_split_7439:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3512, 0);
    goto corral_source_split_7440;

  corral_source_split_7440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1733} kfree_skb($p3497);
    goto corral_source_split_7441;

  corral_source_split_7441:
    assume {:verifier.code 0} true;
    goto $bb1562;

  $bb1562:
    assume {:verifier.code 0} true;
    goto $bb1563;

  $bb1563:
    assume {:verifier.code 0} true;
    $p3514 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(195, 8));
    goto corral_source_split_7443;

  corral_source_split_7443:
    assume {:verifier.code 0} true;
    $p3515 := $load.ref($M.0, $p3514);
    goto corral_source_split_7444;

  corral_source_split_7444:
    assume {:verifier.code 0} true;
    $i3516 := $p2i.ref.i64($p3515);
    goto corral_source_split_7445;

  corral_source_split_7445:
    assume {:verifier.code 0} true;
    $i3517 := $eq.i64($i3516, 0);
    goto corral_source_split_7446;

  corral_source_split_7446:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3517} true;
    goto $bb1564, $bb1565;

  $bb1565:
    assume !($i3517 == 1);
    assume {:verifier.code 0} true;
    goto $bb1566;

  $bb1566:
    assume {:verifier.code 0} true;
    $p3519 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(195, 4));
    goto corral_source_split_7450;

  corral_source_split_7450:
    assume {:verifier.code 0} true;
    $i3520 := $load.i32($M.0, $p3519);
    goto corral_source_split_7451;

  corral_source_split_7451:
    assume {:verifier.code 0} true;
    $i3521 := $eq.i32($i3520, 0);
    goto corral_source_split_7452;

  corral_source_split_7452:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3521} true;
    goto $bb1567, $bb1568;

  $bb1568:
    assume !($i3521 == 1);
    assume {:verifier.code 0} true;
    goto $bb1569;

  $bb1569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1734} $p3522 := skb_end_pointer($p3515);
    goto corral_source_split_7456;

  corral_source_split_7456:
    assume {:verifier.code 0} true;
    $p3523 := $bitcast.ref.ref($p3522);
    goto corral_source_split_7457;

  corral_source_split_7457:
    assume {:verifier.code 0} true;
    $p3524 := $add.ref($add.ref($p3523, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_7458;

  corral_source_split_7458:
    assume {:verifier.code 0} true;
    $p3525 := $bitcast.ref.ref($p3524);
    goto corral_source_split_7459;

  corral_source_split_7459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1735} $p3526 := skb_frag_page($p3525);
    goto corral_source_split_7460;

  corral_source_split_7460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1736} get_page($p3526);
    goto corral_source_split_7461;

  corral_source_split_7461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1737} $p3527 := lowmem_page_address($p3526);
    goto corral_source_split_7462;

  corral_source_split_7462:
    assume {:verifier.code 0} true;
    $i3528 := $p2i.ref.i64($p3527);
    goto corral_source_split_7463;

  corral_source_split_7463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1738} gnttab_end_foreign_access($i3520, 0, $i3528);
    goto corral_source_split_7464;

  corral_source_split_7464:
    assume {:verifier.code 0} true;
    $p3530 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(195, 4));
    goto corral_source_split_7465;

  corral_source_split_7465:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3530, 0);
    goto corral_source_split_7466;

  corral_source_split_7466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1739} kfree_skb($p3515);
    goto corral_source_split_7467;

  corral_source_split_7467:
    assume {:verifier.code 0} true;
    goto $bb1570;

  $bb1570:
    assume {:verifier.code 0} true;
    goto $bb1571;

  $bb1571:
    assume {:verifier.code 0} true;
    $p3532 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(196, 8));
    goto corral_source_split_7469;

  corral_source_split_7469:
    assume {:verifier.code 0} true;
    $p3533 := $load.ref($M.0, $p3532);
    goto corral_source_split_7470;

  corral_source_split_7470:
    assume {:verifier.code 0} true;
    $i3534 := $p2i.ref.i64($p3533);
    goto corral_source_split_7471;

  corral_source_split_7471:
    assume {:verifier.code 0} true;
    $i3535 := $eq.i64($i3534, 0);
    goto corral_source_split_7472;

  corral_source_split_7472:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3535} true;
    goto $bb1572, $bb1573;

  $bb1573:
    assume !($i3535 == 1);
    assume {:verifier.code 0} true;
    goto $bb1574;

  $bb1574:
    assume {:verifier.code 0} true;
    $p3537 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(196, 4));
    goto corral_source_split_7476;

  corral_source_split_7476:
    assume {:verifier.code 0} true;
    $i3538 := $load.i32($M.0, $p3537);
    goto corral_source_split_7477;

  corral_source_split_7477:
    assume {:verifier.code 0} true;
    $i3539 := $eq.i32($i3538, 0);
    goto corral_source_split_7478;

  corral_source_split_7478:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3539} true;
    goto $bb1575, $bb1576;

  $bb1576:
    assume !($i3539 == 1);
    assume {:verifier.code 0} true;
    goto $bb1577;

  $bb1577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1740} $p3540 := skb_end_pointer($p3533);
    goto corral_source_split_7482;

  corral_source_split_7482:
    assume {:verifier.code 0} true;
    $p3541 := $bitcast.ref.ref($p3540);
    goto corral_source_split_7483;

  corral_source_split_7483:
    assume {:verifier.code 0} true;
    $p3542 := $add.ref($add.ref($p3541, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_7484;

  corral_source_split_7484:
    assume {:verifier.code 0} true;
    $p3543 := $bitcast.ref.ref($p3542);
    goto corral_source_split_7485;

  corral_source_split_7485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1741} $p3544 := skb_frag_page($p3543);
    goto corral_source_split_7486;

  corral_source_split_7486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1742} get_page($p3544);
    goto corral_source_split_7487;

  corral_source_split_7487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1743} $p3545 := lowmem_page_address($p3544);
    goto corral_source_split_7488;

  corral_source_split_7488:
    assume {:verifier.code 0} true;
    $i3546 := $p2i.ref.i64($p3545);
    goto corral_source_split_7489;

  corral_source_split_7489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1744} gnttab_end_foreign_access($i3538, 0, $i3546);
    goto corral_source_split_7490;

  corral_source_split_7490:
    assume {:verifier.code 0} true;
    $p3548 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(196, 4));
    goto corral_source_split_7491;

  corral_source_split_7491:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3548, 0);
    goto corral_source_split_7492;

  corral_source_split_7492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1745} kfree_skb($p3533);
    goto corral_source_split_7493;

  corral_source_split_7493:
    assume {:verifier.code 0} true;
    goto $bb1578;

  $bb1578:
    assume {:verifier.code 0} true;
    goto $bb1579;

  $bb1579:
    assume {:verifier.code 0} true;
    $p3550 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(197, 8));
    goto corral_source_split_7495;

  corral_source_split_7495:
    assume {:verifier.code 0} true;
    $p3551 := $load.ref($M.0, $p3550);
    goto corral_source_split_7496;

  corral_source_split_7496:
    assume {:verifier.code 0} true;
    $i3552 := $p2i.ref.i64($p3551);
    goto corral_source_split_7497;

  corral_source_split_7497:
    assume {:verifier.code 0} true;
    $i3553 := $eq.i64($i3552, 0);
    goto corral_source_split_7498;

  corral_source_split_7498:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3553} true;
    goto $bb1580, $bb1581;

  $bb1581:
    assume !($i3553 == 1);
    assume {:verifier.code 0} true;
    goto $bb1582;

  $bb1582:
    assume {:verifier.code 0} true;
    $p3555 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(197, 4));
    goto corral_source_split_7502;

  corral_source_split_7502:
    assume {:verifier.code 0} true;
    $i3556 := $load.i32($M.0, $p3555);
    goto corral_source_split_7503;

  corral_source_split_7503:
    assume {:verifier.code 0} true;
    $i3557 := $eq.i32($i3556, 0);
    goto corral_source_split_7504;

  corral_source_split_7504:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3557} true;
    goto $bb1583, $bb1584;

  $bb1584:
    assume !($i3557 == 1);
    assume {:verifier.code 0} true;
    goto $bb1585;

  $bb1585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1746} $p3558 := skb_end_pointer($p3551);
    goto corral_source_split_7508;

  corral_source_split_7508:
    assume {:verifier.code 0} true;
    $p3559 := $bitcast.ref.ref($p3558);
    goto corral_source_split_7509;

  corral_source_split_7509:
    assume {:verifier.code 0} true;
    $p3560 := $add.ref($add.ref($p3559, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_7510;

  corral_source_split_7510:
    assume {:verifier.code 0} true;
    $p3561 := $bitcast.ref.ref($p3560);
    goto corral_source_split_7511;

  corral_source_split_7511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1747} $p3562 := skb_frag_page($p3561);
    goto corral_source_split_7512;

  corral_source_split_7512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1748} get_page($p3562);
    goto corral_source_split_7513;

  corral_source_split_7513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1749} $p3563 := lowmem_page_address($p3562);
    goto corral_source_split_7514;

  corral_source_split_7514:
    assume {:verifier.code 0} true;
    $i3564 := $p2i.ref.i64($p3563);
    goto corral_source_split_7515;

  corral_source_split_7515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1750} gnttab_end_foreign_access($i3556, 0, $i3564);
    goto corral_source_split_7516;

  corral_source_split_7516:
    assume {:verifier.code 0} true;
    $p3566 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(197, 4));
    goto corral_source_split_7517;

  corral_source_split_7517:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3566, 0);
    goto corral_source_split_7518;

  corral_source_split_7518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1751} kfree_skb($p3551);
    goto corral_source_split_7519;

  corral_source_split_7519:
    assume {:verifier.code 0} true;
    goto $bb1586;

  $bb1586:
    assume {:verifier.code 0} true;
    goto $bb1587;

  $bb1587:
    assume {:verifier.code 0} true;
    $p3568 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(198, 8));
    goto corral_source_split_7521;

  corral_source_split_7521:
    assume {:verifier.code 0} true;
    $p3569 := $load.ref($M.0, $p3568);
    goto corral_source_split_7522;

  corral_source_split_7522:
    assume {:verifier.code 0} true;
    $i3570 := $p2i.ref.i64($p3569);
    goto corral_source_split_7523;

  corral_source_split_7523:
    assume {:verifier.code 0} true;
    $i3571 := $eq.i64($i3570, 0);
    goto corral_source_split_7524;

  corral_source_split_7524:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3571} true;
    goto $bb1588, $bb1589;

  $bb1589:
    assume !($i3571 == 1);
    assume {:verifier.code 0} true;
    goto $bb1590;

  $bb1590:
    assume {:verifier.code 0} true;
    $p3573 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(198, 4));
    goto corral_source_split_7528;

  corral_source_split_7528:
    assume {:verifier.code 0} true;
    $i3574 := $load.i32($M.0, $p3573);
    goto corral_source_split_7529;

  corral_source_split_7529:
    assume {:verifier.code 0} true;
    $i3575 := $eq.i32($i3574, 0);
    goto corral_source_split_7530;

  corral_source_split_7530:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3575} true;
    goto $bb1591, $bb1592;

  $bb1592:
    assume !($i3575 == 1);
    assume {:verifier.code 0} true;
    goto $bb1593;

  $bb1593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1752} $p3576 := skb_end_pointer($p3569);
    goto corral_source_split_7534;

  corral_source_split_7534:
    assume {:verifier.code 0} true;
    $p3577 := $bitcast.ref.ref($p3576);
    goto corral_source_split_7535;

  corral_source_split_7535:
    assume {:verifier.code 0} true;
    $p3578 := $add.ref($add.ref($p3577, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_7536;

  corral_source_split_7536:
    assume {:verifier.code 0} true;
    $p3579 := $bitcast.ref.ref($p3578);
    goto corral_source_split_7537;

  corral_source_split_7537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1753} $p3580 := skb_frag_page($p3579);
    goto corral_source_split_7538;

  corral_source_split_7538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1754} get_page($p3580);
    goto corral_source_split_7539;

  corral_source_split_7539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1755} $p3581 := lowmem_page_address($p3580);
    goto corral_source_split_7540;

  corral_source_split_7540:
    assume {:verifier.code 0} true;
    $i3582 := $p2i.ref.i64($p3581);
    goto corral_source_split_7541;

  corral_source_split_7541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1756} gnttab_end_foreign_access($i3574, 0, $i3582);
    goto corral_source_split_7542;

  corral_source_split_7542:
    assume {:verifier.code 0} true;
    $p3584 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(198, 4));
    goto corral_source_split_7543;

  corral_source_split_7543:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3584, 0);
    goto corral_source_split_7544;

  corral_source_split_7544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1757} kfree_skb($p3569);
    goto corral_source_split_7545;

  corral_source_split_7545:
    assume {:verifier.code 0} true;
    goto $bb1594;

  $bb1594:
    assume {:verifier.code 0} true;
    goto $bb1595;

  $bb1595:
    assume {:verifier.code 0} true;
    $p3586 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(199, 8));
    goto corral_source_split_7547;

  corral_source_split_7547:
    assume {:verifier.code 0} true;
    $p3587 := $load.ref($M.0, $p3586);
    goto corral_source_split_7548;

  corral_source_split_7548:
    assume {:verifier.code 0} true;
    $i3588 := $p2i.ref.i64($p3587);
    goto corral_source_split_7549;

  corral_source_split_7549:
    assume {:verifier.code 0} true;
    $i3589 := $eq.i64($i3588, 0);
    goto corral_source_split_7550;

  corral_source_split_7550:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3589} true;
    goto $bb1596, $bb1597;

  $bb1597:
    assume !($i3589 == 1);
    assume {:verifier.code 0} true;
    goto $bb1598;

  $bb1598:
    assume {:verifier.code 0} true;
    $p3591 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(199, 4));
    goto corral_source_split_7554;

  corral_source_split_7554:
    assume {:verifier.code 0} true;
    $i3592 := $load.i32($M.0, $p3591);
    goto corral_source_split_7555;

  corral_source_split_7555:
    assume {:verifier.code 0} true;
    $i3593 := $eq.i32($i3592, 0);
    goto corral_source_split_7556;

  corral_source_split_7556:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3593} true;
    goto $bb1599, $bb1600;

  $bb1600:
    assume !($i3593 == 1);
    assume {:verifier.code 0} true;
    goto $bb1601;

  $bb1601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1758} $p3594 := skb_end_pointer($p3587);
    goto corral_source_split_7560;

  corral_source_split_7560:
    assume {:verifier.code 0} true;
    $p3595 := $bitcast.ref.ref($p3594);
    goto corral_source_split_7561;

  corral_source_split_7561:
    assume {:verifier.code 0} true;
    $p3596 := $add.ref($add.ref($p3595, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_7562;

  corral_source_split_7562:
    assume {:verifier.code 0} true;
    $p3597 := $bitcast.ref.ref($p3596);
    goto corral_source_split_7563;

  corral_source_split_7563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1759} $p3598 := skb_frag_page($p3597);
    goto corral_source_split_7564;

  corral_source_split_7564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1760} get_page($p3598);
    goto corral_source_split_7565;

  corral_source_split_7565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1761} $p3599 := lowmem_page_address($p3598);
    goto corral_source_split_7566;

  corral_source_split_7566:
    assume {:verifier.code 0} true;
    $i3600 := $p2i.ref.i64($p3599);
    goto corral_source_split_7567;

  corral_source_split_7567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1762} gnttab_end_foreign_access($i3592, 0, $i3600);
    goto corral_source_split_7568;

  corral_source_split_7568:
    assume {:verifier.code 0} true;
    $p3602 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(199, 4));
    goto corral_source_split_7569;

  corral_source_split_7569:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3602, 0);
    goto corral_source_split_7570;

  corral_source_split_7570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1763} kfree_skb($p3587);
    goto corral_source_split_7571;

  corral_source_split_7571:
    assume {:verifier.code 0} true;
    goto $bb1602;

  $bb1602:
    assume {:verifier.code 0} true;
    goto $bb1603;

  $bb1603:
    assume {:verifier.code 0} true;
    $p3604 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(200, 8));
    goto corral_source_split_7573;

  corral_source_split_7573:
    assume {:verifier.code 0} true;
    $p3605 := $load.ref($M.0, $p3604);
    goto corral_source_split_7574;

  corral_source_split_7574:
    assume {:verifier.code 0} true;
    $i3606 := $p2i.ref.i64($p3605);
    goto corral_source_split_7575;

  corral_source_split_7575:
    assume {:verifier.code 0} true;
    $i3607 := $eq.i64($i3606, 0);
    goto corral_source_split_7576;

  corral_source_split_7576:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3607} true;
    goto $bb1604, $bb1605;

  $bb1605:
    assume !($i3607 == 1);
    assume {:verifier.code 0} true;
    goto $bb1606;

  $bb1606:
    assume {:verifier.code 0} true;
    $p3609 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(200, 4));
    goto corral_source_split_7580;

  corral_source_split_7580:
    assume {:verifier.code 0} true;
    $i3610 := $load.i32($M.0, $p3609);
    goto corral_source_split_7581;

  corral_source_split_7581:
    assume {:verifier.code 0} true;
    $i3611 := $eq.i32($i3610, 0);
    goto corral_source_split_7582;

  corral_source_split_7582:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3611} true;
    goto $bb1607, $bb1608;

  $bb1608:
    assume !($i3611 == 1);
    assume {:verifier.code 0} true;
    goto $bb1609;

  $bb1609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1764} $p3612 := skb_end_pointer($p3605);
    goto corral_source_split_7586;

  corral_source_split_7586:
    assume {:verifier.code 0} true;
    $p3613 := $bitcast.ref.ref($p3612);
    goto corral_source_split_7587;

  corral_source_split_7587:
    assume {:verifier.code 0} true;
    $p3614 := $add.ref($add.ref($p3613, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_7588;

  corral_source_split_7588:
    assume {:verifier.code 0} true;
    $p3615 := $bitcast.ref.ref($p3614);
    goto corral_source_split_7589;

  corral_source_split_7589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1765} $p3616 := skb_frag_page($p3615);
    goto corral_source_split_7590;

  corral_source_split_7590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1766} get_page($p3616);
    goto corral_source_split_7591;

  corral_source_split_7591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1767} $p3617 := lowmem_page_address($p3616);
    goto corral_source_split_7592;

  corral_source_split_7592:
    assume {:verifier.code 0} true;
    $i3618 := $p2i.ref.i64($p3617);
    goto corral_source_split_7593;

  corral_source_split_7593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1768} gnttab_end_foreign_access($i3610, 0, $i3618);
    goto corral_source_split_7594;

  corral_source_split_7594:
    assume {:verifier.code 0} true;
    $p3620 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(200, 4));
    goto corral_source_split_7595;

  corral_source_split_7595:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3620, 0);
    goto corral_source_split_7596;

  corral_source_split_7596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1769} kfree_skb($p3605);
    goto corral_source_split_7597;

  corral_source_split_7597:
    assume {:verifier.code 0} true;
    goto $bb1610;

  $bb1610:
    assume {:verifier.code 0} true;
    goto $bb1611;

  $bb1611:
    assume {:verifier.code 0} true;
    $p3622 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(201, 8));
    goto corral_source_split_7599;

  corral_source_split_7599:
    assume {:verifier.code 0} true;
    $p3623 := $load.ref($M.0, $p3622);
    goto corral_source_split_7600;

  corral_source_split_7600:
    assume {:verifier.code 0} true;
    $i3624 := $p2i.ref.i64($p3623);
    goto corral_source_split_7601;

  corral_source_split_7601:
    assume {:verifier.code 0} true;
    $i3625 := $eq.i64($i3624, 0);
    goto corral_source_split_7602;

  corral_source_split_7602:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3625} true;
    goto $bb1612, $bb1613;

  $bb1613:
    assume !($i3625 == 1);
    assume {:verifier.code 0} true;
    goto $bb1614;

  $bb1614:
    assume {:verifier.code 0} true;
    $p3627 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(201, 4));
    goto corral_source_split_7606;

  corral_source_split_7606:
    assume {:verifier.code 0} true;
    $i3628 := $load.i32($M.0, $p3627);
    goto corral_source_split_7607;

  corral_source_split_7607:
    assume {:verifier.code 0} true;
    $i3629 := $eq.i32($i3628, 0);
    goto corral_source_split_7608;

  corral_source_split_7608:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3629} true;
    goto $bb1615, $bb1616;

  $bb1616:
    assume !($i3629 == 1);
    assume {:verifier.code 0} true;
    goto $bb1617;

  $bb1617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1770} $p3630 := skb_end_pointer($p3623);
    goto corral_source_split_7612;

  corral_source_split_7612:
    assume {:verifier.code 0} true;
    $p3631 := $bitcast.ref.ref($p3630);
    goto corral_source_split_7613;

  corral_source_split_7613:
    assume {:verifier.code 0} true;
    $p3632 := $add.ref($add.ref($p3631, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_7614;

  corral_source_split_7614:
    assume {:verifier.code 0} true;
    $p3633 := $bitcast.ref.ref($p3632);
    goto corral_source_split_7615;

  corral_source_split_7615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1771} $p3634 := skb_frag_page($p3633);
    goto corral_source_split_7616;

  corral_source_split_7616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1772} get_page($p3634);
    goto corral_source_split_7617;

  corral_source_split_7617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1773} $p3635 := lowmem_page_address($p3634);
    goto corral_source_split_7618;

  corral_source_split_7618:
    assume {:verifier.code 0} true;
    $i3636 := $p2i.ref.i64($p3635);
    goto corral_source_split_7619;

  corral_source_split_7619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1774} gnttab_end_foreign_access($i3628, 0, $i3636);
    goto corral_source_split_7620;

  corral_source_split_7620:
    assume {:verifier.code 0} true;
    $p3638 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(201, 4));
    goto corral_source_split_7621;

  corral_source_split_7621:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3638, 0);
    goto corral_source_split_7622;

  corral_source_split_7622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1775} kfree_skb($p3623);
    goto corral_source_split_7623;

  corral_source_split_7623:
    assume {:verifier.code 0} true;
    goto $bb1618;

  $bb1618:
    assume {:verifier.code 0} true;
    goto $bb1619;

  $bb1619:
    assume {:verifier.code 0} true;
    $p3640 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(202, 8));
    goto corral_source_split_7625;

  corral_source_split_7625:
    assume {:verifier.code 0} true;
    $p3641 := $load.ref($M.0, $p3640);
    goto corral_source_split_7626;

  corral_source_split_7626:
    assume {:verifier.code 0} true;
    $i3642 := $p2i.ref.i64($p3641);
    goto corral_source_split_7627;

  corral_source_split_7627:
    assume {:verifier.code 0} true;
    $i3643 := $eq.i64($i3642, 0);
    goto corral_source_split_7628;

  corral_source_split_7628:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3643} true;
    goto $bb1620, $bb1621;

  $bb1621:
    assume !($i3643 == 1);
    assume {:verifier.code 0} true;
    goto $bb1622;

  $bb1622:
    assume {:verifier.code 0} true;
    $p3645 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(202, 4));
    goto corral_source_split_7632;

  corral_source_split_7632:
    assume {:verifier.code 0} true;
    $i3646 := $load.i32($M.0, $p3645);
    goto corral_source_split_7633;

  corral_source_split_7633:
    assume {:verifier.code 0} true;
    $i3647 := $eq.i32($i3646, 0);
    goto corral_source_split_7634;

  corral_source_split_7634:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3647} true;
    goto $bb1623, $bb1624;

  $bb1624:
    assume !($i3647 == 1);
    assume {:verifier.code 0} true;
    goto $bb1625;

  $bb1625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1776} $p3648 := skb_end_pointer($p3641);
    goto corral_source_split_7638;

  corral_source_split_7638:
    assume {:verifier.code 0} true;
    $p3649 := $bitcast.ref.ref($p3648);
    goto corral_source_split_7639;

  corral_source_split_7639:
    assume {:verifier.code 0} true;
    $p3650 := $add.ref($add.ref($p3649, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_7640;

  corral_source_split_7640:
    assume {:verifier.code 0} true;
    $p3651 := $bitcast.ref.ref($p3650);
    goto corral_source_split_7641;

  corral_source_split_7641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1777} $p3652 := skb_frag_page($p3651);
    goto corral_source_split_7642;

  corral_source_split_7642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1778} get_page($p3652);
    goto corral_source_split_7643;

  corral_source_split_7643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1779} $p3653 := lowmem_page_address($p3652);
    goto corral_source_split_7644;

  corral_source_split_7644:
    assume {:verifier.code 0} true;
    $i3654 := $p2i.ref.i64($p3653);
    goto corral_source_split_7645;

  corral_source_split_7645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1780} gnttab_end_foreign_access($i3646, 0, $i3654);
    goto corral_source_split_7646;

  corral_source_split_7646:
    assume {:verifier.code 0} true;
    $p3656 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(202, 4));
    goto corral_source_split_7647;

  corral_source_split_7647:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3656, 0);
    goto corral_source_split_7648;

  corral_source_split_7648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1781} kfree_skb($p3641);
    goto corral_source_split_7649;

  corral_source_split_7649:
    assume {:verifier.code 0} true;
    goto $bb1626;

  $bb1626:
    assume {:verifier.code 0} true;
    goto $bb1627;

  $bb1627:
    assume {:verifier.code 0} true;
    $p3658 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(203, 8));
    goto corral_source_split_7651;

  corral_source_split_7651:
    assume {:verifier.code 0} true;
    $p3659 := $load.ref($M.0, $p3658);
    goto corral_source_split_7652;

  corral_source_split_7652:
    assume {:verifier.code 0} true;
    $i3660 := $p2i.ref.i64($p3659);
    goto corral_source_split_7653;

  corral_source_split_7653:
    assume {:verifier.code 0} true;
    $i3661 := $eq.i64($i3660, 0);
    goto corral_source_split_7654;

  corral_source_split_7654:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3661} true;
    goto $bb1628, $bb1629;

  $bb1629:
    assume !($i3661 == 1);
    assume {:verifier.code 0} true;
    goto $bb1630;

  $bb1630:
    assume {:verifier.code 0} true;
    $p3663 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(203, 4));
    goto corral_source_split_7658;

  corral_source_split_7658:
    assume {:verifier.code 0} true;
    $i3664 := $load.i32($M.0, $p3663);
    goto corral_source_split_7659;

  corral_source_split_7659:
    assume {:verifier.code 0} true;
    $i3665 := $eq.i32($i3664, 0);
    goto corral_source_split_7660;

  corral_source_split_7660:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3665} true;
    goto $bb1631, $bb1632;

  $bb1632:
    assume !($i3665 == 1);
    assume {:verifier.code 0} true;
    goto $bb1633;

  $bb1633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1782} $p3666 := skb_end_pointer($p3659);
    goto corral_source_split_7664;

  corral_source_split_7664:
    assume {:verifier.code 0} true;
    $p3667 := $bitcast.ref.ref($p3666);
    goto corral_source_split_7665;

  corral_source_split_7665:
    assume {:verifier.code 0} true;
    $p3668 := $add.ref($add.ref($p3667, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_7666;

  corral_source_split_7666:
    assume {:verifier.code 0} true;
    $p3669 := $bitcast.ref.ref($p3668);
    goto corral_source_split_7667;

  corral_source_split_7667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1783} $p3670 := skb_frag_page($p3669);
    goto corral_source_split_7668;

  corral_source_split_7668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1784} get_page($p3670);
    goto corral_source_split_7669;

  corral_source_split_7669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1785} $p3671 := lowmem_page_address($p3670);
    goto corral_source_split_7670;

  corral_source_split_7670:
    assume {:verifier.code 0} true;
    $i3672 := $p2i.ref.i64($p3671);
    goto corral_source_split_7671;

  corral_source_split_7671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1786} gnttab_end_foreign_access($i3664, 0, $i3672);
    goto corral_source_split_7672;

  corral_source_split_7672:
    assume {:verifier.code 0} true;
    $p3674 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(203, 4));
    goto corral_source_split_7673;

  corral_source_split_7673:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3674, 0);
    goto corral_source_split_7674;

  corral_source_split_7674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1787} kfree_skb($p3659);
    goto corral_source_split_7675;

  corral_source_split_7675:
    assume {:verifier.code 0} true;
    goto $bb1634;

  $bb1634:
    assume {:verifier.code 0} true;
    goto $bb1635;

  $bb1635:
    assume {:verifier.code 0} true;
    $p3676 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(204, 8));
    goto corral_source_split_7677;

  corral_source_split_7677:
    assume {:verifier.code 0} true;
    $p3677 := $load.ref($M.0, $p3676);
    goto corral_source_split_7678;

  corral_source_split_7678:
    assume {:verifier.code 0} true;
    $i3678 := $p2i.ref.i64($p3677);
    goto corral_source_split_7679;

  corral_source_split_7679:
    assume {:verifier.code 0} true;
    $i3679 := $eq.i64($i3678, 0);
    goto corral_source_split_7680;

  corral_source_split_7680:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3679} true;
    goto $bb1636, $bb1637;

  $bb1637:
    assume !($i3679 == 1);
    assume {:verifier.code 0} true;
    goto $bb1638;

  $bb1638:
    assume {:verifier.code 0} true;
    $p3681 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(204, 4));
    goto corral_source_split_7684;

  corral_source_split_7684:
    assume {:verifier.code 0} true;
    $i3682 := $load.i32($M.0, $p3681);
    goto corral_source_split_7685;

  corral_source_split_7685:
    assume {:verifier.code 0} true;
    $i3683 := $eq.i32($i3682, 0);
    goto corral_source_split_7686;

  corral_source_split_7686:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3683} true;
    goto $bb1639, $bb1640;

  $bb1640:
    assume !($i3683 == 1);
    assume {:verifier.code 0} true;
    goto $bb1641;

  $bb1641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1788} $p3684 := skb_end_pointer($p3677);
    goto corral_source_split_7690;

  corral_source_split_7690:
    assume {:verifier.code 0} true;
    $p3685 := $bitcast.ref.ref($p3684);
    goto corral_source_split_7691;

  corral_source_split_7691:
    assume {:verifier.code 0} true;
    $p3686 := $add.ref($add.ref($p3685, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_7692;

  corral_source_split_7692:
    assume {:verifier.code 0} true;
    $p3687 := $bitcast.ref.ref($p3686);
    goto corral_source_split_7693;

  corral_source_split_7693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1789} $p3688 := skb_frag_page($p3687);
    goto corral_source_split_7694;

  corral_source_split_7694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1790} get_page($p3688);
    goto corral_source_split_7695;

  corral_source_split_7695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1791} $p3689 := lowmem_page_address($p3688);
    goto corral_source_split_7696;

  corral_source_split_7696:
    assume {:verifier.code 0} true;
    $i3690 := $p2i.ref.i64($p3689);
    goto corral_source_split_7697;

  corral_source_split_7697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1792} gnttab_end_foreign_access($i3682, 0, $i3690);
    goto corral_source_split_7698;

  corral_source_split_7698:
    assume {:verifier.code 0} true;
    $p3692 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(204, 4));
    goto corral_source_split_7699;

  corral_source_split_7699:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3692, 0);
    goto corral_source_split_7700;

  corral_source_split_7700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1793} kfree_skb($p3677);
    goto corral_source_split_7701;

  corral_source_split_7701:
    assume {:verifier.code 0} true;
    goto $bb1642;

  $bb1642:
    assume {:verifier.code 0} true;
    goto $bb1643;

  $bb1643:
    assume {:verifier.code 0} true;
    $p3694 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(205, 8));
    goto corral_source_split_7703;

  corral_source_split_7703:
    assume {:verifier.code 0} true;
    $p3695 := $load.ref($M.0, $p3694);
    goto corral_source_split_7704;

  corral_source_split_7704:
    assume {:verifier.code 0} true;
    $i3696 := $p2i.ref.i64($p3695);
    goto corral_source_split_7705;

  corral_source_split_7705:
    assume {:verifier.code 0} true;
    $i3697 := $eq.i64($i3696, 0);
    goto corral_source_split_7706;

  corral_source_split_7706:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3697} true;
    goto $bb1644, $bb1645;

  $bb1645:
    assume !($i3697 == 1);
    assume {:verifier.code 0} true;
    goto $bb1646;

  $bb1646:
    assume {:verifier.code 0} true;
    $p3699 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(205, 4));
    goto corral_source_split_7710;

  corral_source_split_7710:
    assume {:verifier.code 0} true;
    $i3700 := $load.i32($M.0, $p3699);
    goto corral_source_split_7711;

  corral_source_split_7711:
    assume {:verifier.code 0} true;
    $i3701 := $eq.i32($i3700, 0);
    goto corral_source_split_7712;

  corral_source_split_7712:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3701} true;
    goto $bb1647, $bb1648;

  $bb1648:
    assume !($i3701 == 1);
    assume {:verifier.code 0} true;
    goto $bb1649;

  $bb1649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1794} $p3702 := skb_end_pointer($p3695);
    goto corral_source_split_7716;

  corral_source_split_7716:
    assume {:verifier.code 0} true;
    $p3703 := $bitcast.ref.ref($p3702);
    goto corral_source_split_7717;

  corral_source_split_7717:
    assume {:verifier.code 0} true;
    $p3704 := $add.ref($add.ref($p3703, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_7718;

  corral_source_split_7718:
    assume {:verifier.code 0} true;
    $p3705 := $bitcast.ref.ref($p3704);
    goto corral_source_split_7719;

  corral_source_split_7719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1795} $p3706 := skb_frag_page($p3705);
    goto corral_source_split_7720;

  corral_source_split_7720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1796} get_page($p3706);
    goto corral_source_split_7721;

  corral_source_split_7721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1797} $p3707 := lowmem_page_address($p3706);
    goto corral_source_split_7722;

  corral_source_split_7722:
    assume {:verifier.code 0} true;
    $i3708 := $p2i.ref.i64($p3707);
    goto corral_source_split_7723;

  corral_source_split_7723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1798} gnttab_end_foreign_access($i3700, 0, $i3708);
    goto corral_source_split_7724;

  corral_source_split_7724:
    assume {:verifier.code 0} true;
    $p3710 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(205, 4));
    goto corral_source_split_7725;

  corral_source_split_7725:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3710, 0);
    goto corral_source_split_7726;

  corral_source_split_7726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1799} kfree_skb($p3695);
    goto corral_source_split_7727;

  corral_source_split_7727:
    assume {:verifier.code 0} true;
    goto $bb1650;

  $bb1650:
    assume {:verifier.code 0} true;
    goto $bb1651;

  $bb1651:
    assume {:verifier.code 0} true;
    $p3712 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(206, 8));
    goto corral_source_split_7729;

  corral_source_split_7729:
    assume {:verifier.code 0} true;
    $p3713 := $load.ref($M.0, $p3712);
    goto corral_source_split_7730;

  corral_source_split_7730:
    assume {:verifier.code 0} true;
    $i3714 := $p2i.ref.i64($p3713);
    goto corral_source_split_7731;

  corral_source_split_7731:
    assume {:verifier.code 0} true;
    $i3715 := $eq.i64($i3714, 0);
    goto corral_source_split_7732;

  corral_source_split_7732:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3715} true;
    goto $bb1652, $bb1653;

  $bb1653:
    assume !($i3715 == 1);
    assume {:verifier.code 0} true;
    goto $bb1654;

  $bb1654:
    assume {:verifier.code 0} true;
    $p3717 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(206, 4));
    goto corral_source_split_7736;

  corral_source_split_7736:
    assume {:verifier.code 0} true;
    $i3718 := $load.i32($M.0, $p3717);
    goto corral_source_split_7737;

  corral_source_split_7737:
    assume {:verifier.code 0} true;
    $i3719 := $eq.i32($i3718, 0);
    goto corral_source_split_7738;

  corral_source_split_7738:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3719} true;
    goto $bb1655, $bb1656;

  $bb1656:
    assume !($i3719 == 1);
    assume {:verifier.code 0} true;
    goto $bb1657;

  $bb1657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1800} $p3720 := skb_end_pointer($p3713);
    goto corral_source_split_7742;

  corral_source_split_7742:
    assume {:verifier.code 0} true;
    $p3721 := $bitcast.ref.ref($p3720);
    goto corral_source_split_7743;

  corral_source_split_7743:
    assume {:verifier.code 0} true;
    $p3722 := $add.ref($add.ref($p3721, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_7744;

  corral_source_split_7744:
    assume {:verifier.code 0} true;
    $p3723 := $bitcast.ref.ref($p3722);
    goto corral_source_split_7745;

  corral_source_split_7745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1801} $p3724 := skb_frag_page($p3723);
    goto corral_source_split_7746;

  corral_source_split_7746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1802} get_page($p3724);
    goto corral_source_split_7747;

  corral_source_split_7747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1803} $p3725 := lowmem_page_address($p3724);
    goto corral_source_split_7748;

  corral_source_split_7748:
    assume {:verifier.code 0} true;
    $i3726 := $p2i.ref.i64($p3725);
    goto corral_source_split_7749;

  corral_source_split_7749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1804} gnttab_end_foreign_access($i3718, 0, $i3726);
    goto corral_source_split_7750;

  corral_source_split_7750:
    assume {:verifier.code 0} true;
    $p3728 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(206, 4));
    goto corral_source_split_7751;

  corral_source_split_7751:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3728, 0);
    goto corral_source_split_7752;

  corral_source_split_7752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1805} kfree_skb($p3713);
    goto corral_source_split_7753;

  corral_source_split_7753:
    assume {:verifier.code 0} true;
    goto $bb1658;

  $bb1658:
    assume {:verifier.code 0} true;
    goto $bb1659;

  $bb1659:
    assume {:verifier.code 0} true;
    $p3730 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(207, 8));
    goto corral_source_split_7755;

  corral_source_split_7755:
    assume {:verifier.code 0} true;
    $p3731 := $load.ref($M.0, $p3730);
    goto corral_source_split_7756;

  corral_source_split_7756:
    assume {:verifier.code 0} true;
    $i3732 := $p2i.ref.i64($p3731);
    goto corral_source_split_7757;

  corral_source_split_7757:
    assume {:verifier.code 0} true;
    $i3733 := $eq.i64($i3732, 0);
    goto corral_source_split_7758;

  corral_source_split_7758:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3733} true;
    goto $bb1660, $bb1661;

  $bb1661:
    assume !($i3733 == 1);
    assume {:verifier.code 0} true;
    goto $bb1662;

  $bb1662:
    assume {:verifier.code 0} true;
    $p3735 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(207, 4));
    goto corral_source_split_7762;

  corral_source_split_7762:
    assume {:verifier.code 0} true;
    $i3736 := $load.i32($M.0, $p3735);
    goto corral_source_split_7763;

  corral_source_split_7763:
    assume {:verifier.code 0} true;
    $i3737 := $eq.i32($i3736, 0);
    goto corral_source_split_7764;

  corral_source_split_7764:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3737} true;
    goto $bb1663, $bb1664;

  $bb1664:
    assume !($i3737 == 1);
    assume {:verifier.code 0} true;
    goto $bb1665;

  $bb1665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1806} $p3738 := skb_end_pointer($p3731);
    goto corral_source_split_7768;

  corral_source_split_7768:
    assume {:verifier.code 0} true;
    $p3739 := $bitcast.ref.ref($p3738);
    goto corral_source_split_7769;

  corral_source_split_7769:
    assume {:verifier.code 0} true;
    $p3740 := $add.ref($add.ref($p3739, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_7770;

  corral_source_split_7770:
    assume {:verifier.code 0} true;
    $p3741 := $bitcast.ref.ref($p3740);
    goto corral_source_split_7771;

  corral_source_split_7771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1807} $p3742 := skb_frag_page($p3741);
    goto corral_source_split_7772;

  corral_source_split_7772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1808} get_page($p3742);
    goto corral_source_split_7773;

  corral_source_split_7773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1809} $p3743 := lowmem_page_address($p3742);
    goto corral_source_split_7774;

  corral_source_split_7774:
    assume {:verifier.code 0} true;
    $i3744 := $p2i.ref.i64($p3743);
    goto corral_source_split_7775;

  corral_source_split_7775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1810} gnttab_end_foreign_access($i3736, 0, $i3744);
    goto corral_source_split_7776;

  corral_source_split_7776:
    assume {:verifier.code 0} true;
    $p3746 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(207, 4));
    goto corral_source_split_7777;

  corral_source_split_7777:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3746, 0);
    goto corral_source_split_7778;

  corral_source_split_7778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1811} kfree_skb($p3731);
    goto corral_source_split_7779;

  corral_source_split_7779:
    assume {:verifier.code 0} true;
    goto $bb1666;

  $bb1666:
    assume {:verifier.code 0} true;
    goto $bb1667;

  $bb1667:
    assume {:verifier.code 0} true;
    $p3748 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(208, 8));
    goto corral_source_split_7781;

  corral_source_split_7781:
    assume {:verifier.code 0} true;
    $p3749 := $load.ref($M.0, $p3748);
    goto corral_source_split_7782;

  corral_source_split_7782:
    assume {:verifier.code 0} true;
    $i3750 := $p2i.ref.i64($p3749);
    goto corral_source_split_7783;

  corral_source_split_7783:
    assume {:verifier.code 0} true;
    $i3751 := $eq.i64($i3750, 0);
    goto corral_source_split_7784;

  corral_source_split_7784:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3751} true;
    goto $bb1668, $bb1669;

  $bb1669:
    assume !($i3751 == 1);
    assume {:verifier.code 0} true;
    goto $bb1670;

  $bb1670:
    assume {:verifier.code 0} true;
    $p3753 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(208, 4));
    goto corral_source_split_7788;

  corral_source_split_7788:
    assume {:verifier.code 0} true;
    $i3754 := $load.i32($M.0, $p3753);
    goto corral_source_split_7789;

  corral_source_split_7789:
    assume {:verifier.code 0} true;
    $i3755 := $eq.i32($i3754, 0);
    goto corral_source_split_7790;

  corral_source_split_7790:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3755} true;
    goto $bb1671, $bb1672;

  $bb1672:
    assume !($i3755 == 1);
    assume {:verifier.code 0} true;
    goto $bb1673;

  $bb1673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1812} $p3756 := skb_end_pointer($p3749);
    goto corral_source_split_7794;

  corral_source_split_7794:
    assume {:verifier.code 0} true;
    $p3757 := $bitcast.ref.ref($p3756);
    goto corral_source_split_7795;

  corral_source_split_7795:
    assume {:verifier.code 0} true;
    $p3758 := $add.ref($add.ref($p3757, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_7796;

  corral_source_split_7796:
    assume {:verifier.code 0} true;
    $p3759 := $bitcast.ref.ref($p3758);
    goto corral_source_split_7797;

  corral_source_split_7797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1813} $p3760 := skb_frag_page($p3759);
    goto corral_source_split_7798;

  corral_source_split_7798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1814} get_page($p3760);
    goto corral_source_split_7799;

  corral_source_split_7799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1815} $p3761 := lowmem_page_address($p3760);
    goto corral_source_split_7800;

  corral_source_split_7800:
    assume {:verifier.code 0} true;
    $i3762 := $p2i.ref.i64($p3761);
    goto corral_source_split_7801;

  corral_source_split_7801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1816} gnttab_end_foreign_access($i3754, 0, $i3762);
    goto corral_source_split_7802;

  corral_source_split_7802:
    assume {:verifier.code 0} true;
    $p3764 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(208, 4));
    goto corral_source_split_7803;

  corral_source_split_7803:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3764, 0);
    goto corral_source_split_7804;

  corral_source_split_7804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1817} kfree_skb($p3749);
    goto corral_source_split_7805;

  corral_source_split_7805:
    assume {:verifier.code 0} true;
    goto $bb1674;

  $bb1674:
    assume {:verifier.code 0} true;
    goto $bb1675;

  $bb1675:
    assume {:verifier.code 0} true;
    $p3766 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(209, 8));
    goto corral_source_split_7807;

  corral_source_split_7807:
    assume {:verifier.code 0} true;
    $p3767 := $load.ref($M.0, $p3766);
    goto corral_source_split_7808;

  corral_source_split_7808:
    assume {:verifier.code 0} true;
    $i3768 := $p2i.ref.i64($p3767);
    goto corral_source_split_7809;

  corral_source_split_7809:
    assume {:verifier.code 0} true;
    $i3769 := $eq.i64($i3768, 0);
    goto corral_source_split_7810;

  corral_source_split_7810:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3769} true;
    goto $bb1676, $bb1677;

  $bb1677:
    assume !($i3769 == 1);
    assume {:verifier.code 0} true;
    goto $bb1678;

  $bb1678:
    assume {:verifier.code 0} true;
    $p3771 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(209, 4));
    goto corral_source_split_7814;

  corral_source_split_7814:
    assume {:verifier.code 0} true;
    $i3772 := $load.i32($M.0, $p3771);
    goto corral_source_split_7815;

  corral_source_split_7815:
    assume {:verifier.code 0} true;
    $i3773 := $eq.i32($i3772, 0);
    goto corral_source_split_7816;

  corral_source_split_7816:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3773} true;
    goto $bb1679, $bb1680;

  $bb1680:
    assume !($i3773 == 1);
    assume {:verifier.code 0} true;
    goto $bb1681;

  $bb1681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1818} $p3774 := skb_end_pointer($p3767);
    goto corral_source_split_7820;

  corral_source_split_7820:
    assume {:verifier.code 0} true;
    $p3775 := $bitcast.ref.ref($p3774);
    goto corral_source_split_7821;

  corral_source_split_7821:
    assume {:verifier.code 0} true;
    $p3776 := $add.ref($add.ref($p3775, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_7822;

  corral_source_split_7822:
    assume {:verifier.code 0} true;
    $p3777 := $bitcast.ref.ref($p3776);
    goto corral_source_split_7823;

  corral_source_split_7823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1819} $p3778 := skb_frag_page($p3777);
    goto corral_source_split_7824;

  corral_source_split_7824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1820} get_page($p3778);
    goto corral_source_split_7825;

  corral_source_split_7825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1821} $p3779 := lowmem_page_address($p3778);
    goto corral_source_split_7826;

  corral_source_split_7826:
    assume {:verifier.code 0} true;
    $i3780 := $p2i.ref.i64($p3779);
    goto corral_source_split_7827;

  corral_source_split_7827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1822} gnttab_end_foreign_access($i3772, 0, $i3780);
    goto corral_source_split_7828;

  corral_source_split_7828:
    assume {:verifier.code 0} true;
    $p3782 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(209, 4));
    goto corral_source_split_7829;

  corral_source_split_7829:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3782, 0);
    goto corral_source_split_7830;

  corral_source_split_7830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1823} kfree_skb($p3767);
    goto corral_source_split_7831;

  corral_source_split_7831:
    assume {:verifier.code 0} true;
    goto $bb1682;

  $bb1682:
    assume {:verifier.code 0} true;
    goto $bb1683;

  $bb1683:
    assume {:verifier.code 0} true;
    $p3784 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(210, 8));
    goto corral_source_split_7833;

  corral_source_split_7833:
    assume {:verifier.code 0} true;
    $p3785 := $load.ref($M.0, $p3784);
    goto corral_source_split_7834;

  corral_source_split_7834:
    assume {:verifier.code 0} true;
    $i3786 := $p2i.ref.i64($p3785);
    goto corral_source_split_7835;

  corral_source_split_7835:
    assume {:verifier.code 0} true;
    $i3787 := $eq.i64($i3786, 0);
    goto corral_source_split_7836;

  corral_source_split_7836:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3787} true;
    goto $bb1684, $bb1685;

  $bb1685:
    assume !($i3787 == 1);
    assume {:verifier.code 0} true;
    goto $bb1686;

  $bb1686:
    assume {:verifier.code 0} true;
    $p3789 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(210, 4));
    goto corral_source_split_7840;

  corral_source_split_7840:
    assume {:verifier.code 0} true;
    $i3790 := $load.i32($M.0, $p3789);
    goto corral_source_split_7841;

  corral_source_split_7841:
    assume {:verifier.code 0} true;
    $i3791 := $eq.i32($i3790, 0);
    goto corral_source_split_7842;

  corral_source_split_7842:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3791} true;
    goto $bb1687, $bb1688;

  $bb1688:
    assume !($i3791 == 1);
    assume {:verifier.code 0} true;
    goto $bb1689;

  $bb1689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1824} $p3792 := skb_end_pointer($p3785);
    goto corral_source_split_7846;

  corral_source_split_7846:
    assume {:verifier.code 0} true;
    $p3793 := $bitcast.ref.ref($p3792);
    goto corral_source_split_7847;

  corral_source_split_7847:
    assume {:verifier.code 0} true;
    $p3794 := $add.ref($add.ref($p3793, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_7848;

  corral_source_split_7848:
    assume {:verifier.code 0} true;
    $p3795 := $bitcast.ref.ref($p3794);
    goto corral_source_split_7849;

  corral_source_split_7849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1825} $p3796 := skb_frag_page($p3795);
    goto corral_source_split_7850;

  corral_source_split_7850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1826} get_page($p3796);
    goto corral_source_split_7851;

  corral_source_split_7851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1827} $p3797 := lowmem_page_address($p3796);
    goto corral_source_split_7852;

  corral_source_split_7852:
    assume {:verifier.code 0} true;
    $i3798 := $p2i.ref.i64($p3797);
    goto corral_source_split_7853;

  corral_source_split_7853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1828} gnttab_end_foreign_access($i3790, 0, $i3798);
    goto corral_source_split_7854;

  corral_source_split_7854:
    assume {:verifier.code 0} true;
    $p3800 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(210, 4));
    goto corral_source_split_7855;

  corral_source_split_7855:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3800, 0);
    goto corral_source_split_7856;

  corral_source_split_7856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1829} kfree_skb($p3785);
    goto corral_source_split_7857;

  corral_source_split_7857:
    assume {:verifier.code 0} true;
    goto $bb1690;

  $bb1690:
    assume {:verifier.code 0} true;
    goto $bb1691;

  $bb1691:
    assume {:verifier.code 0} true;
    $p3802 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(211, 8));
    goto corral_source_split_7859;

  corral_source_split_7859:
    assume {:verifier.code 0} true;
    $p3803 := $load.ref($M.0, $p3802);
    goto corral_source_split_7860;

  corral_source_split_7860:
    assume {:verifier.code 0} true;
    $i3804 := $p2i.ref.i64($p3803);
    goto corral_source_split_7861;

  corral_source_split_7861:
    assume {:verifier.code 0} true;
    $i3805 := $eq.i64($i3804, 0);
    goto corral_source_split_7862;

  corral_source_split_7862:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3805} true;
    goto $bb1692, $bb1693;

  $bb1693:
    assume !($i3805 == 1);
    assume {:verifier.code 0} true;
    goto $bb1694;

  $bb1694:
    assume {:verifier.code 0} true;
    $p3807 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(211, 4));
    goto corral_source_split_7866;

  corral_source_split_7866:
    assume {:verifier.code 0} true;
    $i3808 := $load.i32($M.0, $p3807);
    goto corral_source_split_7867;

  corral_source_split_7867:
    assume {:verifier.code 0} true;
    $i3809 := $eq.i32($i3808, 0);
    goto corral_source_split_7868;

  corral_source_split_7868:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3809} true;
    goto $bb1695, $bb1696;

  $bb1696:
    assume !($i3809 == 1);
    assume {:verifier.code 0} true;
    goto $bb1697;

  $bb1697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1830} $p3810 := skb_end_pointer($p3803);
    goto corral_source_split_7872;

  corral_source_split_7872:
    assume {:verifier.code 0} true;
    $p3811 := $bitcast.ref.ref($p3810);
    goto corral_source_split_7873;

  corral_source_split_7873:
    assume {:verifier.code 0} true;
    $p3812 := $add.ref($add.ref($p3811, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_7874;

  corral_source_split_7874:
    assume {:verifier.code 0} true;
    $p3813 := $bitcast.ref.ref($p3812);
    goto corral_source_split_7875;

  corral_source_split_7875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1831} $p3814 := skb_frag_page($p3813);
    goto corral_source_split_7876;

  corral_source_split_7876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1832} get_page($p3814);
    goto corral_source_split_7877;

  corral_source_split_7877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1833} $p3815 := lowmem_page_address($p3814);
    goto corral_source_split_7878;

  corral_source_split_7878:
    assume {:verifier.code 0} true;
    $i3816 := $p2i.ref.i64($p3815);
    goto corral_source_split_7879;

  corral_source_split_7879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1834} gnttab_end_foreign_access($i3808, 0, $i3816);
    goto corral_source_split_7880;

  corral_source_split_7880:
    assume {:verifier.code 0} true;
    $p3818 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(211, 4));
    goto corral_source_split_7881;

  corral_source_split_7881:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3818, 0);
    goto corral_source_split_7882;

  corral_source_split_7882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1835} kfree_skb($p3803);
    goto corral_source_split_7883;

  corral_source_split_7883:
    assume {:verifier.code 0} true;
    goto $bb1698;

  $bb1698:
    assume {:verifier.code 0} true;
    goto $bb1699;

  $bb1699:
    assume {:verifier.code 0} true;
    $p3820 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(212, 8));
    goto corral_source_split_7885;

  corral_source_split_7885:
    assume {:verifier.code 0} true;
    $p3821 := $load.ref($M.0, $p3820);
    goto corral_source_split_7886;

  corral_source_split_7886:
    assume {:verifier.code 0} true;
    $i3822 := $p2i.ref.i64($p3821);
    goto corral_source_split_7887;

  corral_source_split_7887:
    assume {:verifier.code 0} true;
    $i3823 := $eq.i64($i3822, 0);
    goto corral_source_split_7888;

  corral_source_split_7888:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3823} true;
    goto $bb1700, $bb1701;

  $bb1701:
    assume !($i3823 == 1);
    assume {:verifier.code 0} true;
    goto $bb1702;

  $bb1702:
    assume {:verifier.code 0} true;
    $p3825 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(212, 4));
    goto corral_source_split_7892;

  corral_source_split_7892:
    assume {:verifier.code 0} true;
    $i3826 := $load.i32($M.0, $p3825);
    goto corral_source_split_7893;

  corral_source_split_7893:
    assume {:verifier.code 0} true;
    $i3827 := $eq.i32($i3826, 0);
    goto corral_source_split_7894;

  corral_source_split_7894:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3827} true;
    goto $bb1703, $bb1704;

  $bb1704:
    assume !($i3827 == 1);
    assume {:verifier.code 0} true;
    goto $bb1705;

  $bb1705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1836} $p3828 := skb_end_pointer($p3821);
    goto corral_source_split_7898;

  corral_source_split_7898:
    assume {:verifier.code 0} true;
    $p3829 := $bitcast.ref.ref($p3828);
    goto corral_source_split_7899;

  corral_source_split_7899:
    assume {:verifier.code 0} true;
    $p3830 := $add.ref($add.ref($p3829, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_7900;

  corral_source_split_7900:
    assume {:verifier.code 0} true;
    $p3831 := $bitcast.ref.ref($p3830);
    goto corral_source_split_7901;

  corral_source_split_7901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1837} $p3832 := skb_frag_page($p3831);
    goto corral_source_split_7902;

  corral_source_split_7902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1838} get_page($p3832);
    goto corral_source_split_7903;

  corral_source_split_7903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1839} $p3833 := lowmem_page_address($p3832);
    goto corral_source_split_7904;

  corral_source_split_7904:
    assume {:verifier.code 0} true;
    $i3834 := $p2i.ref.i64($p3833);
    goto corral_source_split_7905;

  corral_source_split_7905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1840} gnttab_end_foreign_access($i3826, 0, $i3834);
    goto corral_source_split_7906;

  corral_source_split_7906:
    assume {:verifier.code 0} true;
    $p3836 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(212, 4));
    goto corral_source_split_7907;

  corral_source_split_7907:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3836, 0);
    goto corral_source_split_7908;

  corral_source_split_7908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1841} kfree_skb($p3821);
    goto corral_source_split_7909;

  corral_source_split_7909:
    assume {:verifier.code 0} true;
    goto $bb1706;

  $bb1706:
    assume {:verifier.code 0} true;
    goto $bb1707;

  $bb1707:
    assume {:verifier.code 0} true;
    $p3838 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(213, 8));
    goto corral_source_split_7911;

  corral_source_split_7911:
    assume {:verifier.code 0} true;
    $p3839 := $load.ref($M.0, $p3838);
    goto corral_source_split_7912;

  corral_source_split_7912:
    assume {:verifier.code 0} true;
    $i3840 := $p2i.ref.i64($p3839);
    goto corral_source_split_7913;

  corral_source_split_7913:
    assume {:verifier.code 0} true;
    $i3841 := $eq.i64($i3840, 0);
    goto corral_source_split_7914;

  corral_source_split_7914:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3841} true;
    goto $bb1708, $bb1709;

  $bb1709:
    assume !($i3841 == 1);
    assume {:verifier.code 0} true;
    goto $bb1710;

  $bb1710:
    assume {:verifier.code 0} true;
    $p3843 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(213, 4));
    goto corral_source_split_7918;

  corral_source_split_7918:
    assume {:verifier.code 0} true;
    $i3844 := $load.i32($M.0, $p3843);
    goto corral_source_split_7919;

  corral_source_split_7919:
    assume {:verifier.code 0} true;
    $i3845 := $eq.i32($i3844, 0);
    goto corral_source_split_7920;

  corral_source_split_7920:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3845} true;
    goto $bb1711, $bb1712;

  $bb1712:
    assume !($i3845 == 1);
    assume {:verifier.code 0} true;
    goto $bb1713;

  $bb1713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1842} $p3846 := skb_end_pointer($p3839);
    goto corral_source_split_7924;

  corral_source_split_7924:
    assume {:verifier.code 0} true;
    $p3847 := $bitcast.ref.ref($p3846);
    goto corral_source_split_7925;

  corral_source_split_7925:
    assume {:verifier.code 0} true;
    $p3848 := $add.ref($add.ref($p3847, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_7926;

  corral_source_split_7926:
    assume {:verifier.code 0} true;
    $p3849 := $bitcast.ref.ref($p3848);
    goto corral_source_split_7927;

  corral_source_split_7927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1843} $p3850 := skb_frag_page($p3849);
    goto corral_source_split_7928;

  corral_source_split_7928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1844} get_page($p3850);
    goto corral_source_split_7929;

  corral_source_split_7929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1845} $p3851 := lowmem_page_address($p3850);
    goto corral_source_split_7930;

  corral_source_split_7930:
    assume {:verifier.code 0} true;
    $i3852 := $p2i.ref.i64($p3851);
    goto corral_source_split_7931;

  corral_source_split_7931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1846} gnttab_end_foreign_access($i3844, 0, $i3852);
    goto corral_source_split_7932;

  corral_source_split_7932:
    assume {:verifier.code 0} true;
    $p3854 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(213, 4));
    goto corral_source_split_7933;

  corral_source_split_7933:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3854, 0);
    goto corral_source_split_7934;

  corral_source_split_7934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1847} kfree_skb($p3839);
    goto corral_source_split_7935;

  corral_source_split_7935:
    assume {:verifier.code 0} true;
    goto $bb1714;

  $bb1714:
    assume {:verifier.code 0} true;
    goto $bb1715;

  $bb1715:
    assume {:verifier.code 0} true;
    $p3856 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(214, 8));
    goto corral_source_split_7937;

  corral_source_split_7937:
    assume {:verifier.code 0} true;
    $p3857 := $load.ref($M.0, $p3856);
    goto corral_source_split_7938;

  corral_source_split_7938:
    assume {:verifier.code 0} true;
    $i3858 := $p2i.ref.i64($p3857);
    goto corral_source_split_7939;

  corral_source_split_7939:
    assume {:verifier.code 0} true;
    $i3859 := $eq.i64($i3858, 0);
    goto corral_source_split_7940;

  corral_source_split_7940:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3859} true;
    goto $bb1716, $bb1717;

  $bb1717:
    assume !($i3859 == 1);
    assume {:verifier.code 0} true;
    goto $bb1718;

  $bb1718:
    assume {:verifier.code 0} true;
    $p3861 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(214, 4));
    goto corral_source_split_7944;

  corral_source_split_7944:
    assume {:verifier.code 0} true;
    $i3862 := $load.i32($M.0, $p3861);
    goto corral_source_split_7945;

  corral_source_split_7945:
    assume {:verifier.code 0} true;
    $i3863 := $eq.i32($i3862, 0);
    goto corral_source_split_7946;

  corral_source_split_7946:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3863} true;
    goto $bb1719, $bb1720;

  $bb1720:
    assume !($i3863 == 1);
    assume {:verifier.code 0} true;
    goto $bb1721;

  $bb1721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1848} $p3864 := skb_end_pointer($p3857);
    goto corral_source_split_7950;

  corral_source_split_7950:
    assume {:verifier.code 0} true;
    $p3865 := $bitcast.ref.ref($p3864);
    goto corral_source_split_7951;

  corral_source_split_7951:
    assume {:verifier.code 0} true;
    $p3866 := $add.ref($add.ref($p3865, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_7952;

  corral_source_split_7952:
    assume {:verifier.code 0} true;
    $p3867 := $bitcast.ref.ref($p3866);
    goto corral_source_split_7953;

  corral_source_split_7953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1849} $p3868 := skb_frag_page($p3867);
    goto corral_source_split_7954;

  corral_source_split_7954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1850} get_page($p3868);
    goto corral_source_split_7955;

  corral_source_split_7955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1851} $p3869 := lowmem_page_address($p3868);
    goto corral_source_split_7956;

  corral_source_split_7956:
    assume {:verifier.code 0} true;
    $i3870 := $p2i.ref.i64($p3869);
    goto corral_source_split_7957;

  corral_source_split_7957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1852} gnttab_end_foreign_access($i3862, 0, $i3870);
    goto corral_source_split_7958;

  corral_source_split_7958:
    assume {:verifier.code 0} true;
    $p3872 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(214, 4));
    goto corral_source_split_7959;

  corral_source_split_7959:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3872, 0);
    goto corral_source_split_7960;

  corral_source_split_7960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1853} kfree_skb($p3857);
    goto corral_source_split_7961;

  corral_source_split_7961:
    assume {:verifier.code 0} true;
    goto $bb1722;

  $bb1722:
    assume {:verifier.code 0} true;
    goto $bb1723;

  $bb1723:
    assume {:verifier.code 0} true;
    $p3874 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(215, 8));
    goto corral_source_split_7963;

  corral_source_split_7963:
    assume {:verifier.code 0} true;
    $p3875 := $load.ref($M.0, $p3874);
    goto corral_source_split_7964;

  corral_source_split_7964:
    assume {:verifier.code 0} true;
    $i3876 := $p2i.ref.i64($p3875);
    goto corral_source_split_7965;

  corral_source_split_7965:
    assume {:verifier.code 0} true;
    $i3877 := $eq.i64($i3876, 0);
    goto corral_source_split_7966;

  corral_source_split_7966:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3877} true;
    goto $bb1724, $bb1725;

  $bb1725:
    assume !($i3877 == 1);
    assume {:verifier.code 0} true;
    goto $bb1726;

  $bb1726:
    assume {:verifier.code 0} true;
    $p3879 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(215, 4));
    goto corral_source_split_7970;

  corral_source_split_7970:
    assume {:verifier.code 0} true;
    $i3880 := $load.i32($M.0, $p3879);
    goto corral_source_split_7971;

  corral_source_split_7971:
    assume {:verifier.code 0} true;
    $i3881 := $eq.i32($i3880, 0);
    goto corral_source_split_7972;

  corral_source_split_7972:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3881} true;
    goto $bb1727, $bb1728;

  $bb1728:
    assume !($i3881 == 1);
    assume {:verifier.code 0} true;
    goto $bb1729;

  $bb1729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1854} $p3882 := skb_end_pointer($p3875);
    goto corral_source_split_7976;

  corral_source_split_7976:
    assume {:verifier.code 0} true;
    $p3883 := $bitcast.ref.ref($p3882);
    goto corral_source_split_7977;

  corral_source_split_7977:
    assume {:verifier.code 0} true;
    $p3884 := $add.ref($add.ref($p3883, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_7978;

  corral_source_split_7978:
    assume {:verifier.code 0} true;
    $p3885 := $bitcast.ref.ref($p3884);
    goto corral_source_split_7979;

  corral_source_split_7979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1855} $p3886 := skb_frag_page($p3885);
    goto corral_source_split_7980;

  corral_source_split_7980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1856} get_page($p3886);
    goto corral_source_split_7981;

  corral_source_split_7981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1857} $p3887 := lowmem_page_address($p3886);
    goto corral_source_split_7982;

  corral_source_split_7982:
    assume {:verifier.code 0} true;
    $i3888 := $p2i.ref.i64($p3887);
    goto corral_source_split_7983;

  corral_source_split_7983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1858} gnttab_end_foreign_access($i3880, 0, $i3888);
    goto corral_source_split_7984;

  corral_source_split_7984:
    assume {:verifier.code 0} true;
    $p3890 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(215, 4));
    goto corral_source_split_7985;

  corral_source_split_7985:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3890, 0);
    goto corral_source_split_7986;

  corral_source_split_7986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1859} kfree_skb($p3875);
    goto corral_source_split_7987;

  corral_source_split_7987:
    assume {:verifier.code 0} true;
    goto $bb1730;

  $bb1730:
    assume {:verifier.code 0} true;
    goto $bb1731;

  $bb1731:
    assume {:verifier.code 0} true;
    $p3892 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(216, 8));
    goto corral_source_split_7989;

  corral_source_split_7989:
    assume {:verifier.code 0} true;
    $p3893 := $load.ref($M.0, $p3892);
    goto corral_source_split_7990;

  corral_source_split_7990:
    assume {:verifier.code 0} true;
    $i3894 := $p2i.ref.i64($p3893);
    goto corral_source_split_7991;

  corral_source_split_7991:
    assume {:verifier.code 0} true;
    $i3895 := $eq.i64($i3894, 0);
    goto corral_source_split_7992;

  corral_source_split_7992:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3895} true;
    goto $bb1732, $bb1733;

  $bb1733:
    assume !($i3895 == 1);
    assume {:verifier.code 0} true;
    goto $bb1734;

  $bb1734:
    assume {:verifier.code 0} true;
    $p3897 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(216, 4));
    goto corral_source_split_7996;

  corral_source_split_7996:
    assume {:verifier.code 0} true;
    $i3898 := $load.i32($M.0, $p3897);
    goto corral_source_split_7997;

  corral_source_split_7997:
    assume {:verifier.code 0} true;
    $i3899 := $eq.i32($i3898, 0);
    goto corral_source_split_7998;

  corral_source_split_7998:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3899} true;
    goto $bb1735, $bb1736;

  $bb1736:
    assume !($i3899 == 1);
    assume {:verifier.code 0} true;
    goto $bb1737;

  $bb1737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1860} $p3900 := skb_end_pointer($p3893);
    goto corral_source_split_8002;

  corral_source_split_8002:
    assume {:verifier.code 0} true;
    $p3901 := $bitcast.ref.ref($p3900);
    goto corral_source_split_8003;

  corral_source_split_8003:
    assume {:verifier.code 0} true;
    $p3902 := $add.ref($add.ref($p3901, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_8004;

  corral_source_split_8004:
    assume {:verifier.code 0} true;
    $p3903 := $bitcast.ref.ref($p3902);
    goto corral_source_split_8005;

  corral_source_split_8005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1861} $p3904 := skb_frag_page($p3903);
    goto corral_source_split_8006;

  corral_source_split_8006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1862} get_page($p3904);
    goto corral_source_split_8007;

  corral_source_split_8007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1863} $p3905 := lowmem_page_address($p3904);
    goto corral_source_split_8008;

  corral_source_split_8008:
    assume {:verifier.code 0} true;
    $i3906 := $p2i.ref.i64($p3905);
    goto corral_source_split_8009;

  corral_source_split_8009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1864} gnttab_end_foreign_access($i3898, 0, $i3906);
    goto corral_source_split_8010;

  corral_source_split_8010:
    assume {:verifier.code 0} true;
    $p3908 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(216, 4));
    goto corral_source_split_8011;

  corral_source_split_8011:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3908, 0);
    goto corral_source_split_8012;

  corral_source_split_8012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1865} kfree_skb($p3893);
    goto corral_source_split_8013;

  corral_source_split_8013:
    assume {:verifier.code 0} true;
    goto $bb1738;

  $bb1738:
    assume {:verifier.code 0} true;
    goto $bb1739;

  $bb1739:
    assume {:verifier.code 0} true;
    $p3910 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(217, 8));
    goto corral_source_split_8015;

  corral_source_split_8015:
    assume {:verifier.code 0} true;
    $p3911 := $load.ref($M.0, $p3910);
    goto corral_source_split_8016;

  corral_source_split_8016:
    assume {:verifier.code 0} true;
    $i3912 := $p2i.ref.i64($p3911);
    goto corral_source_split_8017;

  corral_source_split_8017:
    assume {:verifier.code 0} true;
    $i3913 := $eq.i64($i3912, 0);
    goto corral_source_split_8018;

  corral_source_split_8018:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3913} true;
    goto $bb1740, $bb1741;

  $bb1741:
    assume !($i3913 == 1);
    assume {:verifier.code 0} true;
    goto $bb1742;

  $bb1742:
    assume {:verifier.code 0} true;
    $p3915 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(217, 4));
    goto corral_source_split_8022;

  corral_source_split_8022:
    assume {:verifier.code 0} true;
    $i3916 := $load.i32($M.0, $p3915);
    goto corral_source_split_8023;

  corral_source_split_8023:
    assume {:verifier.code 0} true;
    $i3917 := $eq.i32($i3916, 0);
    goto corral_source_split_8024;

  corral_source_split_8024:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3917} true;
    goto $bb1743, $bb1744;

  $bb1744:
    assume !($i3917 == 1);
    assume {:verifier.code 0} true;
    goto $bb1745;

  $bb1745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1866} $p3918 := skb_end_pointer($p3911);
    goto corral_source_split_8028;

  corral_source_split_8028:
    assume {:verifier.code 0} true;
    $p3919 := $bitcast.ref.ref($p3918);
    goto corral_source_split_8029;

  corral_source_split_8029:
    assume {:verifier.code 0} true;
    $p3920 := $add.ref($add.ref($p3919, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_8030;

  corral_source_split_8030:
    assume {:verifier.code 0} true;
    $p3921 := $bitcast.ref.ref($p3920);
    goto corral_source_split_8031;

  corral_source_split_8031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1867} $p3922 := skb_frag_page($p3921);
    goto corral_source_split_8032;

  corral_source_split_8032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1868} get_page($p3922);
    goto corral_source_split_8033;

  corral_source_split_8033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1869} $p3923 := lowmem_page_address($p3922);
    goto corral_source_split_8034;

  corral_source_split_8034:
    assume {:verifier.code 0} true;
    $i3924 := $p2i.ref.i64($p3923);
    goto corral_source_split_8035;

  corral_source_split_8035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1870} gnttab_end_foreign_access($i3916, 0, $i3924);
    goto corral_source_split_8036;

  corral_source_split_8036:
    assume {:verifier.code 0} true;
    $p3926 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(217, 4));
    goto corral_source_split_8037;

  corral_source_split_8037:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3926, 0);
    goto corral_source_split_8038;

  corral_source_split_8038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1871} kfree_skb($p3911);
    goto corral_source_split_8039;

  corral_source_split_8039:
    assume {:verifier.code 0} true;
    goto $bb1746;

  $bb1746:
    assume {:verifier.code 0} true;
    goto $bb1747;

  $bb1747:
    assume {:verifier.code 0} true;
    $p3928 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(218, 8));
    goto corral_source_split_8041;

  corral_source_split_8041:
    assume {:verifier.code 0} true;
    $p3929 := $load.ref($M.0, $p3928);
    goto corral_source_split_8042;

  corral_source_split_8042:
    assume {:verifier.code 0} true;
    $i3930 := $p2i.ref.i64($p3929);
    goto corral_source_split_8043;

  corral_source_split_8043:
    assume {:verifier.code 0} true;
    $i3931 := $eq.i64($i3930, 0);
    goto corral_source_split_8044;

  corral_source_split_8044:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3931} true;
    goto $bb1748, $bb1749;

  $bb1749:
    assume !($i3931 == 1);
    assume {:verifier.code 0} true;
    goto $bb1750;

  $bb1750:
    assume {:verifier.code 0} true;
    $p3933 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(218, 4));
    goto corral_source_split_8048;

  corral_source_split_8048:
    assume {:verifier.code 0} true;
    $i3934 := $load.i32($M.0, $p3933);
    goto corral_source_split_8049;

  corral_source_split_8049:
    assume {:verifier.code 0} true;
    $i3935 := $eq.i32($i3934, 0);
    goto corral_source_split_8050;

  corral_source_split_8050:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3935} true;
    goto $bb1751, $bb1752;

  $bb1752:
    assume !($i3935 == 1);
    assume {:verifier.code 0} true;
    goto $bb1753;

  $bb1753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1872} $p3936 := skb_end_pointer($p3929);
    goto corral_source_split_8054;

  corral_source_split_8054:
    assume {:verifier.code 0} true;
    $p3937 := $bitcast.ref.ref($p3936);
    goto corral_source_split_8055;

  corral_source_split_8055:
    assume {:verifier.code 0} true;
    $p3938 := $add.ref($add.ref($p3937, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_8056;

  corral_source_split_8056:
    assume {:verifier.code 0} true;
    $p3939 := $bitcast.ref.ref($p3938);
    goto corral_source_split_8057;

  corral_source_split_8057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1873} $p3940 := skb_frag_page($p3939);
    goto corral_source_split_8058;

  corral_source_split_8058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1874} get_page($p3940);
    goto corral_source_split_8059;

  corral_source_split_8059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1875} $p3941 := lowmem_page_address($p3940);
    goto corral_source_split_8060;

  corral_source_split_8060:
    assume {:verifier.code 0} true;
    $i3942 := $p2i.ref.i64($p3941);
    goto corral_source_split_8061;

  corral_source_split_8061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1876} gnttab_end_foreign_access($i3934, 0, $i3942);
    goto corral_source_split_8062;

  corral_source_split_8062:
    assume {:verifier.code 0} true;
    $p3944 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(218, 4));
    goto corral_source_split_8063;

  corral_source_split_8063:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3944, 0);
    goto corral_source_split_8064;

  corral_source_split_8064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1877} kfree_skb($p3929);
    goto corral_source_split_8065;

  corral_source_split_8065:
    assume {:verifier.code 0} true;
    goto $bb1754;

  $bb1754:
    assume {:verifier.code 0} true;
    goto $bb1755;

  $bb1755:
    assume {:verifier.code 0} true;
    $p3946 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(219, 8));
    goto corral_source_split_8067;

  corral_source_split_8067:
    assume {:verifier.code 0} true;
    $p3947 := $load.ref($M.0, $p3946);
    goto corral_source_split_8068;

  corral_source_split_8068:
    assume {:verifier.code 0} true;
    $i3948 := $p2i.ref.i64($p3947);
    goto corral_source_split_8069;

  corral_source_split_8069:
    assume {:verifier.code 0} true;
    $i3949 := $eq.i64($i3948, 0);
    goto corral_source_split_8070;

  corral_source_split_8070:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3949} true;
    goto $bb1756, $bb1757;

  $bb1757:
    assume !($i3949 == 1);
    assume {:verifier.code 0} true;
    goto $bb1758;

  $bb1758:
    assume {:verifier.code 0} true;
    $p3951 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(219, 4));
    goto corral_source_split_8074;

  corral_source_split_8074:
    assume {:verifier.code 0} true;
    $i3952 := $load.i32($M.0, $p3951);
    goto corral_source_split_8075;

  corral_source_split_8075:
    assume {:verifier.code 0} true;
    $i3953 := $eq.i32($i3952, 0);
    goto corral_source_split_8076;

  corral_source_split_8076:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3953} true;
    goto $bb1759, $bb1760;

  $bb1760:
    assume !($i3953 == 1);
    assume {:verifier.code 0} true;
    goto $bb1761;

  $bb1761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1878} $p3954 := skb_end_pointer($p3947);
    goto corral_source_split_8080;

  corral_source_split_8080:
    assume {:verifier.code 0} true;
    $p3955 := $bitcast.ref.ref($p3954);
    goto corral_source_split_8081;

  corral_source_split_8081:
    assume {:verifier.code 0} true;
    $p3956 := $add.ref($add.ref($p3955, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_8082;

  corral_source_split_8082:
    assume {:verifier.code 0} true;
    $p3957 := $bitcast.ref.ref($p3956);
    goto corral_source_split_8083;

  corral_source_split_8083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1879} $p3958 := skb_frag_page($p3957);
    goto corral_source_split_8084;

  corral_source_split_8084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1880} get_page($p3958);
    goto corral_source_split_8085;

  corral_source_split_8085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1881} $p3959 := lowmem_page_address($p3958);
    goto corral_source_split_8086;

  corral_source_split_8086:
    assume {:verifier.code 0} true;
    $i3960 := $p2i.ref.i64($p3959);
    goto corral_source_split_8087;

  corral_source_split_8087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1882} gnttab_end_foreign_access($i3952, 0, $i3960);
    goto corral_source_split_8088;

  corral_source_split_8088:
    assume {:verifier.code 0} true;
    $p3962 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(219, 4));
    goto corral_source_split_8089;

  corral_source_split_8089:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3962, 0);
    goto corral_source_split_8090;

  corral_source_split_8090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1883} kfree_skb($p3947);
    goto corral_source_split_8091;

  corral_source_split_8091:
    assume {:verifier.code 0} true;
    goto $bb1762;

  $bb1762:
    assume {:verifier.code 0} true;
    goto $bb1763;

  $bb1763:
    assume {:verifier.code 0} true;
    $p3964 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(220, 8));
    goto corral_source_split_8093;

  corral_source_split_8093:
    assume {:verifier.code 0} true;
    $p3965 := $load.ref($M.0, $p3964);
    goto corral_source_split_8094;

  corral_source_split_8094:
    assume {:verifier.code 0} true;
    $i3966 := $p2i.ref.i64($p3965);
    goto corral_source_split_8095;

  corral_source_split_8095:
    assume {:verifier.code 0} true;
    $i3967 := $eq.i64($i3966, 0);
    goto corral_source_split_8096;

  corral_source_split_8096:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3967} true;
    goto $bb1764, $bb1765;

  $bb1765:
    assume !($i3967 == 1);
    assume {:verifier.code 0} true;
    goto $bb1766;

  $bb1766:
    assume {:verifier.code 0} true;
    $p3969 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(220, 4));
    goto corral_source_split_8100;

  corral_source_split_8100:
    assume {:verifier.code 0} true;
    $i3970 := $load.i32($M.0, $p3969);
    goto corral_source_split_8101;

  corral_source_split_8101:
    assume {:verifier.code 0} true;
    $i3971 := $eq.i32($i3970, 0);
    goto corral_source_split_8102;

  corral_source_split_8102:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3971} true;
    goto $bb1767, $bb1768;

  $bb1768:
    assume !($i3971 == 1);
    assume {:verifier.code 0} true;
    goto $bb1769;

  $bb1769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1884} $p3972 := skb_end_pointer($p3965);
    goto corral_source_split_8106;

  corral_source_split_8106:
    assume {:verifier.code 0} true;
    $p3973 := $bitcast.ref.ref($p3972);
    goto corral_source_split_8107;

  corral_source_split_8107:
    assume {:verifier.code 0} true;
    $p3974 := $add.ref($add.ref($p3973, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_8108;

  corral_source_split_8108:
    assume {:verifier.code 0} true;
    $p3975 := $bitcast.ref.ref($p3974);
    goto corral_source_split_8109;

  corral_source_split_8109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1885} $p3976 := skb_frag_page($p3975);
    goto corral_source_split_8110;

  corral_source_split_8110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1886} get_page($p3976);
    goto corral_source_split_8111;

  corral_source_split_8111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1887} $p3977 := lowmem_page_address($p3976);
    goto corral_source_split_8112;

  corral_source_split_8112:
    assume {:verifier.code 0} true;
    $i3978 := $p2i.ref.i64($p3977);
    goto corral_source_split_8113;

  corral_source_split_8113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1888} gnttab_end_foreign_access($i3970, 0, $i3978);
    goto corral_source_split_8114;

  corral_source_split_8114:
    assume {:verifier.code 0} true;
    $p3980 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(220, 4));
    goto corral_source_split_8115;

  corral_source_split_8115:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3980, 0);
    goto corral_source_split_8116;

  corral_source_split_8116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1889} kfree_skb($p3965);
    goto corral_source_split_8117;

  corral_source_split_8117:
    assume {:verifier.code 0} true;
    goto $bb1770;

  $bb1770:
    assume {:verifier.code 0} true;
    goto $bb1771;

  $bb1771:
    assume {:verifier.code 0} true;
    $p3982 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(221, 8));
    goto corral_source_split_8119;

  corral_source_split_8119:
    assume {:verifier.code 0} true;
    $p3983 := $load.ref($M.0, $p3982);
    goto corral_source_split_8120;

  corral_source_split_8120:
    assume {:verifier.code 0} true;
    $i3984 := $p2i.ref.i64($p3983);
    goto corral_source_split_8121;

  corral_source_split_8121:
    assume {:verifier.code 0} true;
    $i3985 := $eq.i64($i3984, 0);
    goto corral_source_split_8122;

  corral_source_split_8122:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3985} true;
    goto $bb1772, $bb1773;

  $bb1773:
    assume !($i3985 == 1);
    assume {:verifier.code 0} true;
    goto $bb1774;

  $bb1774:
    assume {:verifier.code 0} true;
    $p3987 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(221, 4));
    goto corral_source_split_8126;

  corral_source_split_8126:
    assume {:verifier.code 0} true;
    $i3988 := $load.i32($M.0, $p3987);
    goto corral_source_split_8127;

  corral_source_split_8127:
    assume {:verifier.code 0} true;
    $i3989 := $eq.i32($i3988, 0);
    goto corral_source_split_8128;

  corral_source_split_8128:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3989} true;
    goto $bb1775, $bb1776;

  $bb1776:
    assume !($i3989 == 1);
    assume {:verifier.code 0} true;
    goto $bb1777;

  $bb1777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1890} $p3990 := skb_end_pointer($p3983);
    goto corral_source_split_8132;

  corral_source_split_8132:
    assume {:verifier.code 0} true;
    $p3991 := $bitcast.ref.ref($p3990);
    goto corral_source_split_8133;

  corral_source_split_8133:
    assume {:verifier.code 0} true;
    $p3992 := $add.ref($add.ref($p3991, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_8134;

  corral_source_split_8134:
    assume {:verifier.code 0} true;
    $p3993 := $bitcast.ref.ref($p3992);
    goto corral_source_split_8135;

  corral_source_split_8135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1891} $p3994 := skb_frag_page($p3993);
    goto corral_source_split_8136;

  corral_source_split_8136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1892} get_page($p3994);
    goto corral_source_split_8137;

  corral_source_split_8137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1893} $p3995 := lowmem_page_address($p3994);
    goto corral_source_split_8138;

  corral_source_split_8138:
    assume {:verifier.code 0} true;
    $i3996 := $p2i.ref.i64($p3995);
    goto corral_source_split_8139;

  corral_source_split_8139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1894} gnttab_end_foreign_access($i3988, 0, $i3996);
    goto corral_source_split_8140;

  corral_source_split_8140:
    assume {:verifier.code 0} true;
    $p3998 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(221, 4));
    goto corral_source_split_8141;

  corral_source_split_8141:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3998, 0);
    goto corral_source_split_8142;

  corral_source_split_8142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1895} kfree_skb($p3983);
    goto corral_source_split_8143;

  corral_source_split_8143:
    assume {:verifier.code 0} true;
    goto $bb1778;

  $bb1778:
    assume {:verifier.code 0} true;
    goto $bb1779;

  $bb1779:
    assume {:verifier.code 0} true;
    $p4000 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(222, 8));
    goto corral_source_split_8145;

  corral_source_split_8145:
    assume {:verifier.code 0} true;
    $p4001 := $load.ref($M.0, $p4000);
    goto corral_source_split_8146;

  corral_source_split_8146:
    assume {:verifier.code 0} true;
    $i4002 := $p2i.ref.i64($p4001);
    goto corral_source_split_8147;

  corral_source_split_8147:
    assume {:verifier.code 0} true;
    $i4003 := $eq.i64($i4002, 0);
    goto corral_source_split_8148;

  corral_source_split_8148:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4003} true;
    goto $bb1780, $bb1781;

  $bb1781:
    assume !($i4003 == 1);
    assume {:verifier.code 0} true;
    goto $bb1782;

  $bb1782:
    assume {:verifier.code 0} true;
    $p4005 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(222, 4));
    goto corral_source_split_8152;

  corral_source_split_8152:
    assume {:verifier.code 0} true;
    $i4006 := $load.i32($M.0, $p4005);
    goto corral_source_split_8153;

  corral_source_split_8153:
    assume {:verifier.code 0} true;
    $i4007 := $eq.i32($i4006, 0);
    goto corral_source_split_8154;

  corral_source_split_8154:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4007} true;
    goto $bb1783, $bb1784;

  $bb1784:
    assume !($i4007 == 1);
    assume {:verifier.code 0} true;
    goto $bb1785;

  $bb1785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1896} $p4008 := skb_end_pointer($p4001);
    goto corral_source_split_8158;

  corral_source_split_8158:
    assume {:verifier.code 0} true;
    $p4009 := $bitcast.ref.ref($p4008);
    goto corral_source_split_8159;

  corral_source_split_8159:
    assume {:verifier.code 0} true;
    $p4010 := $add.ref($add.ref($p4009, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_8160;

  corral_source_split_8160:
    assume {:verifier.code 0} true;
    $p4011 := $bitcast.ref.ref($p4010);
    goto corral_source_split_8161;

  corral_source_split_8161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1897} $p4012 := skb_frag_page($p4011);
    goto corral_source_split_8162;

  corral_source_split_8162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1898} get_page($p4012);
    goto corral_source_split_8163;

  corral_source_split_8163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1899} $p4013 := lowmem_page_address($p4012);
    goto corral_source_split_8164;

  corral_source_split_8164:
    assume {:verifier.code 0} true;
    $i4014 := $p2i.ref.i64($p4013);
    goto corral_source_split_8165;

  corral_source_split_8165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1900} gnttab_end_foreign_access($i4006, 0, $i4014);
    goto corral_source_split_8166;

  corral_source_split_8166:
    assume {:verifier.code 0} true;
    $p4016 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(222, 4));
    goto corral_source_split_8167;

  corral_source_split_8167:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4016, 0);
    goto corral_source_split_8168;

  corral_source_split_8168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1901} kfree_skb($p4001);
    goto corral_source_split_8169;

  corral_source_split_8169:
    assume {:verifier.code 0} true;
    goto $bb1786;

  $bb1786:
    assume {:verifier.code 0} true;
    goto $bb1787;

  $bb1787:
    assume {:verifier.code 0} true;
    $p4018 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(223, 8));
    goto corral_source_split_8171;

  corral_source_split_8171:
    assume {:verifier.code 0} true;
    $p4019 := $load.ref($M.0, $p4018);
    goto corral_source_split_8172;

  corral_source_split_8172:
    assume {:verifier.code 0} true;
    $i4020 := $p2i.ref.i64($p4019);
    goto corral_source_split_8173;

  corral_source_split_8173:
    assume {:verifier.code 0} true;
    $i4021 := $eq.i64($i4020, 0);
    goto corral_source_split_8174;

  corral_source_split_8174:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4021} true;
    goto $bb1788, $bb1789;

  $bb1789:
    assume !($i4021 == 1);
    assume {:verifier.code 0} true;
    goto $bb1790;

  $bb1790:
    assume {:verifier.code 0} true;
    $p4023 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(223, 4));
    goto corral_source_split_8178;

  corral_source_split_8178:
    assume {:verifier.code 0} true;
    $i4024 := $load.i32($M.0, $p4023);
    goto corral_source_split_8179;

  corral_source_split_8179:
    assume {:verifier.code 0} true;
    $i4025 := $eq.i32($i4024, 0);
    goto corral_source_split_8180;

  corral_source_split_8180:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4025} true;
    goto $bb1791, $bb1792;

  $bb1792:
    assume !($i4025 == 1);
    assume {:verifier.code 0} true;
    goto $bb1793;

  $bb1793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1902} $p4026 := skb_end_pointer($p4019);
    goto corral_source_split_8184;

  corral_source_split_8184:
    assume {:verifier.code 0} true;
    $p4027 := $bitcast.ref.ref($p4026);
    goto corral_source_split_8185;

  corral_source_split_8185:
    assume {:verifier.code 0} true;
    $p4028 := $add.ref($add.ref($p4027, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_8186;

  corral_source_split_8186:
    assume {:verifier.code 0} true;
    $p4029 := $bitcast.ref.ref($p4028);
    goto corral_source_split_8187;

  corral_source_split_8187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1903} $p4030 := skb_frag_page($p4029);
    goto corral_source_split_8188;

  corral_source_split_8188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1904} get_page($p4030);
    goto corral_source_split_8189;

  corral_source_split_8189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1905} $p4031 := lowmem_page_address($p4030);
    goto corral_source_split_8190;

  corral_source_split_8190:
    assume {:verifier.code 0} true;
    $i4032 := $p2i.ref.i64($p4031);
    goto corral_source_split_8191;

  corral_source_split_8191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1906} gnttab_end_foreign_access($i4024, 0, $i4032);
    goto corral_source_split_8192;

  corral_source_split_8192:
    assume {:verifier.code 0} true;
    $p4034 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(223, 4));
    goto corral_source_split_8193;

  corral_source_split_8193:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4034, 0);
    goto corral_source_split_8194;

  corral_source_split_8194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1907} kfree_skb($p4019);
    goto corral_source_split_8195;

  corral_source_split_8195:
    assume {:verifier.code 0} true;
    goto $bb1794;

  $bb1794:
    assume {:verifier.code 0} true;
    goto $bb1795;

  $bb1795:
    assume {:verifier.code 0} true;
    $p4036 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(224, 8));
    goto corral_source_split_8197;

  corral_source_split_8197:
    assume {:verifier.code 0} true;
    $p4037 := $load.ref($M.0, $p4036);
    goto corral_source_split_8198;

  corral_source_split_8198:
    assume {:verifier.code 0} true;
    $i4038 := $p2i.ref.i64($p4037);
    goto corral_source_split_8199;

  corral_source_split_8199:
    assume {:verifier.code 0} true;
    $i4039 := $eq.i64($i4038, 0);
    goto corral_source_split_8200;

  corral_source_split_8200:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4039} true;
    goto $bb1796, $bb1797;

  $bb1797:
    assume !($i4039 == 1);
    assume {:verifier.code 0} true;
    goto $bb1798;

  $bb1798:
    assume {:verifier.code 0} true;
    $p4041 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(224, 4));
    goto corral_source_split_8204;

  corral_source_split_8204:
    assume {:verifier.code 0} true;
    $i4042 := $load.i32($M.0, $p4041);
    goto corral_source_split_8205;

  corral_source_split_8205:
    assume {:verifier.code 0} true;
    $i4043 := $eq.i32($i4042, 0);
    goto corral_source_split_8206;

  corral_source_split_8206:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4043} true;
    goto $bb1799, $bb1800;

  $bb1800:
    assume !($i4043 == 1);
    assume {:verifier.code 0} true;
    goto $bb1801;

  $bb1801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1908} $p4044 := skb_end_pointer($p4037);
    goto corral_source_split_8210;

  corral_source_split_8210:
    assume {:verifier.code 0} true;
    $p4045 := $bitcast.ref.ref($p4044);
    goto corral_source_split_8211;

  corral_source_split_8211:
    assume {:verifier.code 0} true;
    $p4046 := $add.ref($add.ref($p4045, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_8212;

  corral_source_split_8212:
    assume {:verifier.code 0} true;
    $p4047 := $bitcast.ref.ref($p4046);
    goto corral_source_split_8213;

  corral_source_split_8213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1909} $p4048 := skb_frag_page($p4047);
    goto corral_source_split_8214;

  corral_source_split_8214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1910} get_page($p4048);
    goto corral_source_split_8215;

  corral_source_split_8215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1911} $p4049 := lowmem_page_address($p4048);
    goto corral_source_split_8216;

  corral_source_split_8216:
    assume {:verifier.code 0} true;
    $i4050 := $p2i.ref.i64($p4049);
    goto corral_source_split_8217;

  corral_source_split_8217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1912} gnttab_end_foreign_access($i4042, 0, $i4050);
    goto corral_source_split_8218;

  corral_source_split_8218:
    assume {:verifier.code 0} true;
    $p4052 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(224, 4));
    goto corral_source_split_8219;

  corral_source_split_8219:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4052, 0);
    goto corral_source_split_8220;

  corral_source_split_8220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1913} kfree_skb($p4037);
    goto corral_source_split_8221;

  corral_source_split_8221:
    assume {:verifier.code 0} true;
    goto $bb1802;

  $bb1802:
    assume {:verifier.code 0} true;
    goto $bb1803;

  $bb1803:
    assume {:verifier.code 0} true;
    $p4054 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(225, 8));
    goto corral_source_split_8223;

  corral_source_split_8223:
    assume {:verifier.code 0} true;
    $p4055 := $load.ref($M.0, $p4054);
    goto corral_source_split_8224;

  corral_source_split_8224:
    assume {:verifier.code 0} true;
    $i4056 := $p2i.ref.i64($p4055);
    goto corral_source_split_8225;

  corral_source_split_8225:
    assume {:verifier.code 0} true;
    $i4057 := $eq.i64($i4056, 0);
    goto corral_source_split_8226;

  corral_source_split_8226:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4057} true;
    goto $bb1804, $bb1805;

  $bb1805:
    assume !($i4057 == 1);
    assume {:verifier.code 0} true;
    goto $bb1806;

  $bb1806:
    assume {:verifier.code 0} true;
    $p4059 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(225, 4));
    goto corral_source_split_8230;

  corral_source_split_8230:
    assume {:verifier.code 0} true;
    $i4060 := $load.i32($M.0, $p4059);
    goto corral_source_split_8231;

  corral_source_split_8231:
    assume {:verifier.code 0} true;
    $i4061 := $eq.i32($i4060, 0);
    goto corral_source_split_8232;

  corral_source_split_8232:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4061} true;
    goto $bb1807, $bb1808;

  $bb1808:
    assume !($i4061 == 1);
    assume {:verifier.code 0} true;
    goto $bb1809;

  $bb1809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1914} $p4062 := skb_end_pointer($p4055);
    goto corral_source_split_8236;

  corral_source_split_8236:
    assume {:verifier.code 0} true;
    $p4063 := $bitcast.ref.ref($p4062);
    goto corral_source_split_8237;

  corral_source_split_8237:
    assume {:verifier.code 0} true;
    $p4064 := $add.ref($add.ref($p4063, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_8238;

  corral_source_split_8238:
    assume {:verifier.code 0} true;
    $p4065 := $bitcast.ref.ref($p4064);
    goto corral_source_split_8239;

  corral_source_split_8239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1915} $p4066 := skb_frag_page($p4065);
    goto corral_source_split_8240;

  corral_source_split_8240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1916} get_page($p4066);
    goto corral_source_split_8241;

  corral_source_split_8241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1917} $p4067 := lowmem_page_address($p4066);
    goto corral_source_split_8242;

  corral_source_split_8242:
    assume {:verifier.code 0} true;
    $i4068 := $p2i.ref.i64($p4067);
    goto corral_source_split_8243;

  corral_source_split_8243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1918} gnttab_end_foreign_access($i4060, 0, $i4068);
    goto corral_source_split_8244;

  corral_source_split_8244:
    assume {:verifier.code 0} true;
    $p4070 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(225, 4));
    goto corral_source_split_8245;

  corral_source_split_8245:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4070, 0);
    goto corral_source_split_8246;

  corral_source_split_8246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1919} kfree_skb($p4055);
    goto corral_source_split_8247;

  corral_source_split_8247:
    assume {:verifier.code 0} true;
    goto $bb1810;

  $bb1810:
    assume {:verifier.code 0} true;
    goto $bb1811;

  $bb1811:
    assume {:verifier.code 0} true;
    $p4072 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(226, 8));
    goto corral_source_split_8249;

  corral_source_split_8249:
    assume {:verifier.code 0} true;
    $p4073 := $load.ref($M.0, $p4072);
    goto corral_source_split_8250;

  corral_source_split_8250:
    assume {:verifier.code 0} true;
    $i4074 := $p2i.ref.i64($p4073);
    goto corral_source_split_8251;

  corral_source_split_8251:
    assume {:verifier.code 0} true;
    $i4075 := $eq.i64($i4074, 0);
    goto corral_source_split_8252;

  corral_source_split_8252:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4075} true;
    goto $bb1812, $bb1813;

  $bb1813:
    assume !($i4075 == 1);
    assume {:verifier.code 0} true;
    goto $bb1814;

  $bb1814:
    assume {:verifier.code 0} true;
    $p4077 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(226, 4));
    goto corral_source_split_8256;

  corral_source_split_8256:
    assume {:verifier.code 0} true;
    $i4078 := $load.i32($M.0, $p4077);
    goto corral_source_split_8257;

  corral_source_split_8257:
    assume {:verifier.code 0} true;
    $i4079 := $eq.i32($i4078, 0);
    goto corral_source_split_8258;

  corral_source_split_8258:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4079} true;
    goto $bb1815, $bb1816;

  $bb1816:
    assume !($i4079 == 1);
    assume {:verifier.code 0} true;
    goto $bb1817;

  $bb1817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1920} $p4080 := skb_end_pointer($p4073);
    goto corral_source_split_8262;

  corral_source_split_8262:
    assume {:verifier.code 0} true;
    $p4081 := $bitcast.ref.ref($p4080);
    goto corral_source_split_8263;

  corral_source_split_8263:
    assume {:verifier.code 0} true;
    $p4082 := $add.ref($add.ref($p4081, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_8264;

  corral_source_split_8264:
    assume {:verifier.code 0} true;
    $p4083 := $bitcast.ref.ref($p4082);
    goto corral_source_split_8265;

  corral_source_split_8265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1921} $p4084 := skb_frag_page($p4083);
    goto corral_source_split_8266;

  corral_source_split_8266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1922} get_page($p4084);
    goto corral_source_split_8267;

  corral_source_split_8267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1923} $p4085 := lowmem_page_address($p4084);
    goto corral_source_split_8268;

  corral_source_split_8268:
    assume {:verifier.code 0} true;
    $i4086 := $p2i.ref.i64($p4085);
    goto corral_source_split_8269;

  corral_source_split_8269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1924} gnttab_end_foreign_access($i4078, 0, $i4086);
    goto corral_source_split_8270;

  corral_source_split_8270:
    assume {:verifier.code 0} true;
    $p4088 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(226, 4));
    goto corral_source_split_8271;

  corral_source_split_8271:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4088, 0);
    goto corral_source_split_8272;

  corral_source_split_8272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1925} kfree_skb($p4073);
    goto corral_source_split_8273;

  corral_source_split_8273:
    assume {:verifier.code 0} true;
    goto $bb1818;

  $bb1818:
    assume {:verifier.code 0} true;
    goto $bb1819;

  $bb1819:
    assume {:verifier.code 0} true;
    $p4090 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(227, 8));
    goto corral_source_split_8275;

  corral_source_split_8275:
    assume {:verifier.code 0} true;
    $p4091 := $load.ref($M.0, $p4090);
    goto corral_source_split_8276;

  corral_source_split_8276:
    assume {:verifier.code 0} true;
    $i4092 := $p2i.ref.i64($p4091);
    goto corral_source_split_8277;

  corral_source_split_8277:
    assume {:verifier.code 0} true;
    $i4093 := $eq.i64($i4092, 0);
    goto corral_source_split_8278;

  corral_source_split_8278:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4093} true;
    goto $bb1820, $bb1821;

  $bb1821:
    assume !($i4093 == 1);
    assume {:verifier.code 0} true;
    goto $bb1822;

  $bb1822:
    assume {:verifier.code 0} true;
    $p4095 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(227, 4));
    goto corral_source_split_8282;

  corral_source_split_8282:
    assume {:verifier.code 0} true;
    $i4096 := $load.i32($M.0, $p4095);
    goto corral_source_split_8283;

  corral_source_split_8283:
    assume {:verifier.code 0} true;
    $i4097 := $eq.i32($i4096, 0);
    goto corral_source_split_8284;

  corral_source_split_8284:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4097} true;
    goto $bb1823, $bb1824;

  $bb1824:
    assume !($i4097 == 1);
    assume {:verifier.code 0} true;
    goto $bb1825;

  $bb1825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1926} $p4098 := skb_end_pointer($p4091);
    goto corral_source_split_8288;

  corral_source_split_8288:
    assume {:verifier.code 0} true;
    $p4099 := $bitcast.ref.ref($p4098);
    goto corral_source_split_8289;

  corral_source_split_8289:
    assume {:verifier.code 0} true;
    $p4100 := $add.ref($add.ref($p4099, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_8290;

  corral_source_split_8290:
    assume {:verifier.code 0} true;
    $p4101 := $bitcast.ref.ref($p4100);
    goto corral_source_split_8291;

  corral_source_split_8291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1927} $p4102 := skb_frag_page($p4101);
    goto corral_source_split_8292;

  corral_source_split_8292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1928} get_page($p4102);
    goto corral_source_split_8293;

  corral_source_split_8293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1929} $p4103 := lowmem_page_address($p4102);
    goto corral_source_split_8294;

  corral_source_split_8294:
    assume {:verifier.code 0} true;
    $i4104 := $p2i.ref.i64($p4103);
    goto corral_source_split_8295;

  corral_source_split_8295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1930} gnttab_end_foreign_access($i4096, 0, $i4104);
    goto corral_source_split_8296;

  corral_source_split_8296:
    assume {:verifier.code 0} true;
    $p4106 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(227, 4));
    goto corral_source_split_8297;

  corral_source_split_8297:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4106, 0);
    goto corral_source_split_8298;

  corral_source_split_8298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1931} kfree_skb($p4091);
    goto corral_source_split_8299;

  corral_source_split_8299:
    assume {:verifier.code 0} true;
    goto $bb1826;

  $bb1826:
    assume {:verifier.code 0} true;
    goto $bb1827;

  $bb1827:
    assume {:verifier.code 0} true;
    $p4108 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(228, 8));
    goto corral_source_split_8301;

  corral_source_split_8301:
    assume {:verifier.code 0} true;
    $p4109 := $load.ref($M.0, $p4108);
    goto corral_source_split_8302;

  corral_source_split_8302:
    assume {:verifier.code 0} true;
    $i4110 := $p2i.ref.i64($p4109);
    goto corral_source_split_8303;

  corral_source_split_8303:
    assume {:verifier.code 0} true;
    $i4111 := $eq.i64($i4110, 0);
    goto corral_source_split_8304;

  corral_source_split_8304:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4111} true;
    goto $bb1828, $bb1829;

  $bb1829:
    assume !($i4111 == 1);
    assume {:verifier.code 0} true;
    goto $bb1830;

  $bb1830:
    assume {:verifier.code 0} true;
    $p4113 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(228, 4));
    goto corral_source_split_8308;

  corral_source_split_8308:
    assume {:verifier.code 0} true;
    $i4114 := $load.i32($M.0, $p4113);
    goto corral_source_split_8309;

  corral_source_split_8309:
    assume {:verifier.code 0} true;
    $i4115 := $eq.i32($i4114, 0);
    goto corral_source_split_8310;

  corral_source_split_8310:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4115} true;
    goto $bb1831, $bb1832;

  $bb1832:
    assume !($i4115 == 1);
    assume {:verifier.code 0} true;
    goto $bb1833;

  $bb1833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1932} $p4116 := skb_end_pointer($p4109);
    goto corral_source_split_8314;

  corral_source_split_8314:
    assume {:verifier.code 0} true;
    $p4117 := $bitcast.ref.ref($p4116);
    goto corral_source_split_8315;

  corral_source_split_8315:
    assume {:verifier.code 0} true;
    $p4118 := $add.ref($add.ref($p4117, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_8316;

  corral_source_split_8316:
    assume {:verifier.code 0} true;
    $p4119 := $bitcast.ref.ref($p4118);
    goto corral_source_split_8317;

  corral_source_split_8317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1933} $p4120 := skb_frag_page($p4119);
    goto corral_source_split_8318;

  corral_source_split_8318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1934} get_page($p4120);
    goto corral_source_split_8319;

  corral_source_split_8319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1935} $p4121 := lowmem_page_address($p4120);
    goto corral_source_split_8320;

  corral_source_split_8320:
    assume {:verifier.code 0} true;
    $i4122 := $p2i.ref.i64($p4121);
    goto corral_source_split_8321;

  corral_source_split_8321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1936} gnttab_end_foreign_access($i4114, 0, $i4122);
    goto corral_source_split_8322;

  corral_source_split_8322:
    assume {:verifier.code 0} true;
    $p4124 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(228, 4));
    goto corral_source_split_8323;

  corral_source_split_8323:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4124, 0);
    goto corral_source_split_8324;

  corral_source_split_8324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1937} kfree_skb($p4109);
    goto corral_source_split_8325;

  corral_source_split_8325:
    assume {:verifier.code 0} true;
    goto $bb1834;

  $bb1834:
    assume {:verifier.code 0} true;
    goto $bb1835;

  $bb1835:
    assume {:verifier.code 0} true;
    $p4126 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(229, 8));
    goto corral_source_split_8327;

  corral_source_split_8327:
    assume {:verifier.code 0} true;
    $p4127 := $load.ref($M.0, $p4126);
    goto corral_source_split_8328;

  corral_source_split_8328:
    assume {:verifier.code 0} true;
    $i4128 := $p2i.ref.i64($p4127);
    goto corral_source_split_8329;

  corral_source_split_8329:
    assume {:verifier.code 0} true;
    $i4129 := $eq.i64($i4128, 0);
    goto corral_source_split_8330;

  corral_source_split_8330:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4129} true;
    goto $bb1836, $bb1837;

  $bb1837:
    assume !($i4129 == 1);
    assume {:verifier.code 0} true;
    goto $bb1838;

  $bb1838:
    assume {:verifier.code 0} true;
    $p4131 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(229, 4));
    goto corral_source_split_8334;

  corral_source_split_8334:
    assume {:verifier.code 0} true;
    $i4132 := $load.i32($M.0, $p4131);
    goto corral_source_split_8335;

  corral_source_split_8335:
    assume {:verifier.code 0} true;
    $i4133 := $eq.i32($i4132, 0);
    goto corral_source_split_8336;

  corral_source_split_8336:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4133} true;
    goto $bb1839, $bb1840;

  $bb1840:
    assume !($i4133 == 1);
    assume {:verifier.code 0} true;
    goto $bb1841;

  $bb1841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1938} $p4134 := skb_end_pointer($p4127);
    goto corral_source_split_8340;

  corral_source_split_8340:
    assume {:verifier.code 0} true;
    $p4135 := $bitcast.ref.ref($p4134);
    goto corral_source_split_8341;

  corral_source_split_8341:
    assume {:verifier.code 0} true;
    $p4136 := $add.ref($add.ref($p4135, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_8342;

  corral_source_split_8342:
    assume {:verifier.code 0} true;
    $p4137 := $bitcast.ref.ref($p4136);
    goto corral_source_split_8343;

  corral_source_split_8343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1939} $p4138 := skb_frag_page($p4137);
    goto corral_source_split_8344;

  corral_source_split_8344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1940} get_page($p4138);
    goto corral_source_split_8345;

  corral_source_split_8345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1941} $p4139 := lowmem_page_address($p4138);
    goto corral_source_split_8346;

  corral_source_split_8346:
    assume {:verifier.code 0} true;
    $i4140 := $p2i.ref.i64($p4139);
    goto corral_source_split_8347;

  corral_source_split_8347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1942} gnttab_end_foreign_access($i4132, 0, $i4140);
    goto corral_source_split_8348;

  corral_source_split_8348:
    assume {:verifier.code 0} true;
    $p4142 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(229, 4));
    goto corral_source_split_8349;

  corral_source_split_8349:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4142, 0);
    goto corral_source_split_8350;

  corral_source_split_8350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1943} kfree_skb($p4127);
    goto corral_source_split_8351;

  corral_source_split_8351:
    assume {:verifier.code 0} true;
    goto $bb1842;

  $bb1842:
    assume {:verifier.code 0} true;
    goto $bb1843;

  $bb1843:
    assume {:verifier.code 0} true;
    $p4144 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(230, 8));
    goto corral_source_split_8353;

  corral_source_split_8353:
    assume {:verifier.code 0} true;
    $p4145 := $load.ref($M.0, $p4144);
    goto corral_source_split_8354;

  corral_source_split_8354:
    assume {:verifier.code 0} true;
    $i4146 := $p2i.ref.i64($p4145);
    goto corral_source_split_8355;

  corral_source_split_8355:
    assume {:verifier.code 0} true;
    $i4147 := $eq.i64($i4146, 0);
    goto corral_source_split_8356;

  corral_source_split_8356:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4147} true;
    goto $bb1844, $bb1845;

  $bb1845:
    assume !($i4147 == 1);
    assume {:verifier.code 0} true;
    goto $bb1846;

  $bb1846:
    assume {:verifier.code 0} true;
    $p4149 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(230, 4));
    goto corral_source_split_8360;

  corral_source_split_8360:
    assume {:verifier.code 0} true;
    $i4150 := $load.i32($M.0, $p4149);
    goto corral_source_split_8361;

  corral_source_split_8361:
    assume {:verifier.code 0} true;
    $i4151 := $eq.i32($i4150, 0);
    goto corral_source_split_8362;

  corral_source_split_8362:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4151} true;
    goto $bb1847, $bb1848;

  $bb1848:
    assume !($i4151 == 1);
    assume {:verifier.code 0} true;
    goto $bb1849;

  $bb1849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1944} $p4152 := skb_end_pointer($p4145);
    goto corral_source_split_8366;

  corral_source_split_8366:
    assume {:verifier.code 0} true;
    $p4153 := $bitcast.ref.ref($p4152);
    goto corral_source_split_8367;

  corral_source_split_8367:
    assume {:verifier.code 0} true;
    $p4154 := $add.ref($add.ref($p4153, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_8368;

  corral_source_split_8368:
    assume {:verifier.code 0} true;
    $p4155 := $bitcast.ref.ref($p4154);
    goto corral_source_split_8369;

  corral_source_split_8369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1945} $p4156 := skb_frag_page($p4155);
    goto corral_source_split_8370;

  corral_source_split_8370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1946} get_page($p4156);
    goto corral_source_split_8371;

  corral_source_split_8371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1947} $p4157 := lowmem_page_address($p4156);
    goto corral_source_split_8372;

  corral_source_split_8372:
    assume {:verifier.code 0} true;
    $i4158 := $p2i.ref.i64($p4157);
    goto corral_source_split_8373;

  corral_source_split_8373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1948} gnttab_end_foreign_access($i4150, 0, $i4158);
    goto corral_source_split_8374;

  corral_source_split_8374:
    assume {:verifier.code 0} true;
    $p4160 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(230, 4));
    goto corral_source_split_8375;

  corral_source_split_8375:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4160, 0);
    goto corral_source_split_8376;

  corral_source_split_8376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1949} kfree_skb($p4145);
    goto corral_source_split_8377;

  corral_source_split_8377:
    assume {:verifier.code 0} true;
    goto $bb1850;

  $bb1850:
    assume {:verifier.code 0} true;
    goto $bb1851;

  $bb1851:
    assume {:verifier.code 0} true;
    $p4162 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(231, 8));
    goto corral_source_split_8379;

  corral_source_split_8379:
    assume {:verifier.code 0} true;
    $p4163 := $load.ref($M.0, $p4162);
    goto corral_source_split_8380;

  corral_source_split_8380:
    assume {:verifier.code 0} true;
    $i4164 := $p2i.ref.i64($p4163);
    goto corral_source_split_8381;

  corral_source_split_8381:
    assume {:verifier.code 0} true;
    $i4165 := $eq.i64($i4164, 0);
    goto corral_source_split_8382;

  corral_source_split_8382:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4165} true;
    goto $bb1852, $bb1853;

  $bb1853:
    assume !($i4165 == 1);
    assume {:verifier.code 0} true;
    goto $bb1854;

  $bb1854:
    assume {:verifier.code 0} true;
    $p4167 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(231, 4));
    goto corral_source_split_8386;

  corral_source_split_8386:
    assume {:verifier.code 0} true;
    $i4168 := $load.i32($M.0, $p4167);
    goto corral_source_split_8387;

  corral_source_split_8387:
    assume {:verifier.code 0} true;
    $i4169 := $eq.i32($i4168, 0);
    goto corral_source_split_8388;

  corral_source_split_8388:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4169} true;
    goto $bb1855, $bb1856;

  $bb1856:
    assume !($i4169 == 1);
    assume {:verifier.code 0} true;
    goto $bb1857;

  $bb1857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1950} $p4170 := skb_end_pointer($p4163);
    goto corral_source_split_8392;

  corral_source_split_8392:
    assume {:verifier.code 0} true;
    $p4171 := $bitcast.ref.ref($p4170);
    goto corral_source_split_8393;

  corral_source_split_8393:
    assume {:verifier.code 0} true;
    $p4172 := $add.ref($add.ref($p4171, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_8394;

  corral_source_split_8394:
    assume {:verifier.code 0} true;
    $p4173 := $bitcast.ref.ref($p4172);
    goto corral_source_split_8395;

  corral_source_split_8395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1951} $p4174 := skb_frag_page($p4173);
    goto corral_source_split_8396;

  corral_source_split_8396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1952} get_page($p4174);
    goto corral_source_split_8397;

  corral_source_split_8397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1953} $p4175 := lowmem_page_address($p4174);
    goto corral_source_split_8398;

  corral_source_split_8398:
    assume {:verifier.code 0} true;
    $i4176 := $p2i.ref.i64($p4175);
    goto corral_source_split_8399;

  corral_source_split_8399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1954} gnttab_end_foreign_access($i4168, 0, $i4176);
    goto corral_source_split_8400;

  corral_source_split_8400:
    assume {:verifier.code 0} true;
    $p4178 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(231, 4));
    goto corral_source_split_8401;

  corral_source_split_8401:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4178, 0);
    goto corral_source_split_8402;

  corral_source_split_8402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1955} kfree_skb($p4163);
    goto corral_source_split_8403;

  corral_source_split_8403:
    assume {:verifier.code 0} true;
    goto $bb1858;

  $bb1858:
    assume {:verifier.code 0} true;
    goto $bb1859;

  $bb1859:
    assume {:verifier.code 0} true;
    $p4180 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(232, 8));
    goto corral_source_split_8405;

  corral_source_split_8405:
    assume {:verifier.code 0} true;
    $p4181 := $load.ref($M.0, $p4180);
    goto corral_source_split_8406;

  corral_source_split_8406:
    assume {:verifier.code 0} true;
    $i4182 := $p2i.ref.i64($p4181);
    goto corral_source_split_8407;

  corral_source_split_8407:
    assume {:verifier.code 0} true;
    $i4183 := $eq.i64($i4182, 0);
    goto corral_source_split_8408;

  corral_source_split_8408:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4183} true;
    goto $bb1860, $bb1861;

  $bb1861:
    assume !($i4183 == 1);
    assume {:verifier.code 0} true;
    goto $bb1862;

  $bb1862:
    assume {:verifier.code 0} true;
    $p4185 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(232, 4));
    goto corral_source_split_8412;

  corral_source_split_8412:
    assume {:verifier.code 0} true;
    $i4186 := $load.i32($M.0, $p4185);
    goto corral_source_split_8413;

  corral_source_split_8413:
    assume {:verifier.code 0} true;
    $i4187 := $eq.i32($i4186, 0);
    goto corral_source_split_8414;

  corral_source_split_8414:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4187} true;
    goto $bb1863, $bb1864;

  $bb1864:
    assume !($i4187 == 1);
    assume {:verifier.code 0} true;
    goto $bb1865;

  $bb1865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1956} $p4188 := skb_end_pointer($p4181);
    goto corral_source_split_8418;

  corral_source_split_8418:
    assume {:verifier.code 0} true;
    $p4189 := $bitcast.ref.ref($p4188);
    goto corral_source_split_8419;

  corral_source_split_8419:
    assume {:verifier.code 0} true;
    $p4190 := $add.ref($add.ref($p4189, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_8420;

  corral_source_split_8420:
    assume {:verifier.code 0} true;
    $p4191 := $bitcast.ref.ref($p4190);
    goto corral_source_split_8421;

  corral_source_split_8421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1957} $p4192 := skb_frag_page($p4191);
    goto corral_source_split_8422;

  corral_source_split_8422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1958} get_page($p4192);
    goto corral_source_split_8423;

  corral_source_split_8423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1959} $p4193 := lowmem_page_address($p4192);
    goto corral_source_split_8424;

  corral_source_split_8424:
    assume {:verifier.code 0} true;
    $i4194 := $p2i.ref.i64($p4193);
    goto corral_source_split_8425;

  corral_source_split_8425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1960} gnttab_end_foreign_access($i4186, 0, $i4194);
    goto corral_source_split_8426;

  corral_source_split_8426:
    assume {:verifier.code 0} true;
    $p4196 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(232, 4));
    goto corral_source_split_8427;

  corral_source_split_8427:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4196, 0);
    goto corral_source_split_8428;

  corral_source_split_8428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1961} kfree_skb($p4181);
    goto corral_source_split_8429;

  corral_source_split_8429:
    assume {:verifier.code 0} true;
    goto $bb1866;

  $bb1866:
    assume {:verifier.code 0} true;
    goto $bb1867;

  $bb1867:
    assume {:verifier.code 0} true;
    $p4198 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(233, 8));
    goto corral_source_split_8431;

  corral_source_split_8431:
    assume {:verifier.code 0} true;
    $p4199 := $load.ref($M.0, $p4198);
    goto corral_source_split_8432;

  corral_source_split_8432:
    assume {:verifier.code 0} true;
    $i4200 := $p2i.ref.i64($p4199);
    goto corral_source_split_8433;

  corral_source_split_8433:
    assume {:verifier.code 0} true;
    $i4201 := $eq.i64($i4200, 0);
    goto corral_source_split_8434;

  corral_source_split_8434:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4201} true;
    goto $bb1868, $bb1869;

  $bb1869:
    assume !($i4201 == 1);
    assume {:verifier.code 0} true;
    goto $bb1870;

  $bb1870:
    assume {:verifier.code 0} true;
    $p4203 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(233, 4));
    goto corral_source_split_8438;

  corral_source_split_8438:
    assume {:verifier.code 0} true;
    $i4204 := $load.i32($M.0, $p4203);
    goto corral_source_split_8439;

  corral_source_split_8439:
    assume {:verifier.code 0} true;
    $i4205 := $eq.i32($i4204, 0);
    goto corral_source_split_8440;

  corral_source_split_8440:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4205} true;
    goto $bb1871, $bb1872;

  $bb1872:
    assume !($i4205 == 1);
    assume {:verifier.code 0} true;
    goto $bb1873;

  $bb1873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1962} $p4206 := skb_end_pointer($p4199);
    goto corral_source_split_8444;

  corral_source_split_8444:
    assume {:verifier.code 0} true;
    $p4207 := $bitcast.ref.ref($p4206);
    goto corral_source_split_8445;

  corral_source_split_8445:
    assume {:verifier.code 0} true;
    $p4208 := $add.ref($add.ref($p4207, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_8446;

  corral_source_split_8446:
    assume {:verifier.code 0} true;
    $p4209 := $bitcast.ref.ref($p4208);
    goto corral_source_split_8447;

  corral_source_split_8447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1963} $p4210 := skb_frag_page($p4209);
    goto corral_source_split_8448;

  corral_source_split_8448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1964} get_page($p4210);
    goto corral_source_split_8449;

  corral_source_split_8449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1965} $p4211 := lowmem_page_address($p4210);
    goto corral_source_split_8450;

  corral_source_split_8450:
    assume {:verifier.code 0} true;
    $i4212 := $p2i.ref.i64($p4211);
    goto corral_source_split_8451;

  corral_source_split_8451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1966} gnttab_end_foreign_access($i4204, 0, $i4212);
    goto corral_source_split_8452;

  corral_source_split_8452:
    assume {:verifier.code 0} true;
    $p4214 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(233, 4));
    goto corral_source_split_8453;

  corral_source_split_8453:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4214, 0);
    goto corral_source_split_8454;

  corral_source_split_8454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1967} kfree_skb($p4199);
    goto corral_source_split_8455;

  corral_source_split_8455:
    assume {:verifier.code 0} true;
    goto $bb1874;

  $bb1874:
    assume {:verifier.code 0} true;
    goto $bb1875;

  $bb1875:
    assume {:verifier.code 0} true;
    $p4216 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(234, 8));
    goto corral_source_split_8457;

  corral_source_split_8457:
    assume {:verifier.code 0} true;
    $p4217 := $load.ref($M.0, $p4216);
    goto corral_source_split_8458;

  corral_source_split_8458:
    assume {:verifier.code 0} true;
    $i4218 := $p2i.ref.i64($p4217);
    goto corral_source_split_8459;

  corral_source_split_8459:
    assume {:verifier.code 0} true;
    $i4219 := $eq.i64($i4218, 0);
    goto corral_source_split_8460;

  corral_source_split_8460:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4219} true;
    goto $bb1876, $bb1877;

  $bb1877:
    assume !($i4219 == 1);
    assume {:verifier.code 0} true;
    goto $bb1878;

  $bb1878:
    assume {:verifier.code 0} true;
    $p4221 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(234, 4));
    goto corral_source_split_8464;

  corral_source_split_8464:
    assume {:verifier.code 0} true;
    $i4222 := $load.i32($M.0, $p4221);
    goto corral_source_split_8465;

  corral_source_split_8465:
    assume {:verifier.code 0} true;
    $i4223 := $eq.i32($i4222, 0);
    goto corral_source_split_8466;

  corral_source_split_8466:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4223} true;
    goto $bb1879, $bb1880;

  $bb1880:
    assume !($i4223 == 1);
    assume {:verifier.code 0} true;
    goto $bb1881;

  $bb1881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1968} $p4224 := skb_end_pointer($p4217);
    goto corral_source_split_8470;

  corral_source_split_8470:
    assume {:verifier.code 0} true;
    $p4225 := $bitcast.ref.ref($p4224);
    goto corral_source_split_8471;

  corral_source_split_8471:
    assume {:verifier.code 0} true;
    $p4226 := $add.ref($add.ref($p4225, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_8472;

  corral_source_split_8472:
    assume {:verifier.code 0} true;
    $p4227 := $bitcast.ref.ref($p4226);
    goto corral_source_split_8473;

  corral_source_split_8473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1969} $p4228 := skb_frag_page($p4227);
    goto corral_source_split_8474;

  corral_source_split_8474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1970} get_page($p4228);
    goto corral_source_split_8475;

  corral_source_split_8475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1971} $p4229 := lowmem_page_address($p4228);
    goto corral_source_split_8476;

  corral_source_split_8476:
    assume {:verifier.code 0} true;
    $i4230 := $p2i.ref.i64($p4229);
    goto corral_source_split_8477;

  corral_source_split_8477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1972} gnttab_end_foreign_access($i4222, 0, $i4230);
    goto corral_source_split_8478;

  corral_source_split_8478:
    assume {:verifier.code 0} true;
    $p4232 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(234, 4));
    goto corral_source_split_8479;

  corral_source_split_8479:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4232, 0);
    goto corral_source_split_8480;

  corral_source_split_8480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1973} kfree_skb($p4217);
    goto corral_source_split_8481;

  corral_source_split_8481:
    assume {:verifier.code 0} true;
    goto $bb1882;

  $bb1882:
    assume {:verifier.code 0} true;
    goto $bb1883;

  $bb1883:
    assume {:verifier.code 0} true;
    $p4234 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(235, 8));
    goto corral_source_split_8483;

  corral_source_split_8483:
    assume {:verifier.code 0} true;
    $p4235 := $load.ref($M.0, $p4234);
    goto corral_source_split_8484;

  corral_source_split_8484:
    assume {:verifier.code 0} true;
    $i4236 := $p2i.ref.i64($p4235);
    goto corral_source_split_8485;

  corral_source_split_8485:
    assume {:verifier.code 0} true;
    $i4237 := $eq.i64($i4236, 0);
    goto corral_source_split_8486;

  corral_source_split_8486:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4237} true;
    goto $bb1884, $bb1885;

  $bb1885:
    assume !($i4237 == 1);
    assume {:verifier.code 0} true;
    goto $bb1886;

  $bb1886:
    assume {:verifier.code 0} true;
    $p4239 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(235, 4));
    goto corral_source_split_8490;

  corral_source_split_8490:
    assume {:verifier.code 0} true;
    $i4240 := $load.i32($M.0, $p4239);
    goto corral_source_split_8491;

  corral_source_split_8491:
    assume {:verifier.code 0} true;
    $i4241 := $eq.i32($i4240, 0);
    goto corral_source_split_8492;

  corral_source_split_8492:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4241} true;
    goto $bb1887, $bb1888;

  $bb1888:
    assume !($i4241 == 1);
    assume {:verifier.code 0} true;
    goto $bb1889;

  $bb1889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1974} $p4242 := skb_end_pointer($p4235);
    goto corral_source_split_8496;

  corral_source_split_8496:
    assume {:verifier.code 0} true;
    $p4243 := $bitcast.ref.ref($p4242);
    goto corral_source_split_8497;

  corral_source_split_8497:
    assume {:verifier.code 0} true;
    $p4244 := $add.ref($add.ref($p4243, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_8498;

  corral_source_split_8498:
    assume {:verifier.code 0} true;
    $p4245 := $bitcast.ref.ref($p4244);
    goto corral_source_split_8499;

  corral_source_split_8499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1975} $p4246 := skb_frag_page($p4245);
    goto corral_source_split_8500;

  corral_source_split_8500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1976} get_page($p4246);
    goto corral_source_split_8501;

  corral_source_split_8501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1977} $p4247 := lowmem_page_address($p4246);
    goto corral_source_split_8502;

  corral_source_split_8502:
    assume {:verifier.code 0} true;
    $i4248 := $p2i.ref.i64($p4247);
    goto corral_source_split_8503;

  corral_source_split_8503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1978} gnttab_end_foreign_access($i4240, 0, $i4248);
    goto corral_source_split_8504;

  corral_source_split_8504:
    assume {:verifier.code 0} true;
    $p4250 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(235, 4));
    goto corral_source_split_8505;

  corral_source_split_8505:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4250, 0);
    goto corral_source_split_8506;

  corral_source_split_8506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1979} kfree_skb($p4235);
    goto corral_source_split_8507;

  corral_source_split_8507:
    assume {:verifier.code 0} true;
    goto $bb1890;

  $bb1890:
    assume {:verifier.code 0} true;
    goto $bb1891;

  $bb1891:
    assume {:verifier.code 0} true;
    $p4252 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(236, 8));
    goto corral_source_split_8509;

  corral_source_split_8509:
    assume {:verifier.code 0} true;
    $p4253 := $load.ref($M.0, $p4252);
    goto corral_source_split_8510;

  corral_source_split_8510:
    assume {:verifier.code 0} true;
    $i4254 := $p2i.ref.i64($p4253);
    goto corral_source_split_8511;

  corral_source_split_8511:
    assume {:verifier.code 0} true;
    $i4255 := $eq.i64($i4254, 0);
    goto corral_source_split_8512;

  corral_source_split_8512:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4255} true;
    goto $bb1892, $bb1893;

  $bb1893:
    assume !($i4255 == 1);
    assume {:verifier.code 0} true;
    goto $bb1894;

  $bb1894:
    assume {:verifier.code 0} true;
    $p4257 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(236, 4));
    goto corral_source_split_8516;

  corral_source_split_8516:
    assume {:verifier.code 0} true;
    $i4258 := $load.i32($M.0, $p4257);
    goto corral_source_split_8517;

  corral_source_split_8517:
    assume {:verifier.code 0} true;
    $i4259 := $eq.i32($i4258, 0);
    goto corral_source_split_8518;

  corral_source_split_8518:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4259} true;
    goto $bb1895, $bb1896;

  $bb1896:
    assume !($i4259 == 1);
    assume {:verifier.code 0} true;
    goto $bb1897;

  $bb1897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1980} $p4260 := skb_end_pointer($p4253);
    goto corral_source_split_8522;

  corral_source_split_8522:
    assume {:verifier.code 0} true;
    $p4261 := $bitcast.ref.ref($p4260);
    goto corral_source_split_8523;

  corral_source_split_8523:
    assume {:verifier.code 0} true;
    $p4262 := $add.ref($add.ref($p4261, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_8524;

  corral_source_split_8524:
    assume {:verifier.code 0} true;
    $p4263 := $bitcast.ref.ref($p4262);
    goto corral_source_split_8525;

  corral_source_split_8525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1981} $p4264 := skb_frag_page($p4263);
    goto corral_source_split_8526;

  corral_source_split_8526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1982} get_page($p4264);
    goto corral_source_split_8527;

  corral_source_split_8527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1983} $p4265 := lowmem_page_address($p4264);
    goto corral_source_split_8528;

  corral_source_split_8528:
    assume {:verifier.code 0} true;
    $i4266 := $p2i.ref.i64($p4265);
    goto corral_source_split_8529;

  corral_source_split_8529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1984} gnttab_end_foreign_access($i4258, 0, $i4266);
    goto corral_source_split_8530;

  corral_source_split_8530:
    assume {:verifier.code 0} true;
    $p4268 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(236, 4));
    goto corral_source_split_8531;

  corral_source_split_8531:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4268, 0);
    goto corral_source_split_8532;

  corral_source_split_8532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1985} kfree_skb($p4253);
    goto corral_source_split_8533;

  corral_source_split_8533:
    assume {:verifier.code 0} true;
    goto $bb1898;

  $bb1898:
    assume {:verifier.code 0} true;
    goto $bb1899;

  $bb1899:
    assume {:verifier.code 0} true;
    $p4270 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(237, 8));
    goto corral_source_split_8535;

  corral_source_split_8535:
    assume {:verifier.code 0} true;
    $p4271 := $load.ref($M.0, $p4270);
    goto corral_source_split_8536;

  corral_source_split_8536:
    assume {:verifier.code 0} true;
    $i4272 := $p2i.ref.i64($p4271);
    goto corral_source_split_8537;

  corral_source_split_8537:
    assume {:verifier.code 0} true;
    $i4273 := $eq.i64($i4272, 0);
    goto corral_source_split_8538;

  corral_source_split_8538:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4273} true;
    goto $bb1900, $bb1901;

  $bb1901:
    assume !($i4273 == 1);
    assume {:verifier.code 0} true;
    goto $bb1902;

  $bb1902:
    assume {:verifier.code 0} true;
    $p4275 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(237, 4));
    goto corral_source_split_8542;

  corral_source_split_8542:
    assume {:verifier.code 0} true;
    $i4276 := $load.i32($M.0, $p4275);
    goto corral_source_split_8543;

  corral_source_split_8543:
    assume {:verifier.code 0} true;
    $i4277 := $eq.i32($i4276, 0);
    goto corral_source_split_8544;

  corral_source_split_8544:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4277} true;
    goto $bb1903, $bb1904;

  $bb1904:
    assume !($i4277 == 1);
    assume {:verifier.code 0} true;
    goto $bb1905;

  $bb1905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1986} $p4278 := skb_end_pointer($p4271);
    goto corral_source_split_8548;

  corral_source_split_8548:
    assume {:verifier.code 0} true;
    $p4279 := $bitcast.ref.ref($p4278);
    goto corral_source_split_8549;

  corral_source_split_8549:
    assume {:verifier.code 0} true;
    $p4280 := $add.ref($add.ref($p4279, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_8550;

  corral_source_split_8550:
    assume {:verifier.code 0} true;
    $p4281 := $bitcast.ref.ref($p4280);
    goto corral_source_split_8551;

  corral_source_split_8551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1987} $p4282 := skb_frag_page($p4281);
    goto corral_source_split_8552;

  corral_source_split_8552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1988} get_page($p4282);
    goto corral_source_split_8553;

  corral_source_split_8553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1989} $p4283 := lowmem_page_address($p4282);
    goto corral_source_split_8554;

  corral_source_split_8554:
    assume {:verifier.code 0} true;
    $i4284 := $p2i.ref.i64($p4283);
    goto corral_source_split_8555;

  corral_source_split_8555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1990} gnttab_end_foreign_access($i4276, 0, $i4284);
    goto corral_source_split_8556;

  corral_source_split_8556:
    assume {:verifier.code 0} true;
    $p4286 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(237, 4));
    goto corral_source_split_8557;

  corral_source_split_8557:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4286, 0);
    goto corral_source_split_8558;

  corral_source_split_8558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1991} kfree_skb($p4271);
    goto corral_source_split_8559;

  corral_source_split_8559:
    assume {:verifier.code 0} true;
    goto $bb1906;

  $bb1906:
    assume {:verifier.code 0} true;
    goto $bb1907;

  $bb1907:
    assume {:verifier.code 0} true;
    $p4288 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(238, 8));
    goto corral_source_split_8561;

  corral_source_split_8561:
    assume {:verifier.code 0} true;
    $p4289 := $load.ref($M.0, $p4288);
    goto corral_source_split_8562;

  corral_source_split_8562:
    assume {:verifier.code 0} true;
    $i4290 := $p2i.ref.i64($p4289);
    goto corral_source_split_8563;

  corral_source_split_8563:
    assume {:verifier.code 0} true;
    $i4291 := $eq.i64($i4290, 0);
    goto corral_source_split_8564;

  corral_source_split_8564:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4291} true;
    goto $bb1908, $bb1909;

  $bb1909:
    assume !($i4291 == 1);
    assume {:verifier.code 0} true;
    goto $bb1910;

  $bb1910:
    assume {:verifier.code 0} true;
    $p4293 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(238, 4));
    goto corral_source_split_8568;

  corral_source_split_8568:
    assume {:verifier.code 0} true;
    $i4294 := $load.i32($M.0, $p4293);
    goto corral_source_split_8569;

  corral_source_split_8569:
    assume {:verifier.code 0} true;
    $i4295 := $eq.i32($i4294, 0);
    goto corral_source_split_8570;

  corral_source_split_8570:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4295} true;
    goto $bb1911, $bb1912;

  $bb1912:
    assume !($i4295 == 1);
    assume {:verifier.code 0} true;
    goto $bb1913;

  $bb1913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1992} $p4296 := skb_end_pointer($p4289);
    goto corral_source_split_8574;

  corral_source_split_8574:
    assume {:verifier.code 0} true;
    $p4297 := $bitcast.ref.ref($p4296);
    goto corral_source_split_8575;

  corral_source_split_8575:
    assume {:verifier.code 0} true;
    $p4298 := $add.ref($add.ref($p4297, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_8576;

  corral_source_split_8576:
    assume {:verifier.code 0} true;
    $p4299 := $bitcast.ref.ref($p4298);
    goto corral_source_split_8577;

  corral_source_split_8577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1993} $p4300 := skb_frag_page($p4299);
    goto corral_source_split_8578;

  corral_source_split_8578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1994} get_page($p4300);
    goto corral_source_split_8579;

  corral_source_split_8579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1995} $p4301 := lowmem_page_address($p4300);
    goto corral_source_split_8580;

  corral_source_split_8580:
    assume {:verifier.code 0} true;
    $i4302 := $p2i.ref.i64($p4301);
    goto corral_source_split_8581;

  corral_source_split_8581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1996} gnttab_end_foreign_access($i4294, 0, $i4302);
    goto corral_source_split_8582;

  corral_source_split_8582:
    assume {:verifier.code 0} true;
    $p4304 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(238, 4));
    goto corral_source_split_8583;

  corral_source_split_8583:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4304, 0);
    goto corral_source_split_8584;

  corral_source_split_8584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1997} kfree_skb($p4289);
    goto corral_source_split_8585;

  corral_source_split_8585:
    assume {:verifier.code 0} true;
    goto $bb1914;

  $bb1914:
    assume {:verifier.code 0} true;
    goto $bb1915;

  $bb1915:
    assume {:verifier.code 0} true;
    $p4306 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(239, 8));
    goto corral_source_split_8587;

  corral_source_split_8587:
    assume {:verifier.code 0} true;
    $p4307 := $load.ref($M.0, $p4306);
    goto corral_source_split_8588;

  corral_source_split_8588:
    assume {:verifier.code 0} true;
    $i4308 := $p2i.ref.i64($p4307);
    goto corral_source_split_8589;

  corral_source_split_8589:
    assume {:verifier.code 0} true;
    $i4309 := $eq.i64($i4308, 0);
    goto corral_source_split_8590;

  corral_source_split_8590:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4309} true;
    goto $bb1916, $bb1917;

  $bb1917:
    assume !($i4309 == 1);
    assume {:verifier.code 0} true;
    goto $bb1918;

  $bb1918:
    assume {:verifier.code 0} true;
    $p4311 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(239, 4));
    goto corral_source_split_8594;

  corral_source_split_8594:
    assume {:verifier.code 0} true;
    $i4312 := $load.i32($M.0, $p4311);
    goto corral_source_split_8595;

  corral_source_split_8595:
    assume {:verifier.code 0} true;
    $i4313 := $eq.i32($i4312, 0);
    goto corral_source_split_8596;

  corral_source_split_8596:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4313} true;
    goto $bb1919, $bb1920;

  $bb1920:
    assume !($i4313 == 1);
    assume {:verifier.code 0} true;
    goto $bb1921;

  $bb1921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1998} $p4314 := skb_end_pointer($p4307);
    goto corral_source_split_8600;

  corral_source_split_8600:
    assume {:verifier.code 0} true;
    $p4315 := $bitcast.ref.ref($p4314);
    goto corral_source_split_8601;

  corral_source_split_8601:
    assume {:verifier.code 0} true;
    $p4316 := $add.ref($add.ref($p4315, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_8602;

  corral_source_split_8602:
    assume {:verifier.code 0} true;
    $p4317 := $bitcast.ref.ref($p4316);
    goto corral_source_split_8603;

  corral_source_split_8603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1999} $p4318 := skb_frag_page($p4317);
    goto corral_source_split_8604;

  corral_source_split_8604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2000} get_page($p4318);
    goto corral_source_split_8605;

  corral_source_split_8605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2001} $p4319 := lowmem_page_address($p4318);
    goto corral_source_split_8606;

  corral_source_split_8606:
    assume {:verifier.code 0} true;
    $i4320 := $p2i.ref.i64($p4319);
    goto corral_source_split_8607;

  corral_source_split_8607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2002} gnttab_end_foreign_access($i4312, 0, $i4320);
    goto corral_source_split_8608;

  corral_source_split_8608:
    assume {:verifier.code 0} true;
    $p4322 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(239, 4));
    goto corral_source_split_8609;

  corral_source_split_8609:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4322, 0);
    goto corral_source_split_8610;

  corral_source_split_8610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2003} kfree_skb($p4307);
    goto corral_source_split_8611;

  corral_source_split_8611:
    assume {:verifier.code 0} true;
    goto $bb1922;

  $bb1922:
    assume {:verifier.code 0} true;
    goto $bb1923;

  $bb1923:
    assume {:verifier.code 0} true;
    $p4324 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(240, 8));
    goto corral_source_split_8613;

  corral_source_split_8613:
    assume {:verifier.code 0} true;
    $p4325 := $load.ref($M.0, $p4324);
    goto corral_source_split_8614;

  corral_source_split_8614:
    assume {:verifier.code 0} true;
    $i4326 := $p2i.ref.i64($p4325);
    goto corral_source_split_8615;

  corral_source_split_8615:
    assume {:verifier.code 0} true;
    $i4327 := $eq.i64($i4326, 0);
    goto corral_source_split_8616;

  corral_source_split_8616:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4327} true;
    goto $bb1924, $bb1925;

  $bb1925:
    assume !($i4327 == 1);
    assume {:verifier.code 0} true;
    goto $bb1926;

  $bb1926:
    assume {:verifier.code 0} true;
    $p4329 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(240, 4));
    goto corral_source_split_8620;

  corral_source_split_8620:
    assume {:verifier.code 0} true;
    $i4330 := $load.i32($M.0, $p4329);
    goto corral_source_split_8621;

  corral_source_split_8621:
    assume {:verifier.code 0} true;
    $i4331 := $eq.i32($i4330, 0);
    goto corral_source_split_8622;

  corral_source_split_8622:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4331} true;
    goto $bb1927, $bb1928;

  $bb1928:
    assume !($i4331 == 1);
    assume {:verifier.code 0} true;
    goto $bb1929;

  $bb1929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2004} $p4332 := skb_end_pointer($p4325);
    goto corral_source_split_8626;

  corral_source_split_8626:
    assume {:verifier.code 0} true;
    $p4333 := $bitcast.ref.ref($p4332);
    goto corral_source_split_8627;

  corral_source_split_8627:
    assume {:verifier.code 0} true;
    $p4334 := $add.ref($add.ref($p4333, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_8628;

  corral_source_split_8628:
    assume {:verifier.code 0} true;
    $p4335 := $bitcast.ref.ref($p4334);
    goto corral_source_split_8629;

  corral_source_split_8629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2005} $p4336 := skb_frag_page($p4335);
    goto corral_source_split_8630;

  corral_source_split_8630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2006} get_page($p4336);
    goto corral_source_split_8631;

  corral_source_split_8631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2007} $p4337 := lowmem_page_address($p4336);
    goto corral_source_split_8632;

  corral_source_split_8632:
    assume {:verifier.code 0} true;
    $i4338 := $p2i.ref.i64($p4337);
    goto corral_source_split_8633;

  corral_source_split_8633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2008} gnttab_end_foreign_access($i4330, 0, $i4338);
    goto corral_source_split_8634;

  corral_source_split_8634:
    assume {:verifier.code 0} true;
    $p4340 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(240, 4));
    goto corral_source_split_8635;

  corral_source_split_8635:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4340, 0);
    goto corral_source_split_8636;

  corral_source_split_8636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2009} kfree_skb($p4325);
    goto corral_source_split_8637;

  corral_source_split_8637:
    assume {:verifier.code 0} true;
    goto $bb1930;

  $bb1930:
    assume {:verifier.code 0} true;
    goto $bb1931;

  $bb1931:
    assume {:verifier.code 0} true;
    $p4342 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(241, 8));
    goto corral_source_split_8639;

  corral_source_split_8639:
    assume {:verifier.code 0} true;
    $p4343 := $load.ref($M.0, $p4342);
    goto corral_source_split_8640;

  corral_source_split_8640:
    assume {:verifier.code 0} true;
    $i4344 := $p2i.ref.i64($p4343);
    goto corral_source_split_8641;

  corral_source_split_8641:
    assume {:verifier.code 0} true;
    $i4345 := $eq.i64($i4344, 0);
    goto corral_source_split_8642;

  corral_source_split_8642:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4345} true;
    goto $bb1932, $bb1933;

  $bb1933:
    assume !($i4345 == 1);
    assume {:verifier.code 0} true;
    goto $bb1934;

  $bb1934:
    assume {:verifier.code 0} true;
    $p4347 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(241, 4));
    goto corral_source_split_8646;

  corral_source_split_8646:
    assume {:verifier.code 0} true;
    $i4348 := $load.i32($M.0, $p4347);
    goto corral_source_split_8647;

  corral_source_split_8647:
    assume {:verifier.code 0} true;
    $i4349 := $eq.i32($i4348, 0);
    goto corral_source_split_8648;

  corral_source_split_8648:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4349} true;
    goto $bb1935, $bb1936;

  $bb1936:
    assume !($i4349 == 1);
    assume {:verifier.code 0} true;
    goto $bb1937;

  $bb1937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2010} $p4350 := skb_end_pointer($p4343);
    goto corral_source_split_8652;

  corral_source_split_8652:
    assume {:verifier.code 0} true;
    $p4351 := $bitcast.ref.ref($p4350);
    goto corral_source_split_8653;

  corral_source_split_8653:
    assume {:verifier.code 0} true;
    $p4352 := $add.ref($add.ref($p4351, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_8654;

  corral_source_split_8654:
    assume {:verifier.code 0} true;
    $p4353 := $bitcast.ref.ref($p4352);
    goto corral_source_split_8655;

  corral_source_split_8655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2011} $p4354 := skb_frag_page($p4353);
    goto corral_source_split_8656;

  corral_source_split_8656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2012} get_page($p4354);
    goto corral_source_split_8657;

  corral_source_split_8657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2013} $p4355 := lowmem_page_address($p4354);
    goto corral_source_split_8658;

  corral_source_split_8658:
    assume {:verifier.code 0} true;
    $i4356 := $p2i.ref.i64($p4355);
    goto corral_source_split_8659;

  corral_source_split_8659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2014} gnttab_end_foreign_access($i4348, 0, $i4356);
    goto corral_source_split_8660;

  corral_source_split_8660:
    assume {:verifier.code 0} true;
    $p4358 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(241, 4));
    goto corral_source_split_8661;

  corral_source_split_8661:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4358, 0);
    goto corral_source_split_8662;

  corral_source_split_8662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2015} kfree_skb($p4343);
    goto corral_source_split_8663;

  corral_source_split_8663:
    assume {:verifier.code 0} true;
    goto $bb1938;

  $bb1938:
    assume {:verifier.code 0} true;
    goto $bb1939;

  $bb1939:
    assume {:verifier.code 0} true;
    $p4360 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(242, 8));
    goto corral_source_split_8665;

  corral_source_split_8665:
    assume {:verifier.code 0} true;
    $p4361 := $load.ref($M.0, $p4360);
    goto corral_source_split_8666;

  corral_source_split_8666:
    assume {:verifier.code 0} true;
    $i4362 := $p2i.ref.i64($p4361);
    goto corral_source_split_8667;

  corral_source_split_8667:
    assume {:verifier.code 0} true;
    $i4363 := $eq.i64($i4362, 0);
    goto corral_source_split_8668;

  corral_source_split_8668:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4363} true;
    goto $bb1940, $bb1941;

  $bb1941:
    assume !($i4363 == 1);
    assume {:verifier.code 0} true;
    goto $bb1942;

  $bb1942:
    assume {:verifier.code 0} true;
    $p4365 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(242, 4));
    goto corral_source_split_8672;

  corral_source_split_8672:
    assume {:verifier.code 0} true;
    $i4366 := $load.i32($M.0, $p4365);
    goto corral_source_split_8673;

  corral_source_split_8673:
    assume {:verifier.code 0} true;
    $i4367 := $eq.i32($i4366, 0);
    goto corral_source_split_8674;

  corral_source_split_8674:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4367} true;
    goto $bb1943, $bb1944;

  $bb1944:
    assume !($i4367 == 1);
    assume {:verifier.code 0} true;
    goto $bb1945;

  $bb1945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2016} $p4368 := skb_end_pointer($p4361);
    goto corral_source_split_8678;

  corral_source_split_8678:
    assume {:verifier.code 0} true;
    $p4369 := $bitcast.ref.ref($p4368);
    goto corral_source_split_8679;

  corral_source_split_8679:
    assume {:verifier.code 0} true;
    $p4370 := $add.ref($add.ref($p4369, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_8680;

  corral_source_split_8680:
    assume {:verifier.code 0} true;
    $p4371 := $bitcast.ref.ref($p4370);
    goto corral_source_split_8681;

  corral_source_split_8681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2017} $p4372 := skb_frag_page($p4371);
    goto corral_source_split_8682;

  corral_source_split_8682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2018} get_page($p4372);
    goto corral_source_split_8683;

  corral_source_split_8683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2019} $p4373 := lowmem_page_address($p4372);
    goto corral_source_split_8684;

  corral_source_split_8684:
    assume {:verifier.code 0} true;
    $i4374 := $p2i.ref.i64($p4373);
    goto corral_source_split_8685;

  corral_source_split_8685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2020} gnttab_end_foreign_access($i4366, 0, $i4374);
    goto corral_source_split_8686;

  corral_source_split_8686:
    assume {:verifier.code 0} true;
    $p4376 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(242, 4));
    goto corral_source_split_8687;

  corral_source_split_8687:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4376, 0);
    goto corral_source_split_8688;

  corral_source_split_8688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2021} kfree_skb($p4361);
    goto corral_source_split_8689;

  corral_source_split_8689:
    assume {:verifier.code 0} true;
    goto $bb1946;

  $bb1946:
    assume {:verifier.code 0} true;
    goto $bb1947;

  $bb1947:
    assume {:verifier.code 0} true;
    $p4378 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(243, 8));
    goto corral_source_split_8691;

  corral_source_split_8691:
    assume {:verifier.code 0} true;
    $p4379 := $load.ref($M.0, $p4378);
    goto corral_source_split_8692;

  corral_source_split_8692:
    assume {:verifier.code 0} true;
    $i4380 := $p2i.ref.i64($p4379);
    goto corral_source_split_8693;

  corral_source_split_8693:
    assume {:verifier.code 0} true;
    $i4381 := $eq.i64($i4380, 0);
    goto corral_source_split_8694;

  corral_source_split_8694:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4381} true;
    goto $bb1948, $bb1949;

  $bb1949:
    assume !($i4381 == 1);
    assume {:verifier.code 0} true;
    goto $bb1950;

  $bb1950:
    assume {:verifier.code 0} true;
    $p4383 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(243, 4));
    goto corral_source_split_8698;

  corral_source_split_8698:
    assume {:verifier.code 0} true;
    $i4384 := $load.i32($M.0, $p4383);
    goto corral_source_split_8699;

  corral_source_split_8699:
    assume {:verifier.code 0} true;
    $i4385 := $eq.i32($i4384, 0);
    goto corral_source_split_8700;

  corral_source_split_8700:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4385} true;
    goto $bb1951, $bb1952;

  $bb1952:
    assume !($i4385 == 1);
    assume {:verifier.code 0} true;
    goto $bb1953;

  $bb1953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2022} $p4386 := skb_end_pointer($p4379);
    goto corral_source_split_8704;

  corral_source_split_8704:
    assume {:verifier.code 0} true;
    $p4387 := $bitcast.ref.ref($p4386);
    goto corral_source_split_8705;

  corral_source_split_8705:
    assume {:verifier.code 0} true;
    $p4388 := $add.ref($add.ref($p4387, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_8706;

  corral_source_split_8706:
    assume {:verifier.code 0} true;
    $p4389 := $bitcast.ref.ref($p4388);
    goto corral_source_split_8707;

  corral_source_split_8707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2023} $p4390 := skb_frag_page($p4389);
    goto corral_source_split_8708;

  corral_source_split_8708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2024} get_page($p4390);
    goto corral_source_split_8709;

  corral_source_split_8709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2025} $p4391 := lowmem_page_address($p4390);
    goto corral_source_split_8710;

  corral_source_split_8710:
    assume {:verifier.code 0} true;
    $i4392 := $p2i.ref.i64($p4391);
    goto corral_source_split_8711;

  corral_source_split_8711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2026} gnttab_end_foreign_access($i4384, 0, $i4392);
    goto corral_source_split_8712;

  corral_source_split_8712:
    assume {:verifier.code 0} true;
    $p4394 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(243, 4));
    goto corral_source_split_8713;

  corral_source_split_8713:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4394, 0);
    goto corral_source_split_8714;

  corral_source_split_8714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2027} kfree_skb($p4379);
    goto corral_source_split_8715;

  corral_source_split_8715:
    assume {:verifier.code 0} true;
    goto $bb1954;

  $bb1954:
    assume {:verifier.code 0} true;
    goto $bb1955;

  $bb1955:
    assume {:verifier.code 0} true;
    $p4396 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(244, 8));
    goto corral_source_split_8717;

  corral_source_split_8717:
    assume {:verifier.code 0} true;
    $p4397 := $load.ref($M.0, $p4396);
    goto corral_source_split_8718;

  corral_source_split_8718:
    assume {:verifier.code 0} true;
    $i4398 := $p2i.ref.i64($p4397);
    goto corral_source_split_8719;

  corral_source_split_8719:
    assume {:verifier.code 0} true;
    $i4399 := $eq.i64($i4398, 0);
    goto corral_source_split_8720;

  corral_source_split_8720:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4399} true;
    goto $bb1956, $bb1957;

  $bb1957:
    assume !($i4399 == 1);
    assume {:verifier.code 0} true;
    goto $bb1958;

  $bb1958:
    assume {:verifier.code 0} true;
    $p4401 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(244, 4));
    goto corral_source_split_8724;

  corral_source_split_8724:
    assume {:verifier.code 0} true;
    $i4402 := $load.i32($M.0, $p4401);
    goto corral_source_split_8725;

  corral_source_split_8725:
    assume {:verifier.code 0} true;
    $i4403 := $eq.i32($i4402, 0);
    goto corral_source_split_8726;

  corral_source_split_8726:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4403} true;
    goto $bb1959, $bb1960;

  $bb1960:
    assume !($i4403 == 1);
    assume {:verifier.code 0} true;
    goto $bb1961;

  $bb1961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2028} $p4404 := skb_end_pointer($p4397);
    goto corral_source_split_8730;

  corral_source_split_8730:
    assume {:verifier.code 0} true;
    $p4405 := $bitcast.ref.ref($p4404);
    goto corral_source_split_8731;

  corral_source_split_8731:
    assume {:verifier.code 0} true;
    $p4406 := $add.ref($add.ref($p4405, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_8732;

  corral_source_split_8732:
    assume {:verifier.code 0} true;
    $p4407 := $bitcast.ref.ref($p4406);
    goto corral_source_split_8733;

  corral_source_split_8733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2029} $p4408 := skb_frag_page($p4407);
    goto corral_source_split_8734;

  corral_source_split_8734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2030} get_page($p4408);
    goto corral_source_split_8735;

  corral_source_split_8735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2031} $p4409 := lowmem_page_address($p4408);
    goto corral_source_split_8736;

  corral_source_split_8736:
    assume {:verifier.code 0} true;
    $i4410 := $p2i.ref.i64($p4409);
    goto corral_source_split_8737;

  corral_source_split_8737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2032} gnttab_end_foreign_access($i4402, 0, $i4410);
    goto corral_source_split_8738;

  corral_source_split_8738:
    assume {:verifier.code 0} true;
    $p4412 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(244, 4));
    goto corral_source_split_8739;

  corral_source_split_8739:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4412, 0);
    goto corral_source_split_8740;

  corral_source_split_8740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2033} kfree_skb($p4397);
    goto corral_source_split_8741;

  corral_source_split_8741:
    assume {:verifier.code 0} true;
    goto $bb1962;

  $bb1962:
    assume {:verifier.code 0} true;
    goto $bb1963;

  $bb1963:
    assume {:verifier.code 0} true;
    $p4414 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(245, 8));
    goto corral_source_split_8743;

  corral_source_split_8743:
    assume {:verifier.code 0} true;
    $p4415 := $load.ref($M.0, $p4414);
    goto corral_source_split_8744;

  corral_source_split_8744:
    assume {:verifier.code 0} true;
    $i4416 := $p2i.ref.i64($p4415);
    goto corral_source_split_8745;

  corral_source_split_8745:
    assume {:verifier.code 0} true;
    $i4417 := $eq.i64($i4416, 0);
    goto corral_source_split_8746;

  corral_source_split_8746:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4417} true;
    goto $bb1964, $bb1965;

  $bb1965:
    assume !($i4417 == 1);
    assume {:verifier.code 0} true;
    goto $bb1966;

  $bb1966:
    assume {:verifier.code 0} true;
    $p4419 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(245, 4));
    goto corral_source_split_8750;

  corral_source_split_8750:
    assume {:verifier.code 0} true;
    $i4420 := $load.i32($M.0, $p4419);
    goto corral_source_split_8751;

  corral_source_split_8751:
    assume {:verifier.code 0} true;
    $i4421 := $eq.i32($i4420, 0);
    goto corral_source_split_8752;

  corral_source_split_8752:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4421} true;
    goto $bb1967, $bb1968;

  $bb1968:
    assume !($i4421 == 1);
    assume {:verifier.code 0} true;
    goto $bb1969;

  $bb1969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2034} $p4422 := skb_end_pointer($p4415);
    goto corral_source_split_8756;

  corral_source_split_8756:
    assume {:verifier.code 0} true;
    $p4423 := $bitcast.ref.ref($p4422);
    goto corral_source_split_8757;

  corral_source_split_8757:
    assume {:verifier.code 0} true;
    $p4424 := $add.ref($add.ref($p4423, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_8758;

  corral_source_split_8758:
    assume {:verifier.code 0} true;
    $p4425 := $bitcast.ref.ref($p4424);
    goto corral_source_split_8759;

  corral_source_split_8759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2035} $p4426 := skb_frag_page($p4425);
    goto corral_source_split_8760;

  corral_source_split_8760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2036} get_page($p4426);
    goto corral_source_split_8761;

  corral_source_split_8761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2037} $p4427 := lowmem_page_address($p4426);
    goto corral_source_split_8762;

  corral_source_split_8762:
    assume {:verifier.code 0} true;
    $i4428 := $p2i.ref.i64($p4427);
    goto corral_source_split_8763;

  corral_source_split_8763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2038} gnttab_end_foreign_access($i4420, 0, $i4428);
    goto corral_source_split_8764;

  corral_source_split_8764:
    assume {:verifier.code 0} true;
    $p4430 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(245, 4));
    goto corral_source_split_8765;

  corral_source_split_8765:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4430, 0);
    goto corral_source_split_8766;

  corral_source_split_8766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2039} kfree_skb($p4415);
    goto corral_source_split_8767;

  corral_source_split_8767:
    assume {:verifier.code 0} true;
    goto $bb1970;

  $bb1970:
    assume {:verifier.code 0} true;
    goto $bb1971;

  $bb1971:
    assume {:verifier.code 0} true;
    $p4432 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(246, 8));
    goto corral_source_split_8769;

  corral_source_split_8769:
    assume {:verifier.code 0} true;
    $p4433 := $load.ref($M.0, $p4432);
    goto corral_source_split_8770;

  corral_source_split_8770:
    assume {:verifier.code 0} true;
    $i4434 := $p2i.ref.i64($p4433);
    goto corral_source_split_8771;

  corral_source_split_8771:
    assume {:verifier.code 0} true;
    $i4435 := $eq.i64($i4434, 0);
    goto corral_source_split_8772;

  corral_source_split_8772:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4435} true;
    goto $bb1972, $bb1973;

  $bb1973:
    assume !($i4435 == 1);
    assume {:verifier.code 0} true;
    goto $bb1974;

  $bb1974:
    assume {:verifier.code 0} true;
    $p4437 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(246, 4));
    goto corral_source_split_8776;

  corral_source_split_8776:
    assume {:verifier.code 0} true;
    $i4438 := $load.i32($M.0, $p4437);
    goto corral_source_split_8777;

  corral_source_split_8777:
    assume {:verifier.code 0} true;
    $i4439 := $eq.i32($i4438, 0);
    goto corral_source_split_8778;

  corral_source_split_8778:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4439} true;
    goto $bb1975, $bb1976;

  $bb1976:
    assume !($i4439 == 1);
    assume {:verifier.code 0} true;
    goto $bb1977;

  $bb1977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2040} $p4440 := skb_end_pointer($p4433);
    goto corral_source_split_8782;

  corral_source_split_8782:
    assume {:verifier.code 0} true;
    $p4441 := $bitcast.ref.ref($p4440);
    goto corral_source_split_8783;

  corral_source_split_8783:
    assume {:verifier.code 0} true;
    $p4442 := $add.ref($add.ref($p4441, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_8784;

  corral_source_split_8784:
    assume {:verifier.code 0} true;
    $p4443 := $bitcast.ref.ref($p4442);
    goto corral_source_split_8785;

  corral_source_split_8785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2041} $p4444 := skb_frag_page($p4443);
    goto corral_source_split_8786;

  corral_source_split_8786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2042} get_page($p4444);
    goto corral_source_split_8787;

  corral_source_split_8787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2043} $p4445 := lowmem_page_address($p4444);
    goto corral_source_split_8788;

  corral_source_split_8788:
    assume {:verifier.code 0} true;
    $i4446 := $p2i.ref.i64($p4445);
    goto corral_source_split_8789;

  corral_source_split_8789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2044} gnttab_end_foreign_access($i4438, 0, $i4446);
    goto corral_source_split_8790;

  corral_source_split_8790:
    assume {:verifier.code 0} true;
    $p4448 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(246, 4));
    goto corral_source_split_8791;

  corral_source_split_8791:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4448, 0);
    goto corral_source_split_8792;

  corral_source_split_8792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2045} kfree_skb($p4433);
    goto corral_source_split_8793;

  corral_source_split_8793:
    assume {:verifier.code 0} true;
    goto $bb1978;

  $bb1978:
    assume {:verifier.code 0} true;
    goto $bb1979;

  $bb1979:
    assume {:verifier.code 0} true;
    $p4450 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(247, 8));
    goto corral_source_split_8795;

  corral_source_split_8795:
    assume {:verifier.code 0} true;
    $p4451 := $load.ref($M.0, $p4450);
    goto corral_source_split_8796;

  corral_source_split_8796:
    assume {:verifier.code 0} true;
    $i4452 := $p2i.ref.i64($p4451);
    goto corral_source_split_8797;

  corral_source_split_8797:
    assume {:verifier.code 0} true;
    $i4453 := $eq.i64($i4452, 0);
    goto corral_source_split_8798;

  corral_source_split_8798:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4453} true;
    goto $bb1980, $bb1981;

  $bb1981:
    assume !($i4453 == 1);
    assume {:verifier.code 0} true;
    goto $bb1982;

  $bb1982:
    assume {:verifier.code 0} true;
    $p4455 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(247, 4));
    goto corral_source_split_8802;

  corral_source_split_8802:
    assume {:verifier.code 0} true;
    $i4456 := $load.i32($M.0, $p4455);
    goto corral_source_split_8803;

  corral_source_split_8803:
    assume {:verifier.code 0} true;
    $i4457 := $eq.i32($i4456, 0);
    goto corral_source_split_8804;

  corral_source_split_8804:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4457} true;
    goto $bb1983, $bb1984;

  $bb1984:
    assume !($i4457 == 1);
    assume {:verifier.code 0} true;
    goto $bb1985;

  $bb1985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2046} $p4458 := skb_end_pointer($p4451);
    goto corral_source_split_8808;

  corral_source_split_8808:
    assume {:verifier.code 0} true;
    $p4459 := $bitcast.ref.ref($p4458);
    goto corral_source_split_8809;

  corral_source_split_8809:
    assume {:verifier.code 0} true;
    $p4460 := $add.ref($add.ref($p4459, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_8810;

  corral_source_split_8810:
    assume {:verifier.code 0} true;
    $p4461 := $bitcast.ref.ref($p4460);
    goto corral_source_split_8811;

  corral_source_split_8811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2047} $p4462 := skb_frag_page($p4461);
    goto corral_source_split_8812;

  corral_source_split_8812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2048} get_page($p4462);
    goto corral_source_split_8813;

  corral_source_split_8813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2049} $p4463 := lowmem_page_address($p4462);
    goto corral_source_split_8814;

  corral_source_split_8814:
    assume {:verifier.code 0} true;
    $i4464 := $p2i.ref.i64($p4463);
    goto corral_source_split_8815;

  corral_source_split_8815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2050} gnttab_end_foreign_access($i4456, 0, $i4464);
    goto corral_source_split_8816;

  corral_source_split_8816:
    assume {:verifier.code 0} true;
    $p4466 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(247, 4));
    goto corral_source_split_8817;

  corral_source_split_8817:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4466, 0);
    goto corral_source_split_8818;

  corral_source_split_8818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2051} kfree_skb($p4451);
    goto corral_source_split_8819;

  corral_source_split_8819:
    assume {:verifier.code 0} true;
    goto $bb1986;

  $bb1986:
    assume {:verifier.code 0} true;
    goto $bb1987;

  $bb1987:
    assume {:verifier.code 0} true;
    $p4468 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(248, 8));
    goto corral_source_split_8821;

  corral_source_split_8821:
    assume {:verifier.code 0} true;
    $p4469 := $load.ref($M.0, $p4468);
    goto corral_source_split_8822;

  corral_source_split_8822:
    assume {:verifier.code 0} true;
    $i4470 := $p2i.ref.i64($p4469);
    goto corral_source_split_8823;

  corral_source_split_8823:
    assume {:verifier.code 0} true;
    $i4471 := $eq.i64($i4470, 0);
    goto corral_source_split_8824;

  corral_source_split_8824:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4471} true;
    goto $bb1988, $bb1989;

  $bb1989:
    assume !($i4471 == 1);
    assume {:verifier.code 0} true;
    goto $bb1990;

  $bb1990:
    assume {:verifier.code 0} true;
    $p4473 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(248, 4));
    goto corral_source_split_8828;

  corral_source_split_8828:
    assume {:verifier.code 0} true;
    $i4474 := $load.i32($M.0, $p4473);
    goto corral_source_split_8829;

  corral_source_split_8829:
    assume {:verifier.code 0} true;
    $i4475 := $eq.i32($i4474, 0);
    goto corral_source_split_8830;

  corral_source_split_8830:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4475} true;
    goto $bb1991, $bb1992;

  $bb1992:
    assume !($i4475 == 1);
    assume {:verifier.code 0} true;
    goto $bb1993;

  $bb1993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2052} $p4476 := skb_end_pointer($p4469);
    goto corral_source_split_8834;

  corral_source_split_8834:
    assume {:verifier.code 0} true;
    $p4477 := $bitcast.ref.ref($p4476);
    goto corral_source_split_8835;

  corral_source_split_8835:
    assume {:verifier.code 0} true;
    $p4478 := $add.ref($add.ref($p4477, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_8836;

  corral_source_split_8836:
    assume {:verifier.code 0} true;
    $p4479 := $bitcast.ref.ref($p4478);
    goto corral_source_split_8837;

  corral_source_split_8837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2053} $p4480 := skb_frag_page($p4479);
    goto corral_source_split_8838;

  corral_source_split_8838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2054} get_page($p4480);
    goto corral_source_split_8839;

  corral_source_split_8839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2055} $p4481 := lowmem_page_address($p4480);
    goto corral_source_split_8840;

  corral_source_split_8840:
    assume {:verifier.code 0} true;
    $i4482 := $p2i.ref.i64($p4481);
    goto corral_source_split_8841;

  corral_source_split_8841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2056} gnttab_end_foreign_access($i4474, 0, $i4482);
    goto corral_source_split_8842;

  corral_source_split_8842:
    assume {:verifier.code 0} true;
    $p4484 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(248, 4));
    goto corral_source_split_8843;

  corral_source_split_8843:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4484, 0);
    goto corral_source_split_8844;

  corral_source_split_8844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2057} kfree_skb($p4469);
    goto corral_source_split_8845;

  corral_source_split_8845:
    assume {:verifier.code 0} true;
    goto $bb1994;

  $bb1994:
    assume {:verifier.code 0} true;
    goto $bb1995;

  $bb1995:
    assume {:verifier.code 0} true;
    $p4486 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(249, 8));
    goto corral_source_split_8847;

  corral_source_split_8847:
    assume {:verifier.code 0} true;
    $p4487 := $load.ref($M.0, $p4486);
    goto corral_source_split_8848;

  corral_source_split_8848:
    assume {:verifier.code 0} true;
    $i4488 := $p2i.ref.i64($p4487);
    goto corral_source_split_8849;

  corral_source_split_8849:
    assume {:verifier.code 0} true;
    $i4489 := $eq.i64($i4488, 0);
    goto corral_source_split_8850;

  corral_source_split_8850:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4489} true;
    goto $bb1996, $bb1997;

  $bb1997:
    assume !($i4489 == 1);
    assume {:verifier.code 0} true;
    goto $bb1998;

  $bb1998:
    assume {:verifier.code 0} true;
    $p4491 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(249, 4));
    goto corral_source_split_8854;

  corral_source_split_8854:
    assume {:verifier.code 0} true;
    $i4492 := $load.i32($M.0, $p4491);
    goto corral_source_split_8855;

  corral_source_split_8855:
    assume {:verifier.code 0} true;
    $i4493 := $eq.i32($i4492, 0);
    goto corral_source_split_8856;

  corral_source_split_8856:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4493} true;
    goto $bb1999, $bb2000;

  $bb2000:
    assume !($i4493 == 1);
    assume {:verifier.code 0} true;
    goto $bb2001;

  $bb2001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2058} $p4494 := skb_end_pointer($p4487);
    goto corral_source_split_8860;

  corral_source_split_8860:
    assume {:verifier.code 0} true;
    $p4495 := $bitcast.ref.ref($p4494);
    goto corral_source_split_8861;

  corral_source_split_8861:
    assume {:verifier.code 0} true;
    $p4496 := $add.ref($add.ref($p4495, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_8862;

  corral_source_split_8862:
    assume {:verifier.code 0} true;
    $p4497 := $bitcast.ref.ref($p4496);
    goto corral_source_split_8863;

  corral_source_split_8863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2059} $p4498 := skb_frag_page($p4497);
    goto corral_source_split_8864;

  corral_source_split_8864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2060} get_page($p4498);
    goto corral_source_split_8865;

  corral_source_split_8865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2061} $p4499 := lowmem_page_address($p4498);
    goto corral_source_split_8866;

  corral_source_split_8866:
    assume {:verifier.code 0} true;
    $i4500 := $p2i.ref.i64($p4499);
    goto corral_source_split_8867;

  corral_source_split_8867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2062} gnttab_end_foreign_access($i4492, 0, $i4500);
    goto corral_source_split_8868;

  corral_source_split_8868:
    assume {:verifier.code 0} true;
    $p4502 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(249, 4));
    goto corral_source_split_8869;

  corral_source_split_8869:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4502, 0);
    goto corral_source_split_8870;

  corral_source_split_8870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2063} kfree_skb($p4487);
    goto corral_source_split_8871;

  corral_source_split_8871:
    assume {:verifier.code 0} true;
    goto $bb2002;

  $bb2002:
    assume {:verifier.code 0} true;
    goto $bb2003;

  $bb2003:
    assume {:verifier.code 0} true;
    $p4504 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(250, 8));
    goto corral_source_split_8873;

  corral_source_split_8873:
    assume {:verifier.code 0} true;
    $p4505 := $load.ref($M.0, $p4504);
    goto corral_source_split_8874;

  corral_source_split_8874:
    assume {:verifier.code 0} true;
    $i4506 := $p2i.ref.i64($p4505);
    goto corral_source_split_8875;

  corral_source_split_8875:
    assume {:verifier.code 0} true;
    $i4507 := $eq.i64($i4506, 0);
    goto corral_source_split_8876;

  corral_source_split_8876:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4507} true;
    goto $bb2004, $bb2005;

  $bb2005:
    assume !($i4507 == 1);
    assume {:verifier.code 0} true;
    goto $bb2006;

  $bb2006:
    assume {:verifier.code 0} true;
    $p4509 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(250, 4));
    goto corral_source_split_8880;

  corral_source_split_8880:
    assume {:verifier.code 0} true;
    $i4510 := $load.i32($M.0, $p4509);
    goto corral_source_split_8881;

  corral_source_split_8881:
    assume {:verifier.code 0} true;
    $i4511 := $eq.i32($i4510, 0);
    goto corral_source_split_8882;

  corral_source_split_8882:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4511} true;
    goto $bb2007, $bb2008;

  $bb2008:
    assume !($i4511 == 1);
    assume {:verifier.code 0} true;
    goto $bb2009;

  $bb2009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2064} $p4512 := skb_end_pointer($p4505);
    goto corral_source_split_8886;

  corral_source_split_8886:
    assume {:verifier.code 0} true;
    $p4513 := $bitcast.ref.ref($p4512);
    goto corral_source_split_8887;

  corral_source_split_8887:
    assume {:verifier.code 0} true;
    $p4514 := $add.ref($add.ref($p4513, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_8888;

  corral_source_split_8888:
    assume {:verifier.code 0} true;
    $p4515 := $bitcast.ref.ref($p4514);
    goto corral_source_split_8889;

  corral_source_split_8889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2065} $p4516 := skb_frag_page($p4515);
    goto corral_source_split_8890;

  corral_source_split_8890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2066} get_page($p4516);
    goto corral_source_split_8891;

  corral_source_split_8891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2067} $p4517 := lowmem_page_address($p4516);
    goto corral_source_split_8892;

  corral_source_split_8892:
    assume {:verifier.code 0} true;
    $i4518 := $p2i.ref.i64($p4517);
    goto corral_source_split_8893;

  corral_source_split_8893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2068} gnttab_end_foreign_access($i4510, 0, $i4518);
    goto corral_source_split_8894;

  corral_source_split_8894:
    assume {:verifier.code 0} true;
    $p4520 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(250, 4));
    goto corral_source_split_8895;

  corral_source_split_8895:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4520, 0);
    goto corral_source_split_8896;

  corral_source_split_8896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2069} kfree_skb($p4505);
    goto corral_source_split_8897;

  corral_source_split_8897:
    assume {:verifier.code 0} true;
    goto $bb2010;

  $bb2010:
    assume {:verifier.code 0} true;
    goto $bb2011;

  $bb2011:
    assume {:verifier.code 0} true;
    $p4522 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(251, 8));
    goto corral_source_split_8899;

  corral_source_split_8899:
    assume {:verifier.code 0} true;
    $p4523 := $load.ref($M.0, $p4522);
    goto corral_source_split_8900;

  corral_source_split_8900:
    assume {:verifier.code 0} true;
    $i4524 := $p2i.ref.i64($p4523);
    goto corral_source_split_8901;

  corral_source_split_8901:
    assume {:verifier.code 0} true;
    $i4525 := $eq.i64($i4524, 0);
    goto corral_source_split_8902;

  corral_source_split_8902:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4525} true;
    goto $bb2012, $bb2013;

  $bb2013:
    assume !($i4525 == 1);
    assume {:verifier.code 0} true;
    goto $bb2014;

  $bb2014:
    assume {:verifier.code 0} true;
    $p4527 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(251, 4));
    goto corral_source_split_8906;

  corral_source_split_8906:
    assume {:verifier.code 0} true;
    $i4528 := $load.i32($M.0, $p4527);
    goto corral_source_split_8907;

  corral_source_split_8907:
    assume {:verifier.code 0} true;
    $i4529 := $eq.i32($i4528, 0);
    goto corral_source_split_8908;

  corral_source_split_8908:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4529} true;
    goto $bb2015, $bb2016;

  $bb2016:
    assume !($i4529 == 1);
    assume {:verifier.code 0} true;
    goto $bb2017;

  $bb2017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2070} $p4530 := skb_end_pointer($p4523);
    goto corral_source_split_8912;

  corral_source_split_8912:
    assume {:verifier.code 0} true;
    $p4531 := $bitcast.ref.ref($p4530);
    goto corral_source_split_8913;

  corral_source_split_8913:
    assume {:verifier.code 0} true;
    $p4532 := $add.ref($add.ref($p4531, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_8914;

  corral_source_split_8914:
    assume {:verifier.code 0} true;
    $p4533 := $bitcast.ref.ref($p4532);
    goto corral_source_split_8915;

  corral_source_split_8915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2071} $p4534 := skb_frag_page($p4533);
    goto corral_source_split_8916;

  corral_source_split_8916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2072} get_page($p4534);
    goto corral_source_split_8917;

  corral_source_split_8917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2073} $p4535 := lowmem_page_address($p4534);
    goto corral_source_split_8918;

  corral_source_split_8918:
    assume {:verifier.code 0} true;
    $i4536 := $p2i.ref.i64($p4535);
    goto corral_source_split_8919;

  corral_source_split_8919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2074} gnttab_end_foreign_access($i4528, 0, $i4536);
    goto corral_source_split_8920;

  corral_source_split_8920:
    assume {:verifier.code 0} true;
    $p4538 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(251, 4));
    goto corral_source_split_8921;

  corral_source_split_8921:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4538, 0);
    goto corral_source_split_8922;

  corral_source_split_8922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2075} kfree_skb($p4523);
    goto corral_source_split_8923;

  corral_source_split_8923:
    assume {:verifier.code 0} true;
    goto $bb2018;

  $bb2018:
    assume {:verifier.code 0} true;
    goto $bb2019;

  $bb2019:
    assume {:verifier.code 0} true;
    $p4540 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(252, 8));
    goto corral_source_split_8925;

  corral_source_split_8925:
    assume {:verifier.code 0} true;
    $p4541 := $load.ref($M.0, $p4540);
    goto corral_source_split_8926;

  corral_source_split_8926:
    assume {:verifier.code 0} true;
    $i4542 := $p2i.ref.i64($p4541);
    goto corral_source_split_8927;

  corral_source_split_8927:
    assume {:verifier.code 0} true;
    $i4543 := $eq.i64($i4542, 0);
    goto corral_source_split_8928;

  corral_source_split_8928:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4543} true;
    goto $bb2020, $bb2021;

  $bb2021:
    assume !($i4543 == 1);
    assume {:verifier.code 0} true;
    goto $bb2022;

  $bb2022:
    assume {:verifier.code 0} true;
    $p4545 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(252, 4));
    goto corral_source_split_8932;

  corral_source_split_8932:
    assume {:verifier.code 0} true;
    $i4546 := $load.i32($M.0, $p4545);
    goto corral_source_split_8933;

  corral_source_split_8933:
    assume {:verifier.code 0} true;
    $i4547 := $eq.i32($i4546, 0);
    goto corral_source_split_8934;

  corral_source_split_8934:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4547} true;
    goto $bb2023, $bb2024;

  $bb2024:
    assume !($i4547 == 1);
    assume {:verifier.code 0} true;
    goto $bb2025;

  $bb2025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2076} $p4548 := skb_end_pointer($p4541);
    goto corral_source_split_8938;

  corral_source_split_8938:
    assume {:verifier.code 0} true;
    $p4549 := $bitcast.ref.ref($p4548);
    goto corral_source_split_8939;

  corral_source_split_8939:
    assume {:verifier.code 0} true;
    $p4550 := $add.ref($add.ref($p4549, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_8940;

  corral_source_split_8940:
    assume {:verifier.code 0} true;
    $p4551 := $bitcast.ref.ref($p4550);
    goto corral_source_split_8941;

  corral_source_split_8941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2077} $p4552 := skb_frag_page($p4551);
    goto corral_source_split_8942;

  corral_source_split_8942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2078} get_page($p4552);
    goto corral_source_split_8943;

  corral_source_split_8943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2079} $p4553 := lowmem_page_address($p4552);
    goto corral_source_split_8944;

  corral_source_split_8944:
    assume {:verifier.code 0} true;
    $i4554 := $p2i.ref.i64($p4553);
    goto corral_source_split_8945;

  corral_source_split_8945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2080} gnttab_end_foreign_access($i4546, 0, $i4554);
    goto corral_source_split_8946;

  corral_source_split_8946:
    assume {:verifier.code 0} true;
    $p4556 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(252, 4));
    goto corral_source_split_8947;

  corral_source_split_8947:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4556, 0);
    goto corral_source_split_8948;

  corral_source_split_8948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2081} kfree_skb($p4541);
    goto corral_source_split_8949;

  corral_source_split_8949:
    assume {:verifier.code 0} true;
    goto $bb2026;

  $bb2026:
    assume {:verifier.code 0} true;
    goto $bb2027;

  $bb2027:
    assume {:verifier.code 0} true;
    $p4558 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(253, 8));
    goto corral_source_split_8951;

  corral_source_split_8951:
    assume {:verifier.code 0} true;
    $p4559 := $load.ref($M.0, $p4558);
    goto corral_source_split_8952;

  corral_source_split_8952:
    assume {:verifier.code 0} true;
    $i4560 := $p2i.ref.i64($p4559);
    goto corral_source_split_8953;

  corral_source_split_8953:
    assume {:verifier.code 0} true;
    $i4561 := $eq.i64($i4560, 0);
    goto corral_source_split_8954;

  corral_source_split_8954:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4561} true;
    goto $bb2028, $bb2029;

  $bb2029:
    assume !($i4561 == 1);
    assume {:verifier.code 0} true;
    goto $bb2030;

  $bb2030:
    assume {:verifier.code 0} true;
    $p4563 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(253, 4));
    goto corral_source_split_8958;

  corral_source_split_8958:
    assume {:verifier.code 0} true;
    $i4564 := $load.i32($M.0, $p4563);
    goto corral_source_split_8959;

  corral_source_split_8959:
    assume {:verifier.code 0} true;
    $i4565 := $eq.i32($i4564, 0);
    goto corral_source_split_8960;

  corral_source_split_8960:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4565} true;
    goto $bb2031, $bb2032;

  $bb2032:
    assume !($i4565 == 1);
    assume {:verifier.code 0} true;
    goto $bb2033;

  $bb2033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2082} $p4566 := skb_end_pointer($p4559);
    goto corral_source_split_8964;

  corral_source_split_8964:
    assume {:verifier.code 0} true;
    $p4567 := $bitcast.ref.ref($p4566);
    goto corral_source_split_8965;

  corral_source_split_8965:
    assume {:verifier.code 0} true;
    $p4568 := $add.ref($add.ref($p4567, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_8966;

  corral_source_split_8966:
    assume {:verifier.code 0} true;
    $p4569 := $bitcast.ref.ref($p4568);
    goto corral_source_split_8967;

  corral_source_split_8967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2083} $p4570 := skb_frag_page($p4569);
    goto corral_source_split_8968;

  corral_source_split_8968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2084} get_page($p4570);
    goto corral_source_split_8969;

  corral_source_split_8969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2085} $p4571 := lowmem_page_address($p4570);
    goto corral_source_split_8970;

  corral_source_split_8970:
    assume {:verifier.code 0} true;
    $i4572 := $p2i.ref.i64($p4571);
    goto corral_source_split_8971;

  corral_source_split_8971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2086} gnttab_end_foreign_access($i4564, 0, $i4572);
    goto corral_source_split_8972;

  corral_source_split_8972:
    assume {:verifier.code 0} true;
    $p4574 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(253, 4));
    goto corral_source_split_8973;

  corral_source_split_8973:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4574, 0);
    goto corral_source_split_8974;

  corral_source_split_8974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2087} kfree_skb($p4559);
    goto corral_source_split_8975;

  corral_source_split_8975:
    assume {:verifier.code 0} true;
    goto $bb2034;

  $bb2034:
    assume {:verifier.code 0} true;
    goto $bb2035;

  $bb2035:
    assume {:verifier.code 0} true;
    $p4576 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(254, 8));
    goto corral_source_split_8977;

  corral_source_split_8977:
    assume {:verifier.code 0} true;
    $p4577 := $load.ref($M.0, $p4576);
    goto corral_source_split_8978;

  corral_source_split_8978:
    assume {:verifier.code 0} true;
    $i4578 := $p2i.ref.i64($p4577);
    goto corral_source_split_8979;

  corral_source_split_8979:
    assume {:verifier.code 0} true;
    $i4579 := $eq.i64($i4578, 0);
    goto corral_source_split_8980;

  corral_source_split_8980:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4579} true;
    goto $bb2036, $bb2037;

  $bb2037:
    assume !($i4579 == 1);
    assume {:verifier.code 0} true;
    goto $bb2038;

  $bb2038:
    assume {:verifier.code 0} true;
    $p4581 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(254, 4));
    goto corral_source_split_8984;

  corral_source_split_8984:
    assume {:verifier.code 0} true;
    $i4582 := $load.i32($M.0, $p4581);
    goto corral_source_split_8985;

  corral_source_split_8985:
    assume {:verifier.code 0} true;
    $i4583 := $eq.i32($i4582, 0);
    goto corral_source_split_8986;

  corral_source_split_8986:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4583} true;
    goto $bb2039, $bb2040;

  $bb2040:
    assume !($i4583 == 1);
    assume {:verifier.code 0} true;
    goto $bb2041;

  $bb2041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2088} $p4584 := skb_end_pointer($p4577);
    goto corral_source_split_8990;

  corral_source_split_8990:
    assume {:verifier.code 0} true;
    $p4585 := $bitcast.ref.ref($p4584);
    goto corral_source_split_8991;

  corral_source_split_8991:
    assume {:verifier.code 0} true;
    $p4586 := $add.ref($add.ref($p4585, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_8992;

  corral_source_split_8992:
    assume {:verifier.code 0} true;
    $p4587 := $bitcast.ref.ref($p4586);
    goto corral_source_split_8993;

  corral_source_split_8993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2089} $p4588 := skb_frag_page($p4587);
    goto corral_source_split_8994;

  corral_source_split_8994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2090} get_page($p4588);
    goto corral_source_split_8995;

  corral_source_split_8995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2091} $p4589 := lowmem_page_address($p4588);
    goto corral_source_split_8996;

  corral_source_split_8996:
    assume {:verifier.code 0} true;
    $i4590 := $p2i.ref.i64($p4589);
    goto corral_source_split_8997;

  corral_source_split_8997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2092} gnttab_end_foreign_access($i4582, 0, $i4590);
    goto corral_source_split_8998;

  corral_source_split_8998:
    assume {:verifier.code 0} true;
    $p4592 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(254, 4));
    goto corral_source_split_8999;

  corral_source_split_8999:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4592, 0);
    goto corral_source_split_9000;

  corral_source_split_9000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2093} kfree_skb($p4577);
    goto corral_source_split_9001;

  corral_source_split_9001:
    assume {:verifier.code 0} true;
    goto $bb2042;

  $bb2042:
    assume {:verifier.code 0} true;
    goto $bb2043;

  $bb2043:
    assume {:verifier.code 0} true;
    $p4594 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(255, 8));
    goto corral_source_split_9003;

  corral_source_split_9003:
    assume {:verifier.code 0} true;
    $p4595 := $load.ref($M.0, $p4594);
    goto corral_source_split_9004;

  corral_source_split_9004:
    assume {:verifier.code 0} true;
    $i4596 := $p2i.ref.i64($p4595);
    goto corral_source_split_9005;

  corral_source_split_9005:
    assume {:verifier.code 0} true;
    $i4597 := $eq.i64($i4596, 0);
    goto corral_source_split_9006;

  corral_source_split_9006:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4597} true;
    goto $bb2044, $bb2045;

  $bb2045:
    assume !($i4597 == 1);
    assume {:verifier.code 0} true;
    goto $bb2046;

  $bb2046:
    assume {:verifier.code 0} true;
    $p4599 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(255, 4));
    goto corral_source_split_9010;

  corral_source_split_9010:
    assume {:verifier.code 0} true;
    $i4600 := $load.i32($M.0, $p4599);
    goto corral_source_split_9011;

  corral_source_split_9011:
    assume {:verifier.code 0} true;
    $i4601 := $eq.i32($i4600, 0);
    goto corral_source_split_9012;

  corral_source_split_9012:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4601} true;
    goto $bb2047, $bb2048;

  $bb2048:
    assume !($i4601 == 1);
    assume {:verifier.code 0} true;
    goto $bb2049;

  $bb2049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2094} $p4602 := skb_end_pointer($p4595);
    goto corral_source_split_9016;

  corral_source_split_9016:
    assume {:verifier.code 0} true;
    $p4603 := $bitcast.ref.ref($p4602);
    goto corral_source_split_9017;

  corral_source_split_9017:
    assume {:verifier.code 0} true;
    $p4604 := $add.ref($add.ref($p4603, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_9018;

  corral_source_split_9018:
    assume {:verifier.code 0} true;
    $p4605 := $bitcast.ref.ref($p4604);
    goto corral_source_split_9019;

  corral_source_split_9019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2095} $p4606 := skb_frag_page($p4605);
    goto corral_source_split_9020;

  corral_source_split_9020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2096} get_page($p4606);
    goto corral_source_split_9021;

  corral_source_split_9021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2097} $p4607 := lowmem_page_address($p4606);
    goto corral_source_split_9022;

  corral_source_split_9022:
    assume {:verifier.code 0} true;
    $i4608 := $p2i.ref.i64($p4607);
    goto corral_source_split_9023;

  corral_source_split_9023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2098} gnttab_end_foreign_access($i4600, 0, $i4608);
    goto corral_source_split_9024;

  corral_source_split_9024:
    assume {:verifier.code 0} true;
    $p4610 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(255, 4));
    goto corral_source_split_9025;

  corral_source_split_9025:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4610, 0);
    goto corral_source_split_9026;

  corral_source_split_9026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2099} kfree_skb($p4595);
    goto corral_source_split_9027;

  corral_source_split_9027:
    assume {:verifier.code 0} true;
    goto $bb2050;

  $bb2050:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5632, 1));
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} spin_unlock_bh($p20);
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    return;

  $bb2047:
    assume $i4601 == 1;
    goto corral_source_split_9014;

  corral_source_split_9014:
    assume {:verifier.code 0} true;
    goto $bb2050;

  $bb2044:
    assume $i4597 == 1;
    goto corral_source_split_9008;

  corral_source_split_9008:
    assume {:verifier.code 0} true;
    goto $bb2050;

  $bb2039:
    assume $i4583 == 1;
    goto corral_source_split_8988;

  corral_source_split_8988:
    assume {:verifier.code 0} true;
    goto $bb2042;

  $bb2036:
    assume $i4579 == 1;
    goto corral_source_split_8982;

  corral_source_split_8982:
    assume {:verifier.code 0} true;
    goto $bb2042;

  $bb2031:
    assume $i4565 == 1;
    goto corral_source_split_8962;

  corral_source_split_8962:
    assume {:verifier.code 0} true;
    goto $bb2034;

  $bb2028:
    assume $i4561 == 1;
    goto corral_source_split_8956;

  corral_source_split_8956:
    assume {:verifier.code 0} true;
    goto $bb2034;

  $bb2023:
    assume $i4547 == 1;
    goto corral_source_split_8936;

  corral_source_split_8936:
    assume {:verifier.code 0} true;
    goto $bb2026;

  $bb2020:
    assume $i4543 == 1;
    goto corral_source_split_8930;

  corral_source_split_8930:
    assume {:verifier.code 0} true;
    goto $bb2026;

  $bb2015:
    assume $i4529 == 1;
    goto corral_source_split_8910;

  corral_source_split_8910:
    assume {:verifier.code 0} true;
    goto $bb2018;

  $bb2012:
    assume $i4525 == 1;
    goto corral_source_split_8904;

  corral_source_split_8904:
    assume {:verifier.code 0} true;
    goto $bb2018;

  $bb2007:
    assume $i4511 == 1;
    goto corral_source_split_8884;

  corral_source_split_8884:
    assume {:verifier.code 0} true;
    goto $bb2010;

  $bb2004:
    assume $i4507 == 1;
    goto corral_source_split_8878;

  corral_source_split_8878:
    assume {:verifier.code 0} true;
    goto $bb2010;

  $bb1999:
    assume $i4493 == 1;
    goto corral_source_split_8858;

  corral_source_split_8858:
    assume {:verifier.code 0} true;
    goto $bb2002;

  $bb1996:
    assume $i4489 == 1;
    goto corral_source_split_8852;

  corral_source_split_8852:
    assume {:verifier.code 0} true;
    goto $bb2002;

  $bb1991:
    assume $i4475 == 1;
    goto corral_source_split_8832;

  corral_source_split_8832:
    assume {:verifier.code 0} true;
    goto $bb1994;

  $bb1988:
    assume $i4471 == 1;
    goto corral_source_split_8826;

  corral_source_split_8826:
    assume {:verifier.code 0} true;
    goto $bb1994;

  $bb1983:
    assume $i4457 == 1;
    goto corral_source_split_8806;

  corral_source_split_8806:
    assume {:verifier.code 0} true;
    goto $bb1986;

  $bb1980:
    assume $i4453 == 1;
    goto corral_source_split_8800;

  corral_source_split_8800:
    assume {:verifier.code 0} true;
    goto $bb1986;

  $bb1975:
    assume $i4439 == 1;
    goto corral_source_split_8780;

  corral_source_split_8780:
    assume {:verifier.code 0} true;
    goto $bb1978;

  $bb1972:
    assume $i4435 == 1;
    goto corral_source_split_8774;

  corral_source_split_8774:
    assume {:verifier.code 0} true;
    goto $bb1978;

  $bb1967:
    assume $i4421 == 1;
    goto corral_source_split_8754;

  corral_source_split_8754:
    assume {:verifier.code 0} true;
    goto $bb1970;

  $bb1964:
    assume $i4417 == 1;
    goto corral_source_split_8748;

  corral_source_split_8748:
    assume {:verifier.code 0} true;
    goto $bb1970;

  $bb1959:
    assume $i4403 == 1;
    goto corral_source_split_8728;

  corral_source_split_8728:
    assume {:verifier.code 0} true;
    goto $bb1962;

  $bb1956:
    assume $i4399 == 1;
    goto corral_source_split_8722;

  corral_source_split_8722:
    assume {:verifier.code 0} true;
    goto $bb1962;

  $bb1951:
    assume $i4385 == 1;
    goto corral_source_split_8702;

  corral_source_split_8702:
    assume {:verifier.code 0} true;
    goto $bb1954;

  $bb1948:
    assume $i4381 == 1;
    goto corral_source_split_8696;

  corral_source_split_8696:
    assume {:verifier.code 0} true;
    goto $bb1954;

  $bb1943:
    assume $i4367 == 1;
    goto corral_source_split_8676;

  corral_source_split_8676:
    assume {:verifier.code 0} true;
    goto $bb1946;

  $bb1940:
    assume $i4363 == 1;
    goto corral_source_split_8670;

  corral_source_split_8670:
    assume {:verifier.code 0} true;
    goto $bb1946;

  $bb1935:
    assume $i4349 == 1;
    goto corral_source_split_8650;

  corral_source_split_8650:
    assume {:verifier.code 0} true;
    goto $bb1938;

  $bb1932:
    assume $i4345 == 1;
    goto corral_source_split_8644;

  corral_source_split_8644:
    assume {:verifier.code 0} true;
    goto $bb1938;

  $bb1927:
    assume $i4331 == 1;
    goto corral_source_split_8624;

  corral_source_split_8624:
    assume {:verifier.code 0} true;
    goto $bb1930;

  $bb1924:
    assume $i4327 == 1;
    goto corral_source_split_8618;

  corral_source_split_8618:
    assume {:verifier.code 0} true;
    goto $bb1930;

  $bb1919:
    assume $i4313 == 1;
    goto corral_source_split_8598;

  corral_source_split_8598:
    assume {:verifier.code 0} true;
    goto $bb1922;

  $bb1916:
    assume $i4309 == 1;
    goto corral_source_split_8592;

  corral_source_split_8592:
    assume {:verifier.code 0} true;
    goto $bb1922;

  $bb1911:
    assume $i4295 == 1;
    goto corral_source_split_8572;

  corral_source_split_8572:
    assume {:verifier.code 0} true;
    goto $bb1914;

  $bb1908:
    assume $i4291 == 1;
    goto corral_source_split_8566;

  corral_source_split_8566:
    assume {:verifier.code 0} true;
    goto $bb1914;

  $bb1903:
    assume $i4277 == 1;
    goto corral_source_split_8546;

  corral_source_split_8546:
    assume {:verifier.code 0} true;
    goto $bb1906;

  $bb1900:
    assume $i4273 == 1;
    goto corral_source_split_8540;

  corral_source_split_8540:
    assume {:verifier.code 0} true;
    goto $bb1906;

  $bb1895:
    assume $i4259 == 1;
    goto corral_source_split_8520;

  corral_source_split_8520:
    assume {:verifier.code 0} true;
    goto $bb1898;

  $bb1892:
    assume $i4255 == 1;
    goto corral_source_split_8514;

  corral_source_split_8514:
    assume {:verifier.code 0} true;
    goto $bb1898;

  $bb1887:
    assume $i4241 == 1;
    goto corral_source_split_8494;

  corral_source_split_8494:
    assume {:verifier.code 0} true;
    goto $bb1890;

  $bb1884:
    assume $i4237 == 1;
    goto corral_source_split_8488;

  corral_source_split_8488:
    assume {:verifier.code 0} true;
    goto $bb1890;

  $bb1879:
    assume $i4223 == 1;
    goto corral_source_split_8468;

  corral_source_split_8468:
    assume {:verifier.code 0} true;
    goto $bb1882;

  $bb1876:
    assume $i4219 == 1;
    goto corral_source_split_8462;

  corral_source_split_8462:
    assume {:verifier.code 0} true;
    goto $bb1882;

  $bb1871:
    assume $i4205 == 1;
    goto corral_source_split_8442;

  corral_source_split_8442:
    assume {:verifier.code 0} true;
    goto $bb1874;

  $bb1868:
    assume $i4201 == 1;
    goto corral_source_split_8436;

  corral_source_split_8436:
    assume {:verifier.code 0} true;
    goto $bb1874;

  $bb1863:
    assume $i4187 == 1;
    goto corral_source_split_8416;

  corral_source_split_8416:
    assume {:verifier.code 0} true;
    goto $bb1866;

  $bb1860:
    assume $i4183 == 1;
    goto corral_source_split_8410;

  corral_source_split_8410:
    assume {:verifier.code 0} true;
    goto $bb1866;

  $bb1855:
    assume $i4169 == 1;
    goto corral_source_split_8390;

  corral_source_split_8390:
    assume {:verifier.code 0} true;
    goto $bb1858;

  $bb1852:
    assume $i4165 == 1;
    goto corral_source_split_8384;

  corral_source_split_8384:
    assume {:verifier.code 0} true;
    goto $bb1858;

  $bb1847:
    assume $i4151 == 1;
    goto corral_source_split_8364;

  corral_source_split_8364:
    assume {:verifier.code 0} true;
    goto $bb1850;

  $bb1844:
    assume $i4147 == 1;
    goto corral_source_split_8358;

  corral_source_split_8358:
    assume {:verifier.code 0} true;
    goto $bb1850;

  $bb1839:
    assume $i4133 == 1;
    goto corral_source_split_8338;

  corral_source_split_8338:
    assume {:verifier.code 0} true;
    goto $bb1842;

  $bb1836:
    assume $i4129 == 1;
    goto corral_source_split_8332;

  corral_source_split_8332:
    assume {:verifier.code 0} true;
    goto $bb1842;

  $bb1831:
    assume $i4115 == 1;
    goto corral_source_split_8312;

  corral_source_split_8312:
    assume {:verifier.code 0} true;
    goto $bb1834;

  $bb1828:
    assume $i4111 == 1;
    goto corral_source_split_8306;

  corral_source_split_8306:
    assume {:verifier.code 0} true;
    goto $bb1834;

  $bb1823:
    assume $i4097 == 1;
    goto corral_source_split_8286;

  corral_source_split_8286:
    assume {:verifier.code 0} true;
    goto $bb1826;

  $bb1820:
    assume $i4093 == 1;
    goto corral_source_split_8280;

  corral_source_split_8280:
    assume {:verifier.code 0} true;
    goto $bb1826;

  $bb1815:
    assume $i4079 == 1;
    goto corral_source_split_8260;

  corral_source_split_8260:
    assume {:verifier.code 0} true;
    goto $bb1818;

  $bb1812:
    assume $i4075 == 1;
    goto corral_source_split_8254;

  corral_source_split_8254:
    assume {:verifier.code 0} true;
    goto $bb1818;

  $bb1807:
    assume $i4061 == 1;
    goto corral_source_split_8234;

  corral_source_split_8234:
    assume {:verifier.code 0} true;
    goto $bb1810;

  $bb1804:
    assume $i4057 == 1;
    goto corral_source_split_8228;

  corral_source_split_8228:
    assume {:verifier.code 0} true;
    goto $bb1810;

  $bb1799:
    assume $i4043 == 1;
    goto corral_source_split_8208;

  corral_source_split_8208:
    assume {:verifier.code 0} true;
    goto $bb1802;

  $bb1796:
    assume $i4039 == 1;
    goto corral_source_split_8202;

  corral_source_split_8202:
    assume {:verifier.code 0} true;
    goto $bb1802;

  $bb1791:
    assume $i4025 == 1;
    goto corral_source_split_8182;

  corral_source_split_8182:
    assume {:verifier.code 0} true;
    goto $bb1794;

  $bb1788:
    assume $i4021 == 1;
    goto corral_source_split_8176;

  corral_source_split_8176:
    assume {:verifier.code 0} true;
    goto $bb1794;

  $bb1783:
    assume $i4007 == 1;
    goto corral_source_split_8156;

  corral_source_split_8156:
    assume {:verifier.code 0} true;
    goto $bb1786;

  $bb1780:
    assume $i4003 == 1;
    goto corral_source_split_8150;

  corral_source_split_8150:
    assume {:verifier.code 0} true;
    goto $bb1786;

  $bb1775:
    assume $i3989 == 1;
    goto corral_source_split_8130;

  corral_source_split_8130:
    assume {:verifier.code 0} true;
    goto $bb1778;

  $bb1772:
    assume $i3985 == 1;
    goto corral_source_split_8124;

  corral_source_split_8124:
    assume {:verifier.code 0} true;
    goto $bb1778;

  $bb1767:
    assume $i3971 == 1;
    goto corral_source_split_8104;

  corral_source_split_8104:
    assume {:verifier.code 0} true;
    goto $bb1770;

  $bb1764:
    assume $i3967 == 1;
    goto corral_source_split_8098;

  corral_source_split_8098:
    assume {:verifier.code 0} true;
    goto $bb1770;

  $bb1759:
    assume $i3953 == 1;
    goto corral_source_split_8078;

  corral_source_split_8078:
    assume {:verifier.code 0} true;
    goto $bb1762;

  $bb1756:
    assume $i3949 == 1;
    goto corral_source_split_8072;

  corral_source_split_8072:
    assume {:verifier.code 0} true;
    goto $bb1762;

  $bb1751:
    assume $i3935 == 1;
    goto corral_source_split_8052;

  corral_source_split_8052:
    assume {:verifier.code 0} true;
    goto $bb1754;

  $bb1748:
    assume $i3931 == 1;
    goto corral_source_split_8046;

  corral_source_split_8046:
    assume {:verifier.code 0} true;
    goto $bb1754;

  $bb1743:
    assume $i3917 == 1;
    goto corral_source_split_8026;

  corral_source_split_8026:
    assume {:verifier.code 0} true;
    goto $bb1746;

  $bb1740:
    assume $i3913 == 1;
    goto corral_source_split_8020;

  corral_source_split_8020:
    assume {:verifier.code 0} true;
    goto $bb1746;

  $bb1735:
    assume $i3899 == 1;
    goto corral_source_split_8000;

  corral_source_split_8000:
    assume {:verifier.code 0} true;
    goto $bb1738;

  $bb1732:
    assume $i3895 == 1;
    goto corral_source_split_7994;

  corral_source_split_7994:
    assume {:verifier.code 0} true;
    goto $bb1738;

  $bb1727:
    assume $i3881 == 1;
    goto corral_source_split_7974;

  corral_source_split_7974:
    assume {:verifier.code 0} true;
    goto $bb1730;

  $bb1724:
    assume $i3877 == 1;
    goto corral_source_split_7968;

  corral_source_split_7968:
    assume {:verifier.code 0} true;
    goto $bb1730;

  $bb1719:
    assume $i3863 == 1;
    goto corral_source_split_7948;

  corral_source_split_7948:
    assume {:verifier.code 0} true;
    goto $bb1722;

  $bb1716:
    assume $i3859 == 1;
    goto corral_source_split_7942;

  corral_source_split_7942:
    assume {:verifier.code 0} true;
    goto $bb1722;

  $bb1711:
    assume $i3845 == 1;
    goto corral_source_split_7922;

  corral_source_split_7922:
    assume {:verifier.code 0} true;
    goto $bb1714;

  $bb1708:
    assume $i3841 == 1;
    goto corral_source_split_7916;

  corral_source_split_7916:
    assume {:verifier.code 0} true;
    goto $bb1714;

  $bb1703:
    assume $i3827 == 1;
    goto corral_source_split_7896;

  corral_source_split_7896:
    assume {:verifier.code 0} true;
    goto $bb1706;

  $bb1700:
    assume $i3823 == 1;
    goto corral_source_split_7890;

  corral_source_split_7890:
    assume {:verifier.code 0} true;
    goto $bb1706;

  $bb1695:
    assume $i3809 == 1;
    goto corral_source_split_7870;

  corral_source_split_7870:
    assume {:verifier.code 0} true;
    goto $bb1698;

  $bb1692:
    assume $i3805 == 1;
    goto corral_source_split_7864;

  corral_source_split_7864:
    assume {:verifier.code 0} true;
    goto $bb1698;

  $bb1687:
    assume $i3791 == 1;
    goto corral_source_split_7844;

  corral_source_split_7844:
    assume {:verifier.code 0} true;
    goto $bb1690;

  $bb1684:
    assume $i3787 == 1;
    goto corral_source_split_7838;

  corral_source_split_7838:
    assume {:verifier.code 0} true;
    goto $bb1690;

  $bb1679:
    assume $i3773 == 1;
    goto corral_source_split_7818;

  corral_source_split_7818:
    assume {:verifier.code 0} true;
    goto $bb1682;

  $bb1676:
    assume $i3769 == 1;
    goto corral_source_split_7812;

  corral_source_split_7812:
    assume {:verifier.code 0} true;
    goto $bb1682;

  $bb1671:
    assume $i3755 == 1;
    goto corral_source_split_7792;

  corral_source_split_7792:
    assume {:verifier.code 0} true;
    goto $bb1674;

  $bb1668:
    assume $i3751 == 1;
    goto corral_source_split_7786;

  corral_source_split_7786:
    assume {:verifier.code 0} true;
    goto $bb1674;

  $bb1663:
    assume $i3737 == 1;
    goto corral_source_split_7766;

  corral_source_split_7766:
    assume {:verifier.code 0} true;
    goto $bb1666;

  $bb1660:
    assume $i3733 == 1;
    goto corral_source_split_7760;

  corral_source_split_7760:
    assume {:verifier.code 0} true;
    goto $bb1666;

  $bb1655:
    assume $i3719 == 1;
    goto corral_source_split_7740;

  corral_source_split_7740:
    assume {:verifier.code 0} true;
    goto $bb1658;

  $bb1652:
    assume $i3715 == 1;
    goto corral_source_split_7734;

  corral_source_split_7734:
    assume {:verifier.code 0} true;
    goto $bb1658;

  $bb1647:
    assume $i3701 == 1;
    goto corral_source_split_7714;

  corral_source_split_7714:
    assume {:verifier.code 0} true;
    goto $bb1650;

  $bb1644:
    assume $i3697 == 1;
    goto corral_source_split_7708;

  corral_source_split_7708:
    assume {:verifier.code 0} true;
    goto $bb1650;

  $bb1639:
    assume $i3683 == 1;
    goto corral_source_split_7688;

  corral_source_split_7688:
    assume {:verifier.code 0} true;
    goto $bb1642;

  $bb1636:
    assume $i3679 == 1;
    goto corral_source_split_7682;

  corral_source_split_7682:
    assume {:verifier.code 0} true;
    goto $bb1642;

  $bb1631:
    assume $i3665 == 1;
    goto corral_source_split_7662;

  corral_source_split_7662:
    assume {:verifier.code 0} true;
    goto $bb1634;

  $bb1628:
    assume $i3661 == 1;
    goto corral_source_split_7656;

  corral_source_split_7656:
    assume {:verifier.code 0} true;
    goto $bb1634;

  $bb1623:
    assume $i3647 == 1;
    goto corral_source_split_7636;

  corral_source_split_7636:
    assume {:verifier.code 0} true;
    goto $bb1626;

  $bb1620:
    assume $i3643 == 1;
    goto corral_source_split_7630;

  corral_source_split_7630:
    assume {:verifier.code 0} true;
    goto $bb1626;

  $bb1615:
    assume $i3629 == 1;
    goto corral_source_split_7610;

  corral_source_split_7610:
    assume {:verifier.code 0} true;
    goto $bb1618;

  $bb1612:
    assume $i3625 == 1;
    goto corral_source_split_7604;

  corral_source_split_7604:
    assume {:verifier.code 0} true;
    goto $bb1618;

  $bb1607:
    assume $i3611 == 1;
    goto corral_source_split_7584;

  corral_source_split_7584:
    assume {:verifier.code 0} true;
    goto $bb1610;

  $bb1604:
    assume $i3607 == 1;
    goto corral_source_split_7578;

  corral_source_split_7578:
    assume {:verifier.code 0} true;
    goto $bb1610;

  $bb1599:
    assume $i3593 == 1;
    goto corral_source_split_7558;

  corral_source_split_7558:
    assume {:verifier.code 0} true;
    goto $bb1602;

  $bb1596:
    assume $i3589 == 1;
    goto corral_source_split_7552;

  corral_source_split_7552:
    assume {:verifier.code 0} true;
    goto $bb1602;

  $bb1591:
    assume $i3575 == 1;
    goto corral_source_split_7532;

  corral_source_split_7532:
    assume {:verifier.code 0} true;
    goto $bb1594;

  $bb1588:
    assume $i3571 == 1;
    goto corral_source_split_7526;

  corral_source_split_7526:
    assume {:verifier.code 0} true;
    goto $bb1594;

  $bb1583:
    assume $i3557 == 1;
    goto corral_source_split_7506;

  corral_source_split_7506:
    assume {:verifier.code 0} true;
    goto $bb1586;

  $bb1580:
    assume $i3553 == 1;
    goto corral_source_split_7500;

  corral_source_split_7500:
    assume {:verifier.code 0} true;
    goto $bb1586;

  $bb1575:
    assume $i3539 == 1;
    goto corral_source_split_7480;

  corral_source_split_7480:
    assume {:verifier.code 0} true;
    goto $bb1578;

  $bb1572:
    assume $i3535 == 1;
    goto corral_source_split_7474;

  corral_source_split_7474:
    assume {:verifier.code 0} true;
    goto $bb1578;

  $bb1567:
    assume $i3521 == 1;
    goto corral_source_split_7454;

  corral_source_split_7454:
    assume {:verifier.code 0} true;
    goto $bb1570;

  $bb1564:
    assume $i3517 == 1;
    goto corral_source_split_7448;

  corral_source_split_7448:
    assume {:verifier.code 0} true;
    goto $bb1570;

  $bb1559:
    assume $i3503 == 1;
    goto corral_source_split_7428;

  corral_source_split_7428:
    assume {:verifier.code 0} true;
    goto $bb1562;

  $bb1556:
    assume $i3499 == 1;
    goto corral_source_split_7422;

  corral_source_split_7422:
    assume {:verifier.code 0} true;
    goto $bb1562;

  $bb1551:
    assume $i3485 == 1;
    goto corral_source_split_7402;

  corral_source_split_7402:
    assume {:verifier.code 0} true;
    goto $bb1554;

  $bb1548:
    assume $i3481 == 1;
    goto corral_source_split_7396;

  corral_source_split_7396:
    assume {:verifier.code 0} true;
    goto $bb1554;

  $bb1543:
    assume $i3467 == 1;
    goto corral_source_split_7376;

  corral_source_split_7376:
    assume {:verifier.code 0} true;
    goto $bb1546;

  $bb1540:
    assume $i3463 == 1;
    goto corral_source_split_7370;

  corral_source_split_7370:
    assume {:verifier.code 0} true;
    goto $bb1546;

  $bb1535:
    assume $i3449 == 1;
    goto corral_source_split_7350;

  corral_source_split_7350:
    assume {:verifier.code 0} true;
    goto $bb1538;

  $bb1532:
    assume $i3445 == 1;
    goto corral_source_split_7344;

  corral_source_split_7344:
    assume {:verifier.code 0} true;
    goto $bb1538;

  $bb1527:
    assume $i3431 == 1;
    goto corral_source_split_7324;

  corral_source_split_7324:
    assume {:verifier.code 0} true;
    goto $bb1530;

  $bb1524:
    assume $i3427 == 1;
    goto corral_source_split_7318;

  corral_source_split_7318:
    assume {:verifier.code 0} true;
    goto $bb1530;

  $bb1519:
    assume $i3413 == 1;
    goto corral_source_split_7298;

  corral_source_split_7298:
    assume {:verifier.code 0} true;
    goto $bb1522;

  $bb1516:
    assume $i3409 == 1;
    goto corral_source_split_7292;

  corral_source_split_7292:
    assume {:verifier.code 0} true;
    goto $bb1522;

  $bb1511:
    assume $i3395 == 1;
    goto corral_source_split_7272;

  corral_source_split_7272:
    assume {:verifier.code 0} true;
    goto $bb1514;

  $bb1508:
    assume $i3391 == 1;
    goto corral_source_split_7266;

  corral_source_split_7266:
    assume {:verifier.code 0} true;
    goto $bb1514;

  $bb1503:
    assume $i3377 == 1;
    goto corral_source_split_7246;

  corral_source_split_7246:
    assume {:verifier.code 0} true;
    goto $bb1506;

  $bb1500:
    assume $i3373 == 1;
    goto corral_source_split_7240;

  corral_source_split_7240:
    assume {:verifier.code 0} true;
    goto $bb1506;

  $bb1495:
    assume $i3359 == 1;
    goto corral_source_split_7220;

  corral_source_split_7220:
    assume {:verifier.code 0} true;
    goto $bb1498;

  $bb1492:
    assume $i3355 == 1;
    goto corral_source_split_7214;

  corral_source_split_7214:
    assume {:verifier.code 0} true;
    goto $bb1498;

  $bb1487:
    assume $i3341 == 1;
    goto corral_source_split_7194;

  corral_source_split_7194:
    assume {:verifier.code 0} true;
    goto $bb1490;

  $bb1484:
    assume $i3337 == 1;
    goto corral_source_split_7188;

  corral_source_split_7188:
    assume {:verifier.code 0} true;
    goto $bb1490;

  $bb1479:
    assume $i3323 == 1;
    goto corral_source_split_7168;

  corral_source_split_7168:
    assume {:verifier.code 0} true;
    goto $bb1482;

  $bb1476:
    assume $i3319 == 1;
    goto corral_source_split_7162;

  corral_source_split_7162:
    assume {:verifier.code 0} true;
    goto $bb1482;

  $bb1471:
    assume $i3305 == 1;
    goto corral_source_split_7142;

  corral_source_split_7142:
    assume {:verifier.code 0} true;
    goto $bb1474;

  $bb1468:
    assume $i3301 == 1;
    goto corral_source_split_7136;

  corral_source_split_7136:
    assume {:verifier.code 0} true;
    goto $bb1474;

  $bb1463:
    assume $i3287 == 1;
    goto corral_source_split_7116;

  corral_source_split_7116:
    assume {:verifier.code 0} true;
    goto $bb1466;

  $bb1460:
    assume $i3283 == 1;
    goto corral_source_split_7110;

  corral_source_split_7110:
    assume {:verifier.code 0} true;
    goto $bb1466;

  $bb1455:
    assume $i3269 == 1;
    goto corral_source_split_7090;

  corral_source_split_7090:
    assume {:verifier.code 0} true;
    goto $bb1458;

  $bb1452:
    assume $i3265 == 1;
    goto corral_source_split_7084;

  corral_source_split_7084:
    assume {:verifier.code 0} true;
    goto $bb1458;

  $bb1447:
    assume $i3251 == 1;
    goto corral_source_split_7064;

  corral_source_split_7064:
    assume {:verifier.code 0} true;
    goto $bb1450;

  $bb1444:
    assume $i3247 == 1;
    goto corral_source_split_7058;

  corral_source_split_7058:
    assume {:verifier.code 0} true;
    goto $bb1450;

  $bb1439:
    assume $i3233 == 1;
    goto corral_source_split_7038;

  corral_source_split_7038:
    assume {:verifier.code 0} true;
    goto $bb1442;

  $bb1436:
    assume $i3229 == 1;
    goto corral_source_split_7032;

  corral_source_split_7032:
    assume {:verifier.code 0} true;
    goto $bb1442;

  $bb1431:
    assume $i3215 == 1;
    goto corral_source_split_7012;

  corral_source_split_7012:
    assume {:verifier.code 0} true;
    goto $bb1434;

  $bb1428:
    assume $i3211 == 1;
    goto corral_source_split_7006;

  corral_source_split_7006:
    assume {:verifier.code 0} true;
    goto $bb1434;

  $bb1423:
    assume $i3197 == 1;
    goto corral_source_split_6986;

  corral_source_split_6986:
    assume {:verifier.code 0} true;
    goto $bb1426;

  $bb1420:
    assume $i3193 == 1;
    goto corral_source_split_6980;

  corral_source_split_6980:
    assume {:verifier.code 0} true;
    goto $bb1426;

  $bb1415:
    assume $i3179 == 1;
    goto corral_source_split_6960;

  corral_source_split_6960:
    assume {:verifier.code 0} true;
    goto $bb1418;

  $bb1412:
    assume $i3175 == 1;
    goto corral_source_split_6954;

  corral_source_split_6954:
    assume {:verifier.code 0} true;
    goto $bb1418;

  $bb1407:
    assume $i3161 == 1;
    goto corral_source_split_6934;

  corral_source_split_6934:
    assume {:verifier.code 0} true;
    goto $bb1410;

  $bb1404:
    assume $i3157 == 1;
    goto corral_source_split_6928;

  corral_source_split_6928:
    assume {:verifier.code 0} true;
    goto $bb1410;

  $bb1399:
    assume $i3143 == 1;
    goto corral_source_split_6908;

  corral_source_split_6908:
    assume {:verifier.code 0} true;
    goto $bb1402;

  $bb1396:
    assume $i3139 == 1;
    goto corral_source_split_6902;

  corral_source_split_6902:
    assume {:verifier.code 0} true;
    goto $bb1402;

  $bb1391:
    assume $i3125 == 1;
    goto corral_source_split_6882;

  corral_source_split_6882:
    assume {:verifier.code 0} true;
    goto $bb1394;

  $bb1388:
    assume $i3121 == 1;
    goto corral_source_split_6876;

  corral_source_split_6876:
    assume {:verifier.code 0} true;
    goto $bb1394;

  $bb1383:
    assume $i3107 == 1;
    goto corral_source_split_6856;

  corral_source_split_6856:
    assume {:verifier.code 0} true;
    goto $bb1386;

  $bb1380:
    assume $i3103 == 1;
    goto corral_source_split_6850;

  corral_source_split_6850:
    assume {:verifier.code 0} true;
    goto $bb1386;

  $bb1375:
    assume $i3089 == 1;
    goto corral_source_split_6830;

  corral_source_split_6830:
    assume {:verifier.code 0} true;
    goto $bb1378;

  $bb1372:
    assume $i3085 == 1;
    goto corral_source_split_6824;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    goto $bb1378;

  $bb1367:
    assume $i3071 == 1;
    goto corral_source_split_6804;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    goto $bb1370;

  $bb1364:
    assume $i3067 == 1;
    goto corral_source_split_6798;

  corral_source_split_6798:
    assume {:verifier.code 0} true;
    goto $bb1370;

  $bb1359:
    assume $i3053 == 1;
    goto corral_source_split_6778;

  corral_source_split_6778:
    assume {:verifier.code 0} true;
    goto $bb1362;

  $bb1356:
    assume $i3049 == 1;
    goto corral_source_split_6772;

  corral_source_split_6772:
    assume {:verifier.code 0} true;
    goto $bb1362;

  $bb1351:
    assume $i3035 == 1;
    goto corral_source_split_6752;

  corral_source_split_6752:
    assume {:verifier.code 0} true;
    goto $bb1354;

  $bb1348:
    assume $i3031 == 1;
    goto corral_source_split_6746;

  corral_source_split_6746:
    assume {:verifier.code 0} true;
    goto $bb1354;

  $bb1343:
    assume $i3017 == 1;
    goto corral_source_split_6726;

  corral_source_split_6726:
    assume {:verifier.code 0} true;
    goto $bb1346;

  $bb1340:
    assume $i3013 == 1;
    goto corral_source_split_6720;

  corral_source_split_6720:
    assume {:verifier.code 0} true;
    goto $bb1346;

  $bb1335:
    assume $i2999 == 1;
    goto corral_source_split_6700;

  corral_source_split_6700:
    assume {:verifier.code 0} true;
    goto $bb1338;

  $bb1332:
    assume $i2995 == 1;
    goto corral_source_split_6694;

  corral_source_split_6694:
    assume {:verifier.code 0} true;
    goto $bb1338;

  $bb1327:
    assume $i2981 == 1;
    goto corral_source_split_6674;

  corral_source_split_6674:
    assume {:verifier.code 0} true;
    goto $bb1330;

  $bb1324:
    assume $i2977 == 1;
    goto corral_source_split_6668;

  corral_source_split_6668:
    assume {:verifier.code 0} true;
    goto $bb1330;

  $bb1319:
    assume $i2963 == 1;
    goto corral_source_split_6648;

  corral_source_split_6648:
    assume {:verifier.code 0} true;
    goto $bb1322;

  $bb1316:
    assume $i2959 == 1;
    goto corral_source_split_6642;

  corral_source_split_6642:
    assume {:verifier.code 0} true;
    goto $bb1322;

  $bb1311:
    assume $i2945 == 1;
    goto corral_source_split_6622;

  corral_source_split_6622:
    assume {:verifier.code 0} true;
    goto $bb1314;

  $bb1308:
    assume $i2941 == 1;
    goto corral_source_split_6616;

  corral_source_split_6616:
    assume {:verifier.code 0} true;
    goto $bb1314;

  $bb1303:
    assume $i2927 == 1;
    goto corral_source_split_6596;

  corral_source_split_6596:
    assume {:verifier.code 0} true;
    goto $bb1306;

  $bb1300:
    assume $i2923 == 1;
    goto corral_source_split_6590;

  corral_source_split_6590:
    assume {:verifier.code 0} true;
    goto $bb1306;

  $bb1295:
    assume $i2909 == 1;
    goto corral_source_split_6570;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    goto $bb1298;

  $bb1292:
    assume $i2905 == 1;
    goto corral_source_split_6564;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    goto $bb1298;

  $bb1287:
    assume $i2891 == 1;
    goto corral_source_split_6544;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    goto $bb1290;

  $bb1284:
    assume $i2887 == 1;
    goto corral_source_split_6538;

  corral_source_split_6538:
    assume {:verifier.code 0} true;
    goto $bb1290;

  $bb1279:
    assume $i2873 == 1;
    goto corral_source_split_6518;

  corral_source_split_6518:
    assume {:verifier.code 0} true;
    goto $bb1282;

  $bb1276:
    assume $i2869 == 1;
    goto corral_source_split_6512;

  corral_source_split_6512:
    assume {:verifier.code 0} true;
    goto $bb1282;

  $bb1271:
    assume $i2855 == 1;
    goto corral_source_split_6492;

  corral_source_split_6492:
    assume {:verifier.code 0} true;
    goto $bb1274;

  $bb1268:
    assume $i2851 == 1;
    goto corral_source_split_6486;

  corral_source_split_6486:
    assume {:verifier.code 0} true;
    goto $bb1274;

  $bb1263:
    assume $i2837 == 1;
    goto corral_source_split_6466;

  corral_source_split_6466:
    assume {:verifier.code 0} true;
    goto $bb1266;

  $bb1260:
    assume $i2833 == 1;
    goto corral_source_split_6460;

  corral_source_split_6460:
    assume {:verifier.code 0} true;
    goto $bb1266;

  $bb1255:
    assume $i2819 == 1;
    goto corral_source_split_6440;

  corral_source_split_6440:
    assume {:verifier.code 0} true;
    goto $bb1258;

  $bb1252:
    assume $i2815 == 1;
    goto corral_source_split_6434;

  corral_source_split_6434:
    assume {:verifier.code 0} true;
    goto $bb1258;

  $bb1247:
    assume $i2801 == 1;
    goto corral_source_split_6414;

  corral_source_split_6414:
    assume {:verifier.code 0} true;
    goto $bb1250;

  $bb1244:
    assume $i2797 == 1;
    goto corral_source_split_6408;

  corral_source_split_6408:
    assume {:verifier.code 0} true;
    goto $bb1250;

  $bb1239:
    assume $i2783 == 1;
    goto corral_source_split_6388;

  corral_source_split_6388:
    assume {:verifier.code 0} true;
    goto $bb1242;

  $bb1236:
    assume $i2779 == 1;
    goto corral_source_split_6382;

  corral_source_split_6382:
    assume {:verifier.code 0} true;
    goto $bb1242;

  $bb1231:
    assume $i2765 == 1;
    goto corral_source_split_6362;

  corral_source_split_6362:
    assume {:verifier.code 0} true;
    goto $bb1234;

  $bb1228:
    assume $i2761 == 1;
    goto corral_source_split_6356;

  corral_source_split_6356:
    assume {:verifier.code 0} true;
    goto $bb1234;

  $bb1223:
    assume $i2747 == 1;
    goto corral_source_split_6336;

  corral_source_split_6336:
    assume {:verifier.code 0} true;
    goto $bb1226;

  $bb1220:
    assume $i2743 == 1;
    goto corral_source_split_6330;

  corral_source_split_6330:
    assume {:verifier.code 0} true;
    goto $bb1226;

  $bb1215:
    assume $i2729 == 1;
    goto corral_source_split_6310;

  corral_source_split_6310:
    assume {:verifier.code 0} true;
    goto $bb1218;

  $bb1212:
    assume $i2725 == 1;
    goto corral_source_split_6304;

  corral_source_split_6304:
    assume {:verifier.code 0} true;
    goto $bb1218;

  $bb1207:
    assume $i2711 == 1;
    goto corral_source_split_6284;

  corral_source_split_6284:
    assume {:verifier.code 0} true;
    goto $bb1210;

  $bb1204:
    assume $i2707 == 1;
    goto corral_source_split_6278;

  corral_source_split_6278:
    assume {:verifier.code 0} true;
    goto $bb1210;

  $bb1199:
    assume $i2693 == 1;
    goto corral_source_split_6258;

  corral_source_split_6258:
    assume {:verifier.code 0} true;
    goto $bb1202;

  $bb1196:
    assume $i2689 == 1;
    goto corral_source_split_6252;

  corral_source_split_6252:
    assume {:verifier.code 0} true;
    goto $bb1202;

  $bb1191:
    assume $i2675 == 1;
    goto corral_source_split_6232;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    goto $bb1194;

  $bb1188:
    assume $i2671 == 1;
    goto corral_source_split_6226;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    goto $bb1194;

  $bb1183:
    assume $i2657 == 1;
    goto corral_source_split_6206;

  corral_source_split_6206:
    assume {:verifier.code 0} true;
    goto $bb1186;

  $bb1180:
    assume $i2653 == 1;
    goto corral_source_split_6200;

  corral_source_split_6200:
    assume {:verifier.code 0} true;
    goto $bb1186;

  $bb1175:
    assume $i2639 == 1;
    goto corral_source_split_6180;

  corral_source_split_6180:
    assume {:verifier.code 0} true;
    goto $bb1178;

  $bb1172:
    assume $i2635 == 1;
    goto corral_source_split_6174;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    goto $bb1178;

  $bb1167:
    assume $i2621 == 1;
    goto corral_source_split_6154;

  corral_source_split_6154:
    assume {:verifier.code 0} true;
    goto $bb1170;

  $bb1164:
    assume $i2617 == 1;
    goto corral_source_split_6148;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    goto $bb1170;

  $bb1159:
    assume $i2603 == 1;
    goto corral_source_split_6128;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    goto $bb1162;

  $bb1156:
    assume $i2599 == 1;
    goto corral_source_split_6122;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    goto $bb1162;

  $bb1151:
    assume $i2585 == 1;
    goto corral_source_split_6102;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    goto $bb1154;

  $bb1148:
    assume $i2581 == 1;
    goto corral_source_split_6096;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    goto $bb1154;

  $bb1143:
    assume $i2567 == 1;
    goto corral_source_split_6076;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    goto $bb1146;

  $bb1140:
    assume $i2563 == 1;
    goto corral_source_split_6070;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    goto $bb1146;

  $bb1135:
    assume $i2549 == 1;
    goto corral_source_split_6050;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    goto $bb1138;

  $bb1132:
    assume $i2545 == 1;
    goto corral_source_split_6044;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    goto $bb1138;

  $bb1127:
    assume $i2531 == 1;
    goto corral_source_split_6024;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    goto $bb1130;

  $bb1124:
    assume $i2527 == 1;
    goto corral_source_split_6018;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    goto $bb1130;

  $bb1119:
    assume $i2513 == 1;
    goto corral_source_split_5998;

  corral_source_split_5998:
    assume {:verifier.code 0} true;
    goto $bb1122;

  $bb1116:
    assume $i2509 == 1;
    goto corral_source_split_5992;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    goto $bb1122;

  $bb1111:
    assume $i2495 == 1;
    goto corral_source_split_5972;

  corral_source_split_5972:
    assume {:verifier.code 0} true;
    goto $bb1114;

  $bb1108:
    assume $i2491 == 1;
    goto corral_source_split_5966;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    goto $bb1114;

  $bb1103:
    assume $i2477 == 1;
    goto corral_source_split_5946;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    goto $bb1106;

  $bb1100:
    assume $i2473 == 1;
    goto corral_source_split_5940;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    goto $bb1106;

  $bb1095:
    assume $i2459 == 1;
    goto corral_source_split_5920;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    goto $bb1098;

  $bb1092:
    assume $i2455 == 1;
    goto corral_source_split_5914;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    goto $bb1098;

  $bb1087:
    assume $i2441 == 1;
    goto corral_source_split_5894;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    goto $bb1090;

  $bb1084:
    assume $i2437 == 1;
    goto corral_source_split_5888;

  corral_source_split_5888:
    assume {:verifier.code 0} true;
    goto $bb1090;

  $bb1079:
    assume $i2423 == 1;
    goto corral_source_split_5868;

  corral_source_split_5868:
    assume {:verifier.code 0} true;
    goto $bb1082;

  $bb1076:
    assume $i2419 == 1;
    goto corral_source_split_5862;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    goto $bb1082;

  $bb1071:
    assume $i2405 == 1;
    goto corral_source_split_5842;

  corral_source_split_5842:
    assume {:verifier.code 0} true;
    goto $bb1074;

  $bb1068:
    assume $i2401 == 1;
    goto corral_source_split_5836;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    goto $bb1074;

  $bb1063:
    assume $i2387 == 1;
    goto corral_source_split_5816;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    goto $bb1066;

  $bb1060:
    assume $i2383 == 1;
    goto corral_source_split_5810;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    goto $bb1066;

  $bb1055:
    assume $i2369 == 1;
    goto corral_source_split_5790;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    goto $bb1058;

  $bb1052:
    assume $i2365 == 1;
    goto corral_source_split_5784;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    goto $bb1058;

  $bb1047:
    assume $i2351 == 1;
    goto corral_source_split_5764;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    goto $bb1050;

  $bb1044:
    assume $i2347 == 1;
    goto corral_source_split_5758;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    goto $bb1050;

  $bb1039:
    assume $i2333 == 1;
    goto corral_source_split_5738;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    goto $bb1042;

  $bb1036:
    assume $i2329 == 1;
    goto corral_source_split_5732;

  corral_source_split_5732:
    assume {:verifier.code 0} true;
    goto $bb1042;

  $bb1031:
    assume $i2315 == 1;
    goto corral_source_split_5712;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    goto $bb1034;

  $bb1028:
    assume $i2311 == 1;
    goto corral_source_split_5706;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    goto $bb1034;

  $bb1023:
    assume $i2297 == 1;
    goto corral_source_split_5686;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    goto $bb1026;

  $bb1020:
    assume $i2293 == 1;
    goto corral_source_split_5680;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    goto $bb1026;

  $bb1015:
    assume $i2279 == 1;
    goto corral_source_split_5660;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    goto $bb1018;

  $bb1012:
    assume $i2275 == 1;
    goto corral_source_split_5654;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    goto $bb1018;

  $bb1007:
    assume $i2261 == 1;
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    goto $bb1010;

  $bb1004:
    assume $i2257 == 1;
    goto corral_source_split_5628;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    goto $bb1010;

  $bb999:
    assume $i2243 == 1;
    goto corral_source_split_5608;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    goto $bb1002;

  $bb996:
    assume $i2239 == 1;
    goto corral_source_split_5602;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    goto $bb1002;

  $bb991:
    assume $i2225 == 1;
    goto corral_source_split_5582;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    goto $bb994;

  $bb988:
    assume $i2221 == 1;
    goto corral_source_split_5576;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    goto $bb994;

  $bb983:
    assume $i2207 == 1;
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    goto $bb986;

  $bb980:
    assume $i2203 == 1;
    goto corral_source_split_5550;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    goto $bb986;

  $bb975:
    assume $i2189 == 1;
    goto corral_source_split_5530;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    goto $bb978;

  $bb972:
    assume $i2185 == 1;
    goto corral_source_split_5524;

  corral_source_split_5524:
    assume {:verifier.code 0} true;
    goto $bb978;

  $bb967:
    assume $i2171 == 1;
    goto corral_source_split_5504;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    goto $bb970;

  $bb964:
    assume $i2167 == 1;
    goto corral_source_split_5498;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    goto $bb970;

  $bb959:
    assume $i2153 == 1;
    goto corral_source_split_5478;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    goto $bb962;

  $bb956:
    assume $i2149 == 1;
    goto corral_source_split_5472;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    goto $bb962;

  $bb951:
    assume $i2135 == 1;
    goto corral_source_split_5452;

  corral_source_split_5452:
    assume {:verifier.code 0} true;
    goto $bb954;

  $bb948:
    assume $i2131 == 1;
    goto corral_source_split_5446;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    goto $bb954;

  $bb943:
    assume $i2117 == 1;
    goto corral_source_split_5426;

  corral_source_split_5426:
    assume {:verifier.code 0} true;
    goto $bb946;

  $bb940:
    assume $i2113 == 1;
    goto corral_source_split_5420;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    goto $bb946;

  $bb935:
    assume $i2099 == 1;
    goto corral_source_split_5400;

  corral_source_split_5400:
    assume {:verifier.code 0} true;
    goto $bb938;

  $bb932:
    assume $i2095 == 1;
    goto corral_source_split_5394;

  corral_source_split_5394:
    assume {:verifier.code 0} true;
    goto $bb938;

  $bb927:
    assume $i2081 == 1;
    goto corral_source_split_5374;

  corral_source_split_5374:
    assume {:verifier.code 0} true;
    goto $bb930;

  $bb924:
    assume $i2077 == 1;
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    goto $bb930;

  $bb919:
    assume $i2063 == 1;
    goto corral_source_split_5348;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    goto $bb922;

  $bb916:
    assume $i2059 == 1;
    goto corral_source_split_5342;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    goto $bb922;

  $bb911:
    assume $i2045 == 1;
    goto corral_source_split_5322;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    goto $bb914;

  $bb908:
    assume $i2041 == 1;
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    goto $bb914;

  $bb903:
    assume $i2027 == 1;
    goto corral_source_split_5296;

  corral_source_split_5296:
    assume {:verifier.code 0} true;
    goto $bb906;

  $bb900:
    assume $i2023 == 1;
    goto corral_source_split_5290;

  corral_source_split_5290:
    assume {:verifier.code 0} true;
    goto $bb906;

  $bb895:
    assume $i2009 == 1;
    goto corral_source_split_5270;

  corral_source_split_5270:
    assume {:verifier.code 0} true;
    goto $bb898;

  $bb892:
    assume $i2005 == 1;
    goto corral_source_split_5264;

  corral_source_split_5264:
    assume {:verifier.code 0} true;
    goto $bb898;

  $bb887:
    assume $i1991 == 1;
    goto corral_source_split_5244;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    goto $bb890;

  $bb884:
    assume $i1987 == 1;
    goto corral_source_split_5238;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    goto $bb890;

  $bb879:
    assume $i1973 == 1;
    goto corral_source_split_5218;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    goto $bb882;

  $bb876:
    assume $i1969 == 1;
    goto corral_source_split_5212;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    goto $bb882;

  $bb871:
    assume $i1955 == 1;
    goto corral_source_split_5192;

  corral_source_split_5192:
    assume {:verifier.code 0} true;
    goto $bb874;

  $bb868:
    assume $i1951 == 1;
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    goto $bb874;

  $bb863:
    assume $i1937 == 1;
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    goto $bb866;

  $bb860:
    assume $i1933 == 1;
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    goto $bb866;

  $bb855:
    assume $i1919 == 1;
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    goto $bb858;

  $bb852:
    assume $i1915 == 1;
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    goto $bb858;

  $bb847:
    assume $i1901 == 1;
    goto corral_source_split_5114;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    goto $bb850;

  $bb844:
    assume $i1897 == 1;
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    goto $bb850;

  $bb839:
    assume $i1883 == 1;
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    goto $bb842;

  $bb836:
    assume $i1879 == 1;
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    goto $bb842;

  $bb831:
    assume $i1865 == 1;
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    goto $bb834;

  $bb828:
    assume $i1861 == 1;
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    goto $bb834;

  $bb823:
    assume $i1847 == 1;
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    goto $bb826;

  $bb820:
    assume $i1843 == 1;
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    goto $bb826;

  $bb815:
    assume $i1829 == 1;
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    goto $bb818;

  $bb812:
    assume $i1825 == 1;
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    goto $bb818;

  $bb807:
    assume $i1811 == 1;
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    goto $bb810;

  $bb804:
    assume $i1807 == 1;
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    goto $bb810;

  $bb799:
    assume $i1793 == 1;
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    goto $bb802;

  $bb796:
    assume $i1789 == 1;
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    goto $bb802;

  $bb791:
    assume $i1775 == 1;
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    goto $bb794;

  $bb788:
    assume $i1771 == 1;
    goto corral_source_split_4926;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    goto $bb794;

  $bb783:
    assume $i1757 == 1;
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    goto $bb786;

  $bb780:
    assume $i1753 == 1;
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    goto $bb786;

  $bb775:
    assume $i1739 == 1;
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    goto $bb778;

  $bb772:
    assume $i1735 == 1;
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    goto $bb778;

  $bb767:
    assume $i1721 == 1;
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    goto $bb770;

  $bb764:
    assume $i1717 == 1;
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    goto $bb770;

  $bb759:
    assume $i1703 == 1;
    goto corral_source_split_4828;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    goto $bb762;

  $bb756:
    assume $i1699 == 1;
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    goto $bb762;

  $bb751:
    assume $i1685 == 1;
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    goto $bb754;

  $bb748:
    assume $i1681 == 1;
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    goto $bb754;

  $bb743:
    assume $i1667 == 1;
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    goto $bb746;

  $bb740:
    assume $i1663 == 1;
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    goto $bb746;

  $bb735:
    assume $i1649 == 1;
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    goto $bb738;

  $bb732:
    assume $i1645 == 1;
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    goto $bb738;

  $bb727:
    assume $i1631 == 1;
    goto corral_source_split_4724;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    goto $bb730;

  $bb724:
    assume $i1627 == 1;
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    goto $bb730;

  $bb719:
    assume $i1613 == 1;
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    goto $bb722;

  $bb716:
    assume $i1609 == 1;
    goto corral_source_split_4692;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    goto $bb722;

  $bb711:
    assume $i1595 == 1;
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    goto $bb714;

  $bb708:
    assume $i1591 == 1;
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    goto $bb714;

  $bb703:
    assume $i1577 == 1;
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    goto $bb706;

  $bb700:
    assume $i1573 == 1;
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    goto $bb706;

  $bb695:
    assume $i1559 == 1;
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    goto $bb698;

  $bb692:
    assume $i1555 == 1;
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    goto $bb698;

  $bb687:
    assume $i1541 == 1;
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    goto $bb690;

  $bb684:
    assume $i1537 == 1;
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    goto $bb690;

  $bb679:
    assume $i1523 == 1;
    goto corral_source_split_4568;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    goto $bb682;

  $bb676:
    assume $i1519 == 1;
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    goto $bb682;

  $bb671:
    assume $i1505 == 1;
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    goto $bb674;

  $bb668:
    assume $i1501 == 1;
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    goto $bb674;

  $bb663:
    assume $i1487 == 1;
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    goto $bb666;

  $bb660:
    assume $i1483 == 1;
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    goto $bb666;

  $bb655:
    assume $i1469 == 1;
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    goto $bb658;

  $bb652:
    assume $i1465 == 1;
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    goto $bb658;

  $bb647:
    assume $i1451 == 1;
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    goto $bb650;

  $bb644:
    assume $i1447 == 1;
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    goto $bb650;

  $bb639:
    assume $i1433 == 1;
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    goto $bb642;

  $bb636:
    assume $i1429 == 1;
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    goto $bb642;

  $bb631:
    assume $i1415 == 1;
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    goto $bb634;

  $bb628:
    assume $i1411 == 1;
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    goto $bb634;

  $bb623:
    assume $i1397 == 1;
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    goto $bb626;

  $bb620:
    assume $i1393 == 1;
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    goto $bb626;

  $bb615:
    assume $i1379 == 1;
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    goto $bb618;

  $bb612:
    assume $i1375 == 1;
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    goto $bb618;

  $bb607:
    assume $i1361 == 1;
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    goto $bb610;

  $bb604:
    assume $i1357 == 1;
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    goto $bb610;

  $bb599:
    assume $i1343 == 1;
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    goto $bb602;

  $bb596:
    assume $i1339 == 1;
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    goto $bb602;

  $bb591:
    assume $i1325 == 1;
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    goto $bb594;

  $bb588:
    assume $i1321 == 1;
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    goto $bb594;

  $bb583:
    assume $i1307 == 1;
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    goto $bb586;

  $bb580:
    assume $i1303 == 1;
    goto corral_source_split_4250;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    goto $bb586;

  $bb575:
    assume $i1289 == 1;
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    goto $bb578;

  $bb572:
    assume $i1285 == 1;
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    goto $bb578;

  $bb567:
    assume $i1271 == 1;
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    goto $bb570;

  $bb564:
    assume $i1267 == 1;
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    goto $bb570;

  $bb559:
    assume $i1253 == 1;
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    goto $bb562;

  $bb556:
    assume $i1249 == 1;
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    goto $bb562;

  $bb551:
    assume $i1235 == 1;
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    goto $bb554;

  $bb548:
    assume $i1231 == 1;
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    goto $bb554;

  $bb543:
    assume $i1217 == 1;
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    goto $bb546;

  $bb540:
    assume $i1213 == 1;
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    goto $bb546;

  $bb535:
    assume $i1199 == 1;
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    goto $bb538;

  $bb532:
    assume $i1195 == 1;
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    goto $bb538;

  $bb527:
    assume $i1181 == 1;
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    goto $bb530;

  $bb524:
    assume $i1177 == 1;
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    goto $bb530;

  $bb519:
    assume $i1163 == 1;
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    goto $bb522;

  $bb516:
    assume $i1159 == 1;
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    goto $bb522;

  $bb511:
    assume $i1145 == 1;
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    goto $bb514;

  $bb508:
    assume $i1141 == 1;
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    goto $bb514;

  $bb503:
    assume $i1127 == 1;
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    goto $bb506;

  $bb500:
    assume $i1123 == 1;
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    goto $bb506;

  $bb495:
    assume $i1109 == 1;
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    goto $bb498;

  $bb492:
    assume $i1105 == 1;
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    goto $bb498;

  $bb487:
    assume $i1091 == 1;
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    goto $bb490;

  $bb484:
    assume $i1087 == 1;
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    goto $bb490;

  $bb479:
    assume $i1073 == 1;
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    goto $bb482;

  $bb476:
    assume $i1069 == 1;
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    goto $bb482;

  $bb471:
    assume $i1055 == 1;
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    goto $bb474;

  $bb468:
    assume $i1051 == 1;
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    goto $bb474;

  $bb463:
    assume $i1037 == 1;
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    goto $bb466;

  $bb460:
    assume $i1033 == 1;
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    goto $bb466;

  $bb455:
    assume $i1019 == 1;
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    goto $bb458;

  $bb452:
    assume $i1015 == 1;
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    goto $bb458;

  $bb447:
    assume $i1001 == 1;
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    goto $bb450;

  $bb444:
    assume $i997 == 1;
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    goto $bb450;

  $bb439:
    assume $i983 == 1;
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    goto $bb442;

  $bb436:
    assume $i979 == 1;
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    goto $bb442;

  $bb431:
    assume $i965 == 1;
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    goto $bb434;

  $bb428:
    assume $i961 == 1;
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    goto $bb434;

  $bb423:
    assume $i947 == 1;
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    goto $bb426;

  $bb420:
    assume $i943 == 1;
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    goto $bb426;

  $bb415:
    assume $i929 == 1;
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    goto $bb418;

  $bb412:
    assume $i925 == 1;
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    goto $bb418;

  $bb407:
    assume $i911 == 1;
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    goto $bb410;

  $bb404:
    assume $i907 == 1;
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    goto $bb410;

  $bb399:
    assume $i893 == 1;
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    goto $bb402;

  $bb396:
    assume $i889 == 1;
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    goto $bb402;

  $bb391:
    assume $i875 == 1;
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    goto $bb394;

  $bb388:
    assume $i871 == 1;
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    goto $bb394;

  $bb383:
    assume $i857 == 1;
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    goto $bb386;

  $bb380:
    assume $i853 == 1;
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    goto $bb386;

  $bb375:
    assume $i839 == 1;
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    goto $bb378;

  $bb372:
    assume $i835 == 1;
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    goto $bb378;

  $bb367:
    assume $i821 == 1;
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    goto $bb370;

  $bb364:
    assume $i817 == 1;
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    goto $bb370;

  $bb359:
    assume $i803 == 1;
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    goto $bb362;

  $bb356:
    assume $i799 == 1;
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    goto $bb362;

  $bb351:
    assume $i785 == 1;
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb348:
    assume $i781 == 1;
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb343:
    assume $i767 == 1;
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb340:
    assume $i763 == 1;
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb335:
    assume $i749 == 1;
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    goto $bb338;

  $bb332:
    assume $i745 == 1;
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    goto $bb338;

  $bb327:
    assume $i731 == 1;
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    goto $bb330;

  $bb324:
    assume $i727 == 1;
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    goto $bb330;

  $bb319:
    assume $i713 == 1;
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    goto $bb322;

  $bb316:
    assume $i709 == 1;
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    goto $bb322;

  $bb311:
    assume $i695 == 1;
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    goto $bb314;

  $bb308:
    assume $i691 == 1;
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    goto $bb314;

  $bb303:
    assume $i677 == 1;
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    goto $bb306;

  $bb300:
    assume $i673 == 1;
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    goto $bb306;

  $bb295:
    assume $i659 == 1;
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    goto $bb298;

  $bb292:
    assume $i655 == 1;
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    goto $bb298;

  $bb287:
    assume $i641 == 1;
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    goto $bb290;

  $bb284:
    assume $i637 == 1;
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    goto $bb290;

  $bb279:
    assume $i623 == 1;
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    goto $bb282;

  $bb276:
    assume $i619 == 1;
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    goto $bb282;

  $bb271:
    assume $i605 == 1;
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb268:
    assume $i601 == 1;
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb263:
    assume $i587 == 1;
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb260:
    assume $i583 == 1;
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb255:
    assume $i569 == 1;
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb252:
    assume $i565 == 1;
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb247:
    assume $i551 == 1;
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb244:
    assume $i547 == 1;
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb239:
    assume $i533 == 1;
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb236:
    assume $i529 == 1;
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb231:
    assume $i515 == 1;
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb228:
    assume $i511 == 1;
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb223:
    assume $i497 == 1;
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb220:
    assume $i493 == 1;
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb215:
    assume $i479 == 1;
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb212:
    assume $i475 == 1;
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb207:
    assume $i461 == 1;
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb204:
    assume $i457 == 1;
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb199:
    assume $i443 == 1;
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb196:
    assume $i439 == 1;
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb191:
    assume $i425 == 1;
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb188:
    assume $i421 == 1;
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb183:
    assume $i407 == 1;
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb180:
    assume $i403 == 1;
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb175:
    assume $i389 == 1;
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb172:
    assume $i385 == 1;
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb167:
    assume $i371 == 1;
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb164:
    assume $i367 == 1;
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb159:
    assume $i353 == 1;
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb156:
    assume $i349 == 1;
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb151:
    assume $i335 == 1;
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb148:
    assume $i331 == 1;
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb143:
    assume $i317 == 1;
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb140:
    assume $i313 == 1;
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb135:
    assume $i299 == 1;
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb132:
    assume $i295 == 1;
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb127:
    assume $i281 == 1;
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb124:
    assume $i277 == 1;
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb119:
    assume $i263 == 1;
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb116:
    assume $i259 == 1;
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb111:
    assume $i245 == 1;
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb108:
    assume $i241 == 1;
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb103:
    assume $i227 == 1;
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb100:
    assume $i223 == 1;
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb95:
    assume $i209 == 1;
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb92:
    assume $i205 == 1;
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb87:
    assume $i191 == 1;
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb84:
    assume $i187 == 1;
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb79:
    assume $i173 == 1;
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb76:
    assume $i169 == 1;
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb71:
    assume $i155 == 1;
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb68:
    assume $i151 == 1;
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb63:
    assume $i137 == 1;
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb60:
    assume $i133 == 1;
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb55:
    assume $i119 == 1;
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb52:
    assume $i115 == 1;
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb47:
    assume $i101 == 1;
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb44:
    assume $i97 == 1;
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb39:
    assume $i83 == 1;
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb36:
    assume $i79 == 1;
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb31:
    assume $i65 == 1;
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb28:
    assume $i61 == 1;
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb23:
    assume $i47 == 1;
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb20:
    assume $i43 == 1;
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb15:
    assume $i29 == 1;
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb12:
    assume $i25 == 1;
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb7:
    assume $i10 == 1;
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb3:
    assume $i6 == 1;
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const gnttab_free_grant_references: ref;

axiom gnttab_free_grant_references == $sub.ref(0, 285436);

procedure gnttab_free_grant_references($i0: i32);
  free requires assertsPassed;



implementation gnttab_free_grant_references($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2100} {:cexpr "gnttab_free_grant_references:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_9029;

  corral_source_split_9029:
    assume {:verifier.code 0} true;
    return;
}



const xennet_end_access: ref;

axiom xennet_end_access == $sub.ref(0, 286468);

procedure xennet_end_access($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation xennet_end_access($i0: i32, $p1: ref)
{
  var $i2: i1;
  var $i3: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2101} {:cexpr "xennet_end_access:arg:ref"} boogie_si_record_i32($i0);
    goto corral_source_split_9031;

  corral_source_split_9031:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i0, 0);
    goto corral_source_split_9032;

  corral_source_split_9032:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_9034;

  corral_source_split_9034:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p1);
    goto corral_source_split_9035;

  corral_source_split_9035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2102} gnttab_end_foreign_access($i0, 0, $i3);
    goto corral_source_split_9036;

  corral_source_split_9036:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const gnttab_end_foreign_access: ref;

axiom gnttab_end_foreign_access == $sub.ref(0, 287500);

procedure gnttab_end_foreign_access($i0: i32, $i1: i32, $i2: i64);
  free requires assertsPassed;



implementation gnttab_end_foreign_access($i0: i32, $i1: i32, $i2: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2103} {:cexpr "gnttab_end_foreign_access:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 2104} {:cexpr "gnttab_end_foreign_access:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 2105} {:cexpr "gnttab_end_foreign_access:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_9038;

  corral_source_split_9038:
    assume {:verifier.code 0} true;
    return;
}



const get_page: ref;

axiom get_page == $sub.ref(0, 288532);

procedure get_page($p0: ref);
  free requires assertsPassed;



implementation get_page($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i1;
  var $i8: i8;
  var $i9: i1;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9040;

  corral_source_split_9040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2106} $i1 := PageTail($p0);
    call {:si_unique_call 2107} {:cexpr "tmp___1"} boogie_si_record_i32($i1);
    goto corral_source_split_9041;

  corral_source_split_9041:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_9042;

  corral_source_split_9042:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_9043;

  corral_source_split_9043:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_9044;

  corral_source_split_9044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2108} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 2109} {:cexpr "tmp___2"} boogie_si_record_i64($i5);
    goto corral_source_split_9045;

  corral_source_split_9045:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_9046;

  corral_source_split_9046:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_9058;

  corral_source_split_9058:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_9059;

  corral_source_split_9059:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_9060;

  corral_source_split_9060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2114} $i17 := atomic_read($p16);
    call {:si_unique_call 2115} {:cexpr "tmp___3"} boogie_si_record_i32($i17);
    goto corral_source_split_9061;

  corral_source_split_9061:
    assume {:verifier.code 0} true;
    $i18 := $sle.i32($i17, 0);
    goto corral_source_split_9062;

  corral_source_split_9062:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i32($i18);
    goto corral_source_split_9063;

  corral_source_split_9063:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_9064;

  corral_source_split_9064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2116} $i21 := ldv__builtin_expect($i20, 0);
    call {:si_unique_call 2117} {:cexpr "tmp___4"} boogie_si_record_i64($i21);
    goto corral_source_split_9065;

  corral_source_split_9065:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_9066;

  corral_source_split_9066:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_9071;

  corral_source_split_9071:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_9072;

  corral_source_split_9072:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_9073;

  corral_source_split_9073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2120} atomic_inc($p26);
    goto corral_source_split_9074;

  corral_source_split_9074:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i22 == 1;
    goto corral_source_split_9068;

  corral_source_split_9068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2118} dump_page($p0, .str.78);
    call {:si_unique_call 2119} devirtbounce.4(0, .str.79, 543, 12);
    goto corral_source_split_9069;

  corral_source_split_9069:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    call get_page_loop_$bb10();
    goto $bb10_last;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_9048;

  corral_source_split_9048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2110} $i7 := __get_page_tail($p0);
    goto corral_source_split_9049;

  corral_source_split_9049:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i8($i7);
    call {:si_unique_call 2111} {:cexpr "tmp"} boogie_si_record_i8($i8);
    goto corral_source_split_9050;

  corral_source_split_9050:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i8);
    goto corral_source_split_9051;

  corral_source_split_9051:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i64($i9);
    goto corral_source_split_9052;

  corral_source_split_9052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2112} $i11 := ldv__builtin_expect($i10, 1);
    call {:si_unique_call 2113} {:cexpr "tmp___0"} boogie_si_record_i64($i11);
    goto corral_source_split_9053;

  corral_source_split_9053:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_9054;

  corral_source_split_9054:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb3:
    assume $i12 == 1;
    goto corral_source_split_9056;

  corral_source_split_9056:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    goto $bb10_dummy;
}



const lowmem_page_address: ref;

axiom lowmem_page_address == $sub.ref(0, 289564);

procedure lowmem_page_address($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation lowmem_page_address($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9076;

  corral_source_split_9076:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_9077;

  corral_source_split_9077:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 24189255811072);
    goto corral_source_split_9078;

  corral_source_split_9078:
    assume {:verifier.code 0} true;
    $i3 := $sdiv.i64($i2, 64);
    goto corral_source_split_9079;

  corral_source_split_9079:
    assume {:verifier.code 0} true;
    $i4 := $shl.i64($i3, 12);
    goto corral_source_split_9080;

  corral_source_split_9080:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, $sub.i64(0, 131941395333120));
    goto corral_source_split_9081;

  corral_source_split_9081:
    assume {:verifier.code 0} true;
    $p6 := $i2p.i64.ref($i5);
    goto corral_source_split_9082;

  corral_source_split_9082:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const PageTail: ref;

axiom PageTail == $sub.ref(0, 290596);

procedure PageTail($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation PageTail($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9084;

  corral_source_split_9084:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_9085;

  corral_source_split_9085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2121} $i2 := constant_test_bit(15, $p1);
    call {:si_unique_call 2122} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_9086;

  corral_source_split_9086:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __get_page_tail: ref;

axiom __get_page_tail == $sub.ref(0, 291628);

procedure __get_page_tail($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation __get_page_tail($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9088;

  corral_source_split_9088:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2123} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 2124} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_9089;

  corral_source_split_9089:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const dump_page: ref;

axiom dump_page == $sub.ref(0, 292660);

procedure dump_page($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation dump_page($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9091;

  corral_source_split_9091:
    assume {:verifier.code 0} true;
    return;
}



const skb_entry_is_link: ref;

axiom skb_entry_is_link == $sub.ref(0, 293692);

procedure skb_entry_is_link($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation skb_entry_is_link($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9093;

  corral_source_split_9093:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_9094;

  corral_source_split_9094:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_9095;

  corral_source_split_9095:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_9096;

  corral_source_split_9096:
    assume {:verifier.code 0} true;
    $i4 := $ule.i64($i3, 18446612132314218495);
    goto corral_source_split_9097;

  corral_source_split_9097:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_9098;

  corral_source_split_9098:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const msleep: ref;

axiom msleep == $sub.ref(0, 294724);

procedure msleep($i0: i32);
  free requires assertsPassed;



implementation msleep($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2125} {:cexpr "msleep:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_9100;

  corral_source_split_9100:
    assume {:verifier.code 0} true;
    return;
}



const ldv_unregister_netdev_44: ref;

axiom ldv_unregister_netdev_44 == $sub.ref(0, 295756);

procedure ldv_unregister_netdev_44($p0: ref);
  free requires assertsPassed;
  modifies $M.30;



implementation ldv_unregister_netdev_44($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9102;

  corral_source_split_9102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2126} unregister_netdev($p0);
    goto corral_source_split_9103;

  corral_source_split_9103:
    assume {:verifier.code 0} true;
    $M.30 := 0;
    call {:si_unique_call 2127} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    goto corral_source_split_9104;

  corral_source_split_9104:
    assume {:verifier.code 0} true;
    return;
}



const xennet_destroy_queues: ref;

axiom xennet_destroy_queues == $sub.ref(0, 296788);

procedure xennet_destroy_queues($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.16, $M.18, $M.20, $M.22;



implementation xennet_destroy_queues($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p11: ref;
  var $p12: ref;
  var $i13: i1;
  var $i14: i8;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $i6: i32;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var vslice_dummy_var_23: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9106;

  corral_source_split_9106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2128} rtnl_lock();
    goto corral_source_split_9107;

  corral_source_split_9107:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_9108;

  corral_source_split_9108:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_9109;

  corral_source_split_9109:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 2968)), $mul.ref(1028, 1));
    goto corral_source_split_9110;

  corral_source_split_9110:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_9111;

  corral_source_split_9111:
    assume {:verifier.code 0} true;
    $i5 := $ugt.i32($i4, 0);
    goto corral_source_split_9112;

  corral_source_split_9112:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2135} rtnl_unlock();
    goto corral_source_split_9144;

  corral_source_split_9144:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_9145;

  corral_source_split_9145:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_9146;

  corral_source_split_9146:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_9147;

  corral_source_split_9147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2136} kfree($p27);
    goto corral_source_split_9148;

  corral_source_split_9148:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_9149;

  corral_source_split_9149:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p28, $0.ref);
    goto corral_source_split_9150;

  corral_source_split_9150:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_9114;

  corral_source_split_9114:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb4;

  $bb4:
    call $p7, $p8, $i9, $p11, $p12, $i13, $i14, $i15, $p16, $p17, $p19, $i20, $p21, $p22, $i23, $i24, $i6, vslice_dummy_var_23 := xennet_destroy_queues_loop_$bb4($p0, $p1, $p7, $p8, $i9, $p11, $p12, $i13, $i14, $i15, $p16, $p17, $p19, $i20, $p21, $p22, $i23, $i24, $i6, vslice_dummy_var_23);
    goto $bb4_last;

  corral_source_split_9116:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_9118;

  corral_source_split_9118:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_9119;

  corral_source_split_9119:
    assume {:verifier.code 0} true;
    $i9 := $zext.i32.i64($i6);
    goto corral_source_split_9120;

  corral_source_split_9120:
    assume {:verifier.code 0} true;
    goto corral_source_split_9121;

  corral_source_split_9121:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_9122;

  corral_source_split_9122:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_9123;

  corral_source_split_9123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2129} $i13 := netif_running($p12);
    goto corral_source_split_9124;

  corral_source_split_9124:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i8($i13);
    call {:si_unique_call 2130} {:cexpr "tmp"} boogie_si_record_i8($i14);
    goto corral_source_split_9125;

  corral_source_split_9125:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i8.i1($i14);
    goto corral_source_split_9126;

  corral_source_split_9126:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p8, $mul.ref($i9, 8944)), $mul.ref(5736, 1));
    goto corral_source_split_9132;

  corral_source_split_9132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2132} vslice_dummy_var_23 := ldv_del_timer_sync_43($p17);
    goto corral_source_split_9133;

  corral_source_split_9133:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p8, $mul.ref($i9, 8944)), $mul.ref(40, 1));
    goto corral_source_split_9134;

  corral_source_split_9134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2133} netif_napi_del($p19);
    goto corral_source_split_9135;

  corral_source_split_9135:
    assume {:verifier.code 0} true;
    $i20 := $add.i32($i6, 1);
    call {:si_unique_call 2134} {:cexpr "i"} boogie_si_record_i32($i20);
    goto corral_source_split_9136;

  corral_source_split_9136:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p1);
    goto corral_source_split_9137;

  corral_source_split_9137:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 2968)), $mul.ref(1028, 1));
    goto corral_source_split_9138;

  corral_source_split_9138:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_9139;

  corral_source_split_9139:
    assume {:verifier.code 0} true;
    $i24 := $ugt.i32($i23, $i20);
    goto corral_source_split_9140;

  corral_source_split_9140:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i24 == 1);
    goto corral_source_split_9142;

  corral_source_split_9142:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb9:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    $i6 := $i20;
    goto $bb9_dummy;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_9128;

  corral_source_split_9128:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p8, $mul.ref($i9, 8944)), $mul.ref(40, 1));
    goto corral_source_split_9129;

  corral_source_split_9129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2131} napi_disable($p16);
    goto corral_source_split_9130;

  corral_source_split_9130:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb9_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_9116;
}



const xennet_free_netdev: ref;

axiom xennet_free_netdev == $sub.ref(0, 297820);

procedure xennet_free_netdev($p0: ref);
  free requires assertsPassed;
  modifies $M.30;



implementation xennet_free_netdev($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9152;

  corral_source_split_9152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2137} $p1 := netdev_priv($p0);
    goto corral_source_split_9153;

  corral_source_split_9153:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_9154;

  corral_source_split_9154:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_9155;

  corral_source_split_9155:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_9156;

  corral_source_split_9156:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_9157;

  corral_source_split_9157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2138} free_percpu($p5);
    goto corral_source_split_9158;

  corral_source_split_9158:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_9159;

  corral_source_split_9159:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_9160;

  corral_source_split_9160:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_9161;

  corral_source_split_9161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2139} free_percpu($p8);
    goto corral_source_split_9162;

  corral_source_split_9162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2140} ldv_free_netdev_41($p0);
    goto corral_source_split_9163;

  corral_source_split_9163:
    assume {:verifier.code 0} true;
    return;
}



const free_percpu: ref;

axiom free_percpu == $sub.ref(0, 298852);

procedure free_percpu($p0: ref);
  free requires assertsPassed;



implementation free_percpu($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9165;

  corral_source_split_9165:
    assume {:verifier.code 0} true;
    return;
}



const ldv_free_netdev_41: ref;

axiom ldv_free_netdev_41 == $sub.ref(0, 299884);

procedure ldv_free_netdev_41($p0: ref);
  free requires assertsPassed;
  modifies $M.30;



implementation ldv_free_netdev_41($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9167;

  corral_source_split_9167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2141} free_netdev($p0);
    goto corral_source_split_9168;

  corral_source_split_9168:
    assume {:verifier.code 0} true;
    $M.30 := 0;
    call {:si_unique_call 2142} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    goto corral_source_split_9169;

  corral_source_split_9169:
    assume {:verifier.code 0} true;
    return;
}



const free_netdev: ref;

axiom free_netdev == $sub.ref(0, 300916);

procedure free_netdev($p0: ref);
  free requires assertsPassed;



implementation free_netdev($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9171;

  corral_source_split_9171:
    assume {:verifier.code 0} true;
    return;
}



const rtnl_lock: ref;

axiom rtnl_lock == $sub.ref(0, 301948);

procedure rtnl_lock();
  free requires assertsPassed;



implementation rtnl_lock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9173;

  corral_source_split_9173:
    assume {:verifier.code 0} true;
    return;
}



const ldv_del_timer_sync_43: ref;

axiom ldv_del_timer_sync_43 == $sub.ref(0, 302980);

procedure ldv_del_timer_sync_43($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.16, $M.18, $M.20, $M.22;



implementation ldv_del_timer_sync_43($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9175;

  corral_source_split_9175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2143} $i1 := del_timer_sync($p0);
    call {:si_unique_call 2144} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_9176;

  corral_source_split_9176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2145} disable_suitable_timer_1($p0);
    goto corral_source_split_9177;

  corral_source_split_9177:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const netif_napi_del: ref;

axiom netif_napi_del == $sub.ref(0, 304012);

procedure netif_napi_del($p0: ref);
  free requires assertsPassed;



implementation netif_napi_del($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9179;

  corral_source_split_9179:
    assume {:verifier.code 0} true;
    return;
}



const rtnl_unlock: ref;

axiom rtnl_unlock == $sub.ref(0, 305044);

procedure rtnl_unlock();
  free requires assertsPassed;



implementation rtnl_unlock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9181;

  corral_source_split_9181:
    assume {:verifier.code 0} true;
    return;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 306076);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9183;

  corral_source_split_9183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2146} free_($p0);
    goto corral_source_split_9184;

  corral_source_split_9184:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 307108);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 2147} $free($p0);
    return;
}



const del_timer_sync: ref;

axiom del_timer_sync == $sub.ref(0, 308140);

procedure del_timer_sync($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation del_timer_sync($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9186;

  corral_source_split_9186:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2148} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 2149} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_9187;

  corral_source_split_9187:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const disable_suitable_timer_1: ref;

axiom disable_suitable_timer_1 == $sub.ref(0, 309172);

procedure disable_suitable_timer_1($p0: ref);
  free requires assertsPassed;
  modifies $M.16, $M.18, $M.20, $M.22;



implementation disable_suitable_timer_1($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i64;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i64;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i64;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $i21: i64;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9189;

  corral_source_split_9189:
    assume {:verifier.code 0} true;
    $i1 := $M.16;
    goto corral_source_split_9190;

  corral_source_split_9190:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_9191;

  corral_source_split_9191:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i7 := $M.18;
    goto corral_source_split_9202;

  corral_source_split_9202:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_9203;

  corral_source_split_9203:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i13 := $M.20;
    goto corral_source_split_9214;

  corral_source_split_9214:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_9215;

  corral_source_split_9215:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i19 := $M.22;
    goto corral_source_split_9226;

  corral_source_split_9226:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_9227;

  corral_source_split_9227:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb20:
    assume $i20 == 1;
    goto corral_source_split_9229;

  corral_source_split_9229:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p0);
    goto corral_source_split_9230;

  corral_source_split_9230:
    assume {:verifier.code 0} true;
    $p22 := $M.21;
    goto corral_source_split_9231;

  corral_source_split_9231:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_9232;

  corral_source_split_9232:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i21, $i23);
    goto corral_source_split_9233;

  corral_source_split_9233:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb22;

  $bb23:
    assume $i24 == 1;
    goto corral_source_split_9235;

  corral_source_split_9235:
    assume {:verifier.code 0} true;
    $M.22 := 0;
    call {:si_unique_call 2153} {:cexpr "ldv_timer_1_3"} boogie_si_record_i32(0);
    goto corral_source_split_9236;

  corral_source_split_9236:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb14:
    assume $i14 == 1;
    goto corral_source_split_9217;

  corral_source_split_9217:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p0);
    goto corral_source_split_9218;

  corral_source_split_9218:
    assume {:verifier.code 0} true;
    $p16 := $M.19;
    goto corral_source_split_9219;

  corral_source_split_9219:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_9220;

  corral_source_split_9220:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i15, $i17);
    goto corral_source_split_9221;

  corral_source_split_9221:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb16;

  $bb17:
    assume $i18 == 1;
    goto corral_source_split_9223;

  corral_source_split_9223:
    assume {:verifier.code 0} true;
    $M.20 := 0;
    call {:si_unique_call 2152} {:cexpr "ldv_timer_1_2"} boogie_si_record_i32(0);
    goto corral_source_split_9224;

  corral_source_split_9224:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb8:
    assume $i8 == 1;
    goto corral_source_split_9205;

  corral_source_split_9205:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p0);
    goto corral_source_split_9206;

  corral_source_split_9206:
    assume {:verifier.code 0} true;
    $p10 := $M.17;
    goto corral_source_split_9207;

  corral_source_split_9207:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_9208;

  corral_source_split_9208:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i9, $i11);
    goto corral_source_split_9209;

  corral_source_split_9209:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb10;

  $bb11:
    assume $i12 == 1;
    goto corral_source_split_9211;

  corral_source_split_9211:
    assume {:verifier.code 0} true;
    $M.18 := 0;
    call {:si_unique_call 2151} {:cexpr "ldv_timer_1_1"} boogie_si_record_i32(0);
    goto corral_source_split_9212;

  corral_source_split_9212:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_9193;

  corral_source_split_9193:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    goto corral_source_split_9194;

  corral_source_split_9194:
    assume {:verifier.code 0} true;
    $p4 := $M.15;
    goto corral_source_split_9195;

  corral_source_split_9195:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_9196;

  corral_source_split_9196:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i3, $i5);
    goto corral_source_split_9197;

  corral_source_split_9197:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_9199;

  corral_source_split_9199:
    assume {:verifier.code 0} true;
    $M.16 := 0;
    call {:si_unique_call 2150} {:cexpr "ldv_timer_1_0"} boogie_si_record_i32(0);
    goto corral_source_split_9200;

  corral_source_split_9200:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const unregister_netdev: ref;

axiom unregister_netdev == $sub.ref(0, 310204);

procedure unregister_netdev($p0: ref);
  free requires assertsPassed;



implementation unregister_netdev($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9238;

  corral_source_split_9238:
    assume {:verifier.code 0} true;
    return;
}



const xenbus_strstate: ref;

axiom xenbus_strstate == $sub.ref(0, 311236);

procedure xenbus_strstate($i0: i32) returns ($r: ref);
  free requires assertsPassed;



implementation xenbus_strstate($i0: i32) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2154} {:cexpr "xenbus_strstate:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_9240;

  corral_source_split_9240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2155} $p1 := external_alloc();
    goto corral_source_split_9241;

  corral_source_split_9241:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const xennet_connect: ref;

axiom xennet_connect == $sub.ref(0, 312268);

procedure xennet_connect($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.31, $M.12, $M.32, $M.0, $M.14, $M.33, $M.34, $M.36, $M.37, $CurrAddr, $M.39, $M.41, $M.43, $M.42, $M.15, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.44, assertsPassed;



implementation xennet_connect($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $i26: i1;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $p34: ref;
  var $i35: i32;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $i40: i32;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $i46: i1;
  var $i27: i32;
  var $i17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2156} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2157} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_9243;

  corral_source_split_9243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2158} $p3 := netdev_priv($p0);
    goto corral_source_split_9244;

  corral_source_split_9244:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_9245;

  corral_source_split_9245:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_9246;

  corral_source_split_9246:
    assume {:verifier.code 0} true;
    $M.31 := $store.i32($M.31, $p5, 0);
    goto corral_source_split_9247;

  corral_source_split_9247:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_9248;

  corral_source_split_9248:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_9249;

  corral_source_split_9249:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 1672)), $mul.ref(16, 1));
    goto corral_source_split_9250;

  corral_source_split_9250:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_9251;

  corral_source_split_9251:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_9252;

  corral_source_split_9252:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.31, $p10);
    goto corral_source_split_9253;

  corral_source_split_9253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2159} $i12 := xenbus_scanf.i32.ref.ref.ref.ref($i11, $p9, .str.25, .str.26, $p1);
    call {:si_unique_call 2160} {:cexpr "err"} boogie_si_record_i32($i12);
    goto corral_source_split_9254;

  corral_source_split_9254:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 1);
    goto corral_source_split_9255;

  corral_source_split_9255:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.32, $p1);
    goto corral_source_split_9260;

  corral_source_split_9260:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_9261;

  corral_source_split_9261:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_9269;

  corral_source_split_9269:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_9270;

  corral_source_split_9270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2162} $i20 := talk_to_netback($p19, $p4);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    call {:si_unique_call 2163} {:cexpr "err"} boogie_si_record_i32($i20);
    goto corral_source_split_9271;

  corral_source_split_9271:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_9272;

  corral_source_split_9272:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1028, 1));
    goto corral_source_split_9276;

  corral_source_split_9276:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    call {:si_unique_call 2164} {:cexpr "num_queues"} boogie_si_record_i32($i23);
    goto corral_source_split_9277;

  corral_source_split_9277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2165} rtnl_lock();
    goto corral_source_split_9278;

  corral_source_split_9278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2166} netdev_update_features($p0);
    goto corral_source_split_9279;

  corral_source_split_9279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2167} rtnl_unlock();
    goto corral_source_split_9280;

  corral_source_split_9280:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p4, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_9281;

  corral_source_split_9281:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_9282;

  corral_source_split_9282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2168} netif_carrier_on($p25);
    goto corral_source_split_9283;

  corral_source_split_9283:
    assume {:verifier.code 0} true;
    $i26 := $ult.i32(0, $i23);
    goto corral_source_split_9284;

  corral_source_split_9284:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_9267;

  corral_source_split_9267:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb11:
    assume $i26 == 1;
    goto corral_source_split_9286;

  corral_source_split_9286:
    assume {:verifier.code 0} true;
    $i27 := 0;
    goto $bb14;

  $bb14:
    call $p28, $p29, $i30, $p31, $p32, $i33, $p34, $i35, $p36, $i37, $i38, $p39, $i40, $p41, $p42, $p43, $p44, $i45, $i46, $i27 := xennet_connect_loop_$bb14($p4, $i23, $p28, $p29, $i30, $p31, $p32, $i33, $p34, $i35, $p36, $i37, $i38, $p39, $i40, $p41, $p42, $p43, $p44, $i45, $i46, $i27);
    goto $bb14_last;

  corral_source_split_9288:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p4, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_9290;

  corral_source_split_9290:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_9291;

  corral_source_split_9291:
    assume {:verifier.code 0} true;
    $i30 := $zext.i32.i64($i27);
    goto corral_source_split_9292;

  corral_source_split_9292:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($p29, $mul.ref($i30, 8944));
    goto corral_source_split_9293;

  corral_source_split_9293:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p29, $mul.ref($i30, 8944)), $mul.ref(328, 1));
    goto corral_source_split_9294;

  corral_source_split_9294:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_9295;

  corral_source_split_9295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2169} notify_remote_via_irq($i33);
    goto corral_source_split_9296;

  corral_source_split_9296:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p29, $mul.ref($i30, 8944)), $mul.ref(328, 1));
    goto corral_source_split_9297;

  corral_source_split_9297:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_9298;

  corral_source_split_9298:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p29, $mul.ref($i30, 8944)), $mul.ref(332, 1));
    goto corral_source_split_9299;

  corral_source_split_9299:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_9300;

  corral_source_split_9300:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i35, $i37);
    goto corral_source_split_9301;

  corral_source_split_9301:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p29, $mul.ref($i30, 8944)), $mul.ref(392, 1));
    goto corral_source_split_9308;

  corral_source_split_9308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2171} spin_lock_irq($p41);
    goto corral_source_split_9309;

  corral_source_split_9309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2172} xennet_tx_buf_gc($p31);
    goto corral_source_split_9310;

  corral_source_split_9310:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p29, $mul.ref($i30, 8944)), $mul.ref(392, 1));
    goto corral_source_split_9311;

  corral_source_split_9311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2173} spin_unlock_irq($p42);
    goto corral_source_split_9312;

  corral_source_split_9312:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p29, $mul.ref($i30, 8944)), $mul.ref(5632, 1));
    goto corral_source_split_9313;

  corral_source_split_9313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2174} spin_lock_bh($p43);
    goto corral_source_split_9314;

  corral_source_split_9314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2175} xennet_alloc_rx_buffers($p31);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    goto corral_source_split_9315;

  corral_source_split_9315:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p29, $mul.ref($i30, 8944)), $mul.ref(5632, 1));
    goto corral_source_split_9316;

  corral_source_split_9316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2176} spin_unlock_bh($p44);
    goto corral_source_split_9317;

  corral_source_split_9317:
    assume {:verifier.code 0} true;
    $i45 := $add.i32($i27, 1);
    call {:si_unique_call 2177} {:cexpr "j"} boogie_si_record_i32($i45);
    goto corral_source_split_9318;

  corral_source_split_9318:
    assume {:verifier.code 0} true;
    $i46 := $ult.i32($i45, $i23);
    goto corral_source_split_9319;

  corral_source_split_9319:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i46 == 1);
    goto corral_source_split_9321;

  corral_source_split_9321:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb19:
    assume $i46 == 1;
    assume {:verifier.code 0} true;
    $i27 := $i45;
    goto $bb19_dummy;

  SeqInstr_31:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i38 == 1;
    goto corral_source_split_9303;

  corral_source_split_9303:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p29, $mul.ref($i30, 8944)), $mul.ref(332, 1));
    goto corral_source_split_9304;

  corral_source_split_9304:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_9305;

  corral_source_split_9305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2170} notify_remote_via_irq($i40);
    goto corral_source_split_9306;

  corral_source_split_9306:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb8:
    assume $i21 == 1;
    goto corral_source_split_9274;

  corral_source_split_9274:
    assume {:verifier.code 0} true;
    $i17 := $i20;
    goto $bb6;

  SeqInstr_28:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i15 == 1;
    goto corral_source_split_9263;

  corral_source_split_9263:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1368, 1));
    goto corral_source_split_9264;

  corral_source_split_9264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2161} _dev_info.ref.ref($p16, .str.27);
    goto corral_source_split_9265;

  corral_source_split_9265:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 19);
    goto $bb6;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_9257;

  corral_source_split_9257:
    assume {:verifier.code 0} true;
    $M.32 := $store.i32($M.32, $p1, 0);
    goto corral_source_split_9258;

  corral_source_split_9258:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb19_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_9288;
}



const xenbus_switch_state: ref;

axiom xenbus_switch_state == $sub.ref(0, 313300);

procedure xenbus_switch_state($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation xenbus_switch_state($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2178} {:cexpr "xenbus_switch_state:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_9323;

  corral_source_split_9323:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2179} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2180} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_9324;

  corral_source_split_9324:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const netdev_notify_peers: ref;

axiom netdev_notify_peers == $sub.ref(0, 314332);

procedure netdev_notify_peers($p0: ref);
  free requires assertsPassed;



implementation netdev_notify_peers($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9326;

  corral_source_split_9326:
    assume {:verifier.code 0} true;
    return;
}



const xenbus_frontend_closed: ref;

axiom xenbus_frontend_closed == $sub.ref(0, 315364);

procedure xenbus_frontend_closed($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation xenbus_frontend_closed($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9328;

  corral_source_split_9328:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2181} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 2182} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_9329;

  corral_source_split_9329:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const _dev_info: ref;

axiom _dev_info == $sub.ref(0, 316396);

procedure _dev_info.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation _dev_info.ref.ref($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9331;

  corral_source_split_9331:
    assume {:verifier.code 0} true;
    return;
}



const talk_to_netback: ref;

axiom talk_to_netback == $sub.ref(0, 317428);

procedure talk_to_netback($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.33, $M.0, $M.34, $M.12, $M.36, $M.37, $M.39, $M.14, $M.41, $M.43, $M.42, $CurrAddr, $M.44, $M.16, $M.18, $M.20, $M.22, $M.15, $M.17, $M.19, $M.21, assertsPassed;



implementation talk_to_netback($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $i44: i1;
  var $i45: i32;
  var $i46: i1;
  var $i48: i1;
  var $p50: ref;
  var $p51: ref;
  var $i52: i64;
  var $p53: ref;
  var $i54: i32;
  var $i55: i32;
  var $i56: i1;
  var $i57: i32;
  var $i58: i32;
  var $i59: i1;
  var $p60: ref;
  var $p61: ref;
  var $i63: i32;
  var $i64: i1;
  var $i49: i32;
  var $i65: i32;
  var $i66: i1;
  var $i68: i32;
  var $i69: i1;
  var $i70: i32;
  var $i67: i32;
  var $i71: i1;
  var $p72: ref;
  var $p73: ref;
  var $i74: i32;
  var $i75: i1;
  var $i76: i32;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $i81: i32;
  var $i82: i32;
  var $i83: i1;
  var $i84: i32;
  var $i85: i1;
  var $p87: ref;
  var $p88: ref;
  var $i89: i64;
  var $p90: ref;
  var $i91: i32;
  var $i92: i1;
  var $i93: i32;
  var $i94: i32;
  var $i95: i1;
  var $i86: i32;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $i99: i32;
  var $i100: i32;
  var $i101: i1;
  var $i102: i32;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $i108: i32;
  var $i109: i32;
  var $i110: i1;
  var $i111: i32;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $i115: i32;
  var $i116: i32;
  var $i117: i1;
  var $i118: i32;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $i122: i32;
  var $i123: i32;
  var $i124: i1;
  var $i125: i32;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $i129: i32;
  var $i130: i32;
  var $i131: i1;
  var $i132: i32;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $i136: i32;
  var $i137: i32;
  var $i138: i1;
  var $i139: i32;
  var $p140: ref;
  var $i141: i32;
  var $i142: i32;
  var $i143: i1;
  var $i144: i1;
  var $i145: i32;
  var $i103: i32;
  var $p104: ref;
  var $i77: i32;
  var $p147: ref;
  var $i148: i32;
  var $i47: i32;
  var $p150: ref;
  var $p151: ref;
  var $p152: ref;
  var $p153: ref;
  var $i40: i32;
  var $i146: i32;
  var vslice_dummy_var_24: i32;
  var vslice_dummy_var_25: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2183} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2184} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2185} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2186} $p5 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2187} $p6 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_9333;

  corral_source_split_9333:
    assume {:verifier.code 0} true;
    $M.33 := $store.i32($M.33, $p4, 0);
    goto corral_source_split_9334;

  corral_source_split_9334:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_9335;

  corral_source_split_9335:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_9336;

  corral_source_split_9336:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 2968)), $mul.ref(64, 1));
    goto corral_source_split_9337;

  corral_source_split_9337:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, 0);
    goto corral_source_split_9338;

  corral_source_split_9338:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_9339;

  corral_source_split_9339:
    assume {:verifier.code 0} true;
    $M.34 := $store.i32($M.34, $p10, 0);
    goto corral_source_split_9340;

  corral_source_split_9340:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_9341;

  corral_source_split_9341:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_9342;

  corral_source_split_9342:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 1672)), $mul.ref(16, 1));
    goto corral_source_split_9343;

  corral_source_split_9343:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_9344;

  corral_source_split_9344:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_9345;

  corral_source_split_9345:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.34, $p15);
    goto corral_source_split_9346;

  corral_source_split_9346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2188} $i17 := xenbus_scanf.i32.ref.ref.ref.ref($i16, $p14, .str.28, .str.26, $p4);
    call {:si_unique_call 2189} {:cexpr "err"} boogie_si_record_i32($i17);
    goto corral_source_split_9347;

  corral_source_split_9347:
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i17, 0);
    goto corral_source_split_9348;

  corral_source_split_9348:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.33, $p4);
    call {:si_unique_call 2190} {:cexpr "_min1"} boogie_si_record_i32($i19);
    goto corral_source_split_9353;

  corral_source_split_9353:
    assume {:verifier.code 0} true;
    $i20 := $M.35;
    call {:si_unique_call 2191} {:cexpr "_min2"} boogie_si_record_i32($i20);
    goto corral_source_split_9354;

  corral_source_split_9354:
    assume {:verifier.code 0} true;
    $i21 := $ult.i32($i19, $i20);
    goto corral_source_split_9355;

  corral_source_split_9355:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i21 == 1);
    goto corral_source_split_9359;

  corral_source_split_9359:
    assume {:verifier.code 0} true;
    $i22 := $i20;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_9361;

  corral_source_split_9361:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p6, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_9362;

  corral_source_split_9362:
    assume {:verifier.code 0} true;
    $M.36 := $store.i32($M.36, $p23, 0);
    goto corral_source_split_9363;

  corral_source_split_9363:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_9364;

  corral_source_split_9364:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_9365;

  corral_source_split_9365:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 1672)), $mul.ref(16, 1));
    goto corral_source_split_9366;

  corral_source_split_9366:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_9367;

  corral_source_split_9367:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p6, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_9368;

  corral_source_split_9368:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.36, $p28);
    goto corral_source_split_9369;

  corral_source_split_9369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2192} $i30 := xenbus_scanf.i32.ref.ref.ref.ref($i29, $p27, .str.29, .str.26, $p3);
    call {:si_unique_call 2193} {:cexpr "err"} boogie_si_record_i32($i30);
    goto corral_source_split_9370;

  corral_source_split_9370:
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i30, 0);
    goto corral_source_split_9371;

  corral_source_split_9371:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_9376;

  corral_source_split_9376:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_9377;

  corral_source_split_9377:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 2968)), $mul.ref(880, 1));
    goto corral_source_split_9378;

  corral_source_split_9378:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_9379;

  corral_source_split_9379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2194} $i36 := xen_net_read_mac($p0, $p35);
    call {:si_unique_call 2195} {:cexpr "err"} boogie_si_record_i32($i36);
    goto corral_source_split_9380;

  corral_source_split_9380:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_9381;

  corral_source_split_9381:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_9390;

  corral_source_split_9390:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_9391;

  corral_source_split_9391:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p42);
    goto corral_source_split_9392;

  corral_source_split_9392:
    assume {:verifier.code 0} true;
    $i44 := $ne.i64($i43, 0);
    goto corral_source_split_9393;

  corral_source_split_9393:
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2198} $i45 := xennet_create_queues($p1, $i22);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    call {:si_unique_call 2199} {:cexpr "err"} boogie_si_record_i32($i45);
    goto corral_source_split_9398;

  corral_source_split_9398:
    assume {:verifier.code 0} true;
    $i46 := $slt.i32($i45, 0);
    goto corral_source_split_9399;

  corral_source_split_9399:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i48 := $ult.i32(0, $i22);
    goto corral_source_split_9412;

  corral_source_split_9412:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i48 == 1);
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2208} $i65 := xenbus_transaction_start($p2);
    call {:si_unique_call 2209} {:cexpr "err"} boogie_si_record_i32($i65);
    goto corral_source_split_9443;

  corral_source_split_9443:
    assume {:verifier.code 0} true;
    $i66 := $ne.i32($i65, 0);
    goto corral_source_split_9444;

  corral_source_split_9444:
    assume {:verifier.code 0} true;
    $i67 := $i65;
    assume true;
    goto $bb34, $bb36;

  $bb36:
    assume !($i66 == 1);
    goto corral_source_split_9449;

  corral_source_split_9449:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    call $i68, $i69, $i70, $i71, $p72, $p73, $i74, $i75, $i76, $p78, $p79, $p80, $i81, $i82, $i83, $i84, $i85, $p87, $p88, $i89, $p90, $i91, $i92, $i93, $i94, $i95, $i86, $p96, $p97, $p98, $i99, $i100, $i101, $i102, $p105, $p106, $p107, $i108, $i109, $i110, $i111, $p112, $p113, $p114, $i115, $i116, $i117, $i118, $p119, $p120, $p121, $i122, $i123, $i124, $i125, $p126, $p127, $p128, $i129, $i130, $i131, $i132, $p133, $p134, $p135, $i136, $i137, $i138, $i139, $p140, $i141, $i142, $i143, $i144, $i145 := talk_to_netback_loop_$bb37($p0, $p1, $p2, $i22, $i68, $i69, $i70, $i71, $p72, $p73, $i74, $i75, $i76, $p78, $p79, $p80, $i81, $i82, $i83, $i84, $i85, $p87, $p88, $i89, $p90, $i91, $i92, $i93, $i94, $i95, $i86, $p96, $p97, $p98, $i99, $i100, $i101, $i102, $p105, $p106, $p107, $i108, $i109, $i110, $i111, $p112, $p113, $p114, $i115, $i116, $i117, $i118, $p119, $p120, $p121, $i122, $i123, $i124, $i125, $p126, $p127, $p128, $i129, $i130, $i131, $i132, $p133, $p134, $p135, $i136, $i137, $i138, $i139, $p140, $i141, $i142, $i143, $i144, $i145);
    goto $bb37_last;

  $bb41:
    assume {:verifier.code 0} true;
    $i71 := $eq.i32($i22, 1);
    goto corral_source_split_9457;

  corral_source_split_9457:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i71 == 1);
    goto corral_source_split_9465;

  corral_source_split_9465:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p0, $mul.ref(0, 1672)), $mul.ref(8, 1));
    goto corral_source_split_9466;

  corral_source_split_9466:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.0, $p78);
    goto corral_source_split_9467;

  corral_source_split_9467:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_9468;

  corral_source_split_9468:
    assume {:verifier.code 0} true;
    $i81 := $load.i32($M.38, $p80);
    goto corral_source_split_9469;

  corral_source_split_9469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2215} $i82 := xenbus_printf.i32.ref.ref.ref.i32($i81, $p79, .str.32, .str.26, $i22);
    call {:si_unique_call 2216} {:cexpr "err"} boogie_si_record_i32($i82);
    goto corral_source_split_9470;

  corral_source_split_9470:
    assume {:verifier.code 0} true;
    $i83 := $ne.i32($i82, 0);
    goto corral_source_split_9471;

  corral_source_split_9471:
    assume {:verifier.code 0} true;
    $i84 := $i82;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $i85 := $ult.i32(0, $i22);
    goto corral_source_split_9489;

  corral_source_split_9489:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    assume !($i85 == 1);
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p0, $mul.ref(0, 1672)), $mul.ref(8, 1));
    goto corral_source_split_9480;

  corral_source_split_9480:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.0, $p96);
    goto corral_source_split_9481;

  corral_source_split_9481:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_9482;

  corral_source_split_9482:
    assume {:verifier.code 0} true;
    $i99 := $load.i32($M.38, $p98);
    goto corral_source_split_9483;

  corral_source_split_9483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2218} $i100 := xenbus_printf.i32.ref.ref.ref.i32($i99, $p97, .str.34, .str.26, 1);
    call {:si_unique_call 2219} {:cexpr "err"} boogie_si_record_i32($i100);
    goto corral_source_split_9484;

  corral_source_split_9484:
    assume {:verifier.code 0} true;
    $i101 := $ne.i32($i100, 0);
    goto corral_source_split_9485;

  corral_source_split_9485:
    assume {:verifier.code 0} true;
    $i102 := $i100;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p0, $mul.ref(0, 1672)), $mul.ref(8, 1));
    goto corral_source_split_9514;

  corral_source_split_9514:
    assume {:verifier.code 0} true;
    $p106 := $load.ref($M.0, $p105);
    goto corral_source_split_9515;

  corral_source_split_9515:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_9516;

  corral_source_split_9516:
    assume {:verifier.code 0} true;
    $i108 := $load.i32($M.38, $p107);
    goto corral_source_split_9517;

  corral_source_split_9517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2224} $i109 := xenbus_printf.i32.ref.ref.ref.i32($i108, $p106, .str.36, .str.12, 1);
    call {:si_unique_call 2225} {:cexpr "err"} boogie_si_record_i32($i109);
    goto corral_source_split_9518;

  corral_source_split_9518:
    assume {:verifier.code 0} true;
    $i110 := $ne.i32($i109, 0);
    goto corral_source_split_9519;

  corral_source_split_9519:
    assume {:verifier.code 0} true;
    $i111 := $i109;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p0, $mul.ref(0, 1672)), $mul.ref(8, 1));
    goto corral_source_split_9523;

  corral_source_split_9523:
    assume {:verifier.code 0} true;
    $p113 := $load.ref($M.0, $p112);
    goto corral_source_split_9524;

  corral_source_split_9524:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_9525;

  corral_source_split_9525:
    assume {:verifier.code 0} true;
    $i115 := $load.i32($M.38, $p114);
    goto corral_source_split_9526;

  corral_source_split_9526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2226} $i116 := xenbus_printf.i32.ref.ref.ref.i32($i115, $p113, .str.11, .str.12, 1);
    call {:si_unique_call 2227} {:cexpr "err"} boogie_si_record_i32($i116);
    goto corral_source_split_9527;

  corral_source_split_9527:
    assume {:verifier.code 0} true;
    $i117 := $ne.i32($i116, 0);
    goto corral_source_split_9528;

  corral_source_split_9528:
    assume {:verifier.code 0} true;
    $i118 := $i116;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p0, $mul.ref(0, 1672)), $mul.ref(8, 1));
    goto corral_source_split_9532;

  corral_source_split_9532:
    assume {:verifier.code 0} true;
    $p120 := $load.ref($M.0, $p119);
    goto corral_source_split_9533;

  corral_source_split_9533:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_9534;

  corral_source_split_9534:
    assume {:verifier.code 0} true;
    $i122 := $load.i32($M.38, $p121);
    goto corral_source_split_9535;

  corral_source_split_9535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2228} $i123 := xenbus_printf.i32.ref.ref.ref.i32($i122, $p120, .str.14, .str.12, 1);
    call {:si_unique_call 2229} {:cexpr "err"} boogie_si_record_i32($i123);
    goto corral_source_split_9536;

  corral_source_split_9536:
    assume {:verifier.code 0} true;
    $i124 := $ne.i32($i123, 0);
    goto corral_source_split_9537;

  corral_source_split_9537:
    assume {:verifier.code 0} true;
    $i125 := $i123;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i124 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p0, $mul.ref(0, 1672)), $mul.ref(8, 1));
    goto corral_source_split_9541;

  corral_source_split_9541:
    assume {:verifier.code 0} true;
    $p127 := $load.ref($M.0, $p126);
    goto corral_source_split_9542;

  corral_source_split_9542:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_9543;

  corral_source_split_9543:
    assume {:verifier.code 0} true;
    $i129 := $load.i32($M.38, $p128);
    goto corral_source_split_9544;

  corral_source_split_9544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2230} $i130 := xenbus_write($i129, $p127, .str.15, .str.40);
    call {:si_unique_call 2231} {:cexpr "err"} boogie_si_record_i32($i130);
    goto corral_source_split_9545;

  corral_source_split_9545:
    assume {:verifier.code 0} true;
    $i131 := $ne.i32($i130, 0);
    goto corral_source_split_9546;

  corral_source_split_9546:
    assume {:verifier.code 0} true;
    $i132 := $i130;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p0, $mul.ref(0, 1672)), $mul.ref(8, 1));
    goto corral_source_split_9550;

  corral_source_split_9550:
    assume {:verifier.code 0} true;
    $p134 := $load.ref($M.0, $p133);
    goto corral_source_split_9551;

  corral_source_split_9551:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_9552;

  corral_source_split_9552:
    assume {:verifier.code 0} true;
    $i136 := $load.i32($M.38, $p135);
    goto corral_source_split_9553;

  corral_source_split_9553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2232} $i137 := xenbus_write($i136, $p134, .str.13, .str.40);
    call {:si_unique_call 2233} {:cexpr "err"} boogie_si_record_i32($i137);
    goto corral_source_split_9554;

  corral_source_split_9554:
    assume {:verifier.code 0} true;
    $i138 := $ne.i32($i137, 0);
    goto corral_source_split_9555;

  corral_source_split_9555:
    assume {:verifier.code 0} true;
    $i139 := $i137;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_9559;

  corral_source_split_9559:
    assume {:verifier.code 0} true;
    $i141 := $load.i32($M.38, $p140);
    goto corral_source_split_9560;

  corral_source_split_9560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2234} $i142 := xenbus_transaction_end($i141, 0);
    call {:si_unique_call 2235} {:cexpr "err"} boogie_si_record_i32($i142);
    goto corral_source_split_9561;

  corral_source_split_9561:
    assume {:verifier.code 0} true;
    $i143 := $ne.i32($i142, 0);
    goto corral_source_split_9562;

  corral_source_split_9562:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i143 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $i146 := 0;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    goto corral_source_split_9569;

  corral_source_split_9569:
    assume {:verifier.code 0} true;
    $r := $i146;
    return;

  $bb82:
    assume $i143 == 1;
    goto corral_source_split_9564;

  corral_source_split_9564:
    assume {:verifier.code 0} true;
    $i144 := $eq.i32($i142, $sub.i32(0, 11));
    goto corral_source_split_9565;

  corral_source_split_9565:
    assume {:verifier.code 0} true;
    $i145 := $i142;
    assume true;
    goto $bb38, $bb84;

  $bb84:
    assume !($i144 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2236} xenbus_dev_fatal.ref.i32.ref($p0, $i145, .str.43);
    goto corral_source_split_9567;

  corral_source_split_9567:
    assume {:verifier.code 0} true;
    $i47 := $i145;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_9403;

  corral_source_split_9403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2200} xennet_disconnect_backend($p1);
    goto corral_source_split_9404;

  corral_source_split_9404:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_9405;

  corral_source_split_9405:
    assume {:verifier.code 0} true;
    $p151 := $load.ref($M.0, $p150);
    goto corral_source_split_9406;

  corral_source_split_9406:
    assume {:verifier.code 0} true;
    $p152 := $bitcast.ref.ref($p151);
    goto corral_source_split_9407;

  corral_source_split_9407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2201} kfree($p152);
    goto corral_source_split_9408;

  corral_source_split_9408:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_9409;

  corral_source_split_9409:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p153, $0.ref);
    goto corral_source_split_9410;

  corral_source_split_9410:
    assume {:verifier.code 0} true;
    $i40 := $i47;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_9388;

  corral_source_split_9388:
    assume {:verifier.code 0} true;
    $i146 := $i40;
    goto $bb87;

  $bb38:
    assume $i144 == 1;
    goto corral_source_split_9451;

  corral_source_split_9451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2211} $i68 := xenbus_transaction_start($p2);
    call {:si_unique_call 2212} {:cexpr "err"} boogie_si_record_i32($i68);
    goto corral_source_split_9452;

  corral_source_split_9452:
    assume {:verifier.code 0} true;
    $i69 := $ne.i32($i68, 0);
    goto corral_source_split_9453;

  corral_source_split_9453:
    assume {:verifier.code 0} true;
    $i70 := $i68;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume !($i69 == 1);
    goto $bb40_dummy;

  $bb39:
    assume $i69 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_9455;

  corral_source_split_9455:
    assume {:verifier.code 0} true;
    $i67 := $i70;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_9446;

  corral_source_split_9446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2210} xenbus_dev_fatal.ref.i32.ref($p0, $i67, .str.31);
    goto corral_source_split_9447;

  corral_source_split_9447:
    assume {:verifier.code 0} true;
    $i47 := $i67;
    goto $bb19;

  $bb79:
    assume $i138 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_9557;

  corral_source_split_9557:
    assume {:verifier.code 0} true;
    $i103, $p104 := $i139, .str.42;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9511;

  corral_source_split_9511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2223} xenbus_dev_fatal.ref.i32.ref.ref($p0, $i103, .str.44, $p104);
    goto corral_source_split_9512;

  corral_source_split_9512:
    assume {:verifier.code 0} true;
    $i77 := $i103;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto corral_source_split_9475;

  corral_source_split_9475:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_9476;

  corral_source_split_9476:
    assume {:verifier.code 0} true;
    $i148 := $load.i32($M.38, $p147);
    goto corral_source_split_9477;

  corral_source_split_9477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2217} vslice_dummy_var_25 := xenbus_transaction_end($i148, 1);
    goto corral_source_split_9478;

  corral_source_split_9478:
    assume {:verifier.code 0} true;
    $i47 := $i77;
    goto $bb19;

  $bb76:
    assume $i131 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_9548;

  corral_source_split_9548:
    assume {:verifier.code 0} true;
    $i103, $p104 := $i132, .str.41;
    goto $bb65;

  $bb73:
    assume $i124 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_9539;

  corral_source_split_9539:
    assume {:verifier.code 0} true;
    $i103, $p104 := $i125, .str.39;
    goto $bb65;

  $bb70:
    assume $i117 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_9530;

  corral_source_split_9530:
    assume {:verifier.code 0} true;
    $i103, $p104 := $i118, .str.38;
    goto $bb65;

  $bb67:
    assume $i110 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_9521;

  corral_source_split_9521:
    assume {:verifier.code 0} true;
    $i103, $p104 := $i111, .str.37;
    goto $bb65;

  $bb63:
    assume $i101 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_9509;

  corral_source_split_9509:
    assume {:verifier.code 0} true;
    $i103, $p104 := $i102, .str.35;
    goto $bb65;

  $bb52:
    assume $i85 == 1;
    goto corral_source_split_9491;

  corral_source_split_9491:
    assume {:verifier.code 0} true;
    $i86 := 0;
    goto $bb55;

  $bb55:
    call $p87, $p88, $i89, $p90, $i91, $i92, $i93, $i94, $i95, $i86 := talk_to_netback_loop_$bb55($p1, $p2, $i22, $p87, $p88, $i89, $p90, $i91, $i92, $i93, $i94, $i95, $i86);
    goto $bb55_last;

  corral_source_split_9493:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_9495;

  corral_source_split_9495:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.0, $p87);
    goto corral_source_split_9496;

  corral_source_split_9496:
    assume {:verifier.code 0} true;
    $i89 := $zext.i32.i64($i86);
    goto corral_source_split_9497;

  corral_source_split_9497:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($p88, $mul.ref($i89, 8944));
    goto corral_source_split_9498;

  corral_source_split_9498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2220} $i91 := write_queue_xenstore_keys($p90, $p2, 1);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    call {:si_unique_call 2221} {:cexpr "err"} boogie_si_record_i32($i91);
    goto corral_source_split_9499;

  corral_source_split_9499:
    assume {:verifier.code 0} true;
    $i92 := $ne.i32($i91, 0);
    goto corral_source_split_9500;

  corral_source_split_9500:
    assume {:verifier.code 0} true;
    $i93 := $i91;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $i94 := $add.i32($i86, 1);
    call {:si_unique_call 2222} {:cexpr "i"} boogie_si_record_i32($i94);
    goto corral_source_split_9504;

  corral_source_split_9504:
    assume {:verifier.code 0} true;
    $i95 := $ult.i32($i94, $i22);
    goto corral_source_split_9505;

  corral_source_split_9505:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i95 == 1);
    goto corral_source_split_9507;

  corral_source_split_9507:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb60:
    assume $i95 == 1;
    assume {:verifier.code 0} true;
    $i86 := $i94;
    goto $bb60_dummy;

  $bb57:
    assume $i92 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_9502;

  corral_source_split_9502:
    assume {:verifier.code 0} true;
    $i77 := $i93;
    goto $bb46;

  SeqInstr_40:
    assume !assertsPassed;
    return;

  $bb49:
    assume $i83 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_9487;

  corral_source_split_9487:
    assume {:verifier.code 0} true;
    $i77 := $i84;
    goto $bb46;

  $bb42:
    assume $i71 == 1;
    goto corral_source_split_9459;

  corral_source_split_9459:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_9460;

  corral_source_split_9460:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.0, $p72);
    goto corral_source_split_9461;

  corral_source_split_9461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2213} $i74 := write_queue_xenstore_keys($p73, $p2, 0);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    call {:si_unique_call 2214} {:cexpr "err"} boogie_si_record_i32($i74);
    goto corral_source_split_9462;

  corral_source_split_9462:
    assume {:verifier.code 0} true;
    $i75 := $ne.i32($i74, 0);
    goto corral_source_split_9463;

  corral_source_split_9463:
    assume {:verifier.code 0} true;
    $i76 := $i74;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb44:
    assume $i75 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_9473;

  corral_source_split_9473:
    assume {:verifier.code 0} true;
    $i77 := $i76;
    goto $bb46;

  SeqInstr_37:
    assume !assertsPassed;
    return;

  $bb34:
    assume {:verifier.code 0} true;
    assume $i66 == 1;
    goto $bb35;

  $bb21:
    assume $i48 == 1;
    goto corral_source_split_9414;

  corral_source_split_9414:
    assume {:verifier.code 0} true;
    $i49 := 0;
    goto $bb24;

  $bb24:
    call $p50, $p51, $i52, $p53, $i54, $i55, $i56, $i57, $i58, $i63, $i64, $i49 := talk_to_netback_loop_$bb24($p0, $p1, $p3, $i22, $p50, $p51, $i52, $p53, $i54, $i55, $i56, $i57, $i58, $i63, $i64, $i49);
    goto $bb24_last;

  corral_source_split_9416:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_9418;

  corral_source_split_9418:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_9419;

  corral_source_split_9419:
    assume {:verifier.code 0} true;
    $i52 := $zext.i32.i64($i49);
    goto corral_source_split_9420;

  corral_source_split_9420:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($p51, $mul.ref($i52, 8944));
    goto corral_source_split_9421;

  corral_source_split_9421:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.37, $p3);
    goto corral_source_split_9422;

  corral_source_split_9422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2202} $i55 := setup_netfront($p0, $p53, $i54);
    call {:si_unique_call 2203} {:cexpr "err"} boogie_si_record_i32($i55);
    goto corral_source_split_9423;

  corral_source_split_9423:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_9424;

  corral_source_split_9424:
    assume {:verifier.code 0} true;
    $i57, $i58 := $i49, $i55;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i63 := $add.i32($i49, 1);
    call {:si_unique_call 2207} {:cexpr "i"} boogie_si_record_i32($i63);
    goto corral_source_split_9438;

  corral_source_split_9438:
    assume {:verifier.code 0} true;
    $i64 := $ult.i32($i63, $i22);
    goto corral_source_split_9439;

  corral_source_split_9439:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i64 == 1);
    goto corral_source_split_9441;

  corral_source_split_9441:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb31:
    assume $i64 == 1;
    assume {:verifier.code 0} true;
    $i49 := $i63;
    goto $bb31_dummy;

  $bb26:
    assume $i56 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9426;

  corral_source_split_9426:
    assume {:verifier.code 0} true;
    $i59 := $ne.i32($i57, 0);
    goto corral_source_split_9427;

  corral_source_split_9427:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i59 == 1);
    goto corral_source_split_9436;

  corral_source_split_9436:
    assume {:verifier.code 0} true;
    $i40 := $i58;
    goto $bb12;

  $bb28:
    assume $i59 == 1;
    goto corral_source_split_9429;

  corral_source_split_9429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2204} rtnl_lock();
    goto corral_source_split_9430;

  corral_source_split_9430:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_9431;

  corral_source_split_9431:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_9432;

  corral_source_split_9432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2205} vslice_dummy_var_24 := netif_set_real_num_tx_queues($p61, $i57);
    goto corral_source_split_9433;

  corral_source_split_9433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2206} rtnl_unlock();
    goto corral_source_split_9434;

  corral_source_split_9434:
    assume {:verifier.code 0} true;
    $i47 := $i58;
    goto $bb19;

  $bb17:
    assume $i46 == 1;
    goto corral_source_split_9401;

  corral_source_split_9401:
    assume {:verifier.code 0} true;
    $i47 := $i45;
    goto $bb19;

  SeqInstr_34:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i44 == 1;
    goto corral_source_split_9395;

  corral_source_split_9395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2197} xennet_destroy_queues($p1);
    goto corral_source_split_9396;

  corral_source_split_9396:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb10:
    assume $i37 == 1;
    goto corral_source_split_9383;

  corral_source_split_9383:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 1672)), $mul.ref(8, 1));
    goto corral_source_split_9384;

  corral_source_split_9384:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_9385;

  corral_source_split_9385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2196} xenbus_dev_fatal.ref.i32.ref.ref($p0, $i36, .str.30, $p39);
    goto corral_source_split_9386;

  corral_source_split_9386:
    assume {:verifier.code 0} true;
    $i40 := $i36;
    goto $bb12;

  $bb7:
    assume $i31 == 1;
    goto corral_source_split_9373;

  corral_source_split_9373:
    assume {:verifier.code 0} true;
    $M.37 := $store.i32($M.37, $p3, 0);
    goto corral_source_split_9374;

  corral_source_split_9374:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i21 == 1;
    goto corral_source_split_9357;

  corral_source_split_9357:
    assume {:verifier.code 0} true;
    $i22 := $i19;
    goto $bb6;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_9350;

  corral_source_split_9350:
    assume {:verifier.code 0} true;
    $M.33 := $store.i32($M.33, $p4, 1);
    goto corral_source_split_9351;

  corral_source_split_9351:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb60_dummy:
    assume false;
    return;

  $bb55_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_9493;

  $bb40_dummy:
    assume false;
    return;

  $bb37_last:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb31_dummy:
    assume false;
    return;

  $bb24_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_9416;
}



const netdev_update_features: ref;

axiom netdev_update_features == $sub.ref(0, 318460);

procedure netdev_update_features($p0: ref);
  free requires assertsPassed;



implementation netdev_update_features($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9571;

  corral_source_split_9571:
    assume {:verifier.code 0} true;
    return;
}



const netif_carrier_on: ref;

axiom netif_carrier_on == $sub.ref(0, 319492);

procedure netif_carrier_on($p0: ref);
  free requires assertsPassed;



implementation netif_carrier_on($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9573;

  corral_source_split_9573:
    assume {:verifier.code 0} true;
    return;
}



const spin_lock_irq: ref;

axiom spin_lock_irq == $sub.ref(0, 320524);

procedure spin_lock_irq($p0: ref);
  free requires assertsPassed;
  modifies $M.14;



implementation spin_lock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9575;

  corral_source_split_9575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2237} ldv_spin_lock();
    goto corral_source_split_9576;

  corral_source_split_9576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2238} ldv_spin_lock_irq_8($p0);
    goto corral_source_split_9577;

  corral_source_split_9577:
    assume {:verifier.code 0} true;
    return;
}



const spin_unlock_irq: ref;

axiom spin_unlock_irq == $sub.ref(0, 321556);

procedure spin_unlock_irq($p0: ref);
  free requires assertsPassed;
  modifies $M.14;



implementation spin_unlock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9579;

  corral_source_split_9579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2239} ldv_spin_unlock();
    goto corral_source_split_9580;

  corral_source_split_9580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2240} ldv_spin_unlock_irq_11($p0);
    goto corral_source_split_9581;

  corral_source_split_9581:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock_irq_11: ref;

axiom ldv_spin_unlock_irq_11 == $sub.ref(0, 322588);

procedure ldv_spin_unlock_irq_11($p0: ref);
  free requires assertsPassed;



implementation ldv_spin_unlock_irq_11($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9583;

  corral_source_split_9583:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_9584;

  corral_source_split_9584:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_9585;

  corral_source_split_9585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2241} _raw_spin_unlock_irq($p2);
    goto corral_source_split_9586;

  corral_source_split_9586:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irq: ref;

axiom _raw_spin_unlock_irq == $sub.ref(0, 323620);

procedure _raw_spin_unlock_irq($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9588;

  corral_source_split_9588:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_lock_irq_8: ref;

axiom ldv_spin_lock_irq_8 == $sub.ref(0, 324652);

procedure ldv_spin_lock_irq_8($p0: ref);
  free requires assertsPassed;



implementation ldv_spin_lock_irq_8($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9590;

  corral_source_split_9590:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_9591;

  corral_source_split_9591:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_9592;

  corral_source_split_9592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2242} _raw_spin_lock_irq($p2);
    goto corral_source_split_9593;

  corral_source_split_9593:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock_irq: ref;

axiom _raw_spin_lock_irq == $sub.ref(0, 325684);

procedure _raw_spin_lock_irq($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9595;

  corral_source_split_9595:
    assume {:verifier.code 0} true;
    return;
}



const xen_net_read_mac: ref;

axiom xen_net_read_mac == $sub.ref(0, 326716);

procedure xen_net_read_mac($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.39, $M.0, $M.44, $CurrAddr;



implementation xen_net_read_mac($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i1;
  var $i11: i8;
  var $i12: i1;
  var $i13: i64;
  var $i14: i32;
  var $i16: i64;
  var $i17: i8;
  var $i18: i64;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $i15: i32;
  var $i28: i64;
  var $i29: i8;
  var $p30: ref;
  var $i31: i64;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i8;
  var $p43: ref;
  var $i44: i64;
  var $p45: ref;
  var $i46: i64;
  var $i47: i1;
  var $p48: ref;
  var $i49: i8;
  var $i50: i32;
  var $i51: i1;
  var $p52: ref;
  var $p53: ref;
  var $i54: i64;
  var $i55: i8;
  var $p56: ref;
  var $i57: i64;
  var $p58: ref;
  var $i59: i64;
  var $i60: i1;
  var $p61: ref;
  var $i62: i8;
  var $i63: i32;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $i67: i64;
  var $i68: i8;
  var $p69: ref;
  var $i70: i64;
  var $p71: ref;
  var $i72: i64;
  var $i73: i1;
  var $p74: ref;
  var $i75: i8;
  var $i76: i32;
  var $i77: i1;
  var $p78: ref;
  var $p79: ref;
  var $i80: i64;
  var $i81: i8;
  var $p82: ref;
  var $i83: i64;
  var $p84: ref;
  var $i85: i64;
  var $i86: i1;
  var $p87: ref;
  var $i88: i8;
  var $i89: i32;
  var $i90: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2243} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2244} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_9597;

  corral_source_split_9597:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_9598;

  corral_source_split_9598:
    assume {:verifier.code 0} true;
    $M.39 := $store.i32($M.39, $p4, 0);
    goto corral_source_split_9599;

  corral_source_split_9599:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1672)), $mul.ref(8, 1));
    goto corral_source_split_9600;

  corral_source_split_9600:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_9601;

  corral_source_split_9601:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_9602;

  corral_source_split_9602:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.39, $p7);
    goto corral_source_split_9603;

  corral_source_split_9603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2245} $p9 := xenbus_read($i8, $p6, .str.45, $0.ref);
    goto corral_source_split_9604;

  corral_source_split_9604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2246} $i10 := IS_ERR($p9);
    goto corral_source_split_9605;

  corral_source_split_9605:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i8($i10);
    call {:si_unique_call 2247} {:cexpr "tmp___1"} boogie_si_record_i8($i11);
    goto corral_source_split_9606;

  corral_source_split_9606:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i8.i1($i11);
    goto corral_source_split_9607;

  corral_source_split_9607:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2250} $i16 := simple_strtoul($p9, $p2, 16);
    call {:si_unique_call 2251} {:cexpr "tmp___2"} boogie_si_record_i64($i16);
    goto corral_source_split_9615;

  corral_source_split_9615:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i64.i8($i16);
    goto corral_source_split_9616;

  corral_source_split_9616:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1, $i17);
    goto corral_source_split_9617;

  corral_source_split_9617:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p9);
    goto corral_source_split_9618;

  corral_source_split_9618:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.23, $p2);
    goto corral_source_split_9619;

  corral_source_split_9619:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_9620;

  corral_source_split_9620:
    assume {:verifier.code 0} true;
    $i21 := $eq.i64($i18, $i20);
    goto corral_source_split_9621;

  corral_source_split_9621:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb7, $bb9;

  $bb9:
    assume !($i21 == 1);
    goto corral_source_split_9625;

  corral_source_split_9625:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.23, $p2);
    goto corral_source_split_9626;

  corral_source_split_9626:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.0, $p22);
    goto corral_source_split_9627;

  corral_source_split_9627:
    assume {:verifier.code 0} true;
    $i24 := $sext.i8.i32($i23);
    goto corral_source_split_9628;

  corral_source_split_9628:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 58);
    goto corral_source_split_9629;

  corral_source_split_9629:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.23, $p2);
    goto corral_source_split_9631;

  corral_source_split_9631:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p26, $mul.ref(1, 1));
    goto corral_source_split_9632;

  corral_source_split_9632:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2253} $i28 := simple_strtoul($p27, $p2, 16);
    goto corral_source_split_9634;

  corral_source_split_9634:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i64.i8($i28);
    goto corral_source_split_9635;

  corral_source_split_9635:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($p1, $mul.ref(1, 1));
    goto corral_source_split_9636;

  corral_source_split_9636:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p30, $i29);
    goto corral_source_split_9637;

  corral_source_split_9637:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p27);
    goto corral_source_split_9638;

  corral_source_split_9638:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.23, $p2);
    goto corral_source_split_9639;

  corral_source_split_9639:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p32);
    goto corral_source_split_9640;

  corral_source_split_9640:
    assume {:verifier.code 0} true;
    $i34 := $eq.i64($i31, $i33);
    goto corral_source_split_9641;

  corral_source_split_9641:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i34 == 1);
    goto corral_source_split_9645;

  corral_source_split_9645:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.23, $p2);
    goto corral_source_split_9646;

  corral_source_split_9646:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.0, $p35);
    goto corral_source_split_9647;

  corral_source_split_9647:
    assume {:verifier.code 0} true;
    $i37 := $sext.i8.i32($i36);
    goto corral_source_split_9648;

  corral_source_split_9648:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 58);
    goto corral_source_split_9649;

  corral_source_split_9649:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.23, $p2);
    goto corral_source_split_9651;

  corral_source_split_9651:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($p39, $mul.ref(1, 1));
    goto corral_source_split_9652;

  corral_source_split_9652:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2255} $i41 := simple_strtoul($p40, $p2, 16);
    goto corral_source_split_9654;

  corral_source_split_9654:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i64.i8($i41);
    goto corral_source_split_9655;

  corral_source_split_9655:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($p1, $mul.ref(2, 1));
    goto corral_source_split_9656;

  corral_source_split_9656:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p43, $i42);
    goto corral_source_split_9657;

  corral_source_split_9657:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p40);
    goto corral_source_split_9658;

  corral_source_split_9658:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.23, $p2);
    goto corral_source_split_9659;

  corral_source_split_9659:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p45);
    goto corral_source_split_9660;

  corral_source_split_9660:
    assume {:verifier.code 0} true;
    $i47 := $eq.i64($i44, $i46);
    goto corral_source_split_9661;

  corral_source_split_9661:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i47 == 1);
    goto corral_source_split_9663;

  corral_source_split_9663:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.23, $p2);
    goto corral_source_split_9664;

  corral_source_split_9664:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.0, $p48);
    goto corral_source_split_9665;

  corral_source_split_9665:
    assume {:verifier.code 0} true;
    $i50 := $sext.i8.i32($i49);
    goto corral_source_split_9666;

  corral_source_split_9666:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i50, 58);
    goto corral_source_split_9667;

  corral_source_split_9667:
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.23, $p2);
    goto corral_source_split_9669;

  corral_source_split_9669:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($p52, $mul.ref(1, 1));
    goto corral_source_split_9670;

  corral_source_split_9670:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2256} $i54 := simple_strtoul($p53, $p2, 16);
    goto corral_source_split_9672;

  corral_source_split_9672:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i64.i8($i54);
    goto corral_source_split_9673;

  corral_source_split_9673:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($p1, $mul.ref(3, 1));
    goto corral_source_split_9674;

  corral_source_split_9674:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p56, $i55);
    goto corral_source_split_9675;

  corral_source_split_9675:
    assume {:verifier.code 0} true;
    $i57 := $p2i.ref.i64($p53);
    goto corral_source_split_9676;

  corral_source_split_9676:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.23, $p2);
    goto corral_source_split_9677;

  corral_source_split_9677:
    assume {:verifier.code 0} true;
    $i59 := $p2i.ref.i64($p58);
    goto corral_source_split_9678;

  corral_source_split_9678:
    assume {:verifier.code 0} true;
    $i60 := $eq.i64($i57, $i59);
    goto corral_source_split_9679;

  corral_source_split_9679:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i60 == 1);
    goto corral_source_split_9681;

  corral_source_split_9681:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.23, $p2);
    goto corral_source_split_9682;

  corral_source_split_9682:
    assume {:verifier.code 0} true;
    $i62 := $load.i8($M.0, $p61);
    goto corral_source_split_9683;

  corral_source_split_9683:
    assume {:verifier.code 0} true;
    $i63 := $sext.i8.i32($i62);
    goto corral_source_split_9684;

  corral_source_split_9684:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i63, 58);
    goto corral_source_split_9685;

  corral_source_split_9685:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.23, $p2);
    goto corral_source_split_9687;

  corral_source_split_9687:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($p65, $mul.ref(1, 1));
    goto corral_source_split_9688;

  corral_source_split_9688:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2257} $i67 := simple_strtoul($p66, $p2, 16);
    goto corral_source_split_9690;

  corral_source_split_9690:
    assume {:verifier.code 0} true;
    $i68 := $trunc.i64.i8($i67);
    goto corral_source_split_9691;

  corral_source_split_9691:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($p1, $mul.ref(4, 1));
    goto corral_source_split_9692;

  corral_source_split_9692:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p69, $i68);
    goto corral_source_split_9693;

  corral_source_split_9693:
    assume {:verifier.code 0} true;
    $i70 := $p2i.ref.i64($p66);
    goto corral_source_split_9694;

  corral_source_split_9694:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.23, $p2);
    goto corral_source_split_9695;

  corral_source_split_9695:
    assume {:verifier.code 0} true;
    $i72 := $p2i.ref.i64($p71);
    goto corral_source_split_9696;

  corral_source_split_9696:
    assume {:verifier.code 0} true;
    $i73 := $eq.i64($i70, $i72);
    goto corral_source_split_9697;

  corral_source_split_9697:
    assume {:verifier.code 0} true;
    assume {:branchcond $i73} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i73 == 1);
    goto corral_source_split_9699;

  corral_source_split_9699:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.23, $p2);
    goto corral_source_split_9700;

  corral_source_split_9700:
    assume {:verifier.code 0} true;
    $i75 := $load.i8($M.0, $p74);
    goto corral_source_split_9701;

  corral_source_split_9701:
    assume {:verifier.code 0} true;
    $i76 := $sext.i8.i32($i75);
    goto corral_source_split_9702;

  corral_source_split_9702:
    assume {:verifier.code 0} true;
    $i77 := $ne.i32($i76, 58);
    goto corral_source_split_9703;

  corral_source_split_9703:
    assume {:verifier.code 0} true;
    assume {:branchcond $i77} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.23, $p2);
    goto corral_source_split_9705;

  corral_source_split_9705:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($p78, $mul.ref(1, 1));
    goto corral_source_split_9706;

  corral_source_split_9706:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2258} $i80 := simple_strtoul($p79, $p2, 16);
    goto corral_source_split_9708;

  corral_source_split_9708:
    assume {:verifier.code 0} true;
    $i81 := $trunc.i64.i8($i80);
    goto corral_source_split_9709;

  corral_source_split_9709:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($p1, $mul.ref(5, 1));
    goto corral_source_split_9710;

  corral_source_split_9710:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p82, $i81);
    goto corral_source_split_9711;

  corral_source_split_9711:
    assume {:verifier.code 0} true;
    $i83 := $p2i.ref.i64($p79);
    goto corral_source_split_9712;

  corral_source_split_9712:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.23, $p2);
    goto corral_source_split_9713;

  corral_source_split_9713:
    assume {:verifier.code 0} true;
    $i85 := $p2i.ref.i64($p84);
    goto corral_source_split_9714;

  corral_source_split_9714:
    assume {:verifier.code 0} true;
    $i86 := $eq.i64($i83, $i85);
    goto corral_source_split_9715;

  corral_source_split_9715:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i86 == 1);
    goto corral_source_split_9717;

  corral_source_split_9717:
    assume {:verifier.code 0} true;
    $p87 := $load.ref($M.23, $p2);
    goto corral_source_split_9718;

  corral_source_split_9718:
    assume {:verifier.code 0} true;
    $i88 := $load.i8($M.0, $p87);
    goto corral_source_split_9719;

  corral_source_split_9719:
    assume {:verifier.code 0} true;
    $i89 := $sext.i8.i32($i88);
    goto corral_source_split_9720;

  corral_source_split_9720:
    assume {:verifier.code 0} true;
    $i90 := $ne.i32($i89, 0);
    goto corral_source_split_9721;

  corral_source_split_9721:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2254} kfree($p9);
    goto corral_source_split_9643;

  corral_source_split_9643:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9613;

  corral_source_split_9613:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb41:
    assume {:verifier.code 0} true;
    assume $i90 == 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2252} kfree($p9);
    goto corral_source_split_9623;

  corral_source_split_9623:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 2);
    goto $bb3;

  $bb39:
    assume {:verifier.code 0} true;
    assume $i86 == 1;
    goto $bb8;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i77 == 1;
    goto $bb8;

  $bb33:
    assume {:verifier.code 0} true;
    assume $i73 == 1;
    goto $bb8;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i64 == 1;
    goto $bb8;

  $bb27:
    assume {:verifier.code 0} true;
    assume $i60 == 1;
    goto $bb8;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i51 == 1;
    goto $bb8;

  $bb21:
    assume {:verifier.code 0} true;
    assume $i47 == 1;
    goto $bb8;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i38 == 1;
    goto $bb8;

  $bb15:
    assume {:verifier.code 0} true;
    assume $i34 == 1;
    goto $bb8;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb8;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb8;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_9609;

  corral_source_split_9609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2248} $i13 := PTR_ERR($p9);
    call {:si_unique_call 2249} {:cexpr "tmp___0"} boogie_si_record_i64($i13);
    goto corral_source_split_9610;

  corral_source_split_9610:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i64.i32($i13);
    goto corral_source_split_9611;

  corral_source_split_9611:
    assume {:verifier.code 0} true;
    $i15 := $i14;
    goto $bb3;
}



const xenbus_dev_fatal: ref;

axiom xenbus_dev_fatal == $sub.ref(0, 327748);

procedure xenbus_dev_fatal.ref.i32.ref($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;



implementation xenbus_dev_fatal.ref.i32.ref($p0: ref, $i1: i32, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2259} {:cexpr "xenbus_dev_fatal:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_9723;

  corral_source_split_9723:
    assume {:verifier.code 0} true;
    return;
}



procedure xenbus_dev_fatal.ref.i32.ref.ref($p0: ref, $i1: i32, $p2: ref, p.3: ref);
  free requires assertsPassed;



implementation xenbus_dev_fatal.ref.i32.ref.ref($p0: ref, $i1: i32, $p2: ref, p.3: ref)
{

  $bb1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2260} {:cexpr "xenbus_dev_fatal:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_9725;

  corral_source_split_9725:
    assume {:verifier.code 0} true;
    return;
}



const xennet_create_queues: ref;

axiom xennet_create_queues == $sub.ref(0, 328780);

procedure xennet_create_queues($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.15, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, assertsPassed, $CurrAddr;



implementation xennet_create_queues($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i64;
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i1;
  var $i34: i8;
  var $i35: i1;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $i12: i32;
  var $i25: i32;
  var $p39: ref;
  var $p40: ref;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i10: i32;
  var vslice_dummy_var_26: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2261} {:cexpr "xennet_create_queues:arg:num_queues"} boogie_si_record_i32($i1);
    goto corral_source_split_9727;

  corral_source_split_9727:
    assume {:verifier.code 0} true;
    $i2 := $zext.i32.i64($i1);
    goto corral_source_split_9728;

  corral_source_split_9728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2262} $p3 := kcalloc($i2, 8960, 208);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    goto corral_source_split_9729;

  corral_source_split_9729:
    assume {:verifier.code 0} true;
    goto corral_source_split_9730;

  corral_source_split_9730:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_9731;

  corral_source_split_9731:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, $p3);
    goto corral_source_split_9732;

  corral_source_split_9732:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_9733;

  corral_source_split_9733:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_9734;

  corral_source_split_9734:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_9735;

  corral_source_split_9735:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_9736;

  corral_source_split_9736:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2263} rtnl_lock();
    goto corral_source_split_9742;

  corral_source_split_9742:
    assume {:verifier.code 0} true;
    $i11 := $ult.i32(0, $i1);
    goto corral_source_split_9743;

  corral_source_split_9743:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i25 := $i1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_9766;

  corral_source_split_9766:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_9767;

  corral_source_split_9767:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_9768;

  corral_source_split_9768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2267} vslice_dummy_var_26 := netif_set_real_num_tx_queues($p40, $i25);
    goto corral_source_split_9769;

  corral_source_split_9769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2268} rtnl_unlock();
    goto corral_source_split_9770;

  corral_source_split_9770:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i25, 0);
    goto corral_source_split_9771;

  corral_source_split_9771:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9740;

  corral_source_split_9740:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb20:
    assume $i42 == 1;
    goto corral_source_split_9794;

  corral_source_split_9794:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_9795;

  corral_source_split_9795:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_9796;

  corral_source_split_9796:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 2968)), $mul.ref(1368, 1));
    goto corral_source_split_9797;

  corral_source_split_9797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2274} dev_err.ref.ref($p45, .str.47);
    goto corral_source_split_9798;

  corral_source_split_9798:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 22);
    goto $bb3;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_9745;

  corral_source_split_9745:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb8;

  $bb8:
    call $p13, $p14, $i15, $p16, $p17, $p18, $i19, $i20, $i21, $p26, $p27, $p28, $p29, $p30, $p31, $p32, $i33, $i34, $i35, $p36, $i37, $i38, $i12 := xennet_create_queues_loop_$bb8($p0, $i1, $p13, $p14, $i15, $p16, $p17, $p18, $i19, $i20, $i21, $p26, $p27, $p28, $p29, $p30, $p31, $p32, $i33, $i34, $i35, $p36, $i37, $i38, $i12);
    goto $bb8_last;

  corral_source_split_9747:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_9749;

  corral_source_split_9749:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_9750;

  corral_source_split_9750:
    assume {:verifier.code 0} true;
    $i15 := $zext.i32.i64($i12);
    goto corral_source_split_9751;

  corral_source_split_9751:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p14, $mul.ref($i15, 8944));
    goto corral_source_split_9752;

  corral_source_split_9752:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p14, $mul.ref($i15, 8944)), $mul.ref(0, 1));
    goto corral_source_split_9753;

  corral_source_split_9753:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, $i12);
    goto corral_source_split_9754;

  corral_source_split_9754:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p14, $mul.ref($i15, 8944)), $mul.ref(32, 1));
    goto corral_source_split_9755;

  corral_source_split_9755:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p18, $p0);
    goto corral_source_split_9756;

  corral_source_split_9756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2264} $i19 := xennet_init_queue($p16);
    call {:si_unique_call 2265} {:cexpr "ret"} boogie_si_record_i32($i19);
    goto corral_source_split_9757;

  corral_source_split_9757:
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i19, 0);
    goto corral_source_split_9758;

  corral_source_split_9758:
    assume {:verifier.code 0} true;
    $i21 := $i12;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p14, $mul.ref($i15, 8944)), $mul.ref(32, 1));
    goto corral_source_split_9773;

  corral_source_split_9773:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_9774;

  corral_source_split_9774:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_9775;

  corral_source_split_9775:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_9776;

  corral_source_split_9776:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p14, $mul.ref($i15, 8944)), $mul.ref(40, 1));
    goto corral_source_split_9777;

  corral_source_split_9777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2269} netif_napi_add($p29, $p30, xennet_poll, 64);
    goto corral_source_split_9778;

  corral_source_split_9778:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_9779;

  corral_source_split_9779:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_9780;

  corral_source_split_9780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2270} $i33 := netif_running($p32);
    goto corral_source_split_9781;

  corral_source_split_9781:
    assume {:verifier.code 0} true;
    $i34 := $zext.i1.i8($i33);
    call {:si_unique_call 2271} {:cexpr "tmp___0"} boogie_si_record_i8($i34);
    goto corral_source_split_9782;

  corral_source_split_9782:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i8.i1($i34);
    goto corral_source_split_9783;

  corral_source_split_9783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i37 := $add.i32($i12, 1);
    call {:si_unique_call 2273} {:cexpr "i"} boogie_si_record_i32($i37);
    goto corral_source_split_9789;

  corral_source_split_9789:
    assume {:verifier.code 0} true;
    $i38 := $ult.i32($i37, $i1);
    goto corral_source_split_9790;

  corral_source_split_9790:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i38 == 1);
    goto corral_source_split_9792;

  corral_source_split_9792:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb17:
    assume $i38 == 1;
    assume {:verifier.code 0} true;
    $i12 := $i37;
    goto $bb17_dummy;

  $bb14:
    assume $i35 == 1;
    goto corral_source_split_9785;

  corral_source_split_9785:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p14, $mul.ref($i15, 8944)), $mul.ref(40, 1));
    goto corral_source_split_9786;

  corral_source_split_9786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2272} napi_enable($p36);
    goto corral_source_split_9787;

  corral_source_split_9787:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb10:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_9760;

  corral_source_split_9760:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_9761;

  corral_source_split_9761:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_9762;

  corral_source_split_9762:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 2968)), $mul.ref(1368, 1));
    goto corral_source_split_9763;

  corral_source_split_9763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2266} dev_warn.ref.ref.i32($p24, .str.46, $i21);
    goto corral_source_split_9764;

  corral_source_split_9764:
    assume {:verifier.code 0} true;
    $i25 := $i21;
    goto $bb12;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_9738;

  corral_source_split_9738:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_43:
    assume !assertsPassed;
    return;

  $bb17_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_9747;
}



const setup_netfront: ref;

axiom setup_netfront == $sub.ref(0, 329812);

procedure setup_netfront($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation setup_netfront($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p22: ref;
  var $p24: ref;
  var $p26: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $i33: i32;
  var $p34: ref;
  var $i35: i64;
  var $p36: ref;
  var $i37: i64;
  var $i38: i1;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p47: ref;
  var $p49: ref;
  var $p51: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $i56: i1;
  var $i58: i32;
  var $p59: ref;
  var $i60: i1;
  var $i61: i32;
  var $i62: i32;
  var $i63: i1;
  var $i64: i1;
  var $i65: i1;
  var $i66: i32;
  var $i67: i32;
  var $i68: i1;
  var $p70: ref;
  var $i71: i32;
  var $i57: i32;
  var $i73: i64;
  var $i39: i32;
  var $p74: ref;
  var $i75: i32;
  var $i32: i32;
  var $i77: i64;
  var $i14: i32;
  var $i69: i32;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;
  var cmdloc_dummy_var_6: [ref]i8;
  var vslice_dummy_var_27: i32;
  var vslice_dummy_var_28: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2275} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 2276} {:cexpr "setup_netfront:arg:feature_split_evtchn"} boogie_si_record_i32($i2);
    goto corral_source_split_9800;

  corral_source_split_9800:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 8944)), $mul.ref(488, 1));
    goto corral_source_split_9801;

  corral_source_split_9801:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, 0);
    goto corral_source_split_9802;

  corral_source_split_9802:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 8944)), $mul.ref(5728, 1));
    goto corral_source_split_9803;

  corral_source_split_9803:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, 0);
    goto corral_source_split_9804;

  corral_source_split_9804:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8944)), $mul.ref(5704, 1)), $mul.ref(16, 1));
    goto corral_source_split_9805;

  corral_source_split_9805:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $0.ref);
    goto corral_source_split_9806;

  corral_source_split_9806:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8944)), $mul.ref(464, 1)), $mul.ref(16, 1));
    goto corral_source_split_9807;

  corral_source_split_9807:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, $0.ref);
    goto corral_source_split_9808;

  corral_source_split_9808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2277} $i10 := get_zeroed_page(48);
    call {:si_unique_call 2278} {:cexpr "tmp"} boogie_si_record_i64($i10);
    goto corral_source_split_9809;

  corral_source_split_9809:
    assume {:verifier.code 0} true;
    $p11 := $i2p.i64.ref($i10);
    goto corral_source_split_9810;

  corral_source_split_9810:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_9811;

  corral_source_split_9811:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_9812;

  corral_source_split_9812:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p11, $mul.ref(0, 76)), $mul.ref(8, 1));
    goto corral_source_split_9819;

  corral_source_split_9819:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, 0);
    goto corral_source_split_9820;

  corral_source_split_9820:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p11, $mul.ref(0, 76)), $mul.ref(0, 1));
    goto corral_source_split_9821;

  corral_source_split_9821:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, 0);
    goto corral_source_split_9822;

  corral_source_split_9822:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p11, $mul.ref(0, 76)), $mul.ref(12, 1));
    goto corral_source_split_9823;

  corral_source_split_9823:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, 1);
    goto corral_source_split_9824;

  corral_source_split_9824:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p11, $mul.ref(0, 76)), $mul.ref(4, 1));
    goto corral_source_split_9825;

  corral_source_split_9825:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, 1);
    goto corral_source_split_9826;

  corral_source_split_9826:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p11, $mul.ref(0, 76)), $mul.ref(16, 1));
    goto corral_source_split_9827;

  corral_source_split_9827:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_9828;

  corral_source_split_9828:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.0;
    call {:si_unique_call 2280} cmdloc_dummy_var_4 := $memset.i8(cmdloc_dummy_var_3, $p20, 0, 48, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_4;
    goto corral_source_split_9829;

  corral_source_split_9829:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8944)), $mul.ref(464, 1)), $mul.ref(0, 1));
    goto corral_source_split_9830;

  corral_source_split_9830:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, 0);
    goto corral_source_split_9831;

  corral_source_split_9831:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8944)), $mul.ref(464, 1)), $mul.ref(4, 1));
    goto corral_source_split_9832;

  corral_source_split_9832:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, 0);
    goto corral_source_split_9833;

  corral_source_split_9833:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8944)), $mul.ref(464, 1)), $mul.ref(8, 1));
    goto corral_source_split_9834;

  corral_source_split_9834:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, 256);
    goto corral_source_split_9835;

  corral_source_split_9835:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8944)), $mul.ref(464, 1)), $mul.ref(16, 1));
    goto corral_source_split_9836;

  corral_source_split_9836:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p28, $p11);
    goto corral_source_split_9837;

  corral_source_split_9837:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p11);
    goto corral_source_split_9838;

  corral_source_split_9838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2281} $i30 := xenbus_grant_ring($p0, $p29, 1, $p3);
    call {:si_unique_call 2282} {:cexpr "err"} boogie_si_record_i32($i30);
    goto corral_source_split_9839;

  corral_source_split_9839:
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i30, 0);
    goto corral_source_split_9840;

  corral_source_split_9840:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.40, $p3);
    goto corral_source_split_9848;

  corral_source_split_9848:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 8944)), $mul.ref(488, 1));
    goto corral_source_split_9849;

  corral_source_split_9849:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, $i33);
    goto corral_source_split_9850;

  corral_source_split_9850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2284} $i35 := get_zeroed_page(48);
    call {:si_unique_call 2285} {:cexpr "tmp___2"} boogie_si_record_i64($i35);
    goto corral_source_split_9851;

  corral_source_split_9851:
    assume {:verifier.code 0} true;
    $p36 := $i2p.i64.ref($i35);
    goto corral_source_split_9852;

  corral_source_split_9852:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p36);
    goto corral_source_split_9853;

  corral_source_split_9853:
    assume {:verifier.code 0} true;
    $i38 := $eq.i64($i37, 0);
    goto corral_source_split_9854;

  corral_source_split_9854:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p36, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_9864;

  corral_source_split_9864:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p40, 0);
    goto corral_source_split_9865;

  corral_source_split_9865:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p36, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_9866;

  corral_source_split_9866:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p41, 0);
    goto corral_source_split_9867;

  corral_source_split_9867:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p36, $mul.ref(0, 72)), $mul.ref(12, 1));
    goto corral_source_split_9868;

  corral_source_split_9868:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p42, 1);
    goto corral_source_split_9869;

  corral_source_split_9869:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p36, $mul.ref(0, 72)), $mul.ref(4, 1));
    goto corral_source_split_9870;

  corral_source_split_9870:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p43, 1);
    goto corral_source_split_9871;

  corral_source_split_9871:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p36, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_9872;

  corral_source_split_9872:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_9873;

  corral_source_split_9873:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_5 := $M.0;
    call {:si_unique_call 2288} cmdloc_dummy_var_6 := $memset.i8(cmdloc_dummy_var_5, $p45, 0, 48, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_6;
    goto corral_source_split_9874;

  corral_source_split_9874:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8944)), $mul.ref(5704, 1)), $mul.ref(0, 1));
    goto corral_source_split_9875;

  corral_source_split_9875:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p47, 0);
    goto corral_source_split_9876;

  corral_source_split_9876:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8944)), $mul.ref(5704, 1)), $mul.ref(4, 1));
    goto corral_source_split_9877;

  corral_source_split_9877:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p49, 0);
    goto corral_source_split_9878;

  corral_source_split_9878:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8944)), $mul.ref(5704, 1)), $mul.ref(8, 1));
    goto corral_source_split_9879;

  corral_source_split_9879:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p51, 256);
    goto corral_source_split_9880;

  corral_source_split_9880:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8944)), $mul.ref(5704, 1)), $mul.ref(16, 1));
    goto corral_source_split_9881;

  corral_source_split_9881:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p53, $p36);
    goto corral_source_split_9882;

  corral_source_split_9882:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p36);
    goto corral_source_split_9883;

  corral_source_split_9883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2289} $i55 := xenbus_grant_ring($p0, $p54, 1, $p3);
    call {:si_unique_call 2290} {:cexpr "err"} boogie_si_record_i32($i55);
    goto corral_source_split_9884;

  corral_source_split_9884:
    assume {:verifier.code 0} true;
    $i56 := $slt.i32($i55, 0);
    goto corral_source_split_9885;

  corral_source_split_9885:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.40, $p3);
    goto corral_source_split_9893;

  corral_source_split_9893:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p1, $mul.ref(0, 8944)), $mul.ref(5728, 1));
    goto corral_source_split_9894;

  corral_source_split_9894:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p59, $i58);
    goto corral_source_split_9895;

  corral_source_split_9895:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i2, 0);
    goto corral_source_split_9896;

  corral_source_split_9896:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    $i62 := $i55;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_9901;

  corral_source_split_9901:
    assume {:verifier.code 0} true;
    $i63 := $eq.i32($i2, 0);
    goto corral_source_split_9902;

  corral_source_split_9902:
    assume {:verifier.code 0} true;
    assume {:branchcond $i63} true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i63 == 1);
    goto corral_source_split_9906;

  corral_source_split_9906:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i2, 0);
    goto corral_source_split_9907;

  corral_source_split_9907:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i64 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i67 := $i62;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_9912;

  corral_source_split_9912:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i67, 0);
    goto corral_source_split_9913;

  corral_source_split_9913:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i69 := 0;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_9921;

  corral_source_split_9921:
    assume {:verifier.code 0} true;
    $r := $i69;
    return;

  $bb29:
    assume $i68 == 1;
    goto corral_source_split_9915;

  corral_source_split_9915:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p1, $mul.ref(0, 8944)), $mul.ref(5728, 1));
    goto corral_source_split_9917;

  corral_source_split_9917:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.0, $p70);
    goto corral_source_split_9918;

  corral_source_split_9918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2296} vslice_dummy_var_28 := gnttab_end_foreign_access_ref($i71, 0);
    goto corral_source_split_9919;

  corral_source_split_9919:
    assume {:verifier.code 0} true;
    $i57 := $i67;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_9889;

  corral_source_split_9889:
    assume {:verifier.code 0} true;
    $i73 := $p2i.ref.i64($p36);
    goto corral_source_split_9890;

  corral_source_split_9890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2291} free_pages($i73, 0);
    goto corral_source_split_9891;

  corral_source_split_9891:
    assume {:verifier.code 0} true;
    $i39 := $i57;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_9859;

  corral_source_split_9859:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p1, $mul.ref(0, 8944)), $mul.ref(488, 1));
    goto corral_source_split_9860;

  corral_source_split_9860:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.0, $p74);
    goto corral_source_split_9861;

  corral_source_split_9861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2287} vslice_dummy_var_27 := gnttab_end_foreign_access_ref($i75, 0);
    goto corral_source_split_9862;

  corral_source_split_9862:
    assume {:verifier.code 0} true;
    $i32 := $i39;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_9844;

  corral_source_split_9844:
    assume {:verifier.code 0} true;
    $i77 := $p2i.ref.i64($p11);
    goto corral_source_split_9845;

  corral_source_split_9845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2283} free_pages($i77, 0);
    goto corral_source_split_9846;

  corral_source_split_9846:
    assume {:verifier.code 0} true;
    $i14 := $i32;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9817;

  corral_source_split_9817:
    assume {:verifier.code 0} true;
    $i69 := $i14;
    goto $bb33;

  $bb23:
    assume $i64 == 1;
    goto corral_source_split_9909;

  corral_source_split_9909:
    assume {:verifier.code 0} true;
    $i65 := $ne.i32($i62, 0);
    goto corral_source_split_9910;

  corral_source_split_9910:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i65 == 1);
    goto $bb25;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i65 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2294} $i66 := setup_netfront_single($p1);
    call {:si_unique_call 2295} {:cexpr "err"} boogie_si_record_i32($i66);
    goto corral_source_split_9904;

  corral_source_split_9904:
    assume {:verifier.code 0} true;
    $i67 := $i66;
    goto $bb28;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i63 == 1;
    goto $bb21;

  $bb17:
    assume $i60 == 1;
    goto corral_source_split_9898;

  corral_source_split_9898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2292} $i61 := setup_netfront_split($p1);
    call {:si_unique_call 2293} {:cexpr "err"} boogie_si_record_i32($i61);
    goto corral_source_split_9899;

  corral_source_split_9899:
    assume {:verifier.code 0} true;
    $i62 := $i61;
    goto $bb19;

  $bb13:
    assume $i56 == 1;
    goto corral_source_split_9887;

  corral_source_split_9887:
    assume {:verifier.code 0} true;
    $i57 := $i55;
    goto $bb15;

  $bb9:
    assume $i38 == 1;
    goto corral_source_split_9856;

  corral_source_split_9856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2286} xenbus_dev_fatal.ref.i32.ref($p0, $sub.i32(0, 12), .str.63);
    goto corral_source_split_9857;

  corral_source_split_9857:
    assume {:verifier.code 0} true;
    $i39 := $sub.i32(0, 12);
    goto $bb11;

  $bb5:
    assume $i31 == 1;
    goto corral_source_split_9842;

  corral_source_split_9842:
    assume {:verifier.code 0} true;
    $i32 := $i30;
    goto $bb7;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_9814;

  corral_source_split_9814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2279} xenbus_dev_fatal.ref.i32.ref($p0, $sub.i32(0, 12), .str.62);
    goto corral_source_split_9815;

  corral_source_split_9815:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 12);
    goto $bb3;
}



const netif_set_real_num_tx_queues: ref;

axiom netif_set_real_num_tx_queues == $sub.ref(0, 330844);

procedure netif_set_real_num_tx_queues($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation netif_set_real_num_tx_queues($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2297} {:cexpr "netif_set_real_num_tx_queues:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_9923;

  corral_source_split_9923:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2298} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2299} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_9924;

  corral_source_split_9924:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const xenbus_transaction_start: ref;

axiom xenbus_transaction_start == $sub.ref(0, 331876);

procedure xenbus_transaction_start($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation xenbus_transaction_start($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9926;

  corral_source_split_9926:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2300} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 2301} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_9927;

  corral_source_split_9927:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const write_queue_xenstore_keys: ref;

axiom write_queue_xenstore_keys == $sub.ref(0, 332908);

procedure write_queue_xenstore_keys($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.41, assertsPassed, $CurrAddr;



implementation write_queue_xenstore_keys($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i64;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $p24: ref;
  var $p25: ref;
  var $p23: ref;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $i33: i32;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $i39: i32;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $i44: i32;
  var $p45: ref;
  var $i46: i32;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $i50: i32;
  var $p51: ref;
  var $i52: i32;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $i56: i32;
  var $p57: ref;
  var $i58: i32;
  var $i59: i32;
  var $i60: i1;
  var $i61: i1;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $i63: i1;
  var $i62: i32;
  var vslice_dummy_var_29: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2302} {:cexpr "write_queue_xenstore_keys:arg:write_hierarchical"} boogie_si_record_i32($i2);
    goto corral_source_split_9929;

  corral_source_split_9929:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(32, 1));
    goto corral_source_split_9930;

  corral_source_split_9930:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_9931;

  corral_source_split_9931:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_9932;

  corral_source_split_9932:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_9933;

  corral_source_split_9933:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i2, 0);
    goto corral_source_split_9934;

  corral_source_split_9934:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    goto corral_source_split_9945;

  corral_source_split_9945:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p6, $mul.ref(0, 1672)), $mul.ref(8, 1));
    goto corral_source_split_9946;

  corral_source_split_9946:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    assume {:verifier.code 0} true;
    $p23 := $p25;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_9959;

  corral_source_split_9959:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(488, 1));
    goto corral_source_split_9960;

  corral_source_split_9960:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_9961;

  corral_source_split_9961:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_9962;

  corral_source_split_9962:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.38, $p28);
    goto corral_source_split_9963;

  corral_source_split_9963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2308} $i30 := xenbus_printf.i32.ref.ref.ref.i32($i29, $p23, .str.68, .str.26, $i27);
    call {:si_unique_call 2309} {:cexpr "err"} boogie_si_record_i32($i30);
    goto corral_source_split_9964;

  corral_source_split_9964:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_9965;

  corral_source_split_9965:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5728, 1));
    goto corral_source_split_9969;

  corral_source_split_9969:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_9970;

  corral_source_split_9970:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_9971;

  corral_source_split_9971:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.38, $p34);
    goto corral_source_split_9972;

  corral_source_split_9972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2310} $i36 := xenbus_printf.i32.ref.ref.ref.i32($i35, $p23, .str.70, .str.26, $i33);
    call {:si_unique_call 2311} {:cexpr "err"} boogie_si_record_i32($i36);
    goto corral_source_split_9973;

  corral_source_split_9973:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_9974;

  corral_source_split_9974:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(320, 1));
    goto corral_source_split_9978;

  corral_source_split_9978:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_9979;

  corral_source_split_9979:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(324, 1));
    goto corral_source_split_9980;

  corral_source_split_9980:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_9981;

  corral_source_split_9981:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i39, $i41);
    goto corral_source_split_9982;

  corral_source_split_9982:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i42 == 1);
    goto corral_source_split_9992;

  corral_source_split_9992:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(320, 1));
    goto corral_source_split_9993;

  corral_source_split_9993:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    goto corral_source_split_9994;

  corral_source_split_9994:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_9995;

  corral_source_split_9995:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.38, $p51);
    goto corral_source_split_9996;

  corral_source_split_9996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2314} $i53 := xenbus_printf.i32.ref.ref.ref.i32($i52, $p23, .str.74, .str.26, $i50);
    call {:si_unique_call 2315} {:cexpr "err"} boogie_si_record_i32($i53);
    goto corral_source_split_9997;

  corral_source_split_9997:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i53, 0);
    goto corral_source_split_9998;

  corral_source_split_9998:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(324, 1));
    goto corral_source_split_10006;

  corral_source_split_10006:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.0, $p55);
    goto corral_source_split_10007;

  corral_source_split_10007:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_10008;

  corral_source_split_10008:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.38, $p57);
    goto corral_source_split_10009;

  corral_source_split_10009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2316} $i59 := xenbus_printf.i32.ref.ref.ref.i32($i58, $p23, .str.76, .str.26, $i56);
    call {:si_unique_call 2317} {:cexpr "err"} boogie_si_record_i32($i59);
    goto corral_source_split_10010;

  corral_source_split_10010:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i59, 0);
    goto corral_source_split_10011;

  corral_source_split_10011:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i2, 0);
    goto corral_source_split_10002;

  corral_source_split_10002:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i62 := 0;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_10018;

  corral_source_split_10018:
    assume {:verifier.code 0} true;
    $r := $i62;
    return;

  $bb26:
    assume $i61 == 1;
    goto corral_source_split_10015;

  corral_source_split_10015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2318} kfree($p23);
    goto corral_source_split_10016;

  corral_source_split_10016:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb23:
    assume $i60 == 1;
    goto corral_source_split_10013;

  corral_source_split_10013:
    assume {:verifier.code 0} true;
    $i15, $p16, $p17 := $i59, .str.77, $p23;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9950;

  corral_source_split_9950:
    assume {:verifier.code 0} true;
    $i63 := $ne.i32($i2, 0);
    goto corral_source_split_9951;

  corral_source_split_9951:
    assume {:verifier.code 0} true;
    assume {:branchcond $i63} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2320} xenbus_dev_fatal.ref.i32.ref.ref($p6, $i15, .str.44, $p16);
    goto corral_source_split_10023;

  corral_source_split_10023:
    assume {:verifier.code 0} true;
    $i62 := $i15;
    goto $bb29;

  $bb30:
    assume $i63 == 1;
    goto corral_source_split_10020;

  corral_source_split_10020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2319} kfree($p17);
    goto corral_source_split_10021;

  corral_source_split_10021:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb20:
    assume $i54 == 1;
    goto corral_source_split_10004;

  corral_source_split_10004:
    assume {:verifier.code 0} true;
    $i15, $p16, $p17 := $i53, .str.75, $p23;
    goto $bb5;

  $bb14:
    assume $i42 == 1;
    goto corral_source_split_9984;

  corral_source_split_9984:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(320, 1));
    goto corral_source_split_9985;

  corral_source_split_9985:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_9986;

  corral_source_split_9986:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_9987;

  corral_source_split_9987:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.38, $p45);
    goto corral_source_split_9988;

  corral_source_split_9988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2312} $i47 := xenbus_printf.i32.ref.ref.ref.i32($i46, $p23, .str.72, .str.26, $i44);
    call {:si_unique_call 2313} {:cexpr "err"} boogie_si_record_i32($i47);
    goto corral_source_split_9989;

  corral_source_split_9989:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_9990;

  corral_source_split_9990:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume $i48 == 1;
    goto corral_source_split_10000;

  corral_source_split_10000:
    assume {:verifier.code 0} true;
    $i15, $p16, $p17 := $i47, .str.73, $p23;
    goto $bb5;

  $bb11:
    assume $i37 == 1;
    goto corral_source_split_9976;

  corral_source_split_9976:
    assume {:verifier.code 0} true;
    $i15, $p16, $p17 := $i36, .str.71, $p23;
    goto $bb5;

  $bb8:
    assume $i31 == 1;
    goto corral_source_split_9967;

  corral_source_split_9967:
    assume {:verifier.code 0} true;
    $i15, $p16, $p17 := $i30, .str.69, $p23;
    goto $bb5;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_9936;

  corral_source_split_9936:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p6, $mul.ref(0, 1672)), $mul.ref(8, 1));
    goto corral_source_split_9937;

  corral_source_split_9937:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_9938;

  corral_source_split_9938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2303} $i10 := strlen($p9);
    call {:si_unique_call 2304} {:cexpr "tmp"} boogie_si_record_i64($i10);
    goto corral_source_split_9939;

  corral_source_split_9939:
    assume {:verifier.code 0} true;
    $i11 := $add.i64($i10, 10);
    call {:si_unique_call 2305} {:cexpr "pathsize"} boogie_si_record_i64($i11);
    goto corral_source_split_9940;

  corral_source_split_9940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2306} $p12 := kzalloc($i11, 208);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    goto corral_source_split_9941;

  corral_source_split_9941:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_9942;

  corral_source_split_9942:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_9943;

  corral_source_split_9943:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p6, $mul.ref(0, 1672)), $mul.ref(8, 1));
    goto corral_source_split_9953;

  corral_source_split_9953:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_9954;

  corral_source_split_9954:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(0, 1));
    goto corral_source_split_9955;

  corral_source_split_9955:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_9956;

  corral_source_split_9956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2307} vslice_dummy_var_29 := snprintf.ref.i64.ref.ref.i32($p12, $i11, .str.67, $p19, $i21);
    goto corral_source_split_9957;

  corral_source_split_9957:
    assume {:verifier.code 0} true;
    $p23 := $p12;
    goto $bb7;

  $bb3:
    assume $i14 == 1;
    goto corral_source_split_9948;

  corral_source_split_9948:
    assume {:verifier.code 0} true;
    $i15, $p16, $p17 := $sub.i32(0, 12), .str.66, $p12;
    goto $bb5;

  SeqInstr_46:
    assume !assertsPassed;
    return;
}



const xenbus_printf: ref;

axiom xenbus_printf == $sub.ref(0, 333940);

procedure xenbus_printf.i32.ref.ref.ref.i32($i0: i32, $p1: ref, $p2: ref, $p3: ref, p.4: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.41, $CurrAddr;



implementation xenbus_printf.i32.ref.ref.ref.i32($i0: i32, $p1: ref, $p2: ref, $p3: ref, p.4: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2321} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.41 := $store.i32($M.41, $p5, $i0);
    goto corral_source_split_10025;

  corral_source_split_10025:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2322} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 2323} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    goto corral_source_split_10026;

  corral_source_split_10026:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const xenbus_write: ref;

axiom xenbus_write == $sub.ref(0, 334972);

procedure xenbus_write($i0: i32, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.42, $CurrAddr;



implementation xenbus_write($i0: i32, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2324} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.42 := $store.i32($M.42, $p5, $i0);
    goto corral_source_split_10028;

  corral_source_split_10028:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2325} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 2326} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    goto corral_source_split_10029;

  corral_source_split_10029:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const xenbus_transaction_end: ref;

axiom xenbus_transaction_end == $sub.ref(0, 336004);

procedure xenbus_transaction_end($i0: i32, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.43, $CurrAddr;



implementation xenbus_transaction_end($i0: i32, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2327} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.43 := $store.i32($M.43, $p3, $i0);
    call {:si_unique_call 2328} {:cexpr "xenbus_transaction_end:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_10031;

  corral_source_split_10031:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2329} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 2330} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_10032;

  corral_source_split_10032:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const strlen: ref;

axiom strlen == $sub.ref(0, 337036);

procedure strlen($p0: ref) returns ($r: i64);



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 338068);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2331} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 2332} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_10034;

  corral_source_split_10034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2333} ldv_check_alloc_flags($i1);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    goto corral_source_split_10035;

  corral_source_split_10035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2334} $p2 := ldv_undef_ptr();
    goto corral_source_split_10036;

  corral_source_split_10036:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_49:
    assume !assertsPassed;
    return;
}



const snprintf: ref;

axiom snprintf == $sub.ref(0, 339100);

procedure snprintf.ref.i64.ref.ref.i32($p0: ref, $i1: i64, $p2: ref, p.3: ref, p.4: i32) returns ($r: i32);



procedure snprintf.ref.i64.ref.ref($p0: ref, $i1: i64, $p2: ref, p.3: ref) returns ($r: i32);



const get_zeroed_page: ref;

axiom get_zeroed_page == $sub.ref(0, 340132);

procedure get_zeroed_page($i0: i32) returns ($r: i64);
  free requires assertsPassed;



implementation get_zeroed_page($i0: i32) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2335} {:cexpr "get_zeroed_page:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_10038;

  corral_source_split_10038:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2336} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 2337} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_10039;

  corral_source_split_10039:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 341164);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const xenbus_grant_ring: ref;

axiom xenbus_grant_ring == $sub.ref(0, 342196);

procedure xenbus_grant_ring($p0: ref, $p1: ref, $i2: i32, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation xenbus_grant_ring($p0: ref, $p1: ref, $i2: i32, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2338} {:cexpr "xenbus_grant_ring:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_10041;

  corral_source_split_10041:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2339} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 2340} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_10042;

  corral_source_split_10042:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const setup_netfront_split: ref;

axiom setup_netfront_split == $sub.ref(0, 343228);

procedure setup_netfront_split($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation setup_netfront_split($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p22: ref;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p36: ref;
  var $i37: i32;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $p45: ref;
  var $i46: i32;
  var $p47: ref;
  var $p48: ref;
  var $i29: i32;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $p56: ref;
  var $i16: i32;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i32;
  var $p64: ref;
  var $i8: i32;
  var $i44: i32;
  var vslice_dummy_var_30: i32;
  var vslice_dummy_var_31: i32;
  var vslice_dummy_var_32: i32;
  var vslice_dummy_var_33: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10044;

  corral_source_split_10044:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(32, 1));
    goto corral_source_split_10045;

  corral_source_split_10045:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_10046;

  corral_source_split_10046:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_10047;

  corral_source_split_10047:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_10048;

  corral_source_split_10048:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(320, 1));
    goto corral_source_split_10049;

  corral_source_split_10049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2341} $i6 := xenbus_alloc_evtchn($p4, $p5);
    call {:si_unique_call 2342} {:cexpr "err"} boogie_si_record_i32($i6);
    goto corral_source_split_10050;

  corral_source_split_10050:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i6, 0);
    goto corral_source_split_10051;

  corral_source_split_10051:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(32, 1));
    goto corral_source_split_10057;

  corral_source_split_10057:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_10058;

  corral_source_split_10058:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_10059;

  corral_source_split_10059:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_10060;

  corral_source_split_10060:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(324, 1));
    goto corral_source_split_10061;

  corral_source_split_10061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2343} $i14 := xenbus_alloc_evtchn($p12, $p13);
    call {:si_unique_call 2344} {:cexpr "err"} boogie_si_record_i32($i14);
    goto corral_source_split_10062;

  corral_source_split_10062:
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i14, 0);
    goto corral_source_split_10063;

  corral_source_split_10063:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(336, 1));
    goto corral_source_split_10078;

  corral_source_split_10078:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_10079;

  corral_source_split_10079:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(4, 1));
    goto corral_source_split_10080;

  corral_source_split_10080:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_10081;

  corral_source_split_10081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2346} vslice_dummy_var_31 := snprintf.ref.i64.ref.ref($p18, 25, .str.64, $p20);
    goto corral_source_split_10082;

  corral_source_split_10082:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(320, 1));
    goto corral_source_split_10083;

  corral_source_split_10083:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_10084;

  corral_source_split_10084:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(336, 1));
    goto corral_source_split_10085;

  corral_source_split_10085:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_10086;

  corral_source_split_10086:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p0);
    goto corral_source_split_10087;

  corral_source_split_10087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2347} $i27 := bind_evtchn_to_irqhandler($i23, xennet_tx_interrupt, 0, $p25, $p26);
    call {:si_unique_call 2348} {:cexpr "err"} boogie_si_record_i32($i27);
    goto corral_source_split_10088;

  corral_source_split_10088:
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i27, 0);
    goto corral_source_split_10089;

  corral_source_split_10089:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(328, 1));
    goto corral_source_split_10104;

  corral_source_split_10104:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, $i27);
    goto corral_source_split_10105;

  corral_source_split_10105:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(361, 1));
    goto corral_source_split_10106;

  corral_source_split_10106:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_10107;

  corral_source_split_10107:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(4, 1));
    goto corral_source_split_10108;

  corral_source_split_10108:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_10109;

  corral_source_split_10109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2350} vslice_dummy_var_33 := snprintf.ref.i64.ref.ref($p32, 25, .str.65, $p34);
    goto corral_source_split_10110;

  corral_source_split_10110:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(324, 1));
    goto corral_source_split_10111;

  corral_source_split_10111:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_10112;

  corral_source_split_10112:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(361, 1));
    goto corral_source_split_10113;

  corral_source_split_10113:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_10114;

  corral_source_split_10114:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p0);
    goto corral_source_split_10115;

  corral_source_split_10115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2351} $i41 := bind_evtchn_to_irqhandler($i37, xennet_rx_interrupt, 0, $p39, $p40);
    call {:si_unique_call 2352} {:cexpr "err"} boogie_si_record_i32($i41);
    goto corral_source_split_10116;

  corral_source_split_10116:
    assume {:verifier.code 0} true;
    $i42 := $slt.i32($i41, 0);
    goto corral_source_split_10117;

  corral_source_split_10117:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(332, 1));
    goto corral_source_split_10128;

  corral_source_split_10128:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p43, $i41);
    goto corral_source_split_10129;

  corral_source_split_10129:
    assume {:verifier.code 0} true;
    $i44 := 0;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_10131;

  corral_source_split_10131:
    assume {:verifier.code 0} true;
    $r := $i44;
    return;

  $bb13:
    assume $i42 == 1;
    goto corral_source_split_10119;

  corral_source_split_10119:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(328, 1));
    goto corral_source_split_10121;

  corral_source_split_10121:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_10122;

  corral_source_split_10122:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p0);
    goto corral_source_split_10123;

  corral_source_split_10123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2353} unbind_from_irqhandler($i46, $p47);
    goto corral_source_split_10124;

  corral_source_split_10124:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(328, 1));
    goto corral_source_split_10125;

  corral_source_split_10125:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p48, 0);
    goto corral_source_split_10126;

  corral_source_split_10126:
    assume {:verifier.code 0} true;
    $i29 := $i41;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_10093;

  corral_source_split_10093:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(32, 1));
    goto corral_source_split_10094;

  corral_source_split_10094:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_10095;

  corral_source_split_10095:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_10096;

  corral_source_split_10096:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_10097;

  corral_source_split_10097:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(324, 1));
    goto corral_source_split_10098;

  corral_source_split_10098:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    goto corral_source_split_10099;

  corral_source_split_10099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2349} vslice_dummy_var_32 := xenbus_free_evtchn($p52, $i54);
    goto corral_source_split_10100;

  corral_source_split_10100:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(324, 1));
    goto corral_source_split_10101;

  corral_source_split_10101:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p56, 0);
    goto corral_source_split_10102;

  corral_source_split_10102:
    assume {:verifier.code 0} true;
    $i16 := $i29;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_10067;

  corral_source_split_10067:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(32, 1));
    goto corral_source_split_10068;

  corral_source_split_10068:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_10069;

  corral_source_split_10069:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p58, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_10070;

  corral_source_split_10070:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_10071;

  corral_source_split_10071:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(320, 1));
    goto corral_source_split_10072;

  corral_source_split_10072:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.0, $p61);
    goto corral_source_split_10073;

  corral_source_split_10073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2345} vslice_dummy_var_30 := xenbus_free_evtchn($p60, $i62);
    goto corral_source_split_10074;

  corral_source_split_10074:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(320, 1));
    goto corral_source_split_10075;

  corral_source_split_10075:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p64, 0);
    goto corral_source_split_10076;

  corral_source_split_10076:
    assume {:verifier.code 0} true;
    $i8 := $i16;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10055;

  corral_source_split_10055:
    assume {:verifier.code 0} true;
    $i44 := $i8;
    goto $bb17;

  $bb9:
    assume $i28 == 1;
    goto corral_source_split_10091;

  corral_source_split_10091:
    assume {:verifier.code 0} true;
    $i29 := $i27;
    goto $bb11;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_10065;

  corral_source_split_10065:
    assume {:verifier.code 0} true;
    $i16 := $i14;
    goto $bb7;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_10053;

  corral_source_split_10053:
    assume {:verifier.code 0} true;
    $i8 := $i6;
    goto $bb3;
}



const setup_netfront_single: ref;

axiom setup_netfront_single == $sub.ref(0, 344260);

procedure setup_netfront_single($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation setup_netfront_single($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $p33: ref;
  var $i8: i32;
  var $i25: i32;
  var vslice_dummy_var_34: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10133;

  corral_source_split_10133:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(32, 1));
    goto corral_source_split_10134;

  corral_source_split_10134:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_10135;

  corral_source_split_10135:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_10136;

  corral_source_split_10136:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_10137;

  corral_source_split_10137:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(320, 1));
    goto corral_source_split_10138;

  corral_source_split_10138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2354} $i6 := xenbus_alloc_evtchn($p4, $p5);
    call {:si_unique_call 2355} {:cexpr "err"} boogie_si_record_i32($i6);
    goto corral_source_split_10139;

  corral_source_split_10139:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i6, 0);
    goto corral_source_split_10140;

  corral_source_split_10140:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(320, 1));
    goto corral_source_split_10146;

  corral_source_split_10146:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_10147;

  corral_source_split_10147:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(32, 1));
    goto corral_source_split_10148;

  corral_source_split_10148:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_10149;

  corral_source_split_10149:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_10150;

  corral_source_split_10150:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_10151;

  corral_source_split_10151:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_10152;

  corral_source_split_10152:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_10153;

  corral_source_split_10153:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p0);
    goto corral_source_split_10154;

  corral_source_split_10154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2356} $i18 := bind_evtchn_to_irqhandler($i10, xennet_interrupt, 0, $p16, $p17);
    call {:si_unique_call 2357} {:cexpr "err"} boogie_si_record_i32($i18);
    goto corral_source_split_10155;

  corral_source_split_10155:
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i18, 0);
    goto corral_source_split_10156;

  corral_source_split_10156:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(320, 1));
    goto corral_source_split_10170;

  corral_source_split_10170:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_10171;

  corral_source_split_10171:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(324, 1));
    goto corral_source_split_10172;

  corral_source_split_10172:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, $i21);
    goto corral_source_split_10173;

  corral_source_split_10173:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(328, 1));
    goto corral_source_split_10174;

  corral_source_split_10174:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, $i18);
    goto corral_source_split_10175;

  corral_source_split_10175:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(332, 1));
    goto corral_source_split_10176;

  corral_source_split_10176:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, $i18);
    goto corral_source_split_10177;

  corral_source_split_10177:
    assume {:verifier.code 0} true;
    $i25 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_10179;

  corral_source_split_10179:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;

  $bb5:
    assume $i19 == 1;
    goto corral_source_split_10158;

  corral_source_split_10158:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(32, 1));
    goto corral_source_split_10160;

  corral_source_split_10160:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_10161;

  corral_source_split_10161:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_10162;

  corral_source_split_10162:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_10163;

  corral_source_split_10163:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(320, 1));
    goto corral_source_split_10164;

  corral_source_split_10164:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_10165;

  corral_source_split_10165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2358} vslice_dummy_var_34 := xenbus_free_evtchn($p29, $i31);
    goto corral_source_split_10166;

  corral_source_split_10166:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(320, 1));
    goto corral_source_split_10167;

  corral_source_split_10167:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, 0);
    goto corral_source_split_10168;

  corral_source_split_10168:
    assume {:verifier.code 0} true;
    $i8 := $i18;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10144;

  corral_source_split_10144:
    assume {:verifier.code 0} true;
    $i25 := $i8;
    goto $bb9;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_10142;

  corral_source_split_10142:
    assume {:verifier.code 0} true;
    $i8 := $i6;
    goto $bb3;
}



const free_pages: ref;

axiom free_pages == $sub.ref(0, 345292);

procedure free_pages($i0: i64, $i1: i32);
  free requires assertsPassed;



implementation free_pages($i0: i64, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2359} {:cexpr "free_pages:arg:arg0"} boogie_si_record_i64($i0);
    call {:si_unique_call 2360} {:cexpr "free_pages:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_10181;

  corral_source_split_10181:
    assume {:verifier.code 0} true;
    return;
}



const xenbus_alloc_evtchn: ref;

axiom xenbus_alloc_evtchn == $sub.ref(0, 346324);

procedure xenbus_alloc_evtchn($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation xenbus_alloc_evtchn($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10183;

  corral_source_split_10183:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2361} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2362} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_10184;

  corral_source_split_10184:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const bind_evtchn_to_irqhandler: ref;

axiom bind_evtchn_to_irqhandler == $sub.ref(0, 347356);

procedure bind_evtchn_to_irqhandler($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation bind_evtchn_to_irqhandler($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2363} {:cexpr "bind_evtchn_to_irqhandler:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 2364} {:cexpr "bind_evtchn_to_irqhandler:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_10186;

  corral_source_split_10186:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2365} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 2366} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    goto corral_source_split_10187;

  corral_source_split_10187:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const xenbus_free_evtchn: ref;

axiom xenbus_free_evtchn == $sub.ref(0, 348388);

procedure xenbus_free_evtchn($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation xenbus_free_evtchn($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2367} {:cexpr "xenbus_free_evtchn:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_10189;

  corral_source_split_10189:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2368} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2369} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_10190;

  corral_source_split_10190:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const kcalloc: ref;

axiom kcalloc == $sub.ref(0, 349420);

procedure kcalloc($i0: i64, $i1: i64, $i2: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation kcalloc($i0: i64, $i1: i64, $i2: i32) returns ($r: ref)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2370} {:cexpr "kcalloc:arg:n"} boogie_si_record_i64($i0);
    call {:si_unique_call 2371} {:cexpr "kcalloc:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 2372} {:cexpr "kcalloc:arg:flags"} boogie_si_record_i32($i2);
    goto corral_source_split_10192;

  corral_source_split_10192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2373} ldv_check_alloc_flags($i2);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    goto corral_source_split_10193;

  corral_source_split_10193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2374} $p3 := ldv_undef_ptr();
    goto corral_source_split_10194;

  corral_source_split_10194:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  SeqInstr_52:
    assume !assertsPassed;
    return;
}



const xennet_init_queue: ref;

axiom xennet_init_queue == $sub.ref(0, 350452);

procedure xennet_init_queue($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.15, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $CurrAddr;



implementation xennet_init_queue($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $p27: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $p32: ref;
  var $i33: i32;
  var $i34: i32;
  var $i35: i16;
  var $i36: i32;
  var $i37: i64;
  var $p39: ref;
  var $i40: i32;
  var $i41: i64;
  var $p43: ref;
  var $i44: i32;
  var $i45: i32;
  var $i46: i16;
  var $i47: i32;
  var $i48: i1;
  var $i28: i16;
  var $i50: i32;
  var $i51: i64;
  var $p53: ref;
  var $i54: i32;
  var $i55: i64;
  var $p57: ref;
  var $i58: i32;
  var $i59: i32;
  var $i60: i16;
  var $i61: i32;
  var $i62: i1;
  var $i49: i16;
  var $p63: ref;
  var $i64: i32;
  var $i65: i1;
  var $p67: ref;
  var $i68: i32;
  var $i69: i1;
  var $p72: ref;
  var $i73: i32;
  var $i71: i32;
  var vslice_dummy_var_35: ref;
  var vslice_dummy_var_36: ref;
  var vslice_dummy_var_37: i32;
  var vslice_dummy_var_38: i32;
  var vslice_dummy_var_39: i32;
  var vslice_dummy_var_40: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2375} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2376} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_10196;

  corral_source_split_10196:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(392, 1));
    goto corral_source_split_10197;

  corral_source_split_10197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2377} vslice_dummy_var_35 := spinlock_check($p3);
    goto corral_source_split_10198;

  corral_source_split_10198:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(392, 1)), $mul.ref(0, 1));
    goto corral_source_split_10199;

  corral_source_split_10199:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_10200;

  corral_source_split_10200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2378} __raw_spin_lock_init($p7, .str.48, $p1);
    goto corral_source_split_10201;

  corral_source_split_10201:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5632, 1));
    goto corral_source_split_10202;

  corral_source_split_10202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2379} vslice_dummy_var_36 := spinlock_check($p8);
    goto corral_source_split_10203;

  corral_source_split_10203:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5632, 1)), $mul.ref(0, 1));
    goto corral_source_split_10204;

  corral_source_split_10204:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_10205;

  corral_source_split_10205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2380} __raw_spin_lock_init($p12, .str.49, $p2);
    goto corral_source_split_10206;

  corral_source_split_10206:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5736, 1));
    goto corral_source_split_10207;

  corral_source_split_10207:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p0);
    goto corral_source_split_10208;

  corral_source_split_10208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2381} vslice_dummy_var_37 := reg_timer_1($p13, rx_refill_timeout, $i14);
    goto corral_source_split_10209;

  corral_source_split_10209:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(4, 1));
    goto corral_source_split_10210;

  corral_source_split_10210:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_10211;

  corral_source_split_10211:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(32, 1));
    goto corral_source_split_10212;

  corral_source_split_10212:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_10213;

  corral_source_split_10213:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_10214;

  corral_source_split_10214:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_10215;

  corral_source_split_10215:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_10216;

  corral_source_split_10216:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_10217;

  corral_source_split_10217:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(0, 1));
    goto corral_source_split_10218;

  corral_source_split_10218:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_10219;

  corral_source_split_10219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2382} vslice_dummy_var_38 := snprintf.ref.i64.ref.ref.i32($p17, 22, .str.50, $p23, $i25);
    goto corral_source_split_10220;

  corral_source_split_10220:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5624, 1));
    goto corral_source_split_10221;

  corral_source_split_10221:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, 0);
    goto corral_source_split_10222;

  corral_source_split_10222:
    assume {:verifier.code 0} true;
    $i28 := 0;
    goto $bb1;

  $bb1:
    call $p29, $p30, $i31, $p32, $i33, $i34, $i35, $i36, $i37, $p39, $i40, $i41, $p43, $i44, $i45, $i46, $i47, $i48, $i28 := xennet_init_queue_loop_$bb1($p0, $p29, $p30, $i31, $p32, $i33, $i34, $i35, $i36, $i37, $p39, $i40, $i41, $p43, $i44, $i45, $i46, $i47, $i48, $i28);
    goto $bb1_last;

  corral_source_split_10224:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(496, 1));
    goto corral_source_split_10226;

  corral_source_split_10226:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_10227;

  corral_source_split_10227:
    assume {:verifier.code 0} true;
    $i31 := $zext.i16.i64($i28);
    goto corral_source_split_10228;

  corral_source_split_10228:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($p30, $mul.ref($i31, 8));
    goto corral_source_split_10229;

  corral_source_split_10229:
    assume {:verifier.code 0} true;
    $i33 := $zext.i16.i32($i28);
    goto corral_source_split_10230;

  corral_source_split_10230:
    assume {:verifier.code 0} true;
    $i34 := $add.i32($i33, 1);
    goto corral_source_split_10231;

  corral_source_split_10231:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i32.i16($i34);
    goto corral_source_split_10232;

  corral_source_split_10232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2383} skb_entry_set_link($p32, $i35);
    goto corral_source_split_10233;

  corral_source_split_10233:
    assume {:verifier.code 0} true;
    $i36 := $zext.i16.i32($i28);
    goto corral_source_split_10234;

  corral_source_split_10234:
    assume {:verifier.code 0} true;
    $i37 := $sext.i32.i64($i36);
    goto corral_source_split_10235;

  corral_source_split_10235:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(2548, 1)), $mul.ref($i37, 4));
    goto corral_source_split_10236;

  corral_source_split_10236:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, 0);
    goto corral_source_split_10237;

  corral_source_split_10237:
    assume {:verifier.code 0} true;
    $i40 := $zext.i16.i32($i28);
    goto corral_source_split_10238;

  corral_source_split_10238:
    assume {:verifier.code 0} true;
    $i41 := $sext.i32.i64($i40);
    goto corral_source_split_10239;

  corral_source_split_10239:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(3576, 1)), $mul.ref($i41, 8));
    goto corral_source_split_10240;

  corral_source_split_10240:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p43, $0.ref);
    goto corral_source_split_10241;

  corral_source_split_10241:
    assume {:verifier.code 0} true;
    $i44 := $zext.i16.i32($i28);
    goto corral_source_split_10242;

  corral_source_split_10242:
    assume {:verifier.code 0} true;
    $i45 := $add.i32($i44, 1);
    goto corral_source_split_10243;

  corral_source_split_10243:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i32.i16($i45);
    call {:si_unique_call 2384} {:cexpr "i"} boogie_si_record_i16($i46);
    goto corral_source_split_10244;

  corral_source_split_10244:
    assume {:verifier.code 0} true;
    $i47 := $zext.i16.i32($i46);
    goto corral_source_split_10245;

  corral_source_split_10245:
    assume {:verifier.code 0} true;
    $i48 := $ule.i32($i47, 255);
    goto corral_source_split_10246;

  corral_source_split_10246:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i49 := 0;
    goto $bb6;

  $bb6:
    call $i50, $i51, $p53, $i54, $i55, $p57, $i58, $i59, $i60, $i61, $i62, $i49 := xennet_init_queue_loop_$bb6($p0, $i50, $i51, $p53, $i54, $i55, $p57, $i58, $i59, $i60, $i61, $i62, $i49);
    goto $bb6_last;

  corral_source_split_10248:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i50 := $zext.i16.i32($i49);
    goto corral_source_split_10250;

  corral_source_split_10250:
    assume {:verifier.code 0} true;
    $i51 := $sext.i32.i64($i50);
    goto corral_source_split_10251;

  corral_source_split_10251:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref($i51, 8));
    goto corral_source_split_10252;

  corral_source_split_10252:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p53, $0.ref);
    goto corral_source_split_10253;

  corral_source_split_10253:
    assume {:verifier.code 0} true;
    $i54 := $zext.i16.i32($i49);
    goto corral_source_split_10254;

  corral_source_split_10254:
    assume {:verifier.code 0} true;
    $i55 := $sext.i32.i64($i54);
    goto corral_source_split_10255;

  corral_source_split_10255:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref($i55, 4));
    goto corral_source_split_10256;

  corral_source_split_10256:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p57, 0);
    goto corral_source_split_10257;

  corral_source_split_10257:
    assume {:verifier.code 0} true;
    $i58 := $zext.i16.i32($i49);
    goto corral_source_split_10258;

  corral_source_split_10258:
    assume {:verifier.code 0} true;
    $i59 := $add.i32($i58, 1);
    goto corral_source_split_10259;

  corral_source_split_10259:
    assume {:verifier.code 0} true;
    $i60 := $trunc.i32.i16($i59);
    call {:si_unique_call 2385} {:cexpr "i"} boogie_si_record_i16($i60);
    goto corral_source_split_10260;

  corral_source_split_10260:
    assume {:verifier.code 0} true;
    $i61 := $zext.i16.i32($i60);
    goto corral_source_split_10261;

  corral_source_split_10261:
    assume {:verifier.code 0} true;
    $i62 := $ule.i32($i61, 255);
    goto corral_source_split_10262;

  corral_source_split_10262:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(2544, 1));
    goto corral_source_split_10264;

  corral_source_split_10264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2386} $i64 := gnttab_alloc_grant_references(256, $p63);
    call {:si_unique_call 2387} {:cexpr "tmp"} boogie_si_record_i32($i64);
    goto corral_source_split_10265;

  corral_source_split_10265:
    assume {:verifier.code 0} true;
    $i65 := $slt.i32($i64, 0);
    goto corral_source_split_10266;

  corral_source_split_10266:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(7912, 1));
    goto corral_source_split_10271;

  corral_source_split_10271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2389} $i68 := gnttab_alloc_grant_references(256, $p67);
    call {:si_unique_call 2390} {:cexpr "tmp___0"} boogie_si_record_i32($i68);
    goto corral_source_split_10272;

  corral_source_split_10272:
    assume {:verifier.code 0} true;
    $i69 := $slt.i32($i68, 0);
    goto corral_source_split_10273;

  corral_source_split_10273:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i71 := 0;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_10282;

  corral_source_split_10282:
    assume {:verifier.code 0} true;
    $r := $i71;
    return;

  $bb15:
    assume $i69 == 1;
    goto corral_source_split_10275;

  corral_source_split_10275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2391} vslice_dummy_var_40 := printk.ref(.str.52);
    goto corral_source_split_10276;

  corral_source_split_10276:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 8944)), $mul.ref(2544, 1));
    goto corral_source_split_10278;

  corral_source_split_10278:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.0, $p72);
    goto corral_source_split_10279;

  corral_source_split_10279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2392} gnttab_free_grant_references($i73);
    goto corral_source_split_10280;

  corral_source_split_10280:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i71 := $sub.i32(0, 12);
    goto $bb19;

  $bb11:
    assume $i65 == 1;
    goto corral_source_split_10268;

  corral_source_split_10268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2388} vslice_dummy_var_39 := printk.ref(.str.51);
    goto corral_source_split_10269;

  corral_source_split_10269:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i62 == 1;
    assume {:verifier.code 0} true;
    $i49 := $i60;
    goto $bb8_dummy;

  $bb3:
    assume $i48 == 1;
    assume {:verifier.code 0} true;
    $i28 := $i46;
    goto $bb3_dummy;

  $bb8_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_10248;

  $bb3_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_10224;
}



const dev_warn: ref;

axiom dev_warn == $sub.ref(0, 351484);

procedure dev_warn.ref.ref.i32($p0: ref, $p1: ref, p.2: i32);
  free requires assertsPassed;



implementation dev_warn.ref.ref.i32($p0: ref, $p1: ref, p.2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10284;

  corral_source_split_10284:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_warn.ref.ref($p0: ref, $p1: ref);



procedure dev_warn.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32);



const xennet_poll: ref;

axiom xennet_poll == $sub.ref(0, 352516);

procedure xennet_poll($p0: ref, $i1: i32) returns ($r: i32);



const netif_napi_add: ref;

axiom netif_napi_add == $sub.ref(0, 353548);

procedure netif_napi_add($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation netif_napi_add($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2393} {:cexpr "netif_napi_add:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_10286;

  corral_source_split_10286:
    assume {:verifier.code 0} true;
    return;
}



const dev_err: ref;

axiom dev_err == $sub.ref(0, 354580);

procedure dev_err.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation dev_err.ref.ref($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10288;

  corral_source_split_10288:
    assume {:verifier.code 0} true;
    return;
}



const spin_lock: ref;

axiom spin_lock == $sub.ref(0, 355612);

procedure spin_lock($p0: ref);



const skb_queue_head_init: ref;

axiom skb_queue_head_init == $sub.ref(0, 356644);

procedure skb_queue_head_init($p0: ref);



const xennet_get_responses: ref;

axiom xennet_get_responses == $sub.ref(0, 357676);

procedure xennet_get_responses($p0: ref, $p1: ref, $i2: i32, $p3: ref) returns ($r: i32);



const __skb_queue_tail: ref;

axiom __skb_queue_tail == $sub.ref(0, 358708);

procedure __skb_queue_tail($p0: ref, $p1: ref);



const __skb_dequeue: ref;

axiom __skb_dequeue == $sub.ref(0, 359740);

procedure __skb_dequeue($p0: ref) returns ($r: ref);



const xennet_set_skb_gso: ref;

axiom xennet_set_skb_gso == $sub.ref(0, 360772);

procedure xennet_set_skb_gso($p0: ref, $p1: ref) returns ($r: i32);



const __skb_queue_head: ref;

axiom __skb_queue_head == $sub.ref(0, 361804);

procedure __skb_queue_head($p0: ref, $p1: ref);



const skb_queue_len: ref;

axiom skb_queue_len == $sub.ref(0, 362836);

procedure skb_queue_len($p0: ref) returns ($r: i32);



const skb_frag_size_set: ref;

axiom skb_frag_size_set == $sub.ref(0, 363868);

procedure skb_frag_size_set($p0: ref, $i1: i32);



const xennet_fill_frags: ref;

axiom xennet_fill_frags == $sub.ref(0, 364900);

procedure xennet_fill_frags($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const __skb_queue_purge: ref;

axiom __skb_queue_purge == $sub.ref(0, 365932);

procedure __skb_queue_purge($p0: ref);



const handle_incoming_queue: ref;

axiom handle_incoming_queue == $sub.ref(0, 366964);

procedure handle_incoming_queue($p0: ref, $p1: ref) returns ($r: i32);



const napi_complete: ref;

axiom napi_complete == $sub.ref(0, 367996);

procedure napi_complete($p0: ref);



const spin_unlock: ref;

axiom spin_unlock == $sub.ref(0, 369028);

procedure spin_unlock($p0: ref);



const ldv_spin_unlock_9: ref;

axiom ldv_spin_unlock_9 == $sub.ref(0, 370060);

procedure ldv_spin_unlock_9($p0: ref);



const _raw_spin_unlock: ref;

axiom _raw_spin_unlock == $sub.ref(0, 371092);

procedure _raw_spin_unlock($p0: ref);



const eth_type_trans: ref;

axiom eth_type_trans == $sub.ref(0, 372124);

procedure eth_type_trans($p0: ref, $p1: ref) returns ($r: i16);



const skb_reset_network_header: ref;

axiom skb_reset_network_header == $sub.ref(0, 373156);

procedure skb_reset_network_header($p0: ref);



const checksum_setup: ref;

axiom checksum_setup == $sub.ref(0, 374188);

procedure checksum_setup($p0: ref, $p1: ref) returns ($r: i32);



const napi_gro_receive: ref;

axiom napi_gro_receive == $sub.ref(0, 375220);

procedure napi_gro_receive($p0: ref, $p1: ref) returns ($r: i32);



const skb_checksum_setup: ref;

axiom skb_checksum_setup == $sub.ref(0, 376252);

procedure skb_checksum_setup($p0: ref, $i1: i1) returns ($r: i32);



const __skb_queue_after: ref;

axiom __skb_queue_after == $sub.ref(0, 377284);

procedure __skb_queue_after($p0: ref, $p1: ref, $p2: ref);



const __skb_insert: ref;

axiom __skb_insert == $sub.ref(0, 378316);

procedure __skb_insert($p0: ref, $p1: ref, $p2: ref, $p3: ref);



const skb_peek: ref;

axiom skb_peek == $sub.ref(0, 379348);

procedure skb_peek($p0: ref) returns ($r: ref);



const __skb_unlink: ref;

axiom __skb_unlink == $sub.ref(0, 380380);

procedure __skb_unlink($p0: ref, $p1: ref);



const __skb_queue_before: ref;

axiom __skb_queue_before == $sub.ref(0, 381412);

procedure __skb_queue_before($p0: ref, $p1: ref, $p2: ref);



const xennet_get_rx_skb: ref;

axiom xennet_get_rx_skb == $sub.ref(0, 382444);

procedure xennet_get_rx_skb($p0: ref, $i1: i32) returns ($r: ref);



const xennet_get_rx_ref: ref;

axiom xennet_get_rx_ref == $sub.ref(0, 383476);

procedure xennet_get_rx_ref($p0: ref, $i1: i32) returns ($r: i32);



const xennet_get_extras: ref;

axiom xennet_get_extras == $sub.ref(0, 384508);

procedure xennet_get_extras($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);



const xennet_move_rx_slot: ref;

axiom xennet_move_rx_slot == $sub.ref(0, 385540);

procedure xennet_move_rx_slot($p0: ref, $p1: ref, $i2: i32);



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 386572);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10290;

  corral_source_split_10290:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_10291;

  corral_source_split_10291:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_10292;

  corral_source_split_10292:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 387604);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10294;

  corral_source_split_10294:
    assume {:verifier.code 0} true;
    return;
}



const __skb_queue_head_init: ref;

axiom __skb_queue_head_init == $sub.ref(0, 388636);

procedure __skb_queue_head_init($p0: ref);



const ldv_spin_lock_5: ref;

axiom ldv_spin_lock_5 == $sub.ref(0, 389668);

procedure ldv_spin_lock_5($p0: ref);



const _raw_spin_lock: ref;

axiom _raw_spin_lock == $sub.ref(0, 390700);

procedure _raw_spin_lock($p0: ref);



const rx_refill_timeout: ref;

axiom rx_refill_timeout == $sub.ref(0, 391732);

procedure rx_refill_timeout($i0: i64);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation rx_refill_timeout($i0: i64)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2394} {:cexpr "rx_refill_timeout:arg:data"} boogie_si_record_i64($i0);
    goto corral_source_split_10296;

  corral_source_split_10296:
    assume {:verifier.code 0} true;
    $p1 := $i2p.i64.ref($i0);
    goto corral_source_split_10297;

  corral_source_split_10297:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 8944)), $mul.ref(40, 1));
    goto corral_source_split_10298;

  corral_source_split_10298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2395} napi_schedule($p2);
    goto corral_source_split_10299;

  corral_source_split_10299:
    assume {:verifier.code 0} true;
    return;
}



const reg_timer_1: ref;

axiom reg_timer_1 == $sub.ref(0, 392764);

procedure reg_timer_1($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.15, $M.0, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22;



implementation reg_timer_1($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $i3: i64;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2396} {:cexpr "reg_timer_1:arg:data"} boogie_si_record_i64($i2);
    goto corral_source_split_10301;

  corral_source_split_10301:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p1);
    goto corral_source_split_10302;

  corral_source_split_10302:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, $p2i.ref.i64(rx_refill_timeout));
    goto corral_source_split_10303;

  corral_source_split_10303:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_10305;

  corral_source_split_10305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2397} activate_suitable_timer_1($p0, $i2);
    goto corral_source_split_10306;

  corral_source_split_10306:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const gnttab_alloc_grant_references: ref;

axiom gnttab_alloc_grant_references == $sub.ref(0, 393796);

procedure gnttab_alloc_grant_references($i0: i16, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation gnttab_alloc_grant_references($i0: i16, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2398} {:cexpr "gnttab_alloc_grant_references:arg:arg0"} boogie_si_record_i16($i0);
    goto corral_source_split_10308;

  corral_source_split_10308:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2399} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2400} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_10309;

  corral_source_split_10309:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const xenbus_read: ref;

axiom xenbus_read == $sub.ref(0, 394828);

procedure xenbus_read($i0: i32, $p1: ref, $p2: ref, $p3: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.44, $CurrAddr;



implementation xenbus_read($i0: i32, $p1: ref, $p2: ref, $p3: ref) returns ($r: ref)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2401} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.44 := $store.i32($M.44, $p5, $i0);
    goto corral_source_split_10311;

  corral_source_split_10311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2402} $p6 := external_alloc();
    goto corral_source_split_10312;

  corral_source_split_10312:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const IS_ERR: ref;

axiom IS_ERR == $sub.ref(0, 395860);

procedure IS_ERR($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation IS_ERR($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10314;

  corral_source_split_10314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2403} $i1 := ldv_is_err($p0);
    goto corral_source_split_10315;

  corral_source_split_10315:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 2404} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_10316;

  corral_source_split_10316:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_10317;

  corral_source_split_10317:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const PTR_ERR: ref;

axiom PTR_ERR == $sub.ref(0, 396892);

procedure PTR_ERR($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation PTR_ERR($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10319;

  corral_source_split_10319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2405} $i1 := ldv_ptr_err($p0);
    call {:si_unique_call 2406} {:cexpr "tmp"} boogie_si_record_i64($i1);
    goto corral_source_split_10320;

  corral_source_split_10320:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_ptr_err: ref;

axiom ldv_ptr_err == $sub.ref(0, 397924);

procedure ldv_ptr_err($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ldv_ptr_err($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10322;

  corral_source_split_10322:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_10323;

  corral_source_split_10323:
    assume {:verifier.code 0} true;
    $i2 := $sub.i64(2012, $i1);
    goto corral_source_split_10324;

  corral_source_split_10324:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_is_err: ref;

axiom ldv_is_err == $sub.ref(0, 398956);

procedure ldv_is_err($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation ldv_is_err($p0: ref) returns ($r: i1)
{
  var $i1: i64;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10326;

  corral_source_split_10326:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_10327;

  corral_source_split_10327:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 2012);
    goto corral_source_split_10328;

  corral_source_split_10328:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const xennet_create_dev: ref;

axiom xennet_create_dev == $sub.ref(0, 399988);

procedure xennet_create_dev($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.30;



implementation xennet_create_dev($p0: ref) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i32;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $i22: i64;
  var $i23: i64;
  var $p24: ref;
  var $i25: i64;
  var $i26: i64;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i32;
  var $i32: i1;
  var $i21: i32;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $i41: i1;
  var $p42: ref;
  var $i43: i32;
  var $i44: i32;
  var $i45: i1;
  var $i47: i64;
  var $i48: i64;
  var $p49: ref;
  var $i50: i64;
  var $i51: i64;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $i56: i32;
  var $i57: i1;
  var $i46: i32;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i64;
  var $i62: i1;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i64;
  var $p68: ref;
  var $i69: i64;
  var $i70: i64;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i64;
  var $p78: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10330;

  corral_source_split_10330:
    assume {:verifier.code 0} true;
    $i1 := $M.35;
    goto corral_source_split_10331;

  corral_source_split_10331:
    assume {:verifier.code 0} true;
    $i2 := $M.35;
    goto corral_source_split_10332;

  corral_source_split_10332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2407} $p3 := alloc_etherdev_mqs(64, $i1, $i2);
    goto corral_source_split_10333;

  corral_source_split_10333:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_10334;

  corral_source_split_10334:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_10335;

  corral_source_split_10335:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2409} $p9 := netdev_priv($p3);
    goto corral_source_split_10343;

  corral_source_split_10343:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_10344;

  corral_source_split_10344:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_10345;

  corral_source_split_10345:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $p0);
    goto corral_source_split_10346;

  corral_source_split_10346:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p10, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_10347;

  corral_source_split_10347:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, $0.ref);
    goto corral_source_split_10348;

  corral_source_split_10348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2410} $p13 := __alloc_percpu(16, 8);
    goto corral_source_split_10349;

  corral_source_split_10349:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_10350;

  corral_source_split_10350:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_10351;

  corral_source_split_10351:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_10352;

  corral_source_split_10352:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p10, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_10379;

  corral_source_split_10379:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p33, $p13);
    goto corral_source_split_10380;

  corral_source_split_10380:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p10, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_10381;

  corral_source_split_10381:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_10382;

  corral_source_split_10382:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    goto corral_source_split_10383;

  corral_source_split_10383:
    assume {:verifier.code 0} true;
    $i37 := $eq.i64($i36, 0);
    goto corral_source_split_10384;

  corral_source_split_10384:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2420} $p38 := __alloc_percpu(16, 8);
    goto corral_source_split_10393;

  corral_source_split_10393:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_10394;

  corral_source_split_10394:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p39);
    goto corral_source_split_10395;

  corral_source_split_10395:
    assume {:verifier.code 0} true;
    $i41 := $ne.i64($i40, 0);
    goto corral_source_split_10396;

  corral_source_split_10396:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p10, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_10423;

  corral_source_split_10423:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p58, $p38);
    goto corral_source_split_10424;

  corral_source_split_10424:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p10, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_10425;

  corral_source_split_10425:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_10426;

  corral_source_split_10426:
    assume {:verifier.code 0} true;
    $i61 := $p2i.ref.i64($p60);
    goto corral_source_split_10427;

  corral_source_split_10427:
    assume {:verifier.code 0} true;
    $i62 := $eq.i64($i61, 0);
    goto corral_source_split_10428;

  corral_source_split_10428:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p3, $mul.ref(0, 2968)), $mul.ref(512, 1));
    goto corral_source_split_10432;

  corral_source_split_10432:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p63, xennet_netdev_ops);
    goto corral_source_split_10433;

  corral_source_split_10433:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p3, $mul.ref(0, 2968)), $mul.ref(240, 1));
    goto corral_source_split_10434;

  corral_source_split_10434:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p64, 17180131330);
    goto corral_source_split_10435;

  corral_source_split_10435:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p3, $mul.ref(0, 2968)), $mul.ref(248, 1));
    goto corral_source_split_10436;

  corral_source_split_10436:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p65, 1114129);
    goto corral_source_split_10437;

  corral_source_split_10437:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p3, $mul.ref(0, 2968)), $mul.ref(240, 1));
    goto corral_source_split_10438;

  corral_source_split_10438:
    assume {:verifier.code 0} true;
    $i67 := $load.i64($M.0, $p66);
    goto corral_source_split_10439;

  corral_source_split_10439:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p3, $mul.ref(0, 2968)), $mul.ref(248, 1));
    goto corral_source_split_10440;

  corral_source_split_10440:
    assume {:verifier.code 0} true;
    $i69 := $load.i64($M.0, $p68);
    goto corral_source_split_10441;

  corral_source_split_10441:
    assume {:verifier.code 0} true;
    $i70 := $or.i64($i67, $i69);
    goto corral_source_split_10442;

  corral_source_split_10442:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p3, $mul.ref(0, 2968)), $mul.ref(240, 1));
    goto corral_source_split_10443;

  corral_source_split_10443:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p71, $i70);
    goto corral_source_split_10444;

  corral_source_split_10444:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p3, $mul.ref(0, 2968)), $mul.ref(520, 1));
    goto corral_source_split_10445;

  corral_source_split_10445:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p72, xennet_ethtool_ops);
    goto corral_source_split_10446;

  corral_source_split_10446:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p0, $mul.ref(0, 1672)), $mul.ref(64, 1));
    goto corral_source_split_10447;

  corral_source_split_10447:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2968)), $mul.ref(1368, 1)), $mul.ref(0, 1));
    goto corral_source_split_10448;

  corral_source_split_10448:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p75, $p73);
    goto corral_source_split_10449;

  corral_source_split_10449:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p10, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_10450;

  corral_source_split_10450:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p76, $p3);
    goto corral_source_split_10451;

  corral_source_split_10451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2428} netif_carrier_off($p3);
    goto corral_source_split_10452;

  corral_source_split_10452:
    assume {:verifier.code 0} true;
    $p8 := $p3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10341;

  corral_source_split_10341:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;

  $bb31:
    assume $i62 == 1;
    goto corral_source_split_10430;

  corral_source_split_10430:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2418} xennet_free_netdev($p3);
    goto corral_source_split_10388;

  corral_source_split_10388:
    assume {:verifier.code 0} true;
    $i77 := $sext.i32.i64($sub.i32(0, 12));
    goto corral_source_split_10389;

  corral_source_split_10389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2419} $p78 := ERR_PTR($i77);
    goto corral_source_split_10390;

  corral_source_split_10390:
    assume {:verifier.code 0} true;
    goto corral_source_split_10391;

  corral_source_split_10391:
    assume {:verifier.code 0} true;
    $p8 := $p78;
    goto $bb3;

  $bb20:
    assume $i41 == 1;
    goto corral_source_split_10398;

  corral_source_split_10398:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_10399;

  corral_source_split_10399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2421} $i43 := cpumask_next($sub.i32(0, 1), $p42);
    call {:si_unique_call 2422} {:cexpr "tmp___4"} boogie_si_record_i32($i43);
    goto corral_source_split_10400;

  corral_source_split_10400:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_10401;

  corral_source_split_10401:
    assume {:verifier.code 0} true;
    $i45 := $slt.i32($i43, $i44);
    goto corral_source_split_10402;

  corral_source_split_10402:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i45 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb22:
    assume $i45 == 1;
    goto corral_source_split_10404;

  corral_source_split_10404:
    assume {:verifier.code 0} true;
    $i46 := $i43;
    goto $bb25;

  $bb25:
    call $i47, $i48, $p49, $i50, $i51, $p52, $p53, $p54, $i55, $i56, $i57, $i46 := xennet_create_dev_loop_$bb25($p39, $i47, $i48, $p49, $i50, $i51, $p52, $p53, $p54, $i55, $i56, $i57, $i46);
    goto $bb25_last;

  corral_source_split_10406:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    call {:si_unique_call 2423} $i47 := devirtbounce.2(0, $p39);
    call {:si_unique_call 2424} {:cexpr "__ptr___0"} boogie_si_record_i64($i47);
    goto corral_source_split_10408;

  corral_source_split_10408:
    assume {:verifier.code 0} true;
    $i48 := $sext.i32.i64($i46);
    goto corral_source_split_10409;

  corral_source_split_10409:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref($i48, 8));
    goto corral_source_split_10410;

  corral_source_split_10410:
    assume {:verifier.code 0} true;
    $i50 := $load.i64($M.0, $p49);
    goto corral_source_split_10411;

  corral_source_split_10411:
    assume {:verifier.code 0} true;
    $i51 := $add.i64($i50, $i47);
    goto corral_source_split_10412;

  corral_source_split_10412:
    assume {:verifier.code 0} true;
    $p52 := $i2p.i64.ref($i51);
    goto corral_source_split_10413;

  corral_source_split_10413:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p52, $mul.ref(0, 16)), $mul.ref(16, 1));
    goto corral_source_split_10414;

  corral_source_split_10414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2425} u64_stats_init($p53);
    goto corral_source_split_10415;

  corral_source_split_10415:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_10416;

  corral_source_split_10416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2426} $i55 := cpumask_next($i46, $p54);
    call {:si_unique_call 2427} {:cexpr "tmp___4"} boogie_si_record_i32($i55);
    goto corral_source_split_10417;

  corral_source_split_10417:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_10418;

  corral_source_split_10418:
    assume {:verifier.code 0} true;
    $i57 := $slt.i32($i55, $i56);
    goto corral_source_split_10419;

  corral_source_split_10419:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i57 == 1);
    goto corral_source_split_10421;

  corral_source_split_10421:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb27:
    assume $i57 == 1;
    assume {:verifier.code 0} true;
    $i46 := $i55;
    goto $bb27_dummy;

  $bb16:
    assume $i37 == 1;
    goto corral_source_split_10386;

  corral_source_split_10386:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_10354;

  corral_source_split_10354:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_10355;

  corral_source_split_10355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2411} $i18 := cpumask_next($sub.i32(0, 1), $p17);
    call {:si_unique_call 2412} {:cexpr "tmp___2"} boogie_si_record_i32($i18);
    goto corral_source_split_10356;

  corral_source_split_10356:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_10357;

  corral_source_split_10357:
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i18, $i19);
    goto corral_source_split_10358;

  corral_source_split_10358:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb7:
    assume $i20 == 1;
    goto corral_source_split_10360;

  corral_source_split_10360:
    assume {:verifier.code 0} true;
    $i21 := $i18;
    goto $bb10;

  $bb10:
    call $i22, $i23, $p24, $i25, $i26, $p27, $p28, $p29, $i30, $i31, $i32, $i21 := xennet_create_dev_loop_$bb10($p14, $i22, $i23, $p24, $i25, $i26, $p27, $p28, $p29, $i30, $i31, $i32, $i21);
    goto $bb10_last;

  corral_source_split_10362:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    call {:si_unique_call 2413} $i22 := devirtbounce.2(0, $p14);
    call {:si_unique_call 2414} {:cexpr "__ptr"} boogie_si_record_i64($i22);
    goto corral_source_split_10364;

  corral_source_split_10364:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i21);
    goto corral_source_split_10365;

  corral_source_split_10365:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref($i23, 8));
    goto corral_source_split_10366;

  corral_source_split_10366:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.0, $p24);
    goto corral_source_split_10367;

  corral_source_split_10367:
    assume {:verifier.code 0} true;
    $i26 := $add.i64($i25, $i22);
    goto corral_source_split_10368;

  corral_source_split_10368:
    assume {:verifier.code 0} true;
    $p27 := $i2p.i64.ref($i26);
    goto corral_source_split_10369;

  corral_source_split_10369:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 16)), $mul.ref(16, 1));
    goto corral_source_split_10370;

  corral_source_split_10370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2415} u64_stats_init($p28);
    goto corral_source_split_10371;

  corral_source_split_10371:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_10372;

  corral_source_split_10372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2416} $i30 := cpumask_next($i21, $p29);
    call {:si_unique_call 2417} {:cexpr "tmp___2"} boogie_si_record_i32($i30);
    goto corral_source_split_10373;

  corral_source_split_10373:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_10374;

  corral_source_split_10374:
    assume {:verifier.code 0} true;
    $i32 := $slt.i32($i30, $i31);
    goto corral_source_split_10375;

  corral_source_split_10375:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i32 == 1);
    goto corral_source_split_10377;

  corral_source_split_10377:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb12:
    assume $i32 == 1;
    assume {:verifier.code 0} true;
    $i21 := $i30;
    goto $bb12_dummy;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_10337;

  corral_source_split_10337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2408} $p6 := ERR_PTR($sub.i64(0, 12));
    goto corral_source_split_10338;

  corral_source_split_10338:
    assume {:verifier.code 0} true;
    goto corral_source_split_10339;

  corral_source_split_10339:
    assume {:verifier.code 0} true;
    $p8 := $p6;
    goto $bb3;

  $bb27_dummy:
    assume false;
    return;

  $bb25_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_10406;

  $bb12_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_10362;
}



const dev_set_drvdata: ref;

axiom dev_set_drvdata == $sub.ref(0, 401020);

procedure dev_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation dev_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10454;

  corral_source_split_10454:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(512, 1));
    goto corral_source_split_10455;

  corral_source_split_10455:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p1);
    goto corral_source_split_10456;

  corral_source_split_10456:
    assume {:verifier.code 0} true;
    return;
}



const ldv_register_netdev_42: ref;

axiom ldv_register_netdev_42 == $sub.ref(0, 402052);

procedure ldv_register_netdev_42($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.30, $M.45, $M.0, $CurrAddr;



implementation ldv_register_netdev_42($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10458;

  corral_source_split_10458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2429} $i1 := register_netdev($p0);
    call {:si_unique_call 2430} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_10459;

  corral_source_split_10459:
    assume {:verifier.code 0} true;
    $M.30 := 1;
    call {:si_unique_call 2431} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_10460;

  corral_source_split_10460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2432} ldv_net_device_ops_7();
    goto corral_source_split_10461;

  corral_source_split_10461:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const register_netdev: ref;

axiom register_netdev == $sub.ref(0, 403084);

procedure register_netdev($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation register_netdev($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10463;

  corral_source_split_10463:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2433} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 2434} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_10464;

  corral_source_split_10464:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_net_device_ops_7: ref;

axiom ldv_net_device_ops_7 == $sub.ref(0, 404116);

procedure ldv_net_device_ops_7();
  free requires assertsPassed;
  modifies $M.45, $M.0, $CurrAddr;



implementation ldv_net_device_ops_7()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10466;

  corral_source_split_10466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2435} $p0 := ldv_init_zalloc(3008);
    goto corral_source_split_10467;

  corral_source_split_10467:
    assume {:verifier.code 0} true;
    goto corral_source_split_10468;

  corral_source_split_10468:
    assume {:verifier.code 0} true;
    $M.45 := $p0;
    goto corral_source_split_10469;

  corral_source_split_10469:
    assume {:verifier.code 0} true;
    return;
}



const ldv_init_zalloc: ref;

axiom ldv_init_zalloc == $sub.ref(0, 405148);

procedure ldv_init_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_init_zalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2436} {:cexpr "ldv_init_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_10471;

  corral_source_split_10471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2437} $p1 := calloc(1, $i0);
    goto corral_source_split_10472;

  corral_source_split_10472:
    assume {:verifier.code 1} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_10473;

  corral_source_split_10473:
    assume {:verifier.code 1} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_10474;

  corral_source_split_10474:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_10475;

  corral_source_split_10475:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2438} __VERIFIER_assume($i4);
    goto corral_source_split_10476;

  corral_source_split_10476:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const alloc_etherdev_mqs: ref;

axiom alloc_etherdev_mqs == $sub.ref(0, 406180);

procedure alloc_etherdev_mqs($i0: i32, $i1: i32, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation alloc_etherdev_mqs($i0: i32, $i1: i32, $i2: i32) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2439} {:cexpr "alloc_etherdev_mqs:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 2440} {:cexpr "alloc_etherdev_mqs:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 2441} {:cexpr "alloc_etherdev_mqs:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_10478;

  corral_source_split_10478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2442} $p3 := external_alloc();
    goto corral_source_split_10479;

  corral_source_split_10479:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_10480;

  corral_source_split_10480:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const ERR_PTR: ref;

axiom ERR_PTR == $sub.ref(0, 407212);

procedure ERR_PTR($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ERR_PTR($i0: i64) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2443} {:cexpr "ERR_PTR:arg:error"} boogie_si_record_i64($i0);
    goto corral_source_split_10482;

  corral_source_split_10482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2444} $p1 := ldv_err_ptr($i0);
    goto corral_source_split_10483;

  corral_source_split_10483:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const __alloc_percpu: ref;

axiom __alloc_percpu == $sub.ref(0, 408244);

procedure __alloc_percpu($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;



implementation __alloc_percpu($i0: i64, $i1: i64) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2445} {:cexpr "__alloc_percpu:arg:arg0"} boogie_si_record_i64($i0);
    call {:si_unique_call 2446} {:cexpr "__alloc_percpu:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_10485;

  corral_source_split_10485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2447} $p2 := external_alloc();
    goto corral_source_split_10486;

  corral_source_split_10486:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_err_ptr: ref;

axiom ldv_err_ptr == $sub.ref(0, 409276);

procedure ldv_err_ptr($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ldv_err_ptr($i0: i64) returns ($r: ref)
{
  var $i1: i64;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2448} {:cexpr "ldv_err_ptr:arg:error"} boogie_si_record_i64($i0);
    goto corral_source_split_10488;

  corral_source_split_10488:
    assume {:verifier.code 0} true;
    $i1 := $sub.i64(2012, $i0);
    goto corral_source_split_10489;

  corral_source_split_10489:
    assume {:verifier.code 0} true;
    $p2 := $i2p.i64.ref($i1);
    goto corral_source_split_10490;

  corral_source_split_10490:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_memset: ref;

axiom ldv_memset == $sub.ref(0, 410308);

procedure ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref)
{
  var $i3: i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2449} {:cexpr "ldv_memset:arg:c"} boogie_si_record_i32($i1);
    call {:si_unique_call 2450} {:cexpr "ldv_memset:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_10492;

  corral_source_split_10492:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i8($i1);
    goto corral_source_split_10493;

  corral_source_split_10493:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_7 := $M.0;
    call {:si_unique_call 2451} cmdloc_dummy_var_8 := $memset.i8(cmdloc_dummy_var_7, $p0, $i3, $i2, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_8;
    goto corral_source_split_10494;

  corral_source_split_10494:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const timer_init_1: ref;

axiom timer_init_1 == $sub.ref(0, 411340);

procedure timer_init_1();
  free requires assertsPassed;
  modifies $M.16, $M.18, $M.20, $M.22;



implementation timer_init_1()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10496;

  corral_source_split_10496:
    assume {:verifier.code 0} true;
    $M.16 := 0;
    call {:si_unique_call 2452} {:cexpr "ldv_timer_1_0"} boogie_si_record_i32(0);
    goto corral_source_split_10497;

  corral_source_split_10497:
    assume {:verifier.code 0} true;
    $M.18 := 0;
    call {:si_unique_call 2453} {:cexpr "ldv_timer_1_1"} boogie_si_record_i32(0);
    goto corral_source_split_10498;

  corral_source_split_10498:
    assume {:verifier.code 0} true;
    $M.20 := 0;
    call {:si_unique_call 2454} {:cexpr "ldv_timer_1_2"} boogie_si_record_i32(0);
    goto corral_source_split_10499;

  corral_source_split_10499:
    assume {:verifier.code 0} true;
    $M.22 := 0;
    call {:si_unique_call 2455} {:cexpr "ldv_timer_1_3"} boogie_si_record_i32(0);
    goto corral_source_split_10500;

  corral_source_split_10500:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_device_attribute_5: ref;

axiom ldv_initialize_device_attribute_5 == $sub.ref(0, 412372);

procedure ldv_initialize_device_attribute_5();
  free requires assertsPassed;
  modifies $M.46, $M.47, $M.0, $CurrAddr;



implementation ldv_initialize_device_attribute_5()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10502;

  corral_source_split_10502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2456} $p0 := ldv_init_zalloc(48);
    goto corral_source_split_10503;

  corral_source_split_10503:
    assume {:verifier.code 0} true;
    goto corral_source_split_10504;

  corral_source_split_10504:
    assume {:verifier.code 0} true;
    $M.46 := $p0;
    goto corral_source_split_10505;

  corral_source_split_10505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2457} $p2 := ldv_init_zalloc(1416);
    goto corral_source_split_10506;

  corral_source_split_10506:
    assume {:verifier.code 0} true;
    goto corral_source_split_10507;

  corral_source_split_10507:
    assume {:verifier.code 0} true;
    $M.47 := $p2;
    goto corral_source_split_10508;

  corral_source_split_10508:
    assume {:verifier.code 0} true;
    return;
}



const choose_timer_1: ref;

axiom choose_timer_1 == $sub.ref(0, 413404);

procedure choose_timer_1();
  free requires assertsPassed;
  modifies $M.16, $M.18, $M.20, $M.22, $CurrAddr;



implementation choose_timer_1()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $p21: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10510;

  corral_source_split_10510:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2458} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2459} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 2460} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2469} ldv_stop();
    goto corral_source_split_10552;

  corral_source_split_10552:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_10516;

  corral_source_split_10516:
    assume {:verifier.code 0} true;
    $i18 := $M.22;
    goto corral_source_split_10517;

  corral_source_split_10517:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_10518;

  corral_source_split_10518:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb23:
    assume $i19 == 1;
    goto corral_source_split_10546;

  corral_source_split_10546:
    assume {:verifier.code 0} true;
    $M.22 := 2;
    call {:si_unique_call 2467} {:cexpr "ldv_timer_1_3"} boogie_si_record_i32(2);
    goto corral_source_split_10547;

  corral_source_split_10547:
    assume {:verifier.code 0} true;
    $i20 := $M.22;
    goto corral_source_split_10548;

  corral_source_split_10548:
    assume {:verifier.code 0} true;
    $p21 := $M.21;
    goto corral_source_split_10549;

  corral_source_split_10549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2468} ldv_timer_1($i20, $p21);
    goto corral_source_split_10550;

  corral_source_split_10550:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_10512;

  corral_source_split_10512:
    assume {:verifier.code 0} true;
    $i14 := $M.20;
    goto corral_source_split_10513;

  corral_source_split_10513:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 1);
    goto corral_source_split_10514;

  corral_source_split_10514:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb20:
    assume $i15 == 1;
    goto corral_source_split_10540;

  corral_source_split_10540:
    assume {:verifier.code 0} true;
    $M.20 := 2;
    call {:si_unique_call 2465} {:cexpr "ldv_timer_1_2"} boogie_si_record_i32(2);
    goto corral_source_split_10541;

  corral_source_split_10541:
    assume {:verifier.code 0} true;
    $i16 := $M.20;
    goto corral_source_split_10542;

  corral_source_split_10542:
    assume {:verifier.code 0} true;
    $p17 := $M.19;
    goto corral_source_split_10543;

  corral_source_split_10543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2466} ldv_timer_1($i16, $p17);
    goto corral_source_split_10544;

  corral_source_split_10544:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_10520;

  corral_source_split_10520:
    assume {:verifier.code 0} true;
    $i10 := $M.18;
    goto corral_source_split_10521;

  corral_source_split_10521:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 1);
    goto corral_source_split_10522;

  corral_source_split_10522:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb17:
    assume $i11 == 1;
    goto corral_source_split_10534;

  corral_source_split_10534:
    assume {:verifier.code 0} true;
    $M.18 := 2;
    call {:si_unique_call 2463} {:cexpr "ldv_timer_1_1"} boogie_si_record_i32(2);
    goto corral_source_split_10535;

  corral_source_split_10535:
    assume {:verifier.code 0} true;
    $i12 := $M.18;
    goto corral_source_split_10536;

  corral_source_split_10536:
    assume {:verifier.code 0} true;
    $p13 := $M.17;
    goto corral_source_split_10537;

  corral_source_split_10537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2464} ldv_timer_1($i12, $p13);
    goto corral_source_split_10538;

  corral_source_split_10538:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_10524;

  corral_source_split_10524:
    assume {:verifier.code 0} true;
    $i6 := $M.16;
    goto corral_source_split_10525;

  corral_source_split_10525:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 1);
    goto corral_source_split_10526;

  corral_source_split_10526:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i7 == 1;
    goto corral_source_split_10528;

  corral_source_split_10528:
    assume {:verifier.code 0} true;
    $M.16 := 2;
    call {:si_unique_call 2461} {:cexpr "ldv_timer_1_0"} boogie_si_record_i32(2);
    goto corral_source_split_10529;

  corral_source_split_10529:
    assume {:verifier.code 0} true;
    $i8 := $M.16;
    goto corral_source_split_10530;

  corral_source_split_10530:
    assume {:verifier.code 0} true;
    $p9 := $M.15;
    goto corral_source_split_10531;

  corral_source_split_10531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2462} ldv_timer_1($i8, $p9);
    goto corral_source_split_10532;

  corral_source_split_10532:
    assume {:verifier.code 0} true;
    goto $bb15;
}



const ldv_timer_1: ref;

axiom ldv_timer_1 == $sub.ref(0, 414436);

procedure ldv_timer_1($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_timer_1($i0: i32, $p1: ref)
{
  var $p2: ref;
  var $i3: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2470} {:cexpr "ldv_timer_1:arg:state"} boogie_si_record_i32($i0);
    goto corral_source_split_10554;

  corral_source_split_10554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2471} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(2);
    goto corral_source_split_10555;

  corral_source_split_10555:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_10556;

  corral_source_split_10556:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    goto corral_source_split_10557;

  corral_source_split_10557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2472} rx_refill_timeout($i3);
    goto corral_source_split_10558;

  corral_source_split_10558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2473} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_10559;

  corral_source_split_10559:
    assume {:verifier.code 0} true;
    return;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 415468);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10561;

  corral_source_split_10561:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const ldv_initialize_ethtool_ops_6: ref;

axiom ldv_initialize_ethtool_ops_6 == $sub.ref(0, 416500);

procedure ldv_initialize_ethtool_ops_6();
  free requires assertsPassed;
  modifies $M.49, $M.0, $CurrAddr;



implementation ldv_initialize_ethtool_ops_6()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10563;

  corral_source_split_10563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2474} $p0 := ldv_init_zalloc(3008);
    goto corral_source_split_10564;

  corral_source_split_10564:
    assume {:verifier.code 0} true;
    goto corral_source_split_10565;

  corral_source_split_10565:
    assume {:verifier.code 0} true;
    $M.49 := $p0;
    goto corral_source_split_10566;

  corral_source_split_10566:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_xenbus_driver_2: ref;

axiom ldv_initialize_xenbus_driver_2 == $sub.ref(0, 417532);

procedure ldv_initialize_xenbus_driver_2();
  free requires assertsPassed;
  modifies $M.50, $M.0, $CurrAddr;



implementation ldv_initialize_xenbus_driver_2()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10568;

  corral_source_split_10568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2475} $p0 := ldv_init_zalloc(1664);
    goto corral_source_split_10569;

  corral_source_split_10569:
    assume {:verifier.code 0} true;
    goto corral_source_split_10570;

  corral_source_split_10570:
    assume {:verifier.code 0} true;
    $M.50 := $p0;
    goto corral_source_split_10571;

  corral_source_split_10571:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_device_attribute_4: ref;

axiom ldv_initialize_device_attribute_4 == $sub.ref(0, 418564);

procedure ldv_initialize_device_attribute_4();
  free requires assertsPassed;
  modifies $M.51, $M.52, $M.0, $CurrAddr;



implementation ldv_initialize_device_attribute_4()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10573;

  corral_source_split_10573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2476} $p0 := ldv_init_zalloc(48);
    goto corral_source_split_10574;

  corral_source_split_10574:
    assume {:verifier.code 0} true;
    goto corral_source_split_10575;

  corral_source_split_10575:
    assume {:verifier.code 0} true;
    $M.51 := $p0;
    goto corral_source_split_10576;

  corral_source_split_10576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2477} $p2 := ldv_init_zalloc(1416);
    goto corral_source_split_10577;

  corral_source_split_10577:
    assume {:verifier.code 0} true;
    goto corral_source_split_10578;

  corral_source_split_10578:
    assume {:verifier.code 0} true;
    $M.52 := $p2;
    goto corral_source_split_10579;

  corral_source_split_10579:
    assume {:verifier.code 0} true;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 419596);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.53, $M.54, $M.30, $M.55, $M.16, $M.18, $M.20, $M.22, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.62, $M.63, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.64, $M.65, $M.46, $M.47, $M.50, $M.51, $M.52, $M.49, $M.45, $M.15, $M.17, $M.19, $M.21, $M.14, $M.66, $M.35, $M.93, $M.94, $M.95, $M.96, $M.97, $CurrAddr, $M.12, $M.31, $M.32, $M.33, $M.34, $M.36, $M.37, $M.39, $M.41, $M.43, $M.42, $M.44, assertsPassed;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p35: ref;
  var $p37: ref;
  var $p39: ref;
  var $p41: ref;
  var $p43: ref;
  var $p45: ref;
  var $p47: ref;
  var $p49: ref;
  var $i51: i32;
  var $i52: i1;
  var $i53: i1;
  var $i54: i1;
  var $i55: i1;
  var $i56: i1;
  var $i57: i1;
  var $i58: i1;
  var $i59: i1;
  var $i60: i1;
  var $i61: i32;
  var $i62: i1;
  var $i63: i32;
  var $i64: i1;
  var $i65: i1;
  var $i66: i1;
  var $i67: i1;
  var $i68: i1;
  var $i69: i32;
  var $i70: i1;
  var $p71: ref;
  var $i72: i32;
  var $i74: i32;
  var $i75: i1;
  var $p76: ref;
  var $i77: i32;
  var $i78: i1;
  var $p79: ref;
  var $i80: i32;
  var $i81: i32;
  var $i82: i1;
  var $p83: ref;
  var $i85: i32;
  var $i86: i1;
  var $i87: i32;
  var $i88: i1;
  var $i89: i32;
  var $i90: i1;
  var $i92: i32;
  var $i93: i1;
  var $i94: i32;
  var $i95: i1;
  var $i96: i1;
  var $i97: i1;
  var $i98: i1;
  var $i99: i1;
  var $i100: i1;
  var $i101: i1;
  var $i102: i1;
  var $i103: i1;
  var $i104: i1;
  var $i105: i1;
  var $i106: i1;
  var $i107: i1;
  var $i108: i1;
  var $i109: i32;
  var $i110: i1;
  var $p111: ref;
  var $i113: i32;
  var $i114: i1;
  var $p115: ref;
  var $i117: i32;
  var $i118: i1;
  var $p119: ref;
  var $i121: i32;
  var $i122: i1;
  var $p123: ref;
  var $i125: i32;
  var $i126: i1;
  var $p127: ref;
  var $i128: i32;
  var $i129: i1;
  var $p130: ref;
  var $i131: i32;
  var $i132: i1;
  var $p133: ref;
  var $i134: i32;
  var $i135: i1;
  var $p136: ref;
  var $p137: ref;
  var $i139: i32;
  var $i140: i1;
  var $p141: ref;
  var $p142: ref;
  var $i144: i32;
  var $i145: i1;
  var $p146: ref;
  var $p147: ref;
  var $i149: i32;
  var $i150: i1;
  var $p151: ref;
  var $i152: i64;
  var $i154: i32;
  var $i155: i1;
  var $p156: ref;
  var $i157: i64;
  var $i159: i32;
  var $i160: i1;
  var $p161: ref;
  var $i162: i64;
  var $i164: i32;
  var $i165: i1;
  var $p166: ref;
  var $i167: i32;
  var $i169: i32;
  var $i170: i1;
  var $p171: ref;
  var $i172: i32;
  var $i174: i32;
  var $i175: i1;
  var $p176: ref;
  var $i177: i32;
  var $i178: i32;
  var $i179: i1;
  var $i180: i32;
  var $i181: i1;
  var $p182: ref;
  var $i184: i32;
  var $i185: i1;
  var $p186: ref;
  var $i187: i64;
  var $i189: i32;
  var $i190: i1;
  var $p191: ref;
  var $i192: i64;
  var $i194: i32;
  var $i195: i1;
  var $p196: ref;
  var $i197: i64;
  var $i199: i32;
  var $i200: i1;
  var $p201: ref;
  var $i203: i32;
  var $i204: i1;
  var $p205: ref;
  var $i207: i32;
  var $i208: i1;
  var $p209: ref;
  var $i211: i32;
  var $i212: i1;
  var $p213: ref;
  var $i215: i32;
  var $i216: i1;
  var $p217: ref;
  var $i219: i32;
  var $i220: i1;
  var $p221: ref;
  var $i223: i32;
  var $i224: i1;
  var $i225: i32;
  var $i226: i32;
  var $i227: i1;
  var $i228: i32;
  var $i229: i32;
  var $i230: i32;
  var $i231: i1;
  var $i233: i32;
  var $i234: i32;
  var $i235: i32;
  var $i236: i1;
  var $i237: i32;
  var $i238: i1;
  var $i239: i1;
  var $i240: i1;
  var $i241: i1;
  var $i242: i1;
  var $i243: i1;
  var $i244: i32;
  var $i245: i1;
  var $p246: ref;
  var $i247: i32;
  var $i248: i32;
  var $i249: i1;
  var $i250: i32;
  var $i251: i32;
  var $i252: i32;
  var $i253: i1;
  var $p254: ref;
  var $i255: i32;
  var $i256: i32;
  var $i257: i1;
  var $p258: ref;
  var $i259: i32;
  var $i260: i32;
  var $i261: i1;
  var $p262: ref;
  var $i263: i32;
  var $i264: i32;
  var $i265: i1;
  var $p266: ref;
  var $i268: i32;
  var $i269: i32;
  var $i270: i32;
  var $i271: i1;
  var $p272: ref;
  var $i274: i32;
  var $i275: i32;
  var $i276: i32;
  var $i277: i1;
  var $p278: ref;
  var $i279: i32;
  var $i280: i32;
  var $i281: i1;
  var $i282: i32;
  var $i283: i1;
  var $i285: i32;
  var $i286: i1;
  var $i287: i32;
  var $i288: i1;
  var $i289: i32;
  var $i290: i1;
  var $i291: i1;
  var $i292: i1;
  var $i293: i32;
  var $i294: i1;
  var $p295: ref;
  var $p296: ref;
  var $i297: i64;
  var $i299: i32;
  var $i300: i1;
  var $p301: ref;
  var $p302: ref;
  var $i304: i32;
  var $i305: i1;
  var $i306: i32;
  var $i307: i1;
  var $i308: i1;
  var $i309: i1;
  var $i310: i32;
  var $i311: i1;
  var $i312: i32;
  var $i313: i1;
  var $i314: i32;
  var $i315: i1;
  var $i316: i32;
  var $i317: i32;
  var $i318: i1;
  var $i319: i32;
  var $i320: i1;
  var $i321: i32;
  var $i322: i1;
  var $i323: i32;
  var $i324: i1;
  var $i325: i1;
  var $i326: i1;
  var $i327: i32;
  var $i328: i1;
  var $p329: ref;
  var $p330: ref;
  var $i331: i64;
  var $i333: i32;
  var $i334: i1;
  var $p335: ref;
  var $p336: ref;
  var vslice_dummy_var_41: ref;
  var vslice_dummy_var_42: ref;
  var vslice_dummy_var_43: ref;
  var vslice_dummy_var_44: ref;
  var vslice_dummy_var_45: ref;
  var vslice_dummy_var_46: ref;
  var vslice_dummy_var_47: ref;
  var vslice_dummy_var_48: ref;
  var vslice_dummy_var_49: ref;
  var vslice_dummy_var_50: i32;
  var vslice_dummy_var_51: i32;
  var vslice_dummy_var_52: i64;
  var vslice_dummy_var_53: i32;
  var vslice_dummy_var_54: i32;
  var vslice_dummy_var_55: i32;
  var vslice_dummy_var_56: i32;
  var vslice_dummy_var_57: i16;
  var vslice_dummy_var_58: i16;
  var vslice_dummy_var_59: i16;
  var vslice_dummy_var_60: i32;
  var vslice_dummy_var_61: i32;
  var vslice_dummy_var_62: i32;
  var vslice_dummy_var_63: i32;
  var vslice_dummy_var_64: i32;
  var vslice_dummy_var_65: i32;
  var vslice_dummy_var_66: i64;
  var vslice_dummy_var_67: i64;
  var vslice_dummy_var_68: i64;
  var vslice_dummy_var_69: i32;
  var vslice_dummy_var_70: i32;
  var vslice_dummy_var_71: i32;
  var vslice_dummy_var_72: ref;
  var vslice_dummy_var_73: ref;
  var vslice_dummy_var_74: ref;
  var vslice_dummy_var_75: i32;
  var vslice_dummy_var_76: i32;
  var vslice_dummy_var_77: i32;
  var vslice_dummy_var_78: i32;
  var vslice_dummy_var_79: i64;
  var vslice_dummy_var_80: i64;
  var vslice_dummy_var_81: i64;
  var vslice_dummy_var_82: i64;

  $bb0:
    call {:si_unique_call 2478} $initialize();
    goto corral_source_split_10581;

  corral_source_split_10581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2479} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    assume {:verifier.code 0} true;
    call {:si_unique_call 2480} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2481} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2482} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2483} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2484} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2485} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2486} $p6 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2487} $p7 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2488} $p8 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_10582;

  corral_source_split_10582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2489} $p9 := ldv_init_zalloc(8);
    goto corral_source_split_10583;

  corral_source_split_10583:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_10584;

  corral_source_split_10584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2490} $p11 := ldv_init_zalloc(1);
    goto corral_source_split_10585;

  corral_source_split_10585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2491} $p12 := ldv_init_zalloc(8);
    goto corral_source_split_10586;

  corral_source_split_10586:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_10587;

  corral_source_split_10587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2492} $p14 := ldv_init_zalloc(48);
    goto corral_source_split_10588;

  corral_source_split_10588:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_10589;

  corral_source_split_10589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2493} $p16 := ldv_init_zalloc(1416);
    goto corral_source_split_10590;

  corral_source_split_10590:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_10591;

  corral_source_split_10591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2494} $p18 := ldv_init_zalloc(1);
    goto corral_source_split_10592;

  corral_source_split_10592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2495} $p19 := ldv_init_zalloc(232);
    goto corral_source_split_10593;

  corral_source_split_10593:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_10594;

  corral_source_split_10594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2496} $p21 := ldv_init_zalloc(232);
    goto corral_source_split_10595;

  corral_source_split_10595:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_10596;

  corral_source_split_10596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2497} $p23 := ldv_init_zalloc(1);
    goto corral_source_split_10597;

  corral_source_split_10597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2498} $p24 := ldv_init_zalloc(184);
    goto corral_source_split_10598;

  corral_source_split_10598:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_10599;

  corral_source_split_10599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2499} $p26 := ldv_init_zalloc(1);
    goto corral_source_split_10600;

  corral_source_split_10600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2500} $p27 := ldv_init_zalloc(32);
    goto corral_source_split_10601;

  corral_source_split_10601:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_10602;

  corral_source_split_10602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2501} $p29 := ldv_init_zalloc(1);
    goto corral_source_split_10603;

  corral_source_split_10603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2502} $p30 := ldv_init_zalloc(1);
    goto corral_source_split_10604;

  corral_source_split_10604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2503} $p31 := ldv_init_zalloc(1);
    goto corral_source_split_10605;

  corral_source_split_10605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2504} $p32 := ldv_init_zalloc(1);
    goto corral_source_split_10606;

  corral_source_split_10606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2505} ldv_initialize();
    goto corral_source_split_10607;

  corral_source_split_10607:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p0);
    goto corral_source_split_10608;

  corral_source_split_10608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2506} vslice_dummy_var_41 := ldv_memset($p33, 0, 4);
    goto corral_source_split_10609;

  corral_source_split_10609:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p1);
    goto corral_source_split_10610;

  corral_source_split_10610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2507} vslice_dummy_var_42 := ldv_memset($p35, 0, 4);
    goto corral_source_split_10611;

  corral_source_split_10611:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p2);
    goto corral_source_split_10612;

  corral_source_split_10612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2508} vslice_dummy_var_43 := ldv_memset($p37, 0, 4);
    goto corral_source_split_10613;

  corral_source_split_10613:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p3);
    goto corral_source_split_10614;

  corral_source_split_10614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2509} vslice_dummy_var_44 := ldv_memset($p39, 0, 8);
    goto corral_source_split_10615;

  corral_source_split_10615:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p4);
    goto corral_source_split_10616;

  corral_source_split_10616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2510} vslice_dummy_var_45 := ldv_memset($p41, 0, 8);
    goto corral_source_split_10617;

  corral_source_split_10617:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p5);
    goto corral_source_split_10618;

  corral_source_split_10618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2511} vslice_dummy_var_46 := ldv_memset($p43, 0, 8);
    goto corral_source_split_10619;

  corral_source_split_10619:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p6);
    goto corral_source_split_10620;

  corral_source_split_10620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2512} vslice_dummy_var_47 := ldv_memset($p45, 0, 4);
    goto corral_source_split_10621;

  corral_source_split_10621:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p7);
    goto corral_source_split_10622;

  corral_source_split_10622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2513} vslice_dummy_var_48 := ldv_memset($p47, 0, 8);
    goto corral_source_split_10623;

  corral_source_split_10623:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p8);
    goto corral_source_split_10624;

  corral_source_split_10624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2514} vslice_dummy_var_49 := ldv_memset($p49, 0, 8);
    goto corral_source_split_10625;

  corral_source_split_10625:
    assume {:verifier.code 0} true;
    $M.53 := 0;
    call {:si_unique_call 2515} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    goto corral_source_split_10626;

  corral_source_split_10626:
    assume {:verifier.code 0} true;
    $M.54 := 0;
    call {:si_unique_call 2516} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_10627;

  corral_source_split_10627:
    assume {:verifier.code 0} true;
    $M.30 := 0;
    call {:si_unique_call 2517} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    goto corral_source_split_10628;

  corral_source_split_10628:
    assume {:verifier.code 0} true;
    $M.55 := 0;
    call {:si_unique_call 2518} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    goto corral_source_split_10629;

  corral_source_split_10629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2519} timer_init_1();
    goto corral_source_split_10630;

  corral_source_split_10630:
    assume {:verifier.code 0} true;
    $M.56 := 1;
    call {:si_unique_call 2520} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_10631;

  corral_source_split_10631:
    assume {:verifier.code 0} true;
    $M.57 := 0;
    call {:si_unique_call 2521} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_10632;

  corral_source_split_10632:
    assume {:verifier.code 0} true;
    $M.58 := 0;
    call {:si_unique_call 2522} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_10633;

  corral_source_split_10633:
    assume {:verifier.code 0} true;
    $M.59 := 1;
    call {:si_unique_call 2523} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_10634;

  corral_source_split_10634:
    assume {:verifier.code 0} true;
    $M.60 := 0;
    call {:si_unique_call 2524} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    goto corral_source_split_10635;

  corral_source_split_10635:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $p71, $i72, $i74, $i75, $p76, $i77, $i78, $p79, $i80, $i81, $i82, $p83, $i85, $i86, $i87, $i88, $i89, $i90, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $p111, $i113, $i114, $p115, $i117, $i118, $p119, $i121, $i122, $p123, $i125, $i126, $p127, $i128, $i129, $p130, $i131, $i132, $p133, $i134, $i135, $p136, $p137, $i139, $i140, $p141, $p142, $i144, $i145, $p146, $p147, $i149, $i150, $p151, $i152, $i154, $i155, $p156, $i157, $i159, $i160, $p161, $i162, $i164, $i165, $p166, $i167, $i169, $i170, $p171, $i172, $i174, $i175, $p176, $i177, $i178, $i179, $i180, $i181, $p182, $i184, $i185, $p186, $i187, $i189, $i190, $p191, $i192, $i194, $i195, $p196, $i197, $i199, $i200, $p201, $i203, $i204, $p205, $i207, $i208, $p209, $i211, $i212, $p213, $i215, $i216, $p217, $i219, $i220, $p221, $i223, $i224, $i225, $i226, $i227, $i228, $i229, $i230, $i231, $i233, $i234, $i235, $i236, $i237, $i238, $i239, $i240, $i241, $i242, $i243, $i244, $i245, $p246, $i247, $i248, $i249, $i250, $i251, $i252, $i253, $p254, $i255, $i256, $i257, $p258, $i259, $i260, $i261, $p262, $i263, $i264, $i265, $p266, $i268, $i269, $i270, $i271, $p272, $i274, $i275, $i276, $i277, $p278, $i279, $i280, $i281, $i282, $i283, $i285, $i286, $i287, $i288, $i289, $i290, $i291, $i292, $i293, $i294, $p295, $p296, $i297, $i299, $i300, $p301, $p302, $i304, $i305, $i306, $i307, $i308, $i309, $i310, $i311, $i312, $i313, $i314, $i315, $i316, $i317, $i318, $i319, $i320, $i321, $i322, $i323, $i324, $i325, $i326, $i327, $i328, $p329, $p330, $i331, $i333, $i334, $p335, $p336, vslice_dummy_var_50, vslice_dummy_var_51, vslice_dummy_var_52, vslice_dummy_var_53, vslice_dummy_var_54, vslice_dummy_var_55, vslice_dummy_var_56, vslice_dummy_var_57, vslice_dummy_var_58, vslice_dummy_var_59, vslice_dummy_var_60, vslice_dummy_var_61, vslice_dummy_var_62, vslice_dummy_var_63, vslice_dummy_var_64, vslice_dummy_var_65, vslice_dummy_var_66, vslice_dummy_var_67, vslice_dummy_var_68, vslice_dummy_var_69, vslice_dummy_var_70, vslice_dummy_var_71, vslice_dummy_var_72, vslice_dummy_var_73, vslice_dummy_var_74, vslice_dummy_var_75, vslice_dummy_var_76, vslice_dummy_var_77, vslice_dummy_var_78, vslice_dummy_var_79, vslice_dummy_var_80, vslice_dummy_var_81, vslice_dummy_var_82 := main_loop_$bb1($p0, $p1, $p2, $p3, $p4, $p5, $p6, $p7, $p8, $p10, $p11, $p13, $p15, $p17, $p18, $p20, $p22, $p23, $p25, $p26, $p28, $p29, $p30, $p31, $p32, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $p71, $i72, $i74, $i75, $p76, $i77, $i78, $p79, $i80, $i81, $i82, $p83, $i85, $i86, $i87, $i88, $i89, $i90, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $p111, $i113, $i114, $p115, $i117, $i118, $p119, $i121, $i122, $p123, $i125, $i126, $p127, $i128, $i129, $p130, $i131, $i132, $p133, $i134, $i135, $p136, $p137, $i139, $i140, $p141, $p142, $i144, $i145, $p146, $p147, $i149, $i150, $p151, $i152, $i154, $i155, $p156, $i157, $i159, $i160, $p161, $i162, $i164, $i165, $p166, $i167, $i169, $i170, $p171, $i172, $i174, $i175, $p176, $i177, $i178, $i179, $i180, $i181, $p182, $i184, $i185, $p186, $i187, $i189, $i190, $p191, $i192, $i194, $i195, $p196, $i197, $i199, $i200, $p201, $i203, $i204, $p205, $i207, $i208, $p209, $i211, $i212, $p213, $i215, $i216, $p217, $i219, $i220, $p221, $i223, $i224, $i225, $i226, $i227, $i228, $i229, $i230, $i231, $i233, $i234, $i235, $i236, $i237, $i238, $i239, $i240, $i241, $i242, $i243, $i244, $i245, $p246, $i247, $i248, $i249, $i250, $i251, $i252, $i253, $p254, $i255, $i256, $i257, $p258, $i259, $i260, $i261, $p262, $i263, $i264, $i265, $p266, $i268, $i269, $i270, $i271, $p272, $i274, $i275, $i276, $i277, $p278, $i279, $i280, $i281, $i282, $i283, $i285, $i286, $i287, $i288, $i289, $i290, $i291, $i292, $i293, $i294, $p295, $p296, $i297, $i299, $i300, $p301, $p302, $i304, $i305, $i306, $i307, $i308, $i309, $i310, $i311, $i312, $i313, $i314, $i315, $i316, $i317, $i318, $i319, $i320, $i321, $i322, $i323, $i324, $i325, $i326, $i327, $i328, $p329, $p330, $i331, $i333, $i334, $p335, $p336, vslice_dummy_var_50, vslice_dummy_var_51, vslice_dummy_var_52, vslice_dummy_var_53, vslice_dummy_var_54, vslice_dummy_var_55, vslice_dummy_var_56, vslice_dummy_var_57, vslice_dummy_var_58, vslice_dummy_var_59, vslice_dummy_var_60, vslice_dummy_var_61, vslice_dummy_var_62, vslice_dummy_var_63, vslice_dummy_var_64, vslice_dummy_var_65, vslice_dummy_var_66, vslice_dummy_var_67, vslice_dummy_var_68, vslice_dummy_var_69, vslice_dummy_var_70, vslice_dummy_var_71, vslice_dummy_var_72, vslice_dummy_var_73, vslice_dummy_var_74, vslice_dummy_var_75, vslice_dummy_var_76, vslice_dummy_var_77, vslice_dummy_var_78, vslice_dummy_var_79, vslice_dummy_var_80, vslice_dummy_var_81, vslice_dummy_var_82);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i52 := $slt.i32($i51, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    $i53 := $slt.i32($i51, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    $i54 := $slt.i32($i51, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i51, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i55 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb314;

  $bb314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2672} ldv_stop();
    goto corral_source_split_11182;

  corral_source_split_11182:
    assume {:verifier.code 0} true;
    goto $bb315;

  $bb315:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb52_dummy;

  $bb9:
    assume $i55 == 1;
    goto corral_source_split_10641;

  corral_source_split_10641:
    assume {:verifier.code 0} true;
    $i321 := $M.60;
    goto corral_source_split_10642;

  corral_source_split_10642:
    assume {:verifier.code 0} true;
    $i322 := $ne.i32($i321, 0);
    goto corral_source_split_10643;

  corral_source_split_10643:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb294, $bb295;

  $bb295:
    assume !($i322 == 1);
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb313:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb294:
    assume $i322 == 1;
    goto corral_source_split_11157;

  corral_source_split_11157:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2664} $i323 := __VERIFIER_nondet_int();
    call {:si_unique_call 2665} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i323);
    call {:si_unique_call 2666} {:cexpr "tmp___22"} boogie_si_record_i32($i323);
    assume {:verifier.code 0} true;
    goto $bb296;

  $bb296:
    assume {:verifier.code 0} true;
    $i324 := $slt.i32($i323, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb297, $bb298;

  $bb298:
    assume !($i324 == 1);
    assume {:verifier.code 0} true;
    $i325 := $eq.i32($i323, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb299, $bb300;

  $bb300:
    assume {:verifier.code 0} true;
    assume !($i325 == 1);
    goto $bb301;

  $bb301:
    assume {:verifier.code 0} true;
    goto $bb311;

  $bb311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2671} ldv_stop();
    goto corral_source_split_11180;

  corral_source_split_11180:
    assume {:verifier.code 0} true;
    goto $bb312;

  $bb312:
    assume {:verifier.code 0} true;
    goto $bb307;

  $bb307:
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb299:
    assume $i325 == 1;
    goto corral_source_split_11159;

  corral_source_split_11159:
    assume {:verifier.code 0} true;
    $i333 := $M.60;
    goto corral_source_split_11160;

  corral_source_split_11160:
    assume {:verifier.code 0} true;
    $i334 := $eq.i32($i333, 1);
    goto corral_source_split_11161;

  corral_source_split_11161:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb308, $bb309;

  $bb309:
    assume !($i334 == 1);
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb310:
    assume {:verifier.code 0} true;
    goto $bb307;

  $bb308:
    assume $i334 == 1;
    goto corral_source_split_11174;

  corral_source_split_11174:
    assume {:verifier.code 0} true;
    $p335 := $M.47;
    goto corral_source_split_11175;

  corral_source_split_11175:
    assume {:verifier.code 0} true;
    $p336 := $M.46;
    goto corral_source_split_11176;

  corral_source_split_11176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2669} vslice_dummy_var_82 := show_rxbuf($p335, $p336, $p32);
    goto corral_source_split_11177;

  corral_source_split_11177:
    assume {:verifier.code 0} true;
    $M.60 := 1;
    call {:si_unique_call 2670} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_11178;

  corral_source_split_11178:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb297:
    assume $i324 == 1;
    assume {:verifier.code 0} true;
    $i326 := $eq.i32($i323, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb302, $bb303;

  $bb303:
    assume {:verifier.code 0} true;
    assume !($i326 == 1);
    goto $bb301;

  $bb302:
    assume $i326 == 1;
    goto corral_source_split_11163;

  corral_source_split_11163:
    assume {:verifier.code 0} true;
    $i327 := $M.60;
    goto corral_source_split_11164;

  corral_source_split_11164:
    assume {:verifier.code 0} true;
    $i328 := $eq.i32($i327, 1);
    goto corral_source_split_11165;

  corral_source_split_11165:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb304, $bb305;

  $bb305:
    assume !($i328 == 1);
    assume {:verifier.code 0} true;
    goto $bb306;

  $bb306:
    assume {:verifier.code 0} true;
    goto $bb307;

  $bb304:
    assume $i328 == 1;
    goto corral_source_split_11167;

  corral_source_split_11167:
    assume {:verifier.code 0} true;
    $p329 := $M.47;
    goto corral_source_split_11168;

  corral_source_split_11168:
    assume {:verifier.code 0} true;
    $p330 := $M.46;
    goto corral_source_split_11169;

  corral_source_split_11169:
    assume {:verifier.code 0} true;
    $i331 := $load.i64($M.0, $p8);
    goto corral_source_split_11170;

  corral_source_split_11170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2667} vslice_dummy_var_81 := store_rxbuf($p329, $p330, $p31, $i331);
    goto corral_source_split_11171;

  corral_source_split_11171:
    assume {:verifier.code 0} true;
    $M.60 := 1;
    call {:si_unique_call 2668} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_11172;

  corral_source_split_11172:
    assume {:verifier.code 0} true;
    goto $bb306;

  $bb7:
    assume $i54 == 1;
    goto corral_source_split_10637;

  corral_source_split_10637:
    assume {:verifier.code 0} true;
    $i304 := $M.59;
    goto corral_source_split_10638;

  corral_source_split_10638:
    assume {:verifier.code 0} true;
    $i305 := $ne.i32($i304, 0);
    goto corral_source_split_10639;

  corral_source_split_10639:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb264, $bb265;

  $bb265:
    assume !($i305 == 1);
    assume {:verifier.code 0} true;
    goto $bb293;

  $bb293:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb264:
    assume $i305 == 1;
    goto corral_source_split_11111;

  corral_source_split_11111:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2644} $i306 := __VERIFIER_nondet_int();
    call {:si_unique_call 2645} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i306);
    call {:si_unique_call 2646} {:cexpr "tmp___21"} boogie_si_record_i32($i306);
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb266:
    assume {:verifier.code 0} true;
    $i307 := $slt.i32($i306, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb267, $bb268;

  $bb268:
    assume !($i307 == 1);
    assume {:verifier.code 0} true;
    $i308 := $eq.i32($i306, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb269, $bb270;

  $bb270:
    assume {:verifier.code 0} true;
    assume !($i308 == 1);
    goto $bb271;

  $bb271:
    assume {:verifier.code 0} true;
    goto $bb291;

  $bb291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2663} ldv_stop();
    goto corral_source_split_11155;

  corral_source_split_11155:
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb292:
    assume {:verifier.code 0} true;
    goto $bb281;

  $bb281:
    assume {:verifier.code 0} true;
    goto $bb293;

  $bb269:
    assume $i308 == 1;
    goto corral_source_split_11113;

  corral_source_split_11113:
    assume {:verifier.code 0} true;
    $i314 := $M.59;
    goto corral_source_split_11114;

  corral_source_split_11114:
    assume {:verifier.code 0} true;
    $i315 := $eq.i32($i314, 1);
    goto corral_source_split_11115;

  corral_source_split_11115:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb282, $bb283;

  $bb283:
    assume !($i315 == 1);
    assume {:verifier.code 0} true;
    goto $bb290;

  $bb290:
    assume {:verifier.code 0} true;
    goto $bb281;

  $bb282:
    assume $i315 == 1;
    goto corral_source_split_11131;

  corral_source_split_11131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2650} $i316 := netif_init();
    goto corral_source_split_11132;

  corral_source_split_11132:
    assume {:verifier.code 0} true;
    $M.65 := $i316;
    call {:si_unique_call 2651} {:cexpr "ldv_retval_4"} boogie_si_record_i32($i316);
    goto corral_source_split_11133;

  corral_source_split_11133:
    assume {:verifier.code 0} true;
    $i317 := $M.65;
    goto corral_source_split_11134;

  corral_source_split_11134:
    assume {:verifier.code 0} true;
    $i318 := $eq.i32($i317, 0);
    goto corral_source_split_11135;

  corral_source_split_11135:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb284, $bb285;

  $bb285:
    assume !($i318 == 1);
    assume {:verifier.code 0} true;
    goto $bb286;

  $bb286:
    assume {:verifier.code 0} true;
    $i319 := $M.65;
    goto corral_source_split_11149;

  corral_source_split_11149:
    assume {:verifier.code 0} true;
    $i320 := $ne.i32($i319, 0);
    goto corral_source_split_11150;

  corral_source_split_11150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb287, $bb288;

  $bb288:
    assume !($i320 == 1);
    assume {:verifier.code 0} true;
    goto $bb289;

  $bb289:
    assume {:verifier.code 0} true;
    goto $bb290;

  $bb287:
    assume $i320 == 1;
    goto corral_source_split_11152;

  corral_source_split_11152:
    assume {:verifier.code 0} true;
    $M.59 := 2;
    call {:si_unique_call 2662} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_11153;

  corral_source_split_11153:
    assume {:verifier.code 0} true;
    goto $bb279;

  $bb279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2649} ldv_check_final_state();
    goto corral_source_split_11129;

  corral_source_split_11129:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb284:
    assume $i318 == 1;
    goto corral_source_split_11137;

  corral_source_split_11137:
    assume {:verifier.code 0} true;
    $M.59 := 3;
    call {:si_unique_call 2652} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_11138;

  corral_source_split_11138:
    assume {:verifier.code 0} true;
    $M.60 := 1;
    call {:si_unique_call 2653} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_11139;

  corral_source_split_11139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2654} ldv_initialize_device_attribute_5();
    goto corral_source_split_11140;

  corral_source_split_11140:
    assume {:verifier.code 0} true;
    $M.55 := 1;
    call {:si_unique_call 2655} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_11141;

  corral_source_split_11141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2656} ldv_initialize_xenbus_driver_2();
    goto corral_source_split_11142;

  corral_source_split_11142:
    assume {:verifier.code 0} true;
    $M.54 := 1;
    call {:si_unique_call 2657} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_11143;

  corral_source_split_11143:
    assume {:verifier.code 0} true;
    $M.57 := 1;
    call {:si_unique_call 2658} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_11144;

  corral_source_split_11144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2659} ldv_initialize_device_attribute_4();
    goto corral_source_split_11145;

  corral_source_split_11145:
    assume {:verifier.code 0} true;
    $M.53 := 1;
    call {:si_unique_call 2660} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_11146;

  corral_source_split_11146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2661} ldv_initialize_ethtool_ops_6();
    goto corral_source_split_11147;

  corral_source_split_11147:
    assume {:verifier.code 0} true;
    goto $bb286;

  $bb267:
    assume $i307 == 1;
    assume {:verifier.code 0} true;
    $i309 := $eq.i32($i306, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb272, $bb273;

  $bb273:
    assume {:verifier.code 0} true;
    assume !($i309 == 1);
    goto $bb271;

  $bb272:
    assume $i309 == 1;
    goto corral_source_split_11117;

  corral_source_split_11117:
    assume {:verifier.code 0} true;
    $i310 := $M.59;
    goto corral_source_split_11118;

  corral_source_split_11118:
    assume {:verifier.code 0} true;
    $i311 := $eq.i32($i310, 3);
    goto corral_source_split_11119;

  corral_source_split_11119:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb274, $bb275;

  $bb275:
    assume {:verifier.code 0} true;
    assume !($i311 == 1);
    goto $bb276;

  $bb276:
    assume {:verifier.code 0} true;
    goto $bb280;

  $bb280:
    assume {:verifier.code 0} true;
    goto $bb281;

  $bb274:
    assume $i311 == 1;
    goto corral_source_split_11121;

  corral_source_split_11121:
    assume {:verifier.code 0} true;
    $i312 := $M.58;
    goto corral_source_split_11122;

  corral_source_split_11122:
    assume {:verifier.code 0} true;
    $i313 := $eq.i32($i312, 0);
    goto corral_source_split_11123;

  corral_source_split_11123:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb277, $bb278;

  $bb278:
    assume {:verifier.code 0} true;
    assume !($i313 == 1);
    goto $bb276;

  $bb277:
    assume $i313 == 1;
    goto corral_source_split_11125;

  corral_source_split_11125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2647} netif_exit();
    goto corral_source_split_11126;

  corral_source_split_11126:
    assume {:verifier.code 0} true;
    $M.59 := 2;
    call {:si_unique_call 2648} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_11127;

  corral_source_split_11127:
    assume {:verifier.code 0} true;
    goto $bb279;

  $bb5:
    assume $i53 == 1;
    assume {:verifier.code 0} true;
    $i56 := $slt.i32($i51, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i56 == 1);
    goto corral_source_split_10649;

  corral_source_split_10649:
    assume {:verifier.code 0} true;
    $i287 := $M.57;
    goto corral_source_split_10650;

  corral_source_split_10650:
    assume {:verifier.code 0} true;
    $i288 := $ne.i32($i287, 0);
    goto corral_source_split_10651;

  corral_source_split_10651:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb244, $bb245;

  $bb245:
    assume !($i288 == 1);
    assume {:verifier.code 0} true;
    goto $bb263;

  $bb263:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb244:
    assume $i288 == 1;
    goto corral_source_split_11086;

  corral_source_split_11086:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2636} $i289 := __VERIFIER_nondet_int();
    call {:si_unique_call 2637} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i289);
    call {:si_unique_call 2638} {:cexpr "tmp___20"} boogie_si_record_i32($i289);
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb246:
    assume {:verifier.code 0} true;
    $i290 := $slt.i32($i289, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb247, $bb248;

  $bb248:
    assume !($i290 == 1);
    assume {:verifier.code 0} true;
    $i291 := $eq.i32($i289, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb249, $bb250;

  $bb250:
    assume {:verifier.code 0} true;
    assume !($i291 == 1);
    goto $bb251;

  $bb251:
    assume {:verifier.code 0} true;
    goto $bb261;

  $bb261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2643} ldv_stop();
    goto corral_source_split_11109;

  corral_source_split_11109:
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb262:
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb257:
    assume {:verifier.code 0} true;
    goto $bb263;

  $bb249:
    assume $i291 == 1;
    goto corral_source_split_11088;

  corral_source_split_11088:
    assume {:verifier.code 0} true;
    $i299 := $M.57;
    goto corral_source_split_11089;

  corral_source_split_11089:
    assume {:verifier.code 0} true;
    $i300 := $eq.i32($i299, 1);
    goto corral_source_split_11090;

  corral_source_split_11090:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb258, $bb259;

  $bb259:
    assume !($i300 == 1);
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb260:
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb258:
    assume $i300 == 1;
    goto corral_source_split_11103;

  corral_source_split_11103:
    assume {:verifier.code 0} true;
    $p301 := $M.52;
    goto corral_source_split_11104;

  corral_source_split_11104:
    assume {:verifier.code 0} true;
    $p302 := $M.51;
    goto corral_source_split_11105;

  corral_source_split_11105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2641} vslice_dummy_var_80 := show_rxbuf($p301, $p302, $p30);
    goto corral_source_split_11106;

  corral_source_split_11106:
    assume {:verifier.code 0} true;
    $M.57 := 1;
    call {:si_unique_call 2642} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_11107;

  corral_source_split_11107:
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb247:
    assume $i290 == 1;
    assume {:verifier.code 0} true;
    $i292 := $eq.i32($i289, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb252, $bb253;

  $bb253:
    assume {:verifier.code 0} true;
    assume !($i292 == 1);
    goto $bb251;

  $bb252:
    assume $i292 == 1;
    goto corral_source_split_11092;

  corral_source_split_11092:
    assume {:verifier.code 0} true;
    $i293 := $M.57;
    goto corral_source_split_11093;

  corral_source_split_11093:
    assume {:verifier.code 0} true;
    $i294 := $eq.i32($i293, 1);
    goto corral_source_split_11094;

  corral_source_split_11094:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb254, $bb255;

  $bb255:
    assume !($i294 == 1);
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb256:
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb254:
    assume $i294 == 1;
    goto corral_source_split_11096;

  corral_source_split_11096:
    assume {:verifier.code 0} true;
    $p295 := $M.52;
    goto corral_source_split_11097;

  corral_source_split_11097:
    assume {:verifier.code 0} true;
    $p296 := $M.51;
    goto corral_source_split_11098;

  corral_source_split_11098:
    assume {:verifier.code 0} true;
    $i297 := $load.i64($M.0, $p7);
    goto corral_source_split_11099;

  corral_source_split_11099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2639} vslice_dummy_var_79 := store_rxbuf($p295, $p296, $p29, $i297);
    goto corral_source_split_11100;

  corral_source_split_11100:
    assume {:verifier.code 0} true;
    $M.57 := 1;
    call {:si_unique_call 2640} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_11101;

  corral_source_split_11101:
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb12:
    assume $i56 == 1;
    goto corral_source_split_10645;

  corral_source_split_10645:
    assume {:verifier.code 0} true;
    $i285 := $M.56;
    goto corral_source_split_10646;

  corral_source_split_10646:
    assume {:verifier.code 0} true;
    $i286 := $ne.i32($i285, 0);
    goto corral_source_split_10647;

  corral_source_split_10647:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb241, $bb242;

  $bb242:
    assume !($i286 == 1);
    assume {:verifier.code 0} true;
    goto $bb243;

  $bb243:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb241:
    assume $i286 == 1;
    goto corral_source_split_11083;

  corral_source_split_11083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2635} choose_timer_1();
    goto corral_source_split_11084;

  corral_source_split_11084:
    assume {:verifier.code 0} true;
    goto $bb243;

  $bb3:
    assume $i52 == 1;
    assume {:verifier.code 0} true;
    $i57 := $slt.i32($i51, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    $i58 := $slt.i32($i51, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i58 == 1);
    goto corral_source_split_10657;

  corral_source_split_10657:
    assume {:verifier.code 0} true;
    $i235 := $M.55;
    goto corral_source_split_10658;

  corral_source_split_10658:
    assume {:verifier.code 0} true;
    $i236 := $ne.i32($i235, 0);
    goto corral_source_split_10659;

  corral_source_split_10659:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb191, $bb192;

  $bb192:
    assume !($i236 == 1);
    assume {:verifier.code 0} true;
    goto $bb240;

  $bb240:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb191:
    assume $i236 == 1;
    goto corral_source_split_10989;

  corral_source_split_10989:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2610} $i237 := __VERIFIER_nondet_int();
    call {:si_unique_call 2611} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i237);
    call {:si_unique_call 2612} {:cexpr "tmp___19"} boogie_si_record_i32($i237);
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    $i238 := $slt.i32($i237, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb194, $bb195;

  $bb195:
    assume !($i238 == 1);
    assume {:verifier.code 0} true;
    $i239 := $slt.i32($i237, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb196, $bb197;

  $bb197:
    assume !($i239 == 1);
    assume {:verifier.code 0} true;
    $i240 := $slt.i32($i237, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb198, $bb199;

  $bb199:
    assume !($i240 == 1);
    assume {:verifier.code 0} true;
    $i241 := $eq.i32($i237, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb200, $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    assume !($i241 == 1);
    goto $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2634} ldv_stop();
    goto corral_source_split_11081;

  corral_source_split_11081:
    assume {:verifier.code 0} true;
    goto $bb239;

  $bb239:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb213:
    assume {:verifier.code 0} true;
    goto $bb240;

  $bb200:
    assume $i241 == 1;
    goto corral_source_split_10999;

  corral_source_split_10999:
    assume {:verifier.code 0} true;
    $i282 := $M.55;
    goto corral_source_split_11000;

  corral_source_split_11000:
    assume {:verifier.code 0} true;
    $i283 := $eq.i32($i282, 2);
    goto corral_source_split_11001;

  corral_source_split_11001:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb235, $bb236;

  $bb236:
    assume !($i283 == 1);
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb237:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb235:
    assume $i283 == 1;
    goto corral_source_split_11077;

  corral_source_split_11077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2632} vslice_dummy_var_78 := ldv_suspend_2();
    goto corral_source_split_11078;

  corral_source_split_11078:
    assume {:verifier.code 0} true;
    $M.55 := 3;
    call {:si_unique_call 2633} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_11079;

  corral_source_split_11079:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb198:
    assume $i240 == 1;
    goto corral_source_split_10995;

  corral_source_split_10995:
    assume {:verifier.code 0} true;
    $i276 := $M.55;
    goto corral_source_split_10996;

  corral_source_split_10996:
    assume {:verifier.code 0} true;
    $i277 := $eq.i32($i276, 3);
    goto corral_source_split_10997;

  corral_source_split_10997:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb229, $bb230;

  $bb230:
    assume !($i277 == 1);
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb234:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb229:
    assume $i277 == 1;
    goto corral_source_split_11067;

  corral_source_split_11067:
    assume {:verifier.code 0} true;
    $p278 := $M.50;
    goto corral_source_split_11068;

  corral_source_split_11068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2629} $i279 := netfront_resume($p278);
    goto corral_source_split_11069;

  corral_source_split_11069:
    assume {:verifier.code 0} true;
    $M.64 := $i279;
    call {:si_unique_call 2630} {:cexpr "ldv_retval_2"} boogie_si_record_i32($i279);
    goto corral_source_split_11070;

  corral_source_split_11070:
    assume {:verifier.code 0} true;
    $i280 := $M.64;
    goto corral_source_split_11071;

  corral_source_split_11071:
    assume {:verifier.code 0} true;
    $i281 := $eq.i32($i280, 0);
    goto corral_source_split_11072;

  corral_source_split_11072:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb231, $bb232;

  $bb232:
    assume !($i281 == 1);
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb233:
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb231:
    assume $i281 == 1;
    goto corral_source_split_11074;

  corral_source_split_11074:
    assume {:verifier.code 0} true;
    $M.55 := 2;
    call {:si_unique_call 2631} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_11075;

  corral_source_split_11075:
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb196:
    assume $i239 == 1;
    goto corral_source_split_10991;

  corral_source_split_10991:
    assume {:verifier.code 0} true;
    $i264 := $M.55;
    goto corral_source_split_10992;

  corral_source_split_10992:
    assume {:verifier.code 0} true;
    $i265 := $eq.i32($i264, 3);
    goto corral_source_split_10993;

  corral_source_split_10993:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb223, $bb224;

  $bb224:
    assume !($i265 == 1);
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb225:
    assume {:verifier.code 0} true;
    $i270 := $M.55;
    goto corral_source_split_11056;

  corral_source_split_11056:
    assume {:verifier.code 0} true;
    $i271 := $eq.i32($i270, 2);
    goto corral_source_split_11057;

  corral_source_split_11057:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb226, $bb227;

  $bb227:
    assume !($i271 == 1);
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb226:
    assume $i271 == 1;
    goto corral_source_split_11059;

  corral_source_split_11059:
    assume {:verifier.code 0} true;
    $p272 := $M.50;
    goto corral_source_split_11060;

  corral_source_split_11060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2626} vslice_dummy_var_77 := xennet_remove($p272);
    goto corral_source_split_11061;

  corral_source_split_11061:
    assume {:verifier.code 0} true;
    $M.55 := 1;
    call {:si_unique_call 2627} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_11062;

  corral_source_split_11062:
    assume {:verifier.code 0} true;
    $i274 := $M.58;
    goto corral_source_split_11063;

  corral_source_split_11063:
    assume {:verifier.code 0} true;
    $i275 := $sub.i32($i274, 1);
    goto corral_source_split_11064;

  corral_source_split_11064:
    assume {:verifier.code 0} true;
    $M.58 := $i275;
    call {:si_unique_call 2628} {:cexpr "ref_cnt"} boogie_si_record_i32($i275);
    goto corral_source_split_11065;

  corral_source_split_11065:
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb223:
    assume $i265 == 1;
    goto corral_source_split_11048;

  corral_source_split_11048:
    assume {:verifier.code 0} true;
    $p266 := $M.50;
    goto corral_source_split_11049;

  corral_source_split_11049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2623} vslice_dummy_var_76 := xennet_remove($p266);
    goto corral_source_split_11050;

  corral_source_split_11050:
    assume {:verifier.code 0} true;
    $M.55 := 1;
    call {:si_unique_call 2624} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_11051;

  corral_source_split_11051:
    assume {:verifier.code 0} true;
    $i268 := $M.58;
    goto corral_source_split_11052;

  corral_source_split_11052:
    assume {:verifier.code 0} true;
    $i269 := $sub.i32($i268, 1);
    goto corral_source_split_11053;

  corral_source_split_11053:
    assume {:verifier.code 0} true;
    $M.58 := $i269;
    call {:si_unique_call 2625} {:cexpr "ref_cnt"} boogie_si_record_i32($i269);
    goto corral_source_split_11054;

  corral_source_split_11054:
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb194:
    assume $i238 == 1;
    assume {:verifier.code 0} true;
    $i242 := $slt.i32($i237, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb203, $bb204;

  $bb204:
    assume !($i242 == 1);
    goto corral_source_split_11003;

  corral_source_split_11003:
    assume {:verifier.code 0} true;
    $i252 := $M.55;
    goto corral_source_split_11004;

  corral_source_split_11004:
    assume {:verifier.code 0} true;
    $i253 := $eq.i32($i252, 1);
    goto corral_source_split_11005;

  corral_source_split_11005:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb214, $bb215;

  $bb215:
    assume !($i253 == 1);
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    $i256 := $M.55;
    goto corral_source_split_11030;

  corral_source_split_11030:
    assume {:verifier.code 0} true;
    $i257 := $eq.i32($i256, 3);
    goto corral_source_split_11031;

  corral_source_split_11031:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb217, $bb218;

  $bb218:
    assume !($i257 == 1);
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    $i260 := $M.55;
    goto corral_source_split_11039;

  corral_source_split_11039:
    assume {:verifier.code 0} true;
    $i261 := $eq.i32($i260, 2);
    goto corral_source_split_11040;

  corral_source_split_11040:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb220, $bb221;

  $bb221:
    assume !($i261 == 1);
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb220:
    assume $i261 == 1;
    goto corral_source_split_11042;

  corral_source_split_11042:
    assume {:verifier.code 0} true;
    $p262 := $M.50;
    goto corral_source_split_11043;

  corral_source_split_11043:
    assume {:verifier.code 0} true;
    $i263 := $load.i32($M.0, $p6);
    goto corral_source_split_11044;

  corral_source_split_11044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2621} netback_changed($p262, $i263);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    goto corral_source_split_11045;

  corral_source_split_11045:
    assume {:verifier.code 0} true;
    $M.55 := 2;
    call {:si_unique_call 2622} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_11046;

  corral_source_split_11046:
    assume {:verifier.code 0} true;
    goto $bb222;

  SeqInstr_64:
    assume !assertsPassed;
    return;

  $bb217:
    assume $i257 == 1;
    goto corral_source_split_11033;

  corral_source_split_11033:
    assume {:verifier.code 0} true;
    $p258 := $M.50;
    goto corral_source_split_11034;

  corral_source_split_11034:
    assume {:verifier.code 0} true;
    $i259 := $load.i32($M.0, $p6);
    goto corral_source_split_11035;

  corral_source_split_11035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2619} netback_changed($p258, $i259);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    goto corral_source_split_11036;

  corral_source_split_11036:
    assume {:verifier.code 0} true;
    $M.55 := 3;
    call {:si_unique_call 2620} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_11037;

  corral_source_split_11037:
    assume {:verifier.code 0} true;
    goto $bb219;

  SeqInstr_61:
    assume !assertsPassed;
    return;

  $bb214:
    assume $i253 == 1;
    goto corral_source_split_11024;

  corral_source_split_11024:
    assume {:verifier.code 0} true;
    $p254 := $M.50;
    goto corral_source_split_11025;

  corral_source_split_11025:
    assume {:verifier.code 0} true;
    $i255 := $load.i32($M.0, $p6);
    goto corral_source_split_11026;

  corral_source_split_11026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2617} netback_changed($p254, $i255);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    goto corral_source_split_11027;

  corral_source_split_11027:
    assume {:verifier.code 0} true;
    $M.55 := 1;
    call {:si_unique_call 2618} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_11028;

  corral_source_split_11028:
    assume {:verifier.code 0} true;
    goto $bb216;

  SeqInstr_58:
    assume !assertsPassed;
    return;

  $bb203:
    assume $i242 == 1;
    assume {:verifier.code 0} true;
    $i243 := $eq.i32($i237, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb205, $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    assume !($i243 == 1);
    goto $bb202;

  $bb205:
    assume $i243 == 1;
    goto corral_source_split_11007;

  corral_source_split_11007:
    assume {:verifier.code 0} true;
    $i244 := $M.55;
    goto corral_source_split_11008;

  corral_source_split_11008:
    assume {:verifier.code 0} true;
    $i245 := $eq.i32($i244, 1);
    goto corral_source_split_11009;

  corral_source_split_11009:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb207, $bb208;

  $bb208:
    assume !($i245 == 1);
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb212:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb207:
    assume $i245 == 1;
    goto corral_source_split_11011;

  corral_source_split_11011:
    assume {:verifier.code 0} true;
    $p246 := $M.50;
    goto corral_source_split_11012;

  corral_source_split_11012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2613} $i247 := netfront_probe($p246, $p28);
    goto corral_source_split_11013;

  corral_source_split_11013:
    assume {:verifier.code 0} true;
    $M.63 := $i247;
    call {:si_unique_call 2614} {:cexpr "ldv_retval_3"} boogie_si_record_i32($i247);
    goto corral_source_split_11014;

  corral_source_split_11014:
    assume {:verifier.code 0} true;
    $i248 := $M.63;
    goto corral_source_split_11015;

  corral_source_split_11015:
    assume {:verifier.code 0} true;
    $i249 := $eq.i32($i248, 0);
    goto corral_source_split_11016;

  corral_source_split_11016:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb209, $bb210;

  $bb210:
    assume !($i249 == 1);
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb211:
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb209:
    assume $i249 == 1;
    goto corral_source_split_11018;

  corral_source_split_11018:
    assume {:verifier.code 0} true;
    $M.55 := 2;
    call {:si_unique_call 2615} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_11019;

  corral_source_split_11019:
    assume {:verifier.code 0} true;
    $i250 := $M.58;
    goto corral_source_split_11020;

  corral_source_split_11020:
    assume {:verifier.code 0} true;
    $i251 := $add.i32($i250, 1);
    goto corral_source_split_11021;

  corral_source_split_11021:
    assume {:verifier.code 0} true;
    $M.58 := $i251;
    call {:si_unique_call 2616} {:cexpr "ref_cnt"} boogie_si_record_i32($i251);
    goto corral_source_split_11022;

  corral_source_split_11022:
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb16:
    assume $i58 == 1;
    goto corral_source_split_10653;

  corral_source_split_10653:
    assume {:verifier.code 0} true;
    $i92 := $M.30;
    goto corral_source_split_10654;

  corral_source_split_10654:
    assume {:verifier.code 0} true;
    $i93 := $ne.i32($i92, 0);
    goto corral_source_split_10655;

  corral_source_split_10655:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb65:
    assume $i93 == 1;
    goto corral_source_split_10723;

  corral_source_split_10723:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2546} $i94 := __VERIFIER_nondet_int();
    call {:si_unique_call 2547} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i94);
    call {:si_unique_call 2548} {:cexpr "tmp___18"} boogie_si_record_i32($i94);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $i95 := $slt.i32($i94, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    $i96 := $slt.i32($i94, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    $i97 := $slt.i32($i94, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    $i98 := $slt.i32($i94, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    $i99 := $eq.i32($i94, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    assume !($i99 == 1);
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2609} ldv_stop();
    goto corral_source_split_10987;

  corral_source_split_10987:
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb76:
    assume $i99 == 1;
    goto corral_source_split_10729;

  corral_source_split_10729:
    assume {:verifier.code 0} true;
    $i230 := $M.30;
    goto corral_source_split_10730;

  corral_source_split_10730:
    assume {:verifier.code 0} true;
    $i231 := $eq.i32($i230, 2);
    goto corral_source_split_10731;

  corral_source_split_10731:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb185, $bb186;

  $bb186:
    assume !($i231 == 1);
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb185:
    assume $i231 == 1;
    goto corral_source_split_10980;

  corral_source_split_10980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2606} vslice_dummy_var_75 := ldv_ndo_uninit_7();
    goto corral_source_split_10981;

  corral_source_split_10981:
    assume {:verifier.code 0} true;
    $M.30 := 1;
    call {:si_unique_call 2607} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_10982;

  corral_source_split_10982:
    assume {:verifier.code 0} true;
    $i233 := $M.58;
    goto corral_source_split_10983;

  corral_source_split_10983:
    assume {:verifier.code 0} true;
    $i234 := $sub.i32($i233, 1);
    goto corral_source_split_10984;

  corral_source_split_10984:
    assume {:verifier.code 0} true;
    $M.58 := $i234;
    call {:si_unique_call 2608} {:cexpr "ref_cnt"} boogie_si_record_i32($i234);
    goto corral_source_split_10985;

  corral_source_split_10985:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb74:
    assume $i98 == 1;
    goto corral_source_split_10725;

  corral_source_split_10725:
    assume {:verifier.code 0} true;
    $i223 := $M.30;
    goto corral_source_split_10726;

  corral_source_split_10726:
    assume {:verifier.code 0} true;
    $i224 := $eq.i32($i223, 1);
    goto corral_source_split_10727;

  corral_source_split_10727:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb179, $bb180;

  $bb180:
    assume !($i224 == 1);
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb179:
    assume $i224 == 1;
    goto corral_source_split_10968;

  corral_source_split_10968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2602} $i225 := ldv_ndo_init_7();
    goto corral_source_split_10969;

  corral_source_split_10969:
    assume {:verifier.code 0} true;
    $M.62 := $i225;
    call {:si_unique_call 2603} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i225);
    goto corral_source_split_10970;

  corral_source_split_10970:
    assume {:verifier.code 0} true;
    $i226 := $M.62;
    goto corral_source_split_10971;

  corral_source_split_10971:
    assume {:verifier.code 0} true;
    $i227 := $eq.i32($i226, 0);
    goto corral_source_split_10972;

  corral_source_split_10972:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb181, $bb182;

  $bb182:
    assume !($i227 == 1);
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb181:
    assume $i227 == 1;
    goto corral_source_split_10974;

  corral_source_split_10974:
    assume {:verifier.code 0} true;
    $M.30 := 2;
    call {:si_unique_call 2604} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_10975;

  corral_source_split_10975:
    assume {:verifier.code 0} true;
    $i228 := $M.58;
    goto corral_source_split_10976;

  corral_source_split_10976:
    assume {:verifier.code 0} true;
    $i229 := $add.i32($i228, 1);
    goto corral_source_split_10977;

  corral_source_split_10977:
    assume {:verifier.code 0} true;
    $M.58 := $i229;
    call {:si_unique_call 2605} {:cexpr "ref_cnt"} boogie_si_record_i32($i229);
    goto corral_source_split_10978;

  corral_source_split_10978:
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb72:
    assume $i97 == 1;
    assume {:verifier.code 0} true;
    $i100 := $slt.i32($i94, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i100 == 1);
    goto corral_source_split_10737;

  corral_source_split_10737:
    assume {:verifier.code 0} true;
    $i211 := $M.30;
    goto corral_source_split_10738;

  corral_source_split_10738:
    assume {:verifier.code 0} true;
    $i212 := $eq.i32($i211, 1);
    goto corral_source_split_10739;

  corral_source_split_10739:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb170, $bb171;

  $bb171:
    assume !($i212 == 1);
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    $i215 := $M.30;
    goto corral_source_split_10952;

  corral_source_split_10952:
    assume {:verifier.code 0} true;
    $i216 := $eq.i32($i215, 3);
    goto corral_source_split_10953;

  corral_source_split_10953:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb173, $bb174;

  $bb174:
    assume !($i216 == 1);
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    $i219 := $M.30;
    goto corral_source_split_10960;

  corral_source_split_10960:
    assume {:verifier.code 0} true;
    $i220 := $eq.i32($i219, 2);
    goto corral_source_split_10961;

  corral_source_split_10961:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb176, $bb177;

  $bb177:
    assume !($i220 == 1);
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb176:
    assume $i220 == 1;
    goto corral_source_split_10963;

  corral_source_split_10963:
    assume {:verifier.code 0} true;
    $p221 := $M.45;
    goto corral_source_split_10964;

  corral_source_split_10964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2600} vslice_dummy_var_74 := xennet_get_stats64($p221, $p25);
    goto corral_source_split_10965;

  corral_source_split_10965:
    assume {:verifier.code 0} true;
    $M.30 := 2;
    call {:si_unique_call 2601} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_10966;

  corral_source_split_10966:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb173:
    assume $i216 == 1;
    goto corral_source_split_10955;

  corral_source_split_10955:
    assume {:verifier.code 0} true;
    $p217 := $M.45;
    goto corral_source_split_10956;

  corral_source_split_10956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2598} vslice_dummy_var_73 := xennet_get_stats64($p217, $p25);
    goto corral_source_split_10957;

  corral_source_split_10957:
    assume {:verifier.code 0} true;
    $M.30 := 3;
    call {:si_unique_call 2599} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_10958;

  corral_source_split_10958:
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb170:
    assume $i212 == 1;
    goto corral_source_split_10947;

  corral_source_split_10947:
    assume {:verifier.code 0} true;
    $p213 := $M.45;
    goto corral_source_split_10948;

  corral_source_split_10948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2596} vslice_dummy_var_72 := xennet_get_stats64($p213, $p25);
    goto corral_source_split_10949;

  corral_source_split_10949:
    assume {:verifier.code 0} true;
    $M.30 := 1;
    call {:si_unique_call 2597} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_10950;

  corral_source_split_10950:
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb79:
    assume $i100 == 1;
    goto corral_source_split_10733;

  corral_source_split_10733:
    assume {:verifier.code 0} true;
    $i199 := $M.30;
    goto corral_source_split_10734;

  corral_source_split_10734:
    assume {:verifier.code 0} true;
    $i200 := $eq.i32($i199, 1);
    goto corral_source_split_10735;

  corral_source_split_10735:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb161, $bb162;

  $bb162:
    assume !($i200 == 1);
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    $i203 := $M.30;
    goto corral_source_split_10931;

  corral_source_split_10931:
    assume {:verifier.code 0} true;
    $i204 := $eq.i32($i203, 3);
    goto corral_source_split_10932;

  corral_source_split_10932:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb164, $bb165;

  $bb165:
    assume !($i204 == 1);
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    $i207 := $M.30;
    goto corral_source_split_10939;

  corral_source_split_10939:
    assume {:verifier.code 0} true;
    $i208 := $eq.i32($i207, 2);
    goto corral_source_split_10940;

  corral_source_split_10940:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb167, $bb168;

  $bb168:
    assume !($i208 == 1);
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb167:
    assume $i208 == 1;
    goto corral_source_split_10942;

  corral_source_split_10942:
    assume {:verifier.code 0} true;
    $p209 := $M.45;
    goto corral_source_split_10943;

  corral_source_split_10943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2594} vslice_dummy_var_71 := eth_mac_addr($p209, $p26);
    goto corral_source_split_10944;

  corral_source_split_10944:
    assume {:verifier.code 0} true;
    $M.30 := 2;
    call {:si_unique_call 2595} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_10945;

  corral_source_split_10945:
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb164:
    assume $i204 == 1;
    goto corral_source_split_10934;

  corral_source_split_10934:
    assume {:verifier.code 0} true;
    $p205 := $M.45;
    goto corral_source_split_10935;

  corral_source_split_10935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2592} vslice_dummy_var_70 := eth_mac_addr($p205, $p26);
    goto corral_source_split_10936;

  corral_source_split_10936:
    assume {:verifier.code 0} true;
    $M.30 := 3;
    call {:si_unique_call 2593} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_10937;

  corral_source_split_10937:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb161:
    assume $i200 == 1;
    goto corral_source_split_10926;

  corral_source_split_10926:
    assume {:verifier.code 0} true;
    $p201 := $M.45;
    goto corral_source_split_10927;

  corral_source_split_10927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2590} vslice_dummy_var_69 := eth_mac_addr($p201, $p26);
    goto corral_source_split_10928;

  corral_source_split_10928:
    assume {:verifier.code 0} true;
    $M.30 := 1;
    call {:si_unique_call 2591} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_10929;

  corral_source_split_10929:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb70:
    assume $i96 == 1;
    assume {:verifier.code 0} true;
    $i101 := $slt.i32($i94, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    $i102 := $slt.i32($i94, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i102 == 1);
    goto corral_source_split_10749;

  corral_source_split_10749:
    assume {:verifier.code 0} true;
    $i184 := $M.30;
    goto corral_source_split_10750;

  corral_source_split_10750:
    assume {:verifier.code 0} true;
    $i185 := $eq.i32($i184, 1);
    goto corral_source_split_10751;

  corral_source_split_10751:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb152, $bb153;

  $bb153:
    assume !($i185 == 1);
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    $i189 := $M.30;
    goto corral_source_split_10908;

  corral_source_split_10908:
    assume {:verifier.code 0} true;
    $i190 := $eq.i32($i189, 3);
    goto corral_source_split_10909;

  corral_source_split_10909:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb155, $bb156;

  $bb156:
    assume !($i190 == 1);
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    $i194 := $M.30;
    goto corral_source_split_10917;

  corral_source_split_10917:
    assume {:verifier.code 0} true;
    $i195 := $eq.i32($i194, 2);
    goto corral_source_split_10918;

  corral_source_split_10918:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb158, $bb159;

  $bb159:
    assume !($i195 == 1);
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb158:
    assume $i195 == 1;
    goto corral_source_split_10920;

  corral_source_split_10920:
    assume {:verifier.code 0} true;
    $p196 := $M.45;
    goto corral_source_split_10921;

  corral_source_split_10921:
    assume {:verifier.code 0} true;
    $i197 := $load.i64($M.0, $p5);
    goto corral_source_split_10922;

  corral_source_split_10922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2588} vslice_dummy_var_68 := xennet_fix_features($p196, $i197);
    goto corral_source_split_10923;

  corral_source_split_10923:
    assume {:verifier.code 0} true;
    $M.30 := 2;
    call {:si_unique_call 2589} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_10924;

  corral_source_split_10924:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb155:
    assume $i190 == 1;
    goto corral_source_split_10911;

  corral_source_split_10911:
    assume {:verifier.code 0} true;
    $p191 := $M.45;
    goto corral_source_split_10912;

  corral_source_split_10912:
    assume {:verifier.code 0} true;
    $i192 := $load.i64($M.0, $p5);
    goto corral_source_split_10913;

  corral_source_split_10913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2586} vslice_dummy_var_67 := xennet_fix_features($p191, $i192);
    goto corral_source_split_10914;

  corral_source_split_10914:
    assume {:verifier.code 0} true;
    $M.30 := 3;
    call {:si_unique_call 2587} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_10915;

  corral_source_split_10915:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb152:
    assume $i185 == 1;
    goto corral_source_split_10902;

  corral_source_split_10902:
    assume {:verifier.code 0} true;
    $p186 := $M.45;
    goto corral_source_split_10903;

  corral_source_split_10903:
    assume {:verifier.code 0} true;
    $i187 := $load.i64($M.0, $p5);
    goto corral_source_split_10904;

  corral_source_split_10904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2584} vslice_dummy_var_66 := xennet_fix_features($p186, $i187);
    goto corral_source_split_10905;

  corral_source_split_10905:
    assume {:verifier.code 0} true;
    $M.30 := 1;
    call {:si_unique_call 2585} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_10906;

  corral_source_split_10906:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb83:
    assume $i102 == 1;
    goto corral_source_split_10745;

  corral_source_split_10745:
    assume {:verifier.code 0} true;
    $i180 := $M.30;
    goto corral_source_split_10746;

  corral_source_split_10746:
    assume {:verifier.code 0} true;
    $i181 := $eq.i32($i180, 3);
    goto corral_source_split_10747;

  corral_source_split_10747:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb149, $bb150;

  $bb150:
    assume !($i181 == 1);
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb149:
    assume $i181 == 1;
    goto corral_source_split_10897;

  corral_source_split_10897:
    assume {:verifier.code 0} true;
    $p182 := $M.45;
    goto corral_source_split_10898;

  corral_source_split_10898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2582} vslice_dummy_var_65 := xennet_start_xmit($p20, $p182);
    goto corral_source_split_10899;

  corral_source_split_10899:
    assume {:verifier.code 0} true;
    $M.30 := 3;
    call {:si_unique_call 2583} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_10900;

  corral_source_split_10900:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb81:
    assume $i101 == 1;
    goto corral_source_split_10741;

  corral_source_split_10741:
    assume {:verifier.code 0} true;
    $i174 := $M.30;
    goto corral_source_split_10742;

  corral_source_split_10742:
    assume {:verifier.code 0} true;
    $i175 := $eq.i32($i174, 2);
    goto corral_source_split_10743;

  corral_source_split_10743:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb143, $bb144;

  $bb144:
    assume !($i175 == 1);
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb143:
    assume $i175 == 1;
    goto corral_source_split_10887;

  corral_source_split_10887:
    assume {:verifier.code 0} true;
    $p176 := $M.45;
    goto corral_source_split_10888;

  corral_source_split_10888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2579} $i177 := xennet_open($p176);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    goto corral_source_split_10889;

  corral_source_split_10889:
    assume {:verifier.code 0} true;
    $M.61 := $i177;
    call {:si_unique_call 2580} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i177);
    goto corral_source_split_10890;

  corral_source_split_10890:
    assume {:verifier.code 0} true;
    $i178 := $M.61;
    goto corral_source_split_10891;

  corral_source_split_10891:
    assume {:verifier.code 0} true;
    $i179 := $eq.i32($i178, 0);
    goto corral_source_split_10892;

  corral_source_split_10892:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb145, $bb146;

  $bb146:
    assume !($i179 == 1);
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb145:
    assume $i179 == 1;
    goto corral_source_split_10894;

  corral_source_split_10894:
    assume {:verifier.code 0} true;
    $M.30 := 3;
    call {:si_unique_call 2581} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_10895;

  corral_source_split_10895:
    assume {:verifier.code 0} true;
    goto $bb147;

  SeqInstr_55:
    assume !assertsPassed;
    return;

  $bb68:
    assume $i95 == 1;
    assume {:verifier.code 0} true;
    $i103 := $slt.i32($i94, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    $i104 := $slt.i32($i94, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    $i105 := $slt.i32($i94, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i105 == 1);
    goto corral_source_split_10761;

  corral_source_split_10761:
    assume {:verifier.code 0} true;
    $i164 := $M.30;
    goto corral_source_split_10762;

  corral_source_split_10762:
    assume {:verifier.code 0} true;
    $i165 := $eq.i32($i164, 3);
    goto corral_source_split_10763;

  corral_source_split_10763:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb137, $bb138;

  $bb138:
    assume !($i165 == 1);
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    $i169 := $M.30;
    goto corral_source_split_10878;

  corral_source_split_10878:
    assume {:verifier.code 0} true;
    $i170 := $eq.i32($i169, 2);
    goto corral_source_split_10879;

  corral_source_split_10879:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb140, $bb141;

  $bb141:
    assume !($i170 == 1);
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb140:
    assume $i170 == 1;
    goto corral_source_split_10881;

  corral_source_split_10881:
    assume {:verifier.code 0} true;
    $p171 := $M.45;
    goto corral_source_split_10882;

  corral_source_split_10882:
    assume {:verifier.code 0} true;
    $i172 := $load.i32($M.0, $p2);
    goto corral_source_split_10883;

  corral_source_split_10883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2577} vslice_dummy_var_64 := xennet_change_mtu($p171, $i172);
    goto corral_source_split_10884;

  corral_source_split_10884:
    assume {:verifier.code 0} true;
    $M.30 := 2;
    call {:si_unique_call 2578} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_10885;

  corral_source_split_10885:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb137:
    assume $i165 == 1;
    goto corral_source_split_10872;

  corral_source_split_10872:
    assume {:verifier.code 0} true;
    $p166 := $M.45;
    goto corral_source_split_10873;

  corral_source_split_10873:
    assume {:verifier.code 0} true;
    $i167 := $load.i32($M.0, $p2);
    goto corral_source_split_10874;

  corral_source_split_10874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2575} vslice_dummy_var_63 := xennet_change_mtu($p166, $i167);
    goto corral_source_split_10875;

  corral_source_split_10875:
    assume {:verifier.code 0} true;
    $M.30 := 3;
    call {:si_unique_call 2576} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_10876;

  corral_source_split_10876:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb89:
    assume $i105 == 1;
    goto corral_source_split_10757;

  corral_source_split_10757:
    assume {:verifier.code 0} true;
    $i149 := $M.30;
    goto corral_source_split_10758;

  corral_source_split_10758:
    assume {:verifier.code 0} true;
    $i150 := $eq.i32($i149, 1);
    goto corral_source_split_10759;

  corral_source_split_10759:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb128, $bb129;

  $bb129:
    assume !($i150 == 1);
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    $i154 := $M.30;
    goto corral_source_split_10854;

  corral_source_split_10854:
    assume {:verifier.code 0} true;
    $i155 := $eq.i32($i154, 3);
    goto corral_source_split_10855;

  corral_source_split_10855:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb131, $bb132;

  $bb132:
    assume !($i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    $i159 := $M.30;
    goto corral_source_split_10863;

  corral_source_split_10863:
    assume {:verifier.code 0} true;
    $i160 := $eq.i32($i159, 2);
    goto corral_source_split_10864;

  corral_source_split_10864:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb134, $bb135;

  $bb135:
    assume !($i160 == 1);
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb134:
    assume $i160 == 1;
    goto corral_source_split_10866;

  corral_source_split_10866:
    assume {:verifier.code 0} true;
    $p161 := $M.45;
    goto corral_source_split_10867;

  corral_source_split_10867:
    assume {:verifier.code 0} true;
    $i162 := $load.i64($M.0, $p4);
    goto corral_source_split_10868;

  corral_source_split_10868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2573} vslice_dummy_var_62 := xennet_set_features($p161, $i162);
    goto corral_source_split_10869;

  corral_source_split_10869:
    assume {:verifier.code 0} true;
    $M.30 := 2;
    call {:si_unique_call 2574} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_10870;

  corral_source_split_10870:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb131:
    assume $i155 == 1;
    goto corral_source_split_10857;

  corral_source_split_10857:
    assume {:verifier.code 0} true;
    $p156 := $M.45;
    goto corral_source_split_10858;

  corral_source_split_10858:
    assume {:verifier.code 0} true;
    $i157 := $load.i64($M.0, $p4);
    goto corral_source_split_10859;

  corral_source_split_10859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2571} vslice_dummy_var_61 := xennet_set_features($p156, $i157);
    goto corral_source_split_10860;

  corral_source_split_10860:
    assume {:verifier.code 0} true;
    $M.30 := 3;
    call {:si_unique_call 2572} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_10861;

  corral_source_split_10861:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb128:
    assume $i150 == 1;
    goto corral_source_split_10848;

  corral_source_split_10848:
    assume {:verifier.code 0} true;
    $p151 := $M.45;
    goto corral_source_split_10849;

  corral_source_split_10849:
    assume {:verifier.code 0} true;
    $i152 := $load.i64($M.0, $p4);
    goto corral_source_split_10850;

  corral_source_split_10850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2569} vslice_dummy_var_60 := xennet_set_features($p151, $i152);
    goto corral_source_split_10851;

  corral_source_split_10851:
    assume {:verifier.code 0} true;
    $M.30 := 1;
    call {:si_unique_call 2570} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_10852;

  corral_source_split_10852:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb87:
    assume $i104 == 1;
    goto corral_source_split_10753;

  corral_source_split_10753:
    assume {:verifier.code 0} true;
    $i134 := $M.30;
    goto corral_source_split_10754;

  corral_source_split_10754:
    assume {:verifier.code 0} true;
    $i135 := $eq.i32($i134, 1);
    goto corral_source_split_10755;

  corral_source_split_10755:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb119, $bb120;

  $bb120:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    $i139 := $M.30;
    goto corral_source_split_10830;

  corral_source_split_10830:
    assume {:verifier.code 0} true;
    $i140 := $eq.i32($i139, 3);
    goto corral_source_split_10831;

  corral_source_split_10831:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb122, $bb123;

  $bb123:
    assume !($i140 == 1);
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    $i144 := $M.30;
    goto corral_source_split_10839;

  corral_source_split_10839:
    assume {:verifier.code 0} true;
    $i145 := $eq.i32($i144, 2);
    goto corral_source_split_10840;

  corral_source_split_10840:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb125, $bb126;

  $bb126:
    assume !($i145 == 1);
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb125:
    assume $i145 == 1;
    goto corral_source_split_10842;

  corral_source_split_10842:
    assume {:verifier.code 0} true;
    $p146 := $M.45;
    goto corral_source_split_10843;

  corral_source_split_10843:
    assume {:verifier.code 0} true;
    $p147 := $load.ref($M.0, $p3);
    goto corral_source_split_10844;

  corral_source_split_10844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2567} vslice_dummy_var_59 := xennet_select_queue($p146, $p22, $p23, $p147);
    goto corral_source_split_10845;

  corral_source_split_10845:
    assume {:verifier.code 0} true;
    $M.30 := 2;
    call {:si_unique_call 2568} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_10846;

  corral_source_split_10846:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb122:
    assume $i140 == 1;
    goto corral_source_split_10833;

  corral_source_split_10833:
    assume {:verifier.code 0} true;
    $p141 := $M.45;
    goto corral_source_split_10834;

  corral_source_split_10834:
    assume {:verifier.code 0} true;
    $p142 := $load.ref($M.0, $p3);
    goto corral_source_split_10835;

  corral_source_split_10835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2565} vslice_dummy_var_58 := xennet_select_queue($p141, $p22, $p23, $p142);
    goto corral_source_split_10836;

  corral_source_split_10836:
    assume {:verifier.code 0} true;
    $M.30 := 3;
    call {:si_unique_call 2566} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_10837;

  corral_source_split_10837:
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb119:
    assume $i135 == 1;
    goto corral_source_split_10824;

  corral_source_split_10824:
    assume {:verifier.code 0} true;
    $p136 := $M.45;
    goto corral_source_split_10825;

  corral_source_split_10825:
    assume {:verifier.code 0} true;
    $p137 := $load.ref($M.0, $p3);
    goto corral_source_split_10826;

  corral_source_split_10826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2563} vslice_dummy_var_57 := xennet_select_queue($p136, $p22, $p23, $p137);
    goto corral_source_split_10827;

  corral_source_split_10827:
    assume {:verifier.code 0} true;
    $M.30 := 1;
    call {:si_unique_call 2564} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_10828;

  corral_source_split_10828:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb85:
    assume $i103 == 1;
    assume {:verifier.code 0} true;
    $i106 := $slt.i32($i94, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    $i107 := $slt.i32($i94, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i107 == 1);
    goto corral_source_split_10769;

  corral_source_split_10769:
    assume {:verifier.code 0} true;
    $i125 := $M.30;
    goto corral_source_split_10770;

  corral_source_split_10770:
    assume {:verifier.code 0} true;
    $i126 := $eq.i32($i125, 1);
    goto corral_source_split_10771;

  corral_source_split_10771:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  $bb111:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    $i128 := $M.30;
    goto corral_source_split_10808;

  corral_source_split_10808:
    assume {:verifier.code 0} true;
    $i129 := $eq.i32($i128, 3);
    goto corral_source_split_10809;

  corral_source_split_10809:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  $bb114:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    $i131 := $M.30;
    goto corral_source_split_10816;

  corral_source_split_10816:
    assume {:verifier.code 0} true;
    $i132 := $eq.i32($i131, 2);
    goto corral_source_split_10817;

  corral_source_split_10817:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  $bb117:
    assume !($i132 == 1);
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb116:
    assume $i132 == 1;
    goto corral_source_split_10819;

  corral_source_split_10819:
    assume {:verifier.code 0} true;
    $p133 := $M.45;
    goto corral_source_split_10820;

  corral_source_split_10820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2561} xennet_poll_controller($p133);
    goto corral_source_split_10821;

  corral_source_split_10821:
    assume {:verifier.code 0} true;
    $M.30 := 2;
    call {:si_unique_call 2562} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_10822;

  corral_source_split_10822:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb113:
    assume $i129 == 1;
    goto corral_source_split_10811;

  corral_source_split_10811:
    assume {:verifier.code 0} true;
    $p130 := $M.45;
    goto corral_source_split_10812;

  corral_source_split_10812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2559} xennet_poll_controller($p130);
    goto corral_source_split_10813;

  corral_source_split_10813:
    assume {:verifier.code 0} true;
    $M.30 := 3;
    call {:si_unique_call 2560} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_10814;

  corral_source_split_10814:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb110:
    assume $i126 == 1;
    goto corral_source_split_10803;

  corral_source_split_10803:
    assume {:verifier.code 0} true;
    $p127 := $M.45;
    goto corral_source_split_10804;

  corral_source_split_10804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2557} xennet_poll_controller($p127);
    goto corral_source_split_10805;

  corral_source_split_10805:
    assume {:verifier.code 0} true;
    $M.30 := 1;
    call {:si_unique_call 2558} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_10806;

  corral_source_split_10806:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb93:
    assume $i107 == 1;
    goto corral_source_split_10765;

  corral_source_split_10765:
    assume {:verifier.code 0} true;
    $i113 := $M.30;
    goto corral_source_split_10766;

  corral_source_split_10766:
    assume {:verifier.code 0} true;
    $i114 := $eq.i32($i113, 1);
    goto corral_source_split_10767;

  corral_source_split_10767:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    $i117 := $M.30;
    goto corral_source_split_10787;

  corral_source_split_10787:
    assume {:verifier.code 0} true;
    $i118 := $eq.i32($i117, 3);
    goto corral_source_split_10788;

  corral_source_split_10788:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb104, $bb105;

  $bb105:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    $i121 := $M.30;
    goto corral_source_split_10795;

  corral_source_split_10795:
    assume {:verifier.code 0} true;
    $i122 := $eq.i32($i121, 2);
    goto corral_source_split_10796;

  corral_source_split_10796:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  $bb108:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb107:
    assume $i122 == 1;
    goto corral_source_split_10798;

  corral_source_split_10798:
    assume {:verifier.code 0} true;
    $p123 := $M.45;
    goto corral_source_split_10799;

  corral_source_split_10799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2555} vslice_dummy_var_56 := eth_validate_addr($p123);
    goto corral_source_split_10800;

  corral_source_split_10800:
    assume {:verifier.code 0} true;
    $M.30 := 2;
    call {:si_unique_call 2556} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_10801;

  corral_source_split_10801:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb104:
    assume $i118 == 1;
    goto corral_source_split_10790;

  corral_source_split_10790:
    assume {:verifier.code 0} true;
    $p119 := $M.45;
    goto corral_source_split_10791;

  corral_source_split_10791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2553} vslice_dummy_var_55 := eth_validate_addr($p119);
    goto corral_source_split_10792;

  corral_source_split_10792:
    assume {:verifier.code 0} true;
    $M.30 := 3;
    call {:si_unique_call 2554} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_10793;

  corral_source_split_10793:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb101:
    assume $i114 == 1;
    goto corral_source_split_10782;

  corral_source_split_10782:
    assume {:verifier.code 0} true;
    $p115 := $M.45;
    goto corral_source_split_10783;

  corral_source_split_10783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2551} vslice_dummy_var_54 := eth_validate_addr($p115);
    goto corral_source_split_10784;

  corral_source_split_10784:
    assume {:verifier.code 0} true;
    $M.30 := 1;
    call {:si_unique_call 2552} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_10785;

  corral_source_split_10785:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb91:
    assume $i106 == 1;
    assume {:verifier.code 0} true;
    $i108 := $eq.i32($i94, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    assume !($i108 == 1);
    goto $bb78;

  $bb95:
    assume $i108 == 1;
    goto corral_source_split_10773;

  corral_source_split_10773:
    assume {:verifier.code 0} true;
    $i109 := $M.30;
    goto corral_source_split_10774;

  corral_source_split_10774:
    assume {:verifier.code 0} true;
    $i110 := $eq.i32($i109, 3);
    goto corral_source_split_10775;

  corral_source_split_10775:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb97:
    assume $i110 == 1;
    goto corral_source_split_10777;

  corral_source_split_10777:
    assume {:verifier.code 0} true;
    $p111 := $M.45;
    goto corral_source_split_10778;

  corral_source_split_10778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2549} vslice_dummy_var_53 := xennet_close($p111);
    goto corral_source_split_10779;

  corral_source_split_10779:
    assume {:verifier.code 0} true;
    $M.30 := 2;
    call {:si_unique_call 2550} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_10780;

  corral_source_split_10780:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb14:
    assume $i57 == 1;
    assume {:verifier.code 0} true;
    $i59 := $slt.i32($i51, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i59 == 1);
    goto corral_source_split_10661;

  corral_source_split_10661:
    assume {:verifier.code 0} true;
    $i85 := $M.54;
    goto corral_source_split_10662;

  corral_source_split_10662:
    assume {:verifier.code 0} true;
    $i86 := $ne.i32($i85, 0);
    goto corral_source_split_10663;

  corral_source_split_10663:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb53:
    assume $i86 == 1;
    goto corral_source_split_10711;

  corral_source_split_10711:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2540} $i87 := __VERIFIER_nondet_int();
    call {:si_unique_call 2541} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i87);
    call {:si_unique_call 2542} {:cexpr "tmp___17"} boogie_si_record_i32($i87);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $i88 := $eq.i32($i87, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2545} ldv_stop();
    goto corral_source_split_10721;

  corral_source_split_10721:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb56:
    assume $i88 == 1;
    goto corral_source_split_10713;

  corral_source_split_10713:
    assume {:verifier.code 0} true;
    $i89 := $M.54;
    goto corral_source_split_10714;

  corral_source_split_10714:
    assume {:verifier.code 0} true;
    $i90 := $eq.i32($i89, 1);
    goto corral_source_split_10715;

  corral_source_split_10715:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb58:
    assume $i90 == 1;
    goto corral_source_split_10717;

  corral_source_split_10717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2543} vslice_dummy_var_52 := show_rxbuf($p17, $p15, $p18);
    goto corral_source_split_10718;

  corral_source_split_10718:
    assume {:verifier.code 0} true;
    $M.54 := 1;
    call {:si_unique_call 2544} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_10719;

  corral_source_split_10719:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb18:
    assume $i59 == 1;
    assume {:verifier.code 0} true;
    $i60 := $eq.i32($i51, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i60 == 1);
    goto $bb11;

  $bb20:
    assume $i60 == 1;
    goto corral_source_split_10665;

  corral_source_split_10665:
    assume {:verifier.code 0} true;
    $i61 := $M.53;
    goto corral_source_split_10666;

  corral_source_split_10666:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i61, 0);
    goto corral_source_split_10667;

  corral_source_split_10667:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb22:
    assume $i62 == 1;
    goto corral_source_split_10669;

  corral_source_split_10669:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2528} $i63 := __VERIFIER_nondet_int();
    call {:si_unique_call 2529} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i63);
    call {:si_unique_call 2530} {:cexpr "tmp___16"} boogie_si_record_i32($i63);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i64 := $slt.i32($i63, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    $i65 := $slt.i32($i63, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    $i66 := $eq.i32($i63, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i66 == 1);
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2539} ldv_stop();
    goto corral_source_split_10709;

  corral_source_split_10709:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb29:
    assume $i66 == 1;
    goto corral_source_split_10675;

  corral_source_split_10675:
    assume {:verifier.code 0} true;
    $i81 := $M.53;
    goto corral_source_split_10676;

  corral_source_split_10676:
    assume {:verifier.code 0} true;
    $i82 := $eq.i32($i81, 1);
    goto corral_source_split_10677;

  corral_source_split_10677:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb46:
    assume $i82 == 1;
    goto corral_source_split_10704;

  corral_source_split_10704:
    assume {:verifier.code 0} true;
    $p83 := $M.49;
    goto corral_source_split_10705;

  corral_source_split_10705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2537} vslice_dummy_var_51 := ethtool_op_get_link($p83);
    goto corral_source_split_10706;

  corral_source_split_10706:
    assume {:verifier.code 0} true;
    $M.53 := 1;
    call {:si_unique_call 2538} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_10707;

  corral_source_split_10707:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb27:
    assume $i65 == 1;
    goto corral_source_split_10671;

  corral_source_split_10671:
    assume {:verifier.code 0} true;
    $i77 := $M.53;
    goto corral_source_split_10672;

  corral_source_split_10672:
    assume {:verifier.code 0} true;
    $i78 := $eq.i32($i77, 1);
    goto corral_source_split_10673;

  corral_source_split_10673:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb43:
    assume $i78 == 1;
    goto corral_source_split_10698;

  corral_source_split_10698:
    assume {:verifier.code 0} true;
    $p79 := $M.49;
    goto corral_source_split_10699;

  corral_source_split_10699:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.0, $p0);
    goto corral_source_split_10700;

  corral_source_split_10700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2535} xennet_get_strings($p79, $i80, $p11);
    goto corral_source_split_10701;

  corral_source_split_10701:
    assume {:verifier.code 0} true;
    $M.53 := 1;
    call {:si_unique_call 2536} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_10702;

  corral_source_split_10702:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb25:
    assume $i64 == 1;
    assume {:verifier.code 0} true;
    $i67 := $slt.i32($i63, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i67 == 1);
    goto corral_source_split_10679;

  corral_source_split_10679:
    assume {:verifier.code 0} true;
    $i74 := $M.53;
    goto corral_source_split_10680;

  corral_source_split_10680:
    assume {:verifier.code 0} true;
    $i75 := $eq.i32($i74, 1);
    goto corral_source_split_10681;

  corral_source_split_10681:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb40:
    assume $i75 == 1;
    goto corral_source_split_10693;

  corral_source_split_10693:
    assume {:verifier.code 0} true;
    $p76 := $M.49;
    goto corral_source_split_10694;

  corral_source_split_10694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2533} xennet_get_ethtool_stats($p76, $p10, $p13);
    goto corral_source_split_10695;

  corral_source_split_10695:
    assume {:verifier.code 0} true;
    $M.53 := 1;
    call {:si_unique_call 2534} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_10696;

  corral_source_split_10696:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb32:
    assume $i67 == 1;
    assume {:verifier.code 0} true;
    $i68 := $eq.i32($i63, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i68 == 1);
    goto $bb31;

  $bb34:
    assume $i68 == 1;
    goto corral_source_split_10683;

  corral_source_split_10683:
    assume {:verifier.code 0} true;
    $i69 := $M.53;
    goto corral_source_split_10684;

  corral_source_split_10684:
    assume {:verifier.code 0} true;
    $i70 := $eq.i32($i69, 1);
    goto corral_source_split_10685;

  corral_source_split_10685:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb36:
    assume $i70 == 1;
    goto corral_source_split_10687;

  corral_source_split_10687:
    assume {:verifier.code 0} true;
    $p71 := $M.49;
    goto corral_source_split_10688;

  corral_source_split_10688:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.0, $p1);
    goto corral_source_split_10689;

  corral_source_split_10689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2531} vslice_dummy_var_50 := xennet_get_sset_count($p71, $i72);
    goto corral_source_split_10690;

  corral_source_split_10690:
    assume {:verifier.code 0} true;
    $M.53 := 1;
    call {:si_unique_call 2532} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_10691;

  corral_source_split_10691:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb52_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2525} $i51 := __VERIFIER_nondet_int();
    call {:si_unique_call 2526} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i51);
    call {:si_unique_call 2527} {:cexpr "tmp___15"} boogie_si_record_i32($i51);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 420628);

procedure ldv_initialize();
  free requires assertsPassed;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11184;

  corral_source_split_11184:
    assume {:verifier.code 0} true;
    return;
}



const ldv_ndo_init_7: ref;

axiom ldv_ndo_init_7 == $sub.ref(0, 421660);

procedure ldv_ndo_init_7() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_ndo_init_7() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11186;

  corral_source_split_11186:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2673} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2674} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_11187;

  corral_source_split_11187:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_ndo_uninit_7: ref;

axiom ldv_ndo_uninit_7 == $sub.ref(0, 422692);

procedure ldv_ndo_uninit_7() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_ndo_uninit_7() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11189;

  corral_source_split_11189:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2675} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2676} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_11190;

  corral_source_split_11190:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_suspend_2: ref;

axiom ldv_suspend_2 == $sub.ref(0, 423724);

procedure ldv_suspend_2() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_suspend_2() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11192;

  corral_source_split_11192:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2677} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2678} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_11193;

  corral_source_split_11193:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const netif_exit: ref;

axiom netif_exit == $sub.ref(0, 424756);

procedure netif_exit();
  free requires assertsPassed;



implementation netif_exit()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11195;

  corral_source_split_11195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2679} xenbus_unregister_driver(netfront_driver);
    goto corral_source_split_11196;

  corral_source_split_11196:
    assume {:verifier.code 0} true;
    return;
}



const netif_init: ref;

axiom netif_init == $sub.ref(0, 425788);

procedure netif_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.35;



implementation netif_init() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i2: i32;
  var vslice_dummy_var_83: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11198;

  corral_source_split_11198:
    assume {:verifier.code 0} true;
    $i0 := $load.i32($M.0, xen_domain_type);
    goto corral_source_split_11199;

  corral_source_split_11199:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_11200;

  corral_source_split_11200:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2680} $i3 := xen_has_pv_nic_devices();
    goto corral_source_split_11206;

  corral_source_split_11206:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 2681} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_11207;

  corral_source_split_11207:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_11208;

  corral_source_split_11208:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_11212;

  corral_source_split_11212:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_11213;

  corral_source_split_11213:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2682} vslice_dummy_var_83 := printk.ref(.str.82);
    goto corral_source_split_11217;

  corral_source_split_11217:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, cpu_online_mask);
    goto corral_source_split_11218;

  corral_source_split_11218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2683} $i10 := cpumask_weight($p9);
    goto corral_source_split_11219;

  corral_source_split_11219:
    assume {:verifier.code 0} true;
    $M.35 := $i10;
    call {:si_unique_call 2684} {:cexpr "xennet_max_queues"} boogie_si_record_i32($i10);
    goto corral_source_split_11220;

  corral_source_split_11220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2685} $i11 := __xenbus_register_frontend(netfront_driver, __this_module, .str.7);
    call {:si_unique_call 2686} {:cexpr "tmp___1"} boogie_si_record_i32($i11);
    goto corral_source_split_11221;

  corral_source_split_11221:
    assume {:verifier.code 0} true;
    $i2 := $i11;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_11204;

  corral_source_split_11204:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_11215;

  corral_source_split_11215:
    assume {:verifier.code 0} true;
    $i2 := $sub.i32(0, 19);
    goto $bb3;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_11210;

  corral_source_split_11210:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb7;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_11202;

  corral_source_split_11202:
    assume {:verifier.code 0} true;
    $i2 := $sub.i32(0, 19);
    goto $bb3;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 426820);

procedure ldv_check_final_state();
  free requires assertsPassed;



implementation ldv_check_final_state()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11223;

  corral_source_split_11223:
    assume {:verifier.code 0} true;
    return;
}



const xen_has_pv_nic_devices: ref;

axiom xen_has_pv_nic_devices == $sub.ref(0, 427852);

procedure xen_has_pv_nic_devices() returns ($r: i1);
  free requires assertsPassed;



implementation xen_has_pv_nic_devices() returns ($r: i1)
{
  var $i0: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11225;

  corral_source_split_11225:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2687} $i0 := __VERIFIER_nondet_bool();
    call {:si_unique_call 2688} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i0);
    goto corral_source_split_11226;

  corral_source_split_11226:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const cpumask_weight: ref;

axiom cpumask_weight == $sub.ref(0, 428884);

procedure cpumask_weight($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation cpumask_weight($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11228;

  corral_source_split_11228:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1024)), $mul.ref(0, 1));
    goto corral_source_split_11229;

  corral_source_split_11229:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_11230;

  corral_source_split_11230:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_11231;

  corral_source_split_11231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2689} $i4 := bitmap_weight($p2, $i3);
    call {:si_unique_call 2690} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_11232;

  corral_source_split_11232:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const __xenbus_register_frontend: ref;

axiom __xenbus_register_frontend == $sub.ref(0, 429916);

procedure __xenbus_register_frontend($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __xenbus_register_frontend($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11234;

  corral_source_split_11234:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2691} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 2692} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_11235;

  corral_source_split_11235:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const bitmap_weight: ref;

axiom bitmap_weight == $sub.ref(0, 430948);

procedure bitmap_weight($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation bitmap_weight($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2693} {:cexpr "bitmap_weight:arg:nbits"} boogie_si_record_i32($i1);
    goto corral_source_split_11237;

  corral_source_split_11237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2694} $i2 := __bitmap_weight($p0, $i1);
    call {:si_unique_call 2695} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_11238;

  corral_source_split_11238:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __bitmap_weight: ref;

axiom __bitmap_weight == $sub.ref(0, 431980);

procedure __bitmap_weight($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __bitmap_weight($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2696} {:cexpr "__bitmap_weight:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_11240;

  corral_source_split_11240:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2697} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2698} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_11241;

  corral_source_split_11241:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const xenbus_unregister_driver: ref;

axiom xenbus_unregister_driver == $sub.ref(0, 433012);

procedure xenbus_unregister_driver($p0: ref);
  free requires assertsPassed;



implementation xenbus_unregister_driver($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11243;

  corral_source_split_11243:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 434044);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2699} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_11245;

  corral_source_split_11245:
    assume {:verifier.code 1} true;
    goto corral_source_split_11246;

  corral_source_split_11246:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_11247;

  corral_source_split_11247:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 435076);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 436108);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 437140);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11249;

  corral_source_split_11249:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_11250;

  corral_source_split_11250:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_67:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 438172);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 439204);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 440236);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 441268);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 442300);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 443332);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 444364);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __VERIFIER_nondet_unsigned_short: ref;

axiom __VERIFIER_nondet_unsigned_short == $sub.ref(0, 445396);

procedure __VERIFIER_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 446428);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 447460);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 448492);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11252;

  corral_source_split_11252:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2700} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 2701} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 2702} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_11253;

  corral_source_split_11253:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_11254;

  corral_source_split_11254:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_11258;

  corral_source_split_11258:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_11259;

  corral_source_split_11259:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2703} __VERIFIER_assume($i4);
    goto corral_source_split_11260;

  corral_source_split_11260:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_11256;

  corral_source_split_11256:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 449524);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 450556);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 451588);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __VERIFIER_nondet_unsigned_int: ref;

axiom __VERIFIER_nondet_unsigned_int == $sub.ref(0, 452620);

procedure __VERIFIER_nondet_unsigned_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11262;

  corral_source_split_11262:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2704} $i0 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 2705} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 2706} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_11263;

  corral_source_split_11263:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2707} $i1 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 2708} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 2709} {:cexpr "min"} boogie_si_record_i32($i1);
    goto corral_source_split_11264;

  corral_source_split_11264:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2710} $i2 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 2711} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 2712} {:cexpr "max"} boogie_si_record_i32($i2);
    goto corral_source_split_11265;

  corral_source_split_11265:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_11266;

  corral_source_split_11266:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_11271;

  corral_source_split_11271:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_11272;

  corral_source_split_11272:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2713} __VERIFIER_assume($i7);
    goto corral_source_split_11273;

  corral_source_split_11273:
    assume {:verifier.code 0} true;
    $i8 := $uge.i32($i0, $i1);
    goto corral_source_split_11274;

  corral_source_split_11274:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_11280;

  corral_source_split_11280:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_11281;

  corral_source_split_11281:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2714} __VERIFIER_assume($i11);
    goto corral_source_split_11282;

  corral_source_split_11282:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_11278;

  corral_source_split_11278:
    assume {:verifier.code 1} true;
    $i10 := $ule.i32($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_11268;

  corral_source_split_11268:
    assume {:verifier.code 0} true;
    $i5 := $uge.i32($i2, 4294967295);
    goto corral_source_split_11269;

  corral_source_split_11269:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_11276;

  corral_source_split_11276:
    assume {:verifier.code 1} true;
    $i6 := $ule.i32($i2, 4294967295);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 453652);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 454684);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 455716);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 456748);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 457780);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 458812);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11284;

  corral_source_split_11284:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2715} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 2716} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 2717} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_11285;

  corral_source_split_11285:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2718} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 2719} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 2720} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_11286;

  corral_source_split_11286:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2721} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 2722} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 2723} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_11287;

  corral_source_split_11287:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_11288;

  corral_source_split_11288:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_11293;

  corral_source_split_11293:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_11294;

  corral_source_split_11294:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2724} __VERIFIER_assume($i7);
    goto corral_source_split_11295;

  corral_source_split_11295:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_11296;

  corral_source_split_11296:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_11302;

  corral_source_split_11302:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_11303;

  corral_source_split_11303:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2725} __VERIFIER_assume($i11);
    goto corral_source_split_11304;

  corral_source_split_11304:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_11300;

  corral_source_split_11300:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_11290;

  corral_source_split_11290:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_11291;

  corral_source_split_11291:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_11298;

  corral_source_split_11298:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 459844);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 460876);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 461908);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 462940);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 463972);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 465004);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 466036);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 467068);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 468100);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11306;

  corral_source_split_11306:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2726} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2727} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_11307;

  corral_source_split_11307:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_11308;

  corral_source_split_11308:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 2728} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_11309;

  corral_source_split_11309:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_11310;

  corral_source_split_11310:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_11311;

  corral_source_split_11311:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_11312;

  corral_source_split_11312:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_11319;

  corral_source_split_11319:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_11320;

  corral_source_split_11320:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_11321;

  corral_source_split_11321:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_11322;

  corral_source_split_11322:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_11314;

  corral_source_split_11314:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_11315;

  corral_source_split_11315:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2729} __VERIFIER_assume($i10);
    goto corral_source_split_11316;

  corral_source_split_11316:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_11317;

  corral_source_split_11317:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_ushort: ref;

axiom __VERIFIER_nondet_ushort == $sub.ref(0, 469132);

procedure __VERIFIER_nondet_ushort() returns ($r: i16);



const __VERIFIER_nondet_uint: ref;

axiom __VERIFIER_nondet_uint == $sub.ref(0, 470164);

procedure __VERIFIER_nondet_uint() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uint() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11324;

  corral_source_split_11324:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2730} $i0 := __VERIFIER_nondet_unsigned_int();
    call {:si_unique_call 2731} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 2732} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_11325;

  corral_source_split_11325:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 471196);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11327;

  corral_source_split_11327:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2733} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 2734} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 2735} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_11328;

  corral_source_split_11328:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 472228);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11330;

  corral_source_split_11330:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2736} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 2737} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_11331;

  corral_source_split_11331:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 473260);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 474292);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 2738} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 2739} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 475324);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 476356);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11333;

  corral_source_split_11333:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_11334;

  corral_source_split_11334:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 477388);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2740} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 2741} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_11336;

  corral_source_split_11336:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2742} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2743} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_11337;

  corral_source_split_11337:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_11338;

  corral_source_split_11338:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_11342;

  corral_source_split_11342:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_11343;

  corral_source_split_11343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2744} $p6 := malloc($i5);
    goto corral_source_split_11344;

  corral_source_split_11344:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_11345;

  corral_source_split_11345:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_9 := $M.0;
    call {:si_unique_call 2745} cmdloc_dummy_var_10 := $memset.i8(cmdloc_dummy_var_9, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_10;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_11347;

  corral_source_split_11347:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_11340;

  corral_source_split_11340:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 478420);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 479452);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.16, $M.18, $M.20, $M.22, $M.46, $M.47, $M.45, $M.15, $M.17, $M.19, $M.21, $M.49, $M.50, $M.51, $M.52, $M.53, $M.54, $M.30, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.64, $M.65, $M.14, $M.66, $M.0, $M.35, $M.93, $M.94, $M.95, $M.96, $M.97;



implementation __SMACK_static_init()
{

  $bb0:
    call {:si_unique_call 2746} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.16 := 0;
    call {:si_unique_call 2747} {:cexpr "ldv_timer_1_0"} boogie_si_record_i32(0);
    $M.18 := 0;
    call {:si_unique_call 2748} {:cexpr "ldv_timer_1_1"} boogie_si_record_i32(0);
    $M.20 := 0;
    call {:si_unique_call 2749} {:cexpr "ldv_timer_1_2"} boogie_si_record_i32(0);
    $M.22 := 0;
    call {:si_unique_call 2750} {:cexpr "ldv_timer_1_3"} boogie_si_record_i32(0);
    $M.46 := $0.ref;
    $M.47 := $0.ref;
    $M.45 := $0.ref;
    $M.15 := $0.ref;
    $M.17 := $0.ref;
    $M.19 := $0.ref;
    $M.21 := $0.ref;
    $M.49 := $0.ref;
    $M.50 := $0.ref;
    $M.51 := $0.ref;
    $M.52 := $0.ref;
    $M.53 := 0;
    call {:si_unique_call 2751} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    $M.54 := 0;
    call {:si_unique_call 2752} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    $M.30 := 0;
    call {:si_unique_call 2753} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    $M.55 := 0;
    call {:si_unique_call 2754} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.56 := 0;
    call {:si_unique_call 2755} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.57 := 0;
    call {:si_unique_call 2756} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    $M.58 := 0;
    call {:si_unique_call 2757} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.59 := 0;
    call {:si_unique_call 2758} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.60 := 0;
    call {:si_unique_call 2759} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    $M.61 := 0;
    call {:si_unique_call 2760} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.62 := 0;
    call {:si_unique_call 2761} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.63 := 0;
    call {:si_unique_call 2762} {:cexpr "ldv_retval_3"} boogie_si_record_i32(0);
    $M.64 := 0;
    call {:si_unique_call 2763} {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
    $M.65 := 0;
    call {:si_unique_call 2764} {:cexpr "ldv_retval_4"} boogie_si_record_i32(0);
    $M.14 := 0;
    call {:si_unique_call 2765} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    $M.66 := $store.i8($M.66, netfront_ids, 118);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref($add.ref(netfront_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(1, 1)), 105);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref($add.ref(netfront_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(2, 1)), 102);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref($add.ref(netfront_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref($add.ref(netfront_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref($add.ref(netfront_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref($add.ref(netfront_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref($add.ref(netfront_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref($add.ref(netfront_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref($add.ref(netfront_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref($add.ref(netfront_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref($add.ref(netfront_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref($add.ref(netfront_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref($add.ref(netfront_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref($add.ref(netfront_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref($add.ref(netfront_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref($add.ref(netfront_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref($add.ref(netfront_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref($add.ref(netfront_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref($add.ref(netfront_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref($add.ref(netfront_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref($add.ref(netfront_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref($add.ref(netfront_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref($add.ref(netfront_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref($add.ref(netfront_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref($add.ref(netfront_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref($add.ref(netfront_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref($add.ref(netfront_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref($add.ref(netfront_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref($add.ref(netfront_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref($add.ref(netfront_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref($add.ref(netfront_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref($add.ref(netfront_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref($add.ref(netfront_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref($add.ref(netfront_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref($add.ref(netfront_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref($add.ref(netfront_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref($add.ref(netfront_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref($add.ref(netfront_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref($add.ref(netfront_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref($add.ref(netfront_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref($add.ref(netfront_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref($add.ref(netfront_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref($add.ref(netfront_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref($add.ref(netfront_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref($add.ref(netfront_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref($add.ref(netfront_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref($add.ref(netfront_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref($add.ref(netfront_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref($add.ref(netfront_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref($add.ref(netfront_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref($add.ref(netfront_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref($add.ref(netfront_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref($add.ref(netfront_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref($add.ref(netfront_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref($add.ref(netfront_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref($add.ref(netfront_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref($add.ref(netfront_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref($add.ref(netfront_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref($add.ref(netfront_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref($add.ref(netfront_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref($add.ref(netfront_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref($add.ref(netfront_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref($add.ref(netfront_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.ref($M.0, dev_attr_rxbuf_cur, .str.22);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(dev_attr_rxbuf_cur, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(dev_attr_rxbuf_cur, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(dev_attr_rxbuf_cur, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_rxbuf_cur, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_rxbuf_cur, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_rxbuf_cur, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_rxbuf_cur, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_rxbuf_cur, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_rxbuf_cur, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_rxbuf_cur, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_rxbuf_cur, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_rxbuf_cur, $mul.ref(0, 48)), $mul.ref(32, 1)), show_rxbuf);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_rxbuf_cur, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, dev_attr_rxbuf_max, .str.21);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(dev_attr_rxbuf_max, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(dev_attr_rxbuf_max, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(dev_attr_rxbuf_max, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_rxbuf_max, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_rxbuf_max, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_rxbuf_max, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_rxbuf_max, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_rxbuf_max, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_rxbuf_max, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_rxbuf_max, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_rxbuf_max, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_rxbuf_max, $mul.ref(0, 48)), $mul.ref(32, 1)), show_rxbuf);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_rxbuf_max, $mul.ref(0, 48)), $mul.ref(40, 1)), store_rxbuf);
    $M.0 := $store.ref($M.0, dev_attr_rxbuf_min, .str.20);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(dev_attr_rxbuf_min, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(dev_attr_rxbuf_min, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(dev_attr_rxbuf_min, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_rxbuf_min, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_rxbuf_min, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_rxbuf_min, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_rxbuf_min, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_rxbuf_min, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_rxbuf_min, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_rxbuf_min, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_rxbuf_min, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_rxbuf_min, $mul.ref(0, 48)), $mul.ref(32, 1)), show_rxbuf);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_rxbuf_min, $mul.ref(0, 48)), $mul.ref(40, 1)), store_rxbuf);
    $M.0 := $store.ref($M.0, xennet_dev_attrs, dev_attr_rxbuf_min);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_dev_attrs, $mul.ref(0, 32)), $mul.ref(1, 8)), dev_attr_rxbuf_max);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_dev_attrs, $mul.ref(0, 32)), $mul.ref(2, 8)), dev_attr_rxbuf_cur);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_dev_attrs, $mul.ref(0, 32)), $mul.ref(3, 8)), $0.ref);
    $M.0 := $store.ref($M.0, xennet_dev_group, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_dev_group, $mul.ref(0, 32)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_dev_group, $mul.ref(0, 32)), $mul.ref(16, 1)), xennet_dev_attrs);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_dev_group, $mul.ref(0, 32)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, xennet_ethtool_ops, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_ethtool_ops, $mul.ref(0, 392)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_ethtool_ops, $mul.ref(0, 392)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_ethtool_ops, $mul.ref(0, 392)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_ethtool_ops, $mul.ref(0, 392)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_ethtool_ops, $mul.ref(0, 392)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_ethtool_ops, $mul.ref(0, 392)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_ethtool_ops, $mul.ref(0, 392)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_ethtool_ops, $mul.ref(0, 392)), $mul.ref(64, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_ethtool_ops, $mul.ref(0, 392)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_ethtool_ops, $mul.ref(0, 392)), $mul.ref(80, 1)), ethtool_op_get_link);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_ethtool_ops, $mul.ref(0, 392)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_ethtool_ops, $mul.ref(0, 392)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_ethtool_ops, $mul.ref(0, 392)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_ethtool_ops, $mul.ref(0, 392)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_ethtool_ops, $mul.ref(0, 392)), $mul.ref(120, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_ethtool_ops, $mul.ref(0, 392)), $mul.ref(128, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_ethtool_ops, $mul.ref(0, 392)), $mul.ref(136, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_ethtool_ops, $mul.ref(0, 392)), $mul.ref(144, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_ethtool_ops, $mul.ref(0, 392)), $mul.ref(152, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_ethtool_ops, $mul.ref(0, 392)), $mul.ref(160, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_ethtool_ops, $mul.ref(0, 392)), $mul.ref(168, 1)), xennet_get_strings);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_ethtool_ops, $mul.ref(0, 392)), $mul.ref(176, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_ethtool_ops, $mul.ref(0, 392)), $mul.ref(184, 1)), xennet_get_ethtool_stats);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_ethtool_ops, $mul.ref(0, 392)), $mul.ref(192, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_ethtool_ops, $mul.ref(0, 392)), $mul.ref(200, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_ethtool_ops, $mul.ref(0, 392)), $mul.ref(208, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_ethtool_ops, $mul.ref(0, 392)), $mul.ref(216, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_ethtool_ops, $mul.ref(0, 392)), $mul.ref(224, 1)), xennet_get_sset_count);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_ethtool_ops, $mul.ref(0, 392)), $mul.ref(232, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_ethtool_ops, $mul.ref(0, 392)), $mul.ref(240, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_ethtool_ops, $mul.ref(0, 392)), $mul.ref(248, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_ethtool_ops, $mul.ref(0, 392)), $mul.ref(256, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_ethtool_ops, $mul.ref(0, 392)), $mul.ref(264, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_ethtool_ops, $mul.ref(0, 392)), $mul.ref(272, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_ethtool_ops, $mul.ref(0, 392)), $mul.ref(280, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_ethtool_ops, $mul.ref(0, 392)), $mul.ref(288, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_ethtool_ops, $mul.ref(0, 392)), $mul.ref(296, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_ethtool_ops, $mul.ref(0, 392)), $mul.ref(304, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_ethtool_ops, $mul.ref(0, 392)), $mul.ref(312, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_ethtool_ops, $mul.ref(0, 392)), $mul.ref(320, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_ethtool_ops, $mul.ref(0, 392)), $mul.ref(328, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_ethtool_ops, $mul.ref(0, 392)), $mul.ref(336, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_ethtool_ops, $mul.ref(0, 392)), $mul.ref(344, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_ethtool_ops, $mul.ref(0, 392)), $mul.ref(352, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_ethtool_ops, $mul.ref(0, 392)), $mul.ref(360, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_ethtool_ops, $mul.ref(0, 392)), $mul.ref(368, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_ethtool_ops, $mul.ref(0, 392)), $mul.ref(376, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_ethtool_ops, $mul.ref(0, 392)), $mul.ref(384, 1)), $0.ref);
    $M.0 := $store.ref($M.0, xennet_netdev_ops, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_netdev_ops, $mul.ref(0, 528)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_netdev_ops, $mul.ref(0, 528)), $mul.ref(16, 1)), xennet_open);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_netdev_ops, $mul.ref(0, 528)), $mul.ref(24, 1)), xennet_close);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_netdev_ops, $mul.ref(0, 528)), $mul.ref(32, 1)), xennet_start_xmit);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_netdev_ops, $mul.ref(0, 528)), $mul.ref(40, 1)), xennet_select_queue);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_netdev_ops, $mul.ref(0, 528)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_netdev_ops, $mul.ref(0, 528)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_netdev_ops, $mul.ref(0, 528)), $mul.ref(64, 1)), eth_mac_addr);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_netdev_ops, $mul.ref(0, 528)), $mul.ref(72, 1)), eth_validate_addr);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_netdev_ops, $mul.ref(0, 528)), $mul.ref(80, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_netdev_ops, $mul.ref(0, 528)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_netdev_ops, $mul.ref(0, 528)), $mul.ref(96, 1)), xennet_change_mtu);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_netdev_ops, $mul.ref(0, 528)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_netdev_ops, $mul.ref(0, 528)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_netdev_ops, $mul.ref(0, 528)), $mul.ref(120, 1)), xennet_get_stats64);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_netdev_ops, $mul.ref(0, 528)), $mul.ref(128, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_netdev_ops, $mul.ref(0, 528)), $mul.ref(136, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_netdev_ops, $mul.ref(0, 528)), $mul.ref(144, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_netdev_ops, $mul.ref(0, 528)), $mul.ref(152, 1)), xennet_poll_controller);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_netdev_ops, $mul.ref(0, 528)), $mul.ref(160, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_netdev_ops, $mul.ref(0, 528)), $mul.ref(168, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_netdev_ops, $mul.ref(0, 528)), $mul.ref(176, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_netdev_ops, $mul.ref(0, 528)), $mul.ref(184, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_netdev_ops, $mul.ref(0, 528)), $mul.ref(192, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_netdev_ops, $mul.ref(0, 528)), $mul.ref(200, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_netdev_ops, $mul.ref(0, 528)), $mul.ref(208, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_netdev_ops, $mul.ref(0, 528)), $mul.ref(216, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_netdev_ops, $mul.ref(0, 528)), $mul.ref(224, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_netdev_ops, $mul.ref(0, 528)), $mul.ref(232, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_netdev_ops, $mul.ref(0, 528)), $mul.ref(240, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_netdev_ops, $mul.ref(0, 528)), $mul.ref(248, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_netdev_ops, $mul.ref(0, 528)), $mul.ref(256, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_netdev_ops, $mul.ref(0, 528)), $mul.ref(264, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_netdev_ops, $mul.ref(0, 528)), $mul.ref(272, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_netdev_ops, $mul.ref(0, 528)), $mul.ref(280, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_netdev_ops, $mul.ref(0, 528)), $mul.ref(288, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_netdev_ops, $mul.ref(0, 528)), $mul.ref(296, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_netdev_ops, $mul.ref(0, 528)), $mul.ref(304, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_netdev_ops, $mul.ref(0, 528)), $mul.ref(312, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_netdev_ops, $mul.ref(0, 528)), $mul.ref(320, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_netdev_ops, $mul.ref(0, 528)), $mul.ref(328, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_netdev_ops, $mul.ref(0, 528)), $mul.ref(336, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_netdev_ops, $mul.ref(0, 528)), $mul.ref(344, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_netdev_ops, $mul.ref(0, 528)), $mul.ref(352, 1)), xennet_fix_features);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_netdev_ops, $mul.ref(0, 528)), $mul.ref(360, 1)), xennet_set_features);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_netdev_ops, $mul.ref(0, 528)), $mul.ref(368, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_netdev_ops, $mul.ref(0, 528)), $mul.ref(376, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_netdev_ops, $mul.ref(0, 528)), $mul.ref(384, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_netdev_ops, $mul.ref(0, 528)), $mul.ref(392, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_netdev_ops, $mul.ref(0, 528)), $mul.ref(400, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_netdev_ops, $mul.ref(0, 528)), $mul.ref(408, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_netdev_ops, $mul.ref(0, 528)), $mul.ref(416, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_netdev_ops, $mul.ref(0, 528)), $mul.ref(424, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_netdev_ops, $mul.ref(0, 528)), $mul.ref(432, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_netdev_ops, $mul.ref(0, 528)), $mul.ref(440, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_netdev_ops, $mul.ref(0, 528)), $mul.ref(448, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_netdev_ops, $mul.ref(0, 528)), $mul.ref(456, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_netdev_ops, $mul.ref(0, 528)), $mul.ref(464, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_netdev_ops, $mul.ref(0, 528)), $mul.ref(472, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_netdev_ops, $mul.ref(0, 528)), $mul.ref(480, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_netdev_ops, $mul.ref(0, 528)), $mul.ref(488, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_netdev_ops, $mul.ref(0, 528)), $mul.ref(496, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_netdev_ops, $mul.ref(0, 528)), $mul.ref(504, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_netdev_ops, $mul.ref(0, 528)), $mul.ref(512, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xennet_netdev_ops, $mul.ref(0, 528)), $mul.ref(520, 1)), $0.ref);
    $M.35 := 0;
    call {:si_unique_call 2766} {:cexpr "xennet_max_queues"} boogie_si_record_i32(0);
    $M.0 := $store.i8($M.0, xennet_stats, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(xennet_stats, $mul.ref(0, 34)), $mul.ref(0, 34)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(xennet_stats, $mul.ref(0, 34)), $mul.ref(0, 34)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(xennet_stats, $mul.ref(0, 34)), $mul.ref(0, 34)), $mul.ref(0, 1)), $mul.ref(3, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(xennet_stats, $mul.ref(0, 34)), $mul.ref(0, 34)), $mul.ref(0, 1)), $mul.ref(4, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(xennet_stats, $mul.ref(0, 34)), $mul.ref(0, 34)), $mul.ref(0, 1)), $mul.ref(5, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(xennet_stats, $mul.ref(0, 34)), $mul.ref(0, 34)), $mul.ref(0, 1)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(xennet_stats, $mul.ref(0, 34)), $mul.ref(0, 34)), $mul.ref(0, 1)), $mul.ref(7, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(xennet_stats, $mul.ref(0, 34)), $mul.ref(0, 34)), $mul.ref(0, 1)), $mul.ref(8, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(xennet_stats, $mul.ref(0, 34)), $mul.ref(0, 34)), $mul.ref(0, 1)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(xennet_stats, $mul.ref(0, 34)), $mul.ref(0, 34)), $mul.ref(0, 1)), $mul.ref(10, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(xennet_stats, $mul.ref(0, 34)), $mul.ref(0, 34)), $mul.ref(0, 1)), $mul.ref(11, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(xennet_stats, $mul.ref(0, 34)), $mul.ref(0, 34)), $mul.ref(0, 1)), $mul.ref(12, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(xennet_stats, $mul.ref(0, 34)), $mul.ref(0, 34)), $mul.ref(0, 1)), $mul.ref(13, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(xennet_stats, $mul.ref(0, 34)), $mul.ref(0, 34)), $mul.ref(0, 1)), $mul.ref(14, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(xennet_stats, $mul.ref(0, 34)), $mul.ref(0, 34)), $mul.ref(0, 1)), $mul.ref(15, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(xennet_stats, $mul.ref(0, 34)), $mul.ref(0, 34)), $mul.ref(0, 1)), $mul.ref(16, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(xennet_stats, $mul.ref(0, 34)), $mul.ref(0, 34)), $mul.ref(0, 1)), $mul.ref(17, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(xennet_stats, $mul.ref(0, 34)), $mul.ref(0, 34)), $mul.ref(0, 1)), $mul.ref(18, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(xennet_stats, $mul.ref(0, 34)), $mul.ref(0, 34)), $mul.ref(0, 1)), $mul.ref(19, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(xennet_stats, $mul.ref(0, 34)), $mul.ref(0, 34)), $mul.ref(0, 1)), $mul.ref(20, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(xennet_stats, $mul.ref(0, 34)), $mul.ref(0, 34)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(xennet_stats, $mul.ref(0, 34)), $mul.ref(0, 34)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(xennet_stats, $mul.ref(0, 34)), $mul.ref(0, 34)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(xennet_stats, $mul.ref(0, 34)), $mul.ref(0, 34)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(xennet_stats, $mul.ref(0, 34)), $mul.ref(0, 34)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(xennet_stats, $mul.ref(0, 34)), $mul.ref(0, 34)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(xennet_stats, $mul.ref(0, 34)), $mul.ref(0, 34)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(xennet_stats, $mul.ref(0, 34)), $mul.ref(0, 34)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(xennet_stats, $mul.ref(0, 34)), $mul.ref(0, 34)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(xennet_stats, $mul.ref(0, 34)), $mul.ref(0, 34)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(xennet_stats, $mul.ref(0, 34)), $mul.ref(0, 34)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(xennet_stats, $mul.ref(0, 34)), $mul.ref(0, 34)), $mul.ref(32, 1)), 56);
    $M.93 := $store.i8($M.93, .str, 37);
    $M.93 := $store.i8($M.93, $add.ref($add.ref(.str, $mul.ref(0, 5)), $mul.ref(1, 1)), 108);
    $M.93 := $store.i8($M.93, $add.ref($add.ref(.str, $mul.ref(0, 5)), $mul.ref(2, 1)), 117);
    $M.93 := $store.i8($M.93, $add.ref($add.ref(.str, $mul.ref(0, 5)), $mul.ref(3, 1)), 10);
    $M.93 := $store.i8($M.93, $add.ref($add.ref(.str, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.94 := $store.i8($M.94, .str.67, 37);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(.str.67, $mul.ref(0, 12)), $mul.ref(1, 1)), 115);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(.str.67, $mul.ref(0, 12)), $mul.ref(2, 1)), 47);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(.str.67, $mul.ref(0, 12)), $mul.ref(3, 1)), 113);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(.str.67, $mul.ref(0, 12)), $mul.ref(4, 1)), 117);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(.str.67, $mul.ref(0, 12)), $mul.ref(5, 1)), 101);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(.str.67, $mul.ref(0, 12)), $mul.ref(6, 1)), 117);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(.str.67, $mul.ref(0, 12)), $mul.ref(7, 1)), 101);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(.str.67, $mul.ref(0, 12)), $mul.ref(8, 1)), 45);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(.str.67, $mul.ref(0, 12)), $mul.ref(9, 1)), 37);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(.str.67, $mul.ref(0, 12)), $mul.ref(10, 1)), 117);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(.str.67, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.95 := $store.i8($M.95, .str.64, 37);
    $M.95 := $store.i8($M.95, $add.ref($add.ref(.str.64, $mul.ref(0, 6)), $mul.ref(1, 1)), 115);
    $M.95 := $store.i8($M.95, $add.ref($add.ref(.str.64, $mul.ref(0, 6)), $mul.ref(2, 1)), 45);
    $M.95 := $store.i8($M.95, $add.ref($add.ref(.str.64, $mul.ref(0, 6)), $mul.ref(3, 1)), 116);
    $M.95 := $store.i8($M.95, $add.ref($add.ref(.str.64, $mul.ref(0, 6)), $mul.ref(4, 1)), 120);
    $M.95 := $store.i8($M.95, $add.ref($add.ref(.str.64, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.96 := $store.i8($M.96, .str.65, 37);
    $M.96 := $store.i8($M.96, $add.ref($add.ref(.str.65, $mul.ref(0, 6)), $mul.ref(1, 1)), 115);
    $M.96 := $store.i8($M.96, $add.ref($add.ref(.str.65, $mul.ref(0, 6)), $mul.ref(2, 1)), 45);
    $M.96 := $store.i8($M.96, $add.ref($add.ref(.str.65, $mul.ref(0, 6)), $mul.ref(3, 1)), 114);
    $M.96 := $store.i8($M.96, $add.ref($add.ref(.str.65, $mul.ref(0, 6)), $mul.ref(4, 1)), 120);
    $M.96 := $store.i8($M.96, $add.ref($add.ref(.str.65, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.97 := $store.i8($M.97, .str.50, 37);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(.str.50, $mul.ref(0, 7)), $mul.ref(1, 1)), 115);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(.str.50, $mul.ref(0, 7)), $mul.ref(2, 1)), 45);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(.str.50, $mul.ref(0, 7)), $mul.ref(3, 1)), 113);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(.str.50, $mul.ref(0, 7)), $mul.ref(4, 1)), 37);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(.str.50, $mul.ref(0, 7)), $mul.ref(5, 1)), 117);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(.str.50, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    call {:si_unique_call 2767} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 480484);

procedure devirtbounce(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 481516);

procedure devirtbounce.1(funcPtr: ref);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 482548);

procedure devirtbounce.2(funcPtr: ref, arg: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: ref) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 483580);

procedure devirtbounce.3(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: ref);
  free requires assertsPassed;



implementation devirtbounce.3(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 484612);

procedure devirtbounce.4(funcPtr: ref, arg: ref, arg1: i32, arg2: i64);
  free requires assertsPassed;



implementation devirtbounce.4(funcPtr: ref, arg: ref, arg1: i32, arg2: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 485644);

procedure devirtbounce.5(funcPtr: ref, arg: ref, arg1: i64, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.5(funcPtr: ref, arg: ref, arg1: i64, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 486676);

procedure devirtbounce.6(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;



implementation devirtbounce.6(funcPtr: ref, arg: ref, arg1: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: i64;

procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.16, $M.18, $M.20, $M.22, $M.46, $M.47, $M.45, $M.15, $M.17, $M.19, $M.21, $M.49, $M.50, $M.51, $M.52, $M.53, $M.54, $M.30, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.64, $M.65, $M.14, $M.66, $M.0, $M.35, $M.93, $M.94, $M.95, $M.96, $M.97, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 2768} __SMACK_static_init();
    call {:si_unique_call 2769} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.0, $M.53, $M.54, $M.30, $M.55, $M.16, $M.18, $M.20, $M.22, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.62, $M.63, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.64, $M.65, $M.46, $M.47, $M.50, $M.51, $M.52, $M.49, $M.45, $M.15, $M.17, $M.19, $M.21, $M.14, $M.66, $M.35, $M.93, $M.94, $M.95, $M.96, $M.97, $CurrAddr, $M.12, $M.31, $M.32, $M.33, $M.34, $M.36, $M.37, $M.39, $M.41, $M.43, $M.42, $M.44;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation xennet_open_loop_$bb4(in_$p0: ref, in_$p2: ref, in_$i4: i32, in_$p7: ref, in_$p8: ref, in_$i9: i64, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$i13: i1, in_$i14: i8, in_$i15: i1, in_$p17: ref, in_$i18: i32, in_$i19: i32, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$i28: i32, in_$p30: ref, in_$i31: i32, in_$i32: i1, in_$p33: ref, in_$p34: ref, in_$i35: i32, in_$i36: i1, in_$i6: i32) returns (out_$p7: ref, out_$p8: ref, out_$i9: i64, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$i13: i1, out_$i14: i8, out_$i15: i1, out_$p17: ref, out_$i18: i32, out_$i19: i32, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$i28: i32, out_$p30: ref, out_$i31: i32, out_$i32: i1, out_$p33: ref, out_$p34: ref, out_$i35: i32, out_$i36: i1, out_$i6: i32)
{

  entry:
    out_$p7, out_$p8, out_$i9, out_$p10, out_$p11, out_$p12, out_$i13, out_$i14, out_$i15, out_$p17, out_$i18, out_$i19, out_$p21, out_$p22, out_$p23, out_$p25, out_$p26, out_$p27, out_$i28, out_$p30, out_$i31, out_$i32, out_$p33, out_$p34, out_$i35, out_$i36, out_$i6 := in_$p7, in_$p8, in_$i9, in_$p10, in_$p11, in_$p12, in_$i13, in_$i14, in_$i15, in_$p17, in_$i18, in_$i19, in_$p21, in_$p22, in_$p23, in_$p25, in_$p26, in_$p27, in_$i28, in_$p30, in_$i31, in_$i32, in_$p33, in_$p34, in_$i35, in_$i36, in_$i6;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_10;

  $bb12:
    assume out_$i36 == 1;
    assume {:verifier.code 0} true;
    out_$i6 := out_$i35;
    goto $bb12_dummy;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    out_$i36 := $ult.i32(out_$i35, in_$i4);
    goto corral_source_split_48;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    out_$i35 := $add.i32(out_$i6, 1);
    call {:si_unique_call 10} {:cexpr "i"} boogie_si_record_i32(out_$i35);
    goto corral_source_split_47;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 9} spin_unlock_bh(out_$p34);
    goto corral_source_split_46;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(out_$p8, $mul.ref(out_$i9, 8944)), $mul.ref(5632, 1));
    goto corral_source_split_45;

  $bb7:
    assume !(out_$i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb9:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 8} napi_schedule(out_$p33);
    goto corral_source_split_43;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(out_$p8, $mul.ref(out_$i9, 8944)), $mul.ref(40, 1));
    goto corral_source_split_42;

  $bb8:
    assume out_$i32 == 1;
    goto corral_source_split_41;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    out_$i32 := $ne.i32(out_$i28, out_$i31);
    goto corral_source_split_39;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i32($M.0, out_$p30);
    goto corral_source_split_38;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref($add.ref(out_$p8, $mul.ref(out_$i9, 8944)), $mul.ref(5704, 1)), $mul.ref(4, 1));
    goto corral_source_split_37;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i32($M.0, out_$p27);
    goto corral_source_split_36;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p26, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_35;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    out_$p26 := $load.ref($M.0, out_$p25);
    goto corral_source_split_34;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref($add.ref(out_$p8, $mul.ref(out_$i9, 8944)), $mul.ref(5704, 1)), $mul.ref(16, 1));
    goto corral_source_split_33;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p23, out_$i19);
    goto corral_source_split_32;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p22, $mul.ref(0, 72)), $mul.ref(12, 1));
    goto corral_source_split_31;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    out_$p22 := $load.ref($M.0, out_$p21);
    goto corral_source_split_30;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref($add.ref(out_$p8, $mul.ref(out_$i9, 8944)), $mul.ref(5704, 1)), $mul.ref(16, 1));
    goto corral_source_split_29;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    out_$i19 := $add.i32(out_$i18, 1);
    goto corral_source_split_28;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    out_$i18 := $load.i32($M.0, out_$p17);
    goto corral_source_split_27;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref($add.ref(out_$p8, $mul.ref(out_$i9, 8944)), $mul.ref(5704, 1)), $mul.ref(4, 1));
    goto corral_source_split_26;

  SeqInstr_3:
    goto corral_source_split_25;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} xennet_alloc_rx_buffers(out_$p10);
    goto SeqInstr_2;

  $bb6:
    assume out_$i15 == 1;
    goto corral_source_split_24;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    out_$i15 := $trunc.i8.i1(out_$i14);
    goto corral_source_split_22;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    out_$i14 := $zext.i1.i8(out_$i13);
    call {:si_unique_call 6} {:cexpr "tmp___0"} boogie_si_record_i8(out_$i14);
    goto corral_source_split_21;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5} out_$i13 := netif_carrier_ok(in_$p0);
    goto corral_source_split_20;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4} spin_lock_bh(out_$p12);
    goto corral_source_split_19;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(out_$p8, $mul.ref(out_$i9, 8944)), $mul.ref(5632, 1));
    goto corral_source_split_18;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3} napi_enable(out_$p11);
    goto corral_source_split_17;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(out_$p8, $mul.ref(out_$i9, 8944)), $mul.ref(40, 1));
    goto corral_source_split_16;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref(out_$p8, $mul.ref(out_$i9, 8944));
    goto corral_source_split_15;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    out_$i9 := $zext.i32.i64(out_$i6);
    goto corral_source_split_14;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    out_$p8 := $load.ref($M.0, out_$p7);
    goto corral_source_split_13;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_12;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb12_dummy:
    call {:si_unique_call 1} out_$p7, out_$p8, out_$i9, out_$p10, out_$p11, out_$p12, out_$i13, out_$i14, out_$i15, out_$p17, out_$i18, out_$i19, out_$p21, out_$p22, out_$p23, out_$p25, out_$p26, out_$p27, out_$i28, out_$p30, out_$i31, out_$i32, out_$p33, out_$p34, out_$i35, out_$i36, out_$i6 := xennet_open_loop_$bb4(in_$p0, in_$p2, in_$i4, out_$p7, out_$p8, out_$i9, out_$p10, out_$p11, out_$p12, out_$i13, out_$i14, out_$i15, out_$p17, out_$i18, out_$i19, out_$p21, out_$p22, out_$p23, out_$p25, out_$p26, out_$p27, out_$i28, out_$p30, out_$i31, out_$i32, out_$p33, out_$p34, out_$i35, out_$i36, out_$i6);
    return;

  exit:
    return;
}



procedure xennet_open_loop_$bb4(in_$p0: ref, in_$p2: ref, in_$i4: i32, in_$p7: ref, in_$p8: ref, in_$i9: i64, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$i13: i1, in_$i14: i8, in_$i15: i1, in_$p17: ref, in_$i18: i32, in_$i19: i32, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$i28: i32, in_$p30: ref, in_$i31: i32, in_$i32: i1, in_$p33: ref, in_$p34: ref, in_$i35: i32, in_$i36: i1, in_$i6: i32) returns (out_$p7: ref, out_$p8: ref, out_$i9: i64, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$i13: i1, out_$i14: i8, out_$i15: i1, out_$p17: ref, out_$i18: i32, out_$i19: i32, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$i28: i32, out_$p30: ref, out_$i31: i32, out_$i32: i1, out_$p33: ref, out_$p34: ref, out_$i35: i32, out_$i36: i1, out_$i6: i32);
  modifies $M.14, $CurrAddr, $M.0, $M.15, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, assertsPassed;



implementation xennet_close_loop_$bb4(in_$p2: ref, in_$i4: i32, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$p13: ref, in_$i14: i32, in_$i15: i1, in_$i8: i32) returns (out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$p13: ref, out_$i14: i32, out_$i15: i1, out_$i8: i32)
{

  entry:
    out_$p9, out_$p10, out_$i11, out_$p13, out_$i14, out_$i15, out_$i8 := in_$p9, in_$p10, in_$i11, in_$p13, in_$i14, in_$i15, in_$i8;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_66;

  $bb6:
    assume out_$i15 == 1;
    assume {:verifier.code 0} true;
    out_$i8 := out_$i14;
    goto $bb6_dummy;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    out_$i15 := $ult.i32(out_$i14, in_$i4);
    goto corral_source_split_75;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    out_$i14 := $add.i32(out_$i8, 1);
    call {:si_unique_call 16} {:cexpr "i"} boogie_si_record_i32(out_$i14);
    goto corral_source_split_74;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} napi_disable(out_$p13);
    goto corral_source_split_73;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(out_$p10, $mul.ref(out_$i11, 8944)), $mul.ref(40, 1));
    goto corral_source_split_72;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    goto corral_source_split_71;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    out_$i11 := $zext.i32.i64(out_$i8);
    goto corral_source_split_70;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    out_$p10 := $load.ref($M.0, out_$p9);
    goto corral_source_split_69;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_68;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p9, out_$p10, out_$i11, out_$p13, out_$i14, out_$i15, out_$i8 := xennet_close_loop_$bb4(in_$p2, in_$i4, out_$p9, out_$p10, out_$i11, out_$p13, out_$i14, out_$i15, out_$i8);
    return;

  exit:
    return;
}



procedure xennet_close_loop_$bb4(in_$p2: ref, in_$i4: i32, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$p13: ref, in_$i14: i32, in_$i15: i1, in_$i8: i32) returns (out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$p13: ref, out_$i14: i32, out_$i15: i1, out_$i8: i32);



implementation xennet_start_xmit_loop_$bb57(in_$p0: ref, in_$p16: ref, in_$p190: ref, in_$p191: ref, in_$p192: ref, in_$p193: ref, in_$i194: i64, in_$p195: ref, in_$i196: i32, in_$p197: ref, in_$p198: ref, in_$i199: i32, in_$p200: ref, in_$i201: i32, in_$p202: ref, in_$p203: ref, in_$p204: ref, in_$i205: i8, in_$i206: i32, in_$i207: i1, in_$p188: ref, in_$i189: i32) returns (out_$p190: ref, out_$p191: ref, out_$p192: ref, out_$p193: ref, out_$i194: i64, out_$p195: ref, out_$i196: i32, out_$p197: ref, out_$p198: ref, out_$i199: i32, out_$p200: ref, out_$i201: i32, out_$p202: ref, out_$p203: ref, out_$p204: ref, out_$i205: i8, out_$i206: i32, out_$i207: i1, out_$p188: ref, out_$i189: i32)
{

  entry:
    out_$p190, out_$p191, out_$p192, out_$p193, out_$i194, out_$p195, out_$i196, out_$p197, out_$p198, out_$i199, out_$p200, out_$i201, out_$p202, out_$p203, out_$p204, out_$i205, out_$i206, out_$i207, out_$p188, out_$i189 := in_$p190, in_$p191, in_$p192, in_$p193, in_$i194, in_$p195, in_$i196, in_$p197, in_$p198, in_$i199, in_$p200, in_$i201, in_$p202, in_$p203, in_$p204, in_$i205, in_$i206, in_$i207, in_$p188, in_$i189;
    goto $bb57, exit;

  $bb57:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_337;

  $bb59:
    assume out_$i207 == 1;
    assume {:verifier.code 0} true;
    out_$p188, out_$i189 := out_$p200, out_$i201;
    goto $bb59_dummy;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    out_$i207 := $ugt.i32(out_$i206, out_$i201);
    goto corral_source_split_356;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    out_$i206 := $zext.i8.i32(out_$i205);
    goto corral_source_split_355;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    out_$i205 := $load.i8($M.0, out_$p204);
    goto corral_source_split_354;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    out_$p204 := $add.ref($add.ref(out_$p203, $mul.ref(0, 320)), $mul.ref(0, 1));
    goto corral_source_split_353;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    out_$p203 := $bitcast.ref.ref(out_$p202);
    goto corral_source_split_352;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 72} out_$p202 := skb_end_pointer(in_$p0);
    goto corral_source_split_351;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    out_$i201 := $add.i32(out_$i189, 1);
    call {:si_unique_call 71} {:cexpr "i"} boogie_si_record_i32(out_$i201);
    goto corral_source_split_350;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 70} out_$p200 := xennet_make_txreqs(in_$p16, out_$p188, in_$p0, out_$p197, out_$i199, out_$i196);
    goto corral_source_split_349;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    out_$i199 := $load.i32($M.0, out_$p198);
    goto corral_source_split_348;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    out_$p198 := $add.ref($add.ref(out_$p193, $mul.ref(out_$i194, 16)), $mul.ref(8, 1));
    goto corral_source_split_347;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 69} out_$p197 := skb_frag_page(out_$p195);
    goto corral_source_split_346;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} out_$i196 := skb_frag_size(out_$p195);
    call {:si_unique_call 68} {:cexpr "tmp___20"} boogie_si_record_i32(out_$i196);
    goto corral_source_split_345;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    out_$p195 := $add.ref(out_$p193, $mul.ref(out_$i194, 16));
    goto corral_source_split_344;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    out_$i194 := $zext.i32.i64(out_$i189);
    goto corral_source_split_343;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    out_$p193 := $bitcast.ref.ref(out_$p192);
    goto corral_source_split_342;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    out_$p192 := $add.ref($add.ref(out_$p191, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_341;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    out_$p191 := $bitcast.ref.ref(out_$p190);
    goto corral_source_split_340;

  $bb58:
    assume {:verifier.code 0} true;
    call {:si_unique_call 66} out_$p190 := skb_end_pointer(in_$p0);
    goto corral_source_split_339;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb59_dummy:
    call {:si_unique_call 1} out_$p190, out_$p191, out_$p192, out_$p193, out_$i194, out_$p195, out_$i196, out_$p197, out_$p198, out_$i199, out_$p200, out_$i201, out_$p202, out_$p203, out_$p204, out_$i205, out_$i206, out_$i207, out_$p188, out_$i189 := xennet_start_xmit_loop_$bb57(in_$p0, in_$p16, out_$p190, out_$p191, out_$p192, out_$p193, out_$i194, out_$p195, out_$i196, out_$p197, out_$p198, out_$i199, out_$p200, out_$i201, out_$p202, out_$p203, out_$p204, out_$i205, out_$i206, out_$i207, out_$p188, out_$i189);
    return;

  exit:
    return;
}



procedure xennet_start_xmit_loop_$bb57(in_$p0: ref, in_$p16: ref, in_$p190: ref, in_$p191: ref, in_$p192: ref, in_$p193: ref, in_$i194: i64, in_$p195: ref, in_$i196: i32, in_$p197: ref, in_$p198: ref, in_$i199: i32, in_$p200: ref, in_$i201: i32, in_$p202: ref, in_$p203: ref, in_$p204: ref, in_$i205: i8, in_$i206: i32, in_$i207: i1, in_$p188: ref, in_$i189: i32) returns (out_$p190: ref, out_$p191: ref, out_$p192: ref, out_$p193: ref, out_$i194: i64, out_$p195: ref, out_$i196: i32, out_$p197: ref, out_$p198: ref, out_$i199: i32, out_$p200: ref, out_$i201: i32, out_$p202: ref, out_$p203: ref, out_$p204: ref, out_$i205: i8, out_$i206: i32, out_$i207: i1, out_$p188: ref, out_$i189: i32);
  modifies $M.0;



implementation xennet_get_stats64_loop_$bb10(in_$p16: ref, in_$p37: ref, in_$i38: i32, in_$p39: ref, in_$i40: i64, in_$p41: ref, in_$i42: i64, in_$p43: ref, in_$i44: i1, in_$i45: i8, in_$i46: i1, in_$i47: i64, in_$i48: i64) returns (out_$p37: ref, out_$i38: i32, out_$p39: ref, out_$i40: i64, out_$p41: ref, out_$i42: i64, out_$p43: ref, out_$i44: i1, out_$i45: i8, out_$i46: i1, out_$i47: i64, out_$i48: i64)
{

  entry:
    out_$p37, out_$i38, out_$p39, out_$i40, out_$p41, out_$i42, out_$p43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48 := in_$p37, in_$i38, in_$p39, in_$i40, in_$p41, in_$i42, in_$p43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i48;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(in_$p16, $mul.ref(0, 16)), $mul.ref(16, 1));
    goto corral_source_split_491;

  $bb11:
    assume {:verifier.code 0} true;
    assume out_$i46 == 1;
    goto $bb11_dummy;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    out_$i47, out_$i48 := out_$i40, out_$i42;
    assume true;
    goto $bb11;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    out_$i46 := $trunc.i8.i1(out_$i45);
    goto corral_source_split_500;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    out_$i45 := $zext.i1.i8(out_$i44);
    call {:si_unique_call 117} {:cexpr "tmp___1"} boogie_si_record_i8(out_$i45);
    goto corral_source_split_499;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} out_$i44 := u64_stats_fetch_retry_irq(out_$p43, out_$i38);
    goto corral_source_split_498;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(in_$p16, $mul.ref(0, 16)), $mul.ref(16, 1));
    goto corral_source_split_497;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i64($M.0, out_$p41);
    call {:si_unique_call 115} {:cexpr "rx_bytes"} boogie_si_record_i64(out_$i42);
    goto corral_source_split_496;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(in_$p16, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_495;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    out_$i40 := $load.i64($M.0, out_$p39);
    call {:si_unique_call 114} {:cexpr "rx_packets"} boogie_si_record_i64(out_$i40);
    goto corral_source_split_494;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(in_$p16, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_493;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 112} out_$i38 := u64_stats_fetch_begin_irq(out_$p37);
    call {:si_unique_call 113} {:cexpr "start"} boogie_si_record_i32(out_$i38);
    goto corral_source_split_492;

  $bb11_dummy:
    call {:si_unique_call 1} out_$p37, out_$i38, out_$p39, out_$i40, out_$p41, out_$i42, out_$p43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48 := xennet_get_stats64_loop_$bb10(in_$p16, out_$p37, out_$i38, out_$p39, out_$i40, out_$p41, out_$i42, out_$p43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48);
    return;

  exit:
    return;
}



procedure xennet_get_stats64_loop_$bb10(in_$p16: ref, in_$p37: ref, in_$i38: i32, in_$p39: ref, in_$i40: i64, in_$p41: ref, in_$i42: i64, in_$p43: ref, in_$i44: i1, in_$i45: i8, in_$i46: i1, in_$i47: i64, in_$i48: i64) returns (out_$p37: ref, out_$i38: i32, out_$p39: ref, out_$i40: i64, out_$p41: ref, out_$i42: i64, out_$p43: ref, out_$i44: i1, out_$i45: i8, out_$i46: i1, out_$i47: i64, out_$i48: i64);



implementation xennet_get_stats64_loop_$bb6(in_$p24: ref, in_$p25: ref, in_$i26: i32, in_$p27: ref, in_$i28: i64, in_$p29: ref, in_$i30: i64, in_$p31: ref, in_$i32: i1, in_$i33: i8, in_$i34: i1, in_$i35: i64, in_$i36: i64) returns (out_$p25: ref, out_$i26: i32, out_$p27: ref, out_$i28: i64, out_$p29: ref, out_$i30: i64, out_$p31: ref, out_$i32: i1, out_$i33: i8, out_$i34: i1, out_$i35: i64, out_$i36: i64)
{

  entry:
    out_$p25, out_$i26, out_$p27, out_$i28, out_$p29, out_$i30, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36 := in_$p25, in_$i26, in_$p27, in_$i28, in_$p29, in_$i30, in_$p31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36;
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(in_$p24, $mul.ref(0, 16)), $mul.ref(16, 1));
    goto corral_source_split_480;

  $bb7:
    assume {:verifier.code 0} true;
    assume out_$i34 == 1;
    goto $bb7_dummy;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    out_$i35, out_$i36 := out_$i28, out_$i30;
    assume true;
    goto $bb7;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    out_$i34 := $trunc.i8.i1(out_$i33);
    goto corral_source_split_489;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    out_$i33 := $zext.i1.i8(out_$i32);
    call {:si_unique_call 111} {:cexpr "tmp___0"} boogie_si_record_i8(out_$i33);
    goto corral_source_split_488;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 110} out_$i32 := u64_stats_fetch_retry_irq(out_$p31, out_$i26);
    goto corral_source_split_487;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(in_$p24, $mul.ref(0, 16)), $mul.ref(16, 1));
    goto corral_source_split_486;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i64($M.0, out_$p29);
    call {:si_unique_call 109} {:cexpr "tx_bytes"} boogie_si_record_i64(out_$i30);
    goto corral_source_split_485;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(in_$p24, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_484;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i64($M.0, out_$p27);
    call {:si_unique_call 108} {:cexpr "tx_packets"} boogie_si_record_i64(out_$i28);
    goto corral_source_split_483;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(in_$p24, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_482;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 106} out_$i26 := u64_stats_fetch_begin_irq(out_$p25);
    call {:si_unique_call 107} {:cexpr "start"} boogie_si_record_i32(out_$i26);
    goto corral_source_split_481;

  $bb7_dummy:
    call {:si_unique_call 1} out_$p25, out_$i26, out_$p27, out_$i28, out_$p29, out_$i30, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36 := xennet_get_stats64_loop_$bb6(in_$p24, out_$p25, out_$i26, out_$p27, out_$i28, out_$p29, out_$i30, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36);
    return;

  exit:
    return;
}



procedure xennet_get_stats64_loop_$bb6(in_$p24: ref, in_$p25: ref, in_$i26: i32, in_$p27: ref, in_$i28: i64, in_$p29: ref, in_$i30: i64, in_$p31: ref, in_$i32: i1, in_$i33: i8, in_$i34: i1, in_$i35: i64, in_$i36: i64) returns (out_$p25: ref, out_$i26: i32, out_$p27: ref, out_$i28: i64, out_$p29: ref, out_$i30: i64, out_$p31: ref, out_$i32: i1, out_$i33: i8, out_$i34: i1, out_$i35: i64, out_$i36: i64);



implementation xennet_get_stats64_loop_$bb4(in_$p1: ref, in_$p3: ref, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$i12: i64, in_$p13: ref, in_$i14: i64, in_$i15: i64, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$i20: i64, in_$p21: ref, in_$i22: i64, in_$i23: i64, in_$p24: ref, in_$p25: ref, in_$i26: i32, in_$p27: ref, in_$i28: i64, in_$p29: ref, in_$i30: i64, in_$p31: ref, in_$i32: i1, in_$i33: i8, in_$i34: i1, in_$i35: i64, in_$i36: i64, in_$p37: ref, in_$i38: i32, in_$p39: ref, in_$i40: i64, in_$p41: ref, in_$i42: i64, in_$p43: ref, in_$i44: i1, in_$i45: i8, in_$i46: i1, in_$i47: i64, in_$i48: i64, in_$p49: ref, in_$i50: i64, in_$i51: i64, in_$p52: ref, in_$p53: ref, in_$i54: i64, in_$i55: i64, in_$p56: ref, in_$p57: ref, in_$i58: i64, in_$i59: i64, in_$p60: ref, in_$p61: ref, in_$i62: i64, in_$i63: i64, in_$p64: ref, in_$p65: ref, in_$i66: i32, in_$i67: i32, in_$i68: i1, in_$i8: i32) returns (out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$i12: i64, out_$p13: ref, out_$i14: i64, out_$i15: i64, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$i20: i64, out_$p21: ref, out_$i22: i64, out_$i23: i64, out_$p24: ref, out_$p25: ref, out_$i26: i32, out_$p27: ref, out_$i28: i64, out_$p29: ref, out_$i30: i64, out_$p31: ref, out_$i32: i1, out_$i33: i8, out_$i34: i1, out_$i35: i64, out_$i36: i64, out_$p37: ref, out_$i38: i32, out_$p39: ref, out_$i40: i64, out_$p41: ref, out_$i42: i64, out_$p43: ref, out_$i44: i1, out_$i45: i8, out_$i46: i1, out_$i47: i64, out_$i48: i64, out_$p49: ref, out_$i50: i64, out_$i51: i64, out_$p52: ref, out_$p53: ref, out_$i54: i64, out_$i55: i64, out_$p56: ref, out_$p57: ref, out_$i58: i64, out_$i59: i64, out_$p60: ref, out_$p61: ref, out_$i62: i64, out_$i63: i64, out_$p64: ref, out_$p65: ref, out_$i66: i32, out_$i67: i32, out_$i68: i1, out_$i8: i32)
{

  entry:
    out_$p9, out_$p10, out_$i11, out_$i12, out_$p13, out_$i14, out_$i15, out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$p21, out_$i22, out_$i23, out_$p24, out_$p25, out_$i26, out_$p27, out_$i28, out_$p29, out_$i30, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$p37, out_$i38, out_$p39, out_$i40, out_$p41, out_$i42, out_$p43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$p49, out_$i50, out_$i51, out_$p52, out_$p53, out_$i54, out_$i55, out_$p56, out_$p57, out_$i58, out_$i59, out_$p60, out_$p61, out_$i62, out_$i63, out_$p64, out_$p65, out_$i66, out_$i67, out_$i68, out_$i8 := in_$p9, in_$p10, in_$i11, in_$i12, in_$p13, in_$i14, in_$i15, in_$p16, in_$p17, in_$p18, in_$i19, in_$i20, in_$p21, in_$i22, in_$i23, in_$p24, in_$p25, in_$i26, in_$p27, in_$i28, in_$p29, in_$i30, in_$p31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$p37, in_$i38, in_$p39, in_$i40, in_$p41, in_$i42, in_$p43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i48, in_$p49, in_$i50, in_$i51, in_$p52, in_$p53, in_$i54, in_$i55, in_$p56, in_$p57, in_$i58, in_$i59, in_$p60, in_$p61, in_$i62, in_$i63, in_$p64, in_$p65, in_$i66, in_$i67, in_$i68, in_$i8;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_463;

  $bb14:
    assume out_$i68 == 1;
    assume {:verifier.code 0} true;
    out_$i8 := out_$i66;
    goto $bb14_dummy;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    out_$i68 := $slt.i32(out_$i66, out_$i67);
    goto corral_source_split_525;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    out_$i67 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_524;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 118} out_$i66 := cpumask_next(out_$i8, out_$p65);
    call {:si_unique_call 119} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i66);
    goto corral_source_split_523;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    out_$p65 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_522;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p64, out_$i63);
    goto corral_source_split_521;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(in_$p1, $mul.ref(0, 184)), $mul.ref(24, 1));
    goto corral_source_split_520;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    out_$i63 := $add.i64(out_$i62, out_$i36);
    goto corral_source_split_519;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    out_$i62 := $load.i64($M.0, out_$p61);
    goto corral_source_split_518;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(in_$p1, $mul.ref(0, 184)), $mul.ref(24, 1));
    goto corral_source_split_517;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p60, out_$i59);
    goto corral_source_split_516;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(in_$p1, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_515;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    out_$i59 := $add.i64(out_$i58, out_$i48);
    goto corral_source_split_514;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    out_$i58 := $load.i64($M.0, out_$p57);
    goto corral_source_split_513;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(in_$p1, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_512;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p56, out_$i55);
    goto corral_source_split_511;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(in_$p1, $mul.ref(0, 184)), $mul.ref(8, 1));
    goto corral_source_split_510;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    out_$i55 := $add.i64(out_$i54, out_$i35);
    goto corral_source_split_509;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    out_$i54 := $load.i64($M.0, out_$p53);
    goto corral_source_split_508;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(in_$p1, $mul.ref(0, 184)), $mul.ref(8, 1));
    goto corral_source_split_507;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p52, out_$i51);
    goto corral_source_split_506;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(in_$p1, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_505;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    out_$i51 := $add.i64(out_$i50, out_$i47);
    goto corral_source_split_504;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    out_$i50 := $load.i64($M.0, out_$p49);
    goto corral_source_split_503;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(in_$p1, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_502;

  $bb12:
    assume !(out_$i46 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    out_$i47, out_$i48 := out_$i40, out_$i42;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    out_$i46 := $trunc.i8.i1(out_$i45);
    goto corral_source_split_500;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    out_$i45 := $zext.i1.i8(out_$i44);
    call {:si_unique_call 117} {:cexpr "tmp___1"} boogie_si_record_i8(out_$i45);
    goto corral_source_split_499;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} out_$i44 := u64_stats_fetch_retry_irq(out_$p43, out_$i38);
    goto corral_source_split_498;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(out_$p16, $mul.ref(0, 16)), $mul.ref(16, 1));
    goto corral_source_split_497;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i64($M.0, out_$p41);
    call {:si_unique_call 115} {:cexpr "rx_bytes"} boogie_si_record_i64(out_$i42);
    goto corral_source_split_496;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(out_$p16, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_495;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    out_$i40 := $load.i64($M.0, out_$p39);
    call {:si_unique_call 114} {:cexpr "rx_packets"} boogie_si_record_i64(out_$i40);
    goto corral_source_split_494;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(out_$p16, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_493;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 112} out_$i38 := u64_stats_fetch_begin_irq(out_$p37);
    call {:si_unique_call 113} {:cexpr "start"} boogie_si_record_i32(out_$i38);
    goto corral_source_split_492;

  $bb10:
    call out_$p37, out_$i38, out_$p39, out_$i40, out_$p41, out_$i42, out_$p43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48 := xennet_get_stats64_loop_$bb10(out_$p16, out_$p37, out_$i38, out_$p39, out_$i40, out_$p41, out_$i42, out_$p43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48);
    goto $bb10_last;

  $bb10_last:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(out_$p16, $mul.ref(0, 16)), $mul.ref(16, 1));
    goto corral_source_split_491;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb11:
    assume {:verifier.code 0} true;
    assume out_$i46 == 1;
    assume false;
    return;

  $bb8:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    out_$i35, out_$i36 := out_$i28, out_$i30;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    out_$i34 := $trunc.i8.i1(out_$i33);
    goto corral_source_split_489;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    out_$i33 := $zext.i1.i8(out_$i32);
    call {:si_unique_call 111} {:cexpr "tmp___0"} boogie_si_record_i8(out_$i33);
    goto corral_source_split_488;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 110} out_$i32 := u64_stats_fetch_retry_irq(out_$p31, out_$i26);
    goto corral_source_split_487;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(out_$p24, $mul.ref(0, 16)), $mul.ref(16, 1));
    goto corral_source_split_486;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i64($M.0, out_$p29);
    call {:si_unique_call 109} {:cexpr "tx_bytes"} boogie_si_record_i64(out_$i30);
    goto corral_source_split_485;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p24, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_484;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i64($M.0, out_$p27);
    call {:si_unique_call 108} {:cexpr "tx_packets"} boogie_si_record_i64(out_$i28);
    goto corral_source_split_483;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p24, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_482;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 106} out_$i26 := u64_stats_fetch_begin_irq(out_$p25);
    call {:si_unique_call 107} {:cexpr "start"} boogie_si_record_i32(out_$i26);
    goto corral_source_split_481;

  $bb6:
    call out_$p25, out_$i26, out_$p27, out_$i28, out_$p29, out_$i30, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36 := xennet_get_stats64_loop_$bb6(out_$p24, out_$p25, out_$i26, out_$p27, out_$i28, out_$p29, out_$i30, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36);
    goto $bb6_last;

  $bb6_last:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(out_$p24, $mul.ref(0, 16)), $mul.ref(16, 1));
    goto corral_source_split_480;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb7:
    assume {:verifier.code 0} true;
    assume out_$i34 == 1;
    assume false;
    return;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    out_$p24 := $i2p.i64.ref(out_$i23);
    goto corral_source_split_478;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    out_$i23 := $add.i64(out_$i22, out_$i19);
    goto corral_source_split_477;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    out_$i22 := $load.i64($M.0, out_$p21);
    goto corral_source_split_476;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref(out_$i20, 8));
    goto corral_source_split_475;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    out_$i20 := $sext.i32.i64(out_$i8);
    goto corral_source_split_474;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.0, out_$p17);
    call {:si_unique_call 104} out_$i19 := devirtbounce.2(0, out_$p18);
    call {:si_unique_call 105} {:cexpr "__ptr___0"} boogie_si_record_i64(out_$i19);
    goto corral_source_split_473;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(in_$p3, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_472;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    out_$p16 := $i2p.i64.ref(out_$i15);
    goto corral_source_split_471;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    out_$i15 := $add.i64(out_$i14, out_$i11);
    goto corral_source_split_470;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    out_$i14 := $load.i64($M.0, out_$p13);
    goto corral_source_split_469;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref(out_$i12, 8));
    goto corral_source_split_468;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    out_$i12 := $sext.i32.i64(out_$i8);
    goto corral_source_split_467;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    out_$p10 := $load.ref($M.0, out_$p9);
    call {:si_unique_call 102} out_$i11 := devirtbounce.2(0, out_$p10);
    call {:si_unique_call 103} {:cexpr "__ptr"} boogie_si_record_i64(out_$i11);
    goto corral_source_split_466;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(in_$p3, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_465;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb14_dummy:
    call {:si_unique_call 1} out_$p9, out_$p10, out_$i11, out_$i12, out_$p13, out_$i14, out_$i15, out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$p21, out_$i22, out_$i23, out_$p24, out_$p25, out_$i26, out_$p27, out_$i28, out_$p29, out_$i30, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$p37, out_$i38, out_$p39, out_$i40, out_$p41, out_$i42, out_$p43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$p49, out_$i50, out_$i51, out_$p52, out_$p53, out_$i54, out_$i55, out_$p56, out_$p57, out_$i58, out_$i59, out_$p60, out_$p61, out_$i62, out_$i63, out_$p64, out_$p65, out_$i66, out_$i67, out_$i68, out_$i8 := xennet_get_stats64_loop_$bb4(in_$p1, in_$p3, out_$p9, out_$p10, out_$i11, out_$i12, out_$p13, out_$i14, out_$i15, out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$p21, out_$i22, out_$i23, out_$p24, out_$p25, out_$i26, out_$p27, out_$i28, out_$p29, out_$i30, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$p37, out_$i38, out_$p39, out_$i40, out_$p41, out_$i42, out_$p43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$p49, out_$i50, out_$i51, out_$p52, out_$p53, out_$i54, out_$i55, out_$p56, out_$p57, out_$i58, out_$i59, out_$p60, out_$p61, out_$i62, out_$i63, out_$p64, out_$p65, out_$i66, out_$i67, out_$i68, out_$i8);
    return;

  exit:
    return;
}



procedure xennet_get_stats64_loop_$bb4(in_$p1: ref, in_$p3: ref, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$i12: i64, in_$p13: ref, in_$i14: i64, in_$i15: i64, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$i20: i64, in_$p21: ref, in_$i22: i64, in_$i23: i64, in_$p24: ref, in_$p25: ref, in_$i26: i32, in_$p27: ref, in_$i28: i64, in_$p29: ref, in_$i30: i64, in_$p31: ref, in_$i32: i1, in_$i33: i8, in_$i34: i1, in_$i35: i64, in_$i36: i64, in_$p37: ref, in_$i38: i32, in_$p39: ref, in_$i40: i64, in_$p41: ref, in_$i42: i64, in_$p43: ref, in_$i44: i1, in_$i45: i8, in_$i46: i1, in_$i47: i64, in_$i48: i64, in_$p49: ref, in_$i50: i64, in_$i51: i64, in_$p52: ref, in_$p53: ref, in_$i54: i64, in_$i55: i64, in_$p56: ref, in_$p57: ref, in_$i58: i64, in_$i59: i64, in_$p60: ref, in_$p61: ref, in_$i62: i64, in_$i63: i64, in_$p64: ref, in_$p65: ref, in_$i66: i32, in_$i67: i32, in_$i68: i1, in_$i8: i32) returns (out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$i12: i64, out_$p13: ref, out_$i14: i64, out_$i15: i64, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$i20: i64, out_$p21: ref, out_$i22: i64, out_$i23: i64, out_$p24: ref, out_$p25: ref, out_$i26: i32, out_$p27: ref, out_$i28: i64, out_$p29: ref, out_$i30: i64, out_$p31: ref, out_$i32: i1, out_$i33: i8, out_$i34: i1, out_$i35: i64, out_$i36: i64, out_$p37: ref, out_$i38: i32, out_$p39: ref, out_$i40: i64, out_$p41: ref, out_$i42: i64, out_$p43: ref, out_$i44: i1, out_$i45: i8, out_$i46: i1, out_$i47: i64, out_$i48: i64, out_$p49: ref, out_$i50: i64, out_$i51: i64, out_$p52: ref, out_$p53: ref, out_$i54: i64, out_$i55: i64, out_$p56: ref, out_$p57: ref, out_$i58: i64, out_$i59: i64, out_$p60: ref, out_$p61: ref, out_$i62: i64, out_$i63: i64, out_$p64: ref, out_$p65: ref, out_$i66: i32, out_$i67: i32, out_$i68: i1, out_$i8: i32);
  modifies $M.0;



implementation xennet_poll_controller_loop_$bb4(in_$p2: ref, in_$i4: i32, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$i10: i64, in_$p11: ref, in_$i13: i32, in_$i14: i1, in_$i6: i32, in_vslice_dummy_var_12: i32) returns (out_$p7: ref, out_$p8: ref, out_$p9: ref, out_$i10: i64, out_$p11: ref, out_$i13: i32, out_$i14: i1, out_$i6: i32, out_vslice_dummy_var_12: i32)
{

  entry:
    out_$p7, out_$p8, out_$p9, out_$i10, out_$p11, out_$i13, out_$i14, out_$i6, out_vslice_dummy_var_12 := in_$p7, in_$p8, in_$p9, in_$i10, in_$p11, in_$i13, in_$i14, in_$i6, in_vslice_dummy_var_12;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_547;

  $bb6:
    assume out_$i14 == 1;
    assume {:verifier.code 0} true;
    out_$i6 := out_$i13;
    goto $bb6_dummy;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    out_$i14 := $ult.i32(out_$i13, in_$i4);
    goto corral_source_split_556;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    out_$i13 := $add.i32(out_$i6, 1);
    call {:si_unique_call 123} {:cexpr "i"} boogie_si_record_i32(out_$i13);
    goto corral_source_split_555;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 122} out_vslice_dummy_var_12 := xennet_interrupt(0, out_$p11);
    goto corral_source_split_554;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref(out_$p9, $mul.ref(out_$i10, 1));
    goto corral_source_split_553;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    out_$i10 := $zext.i32.i64(out_$i6);
    goto corral_source_split_552;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    out_$p9 := $bitcast.ref.ref(out_$p8);
    goto corral_source_split_551;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    out_$p8 := $load.ref($M.0, out_$p7);
    goto corral_source_split_550;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_549;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p7, out_$p8, out_$p9, out_$i10, out_$p11, out_$i13, out_$i14, out_$i6, out_vslice_dummy_var_12 := xennet_poll_controller_loop_$bb4(in_$p2, in_$i4, out_$p7, out_$p8, out_$p9, out_$i10, out_$p11, out_$i13, out_$i14, out_$i6, out_vslice_dummy_var_12);
    return;

  exit:
    return;
}



procedure xennet_poll_controller_loop_$bb4(in_$p2: ref, in_$i4: i32, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$i10: i64, in_$p11: ref, in_$i13: i32, in_$i14: i1, in_$i6: i32, in_vslice_dummy_var_12: i32) returns (out_$p7: ref, out_$p8: ref, out_$p9: ref, out_$i10: i64, out_$p11: ref, out_$i13: i32, out_$i14: i1, out_$i6: i32, out_vslice_dummy_var_12: i32);
  modifies $M.14, $M.0, $CurrAddr;



implementation xennet_tx_buf_gc_loop_$bb20()
{

  entry:
    goto $bb20, exit;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb20_dummy;

  $bb20_dummy:
    call {:si_unique_call 1} xennet_tx_buf_gc_loop_$bb20();
    return;

  exit:
    return;
}



procedure xennet_tx_buf_gc_loop_$bb20();



implementation xennet_tx_buf_gc_loop_$bb12(in_$p0: ref, in_$i16: i32, in_$p24: ref, in_$i25: i32, in_$i26: i32, in_$i27: i32, in_$i28: i64, in_$p30: ref, in_$p31: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$i36: i16, in_$i37: i32, in_$i38: i1, in_$p39: ref, in_$i40: i16, in_$i41: i32, in_$i42: i64, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$i47: i32, in_$i48: i64, in_$p50: ref, in_$i51: i32, in_$i52: i32, in_$i53: i1, in_$i54: i32, in_$i55: i64, in_$i56: i64, in_$i57: i1, in_$i59: i32, in_$i60: i64, in_$p62: ref, in_$i63: i32, in_$p65: ref, in_$i66: i32, in_$i67: i64, in_$p69: ref, in_$i70: i32, in_$i71: i32, in_$i72: i64, in_$p74: ref, in_$i75: i32, in_$i76: i64, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$p81: ref, in_$i82: i32, in_$i83: i16, in_$i84: i32, in_$i85: i1, in_$i22: i32, in_$i86: i32, in_vslice_dummy_var_16: i32) returns (out_$p24: ref, out_$i25: i32, out_$i26: i32, out_$i27: i32, out_$i28: i64, out_$p30: ref, out_$p31: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$i36: i16, out_$i37: i32, out_$i38: i1, out_$p39: ref, out_$i40: i16, out_$i41: i32, out_$i42: i64, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$i47: i32, out_$i48: i64, out_$p50: ref, out_$i51: i32, out_$i52: i32, out_$i53: i1, out_$i54: i32, out_$i55: i64, out_$i56: i64, out_$i57: i1, out_$i59: i32, out_$i60: i64, out_$p62: ref, out_$i63: i32, out_$p65: ref, out_$i66: i32, out_$i67: i64, out_$p69: ref, out_$i70: i32, out_$i71: i32, out_$i72: i64, out_$p74: ref, out_$i75: i32, out_$i76: i64, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$p81: ref, out_$i82: i32, out_$i83: i16, out_$i84: i32, out_$i85: i1, out_$i22: i32, out_$i86: i32, out_vslice_dummy_var_16: i32)
{

  entry:
    out_$p24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p30, out_$p31, out_$p33, out_$p34, out_$p35, out_$i36, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i42, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i59, out_$i60, out_$p62, out_$i63, out_$p65, out_$i66, out_$i67, out_$p69, out_$i70, out_$i71, out_$i72, out_$p74, out_$i75, out_$i76, out_$p78, out_$p79, out_$p80, out_$p81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i22, out_$i86, out_vslice_dummy_var_16 := in_$p24, in_$i25, in_$i26, in_$i27, in_$i28, in_$p30, in_$p31, in_$p33, in_$p34, in_$p35, in_$i36, in_$i37, in_$i38, in_$p39, in_$i40, in_$i41, in_$i42, in_$p44, in_$p45, in_$p46, in_$i47, in_$i48, in_$p50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i59, in_$i60, in_$p62, in_$i63, in_$p65, in_$i66, in_$i67, in_$p69, in_$i70, in_$i71, in_$i72, in_$p74, in_$i75, in_$i76, in_$p78, in_$p79, in_$p80, in_$p81, in_$i82, in_$i83, in_$i84, in_$i85, in_$i22, in_$i86, in_vslice_dummy_var_16;
    goto $bb12, exit;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_827;

  $bb22:
    assume out_$i85 == 1;
    assume {:verifier.code 0} true;
    out_$i22 := out_$i84;
    goto $bb22_dummy;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    out_$i86 := out_$i84;
    assume true;
    goto $bb22;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    out_$i85 := $ne.i32(out_$i84, in_$i16);
    goto corral_source_split_846;

  $bb16:
    assume {:verifier.code 0} true;
    out_$i84 := $add.i32(out_$i22, 1);
    call {:si_unique_call 187} {:cexpr "cons"} boogie_si_record_i32(out_$i84);
    goto corral_source_split_845;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb14:
    assume out_$i38 == 1;
    goto corral_source_split_843;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    out_$i38 := $eq.i32(out_$i37, 1);
    goto corral_source_split_841;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    out_$i37 := $sext.i16.i32(out_$i36);
    goto corral_source_split_840;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    out_$i36 := $load.i16($M.0, out_$p35);
    goto corral_source_split_839;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(out_$p34, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_838;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    out_$p34 := $bitcast.ref.ref(out_$p33);
    goto corral_source_split_837;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref($add.ref(out_$p31, $mul.ref(0, 76)), $mul.ref(64, 1)), $mul.ref(out_$i28, 12));
    goto corral_source_split_836;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    out_$p31 := $load.ref($M.0, out_$p30);
    goto corral_source_split_835;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 8944)), $mul.ref(464, 1)), $mul.ref(16, 1));
    goto corral_source_split_834;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    out_$i28 := $zext.i32.i64(out_$i27);
    goto corral_source_split_833;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    out_$i27 := $and.i32(out_$i26, out_$i22);
    goto corral_source_split_832;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    out_$i26 := $sub.i32(out_$i25, 1);
    goto corral_source_split_831;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i32($M.0, out_$p24);
    goto corral_source_split_830;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 8944)), $mul.ref(464, 1)), $mul.ref(8, 1));
    goto corral_source_split_829;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} dev_kfree_skb_irq(out_$p46);
    goto corral_source_split_894;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} add_id_to_freelist(out_$p79, out_$p81, out_$i83);
    goto corral_source_split_893;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    out_$i83 := $trunc.i32.i16(out_$i82);
    goto corral_source_split_892;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    out_$i82 := $zext.i16.i32(out_$i40);
    goto corral_source_split_891;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    out_$p81 := $bitcast.ref.ref(out_$p80);
    goto corral_source_split_890;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8944)), $mul.ref(496, 1));
    goto corral_source_split_889;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8944)), $mul.ref(5624, 1));
    goto corral_source_split_888;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p78, $0.ref);
    goto corral_source_split_887;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    out_$p78 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 8944)), $mul.ref(3576, 1)), $mul.ref(out_$i76, 8));
    goto corral_source_split_886;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    out_$i76 := $sext.i32.i64(out_$i75);
    goto corral_source_split_885;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    out_$i75 := $zext.i16.i32(out_$i40);
    goto corral_source_split_884;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p74, 0);
    goto corral_source_split_883;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 8944)), $mul.ref(2548, 1)), $mul.ref(out_$i72, 4));
    goto corral_source_split_882;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    out_$i72 := $sext.i32.i64(out_$i71);
    goto corral_source_split_881;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    out_$i71 := $zext.i16.i32(out_$i40);
    goto corral_source_split_880;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 196} gnttab_release_grant_reference(out_$p65, out_$i70);
    goto corral_source_split_879;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    out_$i70 := $load.i32($M.0, out_$p69);
    goto corral_source_split_878;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 8944)), $mul.ref(2548, 1)), $mul.ref(out_$i67, 4));
    goto corral_source_split_877;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    out_$i67 := $sext.i32.i64(out_$i66);
    goto corral_source_split_876;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    out_$i66 := $zext.i16.i32(out_$i40);
    goto corral_source_split_875;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8944)), $mul.ref(2544, 1));
    goto corral_source_split_874;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} out_vslice_dummy_var_16 := gnttab_end_foreign_access_ref(out_$i63, 4);
    goto corral_source_split_873;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    out_$i63 := $load.i32($M.0, out_$p62);
    goto corral_source_split_872;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 8944)), $mul.ref(2548, 1)), $mul.ref(out_$i60, 4));
    goto corral_source_split_871;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    out_$i60 := $sext.i32.i64(out_$i59);
    goto corral_source_split_870;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i59 := $zext.i16.i32(out_$i40);
    goto corral_source_split_869;

  $bb19:
    assume !(out_$i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    out_$i57 := $ne.i64(out_$i56, 0);
    goto corral_source_split_864;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} out_$i56 := ldv__builtin_expect(out_$i55, 0);
    call {:si_unique_call 192} {:cexpr "tmp___3"} boogie_si_record_i64(out_$i56);
    goto corral_source_split_863;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    out_$i55 := $sext.i32.i64(out_$i54);
    goto corral_source_split_862;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    out_$i54 := $zext.i1.i32(out_$i53);
    goto corral_source_split_861;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    out_$i53 := $ne.i32(out_$i52, 0);
    goto corral_source_split_860;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 189} out_$i52 := gnttab_query_foreign_access(out_$i51);
    call {:si_unique_call 190} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i52);
    goto corral_source_split_859;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    out_$i51 := $load.i32($M.0, out_$p50);
    goto corral_source_split_858;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 8944)), $mul.ref(2548, 1)), $mul.ref(out_$i48, 4));
    goto corral_source_split_857;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    out_$i48 := $sext.i32.i64(out_$i47);
    goto corral_source_split_856;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    out_$i47 := $zext.i16.i32(out_$i40);
    goto corral_source_split_855;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    out_$p46 := $load.ref($M.0, out_$p45);
    goto corral_source_split_854;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    out_$p45 := $bitcast.ref.ref(out_$p44);
    goto corral_source_split_853;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 8944)), $mul.ref(496, 1)), $mul.ref(out_$i42, 8));
    goto corral_source_split_852;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    out_$i42 := $sext.i32.i64(out_$i41);
    goto corral_source_split_851;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    out_$i41 := $zext.i16.i32(out_$i40);
    goto corral_source_split_850;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    out_$i40 := $load.i16($M.0, out_$p39);
    call {:si_unique_call 188} {:cexpr "id"} boogie_si_record_i16(out_$i40);
    goto corral_source_split_849;

  $bb17:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(out_$p34, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_848;

  $bb15:
    assume !(out_$i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb22_dummy:
    call {:si_unique_call 1} out_$p24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p30, out_$p31, out_$p33, out_$p34, out_$p35, out_$i36, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i42, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i59, out_$i60, out_$p62, out_$i63, out_$p65, out_$i66, out_$i67, out_$p69, out_$i70, out_$i71, out_$i72, out_$p74, out_$i75, out_$i76, out_$p78, out_$p79, out_$p80, out_$p81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i22, out_$i86, out_vslice_dummy_var_16 := xennet_tx_buf_gc_loop_$bb12(in_$p0, in_$i16, out_$p24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p30, out_$p31, out_$p33, out_$p34, out_$p35, out_$i36, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i42, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i59, out_$i60, out_$p62, out_$i63, out_$p65, out_$i66, out_$i67, out_$p69, out_$i70, out_$i71, out_$i72, out_$p74, out_$i75, out_$i76, out_$p78, out_$p79, out_$p80, out_$p81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i22, out_$i86, out_vslice_dummy_var_16);
    return;

  exit:
    return;
}



procedure xennet_tx_buf_gc_loop_$bb12(in_$p0: ref, in_$i16: i32, in_$p24: ref, in_$i25: i32, in_$i26: i32, in_$i27: i32, in_$i28: i64, in_$p30: ref, in_$p31: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$i36: i16, in_$i37: i32, in_$i38: i1, in_$p39: ref, in_$i40: i16, in_$i41: i32, in_$i42: i64, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$i47: i32, in_$i48: i64, in_$p50: ref, in_$i51: i32, in_$i52: i32, in_$i53: i1, in_$i54: i32, in_$i55: i64, in_$i56: i64, in_$i57: i1, in_$i59: i32, in_$i60: i64, in_$p62: ref, in_$i63: i32, in_$p65: ref, in_$i66: i32, in_$i67: i64, in_$p69: ref, in_$i70: i32, in_$i71: i32, in_$i72: i64, in_$p74: ref, in_$i75: i32, in_$i76: i64, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$p81: ref, in_$i82: i32, in_$i83: i16, in_$i84: i32, in_$i85: i1, in_$i22: i32, in_$i86: i32, in_vslice_dummy_var_16: i32) returns (out_$p24: ref, out_$i25: i32, out_$i26: i32, out_$i27: i32, out_$i28: i64, out_$p30: ref, out_$p31: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$i36: i16, out_$i37: i32, out_$i38: i1, out_$p39: ref, out_$i40: i16, out_$i41: i32, out_$i42: i64, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$i47: i32, out_$i48: i64, out_$p50: ref, out_$i51: i32, out_$i52: i32, out_$i53: i1, out_$i54: i32, out_$i55: i64, out_$i56: i64, out_$i57: i1, out_$i59: i32, out_$i60: i64, out_$p62: ref, out_$i63: i32, out_$p65: ref, out_$i66: i32, out_$i67: i64, out_$p69: ref, out_$i70: i32, out_$i71: i32, out_$i72: i64, out_$p74: ref, out_$i75: i32, out_$i76: i64, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$p81: ref, out_$i82: i32, out_$i83: i16, out_$i84: i32, out_$i85: i1, out_$i22: i32, out_$i86: i32, out_vslice_dummy_var_16: i32);
  modifies $M.0;



implementation xennet_tx_buf_gc_loop_$bb8(in_$p0: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$i16: i32, in_$p18: ref, in_$i19: i32, in_$i20: i1, in_$p24: ref, in_$i25: i32, in_$i26: i32, in_$i27: i32, in_$i28: i64, in_$p30: ref, in_$p31: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$i36: i16, in_$i37: i32, in_$i38: i1, in_$p39: ref, in_$i40: i16, in_$i41: i32, in_$i42: i64, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$i47: i32, in_$i48: i64, in_$p50: ref, in_$i51: i32, in_$i52: i32, in_$i53: i1, in_$i54: i32, in_$i55: i64, in_$i56: i64, in_$i57: i1, in_$i59: i32, in_$i60: i64, in_$p62: ref, in_$i63: i32, in_$p65: ref, in_$i66: i32, in_$i67: i64, in_$p69: ref, in_$i70: i32, in_$i71: i32, in_$i72: i64, in_$p74: ref, in_$i75: i32, in_$i76: i64, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$p81: ref, in_$i82: i32, in_$i83: i16, in_$i84: i32, in_$i85: i1, in_$i22: i32, in_$i86: i32, in_$i21: i32, in_$p88: ref, in_$p90: ref, in_$p91: ref, in_$p92: ref, in_$i93: i32, in_$i94: i32, in_$i95: i32, in_$i96: i32, in_$i97: i32, in_$p99: ref, in_$p100: ref, in_$p101: ref, in_$i102: i1, in_$p104: ref, in_$p105: ref, in_$p106: ref, in_$i107: i32, in_$i108: i1, in_vslice_dummy_var_16: i32) returns (out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$i16: i32, out_$p18: ref, out_$i19: i32, out_$i20: i1, out_$p24: ref, out_$i25: i32, out_$i26: i32, out_$i27: i32, out_$i28: i64, out_$p30: ref, out_$p31: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$i36: i16, out_$i37: i32, out_$i38: i1, out_$p39: ref, out_$i40: i16, out_$i41: i32, out_$i42: i64, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$i47: i32, out_$i48: i64, out_$p50: ref, out_$i51: i32, out_$i52: i32, out_$i53: i1, out_$i54: i32, out_$i55: i64, out_$i56: i64, out_$i57: i1, out_$i59: i32, out_$i60: i64, out_$p62: ref, out_$i63: i32, out_$p65: ref, out_$i66: i32, out_$i67: i64, out_$p69: ref, out_$i70: i32, out_$i71: i32, out_$i72: i64, out_$p74: ref, out_$i75: i32, out_$i76: i64, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$p81: ref, out_$i82: i32, out_$i83: i16, out_$i84: i32, out_$i85: i1, out_$i22: i32, out_$i86: i32, out_$i21: i32, out_$p88: ref, out_$p90: ref, out_$p91: ref, out_$p92: ref, out_$i93: i32, out_$i94: i32, out_$i95: i32, out_$i96: i32, out_$i97: i32, out_$p99: ref, out_$p100: ref, out_$p101: ref, out_$i102: i1, out_$p104: ref, out_$p105: ref, out_$p106: ref, out_$i107: i32, out_$i108: i1, out_vslice_dummy_var_16: i32)
{

  entry:
    out_$p13, out_$p14, out_$p15, out_$i16, out_$p18, out_$i19, out_$i20, out_$p24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p30, out_$p31, out_$p33, out_$p34, out_$p35, out_$i36, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i42, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i59, out_$i60, out_$p62, out_$i63, out_$p65, out_$i66, out_$i67, out_$p69, out_$i70, out_$i71, out_$i72, out_$p74, out_$i75, out_$i76, out_$p78, out_$p79, out_$p80, out_$p81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i22, out_$i86, out_$i21, out_$p88, out_$p90, out_$p91, out_$p92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$p99, out_$p100, out_$p101, out_$i102, out_$p104, out_$p105, out_$p106, out_$i107, out_$i108, out_vslice_dummy_var_16 := in_$p13, in_$p14, in_$p15, in_$i16, in_$p18, in_$i19, in_$i20, in_$p24, in_$i25, in_$i26, in_$i27, in_$i28, in_$p30, in_$p31, in_$p33, in_$p34, in_$p35, in_$i36, in_$i37, in_$i38, in_$p39, in_$i40, in_$i41, in_$i42, in_$p44, in_$p45, in_$p46, in_$i47, in_$i48, in_$p50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i59, in_$i60, in_$p62, in_$i63, in_$p65, in_$i66, in_$i67, in_$p69, in_$i70, in_$i71, in_$i72, in_$p74, in_$i75, in_$i76, in_$p78, in_$p79, in_$p80, in_$p81, in_$i82, in_$i83, in_$i84, in_$i85, in_$i22, in_$i86, in_$i21, in_$p88, in_$p90, in_$p91, in_$p92, in_$i93, in_$i94, in_$i95, in_$i96, in_$i97, in_$p99, in_$p100, in_$p101, in_$i102, in_$p104, in_$p105, in_$p106, in_$i107, in_$i108, in_vslice_dummy_var_16;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 8944)), $mul.ref(464, 1)), $mul.ref(16, 1));
    goto corral_source_split_817;

  $bb28:
    assume {:verifier.code 0} true;
    assume out_$i108 == 1;
    goto $bb28_dummy;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    out_$i108 := $ne.i32(out_$i107, out_$i16);
    goto corral_source_split_919;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    out_$i107 := $load.i32($M.0, out_$p106);
    goto corral_source_split_918;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    out_$p106 := $add.ref($add.ref(out_$p105, $mul.ref(0, 76)), $mul.ref(8, 1));
    goto corral_source_split_917;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    out_$p105 := $load.ref($M.0, out_$p104);
    goto corral_source_split_916;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    out_$p104 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 8944)), $mul.ref(464, 1)), $mul.ref(16, 1));
    goto corral_source_split_915;

  $bb25:
    assume out_$i102 == 1;
    goto corral_source_split_914;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    out_$i102 := $eq.i32(out_$i21, out_$i16);
    goto corral_source_split_912;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p101, out_$i97);
    call {:si_unique_call 199} devirtbounce.1(0);
    goto corral_source_split_911;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    out_$p101 := $add.ref($add.ref(out_$p100, $mul.ref(0, 76)), $mul.ref(12, 1));
    goto corral_source_split_910;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    out_$p100 := $load.ref($M.0, out_$p99);
    goto corral_source_split_909;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    out_$p99 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 8944)), $mul.ref(464, 1)), $mul.ref(16, 1));
    goto corral_source_split_908;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    out_$i97 := $add.i32(out_$i96, 1);
    goto corral_source_split_907;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    out_$i96 := $add.i32(out_$i95, out_$i16);
    goto corral_source_split_906;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    out_$i95 := $lshr.i32(out_$i94, 1);
    goto corral_source_split_905;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    out_$i94 := $sub.i32(out_$i93, out_$i16);
    goto corral_source_split_904;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    out_$i93 := $load.i32($M.0, out_$p92);
    goto corral_source_split_903;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    out_$p92 := $add.ref($add.ref(out_$p91, $mul.ref(0, 76)), $mul.ref(0, 1));
    goto corral_source_split_902;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    out_$p91 := $load.ref($M.0, out_$p90);
    goto corral_source_split_901;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    out_$p90 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 8944)), $mul.ref(464, 1)), $mul.ref(16, 1));
    goto corral_source_split_900;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p88, out_$i16);
    goto corral_source_split_899;

  $bb24:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 8944)), $mul.ref(464, 1)), $mul.ref(4, 1));
    goto corral_source_split_898;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i20 == 1);
    goto $bb11;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    out_$i21 := out_$i86;
    goto $bb11;

  $bb23:
    assume !(out_$i85 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_896;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    out_$i86 := out_$i84;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    out_$i85 := $ne.i32(out_$i84, out_$i16);
    goto corral_source_split_846;

  $bb16:
    assume {:verifier.code 0} true;
    out_$i84 := $add.i32(out_$i22, 1);
    call {:si_unique_call 187} {:cexpr "cons"} boogie_si_record_i32(out_$i84);
    goto corral_source_split_845;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb14:
    assume out_$i38 == 1;
    goto corral_source_split_843;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    out_$i38 := $eq.i32(out_$i37, 1);
    goto corral_source_split_841;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    out_$i37 := $sext.i16.i32(out_$i36);
    goto corral_source_split_840;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    out_$i36 := $load.i16($M.0, out_$p35);
    goto corral_source_split_839;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(out_$p34, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_838;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    out_$p34 := $bitcast.ref.ref(out_$p33);
    goto corral_source_split_837;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref($add.ref(out_$p31, $mul.ref(0, 76)), $mul.ref(64, 1)), $mul.ref(out_$i28, 12));
    goto corral_source_split_836;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    out_$p31 := $load.ref($M.0, out_$p30);
    goto corral_source_split_835;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 8944)), $mul.ref(464, 1)), $mul.ref(16, 1));
    goto corral_source_split_834;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    out_$i28 := $zext.i32.i64(out_$i27);
    goto corral_source_split_833;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    out_$i27 := $and.i32(out_$i26, out_$i22);
    goto corral_source_split_832;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    out_$i26 := $sub.i32(out_$i25, 1);
    goto corral_source_split_831;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i32($M.0, out_$p24);
    goto corral_source_split_830;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 8944)), $mul.ref(464, 1)), $mul.ref(8, 1));
    goto corral_source_split_829;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb12:
    call out_$p24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p30, out_$p31, out_$p33, out_$p34, out_$p35, out_$i36, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i42, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i59, out_$i60, out_$p62, out_$i63, out_$p65, out_$i66, out_$i67, out_$p69, out_$i70, out_$i71, out_$i72, out_$p74, out_$i75, out_$i76, out_$p78, out_$p79, out_$p80, out_$p81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i22, out_$i86, out_vslice_dummy_var_16 := xennet_tx_buf_gc_loop_$bb12(in_$p0, out_$i16, out_$p24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p30, out_$p31, out_$p33, out_$p34, out_$p35, out_$i36, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i42, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i59, out_$i60, out_$p62, out_$i63, out_$p65, out_$i66, out_$i67, out_$p69, out_$i70, out_$i71, out_$i72, out_$p74, out_$i75, out_$i76, out_$p78, out_$p79, out_$p80, out_$p81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i22, out_$i86, out_vslice_dummy_var_16);
    goto $bb12_last;

  $bb12_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_827;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    out_$i22 := out_$i19;
    goto $bb12;

  $bb22:
    assume out_$i85 == 1;
    assume {:verifier.code 0} true;
    out_$i22 := out_$i84;
    assume false;
    return;

  $bb9:
    assume out_$i20 == 1;
    goto corral_source_split_825;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    out_$i21 := out_$i19;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    out_$i20 := $ne.i32(out_$i19, out_$i16);
    goto corral_source_split_823;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    out_$i19 := $load.i32($M.0, out_$p18);
    call {:si_unique_call 186} {:cexpr "cons"} boogie_si_record_i32(out_$i19);
    goto corral_source_split_822;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 8944)), $mul.ref(464, 1)), $mul.ref(4, 1));
    goto corral_source_split_821;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    out_$i16 := $load.i32($M.0, out_$p15);
    call {:si_unique_call 184} {:cexpr "prod"} boogie_si_record_i32(out_$i16);
    call {:si_unique_call 185} devirtbounce.1(0);
    goto corral_source_split_820;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(out_$p14, $mul.ref(0, 76)), $mul.ref(8, 1));
    goto corral_source_split_819;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    out_$p14 := $load.ref($M.0, out_$p13);
    goto corral_source_split_818;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} dev_kfree_skb_irq(out_$p46);
    goto corral_source_split_894;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} add_id_to_freelist(out_$p79, out_$p81, out_$i83);
    goto corral_source_split_893;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    out_$i83 := $trunc.i32.i16(out_$i82);
    goto corral_source_split_892;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    out_$i82 := $zext.i16.i32(out_$i40);
    goto corral_source_split_891;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    out_$p81 := $bitcast.ref.ref(out_$p80);
    goto corral_source_split_890;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8944)), $mul.ref(496, 1));
    goto corral_source_split_889;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8944)), $mul.ref(5624, 1));
    goto corral_source_split_888;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p78, $0.ref);
    goto corral_source_split_887;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    out_$p78 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 8944)), $mul.ref(3576, 1)), $mul.ref(out_$i76, 8));
    goto corral_source_split_886;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    out_$i76 := $sext.i32.i64(out_$i75);
    goto corral_source_split_885;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    out_$i75 := $zext.i16.i32(out_$i40);
    goto corral_source_split_884;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p74, 0);
    goto corral_source_split_883;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 8944)), $mul.ref(2548, 1)), $mul.ref(out_$i72, 4));
    goto corral_source_split_882;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    out_$i72 := $sext.i32.i64(out_$i71);
    goto corral_source_split_881;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    out_$i71 := $zext.i16.i32(out_$i40);
    goto corral_source_split_880;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 196} gnttab_release_grant_reference(out_$p65, out_$i70);
    goto corral_source_split_879;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    out_$i70 := $load.i32($M.0, out_$p69);
    goto corral_source_split_878;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 8944)), $mul.ref(2548, 1)), $mul.ref(out_$i67, 4));
    goto corral_source_split_877;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    out_$i67 := $sext.i32.i64(out_$i66);
    goto corral_source_split_876;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    out_$i66 := $zext.i16.i32(out_$i40);
    goto corral_source_split_875;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8944)), $mul.ref(2544, 1));
    goto corral_source_split_874;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} out_vslice_dummy_var_16 := gnttab_end_foreign_access_ref(out_$i63, 4);
    goto corral_source_split_873;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    out_$i63 := $load.i32($M.0, out_$p62);
    goto corral_source_split_872;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 8944)), $mul.ref(2548, 1)), $mul.ref(out_$i60, 4));
    goto corral_source_split_871;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    out_$i60 := $sext.i32.i64(out_$i59);
    goto corral_source_split_870;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i59 := $zext.i16.i32(out_$i40);
    goto corral_source_split_869;

  $bb19:
    assume !(out_$i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    out_$i57 := $ne.i64(out_$i56, 0);
    goto corral_source_split_864;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} out_$i56 := ldv__builtin_expect(out_$i55, 0);
    call {:si_unique_call 192} {:cexpr "tmp___3"} boogie_si_record_i64(out_$i56);
    goto corral_source_split_863;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    out_$i55 := $sext.i32.i64(out_$i54);
    goto corral_source_split_862;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    out_$i54 := $zext.i1.i32(out_$i53);
    goto corral_source_split_861;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    out_$i53 := $ne.i32(out_$i52, 0);
    goto corral_source_split_860;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 189} out_$i52 := gnttab_query_foreign_access(out_$i51);
    call {:si_unique_call 190} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i52);
    goto corral_source_split_859;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    out_$i51 := $load.i32($M.0, out_$p50);
    goto corral_source_split_858;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 8944)), $mul.ref(2548, 1)), $mul.ref(out_$i48, 4));
    goto corral_source_split_857;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    out_$i48 := $sext.i32.i64(out_$i47);
    goto corral_source_split_856;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    out_$i47 := $zext.i16.i32(out_$i40);
    goto corral_source_split_855;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    out_$p46 := $load.ref($M.0, out_$p45);
    goto corral_source_split_854;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    out_$p45 := $bitcast.ref.ref(out_$p44);
    goto corral_source_split_853;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 8944)), $mul.ref(496, 1)), $mul.ref(out_$i42, 8));
    goto corral_source_split_852;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    out_$i42 := $sext.i32.i64(out_$i41);
    goto corral_source_split_851;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    out_$i41 := $zext.i16.i32(out_$i40);
    goto corral_source_split_850;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    out_$i40 := $load.i16($M.0, out_$p39);
    call {:si_unique_call 188} {:cexpr "id"} boogie_si_record_i16(out_$i40);
    goto corral_source_split_849;

  $bb17:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(out_$p34, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_848;

  $bb15:
    assume !(out_$i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb28_dummy:
    call {:si_unique_call 1} out_$p13, out_$p14, out_$p15, out_$i16, out_$p18, out_$i19, out_$i20, out_$p24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p30, out_$p31, out_$p33, out_$p34, out_$p35, out_$i36, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i42, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i59, out_$i60, out_$p62, out_$i63, out_$p65, out_$i66, out_$i67, out_$p69, out_$i70, out_$i71, out_$i72, out_$p74, out_$i75, out_$i76, out_$p78, out_$p79, out_$p80, out_$p81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i22, out_$i86, out_$i21, out_$p88, out_$p90, out_$p91, out_$p92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$p99, out_$p100, out_$p101, out_$i102, out_$p104, out_$p105, out_$p106, out_$i107, out_$i108, out_vslice_dummy_var_16 := xennet_tx_buf_gc_loop_$bb8(in_$p0, out_$p13, out_$p14, out_$p15, out_$i16, out_$p18, out_$i19, out_$i20, out_$p24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p30, out_$p31, out_$p33, out_$p34, out_$p35, out_$i36, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i42, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i59, out_$i60, out_$p62, out_$i63, out_$p65, out_$i66, out_$i67, out_$p69, out_$i70, out_$i71, out_$i72, out_$p74, out_$i75, out_$i76, out_$p78, out_$p79, out_$p80, out_$p81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i22, out_$i86, out_$i21, out_$p88, out_$p90, out_$p91, out_$p92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$p99, out_$p100, out_$p101, out_$i102, out_$p104, out_$p105, out_$p106, out_$i107, out_$i108, out_vslice_dummy_var_16);
    return;

  exit:
    return;
}



procedure xennet_tx_buf_gc_loop_$bb8(in_$p0: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$i16: i32, in_$p18: ref, in_$i19: i32, in_$i20: i1, in_$p24: ref, in_$i25: i32, in_$i26: i32, in_$i27: i32, in_$i28: i64, in_$p30: ref, in_$p31: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$i36: i16, in_$i37: i32, in_$i38: i1, in_$p39: ref, in_$i40: i16, in_$i41: i32, in_$i42: i64, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$i47: i32, in_$i48: i64, in_$p50: ref, in_$i51: i32, in_$i52: i32, in_$i53: i1, in_$i54: i32, in_$i55: i64, in_$i56: i64, in_$i57: i1, in_$i59: i32, in_$i60: i64, in_$p62: ref, in_$i63: i32, in_$p65: ref, in_$i66: i32, in_$i67: i64, in_$p69: ref, in_$i70: i32, in_$i71: i32, in_$i72: i64, in_$p74: ref, in_$i75: i32, in_$i76: i64, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$p81: ref, in_$i82: i32, in_$i83: i16, in_$i84: i32, in_$i85: i1, in_$i22: i32, in_$i86: i32, in_$i21: i32, in_$p88: ref, in_$p90: ref, in_$p91: ref, in_$p92: ref, in_$i93: i32, in_$i94: i32, in_$i95: i32, in_$i96: i32, in_$i97: i32, in_$p99: ref, in_$p100: ref, in_$p101: ref, in_$i102: i1, in_$p104: ref, in_$p105: ref, in_$p106: ref, in_$i107: i32, in_$i108: i1, in_vslice_dummy_var_16: i32) returns (out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$i16: i32, out_$p18: ref, out_$i19: i32, out_$i20: i1, out_$p24: ref, out_$i25: i32, out_$i26: i32, out_$i27: i32, out_$i28: i64, out_$p30: ref, out_$p31: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$i36: i16, out_$i37: i32, out_$i38: i1, out_$p39: ref, out_$i40: i16, out_$i41: i32, out_$i42: i64, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$i47: i32, out_$i48: i64, out_$p50: ref, out_$i51: i32, out_$i52: i32, out_$i53: i1, out_$i54: i32, out_$i55: i64, out_$i56: i64, out_$i57: i1, out_$i59: i32, out_$i60: i64, out_$p62: ref, out_$i63: i32, out_$p65: ref, out_$i66: i32, out_$i67: i64, out_$p69: ref, out_$i70: i32, out_$i71: i32, out_$i72: i64, out_$p74: ref, out_$i75: i32, out_$i76: i64, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$p81: ref, out_$i82: i32, out_$i83: i16, out_$i84: i32, out_$i85: i1, out_$i22: i32, out_$i86: i32, out_$i21: i32, out_$p88: ref, out_$p90: ref, out_$p91: ref, out_$p92: ref, out_$i93: i32, out_$i94: i32, out_$i95: i32, out_$i96: i32, out_$i97: i32, out_$p99: ref, out_$p100: ref, out_$p101: ref, out_$i102: i1, out_$p104: ref, out_$p105: ref, out_$p106: ref, out_$i107: i32, out_$i108: i1, out_vslice_dummy_var_16: i32);
  modifies $M.0;



implementation xennet_tx_buf_gc_loop_$bb6()
{

  entry:
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb6_dummy;

  $bb6_dummy:
    call {:si_unique_call 1} xennet_tx_buf_gc_loop_$bb6();
    return;

  exit:
    return;
}



procedure xennet_tx_buf_gc_loop_$bb6();



implementation xennet_count_skb_slots_loop_$bb4(in_$p0: ref, in_$i5: i32, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$i24: i64, in_$p25: ref, in_$i26: i32, in_$i27: i64, in_$p28: ref, in_$i29: i32, in_$i30: i64, in_$i31: i64, in_$i32: i64, in_$i33: i64, in_$i34: i64, in_$i35: i32, in_$i36: i32, in_$i37: i32, in_$i38: i1, in_$i18: i32, in_$i19: i32, in_$i39: i32) returns (out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$i24: i64, out_$p25: ref, out_$i26: i32, out_$i27: i64, out_$p28: ref, out_$i29: i32, out_$i30: i64, out_$i31: i64, out_$i32: i64, out_$i33: i64, out_$i34: i64, out_$i35: i32, out_$i36: i32, out_$i37: i32, out_$i38: i1, out_$i18: i32, out_$i19: i32, out_$i39: i32)
{

  entry:
    out_$p20, out_$p21, out_$p22, out_$p23, out_$i24, out_$p25, out_$i26, out_$i27, out_$p28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i18, out_$i19, out_$i39 := in_$p20, in_$p21, in_$p22, in_$p23, in_$i24, in_$p25, in_$i26, in_$i27, in_$p28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i18, in_$i19, in_$i39;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1153;

  $bb6:
    assume out_$i38 == 1;
    assume {:verifier.code 0} true;
    out_$i18, out_$i19 := out_$i36, out_$i37;
    goto $bb6_dummy;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    out_$i39 := out_$i36;
    assume true;
    goto $bb6;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    out_$i38 := $slt.i32(out_$i37, in_$i5);
    goto corral_source_split_1173;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    out_$i37 := $add.i32(out_$i19, 1);
    call {:si_unique_call 283} {:cexpr "i"} boogie_si_record_i32(out_$i37);
    goto corral_source_split_1172;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    out_$i36 := $add.i32(out_$i35, out_$i18);
    call {:si_unique_call 282} {:cexpr "pages"} boogie_si_record_i32(out_$i36);
    goto corral_source_split_1171;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    out_$i35 := $trunc.i64.i32(out_$i34);
    goto corral_source_split_1170;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    out_$i34 := $lshr.i64(out_$i33, 12);
    goto corral_source_split_1169;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    out_$i33 := $add.i64(out_$i32, 4095);
    goto corral_source_split_1168;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    out_$i32 := $add.i64(out_$i31, out_$i27);
    goto corral_source_split_1167;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    out_$i31 := $and.i64(out_$i30, 4095);
    call {:si_unique_call 281} {:cexpr "offset"} boogie_si_record_i64(out_$i31);
    goto corral_source_split_1166;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    out_$i30 := $zext.i32.i64(out_$i29);
    call {:si_unique_call 280} {:cexpr "offset"} boogie_si_record_i64(out_$i30);
    goto corral_source_split_1165;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    out_$i29 := $load.i32($M.0, out_$p28);
    goto corral_source_split_1164;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(out_$p23, $mul.ref(out_$i24, 16)), $mul.ref(8, 1));
    goto corral_source_split_1163;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    out_$i27 := $zext.i32.i64(out_$i26);
    call {:si_unique_call 279} {:cexpr "size"} boogie_si_record_i64(out_$i27);
    goto corral_source_split_1162;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 277} out_$i26 := skb_frag_size(out_$p25);
    call {:si_unique_call 278} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i26);
    goto corral_source_split_1161;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref(out_$p23, $mul.ref(out_$i24, 16));
    goto corral_source_split_1160;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    out_$i24 := $sext.i32.i64(out_$i19);
    goto corral_source_split_1159;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    out_$p23 := $bitcast.ref.ref(out_$p22);
    goto corral_source_split_1158;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p21, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_1157;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    out_$p21 := $bitcast.ref.ref(out_$p20);
    goto corral_source_split_1156;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 276} out_$p20 := skb_end_pointer(in_$p0);
    goto corral_source_split_1155;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p20, out_$p21, out_$p22, out_$p23, out_$i24, out_$p25, out_$i26, out_$i27, out_$p28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i18, out_$i19, out_$i39 := xennet_count_skb_slots_loop_$bb4(in_$p0, in_$i5, out_$p20, out_$p21, out_$p22, out_$p23, out_$i24, out_$p25, out_$i26, out_$i27, out_$p28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i18, out_$i19, out_$i39);
    return;

  exit:
    return;
}



procedure xennet_count_skb_slots_loop_$bb4(in_$p0: ref, in_$i5: i32, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$i24: i64, in_$p25: ref, in_$i26: i32, in_$i27: i64, in_$p28: ref, in_$i29: i32, in_$i30: i64, in_$i31: i64, in_$i32: i64, in_$i33: i64, in_$i34: i64, in_$i35: i32, in_$i36: i32, in_$i37: i32, in_$i38: i1, in_$i18: i32, in_$i19: i32, in_$i39: i32) returns (out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$i24: i64, out_$p25: ref, out_$i26: i32, out_$i27: i64, out_$p28: ref, out_$i29: i32, out_$i30: i64, out_$i31: i64, out_$i32: i64, out_$i33: i64, out_$i34: i64, out_$i35: i32, out_$i36: i32, out_$i37: i32, out_$i38: i1, out_$i18: i32, out_$i19: i32, out_$i39: i32);



implementation xennet_make_one_txreq_loop_$bb6()
{

  entry:
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb6_dummy;

  $bb6_dummy:
    call {:si_unique_call 1} xennet_make_one_txreq_loop_$bb6();
    return;

  exit:
    return;
}



procedure xennet_make_one_txreq_loop_$bb6();



implementation xennet_make_txreqs_loop_$bb4(in_$p0: ref, in_$p2: ref, in_$p16: ref, in_$i17: i16, in_$i18: i32, in_$i19: i32, in_$i20: i16, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$i26: i16, in_$i27: i32, in_$i28: i32, in_$i29: i1, in_$i12: i32, in_$p13: ref, in_$i14: i32, in_$p15: ref, in_$p30: ref) returns (out_$p16: ref, out_$i17: i16, out_$i18: i32, out_$i19: i32, out_$i20: i16, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$i26: i16, out_$i27: i32, out_$i28: i32, out_$i29: i1, out_$i12: i32, out_$p13: ref, out_$i14: i32, out_$p15: ref, out_$p30: ref)
{

  entry:
    out_$p16, out_$i17, out_$i18, out_$i19, out_$i20, out_$p21, out_$p22, out_$p23, out_$p24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i12, out_$p13, out_$i14, out_$p15, out_$p30 := in_$p16, in_$i17, in_$i18, in_$i19, in_$i20, in_$p21, in_$p22, in_$p23, in_$p24, in_$p25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i12, in_$p13, in_$i14, in_$p15, in_$p30;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1339;

  $bb6:
    assume out_$i29 == 1;
    assume {:verifier.code 0} true;
    out_$i12, out_$p13, out_$i14, out_$p15 := out_$i28, out_$p23, 0, out_$p24;
    goto $bb6_dummy;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    out_$p30 := out_$p23;
    assume true;
    goto $bb6;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    out_$i29 := $ne.i32(out_$i28, 0);
    goto corral_source_split_1355;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    out_$i28 := $sub.i32(out_$i12, out_$i27);
    call {:si_unique_call 321} {:cexpr "len"} boogie_si_record_i32(out_$i28);
    goto corral_source_split_1354;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    out_$i27 := $zext.i16.i32(out_$i26);
    goto corral_source_split_1353;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i16($M.0, out_$p25);
    goto corral_source_split_1352;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(out_$p23, $mul.ref(0, 12)), $mul.ref(10, 1));
    goto corral_source_split_1351;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref(out_$p15, $mul.ref(1, 64));
    goto corral_source_split_1350;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} out_$p23 := xennet_make_one_txreq(in_$p0, out_$p22, out_$p15, out_$i14, out_$i12);
    goto corral_source_split_1349;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 319} out_$p22 := skb_get(in_$p2);
    goto corral_source_split_1348;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p21, out_$i20);
    goto corral_source_split_1347;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p13, $mul.ref(0, 12)), $mul.ref(6, 1));
    goto corral_source_split_1346;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    out_$i20 := $trunc.i32.i16(out_$i19);
    goto corral_source_split_1345;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    out_$i19 := $or.i32(out_$i18, 4);
    goto corral_source_split_1344;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    out_$i18 := $zext.i16.i32(out_$i17);
    goto corral_source_split_1343;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    out_$i17 := $load.i16($M.0, out_$p16);
    goto corral_source_split_1342;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(out_$p13, $mul.ref(0, 12)), $mul.ref(6, 1));
    goto corral_source_split_1341;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p16, out_$i17, out_$i18, out_$i19, out_$i20, out_$p21, out_$p22, out_$p23, out_$p24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i12, out_$p13, out_$i14, out_$p15, out_$p30 := xennet_make_txreqs_loop_$bb4(in_$p0, in_$p2, out_$p16, out_$i17, out_$i18, out_$i19, out_$i20, out_$p21, out_$p22, out_$p23, out_$p24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i12, out_$p13, out_$i14, out_$p15, out_$p30);
    return;

  exit:
    return;
}



procedure xennet_make_txreqs_loop_$bb4(in_$p0: ref, in_$p2: ref, in_$p16: ref, in_$i17: i16, in_$i18: i32, in_$i19: i32, in_$i20: i16, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$i26: i16, in_$i27: i32, in_$i28: i32, in_$i29: i1, in_$i12: i32, in_$p13: ref, in_$i14: i32, in_$p15: ref, in_$p30: ref) returns (out_$p16: ref, out_$i17: i16, out_$i18: i32, out_$i19: i32, out_$i20: i16, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$i26: i16, out_$i27: i32, out_$i28: i32, out_$i29: i1, out_$i12: i32, out_$p13: ref, out_$i14: i32, out_$p15: ref, out_$p30: ref);
  modifies $M.0;



implementation napi_enable_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} napi_enable_loop_$bb3();
    return;

  exit:
    return;
}



procedure napi_enable_loop_$bb3();



implementation xennet_alloc_rx_buffers_loop_$bb23()
{

  entry:
    goto $bb23, exit;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb23_dummy;

  $bb23_dummy:
    call {:si_unique_call 1} xennet_alloc_rx_buffers_loop_$bb23();
    return;

  exit:
    return;
}



procedure xennet_alloc_rx_buffers_loop_$bb23();



implementation xennet_alloc_rx_buffers_loop_$bb19()
{

  entry:
    goto $bb19, exit;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb19_dummy;

  $bb19_dummy:
    call {:si_unique_call 1} xennet_alloc_rx_buffers_loop_$bb19();
    return;

  exit:
    return;
}



procedure xennet_alloc_rx_buffers_loop_$bb19();



implementation xennet_alloc_rx_buffers_loop_$bb11(in_$p0: ref, in_$p16: ref, in_$p22: ref, in_$i23: i64, in_$i24: i1, in_$i25: i32, in_$i27: i32, in_$i28: i16, in_$i29: i32, in_$i30: i64, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$i35: i1, in_$i36: i32, in_$i37: i64, in_$i38: i64, in_$i39: i1, in_$i40: i32, in_$i41: i64, in_$p43: ref, in_$p44: ref, in_$i45: i32, in_$i46: i16, in_$i47: i32, in_$i48: i1, in_$i49: i32, in_$i50: i64, in_$i51: i64, in_$i52: i1, in_$i53: i32, in_$i54: i64, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$i62: i64, in_$i63: i64, in_$i64: i64, in_$p66: ref, in_$i67: i32, in_$i68: i32, in_$i69: i32, in_$i70: i64, in_$p72: ref, in_$p73: ref, in_$p75: ref, in_$p76: ref, in_$i77: i64, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$p81: ref, in_$p82: ref, in_$i83: i32, in_$i84: i16, in_$i85: i32, in_$i86: i16, in_$p87: ref, in_$p88: ref, in_$i89: i32, in_$i90: i32, in_$i91: i32, in_$i92: i1, in_$i21: i32, in_$i93: i32) returns (out_$p22: ref, out_$i23: i64, out_$i24: i1, out_$i25: i32, out_$i27: i32, out_$i28: i16, out_$i29: i32, out_$i30: i64, out_$p32: ref, out_$p33: ref, out_$i34: i64, out_$i35: i1, out_$i36: i32, out_$i37: i64, out_$i38: i64, out_$i39: i1, out_$i40: i32, out_$i41: i64, out_$p43: ref, out_$p44: ref, out_$i45: i32, out_$i46: i16, out_$i47: i32, out_$i48: i1, out_$i49: i32, out_$i50: i64, out_$i51: i64, out_$i52: i1, out_$i53: i32, out_$i54: i64, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$i62: i64, out_$i63: i64, out_$i64: i64, out_$p66: ref, out_$i67: i32, out_$i68: i32, out_$i69: i32, out_$i70: i64, out_$p72: ref, out_$p73: ref, out_$p75: ref, out_$p76: ref, out_$i77: i64, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$p81: ref, out_$p82: ref, out_$i83: i32, out_$i84: i16, out_$i85: i32, out_$i86: i16, out_$p87: ref, out_$p88: ref, out_$i89: i32, out_$i90: i32, out_$i91: i32, out_$i92: i1, out_$i21: i32, out_$i93: i32)
{

  entry:
    out_$p22, out_$i23, out_$i24, out_$i25, out_$i27, out_$i28, out_$i29, out_$i30, out_$p32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$p43, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$p56, out_$p57, out_$p58, out_$p59, out_$p60, out_$p61, out_$i62, out_$i63, out_$i64, out_$p66, out_$i67, out_$i68, out_$i69, out_$i70, out_$p72, out_$p73, out_$p75, out_$p76, out_$i77, out_$p78, out_$p79, out_$p80, out_$p81, out_$p82, out_$i83, out_$i84, out_$i85, out_$i86, out_$p87, out_$p88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i21, out_$i93 := in_$p22, in_$i23, in_$i24, in_$i25, in_$i27, in_$i28, in_$i29, in_$i30, in_$p32, in_$p33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$p43, in_$p44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$p56, in_$p57, in_$p58, in_$p59, in_$p60, in_$p61, in_$i62, in_$i63, in_$i64, in_$p66, in_$i67, in_$i68, in_$i69, in_$i70, in_$p72, in_$p73, in_$p75, in_$p76, in_$i77, in_$p78, in_$p79, in_$p80, in_$p81, in_$p82, in_$i83, in_$i84, in_$i85, in_$i86, in_$p87, in_$p88, in_$i89, in_$i90, in_$i91, in_$i92, in_$i21, in_$i93;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_1589;

  $bb25:
    assume out_$i92 == 1;
    assume {:verifier.code 0} true;
    out_$i21 := out_$i89;
    goto $bb25_dummy;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    out_$i93 := out_$i89;
    assume true;
    goto $bb25;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    out_$i92 := $ule.i32(out_$i91, 255);
    goto corral_source_split_1675;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    out_$i91 := $sub.i32(out_$i89, out_$i90);
    goto corral_source_split_1674;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    out_$i90 := $load.i32($M.0, in_$p16);
    goto corral_source_split_1673;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    out_$i89 := $add.i32(out_$i21, 1);
    call {:si_unique_call 407} {:cexpr "req_prod"} boogie_si_record_i32(out_$i89);
    goto corral_source_split_1672;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p88, out_$i45);
    goto corral_source_split_1671;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref($add.ref(out_$p76, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_1670;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p87, out_$i28);
    goto corral_source_split_1669;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref($add.ref(out_$p76, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1668;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} gnttab_grant_foreign_access_ref(out_$i45, out_$i86, out_$i77, 0);
    goto corral_source_split_1667;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    out_$i86 := $trunc.i32.i16(out_$i85);
    goto corral_source_split_1666;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    out_$i85 := $zext.i16.i32(out_$i84);
    goto corral_source_split_1665;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    out_$i84 := $trunc.i32.i16(out_$i83);
    goto corral_source_split_1664;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    out_$i83 := $load.i32($M.0, out_$p82);
    goto corral_source_split_1663;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref($add.ref(out_$p81, $mul.ref(0, 1672)), $mul.ref(24, 1));
    goto corral_source_split_1662;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    out_$p81 := $load.ref($M.0, out_$p80);
    goto corral_source_split_1661;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref(out_$p79, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_1660;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    out_$p79 := $load.ref($M.0, out_$p78);
    goto corral_source_split_1659;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    out_$p78 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8944)), $mul.ref(32, 1));
    goto corral_source_split_1658;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 404} out_$i77 := pfn_to_mfn(out_$i64);
    call {:si_unique_call 405} {:cexpr "tmp___8"} boogie_si_record_i64(out_$i77);
    goto corral_source_split_1657;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    out_$p76 := $bitcast.ref.ref(out_$p75);
    goto corral_source_split_1656;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref($add.ref(out_$p73, $mul.ref(0, 72)), $mul.ref(64, 1)), $mul.ref(out_$i70, 8));
    goto corral_source_split_1655;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    out_$p73 := $load.ref($M.0, out_$p72);
    goto corral_source_split_1654;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 8944)), $mul.ref(5704, 1)), $mul.ref(16, 1));
    goto corral_source_split_1653;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    out_$i70 := $zext.i32.i64(out_$i69);
    goto corral_source_split_1652;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    out_$i69 := $and.i32(out_$i68, out_$i21);
    goto corral_source_split_1651;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    out_$i68 := $sub.i32(out_$i67, 1);
    goto corral_source_split_1650;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    out_$i67 := $load.i32($M.0, out_$p66);
    goto corral_source_split_1649;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 8944)), $mul.ref(5704, 1)), $mul.ref(8, 1));
    goto corral_source_split_1648;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    out_$i64 := $sdiv.i64(out_$i63, 64);
    call {:si_unique_call 403} {:cexpr "pfn"} boogie_si_record_i64(out_$i64);
    goto corral_source_split_1647;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    out_$i63 := $add.i64(out_$i62, 24189255811072);
    goto corral_source_split_1646;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    out_$i62 := $p2i.ref.i64(out_$p61);
    goto corral_source_split_1645;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 402} out_$p61 := skb_frag_page(out_$p60);
    goto corral_source_split_1644;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    out_$p60 := $bitcast.ref.ref(out_$p59);
    goto corral_source_split_1643;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(out_$p58, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_1642;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    out_$p58 := $bitcast.ref.ref(out_$p57);
    goto corral_source_split_1641;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} out_$p57 := skb_end_pointer(out_$p22);
    goto corral_source_split_1640;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p56, out_$i45);
    goto corral_source_split_1639;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(out_$i54, 4));
    goto corral_source_split_1638;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    out_$i54 := $sext.i32.i64(out_$i53);
    goto corral_source_split_1637;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i53 := $zext.i16.i32(out_$i28);
    goto corral_source_split_1636;

  $bb22:
    assume !(out_$i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    out_$i52 := $ne.i64(out_$i51, 0);
    goto corral_source_split_1632;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} out_$i51 := ldv__builtin_expect(out_$i50, 0);
    call {:si_unique_call 399} {:cexpr "tmp___5"} boogie_si_record_i64(out_$i51);
    goto corral_source_split_1631;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    out_$i50 := $sext.i32.i64(out_$i49);
    goto corral_source_split_1630;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    out_$i49 := $zext.i1.i32(out_$i48);
    goto corral_source_split_1629;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    out_$i48 := $slt.i32(out_$i47, 0);
    goto corral_source_split_1628;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    out_$i47 := $sext.i16.i32(out_$i46);
    goto corral_source_split_1627;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    out_$i46 := $trunc.i32.i16(out_$i45);
    goto corral_source_split_1626;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} out_$i45 := gnttab_claim_grant_reference(out_$p44);
    call {:si_unique_call 397} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i45);
    goto corral_source_split_1625;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8944)), $mul.ref(7912, 1));
    goto corral_source_split_1624;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p43, out_$p22);
    goto corral_source_split_1623;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(out_$i41, 8));
    goto corral_source_split_1622;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    out_$i41 := $sext.i32.i64(out_$i40);
    goto corral_source_split_1621;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i40 := $zext.i16.i32(out_$i28);
    goto corral_source_split_1620;

  $bb18:
    assume !(out_$i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    out_$i39 := $ne.i64(out_$i38, 0);
    goto corral_source_split_1616;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 393} out_$i38 := ldv__builtin_expect(out_$i37, 0);
    call {:si_unique_call 394} {:cexpr "tmp___3"} boogie_si_record_i64(out_$i38);
    goto corral_source_split_1615;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    out_$i37 := $sext.i32.i64(out_$i36);
    goto corral_source_split_1614;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    out_$i36 := $zext.i1.i32(out_$i35);
    goto corral_source_split_1613;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    out_$i35 := $ne.i64(out_$i34, 0);
    goto corral_source_split_1612;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    out_$i34 := $p2i.ref.i64(out_$p33);
    goto corral_source_split_1611;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    out_$p33 := $load.ref($M.0, out_$p32);
    goto corral_source_split_1610;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(out_$i30, 8));
    goto corral_source_split_1609;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    out_$i30 := $sext.i32.i64(out_$i29);
    goto corral_source_split_1608;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    out_$i29 := $zext.i16.i32(out_$i28);
    goto corral_source_split_1607;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    out_$i28 := $trunc.i32.i16(out_$i27);
    call {:si_unique_call 392} {:cexpr "id"} boogie_si_record_i16(out_$i28);
    goto corral_source_split_1606;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} out_$i27 := xennet_rxidx(out_$i21);
    call {:si_unique_call 391} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i27);
    goto corral_source_split_1605;

  $bb14:
    assume !(out_$i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    out_$i25 := out_$i21;
    assume true;
    goto $bb14;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    out_$i24 := $eq.i64(out_$i23, 0);
    goto corral_source_split_1593;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    out_$i23 := $p2i.ref.i64(out_$p22);
    goto corral_source_split_1592;

  SeqInstr_6:
    goto corral_source_split_1591;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} out_$p22 := xennet_alloc_one_rx_buffer(in_$p0);
    goto SeqInstr_5;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb25_dummy:
    call {:si_unique_call 1} out_$p22, out_$i23, out_$i24, out_$i25, out_$i27, out_$i28, out_$i29, out_$i30, out_$p32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$p43, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$p56, out_$p57, out_$p58, out_$p59, out_$p60, out_$p61, out_$i62, out_$i63, out_$i64, out_$p66, out_$i67, out_$i68, out_$i69, out_$i70, out_$p72, out_$p73, out_$p75, out_$p76, out_$i77, out_$p78, out_$p79, out_$p80, out_$p81, out_$p82, out_$i83, out_$i84, out_$i85, out_$i86, out_$p87, out_$p88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i21, out_$i93 := xennet_alloc_rx_buffers_loop_$bb11(in_$p0, in_$p16, out_$p22, out_$i23, out_$i24, out_$i25, out_$i27, out_$i28, out_$i29, out_$i30, out_$p32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$p43, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$p56, out_$p57, out_$p58, out_$p59, out_$p60, out_$p61, out_$i62, out_$i63, out_$i64, out_$p66, out_$i67, out_$i68, out_$i69, out_$i70, out_$p72, out_$p73, out_$p75, out_$p76, out_$i77, out_$p78, out_$p79, out_$p80, out_$p81, out_$p82, out_$i83, out_$i84, out_$i85, out_$i86, out_$p87, out_$p88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i21, out_$i93);
    return;

  exit:
    return;
}



procedure xennet_alloc_rx_buffers_loop_$bb11(in_$p0: ref, in_$p16: ref, in_$p22: ref, in_$i23: i64, in_$i24: i1, in_$i25: i32, in_$i27: i32, in_$i28: i16, in_$i29: i32, in_$i30: i64, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$i35: i1, in_$i36: i32, in_$i37: i64, in_$i38: i64, in_$i39: i1, in_$i40: i32, in_$i41: i64, in_$p43: ref, in_$p44: ref, in_$i45: i32, in_$i46: i16, in_$i47: i32, in_$i48: i1, in_$i49: i32, in_$i50: i64, in_$i51: i64, in_$i52: i1, in_$i53: i32, in_$i54: i64, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$i62: i64, in_$i63: i64, in_$i64: i64, in_$p66: ref, in_$i67: i32, in_$i68: i32, in_$i69: i32, in_$i70: i64, in_$p72: ref, in_$p73: ref, in_$p75: ref, in_$p76: ref, in_$i77: i64, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$p81: ref, in_$p82: ref, in_$i83: i32, in_$i84: i16, in_$i85: i32, in_$i86: i16, in_$p87: ref, in_$p88: ref, in_$i89: i32, in_$i90: i32, in_$i91: i32, in_$i92: i1, in_$i21: i32, in_$i93: i32) returns (out_$p22: ref, out_$i23: i64, out_$i24: i1, out_$i25: i32, out_$i27: i32, out_$i28: i16, out_$i29: i32, out_$i30: i64, out_$p32: ref, out_$p33: ref, out_$i34: i64, out_$i35: i1, out_$i36: i32, out_$i37: i64, out_$i38: i64, out_$i39: i1, out_$i40: i32, out_$i41: i64, out_$p43: ref, out_$p44: ref, out_$i45: i32, out_$i46: i16, out_$i47: i32, out_$i48: i1, out_$i49: i32, out_$i50: i64, out_$i51: i64, out_$i52: i1, out_$i53: i32, out_$i54: i64, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$i62: i64, out_$i63: i64, out_$i64: i64, out_$p66: ref, out_$i67: i32, out_$i68: i32, out_$i69: i32, out_$i70: i64, out_$p72: ref, out_$p73: ref, out_$p75: ref, out_$p76: ref, out_$i77: i64, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$p81: ref, out_$p82: ref, out_$i83: i32, out_$i84: i16, out_$i85: i32, out_$i86: i16, out_$p87: ref, out_$p88: ref, out_$i89: i32, out_$i90: i32, out_$i91: i32, out_$i92: i1, out_$i21: i32, out_$i93: i32);
  modifies $M.0, assertsPassed;



implementation netif_tx_start_all_queues_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p5: ref, in_$i6: i32, in_$i7: i32, in_$i8: i1, in_$i4: i32) returns (out_$p5: ref, out_$i6: i32, out_$i7: i32, out_$i8: i1, out_$i4: i32)
{

  entry:
    out_$p5, out_$i6, out_$i7, out_$i8, out_$i4 := in_$p5, in_$i6, in_$i7, in_$i8, in_$i4;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1722;

  $bb6:
    assume out_$i8 == 1;
    assume {:verifier.code 0} true;
    out_$i4 := out_$i6;
    goto $bb6_dummy;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    out_$i8 := $ugt.i32(out_$i7, out_$i6);
    goto corral_source_split_1728;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    out_$i7 := $load.i32($M.0, in_$p1);
    goto corral_source_split_1727;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    out_$i6 := $add.i32(out_$i4, 1);
    call {:si_unique_call 420} {:cexpr "i"} boogie_si_record_i32(out_$i6);
    goto corral_source_split_1726;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} netif_tx_start_queue(out_$p5);
    goto corral_source_split_1725;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} out_$p5 := netdev_get_tx_queue(in_$p0, out_$i4);
    goto corral_source_split_1724;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p5, out_$i6, out_$i7, out_$i8, out_$i4 := netif_tx_start_all_queues_loop_$bb4(in_$p0, in_$p1, out_$p5, out_$i6, out_$i7, out_$i8, out_$i4);
    return;

  exit:
    return;
}



procedure netif_tx_start_all_queues_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p5: ref, in_$i6: i32, in_$i7: i32, in_$i8: i1, in_$i4: i32) returns (out_$p5: ref, out_$i6: i32, out_$i7: i32, out_$i8: i1, out_$i4: i32);



implementation xennet_disconnect_backend_loop_$bb4(in_$p0: ref, in_$i4: i32, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$p12: ref, in_$p13: ref, in_$i14: i32, in_$i15: i1, in_$p16: ref, in_$i17: i32, in_$p18: ref, in_$i19: i32, in_$i20: i1, in_$p21: ref, in_$i22: i32, in_$p23: ref, in_$p24: ref, in_$i25: i32, in_$i26: i1, in_$p27: ref, in_$i28: i32, in_$p29: ref, in_$i30: i32, in_$i31: i1, in_$p32: ref, in_$i33: i32, in_$p34: ref, in_$p35: ref, in_$i36: i32, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$i44: i32, in_$p45: ref, in_$i46: i32, in_$p47: ref, in_$i48: i32, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$i54: i32, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p62: ref, in_$p64: ref, in_$i65: i32, in_$i66: i1, in_$i8: i32) returns (out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$p12: ref, out_$p13: ref, out_$i14: i32, out_$i15: i1, out_$p16: ref, out_$i17: i32, out_$p18: ref, out_$i19: i32, out_$i20: i1, out_$p21: ref, out_$i22: i32, out_$p23: ref, out_$p24: ref, out_$i25: i32, out_$i26: i1, out_$p27: ref, out_$i28: i32, out_$p29: ref, out_$i30: i32, out_$i31: i1, out_$p32: ref, out_$i33: i32, out_$p34: ref, out_$p35: ref, out_$i36: i32, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$i44: i32, out_$p45: ref, out_$i46: i32, out_$p47: ref, out_$i48: i32, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$i54: i32, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p62: ref, out_$p64: ref, out_$i65: i32, out_$i66: i1, out_$i8: i32)
{

  entry:
    out_$p9, out_$p10, out_$i11, out_$p12, out_$p13, out_$i14, out_$i15, out_$p16, out_$i17, out_$p18, out_$i19, out_$i20, out_$p21, out_$i22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p27, out_$i28, out_$p29, out_$i30, out_$i31, out_$p32, out_$i33, out_$p34, out_$p35, out_$i36, out_$p37, out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$p43, out_$i44, out_$p45, out_$i46, out_$p47, out_$i48, out_$p50, out_$p51, out_$p52, out_$p53, out_$i54, out_$p56, out_$p57, out_$p58, out_$p59, out_$p60, out_$p62, out_$p64, out_$i65, out_$i66, out_$i8 := in_$p9, in_$p10, in_$i11, in_$p12, in_$p13, in_$i14, in_$i15, in_$p16, in_$i17, in_$p18, in_$i19, in_$i20, in_$p21, in_$i22, in_$p23, in_$p24, in_$i25, in_$i26, in_$p27, in_$i28, in_$p29, in_$i30, in_$i31, in_$p32, in_$i33, in_$p34, in_$p35, in_$i36, in_$p37, in_$p38, in_$p39, in_$p40, in_$p41, in_$p42, in_$p43, in_$i44, in_$p45, in_$i46, in_$p47, in_$i48, in_$p50, in_$p51, in_$p52, in_$p53, in_$i54, in_$p56, in_$p57, in_$p58, in_$p59, in_$p60, in_$p62, in_$p64, in_$i65, in_$i66, in_$i8;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2214;

  $bb18:
    assume out_$i66 == 1;
    assume {:verifier.code 0} true;
    out_$i8 := out_$i65;
    goto $bb18_dummy;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    out_$i66 := $ult.i32(out_$i65, in_$i4);
    goto corral_source_split_2297;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    out_$i65 := $add.i32(out_$i8, 1);
    call {:si_unique_call 546} {:cexpr "i"} boogie_si_record_i32(out_$i65);
    goto corral_source_split_2296;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p64, $0.ref);
    goto corral_source_split_2295;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref($add.ref(out_$p10, $mul.ref(out_$i11, 8944)), $mul.ref(5704, 1)), $mul.ref(16, 1));
    goto corral_source_split_2294;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p62, $0.ref);
    goto corral_source_split_2293;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref($add.ref(out_$p10, $mul.ref(out_$i11, 8944)), $mul.ref(464, 1)), $mul.ref(16, 1));
    goto corral_source_split_2292;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p60, 0);
    goto corral_source_split_2291;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(out_$p10, $mul.ref(out_$i11, 8944)), $mul.ref(5728, 1));
    goto corral_source_split_2290;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p59, 0);
    goto corral_source_split_2289;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(out_$p10, $mul.ref(out_$i11, 8944)), $mul.ref(488, 1));
    goto corral_source_split_2288;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} xennet_end_access(out_$i54, out_$p58);
    goto corral_source_split_2287;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    out_$p58 := $bitcast.ref.ref(out_$p57);
    goto corral_source_split_2286;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    out_$p57 := $load.ref($M.0, out_$p56);
    goto corral_source_split_2285;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref($add.ref(out_$p10, $mul.ref(out_$i11, 8944)), $mul.ref(5704, 1)), $mul.ref(16, 1));
    goto corral_source_split_2284;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    out_$i54 := $load.i32($M.0, out_$p53);
    goto corral_source_split_2283;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(out_$p10, $mul.ref(out_$i11, 8944)), $mul.ref(5728, 1));
    goto corral_source_split_2282;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} xennet_end_access(out_$i48, out_$p52);
    goto corral_source_split_2281;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    out_$p52 := $bitcast.ref.ref(out_$p51);
    goto corral_source_split_2280;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    out_$p51 := $load.ref($M.0, out_$p50);
    goto corral_source_split_2279;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref($add.ref(out_$p10, $mul.ref(out_$i11, 8944)), $mul.ref(464, 1)), $mul.ref(16, 1));
    goto corral_source_split_2278;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    out_$i48 := $load.i32($M.0, out_$p47);
    goto corral_source_split_2277;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(out_$p10, $mul.ref(out_$i11, 8944)), $mul.ref(488, 1));
    goto corral_source_split_2276;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} gnttab_free_grant_references(out_$i46);
    goto corral_source_split_2275;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    out_$i46 := $load.i32($M.0, out_$p45);
    goto corral_source_split_2274;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(out_$p10, $mul.ref(out_$i11, 8944)), $mul.ref(7912, 1));
    goto corral_source_split_2273;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} gnttab_free_grant_references(out_$i44);
    goto corral_source_split_2272;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    out_$i44 := $load.i32($M.0, out_$p43);
    goto corral_source_split_2271;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(out_$p10, $mul.ref(out_$i11, 8944)), $mul.ref(2544, 1));
    goto corral_source_split_2270;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} xennet_release_rx_bufs(out_$p12);
    goto corral_source_split_2269;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} xennet_release_tx_bufs(out_$p12);
    goto corral_source_split_2268;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} napi_synchronize(out_$p42);
    goto corral_source_split_2267;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(out_$p10, $mul.ref(out_$i11, 8944)), $mul.ref(40, 1));
    goto corral_source_split_2266;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p41, 0);
    goto corral_source_split_2265;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(out_$p10, $mul.ref(out_$i11, 8944)), $mul.ref(328, 1));
    goto corral_source_split_2264;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p40, 0);
    goto corral_source_split_2263;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(out_$p10, $mul.ref(out_$i11, 8944)), $mul.ref(332, 1));
    goto corral_source_split_2262;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p39, 0);
    goto corral_source_split_2261;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(out_$p10, $mul.ref(out_$i11, 8944)), $mul.ref(320, 1));
    goto corral_source_split_2260;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p38, 0);
    goto corral_source_split_2259;

  $bb17:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(out_$p10, $mul.ref(out_$i11, 8944)), $mul.ref(324, 1));
    goto corral_source_split_2258;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} unbind_from_irqhandler(out_$i36, out_$p37);
    goto corral_source_split_2256;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    out_$p37 := $bitcast.ref.ref(out_$p12);
    goto corral_source_split_2255;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    out_$i36 := $load.i32($M.0, out_$p35);
    goto corral_source_split_2254;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(out_$p10, $mul.ref(out_$i11, 8944)), $mul.ref(332, 1));
    goto corral_source_split_2253;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} unbind_from_irqhandler(out_$i33, out_$p34);
    goto corral_source_split_2252;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    out_$p34 := $bitcast.ref.ref(out_$p12);
    goto corral_source_split_2251;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i32($M.0, out_$p32);
    goto corral_source_split_2250;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p10, $mul.ref(out_$i11, 8944)), $mul.ref(328, 1));
    goto corral_source_split_2249;

  $bb15:
    assume out_$i31 == 1;
    goto corral_source_split_2248;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    out_$i31 := $ne.i32(out_$i28, out_$i30);
    goto corral_source_split_2246;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i32($M.0, out_$p29);
    goto corral_source_split_2245;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p10, $mul.ref(out_$i11, 8944)), $mul.ref(332, 1));
    goto corral_source_split_2244;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i32($M.0, out_$p27);
    goto corral_source_split_2243;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p10, $mul.ref(out_$i11, 8944)), $mul.ref(328, 1));
    goto corral_source_split_2242;

  $bb12:
    assume out_$i26 == 1;
    goto corral_source_split_2241;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    out_$i26 := $ne.i32(out_$i25, 0);
    goto corral_source_split_2239;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i32($M.0, out_$p24);
    goto corral_source_split_2238;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p10, $mul.ref(out_$i11, 8944)), $mul.ref(328, 1));
    goto corral_source_split_2237;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} unbind_from_irqhandler(out_$i22, out_$p23);
    goto corral_source_split_2235;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    out_$p23 := $bitcast.ref.ref(out_$p12);
    goto corral_source_split_2234;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    out_$i22 := $load.i32($M.0, out_$p21);
    goto corral_source_split_2233;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p10, $mul.ref(out_$i11, 8944)), $mul.ref(328, 1));
    goto corral_source_split_2232;

  $bb9:
    assume out_$i20 == 1;
    goto corral_source_split_2231;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    out_$i20 := $eq.i32(out_$i17, out_$i19);
    goto corral_source_split_2229;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    out_$i19 := $load.i32($M.0, out_$p18);
    goto corral_source_split_2228;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(out_$p10, $mul.ref(out_$i11, 8944)), $mul.ref(332, 1));
    goto corral_source_split_2227;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    out_$i17 := $load.i32($M.0, out_$p16);
    goto corral_source_split_2226;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(out_$p10, $mul.ref(out_$i11, 8944)), $mul.ref(328, 1));
    goto corral_source_split_2225;

  $bb6:
    assume out_$i15 == 1;
    goto corral_source_split_2224;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    out_$i15 := $ne.i32(out_$i14, 0);
    goto corral_source_split_2222;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    out_$i14 := $load.i32($M.0, out_$p13);
    goto corral_source_split_2221;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(out_$p10, $mul.ref(out_$i11, 8944)), $mul.ref(328, 1));
    goto corral_source_split_2220;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref(out_$p10, $mul.ref(out_$i11, 8944));
    goto corral_source_split_2219;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    out_$i11 := $zext.i32.i64(out_$i8);
    goto corral_source_split_2218;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    out_$p10 := $load.ref($M.0, out_$p9);
    goto corral_source_split_2217;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(in_$p0, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_2216;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i15 == 1);
    goto $bb8;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i20 == 1);
    goto $bb8;

  $bb13:
    assume {:verifier.code 0} true;
    assume !(out_$i26 == 1);
    goto $bb14;

  $bb16:
    assume {:verifier.code 0} true;
    assume !(out_$i31 == 1);
    goto $bb14;

  $bb18_dummy:
    call {:si_unique_call 1} out_$p9, out_$p10, out_$i11, out_$p12, out_$p13, out_$i14, out_$i15, out_$p16, out_$i17, out_$p18, out_$i19, out_$i20, out_$p21, out_$i22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p27, out_$i28, out_$p29, out_$i30, out_$i31, out_$p32, out_$i33, out_$p34, out_$p35, out_$i36, out_$p37, out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$p43, out_$i44, out_$p45, out_$i46, out_$p47, out_$i48, out_$p50, out_$p51, out_$p52, out_$p53, out_$i54, out_$p56, out_$p57, out_$p58, out_$p59, out_$p60, out_$p62, out_$p64, out_$i65, out_$i66, out_$i8 := xennet_disconnect_backend_loop_$bb4(in_$p0, in_$i4, out_$p9, out_$p10, out_$i11, out_$p12, out_$p13, out_$i14, out_$i15, out_$p16, out_$i17, out_$p18, out_$i19, out_$i20, out_$p21, out_$i22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p27, out_$i28, out_$p29, out_$i30, out_$i31, out_$p32, out_$i33, out_$p34, out_$p35, out_$i36, out_$p37, out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$p43, out_$i44, out_$p45, out_$i46, out_$p47, out_$i48, out_$p50, out_$p51, out_$p52, out_$p53, out_$i54, out_$p56, out_$p57, out_$p58, out_$p59, out_$p60, out_$p62, out_$p64, out_$i65, out_$i66, out_$i8);
    return;

  exit:
    return;
}



procedure xennet_disconnect_backend_loop_$bb4(in_$p0: ref, in_$i4: i32, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$p12: ref, in_$p13: ref, in_$i14: i32, in_$i15: i1, in_$p16: ref, in_$i17: i32, in_$p18: ref, in_$i19: i32, in_$i20: i1, in_$p21: ref, in_$i22: i32, in_$p23: ref, in_$p24: ref, in_$i25: i32, in_$i26: i1, in_$p27: ref, in_$i28: i32, in_$p29: ref, in_$i30: i32, in_$i31: i1, in_$p32: ref, in_$i33: i32, in_$p34: ref, in_$p35: ref, in_$i36: i32, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$i44: i32, in_$p45: ref, in_$i46: i32, in_$p47: ref, in_$i48: i32, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$i54: i32, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p62: ref, in_$p64: ref, in_$i65: i32, in_$i66: i1, in_$i8: i32) returns (out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$p12: ref, out_$p13: ref, out_$i14: i32, out_$i15: i1, out_$p16: ref, out_$i17: i32, out_$p18: ref, out_$i19: i32, out_$i20: i1, out_$p21: ref, out_$i22: i32, out_$p23: ref, out_$p24: ref, out_$i25: i32, out_$i26: i1, out_$p27: ref, out_$i28: i32, out_$p29: ref, out_$i30: i32, out_$i31: i1, out_$p32: ref, out_$i33: i32, out_$p34: ref, out_$p35: ref, out_$i36: i32, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$i44: i32, out_$p45: ref, out_$i46: i32, out_$p47: ref, out_$i48: i32, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$i54: i32, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p62: ref, out_$p64: ref, out_$i65: i32, out_$i66: i1, out_$i8: i32);
  modifies $M.0, $M.14;



implementation napi_synchronize_loop_$bb4(in_$p1: ref, in_$i4: i32, in_$i5: i1) returns (out_$i4: i32, out_$i5: i1)
{

  entry:
    out_$i4, out_$i5 := in_$i4, in_$i5;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6:
    assume {:verifier.code 0} true;
    assume out_$i5 == 1;
    goto $bb6_dummy;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    out_$i5 := $ne.i32(out_$i4, 0);
    goto corral_source_split_2314;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} out_$i4 := constant_test_bit(0, in_$p1);
    call {:si_unique_call 552} {:cexpr "tmp"} boogie_si_record_i32(out_$i4);
    goto corral_source_split_2313;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} msleep(1);
    goto corral_source_split_2312;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i4, out_$i5 := napi_synchronize_loop_$bb4(in_$p1, out_$i4, out_$i5);
    return;

  exit:
    return;
}



procedure napi_synchronize_loop_$bb4(in_$p1: ref, in_$i4: i32, in_$i5: i1) returns (out_$i4: i32, out_$i5: i1);



implementation xennet_release_tx_bufs_loop_$bb1(in_$p0: ref, in_$p2: ref, in_$p3: ref, in_$i4: i64, in_$p5: ref, in_$i6: i32, in_$i7: i1, in_$i8: i64, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$i13: i64, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$p24: ref, in_$i25: i32, in_$i26: i64, in_$i27: i64, in_$p29: ref, in_$i30: i64, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$i36: i16, in_$i37: i32, in_$i38: i16, in_$i39: i32, in_$i40: i1, in_$i1: i32) returns (out_$p2: ref, out_$p3: ref, out_$i4: i64, out_$p5: ref, out_$i6: i32, out_$i7: i1, out_$i8: i64, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$i13: i64, out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$p24: ref, out_$i25: i32, out_$i26: i64, out_$i27: i64, out_$p29: ref, out_$i30: i64, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$i36: i16, out_$i37: i32, out_$i38: i16, out_$i39: i32, out_$i40: i1, out_$i1: i32)
{

  entry:
    out_$p2, out_$p3, out_$i4, out_$p5, out_$i6, out_$i7, out_$i8, out_$p10, out_$p11, out_$p12, out_$i13, out_$p15, out_$p16, out_$i17, out_$p19, out_$p20, out_$p21, out_$i22, out_$p24, out_$i25, out_$i26, out_$i27, out_$p29, out_$i30, out_$p32, out_$p33, out_$p34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i1 := in_$p2, in_$p3, in_$i4, in_$p5, in_$i6, in_$i7, in_$i8, in_$p10, in_$p11, in_$p12, in_$i13, in_$p15, in_$p16, in_$i17, in_$p19, in_$p20, in_$p21, in_$i22, in_$p24, in_$i25, in_$i26, in_$i27, in_$p29, in_$i30, in_$p32, in_$p33, in_$p34, in_$p35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i1;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_2320;

  $bb7:
    assume out_$i40 == 1;
    assume {:verifier.code 0} true;
    out_$i1 := out_$i39;
    goto $bb7_dummy;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    out_$i40 := $ule.i32(out_$i39, 255);
    goto corral_source_split_2332;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i39 := $add.i32(out_$i1, 1);
    call {:si_unique_call 555} {:cexpr "i"} boogie_si_record_i32(out_$i39);
    goto corral_source_split_2331;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb3:
    assume out_$i7 == 1;
    goto corral_source_split_2329;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    out_$i7 := $ne.i32(out_$i6, 0);
    goto corral_source_split_2327;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} out_$i6 := skb_entry_is_link(out_$p5);
    call {:si_unique_call 554} {:cexpr "tmp"} boogie_si_record_i32(out_$i6);
    goto corral_source_split_2326;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    out_$p5 := $add.ref(out_$p3, $mul.ref(out_$i4, 8));
    goto corral_source_split_2325;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    out_$i4 := $sext.i32.i64(out_$i1);
    goto corral_source_split_2324;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    out_$p3 := $bitcast.ref.ref(out_$p2);
    goto corral_source_split_2323;

  $bb2:
    assume {:verifier.code 0} true;
    out_$p2 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8944)), $mul.ref(496, 1));
    goto corral_source_split_2322;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    goto $bb2;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} dev_kfree_skb_irq(out_$p12);
    goto corral_source_split_2364;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 559} add_id_to_freelist(out_$p33, out_$p35, out_$i38);
    goto corral_source_split_2363;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    out_$i38 := $trunc.i32.i16(out_$i37);
    goto corral_source_split_2362;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    out_$i37 := $zext.i16.i32(out_$i36);
    goto corral_source_split_2361;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    out_$i36 := $trunc.i32.i16(out_$i1);
    goto corral_source_split_2360;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    out_$p35 := $bitcast.ref.ref(out_$p34);
    goto corral_source_split_2359;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8944)), $mul.ref(496, 1));
    goto corral_source_split_2358;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8944)), $mul.ref(5624, 1));
    goto corral_source_split_2357;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p32, 0);
    goto corral_source_split_2356;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 8944)), $mul.ref(2548, 1)), $mul.ref(out_$i30, 4));
    goto corral_source_split_2355;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    out_$i30 := $sext.i32.i64(out_$i1);
    goto corral_source_split_2354;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p29, $0.ref);
    goto corral_source_split_2353;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 8944)), $mul.ref(3576, 1)), $mul.ref(out_$i27, 8));
    goto corral_source_split_2352;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    out_$i27 := $sext.i32.i64(out_$i1);
    goto corral_source_split_2351;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} gnttab_end_foreign_access(out_$i25, 4, out_$i26);
    goto corral_source_split_2350;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    out_$i26 := $p2i.ref.i64(out_$p21);
    goto corral_source_split_2349;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i32($M.0, out_$p24);
    goto corral_source_split_2348;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 8944)), $mul.ref(2548, 1)), $mul.ref(out_$i22, 4));
    goto corral_source_split_2347;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    out_$i22 := $sext.i32.i64(out_$i1);
    goto corral_source_split_2346;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} out_$p21 := lowmem_page_address(out_$p20);
    goto corral_source_split_2345;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.0, out_$p19);
    goto corral_source_split_2344;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 8944)), $mul.ref(3576, 1)), $mul.ref(out_$i17, 8));
    goto corral_source_split_2343;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    out_$i17 := $sext.i32.i64(out_$i1);
    goto corral_source_split_2342;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} get_page(out_$p16);
    goto corral_source_split_2341;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    out_$p16 := $load.ref($M.0, out_$p15);
    goto corral_source_split_2340;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 8944)), $mul.ref(3576, 1)), $mul.ref(out_$i13, 8));
    goto corral_source_split_2339;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    out_$i13 := $sext.i32.i64(out_$i1);
    goto corral_source_split_2338;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    out_$p12 := $load.ref($M.0, out_$p11);
    goto corral_source_split_2337;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    out_$p11 := $bitcast.ref.ref(out_$p10);
    goto corral_source_split_2336;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 8944)), $mul.ref(496, 1)), $mul.ref(out_$i8, 8));
    goto corral_source_split_2335;

  $bb6:
    assume {:verifier.code 0} true;
    out_$i8 := $sext.i32.i64(out_$i1);
    goto corral_source_split_2334;

  $bb4:
    assume !(out_$i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb7_dummy:
    call {:si_unique_call 1} out_$p2, out_$p3, out_$i4, out_$p5, out_$i6, out_$i7, out_$i8, out_$p10, out_$p11, out_$p12, out_$i13, out_$p15, out_$p16, out_$i17, out_$p19, out_$p20, out_$p21, out_$i22, out_$p24, out_$i25, out_$i26, out_$i27, out_$p29, out_$i30, out_$p32, out_$p33, out_$p34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i1 := xennet_release_tx_bufs_loop_$bb1(in_$p0, out_$p2, out_$p3, out_$i4, out_$p5, out_$i6, out_$i7, out_$i8, out_$p10, out_$p11, out_$p12, out_$i13, out_$p15, out_$p16, out_$i17, out_$p19, out_$p20, out_$p21, out_$i22, out_$p24, out_$i25, out_$i26, out_$i27, out_$p29, out_$i30, out_$p32, out_$p33, out_$p34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i1);
    return;

  exit:
    return;
}



procedure xennet_release_tx_bufs_loop_$bb1(in_$p0: ref, in_$p2: ref, in_$p3: ref, in_$i4: i64, in_$p5: ref, in_$i6: i32, in_$i7: i1, in_$i8: i64, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$i13: i64, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$p24: ref, in_$i25: i32, in_$i26: i64, in_$i27: i64, in_$p29: ref, in_$i30: i64, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$i36: i16, in_$i37: i32, in_$i38: i16, in_$i39: i32, in_$i40: i1, in_$i1: i32) returns (out_$p2: ref, out_$p3: ref, out_$i4: i64, out_$p5: ref, out_$i6: i32, out_$i7: i1, out_$i8: i64, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$i13: i64, out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$p24: ref, out_$i25: i32, out_$i26: i64, out_$i27: i64, out_$p29: ref, out_$i30: i64, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$i36: i16, out_$i37: i32, out_$i38: i16, out_$i39: i32, out_$i40: i1, out_$i1: i32);
  modifies $M.0;



implementation get_page_loop_$bb10()
{

  entry:
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb10_dummy;

  $bb10_dummy:
    call {:si_unique_call 1} get_page_loop_$bb10();
    return;

  exit:
    return;
}



procedure get_page_loop_$bb10();



implementation xennet_destroy_queues_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p7: ref, in_$p8: ref, in_$i9: i64, in_$p11: ref, in_$p12: ref, in_$i13: i1, in_$i14: i8, in_$i15: i1, in_$p16: ref, in_$p17: ref, in_$p19: ref, in_$i20: i32, in_$p21: ref, in_$p22: ref, in_$i23: i32, in_$i24: i1, in_$i6: i32, in_vslice_dummy_var_23: i32) returns (out_$p7: ref, out_$p8: ref, out_$i9: i64, out_$p11: ref, out_$p12: ref, out_$i13: i1, out_$i14: i8, out_$i15: i1, out_$p16: ref, out_$p17: ref, out_$p19: ref, out_$i20: i32, out_$p21: ref, out_$p22: ref, out_$i23: i32, out_$i24: i1, out_$i6: i32, out_vslice_dummy_var_23: i32)
{

  entry:
    out_$p7, out_$p8, out_$i9, out_$p11, out_$p12, out_$i13, out_$i14, out_$i15, out_$p16, out_$p17, out_$p19, out_$i20, out_$p21, out_$p22, out_$i23, out_$i24, out_$i6, out_vslice_dummy_var_23 := in_$p7, in_$p8, in_$i9, in_$p11, in_$p12, in_$i13, in_$i14, in_$i15, in_$p16, in_$p17, in_$p19, in_$i20, in_$p21, in_$p22, in_$i23, in_$i24, in_$i6, in_vslice_dummy_var_23;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_9116;

  $bb9:
    assume out_$i24 == 1;
    assume {:verifier.code 0} true;
    out_$i6 := out_$i20;
    goto $bb9_dummy;

  corral_source_split_9140:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_9139:
    assume {:verifier.code 0} true;
    out_$i24 := $ugt.i32(out_$i23, out_$i20);
    goto corral_source_split_9140;

  corral_source_split_9138:
    assume {:verifier.code 0} true;
    out_$i23 := $load.i32($M.0, out_$p22);
    goto corral_source_split_9139;

  corral_source_split_9137:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p21, $mul.ref(0, 2968)), $mul.ref(1028, 1));
    goto corral_source_split_9138;

  corral_source_split_9136:
    assume {:verifier.code 0} true;
    out_$p21 := $load.ref($M.0, in_$p1);
    goto corral_source_split_9137;

  corral_source_split_9135:
    assume {:verifier.code 0} true;
    out_$i20 := $add.i32(out_$i6, 1);
    call {:si_unique_call 2134} {:cexpr "i"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_9136;

  corral_source_split_9134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2133} netif_napi_del(out_$p19);
    goto corral_source_split_9135;

  corral_source_split_9133:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(out_$p8, $mul.ref(out_$i9, 8944)), $mul.ref(40, 1));
    goto corral_source_split_9134;

  corral_source_split_9132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2132} out_vslice_dummy_var_23 := ldv_del_timer_sync_43(out_$p17);
    goto corral_source_split_9133;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p8, $mul.ref(out_$i9, 8944)), $mul.ref(5736, 1));
    goto corral_source_split_9132;

  $bb7:
    assume !(out_$i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_9130:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_9129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2131} napi_disable(out_$p16);
    goto corral_source_split_9130;

  corral_source_split_9128:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(out_$p8, $mul.ref(out_$i9, 8944)), $mul.ref(40, 1));
    goto corral_source_split_9129;

  $bb6:
    assume out_$i15 == 1;
    goto corral_source_split_9128;

  corral_source_split_9126:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_9125:
    assume {:verifier.code 0} true;
    out_$i15 := $trunc.i8.i1(out_$i14);
    goto corral_source_split_9126;

  corral_source_split_9124:
    assume {:verifier.code 0} true;
    out_$i14 := $zext.i1.i8(out_$i13);
    call {:si_unique_call 2130} {:cexpr "tmp"} boogie_si_record_i8(out_$i14);
    goto corral_source_split_9125;

  corral_source_split_9123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2129} out_$i13 := netif_running(out_$p12);
    goto corral_source_split_9124;

  corral_source_split_9122:
    assume {:verifier.code 0} true;
    out_$p12 := $load.ref($M.0, out_$p11);
    goto corral_source_split_9123;

  corral_source_split_9121:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(in_$p0, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_9122;

  corral_source_split_9120:
    assume {:verifier.code 0} true;
    goto corral_source_split_9121;

  corral_source_split_9119:
    assume {:verifier.code 0} true;
    out_$i9 := $zext.i32.i64(out_$i6);
    goto corral_source_split_9120;

  corral_source_split_9118:
    assume {:verifier.code 0} true;
    out_$p8 := $load.ref($M.0, out_$p7);
    goto corral_source_split_9119;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref($add.ref(in_$p0, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_9118;

  corral_source_split_9116:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb9_dummy:
    call {:si_unique_call 1} out_$p7, out_$p8, out_$i9, out_$p11, out_$p12, out_$i13, out_$i14, out_$i15, out_$p16, out_$p17, out_$p19, out_$i20, out_$p21, out_$p22, out_$i23, out_$i24, out_$i6, out_vslice_dummy_var_23 := xennet_destroy_queues_loop_$bb4(in_$p0, in_$p1, out_$p7, out_$p8, out_$i9, out_$p11, out_$p12, out_$i13, out_$i14, out_$i15, out_$p16, out_$p17, out_$p19, out_$i20, out_$p21, out_$p22, out_$i23, out_$i24, out_$i6, out_vslice_dummy_var_23);
    return;

  exit:
    return;
}



procedure xennet_destroy_queues_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p7: ref, in_$p8: ref, in_$i9: i64, in_$p11: ref, in_$p12: ref, in_$i13: i1, in_$i14: i8, in_$i15: i1, in_$p16: ref, in_$p17: ref, in_$p19: ref, in_$i20: i32, in_$p21: ref, in_$p22: ref, in_$i23: i32, in_$i24: i1, in_$i6: i32, in_vslice_dummy_var_23: i32) returns (out_$p7: ref, out_$p8: ref, out_$i9: i64, out_$p11: ref, out_$p12: ref, out_$i13: i1, out_$i14: i8, out_$i15: i1, out_$p16: ref, out_$p17: ref, out_$p19: ref, out_$i20: i32, out_$p21: ref, out_$p22: ref, out_$i23: i32, out_$i24: i1, out_$i6: i32, out_vslice_dummy_var_23: i32);
  modifies $M.16, $M.18, $M.20, $M.22;



implementation xennet_connect_loop_$bb14(in_$p4: ref, in_$i23: i32, in_$p28: ref, in_$p29: ref, in_$i30: i64, in_$p31: ref, in_$p32: ref, in_$i33: i32, in_$p34: ref, in_$i35: i32, in_$p36: ref, in_$i37: i32, in_$i38: i1, in_$p39: ref, in_$i40: i32, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$i45: i32, in_$i46: i1, in_$i27: i32) returns (out_$p28: ref, out_$p29: ref, out_$i30: i64, out_$p31: ref, out_$p32: ref, out_$i33: i32, out_$p34: ref, out_$i35: i32, out_$p36: ref, out_$i37: i32, out_$i38: i1, out_$p39: ref, out_$i40: i32, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$i45: i32, out_$i46: i1, out_$i27: i32)
{

  entry:
    out_$p28, out_$p29, out_$i30, out_$p31, out_$p32, out_$i33, out_$p34, out_$i35, out_$p36, out_$i37, out_$i38, out_$p39, out_$i40, out_$p41, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$i27 := in_$p28, in_$p29, in_$i30, in_$p31, in_$p32, in_$i33, in_$p34, in_$i35, in_$p36, in_$i37, in_$i38, in_$p39, in_$i40, in_$p41, in_$p42, in_$p43, in_$p44, in_$i45, in_$i46, in_$i27;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_9288;

  $bb19:
    assume out_$i46 == 1;
    assume {:verifier.code 0} true;
    out_$i27 := out_$i45;
    goto $bb19_dummy;

  corral_source_split_9319:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19;

  corral_source_split_9318:
    assume {:verifier.code 0} true;
    out_$i46 := $ult.i32(out_$i45, in_$i23);
    goto corral_source_split_9319;

  corral_source_split_9317:
    assume {:verifier.code 0} true;
    out_$i45 := $add.i32(out_$i27, 1);
    call {:si_unique_call 2177} {:cexpr "j"} boogie_si_record_i32(out_$i45);
    goto corral_source_split_9318;

  corral_source_split_9316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2176} spin_unlock_bh(out_$p44);
    goto corral_source_split_9317;

  corral_source_split_9315:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(out_$p29, $mul.ref(out_$i30, 8944)), $mul.ref(5632, 1));
    goto corral_source_split_9316;

  SeqInstr_33:
    goto corral_source_split_9315;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  corral_source_split_9314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2175} xennet_alloc_rx_buffers(out_$p31);
    goto SeqInstr_32;

  corral_source_split_9313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2174} spin_lock_bh(out_$p43);
    goto corral_source_split_9314;

  corral_source_split_9312:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(out_$p29, $mul.ref(out_$i30, 8944)), $mul.ref(5632, 1));
    goto corral_source_split_9313;

  corral_source_split_9311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2173} spin_unlock_irq(out_$p42);
    goto corral_source_split_9312;

  corral_source_split_9310:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(out_$p29, $mul.ref(out_$i30, 8944)), $mul.ref(392, 1));
    goto corral_source_split_9311;

  corral_source_split_9309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2172} xennet_tx_buf_gc(out_$p31);
    goto corral_source_split_9310;

  corral_source_split_9308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2171} spin_lock_irq(out_$p41);
    goto corral_source_split_9309;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(out_$p29, $mul.ref(out_$i30, 8944)), $mul.ref(392, 1));
    goto corral_source_split_9308;

  $bb17:
    assume !(out_$i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_9306:
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_9305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2170} notify_remote_via_irq(out_$i40);
    goto corral_source_split_9306;

  corral_source_split_9304:
    assume {:verifier.code 0} true;
    out_$i40 := $load.i32($M.0, out_$p39);
    goto corral_source_split_9305;

  corral_source_split_9303:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(out_$p29, $mul.ref(out_$i30, 8944)), $mul.ref(332, 1));
    goto corral_source_split_9304;

  $bb16:
    assume out_$i38 == 1;
    goto corral_source_split_9303;

  corral_source_split_9301:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_9300:
    assume {:verifier.code 0} true;
    out_$i38 := $ne.i32(out_$i35, out_$i37);
    goto corral_source_split_9301;

  corral_source_split_9299:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i32($M.0, out_$p36);
    goto corral_source_split_9300;

  corral_source_split_9298:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(out_$p29, $mul.ref(out_$i30, 8944)), $mul.ref(332, 1));
    goto corral_source_split_9299;

  corral_source_split_9297:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i32($M.0, out_$p34);
    goto corral_source_split_9298;

  corral_source_split_9296:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(out_$p29, $mul.ref(out_$i30, 8944)), $mul.ref(328, 1));
    goto corral_source_split_9297;

  corral_source_split_9295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2169} notify_remote_via_irq(out_$i33);
    goto corral_source_split_9296;

  corral_source_split_9294:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i32($M.0, out_$p32);
    goto corral_source_split_9295;

  corral_source_split_9293:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p29, $mul.ref(out_$i30, 8944)), $mul.ref(328, 1));
    goto corral_source_split_9294;

  corral_source_split_9292:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref(out_$p29, $mul.ref(out_$i30, 8944));
    goto corral_source_split_9293;

  corral_source_split_9291:
    assume {:verifier.code 0} true;
    out_$i30 := $zext.i32.i64(out_$i27);
    goto corral_source_split_9292;

  corral_source_split_9290:
    assume {:verifier.code 0} true;
    out_$p29 := $load.ref($M.0, out_$p28);
    goto corral_source_split_9291;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(in_$p4, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_9290;

  corral_source_split_9288:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb19_dummy:
    call {:si_unique_call 1} out_$p28, out_$p29, out_$i30, out_$p31, out_$p32, out_$i33, out_$p34, out_$i35, out_$p36, out_$i37, out_$i38, out_$p39, out_$i40, out_$p41, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$i27 := xennet_connect_loop_$bb14(in_$p4, in_$i23, out_$p28, out_$p29, out_$i30, out_$p31, out_$p32, out_$i33, out_$p34, out_$i35, out_$p36, out_$i37, out_$i38, out_$p39, out_$i40, out_$p41, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$i27);
    return;

  exit:
    return;
}



procedure xennet_connect_loop_$bb14(in_$p4: ref, in_$i23: i32, in_$p28: ref, in_$p29: ref, in_$i30: i64, in_$p31: ref, in_$p32: ref, in_$i33: i32, in_$p34: ref, in_$i35: i32, in_$p36: ref, in_$i37: i32, in_$i38: i1, in_$p39: ref, in_$i40: i32, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$i45: i32, in_$i46: i1, in_$i27: i32) returns (out_$p28: ref, out_$p29: ref, out_$i30: i64, out_$p31: ref, out_$p32: ref, out_$i33: i32, out_$p34: ref, out_$i35: i32, out_$p36: ref, out_$i37: i32, out_$i38: i1, out_$p39: ref, out_$i40: i32, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$i45: i32, out_$i46: i1, out_$i27: i32);
  modifies $M.14, $M.0, $M.15, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, assertsPassed;



implementation talk_to_netback_loop_$bb55(in_$p1: ref, in_$p2: ref, in_$i22: i32, in_$p87: ref, in_$p88: ref, in_$i89: i64, in_$p90: ref, in_$i91: i32, in_$i92: i1, in_$i93: i32, in_$i94: i32, in_$i95: i1, in_$i86: i32) returns (out_$p87: ref, out_$p88: ref, out_$i89: i64, out_$p90: ref, out_$i91: i32, out_$i92: i1, out_$i93: i32, out_$i94: i32, out_$i95: i1, out_$i86: i32)
{

  entry:
    out_$p87, out_$p88, out_$i89, out_$p90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i86 := in_$p87, in_$p88, in_$i89, in_$p90, in_$i91, in_$i92, in_$i93, in_$i94, in_$i95, in_$i86;
    goto $bb55, exit;

  $bb55:
    assume {:verifier.code 0} true;
    goto corral_source_split_9493;

  $bb60:
    assume out_$i95 == 1;
    assume {:verifier.code 0} true;
    out_$i86 := out_$i94;
    goto $bb60_dummy;

  corral_source_split_9505:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60;

  corral_source_split_9504:
    assume {:verifier.code 0} true;
    out_$i95 := $ult.i32(out_$i94, in_$i22);
    goto corral_source_split_9505;

  $bb59:
    assume {:verifier.code 0} true;
    out_$i94 := $add.i32(out_$i86, 1);
    call {:si_unique_call 2222} {:cexpr "i"} boogie_si_record_i32(out_$i94);
    goto corral_source_split_9504;

  $bb58:
    assume !(out_$i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  corral_source_split_9500:
    assume {:verifier.code 0} true;
    out_$i93 := out_$i91;
    assume true;
    goto $bb58;

  corral_source_split_9499:
    assume {:verifier.code 0} true;
    out_$i92 := $ne.i32(out_$i91, 0);
    goto corral_source_split_9500;

  SeqInstr_42:
    call {:si_unique_call 2221} {:cexpr "err"} boogie_si_record_i32(out_$i91);
    goto corral_source_split_9499;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  corral_source_split_9498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2220} out_$i91 := write_queue_xenstore_keys(out_$p90, in_$p2, 1);
    goto SeqInstr_41;

  corral_source_split_9497:
    assume {:verifier.code 0} true;
    out_$p90 := $add.ref(out_$p88, $mul.ref(out_$i89, 8944));
    goto corral_source_split_9498;

  corral_source_split_9496:
    assume {:verifier.code 0} true;
    out_$i89 := $zext.i32.i64(out_$i86);
    goto corral_source_split_9497;

  corral_source_split_9495:
    assume {:verifier.code 0} true;
    out_$p88 := $load.ref($M.0, out_$p87);
    goto corral_source_split_9496;

  $bb56:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref($add.ref(in_$p1, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_9495;

  corral_source_split_9493:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb60_dummy:
    call {:si_unique_call 1} out_$p87, out_$p88, out_$i89, out_$p90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i86 := talk_to_netback_loop_$bb55(in_$p1, in_$p2, in_$i22, out_$p87, out_$p88, out_$i89, out_$p90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i86);
    return;

  exit:
    return;
}



procedure talk_to_netback_loop_$bb55(in_$p1: ref, in_$p2: ref, in_$i22: i32, in_$p87: ref, in_$p88: ref, in_$i89: i64, in_$p90: ref, in_$i91: i32, in_$i92: i1, in_$i93: i32, in_$i94: i32, in_$i95: i1, in_$i86: i32) returns (out_$p87: ref, out_$p88: ref, out_$i89: i64, out_$p90: ref, out_$i91: i32, out_$i92: i1, out_$i93: i32, out_$i94: i32, out_$i95: i1, out_$i86: i32);
  modifies $M.41, assertsPassed, $CurrAddr;



implementation talk_to_netback_loop_$bb37(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i22: i32, in_$i68: i32, in_$i69: i1, in_$i70: i32, in_$i71: i1, in_$p72: ref, in_$p73: ref, in_$i74: i32, in_$i75: i1, in_$i76: i32, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$i81: i32, in_$i82: i32, in_$i83: i1, in_$i84: i32, in_$i85: i1, in_$p87: ref, in_$p88: ref, in_$i89: i64, in_$p90: ref, in_$i91: i32, in_$i92: i1, in_$i93: i32, in_$i94: i32, in_$i95: i1, in_$i86: i32, in_$p96: ref, in_$p97: ref, in_$p98: ref, in_$i99: i32, in_$i100: i32, in_$i101: i1, in_$i102: i32, in_$p105: ref, in_$p106: ref, in_$p107: ref, in_$i108: i32, in_$i109: i32, in_$i110: i1, in_$i111: i32, in_$p112: ref, in_$p113: ref, in_$p114: ref, in_$i115: i32, in_$i116: i32, in_$i117: i1, in_$i118: i32, in_$p119: ref, in_$p120: ref, in_$p121: ref, in_$i122: i32, in_$i123: i32, in_$i124: i1, in_$i125: i32, in_$p126: ref, in_$p127: ref, in_$p128: ref, in_$i129: i32, in_$i130: i32, in_$i131: i1, in_$i132: i32, in_$p133: ref, in_$p134: ref, in_$p135: ref, in_$i136: i32, in_$i137: i32, in_$i138: i1, in_$i139: i32, in_$p140: ref, in_$i141: i32, in_$i142: i32, in_$i143: i1, in_$i144: i1, in_$i145: i32) returns (out_$i68: i32, out_$i69: i1, out_$i70: i32, out_$i71: i1, out_$p72: ref, out_$p73: ref, out_$i74: i32, out_$i75: i1, out_$i76: i32, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$i81: i32, out_$i82: i32, out_$i83: i1, out_$i84: i32, out_$i85: i1, out_$p87: ref, out_$p88: ref, out_$i89: i64, out_$p90: ref, out_$i91: i32, out_$i92: i1, out_$i93: i32, out_$i94: i32, out_$i95: i1, out_$i86: i32, out_$p96: ref, out_$p97: ref, out_$p98: ref, out_$i99: i32, out_$i100: i32, out_$i101: i1, out_$i102: i32, out_$p105: ref, out_$p106: ref, out_$p107: ref, out_$i108: i32, out_$i109: i32, out_$i110: i1, out_$i111: i32, out_$p112: ref, out_$p113: ref, out_$p114: ref, out_$i115: i32, out_$i116: i32, out_$i117: i1, out_$i118: i32, out_$p119: ref, out_$p120: ref, out_$p121: ref, out_$i122: i32, out_$i123: i32, out_$i124: i1, out_$i125: i32, out_$p126: ref, out_$p127: ref, out_$p128: ref, out_$i129: i32, out_$i130: i32, out_$i131: i1, out_$i132: i32, out_$p133: ref, out_$p134: ref, out_$p135: ref, out_$i136: i32, out_$i137: i32, out_$i138: i1, out_$i139: i32, out_$p140: ref, out_$i141: i32, out_$i142: i32, out_$i143: i1, out_$i144: i1, out_$i145: i32)
{

  entry:
    out_$i68, out_$i69, out_$i70, out_$i71, out_$p72, out_$p73, out_$i74, out_$i75, out_$i76, out_$p78, out_$p79, out_$p80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$p87, out_$p88, out_$i89, out_$p90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i86, out_$p96, out_$p97, out_$p98, out_$i99, out_$i100, out_$i101, out_$i102, out_$p105, out_$p106, out_$p107, out_$i108, out_$i109, out_$i110, out_$i111, out_$p112, out_$p113, out_$p114, out_$i115, out_$i116, out_$i117, out_$i118, out_$p119, out_$p120, out_$p121, out_$i122, out_$i123, out_$i124, out_$i125, out_$p126, out_$p127, out_$p128, out_$i129, out_$i130, out_$i131, out_$i132, out_$p133, out_$p134, out_$p135, out_$i136, out_$i137, out_$i138, out_$i139, out_$p140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145 := in_$i68, in_$i69, in_$i70, in_$i71, in_$p72, in_$p73, in_$i74, in_$i75, in_$i76, in_$p78, in_$p79, in_$p80, in_$i81, in_$i82, in_$i83, in_$i84, in_$i85, in_$p87, in_$p88, in_$i89, in_$p90, in_$i91, in_$i92, in_$i93, in_$i94, in_$i95, in_$i86, in_$p96, in_$p97, in_$p98, in_$i99, in_$i100, in_$i101, in_$i102, in_$p105, in_$p106, in_$p107, in_$i108, in_$i109, in_$i110, in_$i111, in_$p112, in_$p113, in_$p114, in_$i115, in_$i116, in_$i117, in_$i118, in_$p119, in_$p120, in_$p121, in_$i122, in_$i123, in_$i124, in_$i125, in_$p126, in_$p127, in_$p128, in_$i129, in_$i130, in_$i131, in_$i132, in_$p133, in_$p134, in_$p135, in_$i136, in_$i137, in_$i138, in_$i139, in_$p140, in_$i141, in_$i142, in_$i143, in_$i144, in_$i145;
    goto $bb37, exit;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb40:
    assume {:verifier.code 0} true;
    assume !(out_$i69 == 1);
    goto $bb40_dummy;

  corral_source_split_9453:
    assume {:verifier.code 0} true;
    out_$i70 := out_$i68;
    assume true;
    goto $bb40;

  corral_source_split_9452:
    assume {:verifier.code 0} true;
    out_$i69 := $ne.i32(out_$i68, 0);
    goto corral_source_split_9453;

  corral_source_split_9451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2211} out_$i68 := xenbus_transaction_start(in_$p2);
    call {:si_unique_call 2212} {:cexpr "err"} boogie_si_record_i32(out_$i68);
    goto corral_source_split_9452;

  $bb38:
    assume out_$i144 == 1;
    goto corral_source_split_9451;

  corral_source_split_9565:
    assume {:verifier.code 0} true;
    out_$i145 := out_$i142;
    assume true;
    goto $bb38;

  corral_source_split_9564:
    assume {:verifier.code 0} true;
    out_$i144 := $eq.i32(out_$i142, $sub.i32(0, 11));
    goto corral_source_split_9565;

  $bb82:
    assume out_$i143 == 1;
    goto corral_source_split_9564;

  corral_source_split_9562:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82;

  corral_source_split_9561:
    assume {:verifier.code 0} true;
    out_$i143 := $ne.i32(out_$i142, 0);
    goto corral_source_split_9562;

  corral_source_split_9560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2234} out_$i142 := xenbus_transaction_end(out_$i141, 0);
    call {:si_unique_call 2235} {:cexpr "err"} boogie_si_record_i32(out_$i142);
    goto corral_source_split_9561;

  corral_source_split_9559:
    assume {:verifier.code 0} true;
    out_$i141 := $load.i32($M.38, out_$p140);
    goto corral_source_split_9560;

  $bb81:
    assume {:verifier.code 0} true;
    out_$p140 := $add.ref($add.ref(in_$p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_9559;

  $bb80:
    assume !(out_$i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  corral_source_split_9555:
    assume {:verifier.code 0} true;
    out_$i139 := out_$i137;
    assume true;
    goto $bb80;

  corral_source_split_9554:
    assume {:verifier.code 0} true;
    out_$i138 := $ne.i32(out_$i137, 0);
    goto corral_source_split_9555;

  corral_source_split_9553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2232} out_$i137 := xenbus_write(out_$i136, out_$p134, .str.13, .str.40);
    call {:si_unique_call 2233} {:cexpr "err"} boogie_si_record_i32(out_$i137);
    goto corral_source_split_9554;

  corral_source_split_9552:
    assume {:verifier.code 0} true;
    out_$i136 := $load.i32($M.38, out_$p135);
    goto corral_source_split_9553;

  corral_source_split_9551:
    assume {:verifier.code 0} true;
    out_$p135 := $add.ref($add.ref(in_$p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_9552;

  corral_source_split_9550:
    assume {:verifier.code 0} true;
    out_$p134 := $load.ref($M.0, out_$p133);
    goto corral_source_split_9551;

  $bb78:
    assume {:verifier.code 0} true;
    out_$p133 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1672)), $mul.ref(8, 1));
    goto corral_source_split_9550;

  $bb77:
    assume !(out_$i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  corral_source_split_9546:
    assume {:verifier.code 0} true;
    out_$i132 := out_$i130;
    assume true;
    goto $bb77;

  corral_source_split_9545:
    assume {:verifier.code 0} true;
    out_$i131 := $ne.i32(out_$i130, 0);
    goto corral_source_split_9546;

  corral_source_split_9544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2230} out_$i130 := xenbus_write(out_$i129, out_$p127, .str.15, .str.40);
    call {:si_unique_call 2231} {:cexpr "err"} boogie_si_record_i32(out_$i130);
    goto corral_source_split_9545;

  corral_source_split_9543:
    assume {:verifier.code 0} true;
    out_$i129 := $load.i32($M.38, out_$p128);
    goto corral_source_split_9544;

  corral_source_split_9542:
    assume {:verifier.code 0} true;
    out_$p128 := $add.ref($add.ref(in_$p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_9543;

  corral_source_split_9541:
    assume {:verifier.code 0} true;
    out_$p127 := $load.ref($M.0, out_$p126);
    goto corral_source_split_9542;

  $bb75:
    assume {:verifier.code 0} true;
    out_$p126 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1672)), $mul.ref(8, 1));
    goto corral_source_split_9541;

  $bb74:
    assume !(out_$i124 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  corral_source_split_9537:
    assume {:verifier.code 0} true;
    out_$i125 := out_$i123;
    assume true;
    goto $bb74;

  corral_source_split_9536:
    assume {:verifier.code 0} true;
    out_$i124 := $ne.i32(out_$i123, 0);
    goto corral_source_split_9537;

  corral_source_split_9535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2228} out_$i123 := xenbus_printf.i32.ref.ref.ref.i32(out_$i122, out_$p120, .str.14, .str.12, 1);
    call {:si_unique_call 2229} {:cexpr "err"} boogie_si_record_i32(out_$i123);
    goto corral_source_split_9536;

  corral_source_split_9534:
    assume {:verifier.code 0} true;
    out_$i122 := $load.i32($M.38, out_$p121);
    goto corral_source_split_9535;

  corral_source_split_9533:
    assume {:verifier.code 0} true;
    out_$p121 := $add.ref($add.ref(in_$p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_9534;

  corral_source_split_9532:
    assume {:verifier.code 0} true;
    out_$p120 := $load.ref($M.0, out_$p119);
    goto corral_source_split_9533;

  $bb72:
    assume {:verifier.code 0} true;
    out_$p119 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1672)), $mul.ref(8, 1));
    goto corral_source_split_9532;

  $bb71:
    assume !(out_$i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  corral_source_split_9528:
    assume {:verifier.code 0} true;
    out_$i118 := out_$i116;
    assume true;
    goto $bb71;

  corral_source_split_9527:
    assume {:verifier.code 0} true;
    out_$i117 := $ne.i32(out_$i116, 0);
    goto corral_source_split_9528;

  corral_source_split_9526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2226} out_$i116 := xenbus_printf.i32.ref.ref.ref.i32(out_$i115, out_$p113, .str.11, .str.12, 1);
    call {:si_unique_call 2227} {:cexpr "err"} boogie_si_record_i32(out_$i116);
    goto corral_source_split_9527;

  corral_source_split_9525:
    assume {:verifier.code 0} true;
    out_$i115 := $load.i32($M.38, out_$p114);
    goto corral_source_split_9526;

  corral_source_split_9524:
    assume {:verifier.code 0} true;
    out_$p114 := $add.ref($add.ref(in_$p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_9525;

  corral_source_split_9523:
    assume {:verifier.code 0} true;
    out_$p113 := $load.ref($M.0, out_$p112);
    goto corral_source_split_9524;

  $bb69:
    assume {:verifier.code 0} true;
    out_$p112 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1672)), $mul.ref(8, 1));
    goto corral_source_split_9523;

  $bb68:
    assume !(out_$i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_9519:
    assume {:verifier.code 0} true;
    out_$i111 := out_$i109;
    assume true;
    goto $bb68;

  corral_source_split_9518:
    assume {:verifier.code 0} true;
    out_$i110 := $ne.i32(out_$i109, 0);
    goto corral_source_split_9519;

  corral_source_split_9517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2224} out_$i109 := xenbus_printf.i32.ref.ref.ref.i32(out_$i108, out_$p106, .str.36, .str.12, 1);
    call {:si_unique_call 2225} {:cexpr "err"} boogie_si_record_i32(out_$i109);
    goto corral_source_split_9518;

  corral_source_split_9516:
    assume {:verifier.code 0} true;
    out_$i108 := $load.i32($M.38, out_$p107);
    goto corral_source_split_9517;

  corral_source_split_9515:
    assume {:verifier.code 0} true;
    out_$p107 := $add.ref($add.ref(in_$p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_9516;

  corral_source_split_9514:
    assume {:verifier.code 0} true;
    out_$p106 := $load.ref($M.0, out_$p105);
    goto corral_source_split_9515;

  $bb66:
    assume {:verifier.code 0} true;
    out_$p105 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1672)), $mul.ref(8, 1));
    goto corral_source_split_9514;

  $bb64:
    assume !(out_$i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  corral_source_split_9485:
    assume {:verifier.code 0} true;
    out_$i102 := out_$i100;
    assume true;
    goto $bb64;

  corral_source_split_9484:
    assume {:verifier.code 0} true;
    out_$i101 := $ne.i32(out_$i100, 0);
    goto corral_source_split_9485;

  corral_source_split_9483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2218} out_$i100 := xenbus_printf.i32.ref.ref.ref.i32(out_$i99, out_$p97, .str.34, .str.26, 1);
    call {:si_unique_call 2219} {:cexpr "err"} boogie_si_record_i32(out_$i100);
    goto corral_source_split_9484;

  corral_source_split_9482:
    assume {:verifier.code 0} true;
    out_$i99 := $load.i32($M.38, out_$p98);
    goto corral_source_split_9483;

  corral_source_split_9481:
    assume {:verifier.code 0} true;
    out_$p98 := $add.ref($add.ref(in_$p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_9482;

  corral_source_split_9480:
    assume {:verifier.code 0} true;
    out_$p97 := $load.ref($M.0, out_$p96);
    goto corral_source_split_9481;

  $bb48:
    assume {:verifier.code 0} true;
    out_$p96 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1672)), $mul.ref(8, 1));
    goto corral_source_split_9480;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb45:
    assume !(out_$i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  corral_source_split_9463:
    assume {:verifier.code 0} true;
    out_$i76 := out_$i74;
    assume true;
    goto $bb45;

  corral_source_split_9462:
    assume {:verifier.code 0} true;
    out_$i75 := $ne.i32(out_$i74, 0);
    goto corral_source_split_9463;

  SeqInstr_39:
    call {:si_unique_call 2214} {:cexpr "err"} boogie_si_record_i32(out_$i74);
    goto corral_source_split_9462;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  corral_source_split_9461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2213} out_$i74 := write_queue_xenstore_keys(out_$p73, in_$p2, 0);
    goto SeqInstr_38;

  corral_source_split_9460:
    assume {:verifier.code 0} true;
    out_$p73 := $load.ref($M.0, out_$p72);
    goto corral_source_split_9461;

  corral_source_split_9459:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref(in_$p1, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_9460;

  $bb42:
    assume out_$i71 == 1;
    goto corral_source_split_9459;

  corral_source_split_9457:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb41:
    assume {:verifier.code 0} true;
    out_$i71 := $eq.i32(in_$i22, 1);
    goto corral_source_split_9457;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb53:
    assume {:verifier.code 0} true;
    assume !(out_$i85 == 1);
    goto $bb54;

  corral_source_split_9507:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb61:
    assume !(out_$i95 == 1);
    goto corral_source_split_9507;

  corral_source_split_9505:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  corral_source_split_9504:
    assume {:verifier.code 0} true;
    out_$i95 := $ult.i32(out_$i94, in_$i22);
    goto corral_source_split_9505;

  $bb59:
    assume {:verifier.code 0} true;
    out_$i94 := $add.i32(out_$i86, 1);
    call {:si_unique_call 2222} {:cexpr "i"} boogie_si_record_i32(out_$i94);
    goto corral_source_split_9504;

  $bb58:
    assume !(out_$i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  corral_source_split_9500:
    assume {:verifier.code 0} true;
    out_$i93 := out_$i91;
    assume true;
    goto $bb58;

  corral_source_split_9499:
    assume {:verifier.code 0} true;
    out_$i92 := $ne.i32(out_$i91, 0);
    goto corral_source_split_9500;

  SeqInstr_42:
    call {:si_unique_call 2221} {:cexpr "err"} boogie_si_record_i32(out_$i91);
    goto corral_source_split_9499;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  corral_source_split_9498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2220} out_$i91 := write_queue_xenstore_keys(out_$p90, in_$p2, 1);
    goto SeqInstr_41;

  corral_source_split_9497:
    assume {:verifier.code 0} true;
    out_$p90 := $add.ref(out_$p88, $mul.ref(out_$i89, 8944));
    goto corral_source_split_9498;

  corral_source_split_9496:
    assume {:verifier.code 0} true;
    out_$i89 := $zext.i32.i64(out_$i86);
    goto corral_source_split_9497;

  corral_source_split_9495:
    assume {:verifier.code 0} true;
    out_$p88 := $load.ref($M.0, out_$p87);
    goto corral_source_split_9496;

  $bb56:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref($add.ref(in_$p1, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_9495;

  corral_source_split_9493:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb55:
    call out_$p87, out_$p88, out_$i89, out_$p90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i86 := talk_to_netback_loop_$bb55(in_$p1, in_$p2, in_$i22, out_$p87, out_$p88, out_$i89, out_$p90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i86);
    goto $bb55_last;

  $bb55_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_9493;

  corral_source_split_9491:
    assume {:verifier.code 0} true;
    out_$i86 := 0;
    goto $bb55;

  $bb60:
    assume out_$i95 == 1;
    assume {:verifier.code 0} true;
    out_$i86 := out_$i94;
    assume false;
    return;

  $bb52:
    assume out_$i85 == 1;
    goto corral_source_split_9491;

  corral_source_split_9489:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb51:
    assume {:verifier.code 0} true;
    out_$i85 := $ult.i32(0, in_$i22);
    goto corral_source_split_9489;

  $bb50:
    assume !(out_$i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  corral_source_split_9471:
    assume {:verifier.code 0} true;
    out_$i84 := out_$i82;
    assume true;
    goto $bb50;

  corral_source_split_9470:
    assume {:verifier.code 0} true;
    out_$i83 := $ne.i32(out_$i82, 0);
    goto corral_source_split_9471;

  corral_source_split_9469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2215} out_$i82 := xenbus_printf.i32.ref.ref.ref.i32(out_$i81, out_$p79, .str.32, .str.26, in_$i22);
    call {:si_unique_call 2216} {:cexpr "err"} boogie_si_record_i32(out_$i82);
    goto corral_source_split_9470;

  corral_source_split_9468:
    assume {:verifier.code 0} true;
    out_$i81 := $load.i32($M.38, out_$p80);
    goto corral_source_split_9469;

  corral_source_split_9467:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref(in_$p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_9468;

  corral_source_split_9466:
    assume {:verifier.code 0} true;
    out_$p79 := $load.ref($M.0, out_$p78);
    goto corral_source_split_9467;

  corral_source_split_9465:
    assume {:verifier.code 0} true;
    out_$p78 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1672)), $mul.ref(8, 1));
    goto corral_source_split_9466;

  $bb43:
    assume !(out_$i71 == 1);
    goto corral_source_split_9465;

  $bb40_dummy:
    call {:si_unique_call 1} out_$i68, out_$i69, out_$i70, out_$i71, out_$p72, out_$p73, out_$i74, out_$i75, out_$i76, out_$p78, out_$p79, out_$p80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$p87, out_$p88, out_$i89, out_$p90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i86, out_$p96, out_$p97, out_$p98, out_$i99, out_$i100, out_$i101, out_$i102, out_$p105, out_$p106, out_$p107, out_$i108, out_$i109, out_$i110, out_$i111, out_$p112, out_$p113, out_$p114, out_$i115, out_$i116, out_$i117, out_$i118, out_$p119, out_$p120, out_$p121, out_$i122, out_$i123, out_$i124, out_$i125, out_$p126, out_$p127, out_$p128, out_$i129, out_$i130, out_$i131, out_$i132, out_$p133, out_$p134, out_$p135, out_$i136, out_$i137, out_$i138, out_$i139, out_$p140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145 := talk_to_netback_loop_$bb37(in_$p0, in_$p1, in_$p2, in_$i22, out_$i68, out_$i69, out_$i70, out_$i71, out_$p72, out_$p73, out_$i74, out_$i75, out_$i76, out_$p78, out_$p79, out_$p80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$p87, out_$p88, out_$i89, out_$p90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i86, out_$p96, out_$p97, out_$p98, out_$i99, out_$i100, out_$i101, out_$i102, out_$p105, out_$p106, out_$p107, out_$i108, out_$i109, out_$i110, out_$i111, out_$p112, out_$p113, out_$p114, out_$i115, out_$i116, out_$i117, out_$i118, out_$p119, out_$p120, out_$p121, out_$i122, out_$i123, out_$i124, out_$i125, out_$p126, out_$p127, out_$p128, out_$i129, out_$i130, out_$i131, out_$i132, out_$p133, out_$p134, out_$p135, out_$i136, out_$i137, out_$i138, out_$i139, out_$p140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145);
    return;

  exit:
    return;
}



procedure talk_to_netback_loop_$bb37(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i22: i32, in_$i68: i32, in_$i69: i1, in_$i70: i32, in_$i71: i1, in_$p72: ref, in_$p73: ref, in_$i74: i32, in_$i75: i1, in_$i76: i32, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$i81: i32, in_$i82: i32, in_$i83: i1, in_$i84: i32, in_$i85: i1, in_$p87: ref, in_$p88: ref, in_$i89: i64, in_$p90: ref, in_$i91: i32, in_$i92: i1, in_$i93: i32, in_$i94: i32, in_$i95: i1, in_$i86: i32, in_$p96: ref, in_$p97: ref, in_$p98: ref, in_$i99: i32, in_$i100: i32, in_$i101: i1, in_$i102: i32, in_$p105: ref, in_$p106: ref, in_$p107: ref, in_$i108: i32, in_$i109: i32, in_$i110: i1, in_$i111: i32, in_$p112: ref, in_$p113: ref, in_$p114: ref, in_$i115: i32, in_$i116: i32, in_$i117: i1, in_$i118: i32, in_$p119: ref, in_$p120: ref, in_$p121: ref, in_$i122: i32, in_$i123: i32, in_$i124: i1, in_$i125: i32, in_$p126: ref, in_$p127: ref, in_$p128: ref, in_$i129: i32, in_$i130: i32, in_$i131: i1, in_$i132: i32, in_$p133: ref, in_$p134: ref, in_$p135: ref, in_$i136: i32, in_$i137: i32, in_$i138: i1, in_$i139: i32, in_$p140: ref, in_$i141: i32, in_$i142: i32, in_$i143: i1, in_$i144: i1, in_$i145: i32) returns (out_$i68: i32, out_$i69: i1, out_$i70: i32, out_$i71: i1, out_$p72: ref, out_$p73: ref, out_$i74: i32, out_$i75: i1, out_$i76: i32, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$i81: i32, out_$i82: i32, out_$i83: i1, out_$i84: i32, out_$i85: i1, out_$p87: ref, out_$p88: ref, out_$i89: i64, out_$p90: ref, out_$i91: i32, out_$i92: i1, out_$i93: i32, out_$i94: i32, out_$i95: i1, out_$i86: i32, out_$p96: ref, out_$p97: ref, out_$p98: ref, out_$i99: i32, out_$i100: i32, out_$i101: i1, out_$i102: i32, out_$p105: ref, out_$p106: ref, out_$p107: ref, out_$i108: i32, out_$i109: i32, out_$i110: i1, out_$i111: i32, out_$p112: ref, out_$p113: ref, out_$p114: ref, out_$i115: i32, out_$i116: i32, out_$i117: i1, out_$i118: i32, out_$p119: ref, out_$p120: ref, out_$p121: ref, out_$i122: i32, out_$i123: i32, out_$i124: i1, out_$i125: i32, out_$p126: ref, out_$p127: ref, out_$p128: ref, out_$i129: i32, out_$i130: i32, out_$i131: i1, out_$i132: i32, out_$p133: ref, out_$p134: ref, out_$p135: ref, out_$i136: i32, out_$i137: i32, out_$i138: i1, out_$i139: i32, out_$p140: ref, out_$i141: i32, out_$i142: i32, out_$i143: i1, out_$i144: i1, out_$i145: i32);
  modifies $M.43, $CurrAddr, $M.42, $M.41, assertsPassed;



implementation talk_to_netback_loop_$bb24(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$i22: i32, in_$p50: ref, in_$p51: ref, in_$i52: i64, in_$p53: ref, in_$i54: i32, in_$i55: i32, in_$i56: i1, in_$i57: i32, in_$i58: i32, in_$i63: i32, in_$i64: i1, in_$i49: i32) returns (out_$p50: ref, out_$p51: ref, out_$i52: i64, out_$p53: ref, out_$i54: i32, out_$i55: i32, out_$i56: i1, out_$i57: i32, out_$i58: i32, out_$i63: i32, out_$i64: i1, out_$i49: i32)
{

  entry:
    out_$p50, out_$p51, out_$i52, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i63, out_$i64, out_$i49 := in_$p50, in_$p51, in_$i52, in_$p53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i63, in_$i64, in_$i49;
    goto $bb24, exit;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_9416;

  $bb31:
    assume out_$i64 == 1;
    assume {:verifier.code 0} true;
    out_$i49 := out_$i63;
    goto $bb31_dummy;

  corral_source_split_9439:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31;

  corral_source_split_9438:
    assume {:verifier.code 0} true;
    out_$i64 := $ult.i32(out_$i63, in_$i22);
    goto corral_source_split_9439;

  $bb30:
    assume {:verifier.code 0} true;
    out_$i63 := $add.i32(out_$i49, 1);
    call {:si_unique_call 2207} {:cexpr "i"} boogie_si_record_i32(out_$i63);
    goto corral_source_split_9438;

  $bb27:
    assume !(out_$i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_9424:
    assume {:verifier.code 0} true;
    out_$i57, out_$i58 := out_$i49, out_$i55;
    assume true;
    goto $bb27;

  corral_source_split_9423:
    assume {:verifier.code 0} true;
    out_$i56 := $ne.i32(out_$i55, 0);
    goto corral_source_split_9424;

  corral_source_split_9422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2202} out_$i55 := setup_netfront(in_$p0, out_$p53, out_$i54);
    call {:si_unique_call 2203} {:cexpr "err"} boogie_si_record_i32(out_$i55);
    goto corral_source_split_9423;

  corral_source_split_9421:
    assume {:verifier.code 0} true;
    out_$i54 := $load.i32($M.37, in_$p3);
    goto corral_source_split_9422;

  corral_source_split_9420:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref(out_$p51, $mul.ref(out_$i52, 8944));
    goto corral_source_split_9421;

  corral_source_split_9419:
    assume {:verifier.code 0} true;
    out_$i52 := $zext.i32.i64(out_$i49);
    goto corral_source_split_9420;

  corral_source_split_9418:
    assume {:verifier.code 0} true;
    out_$p51 := $load.ref($M.0, out_$p50);
    goto corral_source_split_9419;

  $bb25:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(in_$p1, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_9418;

  corral_source_split_9416:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb31_dummy:
    call {:si_unique_call 1} out_$p50, out_$p51, out_$i52, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i63, out_$i64, out_$i49 := talk_to_netback_loop_$bb24(in_$p0, in_$p1, in_$p3, in_$i22, out_$p50, out_$p51, out_$i52, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i63, out_$i64, out_$i49);
    return;

  exit:
    return;
}



procedure talk_to_netback_loop_$bb24(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$i22: i32, in_$p50: ref, in_$p51: ref, in_$i52: i64, in_$p53: ref, in_$i54: i32, in_$i55: i32, in_$i56: i1, in_$i57: i32, in_$i58: i32, in_$i63: i32, in_$i64: i1, in_$i49: i32) returns (out_$p50: ref, out_$p51: ref, out_$i52: i64, out_$p53: ref, out_$i54: i32, out_$i55: i32, out_$i56: i1, out_$i57: i32, out_$i58: i32, out_$i63: i32, out_$i64: i1, out_$i49: i32);
  modifies $M.0, $CurrAddr;



implementation xennet_create_queues_loop_$bb8(in_$p0: ref, in_$i1: i32, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$i19: i32, in_$i20: i1, in_$i21: i32, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$i33: i1, in_$i34: i8, in_$i35: i1, in_$p36: ref, in_$i37: i32, in_$i38: i1, in_$i12: i32) returns (out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$i19: i32, out_$i20: i1, out_$i21: i32, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$i33: i1, out_$i34: i8, out_$i35: i1, out_$p36: ref, out_$i37: i32, out_$i38: i1, out_$i12: i32)
{

  entry:
    out_$p13, out_$p14, out_$i15, out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p26, out_$p27, out_$p28, out_$p29, out_$p30, out_$p31, out_$p32, out_$i33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i12 := in_$p13, in_$p14, in_$i15, in_$p16, in_$p17, in_$p18, in_$i19, in_$i20, in_$i21, in_$p26, in_$p27, in_$p28, in_$p29, in_$p30, in_$p31, in_$p32, in_$i33, in_$i34, in_$i35, in_$p36, in_$i37, in_$i38, in_$i12;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_9747;

  $bb17:
    assume out_$i38 == 1;
    assume {:verifier.code 0} true;
    out_$i12 := out_$i37;
    goto $bb17_dummy;

  corral_source_split_9790:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17;

  corral_source_split_9789:
    assume {:verifier.code 0} true;
    out_$i38 := $ult.i32(out_$i37, in_$i1);
    goto corral_source_split_9790;

  $bb16:
    assume {:verifier.code 0} true;
    out_$i37 := $add.i32(out_$i12, 1);
    call {:si_unique_call 2273} {:cexpr "i"} boogie_si_record_i32(out_$i37);
    goto corral_source_split_9789;

  $bb15:
    assume !(out_$i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_9787:
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_9786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2272} napi_enable(out_$p36);
    goto corral_source_split_9787;

  corral_source_split_9785:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(out_$p14, $mul.ref(out_$i15, 8944)), $mul.ref(40, 1));
    goto corral_source_split_9786;

  $bb14:
    assume out_$i35 == 1;
    goto corral_source_split_9785;

  corral_source_split_9783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_9782:
    assume {:verifier.code 0} true;
    out_$i35 := $trunc.i8.i1(out_$i34);
    goto corral_source_split_9783;

  corral_source_split_9781:
    assume {:verifier.code 0} true;
    out_$i34 := $zext.i1.i8(out_$i33);
    call {:si_unique_call 2271} {:cexpr "tmp___0"} boogie_si_record_i8(out_$i34);
    goto corral_source_split_9782;

  corral_source_split_9780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2270} out_$i33 := netif_running(out_$p32);
    goto corral_source_split_9781;

  corral_source_split_9779:
    assume {:verifier.code 0} true;
    out_$p32 := $load.ref($M.0, out_$p31);
    goto corral_source_split_9780;

  corral_source_split_9778:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(in_$p0, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_9779;

  corral_source_split_9777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2269} netif_napi_add(out_$p29, out_$p30, xennet_poll, 64);
    goto corral_source_split_9778;

  corral_source_split_9776:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(out_$p14, $mul.ref(out_$i15, 8944)), $mul.ref(40, 1));
    goto corral_source_split_9777;

  corral_source_split_9775:
    assume {:verifier.code 0} true;
    out_$p29 := $load.ref($M.0, out_$p28);
    goto corral_source_split_9776;

  corral_source_split_9774:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(out_$p27, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_9775;

  corral_source_split_9773:
    assume {:verifier.code 0} true;
    out_$p27 := $load.ref($M.0, out_$p26);
    goto corral_source_split_9774;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p14, $mul.ref(out_$i15, 8944)), $mul.ref(32, 1));
    goto corral_source_split_9773;

  $bb11:
    assume !(out_$i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_9758:
    assume {:verifier.code 0} true;
    out_$i21 := out_$i12;
    assume true;
    goto $bb11;

  corral_source_split_9757:
    assume {:verifier.code 0} true;
    out_$i20 := $slt.i32(out_$i19, 0);
    goto corral_source_split_9758;

  corral_source_split_9756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2264} out_$i19 := xennet_init_queue(out_$p16);
    call {:si_unique_call 2265} {:cexpr "ret"} boogie_si_record_i32(out_$i19);
    goto corral_source_split_9757;

  corral_source_split_9755:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p18, in_$p0);
    goto corral_source_split_9756;

  corral_source_split_9754:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(out_$p14, $mul.ref(out_$i15, 8944)), $mul.ref(32, 1));
    goto corral_source_split_9755;

  corral_source_split_9753:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p17, out_$i12);
    goto corral_source_split_9754;

  corral_source_split_9752:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p14, $mul.ref(out_$i15, 8944)), $mul.ref(0, 1));
    goto corral_source_split_9753;

  corral_source_split_9751:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref(out_$p14, $mul.ref(out_$i15, 8944));
    goto corral_source_split_9752;

  corral_source_split_9750:
    assume {:verifier.code 0} true;
    out_$i15 := $zext.i32.i64(out_$i12);
    goto corral_source_split_9751;

  corral_source_split_9749:
    assume {:verifier.code 0} true;
    out_$p14 := $load.ref($M.0, out_$p13);
    goto corral_source_split_9750;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(in_$p0, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_9749;

  corral_source_split_9747:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb17_dummy:
    call {:si_unique_call 1} out_$p13, out_$p14, out_$i15, out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p26, out_$p27, out_$p28, out_$p29, out_$p30, out_$p31, out_$p32, out_$i33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i12 := xennet_create_queues_loop_$bb8(in_$p0, in_$i1, out_$p13, out_$p14, out_$i15, out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p26, out_$p27, out_$p28, out_$p29, out_$p30, out_$p31, out_$p32, out_$i33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i12);
    return;

  exit:
    return;
}



procedure xennet_create_queues_loop_$bb8(in_$p0: ref, in_$i1: i32, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$i19: i32, in_$i20: i1, in_$i21: i32, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$i33: i1, in_$i34: i8, in_$i35: i1, in_$p36: ref, in_$i37: i32, in_$i38: i1, in_$i12: i32) returns (out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$i19: i32, out_$i20: i1, out_$i21: i32, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$i33: i1, out_$i34: i8, out_$i35: i1, out_$p36: ref, out_$i37: i32, out_$i38: i1, out_$i12: i32);
  modifies $M.0, $M.15, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $CurrAddr;



implementation xennet_init_queue_loop_$bb6(in_$p0: ref, in_$i50: i32, in_$i51: i64, in_$p53: ref, in_$i54: i32, in_$i55: i64, in_$p57: ref, in_$i58: i32, in_$i59: i32, in_$i60: i16, in_$i61: i32, in_$i62: i1, in_$i49: i16) returns (out_$i50: i32, out_$i51: i64, out_$p53: ref, out_$i54: i32, out_$i55: i64, out_$p57: ref, out_$i58: i32, out_$i59: i32, out_$i60: i16, out_$i61: i32, out_$i62: i1, out_$i49: i16)
{

  entry:
    out_$i50, out_$i51, out_$p53, out_$i54, out_$i55, out_$p57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i49 := in_$i50, in_$i51, in_$p53, in_$i54, in_$i55, in_$p57, in_$i58, in_$i59, in_$i60, in_$i61, in_$i62, in_$i49;
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_10248;

  $bb8:
    assume out_$i62 == 1;
    assume {:verifier.code 0} true;
    out_$i49 := out_$i60;
    goto $bb8_dummy;

  corral_source_split_10262:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8;

  corral_source_split_10261:
    assume {:verifier.code 0} true;
    out_$i62 := $ule.i32(out_$i61, 255);
    goto corral_source_split_10262;

  corral_source_split_10260:
    assume {:verifier.code 0} true;
    out_$i61 := $zext.i16.i32(out_$i60);
    goto corral_source_split_10261;

  corral_source_split_10259:
    assume {:verifier.code 0} true;
    out_$i60 := $trunc.i32.i16(out_$i59);
    call {:si_unique_call 2385} {:cexpr "i"} boogie_si_record_i16(out_$i60);
    goto corral_source_split_10260;

  corral_source_split_10258:
    assume {:verifier.code 0} true;
    out_$i59 := $add.i32(out_$i58, 1);
    goto corral_source_split_10259;

  corral_source_split_10257:
    assume {:verifier.code 0} true;
    out_$i58 := $zext.i16.i32(out_$i49);
    goto corral_source_split_10258;

  corral_source_split_10256:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p57, 0);
    goto corral_source_split_10257;

  corral_source_split_10255:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 8944)), $mul.ref(7916, 1)), $mul.ref(out_$i55, 4));
    goto corral_source_split_10256;

  corral_source_split_10254:
    assume {:verifier.code 0} true;
    out_$i55 := $sext.i32.i64(out_$i54);
    goto corral_source_split_10255;

  corral_source_split_10253:
    assume {:verifier.code 0} true;
    out_$i54 := $zext.i16.i32(out_$i49);
    goto corral_source_split_10254;

  corral_source_split_10252:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p53, $0.ref);
    goto corral_source_split_10253;

  corral_source_split_10251:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 8944)), $mul.ref(5864, 1)), $mul.ref(out_$i51, 8));
    goto corral_source_split_10252;

  corral_source_split_10250:
    assume {:verifier.code 0} true;
    out_$i51 := $sext.i32.i64(out_$i50);
    goto corral_source_split_10251;

  $bb7:
    assume {:verifier.code 0} true;
    out_$i50 := $zext.i16.i32(out_$i49);
    goto corral_source_split_10250;

  corral_source_split_10248:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb8_dummy:
    call {:si_unique_call 1} out_$i50, out_$i51, out_$p53, out_$i54, out_$i55, out_$p57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i49 := xennet_init_queue_loop_$bb6(in_$p0, out_$i50, out_$i51, out_$p53, out_$i54, out_$i55, out_$p57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i49);
    return;

  exit:
    return;
}



procedure xennet_init_queue_loop_$bb6(in_$p0: ref, in_$i50: i32, in_$i51: i64, in_$p53: ref, in_$i54: i32, in_$i55: i64, in_$p57: ref, in_$i58: i32, in_$i59: i32, in_$i60: i16, in_$i61: i32, in_$i62: i1, in_$i49: i16) returns (out_$i50: i32, out_$i51: i64, out_$p53: ref, out_$i54: i32, out_$i55: i64, out_$p57: ref, out_$i58: i32, out_$i59: i32, out_$i60: i16, out_$i61: i32, out_$i62: i1, out_$i49: i16);
  modifies $M.0;



implementation xennet_init_queue_loop_$bb1(in_$p0: ref, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$p32: ref, in_$i33: i32, in_$i34: i32, in_$i35: i16, in_$i36: i32, in_$i37: i64, in_$p39: ref, in_$i40: i32, in_$i41: i64, in_$p43: ref, in_$i44: i32, in_$i45: i32, in_$i46: i16, in_$i47: i32, in_$i48: i1, in_$i28: i16) returns (out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$p32: ref, out_$i33: i32, out_$i34: i32, out_$i35: i16, out_$i36: i32, out_$i37: i64, out_$p39: ref, out_$i40: i32, out_$i41: i64, out_$p43: ref, out_$i44: i32, out_$i45: i32, out_$i46: i16, out_$i47: i32, out_$i48: i1, out_$i28: i16)
{

  entry:
    out_$p29, out_$p30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$p39, out_$i40, out_$i41, out_$p43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i28 := in_$p29, in_$p30, in_$i31, in_$p32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$p39, in_$i40, in_$i41, in_$p43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i28;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_10224;

  $bb3:
    assume out_$i48 == 1;
    assume {:verifier.code 0} true;
    out_$i28 := out_$i46;
    goto $bb3_dummy;

  corral_source_split_10246:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3;

  corral_source_split_10245:
    assume {:verifier.code 0} true;
    out_$i48 := $ule.i32(out_$i47, 255);
    goto corral_source_split_10246;

  corral_source_split_10244:
    assume {:verifier.code 0} true;
    out_$i47 := $zext.i16.i32(out_$i46);
    goto corral_source_split_10245;

  corral_source_split_10243:
    assume {:verifier.code 0} true;
    out_$i46 := $trunc.i32.i16(out_$i45);
    call {:si_unique_call 2384} {:cexpr "i"} boogie_si_record_i16(out_$i46);
    goto corral_source_split_10244;

  corral_source_split_10242:
    assume {:verifier.code 0} true;
    out_$i45 := $add.i32(out_$i44, 1);
    goto corral_source_split_10243;

  corral_source_split_10241:
    assume {:verifier.code 0} true;
    out_$i44 := $zext.i16.i32(out_$i28);
    goto corral_source_split_10242;

  corral_source_split_10240:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p43, $0.ref);
    goto corral_source_split_10241;

  corral_source_split_10239:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 8944)), $mul.ref(3576, 1)), $mul.ref(out_$i41, 8));
    goto corral_source_split_10240;

  corral_source_split_10238:
    assume {:verifier.code 0} true;
    out_$i41 := $sext.i32.i64(out_$i40);
    goto corral_source_split_10239;

  corral_source_split_10237:
    assume {:verifier.code 0} true;
    out_$i40 := $zext.i16.i32(out_$i28);
    goto corral_source_split_10238;

  corral_source_split_10236:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p39, 0);
    goto corral_source_split_10237;

  corral_source_split_10235:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 8944)), $mul.ref(2548, 1)), $mul.ref(out_$i37, 4));
    goto corral_source_split_10236;

  corral_source_split_10234:
    assume {:verifier.code 0} true;
    out_$i37 := $sext.i32.i64(out_$i36);
    goto corral_source_split_10235;

  corral_source_split_10233:
    assume {:verifier.code 0} true;
    out_$i36 := $zext.i16.i32(out_$i28);
    goto corral_source_split_10234;

  corral_source_split_10232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2383} skb_entry_set_link(out_$p32, out_$i35);
    goto corral_source_split_10233;

  corral_source_split_10231:
    assume {:verifier.code 0} true;
    out_$i35 := $trunc.i32.i16(out_$i34);
    goto corral_source_split_10232;

  corral_source_split_10230:
    assume {:verifier.code 0} true;
    out_$i34 := $add.i32(out_$i33, 1);
    goto corral_source_split_10231;

  corral_source_split_10229:
    assume {:verifier.code 0} true;
    out_$i33 := $zext.i16.i32(out_$i28);
    goto corral_source_split_10230;

  corral_source_split_10228:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref(out_$p30, $mul.ref(out_$i31, 8));
    goto corral_source_split_10229;

  corral_source_split_10227:
    assume {:verifier.code 0} true;
    out_$i31 := $zext.i16.i64(out_$i28);
    goto corral_source_split_10228;

  corral_source_split_10226:
    assume {:verifier.code 0} true;
    out_$p30 := $bitcast.ref.ref(out_$p29);
    goto corral_source_split_10227;

  $bb2:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8944)), $mul.ref(496, 1));
    goto corral_source_split_10226;

  corral_source_split_10224:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb3_dummy:
    call {:si_unique_call 1} out_$p29, out_$p30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$p39, out_$i40, out_$i41, out_$p43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i28 := xennet_init_queue_loop_$bb1(in_$p0, out_$p29, out_$p30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$p39, out_$i40, out_$i41, out_$p43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i28);
    return;

  exit:
    return;
}



procedure xennet_init_queue_loop_$bb1(in_$p0: ref, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$p32: ref, in_$i33: i32, in_$i34: i32, in_$i35: i16, in_$i36: i32, in_$i37: i64, in_$p39: ref, in_$i40: i32, in_$i41: i64, in_$p43: ref, in_$i44: i32, in_$i45: i32, in_$i46: i16, in_$i47: i32, in_$i48: i1, in_$i28: i16) returns (out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$p32: ref, out_$i33: i32, out_$i34: i32, out_$i35: i16, out_$i36: i32, out_$i37: i64, out_$p39: ref, out_$i40: i32, out_$i41: i64, out_$p43: ref, out_$i44: i32, out_$i45: i32, out_$i46: i16, out_$i47: i32, out_$i48: i1, out_$i28: i16);
  modifies $M.0;



implementation xennet_create_dev_loop_$bb25(in_$p39: ref, in_$i47: i64, in_$i48: i64, in_$p49: ref, in_$i50: i64, in_$i51: i64, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$i55: i32, in_$i56: i32, in_$i57: i1, in_$i46: i32) returns (out_$i47: i64, out_$i48: i64, out_$p49: ref, out_$i50: i64, out_$i51: i64, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$i55: i32, out_$i56: i32, out_$i57: i1, out_$i46: i32)
{

  entry:
    out_$i47, out_$i48, out_$p49, out_$i50, out_$i51, out_$p52, out_$p53, out_$p54, out_$i55, out_$i56, out_$i57, out_$i46 := in_$i47, in_$i48, in_$p49, in_$i50, in_$i51, in_$p52, in_$p53, in_$p54, in_$i55, in_$i56, in_$i57, in_$i46;
    goto $bb25, exit;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_10406;

  $bb27:
    assume out_$i57 == 1;
    assume {:verifier.code 0} true;
    out_$i46 := out_$i55;
    goto $bb27_dummy;

  corral_source_split_10419:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27;

  corral_source_split_10418:
    assume {:verifier.code 0} true;
    out_$i57 := $slt.i32(out_$i55, out_$i56);
    goto corral_source_split_10419;

  corral_source_split_10417:
    assume {:verifier.code 0} true;
    out_$i56 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_10418;

  corral_source_split_10416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2426} out_$i55 := cpumask_next(out_$i46, out_$p54);
    call {:si_unique_call 2427} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i55);
    goto corral_source_split_10417;

  corral_source_split_10415:
    assume {:verifier.code 0} true;
    out_$p54 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_10416;

  corral_source_split_10414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2425} u64_stats_init(out_$p53);
    goto corral_source_split_10415;

  corral_source_split_10413:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(out_$p52, $mul.ref(0, 16)), $mul.ref(16, 1));
    goto corral_source_split_10414;

  corral_source_split_10412:
    assume {:verifier.code 0} true;
    out_$p52 := $i2p.i64.ref(out_$i51);
    goto corral_source_split_10413;

  corral_source_split_10411:
    assume {:verifier.code 0} true;
    out_$i51 := $add.i64(out_$i50, out_$i47);
    goto corral_source_split_10412;

  corral_source_split_10410:
    assume {:verifier.code 0} true;
    out_$i50 := $load.i64($M.0, out_$p49);
    goto corral_source_split_10411;

  corral_source_split_10409:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref(out_$i48, 8));
    goto corral_source_split_10410;

  corral_source_split_10408:
    assume {:verifier.code 0} true;
    out_$i48 := $sext.i32.i64(out_$i46);
    goto corral_source_split_10409;

  $bb26:
    call {:si_unique_call 2423} out_$i47 := devirtbounce.2(0, in_$p39);
    call {:si_unique_call 2424} {:cexpr "__ptr___0"} boogie_si_record_i64(out_$i47);
    goto corral_source_split_10408;

  corral_source_split_10406:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb27_dummy:
    call {:si_unique_call 1} out_$i47, out_$i48, out_$p49, out_$i50, out_$i51, out_$p52, out_$p53, out_$p54, out_$i55, out_$i56, out_$i57, out_$i46 := xennet_create_dev_loop_$bb25(in_$p39, out_$i47, out_$i48, out_$p49, out_$i50, out_$i51, out_$p52, out_$p53, out_$p54, out_$i55, out_$i56, out_$i57, out_$i46);
    return;

  exit:
    return;
}



procedure xennet_create_dev_loop_$bb25(in_$p39: ref, in_$i47: i64, in_$i48: i64, in_$p49: ref, in_$i50: i64, in_$i51: i64, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$i55: i32, in_$i56: i32, in_$i57: i1, in_$i46: i32) returns (out_$i47: i64, out_$i48: i64, out_$p49: ref, out_$i50: i64, out_$i51: i64, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$i55: i32, out_$i56: i32, out_$i57: i1, out_$i46: i32);



implementation xennet_create_dev_loop_$bb10(in_$p14: ref, in_$i22: i64, in_$i23: i64, in_$p24: ref, in_$i25: i64, in_$i26: i64, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$i30: i32, in_$i31: i32, in_$i32: i1, in_$i21: i32) returns (out_$i22: i64, out_$i23: i64, out_$p24: ref, out_$i25: i64, out_$i26: i64, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$i30: i32, out_$i31: i32, out_$i32: i1, out_$i21: i32)
{

  entry:
    out_$i22, out_$i23, out_$p24, out_$i25, out_$i26, out_$p27, out_$p28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i21 := in_$i22, in_$i23, in_$p24, in_$i25, in_$i26, in_$p27, in_$p28, in_$p29, in_$i30, in_$i31, in_$i32, in_$i21;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_10362;

  $bb12:
    assume out_$i32 == 1;
    assume {:verifier.code 0} true;
    out_$i21 := out_$i30;
    goto $bb12_dummy;

  corral_source_split_10375:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_10374:
    assume {:verifier.code 0} true;
    out_$i32 := $slt.i32(out_$i30, out_$i31);
    goto corral_source_split_10375;

  corral_source_split_10373:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_10374;

  corral_source_split_10372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2416} out_$i30 := cpumask_next(out_$i21, out_$p29);
    call {:si_unique_call 2417} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_10373;

  corral_source_split_10371:
    assume {:verifier.code 0} true;
    out_$p29 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_10372;

  corral_source_split_10370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2415} u64_stats_init(out_$p28);
    goto corral_source_split_10371;

  corral_source_split_10369:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(out_$p27, $mul.ref(0, 16)), $mul.ref(16, 1));
    goto corral_source_split_10370;

  corral_source_split_10368:
    assume {:verifier.code 0} true;
    out_$p27 := $i2p.i64.ref(out_$i26);
    goto corral_source_split_10369;

  corral_source_split_10367:
    assume {:verifier.code 0} true;
    out_$i26 := $add.i64(out_$i25, out_$i22);
    goto corral_source_split_10368;

  corral_source_split_10366:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i64($M.0, out_$p24);
    goto corral_source_split_10367;

  corral_source_split_10365:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref(out_$i23, 8));
    goto corral_source_split_10366;

  corral_source_split_10364:
    assume {:verifier.code 0} true;
    out_$i23 := $sext.i32.i64(out_$i21);
    goto corral_source_split_10365;

  $bb11:
    call {:si_unique_call 2413} out_$i22 := devirtbounce.2(0, in_$p14);
    call {:si_unique_call 2414} {:cexpr "__ptr"} boogie_si_record_i64(out_$i22);
    goto corral_source_split_10364;

  corral_source_split_10362:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb12_dummy:
    call {:si_unique_call 1} out_$i22, out_$i23, out_$p24, out_$i25, out_$i26, out_$p27, out_$p28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i21 := xennet_create_dev_loop_$bb10(in_$p14, out_$i22, out_$i23, out_$p24, out_$i25, out_$i26, out_$p27, out_$p28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i21);
    return;

  exit:
    return;
}



procedure xennet_create_dev_loop_$bb10(in_$p14: ref, in_$i22: i64, in_$i23: i64, in_$p24: ref, in_$i25: i64, in_$i26: i64, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$i30: i32, in_$i31: i32, in_$i32: i1, in_$i21: i32) returns (out_$i22: i64, out_$i23: i64, out_$p24: ref, out_$i25: i64, out_$i26: i64, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$i30: i32, out_$i31: i32, out_$i32: i1, out_$i21: i32);



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();



implementation main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p10: ref, in_$p11: ref, in_$p13: ref, in_$p15: ref, in_$p17: ref, in_$p18: ref, in_$p20: ref, in_$p22: ref, in_$p23: ref, in_$p25: ref, in_$p26: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$i51: i32, in_$i52: i1, in_$i53: i1, in_$i54: i1, in_$i55: i1, in_$i56: i1, in_$i57: i1, in_$i58: i1, in_$i59: i1, in_$i60: i1, in_$i61: i32, in_$i62: i1, in_$i63: i32, in_$i64: i1, in_$i65: i1, in_$i66: i1, in_$i67: i1, in_$i68: i1, in_$i69: i32, in_$i70: i1, in_$p71: ref, in_$i72: i32, in_$i74: i32, in_$i75: i1, in_$p76: ref, in_$i77: i32, in_$i78: i1, in_$p79: ref, in_$i80: i32, in_$i81: i32, in_$i82: i1, in_$p83: ref, in_$i85: i32, in_$i86: i1, in_$i87: i32, in_$i88: i1, in_$i89: i32, in_$i90: i1, in_$i92: i32, in_$i93: i1, in_$i94: i32, in_$i95: i1, in_$i96: i1, in_$i97: i1, in_$i98: i1, in_$i99: i1, in_$i100: i1, in_$i101: i1, in_$i102: i1, in_$i103: i1, in_$i104: i1, in_$i105: i1, in_$i106: i1, in_$i107: i1, in_$i108: i1, in_$i109: i32, in_$i110: i1, in_$p111: ref, in_$i113: i32, in_$i114: i1, in_$p115: ref, in_$i117: i32, in_$i118: i1, in_$p119: ref, in_$i121: i32, in_$i122: i1, in_$p123: ref, in_$i125: i32, in_$i126: i1, in_$p127: ref, in_$i128: i32, in_$i129: i1, in_$p130: ref, in_$i131: i32, in_$i132: i1, in_$p133: ref, in_$i134: i32, in_$i135: i1, in_$p136: ref, in_$p137: ref, in_$i139: i32, in_$i140: i1, in_$p141: ref, in_$p142: ref, in_$i144: i32, in_$i145: i1, in_$p146: ref, in_$p147: ref, in_$i149: i32, in_$i150: i1, in_$p151: ref, in_$i152: i64, in_$i154: i32, in_$i155: i1, in_$p156: ref, in_$i157: i64, in_$i159: i32, in_$i160: i1, in_$p161: ref, in_$i162: i64, in_$i164: i32, in_$i165: i1, in_$p166: ref, in_$i167: i32, in_$i169: i32, in_$i170: i1, in_$p171: ref, in_$i172: i32, in_$i174: i32, in_$i175: i1, in_$p176: ref, in_$i177: i32, in_$i178: i32, in_$i179: i1, in_$i180: i32, in_$i181: i1, in_$p182: ref, in_$i184: i32, in_$i185: i1, in_$p186: ref, in_$i187: i64, in_$i189: i32, in_$i190: i1, in_$p191: ref, in_$i192: i64, in_$i194: i32, in_$i195: i1, in_$p196: ref, in_$i197: i64, in_$i199: i32, in_$i200: i1, in_$p201: ref, in_$i203: i32, in_$i204: i1, in_$p205: ref, in_$i207: i32, in_$i208: i1, in_$p209: ref, in_$i211: i32, in_$i212: i1, in_$p213: ref, in_$i215: i32, in_$i216: i1, in_$p217: ref, in_$i219: i32, in_$i220: i1, in_$p221: ref, in_$i223: i32, in_$i224: i1, in_$i225: i32, in_$i226: i32, in_$i227: i1, in_$i228: i32, in_$i229: i32, in_$i230: i32, in_$i231: i1, in_$i233: i32, in_$i234: i32, in_$i235: i32, in_$i236: i1, in_$i237: i32, in_$i238: i1, in_$i239: i1, in_$i240: i1, in_$i241: i1, in_$i242: i1, in_$i243: i1, in_$i244: i32, in_$i245: i1, in_$p246: ref, in_$i247: i32, in_$i248: i32, in_$i249: i1, in_$i250: i32, in_$i251: i32, in_$i252: i32, in_$i253: i1, in_$p254: ref, in_$i255: i32, in_$i256: i32, in_$i257: i1, in_$p258: ref, in_$i259: i32, in_$i260: i32, in_$i261: i1, in_$p262: ref, in_$i263: i32, in_$i264: i32, in_$i265: i1, in_$p266: ref, in_$i268: i32, in_$i269: i32, in_$i270: i32, in_$i271: i1, in_$p272: ref, in_$i274: i32, in_$i275: i32, in_$i276: i32, in_$i277: i1, in_$p278: ref, in_$i279: i32, in_$i280: i32, in_$i281: i1, in_$i282: i32, in_$i283: i1, in_$i285: i32, in_$i286: i1, in_$i287: i32, in_$i288: i1, in_$i289: i32, in_$i290: i1, in_$i291: i1, in_$i292: i1, in_$i293: i32, in_$i294: i1, in_$p295: ref, in_$p296: ref, in_$i297: i64, in_$i299: i32, in_$i300: i1, in_$p301: ref, in_$p302: ref, in_$i304: i32, in_$i305: i1, in_$i306: i32, in_$i307: i1, in_$i308: i1, in_$i309: i1, in_$i310: i32, in_$i311: i1, in_$i312: i32, in_$i313: i1, in_$i314: i32, in_$i315: i1, in_$i316: i32, in_$i317: i32, in_$i318: i1, in_$i319: i32, in_$i320: i1, in_$i321: i32, in_$i322: i1, in_$i323: i32, in_$i324: i1, in_$i325: i1, in_$i326: i1, in_$i327: i32, in_$i328: i1, in_$p329: ref, in_$p330: ref, in_$i331: i64, in_$i333: i32, in_$i334: i1, in_$p335: ref, in_$p336: ref, in_vslice_dummy_var_50: i32, in_vslice_dummy_var_51: i32, in_vslice_dummy_var_52: i64, in_vslice_dummy_var_53: i32, in_vslice_dummy_var_54: i32, in_vslice_dummy_var_55: i32, in_vslice_dummy_var_56: i32, in_vslice_dummy_var_57: i16, in_vslice_dummy_var_58: i16, in_vslice_dummy_var_59: i16, in_vslice_dummy_var_60: i32, in_vslice_dummy_var_61: i32, in_vslice_dummy_var_62: i32, in_vslice_dummy_var_63: i32, in_vslice_dummy_var_64: i32, in_vslice_dummy_var_65: i32, in_vslice_dummy_var_66: i64, in_vslice_dummy_var_67: i64, in_vslice_dummy_var_68: i64, in_vslice_dummy_var_69: i32, in_vslice_dummy_var_70: i32, in_vslice_dummy_var_71: i32, in_vslice_dummy_var_72: ref, in_vslice_dummy_var_73: ref, in_vslice_dummy_var_74: ref, in_vslice_dummy_var_75: i32, in_vslice_dummy_var_76: i32, in_vslice_dummy_var_77: i32, in_vslice_dummy_var_78: i32, in_vslice_dummy_var_79: i64, in_vslice_dummy_var_80: i64, in_vslice_dummy_var_81: i64, in_vslice_dummy_var_82: i64) returns (out_$i51: i32, out_$i52: i1, out_$i53: i1, out_$i54: i1, out_$i55: i1, out_$i56: i1, out_$i57: i1, out_$i58: i1, out_$i59: i1, out_$i60: i1, out_$i61: i32, out_$i62: i1, out_$i63: i32, out_$i64: i1, out_$i65: i1, out_$i66: i1, out_$i67: i1, out_$i68: i1, out_$i69: i32, out_$i70: i1, out_$p71: ref, out_$i72: i32, out_$i74: i32, out_$i75: i1, out_$p76: ref, out_$i77: i32, out_$i78: i1, out_$p79: ref, out_$i80: i32, out_$i81: i32, out_$i82: i1, out_$p83: ref, out_$i85: i32, out_$i86: i1, out_$i87: i32, out_$i88: i1, out_$i89: i32, out_$i90: i1, out_$i92: i32, out_$i93: i1, out_$i94: i32, out_$i95: i1, out_$i96: i1, out_$i97: i1, out_$i98: i1, out_$i99: i1, out_$i100: i1, out_$i101: i1, out_$i102: i1, out_$i103: i1, out_$i104: i1, out_$i105: i1, out_$i106: i1, out_$i107: i1, out_$i108: i1, out_$i109: i32, out_$i110: i1, out_$p111: ref, out_$i113: i32, out_$i114: i1, out_$p115: ref, out_$i117: i32, out_$i118: i1, out_$p119: ref, out_$i121: i32, out_$i122: i1, out_$p123: ref, out_$i125: i32, out_$i126: i1, out_$p127: ref, out_$i128: i32, out_$i129: i1, out_$p130: ref, out_$i131: i32, out_$i132: i1, out_$p133: ref, out_$i134: i32, out_$i135: i1, out_$p136: ref, out_$p137: ref, out_$i139: i32, out_$i140: i1, out_$p141: ref, out_$p142: ref, out_$i144: i32, out_$i145: i1, out_$p146: ref, out_$p147: ref, out_$i149: i32, out_$i150: i1, out_$p151: ref, out_$i152: i64, out_$i154: i32, out_$i155: i1, out_$p156: ref, out_$i157: i64, out_$i159: i32, out_$i160: i1, out_$p161: ref, out_$i162: i64, out_$i164: i32, out_$i165: i1, out_$p166: ref, out_$i167: i32, out_$i169: i32, out_$i170: i1, out_$p171: ref, out_$i172: i32, out_$i174: i32, out_$i175: i1, out_$p176: ref, out_$i177: i32, out_$i178: i32, out_$i179: i1, out_$i180: i32, out_$i181: i1, out_$p182: ref, out_$i184: i32, out_$i185: i1, out_$p186: ref, out_$i187: i64, out_$i189: i32, out_$i190: i1, out_$p191: ref, out_$i192: i64, out_$i194: i32, out_$i195: i1, out_$p196: ref, out_$i197: i64, out_$i199: i32, out_$i200: i1, out_$p201: ref, out_$i203: i32, out_$i204: i1, out_$p205: ref, out_$i207: i32, out_$i208: i1, out_$p209: ref, out_$i211: i32, out_$i212: i1, out_$p213: ref, out_$i215: i32, out_$i216: i1, out_$p217: ref, out_$i219: i32, out_$i220: i1, out_$p221: ref, out_$i223: i32, out_$i224: i1, out_$i225: i32, out_$i226: i32, out_$i227: i1, out_$i228: i32, out_$i229: i32, out_$i230: i32, out_$i231: i1, out_$i233: i32, out_$i234: i32, out_$i235: i32, out_$i236: i1, out_$i237: i32, out_$i238: i1, out_$i239: i1, out_$i240: i1, out_$i241: i1, out_$i242: i1, out_$i243: i1, out_$i244: i32, out_$i245: i1, out_$p246: ref, out_$i247: i32, out_$i248: i32, out_$i249: i1, out_$i250: i32, out_$i251: i32, out_$i252: i32, out_$i253: i1, out_$p254: ref, out_$i255: i32, out_$i256: i32, out_$i257: i1, out_$p258: ref, out_$i259: i32, out_$i260: i32, out_$i261: i1, out_$p262: ref, out_$i263: i32, out_$i264: i32, out_$i265: i1, out_$p266: ref, out_$i268: i32, out_$i269: i32, out_$i270: i32, out_$i271: i1, out_$p272: ref, out_$i274: i32, out_$i275: i32, out_$i276: i32, out_$i277: i1, out_$p278: ref, out_$i279: i32, out_$i280: i32, out_$i281: i1, out_$i282: i32, out_$i283: i1, out_$i285: i32, out_$i286: i1, out_$i287: i32, out_$i288: i1, out_$i289: i32, out_$i290: i1, out_$i291: i1, out_$i292: i1, out_$i293: i32, out_$i294: i1, out_$p295: ref, out_$p296: ref, out_$i297: i64, out_$i299: i32, out_$i300: i1, out_$p301: ref, out_$p302: ref, out_$i304: i32, out_$i305: i1, out_$i306: i32, out_$i307: i1, out_$i308: i1, out_$i309: i1, out_$i310: i32, out_$i311: i1, out_$i312: i32, out_$i313: i1, out_$i314: i32, out_$i315: i1, out_$i316: i32, out_$i317: i32, out_$i318: i1, out_$i319: i32, out_$i320: i1, out_$i321: i32, out_$i322: i1, out_$i323: i32, out_$i324: i1, out_$i325: i1, out_$i326: i1, out_$i327: i32, out_$i328: i1, out_$p329: ref, out_$p330: ref, out_$i331: i64, out_$i333: i32, out_$i334: i1, out_$p335: ref, out_$p336: ref, out_vslice_dummy_var_50: i32, out_vslice_dummy_var_51: i32, out_vslice_dummy_var_52: i64, out_vslice_dummy_var_53: i32, out_vslice_dummy_var_54: i32, out_vslice_dummy_var_55: i32, out_vslice_dummy_var_56: i32, out_vslice_dummy_var_57: i16, out_vslice_dummy_var_58: i16, out_vslice_dummy_var_59: i16, out_vslice_dummy_var_60: i32, out_vslice_dummy_var_61: i32, out_vslice_dummy_var_62: i32, out_vslice_dummy_var_63: i32, out_vslice_dummy_var_64: i32, out_vslice_dummy_var_65: i32, out_vslice_dummy_var_66: i64, out_vslice_dummy_var_67: i64, out_vslice_dummy_var_68: i64, out_vslice_dummy_var_69: i32, out_vslice_dummy_var_70: i32, out_vslice_dummy_var_71: i32, out_vslice_dummy_var_72: ref, out_vslice_dummy_var_73: ref, out_vslice_dummy_var_74: ref, out_vslice_dummy_var_75: i32, out_vslice_dummy_var_76: i32, out_vslice_dummy_var_77: i32, out_vslice_dummy_var_78: i32, out_vslice_dummy_var_79: i64, out_vslice_dummy_var_80: i64, out_vslice_dummy_var_81: i64, out_vslice_dummy_var_82: i64)
{

  entry:
    out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$p71, out_$i72, out_$i74, out_$i75, out_$p76, out_$i77, out_$i78, out_$p79, out_$i80, out_$i81, out_$i82, out_$p83, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p111, out_$i113, out_$i114, out_$p115, out_$i117, out_$i118, out_$p119, out_$i121, out_$i122, out_$p123, out_$i125, out_$i126, out_$p127, out_$i128, out_$i129, out_$p130, out_$i131, out_$i132, out_$p133, out_$i134, out_$i135, out_$p136, out_$p137, out_$i139, out_$i140, out_$p141, out_$p142, out_$i144, out_$i145, out_$p146, out_$p147, out_$i149, out_$i150, out_$p151, out_$i152, out_$i154, out_$i155, out_$p156, out_$i157, out_$i159, out_$i160, out_$p161, out_$i162, out_$i164, out_$i165, out_$p166, out_$i167, out_$i169, out_$i170, out_$p171, out_$i172, out_$i174, out_$i175, out_$p176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i181, out_$p182, out_$i184, out_$i185, out_$p186, out_$i187, out_$i189, out_$i190, out_$p191, out_$i192, out_$i194, out_$i195, out_$p196, out_$i197, out_$i199, out_$i200, out_$p201, out_$i203, out_$i204, out_$p205, out_$i207, out_$i208, out_$p209, out_$i211, out_$i212, out_$p213, out_$i215, out_$i216, out_$p217, out_$i219, out_$i220, out_$p221, out_$i223, out_$i224, out_$i225, out_$i226, out_$i227, out_$i228, out_$i229, out_$i230, out_$i231, out_$i233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$i239, out_$i240, out_$i241, out_$i242, out_$i243, out_$i244, out_$i245, out_$p246, out_$i247, out_$i248, out_$i249, out_$i250, out_$i251, out_$i252, out_$i253, out_$p254, out_$i255, out_$i256, out_$i257, out_$p258, out_$i259, out_$i260, out_$i261, out_$p262, out_$i263, out_$i264, out_$i265, out_$p266, out_$i268, out_$i269, out_$i270, out_$i271, out_$p272, out_$i274, out_$i275, out_$i276, out_$i277, out_$p278, out_$i279, out_$i280, out_$i281, out_$i282, out_$i283, out_$i285, out_$i286, out_$i287, out_$i288, out_$i289, out_$i290, out_$i291, out_$i292, out_$i293, out_$i294, out_$p295, out_$p296, out_$i297, out_$i299, out_$i300, out_$p301, out_$p302, out_$i304, out_$i305, out_$i306, out_$i307, out_$i308, out_$i309, out_$i310, out_$i311, out_$i312, out_$i313, out_$i314, out_$i315, out_$i316, out_$i317, out_$i318, out_$i319, out_$i320, out_$i321, out_$i322, out_$i323, out_$i324, out_$i325, out_$i326, out_$i327, out_$i328, out_$p329, out_$p330, out_$i331, out_$i333, out_$i334, out_$p335, out_$p336, out_vslice_dummy_var_50, out_vslice_dummy_var_51, out_vslice_dummy_var_52, out_vslice_dummy_var_53, out_vslice_dummy_var_54, out_vslice_dummy_var_55, out_vslice_dummy_var_56, out_vslice_dummy_var_57, out_vslice_dummy_var_58, out_vslice_dummy_var_59, out_vslice_dummy_var_60, out_vslice_dummy_var_61, out_vslice_dummy_var_62, out_vslice_dummy_var_63, out_vslice_dummy_var_64, out_vslice_dummy_var_65, out_vslice_dummy_var_66, out_vslice_dummy_var_67, out_vslice_dummy_var_68, out_vslice_dummy_var_69, out_vslice_dummy_var_70, out_vslice_dummy_var_71, out_vslice_dummy_var_72, out_vslice_dummy_var_73, out_vslice_dummy_var_74, out_vslice_dummy_var_75, out_vslice_dummy_var_76, out_vslice_dummy_var_77, out_vslice_dummy_var_78, out_vslice_dummy_var_79, out_vslice_dummy_var_80, out_vslice_dummy_var_81, out_vslice_dummy_var_82 := in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$i62, in_$i63, in_$i64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$p71, in_$i72, in_$i74, in_$i75, in_$p76, in_$i77, in_$i78, in_$p79, in_$i80, in_$i81, in_$i82, in_$p83, in_$i85, in_$i86, in_$i87, in_$i88, in_$i89, in_$i90, in_$i92, in_$i93, in_$i94, in_$i95, in_$i96, in_$i97, in_$i98, in_$i99, in_$i100, in_$i101, in_$i102, in_$i103, in_$i104, in_$i105, in_$i106, in_$i107, in_$i108, in_$i109, in_$i110, in_$p111, in_$i113, in_$i114, in_$p115, in_$i117, in_$i118, in_$p119, in_$i121, in_$i122, in_$p123, in_$i125, in_$i126, in_$p127, in_$i128, in_$i129, in_$p130, in_$i131, in_$i132, in_$p133, in_$i134, in_$i135, in_$p136, in_$p137, in_$i139, in_$i140, in_$p141, in_$p142, in_$i144, in_$i145, in_$p146, in_$p147, in_$i149, in_$i150, in_$p151, in_$i152, in_$i154, in_$i155, in_$p156, in_$i157, in_$i159, in_$i160, in_$p161, in_$i162, in_$i164, in_$i165, in_$p166, in_$i167, in_$i169, in_$i170, in_$p171, in_$i172, in_$i174, in_$i175, in_$p176, in_$i177, in_$i178, in_$i179, in_$i180, in_$i181, in_$p182, in_$i184, in_$i185, in_$p186, in_$i187, in_$i189, in_$i190, in_$p191, in_$i192, in_$i194, in_$i195, in_$p196, in_$i197, in_$i199, in_$i200, in_$p201, in_$i203, in_$i204, in_$p205, in_$i207, in_$i208, in_$p209, in_$i211, in_$i212, in_$p213, in_$i215, in_$i216, in_$p217, in_$i219, in_$i220, in_$p221, in_$i223, in_$i224, in_$i225, in_$i226, in_$i227, in_$i228, in_$i229, in_$i230, in_$i231, in_$i233, in_$i234, in_$i235, in_$i236, in_$i237, in_$i238, in_$i239, in_$i240, in_$i241, in_$i242, in_$i243, in_$i244, in_$i245, in_$p246, in_$i247, in_$i248, in_$i249, in_$i250, in_$i251, in_$i252, in_$i253, in_$p254, in_$i255, in_$i256, in_$i257, in_$p258, in_$i259, in_$i260, in_$i261, in_$p262, in_$i263, in_$i264, in_$i265, in_$p266, in_$i268, in_$i269, in_$i270, in_$i271, in_$p272, in_$i274, in_$i275, in_$i276, in_$i277, in_$p278, in_$i279, in_$i280, in_$i281, in_$i282, in_$i283, in_$i285, in_$i286, in_$i287, in_$i288, in_$i289, in_$i290, in_$i291, in_$i292, in_$i293, in_$i294, in_$p295, in_$p296, in_$i297, in_$i299, in_$i300, in_$p301, in_$p302, in_$i304, in_$i305, in_$i306, in_$i307, in_$i308, in_$i309, in_$i310, in_$i311, in_$i312, in_$i313, in_$i314, in_$i315, in_$i316, in_$i317, in_$i318, in_$i319, in_$i320, in_$i321, in_$i322, in_$i323, in_$i324, in_$i325, in_$i326, in_$i327, in_$i328, in_$p329, in_$p330, in_$i331, in_$i333, in_$i334, in_$p335, in_$p336, in_vslice_dummy_var_50, in_vslice_dummy_var_51, in_vslice_dummy_var_52, in_vslice_dummy_var_53, in_vslice_dummy_var_54, in_vslice_dummy_var_55, in_vslice_dummy_var_56, in_vslice_dummy_var_57, in_vslice_dummy_var_58, in_vslice_dummy_var_59, in_vslice_dummy_var_60, in_vslice_dummy_var_61, in_vslice_dummy_var_62, in_vslice_dummy_var_63, in_vslice_dummy_var_64, in_vslice_dummy_var_65, in_vslice_dummy_var_66, in_vslice_dummy_var_67, in_vslice_dummy_var_68, in_vslice_dummy_var_69, in_vslice_dummy_var_70, in_vslice_dummy_var_71, in_vslice_dummy_var_72, in_vslice_dummy_var_73, in_vslice_dummy_var_74, in_vslice_dummy_var_75, in_vslice_dummy_var_76, in_vslice_dummy_var_77, in_vslice_dummy_var_78, in_vslice_dummy_var_79, in_vslice_dummy_var_80, in_vslice_dummy_var_81, in_vslice_dummy_var_82;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2525} out_$i51 := __VERIFIER_nondet_int();
    call {:si_unique_call 2526} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i51);
    call {:si_unique_call 2527} {:cexpr "tmp___15"} boogie_si_record_i32(out_$i51);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb52_dummy;

  $bb315:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb313:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb293:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb263:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb243:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb240:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb190:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb23:
    assume !(out_$i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb37:
    assume !(out_$i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_10691:
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_10690:
    assume {:verifier.code 0} true;
    $M.53 := 1;
    call {:si_unique_call 2532} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_10691;

  corral_source_split_10689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2531} out_vslice_dummy_var_50 := xennet_get_sset_count(out_$p71, out_$i72);
    goto corral_source_split_10690;

  corral_source_split_10688:
    assume {:verifier.code 0} true;
    out_$i72 := $load.i32($M.0, in_$p1);
    goto corral_source_split_10689;

  corral_source_split_10687:
    assume {:verifier.code 0} true;
    out_$p71 := $M.49;
    goto corral_source_split_10688;

  $bb36:
    assume out_$i70 == 1;
    goto corral_source_split_10687;

  corral_source_split_10685:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  corral_source_split_10684:
    assume {:verifier.code 0} true;
    out_$i70 := $eq.i32(out_$i69, 1);
    goto corral_source_split_10685;

  corral_source_split_10683:
    assume {:verifier.code 0} true;
    out_$i69 := $M.53;
    goto corral_source_split_10684;

  $bb34:
    assume out_$i68 == 1;
    goto corral_source_split_10683;

  $bb32:
    assume out_$i67 == 1;
    assume {:verifier.code 0} true;
    out_$i68 := $eq.i32(out_$i63, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb25:
    assume out_$i64 == 1;
    assume {:verifier.code 0} true;
    out_$i67 := $slt.i32(out_$i63, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i64 := $slt.i32(out_$i63, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_10669:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2528} out_$i63 := __VERIFIER_nondet_int();
    call {:si_unique_call 2529} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i63);
    call {:si_unique_call 2530} {:cexpr "tmp___16"} boogie_si_record_i32(out_$i63);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb22:
    assume out_$i62 == 1;
    goto corral_source_split_10669;

  corral_source_split_10667:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_10666:
    assume {:verifier.code 0} true;
    out_$i62 := $ne.i32(out_$i61, 0);
    goto corral_source_split_10667;

  corral_source_split_10665:
    assume {:verifier.code 0} true;
    out_$i61 := $M.53;
    goto corral_source_split_10666;

  $bb20:
    assume out_$i60 == 1;
    goto corral_source_split_10665;

  $bb18:
    assume out_$i59 == 1;
    assume {:verifier.code 0} true;
    out_$i60 := $eq.i32(out_$i51, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb14:
    assume out_$i57 == 1;
    assume {:verifier.code 0} true;
    out_$i59 := $slt.i32(out_$i51, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb3:
    assume out_$i52 == 1;
    assume {:verifier.code 0} true;
    out_$i57 := $slt.i32(out_$i51, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i52 := $slt.i32(out_$i51, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb41:
    assume !(out_$i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  corral_source_split_10696:
    assume {:verifier.code 0} true;
    goto $bb42;

  corral_source_split_10695:
    assume {:verifier.code 0} true;
    $M.53 := 1;
    call {:si_unique_call 2534} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_10696;

  corral_source_split_10694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2533} xennet_get_ethtool_stats(out_$p76, in_$p10, in_$p13);
    goto corral_source_split_10695;

  corral_source_split_10693:
    assume {:verifier.code 0} true;
    out_$p76 := $M.49;
    goto corral_source_split_10694;

  $bb40:
    assume out_$i75 == 1;
    goto corral_source_split_10693;

  corral_source_split_10681:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  corral_source_split_10680:
    assume {:verifier.code 0} true;
    out_$i75 := $eq.i32(out_$i74, 1);
    goto corral_source_split_10681;

  corral_source_split_10679:
    assume {:verifier.code 0} true;
    out_$i74 := $M.53;
    goto corral_source_split_10680;

  $bb33:
    assume !(out_$i67 == 1);
    goto corral_source_split_10679;

  $bb44:
    assume !(out_$i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  corral_source_split_10702:
    assume {:verifier.code 0} true;
    goto $bb45;

  corral_source_split_10701:
    assume {:verifier.code 0} true;
    $M.53 := 1;
    call {:si_unique_call 2536} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_10702;

  corral_source_split_10700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2535} xennet_get_strings(out_$p79, out_$i80, in_$p11);
    goto corral_source_split_10701;

  corral_source_split_10699:
    assume {:verifier.code 0} true;
    out_$i80 := $load.i32($M.0, in_$p0);
    goto corral_source_split_10700;

  corral_source_split_10698:
    assume {:verifier.code 0} true;
    out_$p79 := $M.49;
    goto corral_source_split_10699;

  $bb43:
    assume out_$i78 == 1;
    goto corral_source_split_10698;

  corral_source_split_10673:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  corral_source_split_10672:
    assume {:verifier.code 0} true;
    out_$i78 := $eq.i32(out_$i77, 1);
    goto corral_source_split_10673;

  corral_source_split_10671:
    assume {:verifier.code 0} true;
    out_$i77 := $M.53;
    goto corral_source_split_10672;

  $bb27:
    assume out_$i65 == 1;
    goto corral_source_split_10671;

  $bb26:
    assume !(out_$i64 == 1);
    assume {:verifier.code 0} true;
    out_$i65 := $slt.i32(out_$i63, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb47:
    assume !(out_$i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  corral_source_split_10707:
    assume {:verifier.code 0} true;
    goto $bb48;

  corral_source_split_10706:
    assume {:verifier.code 0} true;
    $M.53 := 1;
    call {:si_unique_call 2538} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_10707;

  corral_source_split_10705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2537} out_vslice_dummy_var_51 := ethtool_op_get_link(out_$p83);
    goto corral_source_split_10706;

  corral_source_split_10704:
    assume {:verifier.code 0} true;
    out_$p83 := $M.49;
    goto corral_source_split_10705;

  $bb46:
    assume out_$i82 == 1;
    goto corral_source_split_10704;

  corral_source_split_10677:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  corral_source_split_10676:
    assume {:verifier.code 0} true;
    out_$i82 := $eq.i32(out_$i81, 1);
    goto corral_source_split_10677;

  corral_source_split_10675:
    assume {:verifier.code 0} true;
    out_$i81 := $M.53;
    goto corral_source_split_10676;

  $bb29:
    assume out_$i66 == 1;
    goto corral_source_split_10675;

  $bb28:
    assume !(out_$i65 == 1);
    assume {:verifier.code 0} true;
    out_$i66 := $eq.i32(out_$i63, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_10709:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2539} ldv_stop();
    goto corral_source_split_10709;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb30:
    assume {:verifier.code 0} true;
    assume !(out_$i66 == 1);
    goto $bb31;

  $bb35:
    assume {:verifier.code 0} true;
    assume !(out_$i68 == 1);
    goto $bb31;

  $bb54:
    assume !(out_$i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb59:
    assume !(out_$i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  corral_source_split_10719:
    assume {:verifier.code 0} true;
    goto $bb60;

  corral_source_split_10718:
    assume {:verifier.code 0} true;
    $M.54 := 1;
    call {:si_unique_call 2544} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_10719;

  corral_source_split_10717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2543} out_vslice_dummy_var_52 := show_rxbuf(in_$p17, in_$p15, in_$p18);
    goto corral_source_split_10718;

  $bb58:
    assume out_$i90 == 1;
    goto corral_source_split_10717;

  corral_source_split_10715:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  corral_source_split_10714:
    assume {:verifier.code 0} true;
    out_$i90 := $eq.i32(out_$i89, 1);
    goto corral_source_split_10715;

  corral_source_split_10713:
    assume {:verifier.code 0} true;
    out_$i89 := $M.54;
    goto corral_source_split_10714;

  $bb56:
    assume out_$i88 == 1;
    goto corral_source_split_10713;

  $bb55:
    assume {:verifier.code 0} true;
    out_$i88 := $eq.i32(out_$i87, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  corral_source_split_10711:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2540} out_$i87 := __VERIFIER_nondet_int();
    call {:si_unique_call 2541} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i87);
    call {:si_unique_call 2542} {:cexpr "tmp___17"} boogie_si_record_i32(out_$i87);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb53:
    assume out_$i86 == 1;
    goto corral_source_split_10711;

  corral_source_split_10663:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  corral_source_split_10662:
    assume {:verifier.code 0} true;
    out_$i86 := $ne.i32(out_$i85, 0);
    goto corral_source_split_10663;

  corral_source_split_10661:
    assume {:verifier.code 0} true;
    out_$i85 := $M.54;
    goto corral_source_split_10662;

  $bb19:
    assume !(out_$i59 == 1);
    goto corral_source_split_10661;

  corral_source_split_10721:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb62:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2545} ldv_stop();
    goto corral_source_split_10721;

  $bb57:
    assume !(out_$i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb66:
    assume !(out_$i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb100:
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb189:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb187:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb184:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb178:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb169:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb160:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb151:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb148:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb142:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb136:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb127:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb118:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb109:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb99:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb98:
    assume !(out_$i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  corral_source_split_10780:
    assume {:verifier.code 0} true;
    goto $bb99;

  corral_source_split_10779:
    assume {:verifier.code 0} true;
    $M.30 := 2;
    call {:si_unique_call 2550} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_10780;

  corral_source_split_10778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2549} out_vslice_dummy_var_53 := xennet_close(out_$p111);
    goto corral_source_split_10779;

  corral_source_split_10777:
    assume {:verifier.code 0} true;
    out_$p111 := $M.45;
    goto corral_source_split_10778;

  $bb97:
    assume out_$i110 == 1;
    goto corral_source_split_10777;

  corral_source_split_10775:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  corral_source_split_10774:
    assume {:verifier.code 0} true;
    out_$i110 := $eq.i32(out_$i109, 3);
    goto corral_source_split_10775;

  corral_source_split_10773:
    assume {:verifier.code 0} true;
    out_$i109 := $M.30;
    goto corral_source_split_10774;

  $bb95:
    assume out_$i108 == 1;
    goto corral_source_split_10773;

  $bb91:
    assume out_$i106 == 1;
    assume {:verifier.code 0} true;
    out_$i108 := $eq.i32(out_$i94, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  $bb85:
    assume out_$i103 == 1;
    assume {:verifier.code 0} true;
    out_$i106 := $slt.i32(out_$i94, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  $bb68:
    assume out_$i95 == 1;
    assume {:verifier.code 0} true;
    out_$i103 := $slt.i32(out_$i94, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb67:
    assume {:verifier.code 0} true;
    out_$i95 := $slt.i32(out_$i94, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  corral_source_split_10723:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2546} out_$i94 := __VERIFIER_nondet_int();
    call {:si_unique_call 2547} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i94);
    call {:si_unique_call 2548} {:cexpr "tmp___18"} boogie_si_record_i32(out_$i94);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb65:
    assume out_$i93 == 1;
    goto corral_source_split_10723;

  corral_source_split_10655:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  corral_source_split_10654:
    assume {:verifier.code 0} true;
    out_$i93 := $ne.i32(out_$i92, 0);
    goto corral_source_split_10655;

  corral_source_split_10653:
    assume {:verifier.code 0} true;
    out_$i92 := $M.30;
    goto corral_source_split_10654;

  $bb16:
    assume out_$i58 == 1;
    goto corral_source_split_10653;

  $bb15:
    assume !(out_$i57 == 1);
    assume {:verifier.code 0} true;
    out_$i58 := $slt.i32(out_$i51, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb108:
    assume !(out_$i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb109;

  corral_source_split_10801:
    assume {:verifier.code 0} true;
    goto $bb109;

  corral_source_split_10800:
    assume {:verifier.code 0} true;
    $M.30 := 2;
    call {:si_unique_call 2556} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_10801;

  corral_source_split_10799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2555} out_vslice_dummy_var_56 := eth_validate_addr(out_$p123);
    goto corral_source_split_10800;

  corral_source_split_10798:
    assume {:verifier.code 0} true;
    out_$p123 := $M.45;
    goto corral_source_split_10799;

  $bb107:
    assume out_$i122 == 1;
    goto corral_source_split_10798;

  corral_source_split_10796:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  corral_source_split_10795:
    assume {:verifier.code 0} true;
    out_$i122 := $eq.i32(out_$i121, 2);
    goto corral_source_split_10796;

  $bb106:
    assume {:verifier.code 0} true;
    out_$i121 := $M.30;
    goto corral_source_split_10795;

  $bb105:
    assume !(out_$i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb106;

  corral_source_split_10793:
    assume {:verifier.code 0} true;
    goto $bb106;

  corral_source_split_10792:
    assume {:verifier.code 0} true;
    $M.30 := 3;
    call {:si_unique_call 2554} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_10793;

  corral_source_split_10791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2553} out_vslice_dummy_var_55 := eth_validate_addr(out_$p119);
    goto corral_source_split_10792;

  corral_source_split_10790:
    assume {:verifier.code 0} true;
    out_$p119 := $M.45;
    goto corral_source_split_10791;

  $bb104:
    assume out_$i118 == 1;
    goto corral_source_split_10790;

  corral_source_split_10788:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb104, $bb105;

  corral_source_split_10787:
    assume {:verifier.code 0} true;
    out_$i118 := $eq.i32(out_$i117, 3);
    goto corral_source_split_10788;

  $bb103:
    assume {:verifier.code 0} true;
    out_$i117 := $M.30;
    goto corral_source_split_10787;

  $bb102:
    assume !(out_$i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  corral_source_split_10785:
    assume {:verifier.code 0} true;
    goto $bb103;

  corral_source_split_10784:
    assume {:verifier.code 0} true;
    $M.30 := 1;
    call {:si_unique_call 2552} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_10785;

  corral_source_split_10783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2551} out_vslice_dummy_var_54 := eth_validate_addr(out_$p115);
    goto corral_source_split_10784;

  corral_source_split_10782:
    assume {:verifier.code 0} true;
    out_$p115 := $M.45;
    goto corral_source_split_10783;

  $bb101:
    assume out_$i114 == 1;
    goto corral_source_split_10782;

  corral_source_split_10767:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  corral_source_split_10766:
    assume {:verifier.code 0} true;
    out_$i114 := $eq.i32(out_$i113, 1);
    goto corral_source_split_10767;

  corral_source_split_10765:
    assume {:verifier.code 0} true;
    out_$i113 := $M.30;
    goto corral_source_split_10766;

  $bb93:
    assume out_$i107 == 1;
    goto corral_source_split_10765;

  $bb92:
    assume !(out_$i106 == 1);
    assume {:verifier.code 0} true;
    out_$i107 := $slt.i32(out_$i94, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  $bb117:
    assume !(out_$i132 == 1);
    assume {:verifier.code 0} true;
    goto $bb118;

  corral_source_split_10822:
    assume {:verifier.code 0} true;
    goto $bb118;

  corral_source_split_10821:
    assume {:verifier.code 0} true;
    $M.30 := 2;
    call {:si_unique_call 2562} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_10822;

  corral_source_split_10820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2561} xennet_poll_controller(out_$p133);
    goto corral_source_split_10821;

  corral_source_split_10819:
    assume {:verifier.code 0} true;
    out_$p133 := $M.45;
    goto corral_source_split_10820;

  $bb116:
    assume out_$i132 == 1;
    goto corral_source_split_10819;

  corral_source_split_10817:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  corral_source_split_10816:
    assume {:verifier.code 0} true;
    out_$i132 := $eq.i32(out_$i131, 2);
    goto corral_source_split_10817;

  $bb115:
    assume {:verifier.code 0} true;
    out_$i131 := $M.30;
    goto corral_source_split_10816;

  $bb114:
    assume !(out_$i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb115;

  corral_source_split_10814:
    assume {:verifier.code 0} true;
    goto $bb115;

  corral_source_split_10813:
    assume {:verifier.code 0} true;
    $M.30 := 3;
    call {:si_unique_call 2560} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_10814;

  corral_source_split_10812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2559} xennet_poll_controller(out_$p130);
    goto corral_source_split_10813;

  corral_source_split_10811:
    assume {:verifier.code 0} true;
    out_$p130 := $M.45;
    goto corral_source_split_10812;

  $bb113:
    assume out_$i129 == 1;
    goto corral_source_split_10811;

  corral_source_split_10809:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  corral_source_split_10808:
    assume {:verifier.code 0} true;
    out_$i129 := $eq.i32(out_$i128, 3);
    goto corral_source_split_10809;

  $bb112:
    assume {:verifier.code 0} true;
    out_$i128 := $M.30;
    goto corral_source_split_10808;

  $bb111:
    assume !(out_$i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb112;

  corral_source_split_10806:
    assume {:verifier.code 0} true;
    goto $bb112;

  corral_source_split_10805:
    assume {:verifier.code 0} true;
    $M.30 := 1;
    call {:si_unique_call 2558} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_10806;

  corral_source_split_10804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2557} xennet_poll_controller(out_$p127);
    goto corral_source_split_10805;

  corral_source_split_10803:
    assume {:verifier.code 0} true;
    out_$p127 := $M.45;
    goto corral_source_split_10804;

  $bb110:
    assume out_$i126 == 1;
    goto corral_source_split_10803;

  corral_source_split_10771:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  corral_source_split_10770:
    assume {:verifier.code 0} true;
    out_$i126 := $eq.i32(out_$i125, 1);
    goto corral_source_split_10771;

  corral_source_split_10769:
    assume {:verifier.code 0} true;
    out_$i125 := $M.30;
    goto corral_source_split_10770;

  $bb94:
    assume !(out_$i107 == 1);
    goto corral_source_split_10769;

  $bb126:
    assume !(out_$i145 == 1);
    assume {:verifier.code 0} true;
    goto $bb127;

  corral_source_split_10846:
    assume {:verifier.code 0} true;
    goto $bb127;

  corral_source_split_10845:
    assume {:verifier.code 0} true;
    $M.30 := 2;
    call {:si_unique_call 2568} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_10846;

  corral_source_split_10844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2567} out_vslice_dummy_var_59 := xennet_select_queue(out_$p146, in_$p22, in_$p23, out_$p147);
    goto corral_source_split_10845;

  corral_source_split_10843:
    assume {:verifier.code 0} true;
    out_$p147 := $load.ref($M.0, in_$p3);
    goto corral_source_split_10844;

  corral_source_split_10842:
    assume {:verifier.code 0} true;
    out_$p146 := $M.45;
    goto corral_source_split_10843;

  $bb125:
    assume out_$i145 == 1;
    goto corral_source_split_10842;

  corral_source_split_10840:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb125, $bb126;

  corral_source_split_10839:
    assume {:verifier.code 0} true;
    out_$i145 := $eq.i32(out_$i144, 2);
    goto corral_source_split_10840;

  $bb124:
    assume {:verifier.code 0} true;
    out_$i144 := $M.30;
    goto corral_source_split_10839;

  $bb123:
    assume !(out_$i140 == 1);
    assume {:verifier.code 0} true;
    goto $bb124;

  corral_source_split_10837:
    assume {:verifier.code 0} true;
    goto $bb124;

  corral_source_split_10836:
    assume {:verifier.code 0} true;
    $M.30 := 3;
    call {:si_unique_call 2566} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_10837;

  corral_source_split_10835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2565} out_vslice_dummy_var_58 := xennet_select_queue(out_$p141, in_$p22, in_$p23, out_$p142);
    goto corral_source_split_10836;

  corral_source_split_10834:
    assume {:verifier.code 0} true;
    out_$p142 := $load.ref($M.0, in_$p3);
    goto corral_source_split_10835;

  corral_source_split_10833:
    assume {:verifier.code 0} true;
    out_$p141 := $M.45;
    goto corral_source_split_10834;

  $bb122:
    assume out_$i140 == 1;
    goto corral_source_split_10833;

  corral_source_split_10831:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb122, $bb123;

  corral_source_split_10830:
    assume {:verifier.code 0} true;
    out_$i140 := $eq.i32(out_$i139, 3);
    goto corral_source_split_10831;

  $bb121:
    assume {:verifier.code 0} true;
    out_$i139 := $M.30;
    goto corral_source_split_10830;

  $bb120:
    assume !(out_$i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  corral_source_split_10828:
    assume {:verifier.code 0} true;
    goto $bb121;

  corral_source_split_10827:
    assume {:verifier.code 0} true;
    $M.30 := 1;
    call {:si_unique_call 2564} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_10828;

  corral_source_split_10826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2563} out_vslice_dummy_var_57 := xennet_select_queue(out_$p136, in_$p22, in_$p23, out_$p137);
    goto corral_source_split_10827;

  corral_source_split_10825:
    assume {:verifier.code 0} true;
    out_$p137 := $load.ref($M.0, in_$p3);
    goto corral_source_split_10826;

  corral_source_split_10824:
    assume {:verifier.code 0} true;
    out_$p136 := $M.45;
    goto corral_source_split_10825;

  $bb119:
    assume out_$i135 == 1;
    goto corral_source_split_10824;

  corral_source_split_10755:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb119, $bb120;

  corral_source_split_10754:
    assume {:verifier.code 0} true;
    out_$i135 := $eq.i32(out_$i134, 1);
    goto corral_source_split_10755;

  corral_source_split_10753:
    assume {:verifier.code 0} true;
    out_$i134 := $M.30;
    goto corral_source_split_10754;

  $bb87:
    assume out_$i104 == 1;
    goto corral_source_split_10753;

  $bb86:
    assume !(out_$i103 == 1);
    assume {:verifier.code 0} true;
    out_$i104 := $slt.i32(out_$i94, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  $bb135:
    assume !(out_$i160 == 1);
    assume {:verifier.code 0} true;
    goto $bb136;

  corral_source_split_10870:
    assume {:verifier.code 0} true;
    goto $bb136;

  corral_source_split_10869:
    assume {:verifier.code 0} true;
    $M.30 := 2;
    call {:si_unique_call 2574} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_10870;

  corral_source_split_10868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2573} out_vslice_dummy_var_62 := xennet_set_features(out_$p161, out_$i162);
    goto corral_source_split_10869;

  corral_source_split_10867:
    assume {:verifier.code 0} true;
    out_$i162 := $load.i64($M.0, in_$p4);
    goto corral_source_split_10868;

  corral_source_split_10866:
    assume {:verifier.code 0} true;
    out_$p161 := $M.45;
    goto corral_source_split_10867;

  $bb134:
    assume out_$i160 == 1;
    goto corral_source_split_10866;

  corral_source_split_10864:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb134, $bb135;

  corral_source_split_10863:
    assume {:verifier.code 0} true;
    out_$i160 := $eq.i32(out_$i159, 2);
    goto corral_source_split_10864;

  $bb133:
    assume {:verifier.code 0} true;
    out_$i159 := $M.30;
    goto corral_source_split_10863;

  $bb132:
    assume !(out_$i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb133;

  corral_source_split_10861:
    assume {:verifier.code 0} true;
    goto $bb133;

  corral_source_split_10860:
    assume {:verifier.code 0} true;
    $M.30 := 3;
    call {:si_unique_call 2572} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_10861;

  corral_source_split_10859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2571} out_vslice_dummy_var_61 := xennet_set_features(out_$p156, out_$i157);
    goto corral_source_split_10860;

  corral_source_split_10858:
    assume {:verifier.code 0} true;
    out_$i157 := $load.i64($M.0, in_$p4);
    goto corral_source_split_10859;

  corral_source_split_10857:
    assume {:verifier.code 0} true;
    out_$p156 := $M.45;
    goto corral_source_split_10858;

  $bb131:
    assume out_$i155 == 1;
    goto corral_source_split_10857;

  corral_source_split_10855:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb131, $bb132;

  corral_source_split_10854:
    assume {:verifier.code 0} true;
    out_$i155 := $eq.i32(out_$i154, 3);
    goto corral_source_split_10855;

  $bb130:
    assume {:verifier.code 0} true;
    out_$i154 := $M.30;
    goto corral_source_split_10854;

  $bb129:
    assume !(out_$i150 == 1);
    assume {:verifier.code 0} true;
    goto $bb130;

  corral_source_split_10852:
    assume {:verifier.code 0} true;
    goto $bb130;

  corral_source_split_10851:
    assume {:verifier.code 0} true;
    $M.30 := 1;
    call {:si_unique_call 2570} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_10852;

  corral_source_split_10850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2569} out_vslice_dummy_var_60 := xennet_set_features(out_$p151, out_$i152);
    goto corral_source_split_10851;

  corral_source_split_10849:
    assume {:verifier.code 0} true;
    out_$i152 := $load.i64($M.0, in_$p4);
    goto corral_source_split_10850;

  corral_source_split_10848:
    assume {:verifier.code 0} true;
    out_$p151 := $M.45;
    goto corral_source_split_10849;

  $bb128:
    assume out_$i150 == 1;
    goto corral_source_split_10848;

  corral_source_split_10759:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb128, $bb129;

  corral_source_split_10758:
    assume {:verifier.code 0} true;
    out_$i150 := $eq.i32(out_$i149, 1);
    goto corral_source_split_10759;

  corral_source_split_10757:
    assume {:verifier.code 0} true;
    out_$i149 := $M.30;
    goto corral_source_split_10758;

  $bb89:
    assume out_$i105 == 1;
    goto corral_source_split_10757;

  $bb88:
    assume !(out_$i104 == 1);
    assume {:verifier.code 0} true;
    out_$i105 := $slt.i32(out_$i94, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  $bb141:
    assume !(out_$i170 == 1);
    assume {:verifier.code 0} true;
    goto $bb142;

  corral_source_split_10885:
    assume {:verifier.code 0} true;
    goto $bb142;

  corral_source_split_10884:
    assume {:verifier.code 0} true;
    $M.30 := 2;
    call {:si_unique_call 2578} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_10885;

  corral_source_split_10883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2577} out_vslice_dummy_var_64 := xennet_change_mtu(out_$p171, out_$i172);
    goto corral_source_split_10884;

  corral_source_split_10882:
    assume {:verifier.code 0} true;
    out_$i172 := $load.i32($M.0, in_$p2);
    goto corral_source_split_10883;

  corral_source_split_10881:
    assume {:verifier.code 0} true;
    out_$p171 := $M.45;
    goto corral_source_split_10882;

  $bb140:
    assume out_$i170 == 1;
    goto corral_source_split_10881;

  corral_source_split_10879:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb140, $bb141;

  corral_source_split_10878:
    assume {:verifier.code 0} true;
    out_$i170 := $eq.i32(out_$i169, 2);
    goto corral_source_split_10879;

  $bb139:
    assume {:verifier.code 0} true;
    out_$i169 := $M.30;
    goto corral_source_split_10878;

  $bb138:
    assume !(out_$i165 == 1);
    assume {:verifier.code 0} true;
    goto $bb139;

  corral_source_split_10876:
    assume {:verifier.code 0} true;
    goto $bb139;

  corral_source_split_10875:
    assume {:verifier.code 0} true;
    $M.30 := 3;
    call {:si_unique_call 2576} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_10876;

  corral_source_split_10874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2575} out_vslice_dummy_var_63 := xennet_change_mtu(out_$p166, out_$i167);
    goto corral_source_split_10875;

  corral_source_split_10873:
    assume {:verifier.code 0} true;
    out_$i167 := $load.i32($M.0, in_$p2);
    goto corral_source_split_10874;

  corral_source_split_10872:
    assume {:verifier.code 0} true;
    out_$p166 := $M.45;
    goto corral_source_split_10873;

  $bb137:
    assume out_$i165 == 1;
    goto corral_source_split_10872;

  corral_source_split_10763:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb137, $bb138;

  corral_source_split_10762:
    assume {:verifier.code 0} true;
    out_$i165 := $eq.i32(out_$i164, 3);
    goto corral_source_split_10763;

  corral_source_split_10761:
    assume {:verifier.code 0} true;
    out_$i164 := $M.30;
    goto corral_source_split_10762;

  $bb90:
    assume !(out_$i105 == 1);
    goto corral_source_split_10761;

  $bb144:
    assume !(out_$i175 == 1);
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb147:
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb146:
    assume !(out_$i179 == 1);
    assume {:verifier.code 0} true;
    goto $bb147;

  corral_source_split_10895:
    assume {:verifier.code 0} true;
    goto $bb147;

  corral_source_split_10894:
    assume {:verifier.code 0} true;
    $M.30 := 3;
    call {:si_unique_call 2581} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_10895;

  $bb145:
    assume out_$i179 == 1;
    goto corral_source_split_10894;

  corral_source_split_10892:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb145, $bb146;

  corral_source_split_10891:
    assume {:verifier.code 0} true;
    out_$i179 := $eq.i32(out_$i178, 0);
    goto corral_source_split_10892;

  corral_source_split_10890:
    assume {:verifier.code 0} true;
    out_$i178 := $M.61;
    goto corral_source_split_10891;

  corral_source_split_10889:
    assume {:verifier.code 0} true;
    $M.61 := out_$i177;
    call {:si_unique_call 2580} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i177);
    goto corral_source_split_10890;

  SeqInstr_57:
    goto corral_source_split_10889;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  corral_source_split_10888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2579} out_$i177 := xennet_open(out_$p176);
    goto SeqInstr_56;

  corral_source_split_10887:
    assume {:verifier.code 0} true;
    out_$p176 := $M.45;
    goto corral_source_split_10888;

  $bb143:
    assume out_$i175 == 1;
    goto corral_source_split_10887;

  corral_source_split_10743:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb143, $bb144;

  corral_source_split_10742:
    assume {:verifier.code 0} true;
    out_$i175 := $eq.i32(out_$i174, 2);
    goto corral_source_split_10743;

  corral_source_split_10741:
    assume {:verifier.code 0} true;
    out_$i174 := $M.30;
    goto corral_source_split_10742;

  $bb81:
    assume out_$i101 == 1;
    goto corral_source_split_10741;

  $bb70:
    assume out_$i96 == 1;
    assume {:verifier.code 0} true;
    out_$i101 := $slt.i32(out_$i94, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  $bb69:
    assume !(out_$i95 == 1);
    assume {:verifier.code 0} true;
    out_$i96 := $slt.i32(out_$i94, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb150:
    assume !(out_$i181 == 1);
    assume {:verifier.code 0} true;
    goto $bb151;

  corral_source_split_10900:
    assume {:verifier.code 0} true;
    goto $bb151;

  corral_source_split_10899:
    assume {:verifier.code 0} true;
    $M.30 := 3;
    call {:si_unique_call 2583} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_10900;

  corral_source_split_10898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2582} out_vslice_dummy_var_65 := xennet_start_xmit(in_$p20, out_$p182);
    goto corral_source_split_10899;

  corral_source_split_10897:
    assume {:verifier.code 0} true;
    out_$p182 := $M.45;
    goto corral_source_split_10898;

  $bb149:
    assume out_$i181 == 1;
    goto corral_source_split_10897;

  corral_source_split_10747:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb149, $bb150;

  corral_source_split_10746:
    assume {:verifier.code 0} true;
    out_$i181 := $eq.i32(out_$i180, 3);
    goto corral_source_split_10747;

  corral_source_split_10745:
    assume {:verifier.code 0} true;
    out_$i180 := $M.30;
    goto corral_source_split_10746;

  $bb83:
    assume out_$i102 == 1;
    goto corral_source_split_10745;

  $bb82:
    assume !(out_$i101 == 1);
    assume {:verifier.code 0} true;
    out_$i102 := $slt.i32(out_$i94, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  $bb159:
    assume !(out_$i195 == 1);
    assume {:verifier.code 0} true;
    goto $bb160;

  corral_source_split_10924:
    assume {:verifier.code 0} true;
    goto $bb160;

  corral_source_split_10923:
    assume {:verifier.code 0} true;
    $M.30 := 2;
    call {:si_unique_call 2589} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_10924;

  corral_source_split_10922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2588} out_vslice_dummy_var_68 := xennet_fix_features(out_$p196, out_$i197);
    goto corral_source_split_10923;

  corral_source_split_10921:
    assume {:verifier.code 0} true;
    out_$i197 := $load.i64($M.0, in_$p5);
    goto corral_source_split_10922;

  corral_source_split_10920:
    assume {:verifier.code 0} true;
    out_$p196 := $M.45;
    goto corral_source_split_10921;

  $bb158:
    assume out_$i195 == 1;
    goto corral_source_split_10920;

  corral_source_split_10918:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb158, $bb159;

  corral_source_split_10917:
    assume {:verifier.code 0} true;
    out_$i195 := $eq.i32(out_$i194, 2);
    goto corral_source_split_10918;

  $bb157:
    assume {:verifier.code 0} true;
    out_$i194 := $M.30;
    goto corral_source_split_10917;

  $bb156:
    assume !(out_$i190 == 1);
    assume {:verifier.code 0} true;
    goto $bb157;

  corral_source_split_10915:
    assume {:verifier.code 0} true;
    goto $bb157;

  corral_source_split_10914:
    assume {:verifier.code 0} true;
    $M.30 := 3;
    call {:si_unique_call 2587} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_10915;

  corral_source_split_10913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2586} out_vslice_dummy_var_67 := xennet_fix_features(out_$p191, out_$i192);
    goto corral_source_split_10914;

  corral_source_split_10912:
    assume {:verifier.code 0} true;
    out_$i192 := $load.i64($M.0, in_$p5);
    goto corral_source_split_10913;

  corral_source_split_10911:
    assume {:verifier.code 0} true;
    out_$p191 := $M.45;
    goto corral_source_split_10912;

  $bb155:
    assume out_$i190 == 1;
    goto corral_source_split_10911;

  corral_source_split_10909:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb155, $bb156;

  corral_source_split_10908:
    assume {:verifier.code 0} true;
    out_$i190 := $eq.i32(out_$i189, 3);
    goto corral_source_split_10909;

  $bb154:
    assume {:verifier.code 0} true;
    out_$i189 := $M.30;
    goto corral_source_split_10908;

  $bb153:
    assume !(out_$i185 == 1);
    assume {:verifier.code 0} true;
    goto $bb154;

  corral_source_split_10906:
    assume {:verifier.code 0} true;
    goto $bb154;

  corral_source_split_10905:
    assume {:verifier.code 0} true;
    $M.30 := 1;
    call {:si_unique_call 2585} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_10906;

  corral_source_split_10904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2584} out_vslice_dummy_var_66 := xennet_fix_features(out_$p186, out_$i187);
    goto corral_source_split_10905;

  corral_source_split_10903:
    assume {:verifier.code 0} true;
    out_$i187 := $load.i64($M.0, in_$p5);
    goto corral_source_split_10904;

  corral_source_split_10902:
    assume {:verifier.code 0} true;
    out_$p186 := $M.45;
    goto corral_source_split_10903;

  $bb152:
    assume out_$i185 == 1;
    goto corral_source_split_10902;

  corral_source_split_10751:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb152, $bb153;

  corral_source_split_10750:
    assume {:verifier.code 0} true;
    out_$i185 := $eq.i32(out_$i184, 1);
    goto corral_source_split_10751;

  corral_source_split_10749:
    assume {:verifier.code 0} true;
    out_$i184 := $M.30;
    goto corral_source_split_10750;

  $bb84:
    assume !(out_$i102 == 1);
    goto corral_source_split_10749;

  $bb168:
    assume !(out_$i208 == 1);
    assume {:verifier.code 0} true;
    goto $bb169;

  corral_source_split_10945:
    assume {:verifier.code 0} true;
    goto $bb169;

  corral_source_split_10944:
    assume {:verifier.code 0} true;
    $M.30 := 2;
    call {:si_unique_call 2595} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_10945;

  corral_source_split_10943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2594} out_vslice_dummy_var_71 := eth_mac_addr(out_$p209, in_$p26);
    goto corral_source_split_10944;

  corral_source_split_10942:
    assume {:verifier.code 0} true;
    out_$p209 := $M.45;
    goto corral_source_split_10943;

  $bb167:
    assume out_$i208 == 1;
    goto corral_source_split_10942;

  corral_source_split_10940:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb167, $bb168;

  corral_source_split_10939:
    assume {:verifier.code 0} true;
    out_$i208 := $eq.i32(out_$i207, 2);
    goto corral_source_split_10940;

  $bb166:
    assume {:verifier.code 0} true;
    out_$i207 := $M.30;
    goto corral_source_split_10939;

  $bb165:
    assume !(out_$i204 == 1);
    assume {:verifier.code 0} true;
    goto $bb166;

  corral_source_split_10937:
    assume {:verifier.code 0} true;
    goto $bb166;

  corral_source_split_10936:
    assume {:verifier.code 0} true;
    $M.30 := 3;
    call {:si_unique_call 2593} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_10937;

  corral_source_split_10935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2592} out_vslice_dummy_var_70 := eth_mac_addr(out_$p205, in_$p26);
    goto corral_source_split_10936;

  corral_source_split_10934:
    assume {:verifier.code 0} true;
    out_$p205 := $M.45;
    goto corral_source_split_10935;

  $bb164:
    assume out_$i204 == 1;
    goto corral_source_split_10934;

  corral_source_split_10932:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb164, $bb165;

  corral_source_split_10931:
    assume {:verifier.code 0} true;
    out_$i204 := $eq.i32(out_$i203, 3);
    goto corral_source_split_10932;

  $bb163:
    assume {:verifier.code 0} true;
    out_$i203 := $M.30;
    goto corral_source_split_10931;

  $bb162:
    assume !(out_$i200 == 1);
    assume {:verifier.code 0} true;
    goto $bb163;

  corral_source_split_10929:
    assume {:verifier.code 0} true;
    goto $bb163;

  corral_source_split_10928:
    assume {:verifier.code 0} true;
    $M.30 := 1;
    call {:si_unique_call 2591} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_10929;

  corral_source_split_10927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2590} out_vslice_dummy_var_69 := eth_mac_addr(out_$p201, in_$p26);
    goto corral_source_split_10928;

  corral_source_split_10926:
    assume {:verifier.code 0} true;
    out_$p201 := $M.45;
    goto corral_source_split_10927;

  $bb161:
    assume out_$i200 == 1;
    goto corral_source_split_10926;

  corral_source_split_10735:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb161, $bb162;

  corral_source_split_10734:
    assume {:verifier.code 0} true;
    out_$i200 := $eq.i32(out_$i199, 1);
    goto corral_source_split_10735;

  corral_source_split_10733:
    assume {:verifier.code 0} true;
    out_$i199 := $M.30;
    goto corral_source_split_10734;

  $bb79:
    assume out_$i100 == 1;
    goto corral_source_split_10733;

  $bb72:
    assume out_$i97 == 1;
    assume {:verifier.code 0} true;
    out_$i100 := $slt.i32(out_$i94, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb71:
    assume !(out_$i96 == 1);
    assume {:verifier.code 0} true;
    out_$i97 := $slt.i32(out_$i94, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb177:
    assume !(out_$i220 == 1);
    assume {:verifier.code 0} true;
    goto $bb178;

  corral_source_split_10966:
    assume {:verifier.code 0} true;
    goto $bb178;

  corral_source_split_10965:
    assume {:verifier.code 0} true;
    $M.30 := 2;
    call {:si_unique_call 2601} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_10966;

  corral_source_split_10964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2600} out_vslice_dummy_var_74 := xennet_get_stats64(out_$p221, in_$p25);
    goto corral_source_split_10965;

  corral_source_split_10963:
    assume {:verifier.code 0} true;
    out_$p221 := $M.45;
    goto corral_source_split_10964;

  $bb176:
    assume out_$i220 == 1;
    goto corral_source_split_10963;

  corral_source_split_10961:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb176, $bb177;

  corral_source_split_10960:
    assume {:verifier.code 0} true;
    out_$i220 := $eq.i32(out_$i219, 2);
    goto corral_source_split_10961;

  $bb175:
    assume {:verifier.code 0} true;
    out_$i219 := $M.30;
    goto corral_source_split_10960;

  $bb174:
    assume !(out_$i216 == 1);
    assume {:verifier.code 0} true;
    goto $bb175;

  corral_source_split_10958:
    assume {:verifier.code 0} true;
    goto $bb175;

  corral_source_split_10957:
    assume {:verifier.code 0} true;
    $M.30 := 3;
    call {:si_unique_call 2599} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_10958;

  corral_source_split_10956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2598} out_vslice_dummy_var_73 := xennet_get_stats64(out_$p217, in_$p25);
    goto corral_source_split_10957;

  corral_source_split_10955:
    assume {:verifier.code 0} true;
    out_$p217 := $M.45;
    goto corral_source_split_10956;

  $bb173:
    assume out_$i216 == 1;
    goto corral_source_split_10955;

  corral_source_split_10953:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb173, $bb174;

  corral_source_split_10952:
    assume {:verifier.code 0} true;
    out_$i216 := $eq.i32(out_$i215, 3);
    goto corral_source_split_10953;

  $bb172:
    assume {:verifier.code 0} true;
    out_$i215 := $M.30;
    goto corral_source_split_10952;

  $bb171:
    assume !(out_$i212 == 1);
    assume {:verifier.code 0} true;
    goto $bb172;

  corral_source_split_10950:
    assume {:verifier.code 0} true;
    goto $bb172;

  corral_source_split_10949:
    assume {:verifier.code 0} true;
    $M.30 := 1;
    call {:si_unique_call 2597} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_10950;

  corral_source_split_10948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2596} out_vslice_dummy_var_72 := xennet_get_stats64(out_$p213, in_$p25);
    goto corral_source_split_10949;

  corral_source_split_10947:
    assume {:verifier.code 0} true;
    out_$p213 := $M.45;
    goto corral_source_split_10948;

  $bb170:
    assume out_$i212 == 1;
    goto corral_source_split_10947;

  corral_source_split_10739:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb170, $bb171;

  corral_source_split_10738:
    assume {:verifier.code 0} true;
    out_$i212 := $eq.i32(out_$i211, 1);
    goto corral_source_split_10739;

  corral_source_split_10737:
    assume {:verifier.code 0} true;
    out_$i211 := $M.30;
    goto corral_source_split_10738;

  $bb80:
    assume !(out_$i100 == 1);
    goto corral_source_split_10737;

  $bb180:
    assume !(out_$i224 == 1);
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb183:
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb182:
    assume !(out_$i227 == 1);
    assume {:verifier.code 0} true;
    goto $bb183;

  corral_source_split_10978:
    assume {:verifier.code 0} true;
    goto $bb183;

  corral_source_split_10977:
    assume {:verifier.code 0} true;
    $M.58 := out_$i229;
    call {:si_unique_call 2605} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i229);
    goto corral_source_split_10978;

  corral_source_split_10976:
    assume {:verifier.code 0} true;
    out_$i229 := $add.i32(out_$i228, 1);
    goto corral_source_split_10977;

  corral_source_split_10975:
    assume {:verifier.code 0} true;
    out_$i228 := $M.58;
    goto corral_source_split_10976;

  corral_source_split_10974:
    assume {:verifier.code 0} true;
    $M.30 := 2;
    call {:si_unique_call 2604} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_10975;

  $bb181:
    assume out_$i227 == 1;
    goto corral_source_split_10974;

  corral_source_split_10972:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb181, $bb182;

  corral_source_split_10971:
    assume {:verifier.code 0} true;
    out_$i227 := $eq.i32(out_$i226, 0);
    goto corral_source_split_10972;

  corral_source_split_10970:
    assume {:verifier.code 0} true;
    out_$i226 := $M.62;
    goto corral_source_split_10971;

  corral_source_split_10969:
    assume {:verifier.code 0} true;
    $M.62 := out_$i225;
    call {:si_unique_call 2603} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i225);
    goto corral_source_split_10970;

  corral_source_split_10968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2602} out_$i225 := ldv_ndo_init_7();
    goto corral_source_split_10969;

  $bb179:
    assume out_$i224 == 1;
    goto corral_source_split_10968;

  corral_source_split_10727:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb179, $bb180;

  corral_source_split_10726:
    assume {:verifier.code 0} true;
    out_$i224 := $eq.i32(out_$i223, 1);
    goto corral_source_split_10727;

  corral_source_split_10725:
    assume {:verifier.code 0} true;
    out_$i223 := $M.30;
    goto corral_source_split_10726;

  $bb74:
    assume out_$i98 == 1;
    goto corral_source_split_10725;

  $bb73:
    assume !(out_$i97 == 1);
    assume {:verifier.code 0} true;
    out_$i98 := $slt.i32(out_$i94, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb186:
    assume !(out_$i231 == 1);
    assume {:verifier.code 0} true;
    goto $bb187;

  corral_source_split_10985:
    assume {:verifier.code 0} true;
    goto $bb187;

  corral_source_split_10984:
    assume {:verifier.code 0} true;
    $M.58 := out_$i234;
    call {:si_unique_call 2608} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i234);
    goto corral_source_split_10985;

  corral_source_split_10983:
    assume {:verifier.code 0} true;
    out_$i234 := $sub.i32(out_$i233, 1);
    goto corral_source_split_10984;

  corral_source_split_10982:
    assume {:verifier.code 0} true;
    out_$i233 := $M.58;
    goto corral_source_split_10983;

  corral_source_split_10981:
    assume {:verifier.code 0} true;
    $M.30 := 1;
    call {:si_unique_call 2607} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_10982;

  corral_source_split_10980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2606} out_vslice_dummy_var_75 := ldv_ndo_uninit_7();
    goto corral_source_split_10981;

  $bb185:
    assume out_$i231 == 1;
    goto corral_source_split_10980;

  corral_source_split_10731:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb185, $bb186;

  corral_source_split_10730:
    assume {:verifier.code 0} true;
    out_$i231 := $eq.i32(out_$i230, 2);
    goto corral_source_split_10731;

  corral_source_split_10729:
    assume {:verifier.code 0} true;
    out_$i230 := $M.30;
    goto corral_source_split_10730;

  $bb76:
    assume out_$i99 == 1;
    goto corral_source_split_10729;

  $bb75:
    assume !(out_$i98 == 1);
    assume {:verifier.code 0} true;
    out_$i99 := $eq.i32(out_$i94, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  corral_source_split_10987:
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2609} ldv_stop();
    goto corral_source_split_10987;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb77:
    assume {:verifier.code 0} true;
    assume !(out_$i99 == 1);
    goto $bb78;

  $bb96:
    assume {:verifier.code 0} true;
    assume !(out_$i108 == 1);
    goto $bb78;

  $bb192:
    assume !(out_$i236 == 1);
    assume {:verifier.code 0} true;
    goto $bb240;

  $bb213:
    assume {:verifier.code 0} true;
    goto $bb240;

  $bb239:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb237:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb234:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb228:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb222:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb212:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb208:
    assume !(out_$i245 == 1);
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb211:
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb210:
    assume !(out_$i249 == 1);
    assume {:verifier.code 0} true;
    goto $bb211;

  corral_source_split_11022:
    assume {:verifier.code 0} true;
    goto $bb211;

  corral_source_split_11021:
    assume {:verifier.code 0} true;
    $M.58 := out_$i251;
    call {:si_unique_call 2616} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i251);
    goto corral_source_split_11022;

  corral_source_split_11020:
    assume {:verifier.code 0} true;
    out_$i251 := $add.i32(out_$i250, 1);
    goto corral_source_split_11021;

  corral_source_split_11019:
    assume {:verifier.code 0} true;
    out_$i250 := $M.58;
    goto corral_source_split_11020;

  corral_source_split_11018:
    assume {:verifier.code 0} true;
    $M.55 := 2;
    call {:si_unique_call 2615} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_11019;

  $bb209:
    assume out_$i249 == 1;
    goto corral_source_split_11018;

  corral_source_split_11016:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb209, $bb210;

  corral_source_split_11015:
    assume {:verifier.code 0} true;
    out_$i249 := $eq.i32(out_$i248, 0);
    goto corral_source_split_11016;

  corral_source_split_11014:
    assume {:verifier.code 0} true;
    out_$i248 := $M.63;
    goto corral_source_split_11015;

  corral_source_split_11013:
    assume {:verifier.code 0} true;
    $M.63 := out_$i247;
    call {:si_unique_call 2614} {:cexpr "ldv_retval_3"} boogie_si_record_i32(out_$i247);
    goto corral_source_split_11014;

  corral_source_split_11012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2613} out_$i247 := netfront_probe(out_$p246, in_$p28);
    goto corral_source_split_11013;

  corral_source_split_11011:
    assume {:verifier.code 0} true;
    out_$p246 := $M.50;
    goto corral_source_split_11012;

  $bb207:
    assume out_$i245 == 1;
    goto corral_source_split_11011;

  corral_source_split_11009:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb207, $bb208;

  corral_source_split_11008:
    assume {:verifier.code 0} true;
    out_$i245 := $eq.i32(out_$i244, 1);
    goto corral_source_split_11009;

  corral_source_split_11007:
    assume {:verifier.code 0} true;
    out_$i244 := $M.55;
    goto corral_source_split_11008;

  $bb205:
    assume out_$i243 == 1;
    goto corral_source_split_11007;

  $bb203:
    assume out_$i242 == 1;
    assume {:verifier.code 0} true;
    out_$i243 := $eq.i32(out_$i237, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb205, $bb206;

  $bb194:
    assume out_$i238 == 1;
    assume {:verifier.code 0} true;
    out_$i242 := $slt.i32(out_$i237, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb203, $bb204;

  $bb193:
    assume {:verifier.code 0} true;
    out_$i238 := $slt.i32(out_$i237, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb194, $bb195;

  corral_source_split_10989:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2610} out_$i237 := __VERIFIER_nondet_int();
    call {:si_unique_call 2611} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i237);
    call {:si_unique_call 2612} {:cexpr "tmp___19"} boogie_si_record_i32(out_$i237);
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb191:
    assume out_$i236 == 1;
    goto corral_source_split_10989;

  corral_source_split_10659:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb191, $bb192;

  corral_source_split_10658:
    assume {:verifier.code 0} true;
    out_$i236 := $ne.i32(out_$i235, 0);
    goto corral_source_split_10659;

  corral_source_split_10657:
    assume {:verifier.code 0} true;
    out_$i235 := $M.55;
    goto corral_source_split_10658;

  $bb17:
    assume !(out_$i58 == 1);
    goto corral_source_split_10657;

  $bb221:
    assume !(out_$i261 == 1);
    assume {:verifier.code 0} true;
    goto $bb222;

  corral_source_split_11046:
    assume {:verifier.code 0} true;
    goto $bb222;

  corral_source_split_11045:
    assume {:verifier.code 0} true;
    $M.55 := 2;
    call {:si_unique_call 2622} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_11046;

  SeqInstr_66:
    goto corral_source_split_11045;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  corral_source_split_11044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2621} netback_changed(out_$p262, out_$i263);
    goto SeqInstr_65;

  corral_source_split_11043:
    assume {:verifier.code 0} true;
    out_$i263 := $load.i32($M.0, in_$p6);
    goto corral_source_split_11044;

  corral_source_split_11042:
    assume {:verifier.code 0} true;
    out_$p262 := $M.50;
    goto corral_source_split_11043;

  $bb220:
    assume out_$i261 == 1;
    goto corral_source_split_11042;

  corral_source_split_11040:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb220, $bb221;

  corral_source_split_11039:
    assume {:verifier.code 0} true;
    out_$i261 := $eq.i32(out_$i260, 2);
    goto corral_source_split_11040;

  $bb219:
    assume {:verifier.code 0} true;
    out_$i260 := $M.55;
    goto corral_source_split_11039;

  $bb218:
    assume !(out_$i257 == 1);
    assume {:verifier.code 0} true;
    goto $bb219;

  corral_source_split_11037:
    assume {:verifier.code 0} true;
    goto $bb219;

  corral_source_split_11036:
    assume {:verifier.code 0} true;
    $M.55 := 3;
    call {:si_unique_call 2620} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_11037;

  SeqInstr_63:
    goto corral_source_split_11036;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  corral_source_split_11035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2619} netback_changed(out_$p258, out_$i259);
    goto SeqInstr_62;

  corral_source_split_11034:
    assume {:verifier.code 0} true;
    out_$i259 := $load.i32($M.0, in_$p6);
    goto corral_source_split_11035;

  corral_source_split_11033:
    assume {:verifier.code 0} true;
    out_$p258 := $M.50;
    goto corral_source_split_11034;

  $bb217:
    assume out_$i257 == 1;
    goto corral_source_split_11033;

  corral_source_split_11031:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb217, $bb218;

  corral_source_split_11030:
    assume {:verifier.code 0} true;
    out_$i257 := $eq.i32(out_$i256, 3);
    goto corral_source_split_11031;

  $bb216:
    assume {:verifier.code 0} true;
    out_$i256 := $M.55;
    goto corral_source_split_11030;

  $bb215:
    assume !(out_$i253 == 1);
    assume {:verifier.code 0} true;
    goto $bb216;

  corral_source_split_11028:
    assume {:verifier.code 0} true;
    goto $bb216;

  corral_source_split_11027:
    assume {:verifier.code 0} true;
    $M.55 := 1;
    call {:si_unique_call 2618} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_11028;

  SeqInstr_60:
    goto corral_source_split_11027;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  corral_source_split_11026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2617} netback_changed(out_$p254, out_$i255);
    goto SeqInstr_59;

  corral_source_split_11025:
    assume {:verifier.code 0} true;
    out_$i255 := $load.i32($M.0, in_$p6);
    goto corral_source_split_11026;

  corral_source_split_11024:
    assume {:verifier.code 0} true;
    out_$p254 := $M.50;
    goto corral_source_split_11025;

  $bb214:
    assume out_$i253 == 1;
    goto corral_source_split_11024;

  corral_source_split_11005:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb214, $bb215;

  corral_source_split_11004:
    assume {:verifier.code 0} true;
    out_$i253 := $eq.i32(out_$i252, 1);
    goto corral_source_split_11005;

  corral_source_split_11003:
    assume {:verifier.code 0} true;
    out_$i252 := $M.55;
    goto corral_source_split_11004;

  $bb204:
    assume !(out_$i242 == 1);
    goto corral_source_split_11003;

  $bb227:
    assume !(out_$i271 == 1);
    assume {:verifier.code 0} true;
    goto $bb228;

  corral_source_split_11065:
    assume {:verifier.code 0} true;
    goto $bb228;

  corral_source_split_11064:
    assume {:verifier.code 0} true;
    $M.58 := out_$i275;
    call {:si_unique_call 2628} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i275);
    goto corral_source_split_11065;

  corral_source_split_11063:
    assume {:verifier.code 0} true;
    out_$i275 := $sub.i32(out_$i274, 1);
    goto corral_source_split_11064;

  corral_source_split_11062:
    assume {:verifier.code 0} true;
    out_$i274 := $M.58;
    goto corral_source_split_11063;

  corral_source_split_11061:
    assume {:verifier.code 0} true;
    $M.55 := 1;
    call {:si_unique_call 2627} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_11062;

  corral_source_split_11060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2626} out_vslice_dummy_var_77 := xennet_remove(out_$p272);
    goto corral_source_split_11061;

  corral_source_split_11059:
    assume {:verifier.code 0} true;
    out_$p272 := $M.50;
    goto corral_source_split_11060;

  $bb226:
    assume out_$i271 == 1;
    goto corral_source_split_11059;

  corral_source_split_11057:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb226, $bb227;

  corral_source_split_11056:
    assume {:verifier.code 0} true;
    out_$i271 := $eq.i32(out_$i270, 2);
    goto corral_source_split_11057;

  $bb225:
    assume {:verifier.code 0} true;
    out_$i270 := $M.55;
    goto corral_source_split_11056;

  $bb224:
    assume !(out_$i265 == 1);
    assume {:verifier.code 0} true;
    goto $bb225;

  corral_source_split_11054:
    assume {:verifier.code 0} true;
    goto $bb225;

  corral_source_split_11053:
    assume {:verifier.code 0} true;
    $M.58 := out_$i269;
    call {:si_unique_call 2625} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i269);
    goto corral_source_split_11054;

  corral_source_split_11052:
    assume {:verifier.code 0} true;
    out_$i269 := $sub.i32(out_$i268, 1);
    goto corral_source_split_11053;

  corral_source_split_11051:
    assume {:verifier.code 0} true;
    out_$i268 := $M.58;
    goto corral_source_split_11052;

  corral_source_split_11050:
    assume {:verifier.code 0} true;
    $M.55 := 1;
    call {:si_unique_call 2624} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_11051;

  corral_source_split_11049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2623} out_vslice_dummy_var_76 := xennet_remove(out_$p266);
    goto corral_source_split_11050;

  corral_source_split_11048:
    assume {:verifier.code 0} true;
    out_$p266 := $M.50;
    goto corral_source_split_11049;

  $bb223:
    assume out_$i265 == 1;
    goto corral_source_split_11048;

  corral_source_split_10993:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb223, $bb224;

  corral_source_split_10992:
    assume {:verifier.code 0} true;
    out_$i265 := $eq.i32(out_$i264, 3);
    goto corral_source_split_10993;

  corral_source_split_10991:
    assume {:verifier.code 0} true;
    out_$i264 := $M.55;
    goto corral_source_split_10992;

  $bb196:
    assume out_$i239 == 1;
    goto corral_source_split_10991;

  $bb195:
    assume !(out_$i238 == 1);
    assume {:verifier.code 0} true;
    out_$i239 := $slt.i32(out_$i237, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb196, $bb197;

  $bb230:
    assume !(out_$i277 == 1);
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb233:
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb232:
    assume !(out_$i281 == 1);
    assume {:verifier.code 0} true;
    goto $bb233;

  corral_source_split_11075:
    assume {:verifier.code 0} true;
    goto $bb233;

  corral_source_split_11074:
    assume {:verifier.code 0} true;
    $M.55 := 2;
    call {:si_unique_call 2631} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_11075;

  $bb231:
    assume out_$i281 == 1;
    goto corral_source_split_11074;

  corral_source_split_11072:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb231, $bb232;

  corral_source_split_11071:
    assume {:verifier.code 0} true;
    out_$i281 := $eq.i32(out_$i280, 0);
    goto corral_source_split_11072;

  corral_source_split_11070:
    assume {:verifier.code 0} true;
    out_$i280 := $M.64;
    goto corral_source_split_11071;

  corral_source_split_11069:
    assume {:verifier.code 0} true;
    $M.64 := out_$i279;
    call {:si_unique_call 2630} {:cexpr "ldv_retval_2"} boogie_si_record_i32(out_$i279);
    goto corral_source_split_11070;

  corral_source_split_11068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2629} out_$i279 := netfront_resume(out_$p278);
    goto corral_source_split_11069;

  corral_source_split_11067:
    assume {:verifier.code 0} true;
    out_$p278 := $M.50;
    goto corral_source_split_11068;

  $bb229:
    assume out_$i277 == 1;
    goto corral_source_split_11067;

  corral_source_split_10997:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb229, $bb230;

  corral_source_split_10996:
    assume {:verifier.code 0} true;
    out_$i277 := $eq.i32(out_$i276, 3);
    goto corral_source_split_10997;

  corral_source_split_10995:
    assume {:verifier.code 0} true;
    out_$i276 := $M.55;
    goto corral_source_split_10996;

  $bb198:
    assume out_$i240 == 1;
    goto corral_source_split_10995;

  $bb197:
    assume !(out_$i239 == 1);
    assume {:verifier.code 0} true;
    out_$i240 := $slt.i32(out_$i237, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb198, $bb199;

  $bb236:
    assume !(out_$i283 == 1);
    assume {:verifier.code 0} true;
    goto $bb237;

  corral_source_split_11079:
    assume {:verifier.code 0} true;
    goto $bb237;

  corral_source_split_11078:
    assume {:verifier.code 0} true;
    $M.55 := 3;
    call {:si_unique_call 2633} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_11079;

  corral_source_split_11077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2632} out_vslice_dummy_var_78 := ldv_suspend_2();
    goto corral_source_split_11078;

  $bb235:
    assume out_$i283 == 1;
    goto corral_source_split_11077;

  corral_source_split_11001:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb235, $bb236;

  corral_source_split_11000:
    assume {:verifier.code 0} true;
    out_$i283 := $eq.i32(out_$i282, 2);
    goto corral_source_split_11001;

  corral_source_split_10999:
    assume {:verifier.code 0} true;
    out_$i282 := $M.55;
    goto corral_source_split_11000;

  $bb200:
    assume out_$i241 == 1;
    goto corral_source_split_10999;

  $bb199:
    assume !(out_$i240 == 1);
    assume {:verifier.code 0} true;
    out_$i241 := $eq.i32(out_$i237, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb200, $bb201;

  corral_source_split_11081:
    assume {:verifier.code 0} true;
    goto $bb239;

  $bb238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2634} ldv_stop();
    goto corral_source_split_11081;

  $bb202:
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb201:
    assume {:verifier.code 0} true;
    assume !(out_$i241 == 1);
    goto $bb202;

  $bb206:
    assume {:verifier.code 0} true;
    assume !(out_$i243 == 1);
    goto $bb202;

  $bb242:
    assume !(out_$i286 == 1);
    assume {:verifier.code 0} true;
    goto $bb243;

  corral_source_split_11084:
    assume {:verifier.code 0} true;
    goto $bb243;

  corral_source_split_11083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2635} choose_timer_1();
    goto corral_source_split_11084;

  $bb241:
    assume out_$i286 == 1;
    goto corral_source_split_11083;

  corral_source_split_10647:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb241, $bb242;

  corral_source_split_10646:
    assume {:verifier.code 0} true;
    out_$i286 := $ne.i32(out_$i285, 0);
    goto corral_source_split_10647;

  corral_source_split_10645:
    assume {:verifier.code 0} true;
    out_$i285 := $M.56;
    goto corral_source_split_10646;

  $bb12:
    assume out_$i56 == 1;
    goto corral_source_split_10645;

  $bb5:
    assume out_$i53 == 1;
    assume {:verifier.code 0} true;
    out_$i56 := $slt.i32(out_$i51, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb4:
    assume !(out_$i52 == 1);
    assume {:verifier.code 0} true;
    out_$i53 := $slt.i32(out_$i51, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb245:
    assume !(out_$i288 == 1);
    assume {:verifier.code 0} true;
    goto $bb263;

  $bb257:
    assume {:verifier.code 0} true;
    goto $bb263;

  $bb262:
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb260:
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb256:
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb255:
    assume !(out_$i294 == 1);
    assume {:verifier.code 0} true;
    goto $bb256;

  corral_source_split_11101:
    assume {:verifier.code 0} true;
    goto $bb256;

  corral_source_split_11100:
    assume {:verifier.code 0} true;
    $M.57 := 1;
    call {:si_unique_call 2640} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_11101;

  corral_source_split_11099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2639} out_vslice_dummy_var_79 := store_rxbuf(out_$p295, out_$p296, in_$p29, out_$i297);
    goto corral_source_split_11100;

  corral_source_split_11098:
    assume {:verifier.code 0} true;
    out_$i297 := $load.i64($M.0, in_$p7);
    goto corral_source_split_11099;

  corral_source_split_11097:
    assume {:verifier.code 0} true;
    out_$p296 := $M.51;
    goto corral_source_split_11098;

  corral_source_split_11096:
    assume {:verifier.code 0} true;
    out_$p295 := $M.52;
    goto corral_source_split_11097;

  $bb254:
    assume out_$i294 == 1;
    goto corral_source_split_11096;

  corral_source_split_11094:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb254, $bb255;

  corral_source_split_11093:
    assume {:verifier.code 0} true;
    out_$i294 := $eq.i32(out_$i293, 1);
    goto corral_source_split_11094;

  corral_source_split_11092:
    assume {:verifier.code 0} true;
    out_$i293 := $M.57;
    goto corral_source_split_11093;

  $bb252:
    assume out_$i292 == 1;
    goto corral_source_split_11092;

  $bb247:
    assume out_$i290 == 1;
    assume {:verifier.code 0} true;
    out_$i292 := $eq.i32(out_$i289, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb252, $bb253;

  $bb246:
    assume {:verifier.code 0} true;
    out_$i290 := $slt.i32(out_$i289, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb247, $bb248;

  corral_source_split_11086:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2636} out_$i289 := __VERIFIER_nondet_int();
    call {:si_unique_call 2637} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i289);
    call {:si_unique_call 2638} {:cexpr "tmp___20"} boogie_si_record_i32(out_$i289);
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb244:
    assume out_$i288 == 1;
    goto corral_source_split_11086;

  corral_source_split_10651:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb244, $bb245;

  corral_source_split_10650:
    assume {:verifier.code 0} true;
    out_$i288 := $ne.i32(out_$i287, 0);
    goto corral_source_split_10651;

  corral_source_split_10649:
    assume {:verifier.code 0} true;
    out_$i287 := $M.57;
    goto corral_source_split_10650;

  $bb13:
    assume !(out_$i56 == 1);
    goto corral_source_split_10649;

  $bb259:
    assume !(out_$i300 == 1);
    assume {:verifier.code 0} true;
    goto $bb260;

  corral_source_split_11107:
    assume {:verifier.code 0} true;
    goto $bb260;

  corral_source_split_11106:
    assume {:verifier.code 0} true;
    $M.57 := 1;
    call {:si_unique_call 2642} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_11107;

  corral_source_split_11105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2641} out_vslice_dummy_var_80 := show_rxbuf(out_$p301, out_$p302, in_$p30);
    goto corral_source_split_11106;

  corral_source_split_11104:
    assume {:verifier.code 0} true;
    out_$p302 := $M.51;
    goto corral_source_split_11105;

  corral_source_split_11103:
    assume {:verifier.code 0} true;
    out_$p301 := $M.52;
    goto corral_source_split_11104;

  $bb258:
    assume out_$i300 == 1;
    goto corral_source_split_11103;

  corral_source_split_11090:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb258, $bb259;

  corral_source_split_11089:
    assume {:verifier.code 0} true;
    out_$i300 := $eq.i32(out_$i299, 1);
    goto corral_source_split_11090;

  corral_source_split_11088:
    assume {:verifier.code 0} true;
    out_$i299 := $M.57;
    goto corral_source_split_11089;

  $bb249:
    assume out_$i291 == 1;
    goto corral_source_split_11088;

  $bb248:
    assume !(out_$i290 == 1);
    assume {:verifier.code 0} true;
    out_$i291 := $eq.i32(out_$i289, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb249, $bb250;

  corral_source_split_11109:
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2643} ldv_stop();
    goto corral_source_split_11109;

  $bb251:
    assume {:verifier.code 0} true;
    goto $bb261;

  $bb250:
    assume {:verifier.code 0} true;
    assume !(out_$i291 == 1);
    goto $bb251;

  $bb253:
    assume {:verifier.code 0} true;
    assume !(out_$i292 == 1);
    goto $bb251;

  $bb265:
    assume !(out_$i305 == 1);
    assume {:verifier.code 0} true;
    goto $bb293;

  $bb281:
    assume {:verifier.code 0} true;
    goto $bb293;

  $bb292:
    assume {:verifier.code 0} true;
    goto $bb281;

  $bb290:
    assume {:verifier.code 0} true;
    goto $bb281;

  $bb280:
    assume {:verifier.code 0} true;
    goto $bb281;

  $bb276:
    assume {:verifier.code 0} true;
    goto $bb280;

  $bb275:
    assume {:verifier.code 0} true;
    assume !(out_$i311 == 1);
    goto $bb276;

  $bb278:
    assume {:verifier.code 0} true;
    assume !(out_$i313 == 1);
    goto $bb276;

  corral_source_split_11123:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb278;

  corral_source_split_11122:
    assume {:verifier.code 0} true;
    out_$i313 := $eq.i32(out_$i312, 0);
    goto corral_source_split_11123;

  corral_source_split_11121:
    assume {:verifier.code 0} true;
    out_$i312 := $M.58;
    goto corral_source_split_11122;

  $bb274:
    assume out_$i311 == 1;
    goto corral_source_split_11121;

  corral_source_split_11119:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb274, $bb275;

  corral_source_split_11118:
    assume {:verifier.code 0} true;
    out_$i311 := $eq.i32(out_$i310, 3);
    goto corral_source_split_11119;

  corral_source_split_11117:
    assume {:verifier.code 0} true;
    out_$i310 := $M.59;
    goto corral_source_split_11118;

  $bb272:
    assume out_$i309 == 1;
    goto corral_source_split_11117;

  $bb267:
    assume out_$i307 == 1;
    assume {:verifier.code 0} true;
    out_$i309 := $eq.i32(out_$i306, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb272, $bb273;

  $bb266:
    assume {:verifier.code 0} true;
    out_$i307 := $slt.i32(out_$i306, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb267, $bb268;

  corral_source_split_11111:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2644} out_$i306 := __VERIFIER_nondet_int();
    call {:si_unique_call 2645} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i306);
    call {:si_unique_call 2646} {:cexpr "tmp___21"} boogie_si_record_i32(out_$i306);
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb264:
    assume out_$i305 == 1;
    goto corral_source_split_11111;

  corral_source_split_10639:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb264, $bb265;

  corral_source_split_10638:
    assume {:verifier.code 0} true;
    out_$i305 := $ne.i32(out_$i304, 0);
    goto corral_source_split_10639;

  corral_source_split_10637:
    assume {:verifier.code 0} true;
    out_$i304 := $M.59;
    goto corral_source_split_10638;

  $bb7:
    assume out_$i54 == 1;
    goto corral_source_split_10637;

  $bb6:
    assume !(out_$i53 == 1);
    assume {:verifier.code 0} true;
    out_$i54 := $slt.i32(out_$i51, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb283:
    assume !(out_$i315 == 1);
    assume {:verifier.code 0} true;
    goto $bb290;

  $bb289:
    assume {:verifier.code 0} true;
    goto $bb290;

  $bb288:
    assume !(out_$i320 == 1);
    assume {:verifier.code 0} true;
    goto $bb289;

  corral_source_split_11150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb288;

  corral_source_split_11149:
    assume {:verifier.code 0} true;
    out_$i320 := $ne.i32(out_$i319, 0);
    goto corral_source_split_11150;

  $bb286:
    assume {:verifier.code 0} true;
    out_$i319 := $M.65;
    goto corral_source_split_11149;

  $bb285:
    assume !(out_$i318 == 1);
    assume {:verifier.code 0} true;
    goto $bb286;

  corral_source_split_11147:
    assume {:verifier.code 0} true;
    goto $bb286;

  corral_source_split_11146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2661} ldv_initialize_ethtool_ops_6();
    goto corral_source_split_11147;

  corral_source_split_11145:
    assume {:verifier.code 0} true;
    $M.53 := 1;
    call {:si_unique_call 2660} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_11146;

  corral_source_split_11144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2659} ldv_initialize_device_attribute_4();
    goto corral_source_split_11145;

  corral_source_split_11143:
    assume {:verifier.code 0} true;
    $M.57 := 1;
    call {:si_unique_call 2658} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_11144;

  corral_source_split_11142:
    assume {:verifier.code 0} true;
    $M.54 := 1;
    call {:si_unique_call 2657} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_11143;

  corral_source_split_11141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2656} ldv_initialize_xenbus_driver_2();
    goto corral_source_split_11142;

  corral_source_split_11140:
    assume {:verifier.code 0} true;
    $M.55 := 1;
    call {:si_unique_call 2655} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_11141;

  corral_source_split_11139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2654} ldv_initialize_device_attribute_5();
    goto corral_source_split_11140;

  corral_source_split_11138:
    assume {:verifier.code 0} true;
    $M.60 := 1;
    call {:si_unique_call 2653} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_11139;

  corral_source_split_11137:
    assume {:verifier.code 0} true;
    $M.59 := 3;
    call {:si_unique_call 2652} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_11138;

  $bb284:
    assume out_$i318 == 1;
    goto corral_source_split_11137;

  corral_source_split_11135:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb284, $bb285;

  corral_source_split_11134:
    assume {:verifier.code 0} true;
    out_$i318 := $eq.i32(out_$i317, 0);
    goto corral_source_split_11135;

  corral_source_split_11133:
    assume {:verifier.code 0} true;
    out_$i317 := $M.65;
    goto corral_source_split_11134;

  corral_source_split_11132:
    assume {:verifier.code 0} true;
    $M.65 := out_$i316;
    call {:si_unique_call 2651} {:cexpr "ldv_retval_4"} boogie_si_record_i32(out_$i316);
    goto corral_source_split_11133;

  corral_source_split_11131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2650} out_$i316 := netif_init();
    goto corral_source_split_11132;

  $bb282:
    assume out_$i315 == 1;
    goto corral_source_split_11131;

  corral_source_split_11115:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb282, $bb283;

  corral_source_split_11114:
    assume {:verifier.code 0} true;
    out_$i315 := $eq.i32(out_$i314, 1);
    goto corral_source_split_11115;

  corral_source_split_11113:
    assume {:verifier.code 0} true;
    out_$i314 := $M.59;
    goto corral_source_split_11114;

  $bb269:
    assume out_$i308 == 1;
    goto corral_source_split_11113;

  $bb268:
    assume !(out_$i307 == 1);
    assume {:verifier.code 0} true;
    out_$i308 := $eq.i32(out_$i306, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb269, $bb270;

  corral_source_split_11155:
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2663} ldv_stop();
    goto corral_source_split_11155;

  $bb271:
    assume {:verifier.code 0} true;
    goto $bb291;

  $bb270:
    assume {:verifier.code 0} true;
    assume !(out_$i308 == 1);
    goto $bb271;

  $bb273:
    assume {:verifier.code 0} true;
    assume !(out_$i309 == 1);
    goto $bb271;

  $bb295:
    assume !(out_$i322 == 1);
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb307:
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb312:
    assume {:verifier.code 0} true;
    goto $bb307;

  $bb310:
    assume {:verifier.code 0} true;
    goto $bb307;

  $bb306:
    assume {:verifier.code 0} true;
    goto $bb307;

  $bb305:
    assume !(out_$i328 == 1);
    assume {:verifier.code 0} true;
    goto $bb306;

  corral_source_split_11172:
    assume {:verifier.code 0} true;
    goto $bb306;

  corral_source_split_11171:
    assume {:verifier.code 0} true;
    $M.60 := 1;
    call {:si_unique_call 2668} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_11172;

  corral_source_split_11170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2667} out_vslice_dummy_var_81 := store_rxbuf(out_$p329, out_$p330, in_$p31, out_$i331);
    goto corral_source_split_11171;

  corral_source_split_11169:
    assume {:verifier.code 0} true;
    out_$i331 := $load.i64($M.0, in_$p8);
    goto corral_source_split_11170;

  corral_source_split_11168:
    assume {:verifier.code 0} true;
    out_$p330 := $M.46;
    goto corral_source_split_11169;

  corral_source_split_11167:
    assume {:verifier.code 0} true;
    out_$p329 := $M.47;
    goto corral_source_split_11168;

  $bb304:
    assume out_$i328 == 1;
    goto corral_source_split_11167;

  corral_source_split_11165:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb304, $bb305;

  corral_source_split_11164:
    assume {:verifier.code 0} true;
    out_$i328 := $eq.i32(out_$i327, 1);
    goto corral_source_split_11165;

  corral_source_split_11163:
    assume {:verifier.code 0} true;
    out_$i327 := $M.60;
    goto corral_source_split_11164;

  $bb302:
    assume out_$i326 == 1;
    goto corral_source_split_11163;

  $bb297:
    assume out_$i324 == 1;
    assume {:verifier.code 0} true;
    out_$i326 := $eq.i32(out_$i323, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb302, $bb303;

  $bb296:
    assume {:verifier.code 0} true;
    out_$i324 := $slt.i32(out_$i323, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb297, $bb298;

  corral_source_split_11157:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2664} out_$i323 := __VERIFIER_nondet_int();
    call {:si_unique_call 2665} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i323);
    call {:si_unique_call 2666} {:cexpr "tmp___22"} boogie_si_record_i32(out_$i323);
    assume {:verifier.code 0} true;
    goto $bb296;

  $bb294:
    assume out_$i322 == 1;
    goto corral_source_split_11157;

  corral_source_split_10643:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb294, $bb295;

  corral_source_split_10642:
    assume {:verifier.code 0} true;
    out_$i322 := $ne.i32(out_$i321, 0);
    goto corral_source_split_10643;

  corral_source_split_10641:
    assume {:verifier.code 0} true;
    out_$i321 := $M.60;
    goto corral_source_split_10642;

  $bb9:
    assume out_$i55 == 1;
    goto corral_source_split_10641;

  $bb8:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    out_$i55 := $eq.i32(out_$i51, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb309:
    assume !(out_$i334 == 1);
    assume {:verifier.code 0} true;
    goto $bb310;

  corral_source_split_11178:
    assume {:verifier.code 0} true;
    goto $bb310;

  corral_source_split_11177:
    assume {:verifier.code 0} true;
    $M.60 := 1;
    call {:si_unique_call 2670} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_11178;

  corral_source_split_11176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2669} out_vslice_dummy_var_82 := show_rxbuf(out_$p335, out_$p336, in_$p32);
    goto corral_source_split_11177;

  corral_source_split_11175:
    assume {:verifier.code 0} true;
    out_$p336 := $M.46;
    goto corral_source_split_11176;

  corral_source_split_11174:
    assume {:verifier.code 0} true;
    out_$p335 := $M.47;
    goto corral_source_split_11175;

  $bb308:
    assume out_$i334 == 1;
    goto corral_source_split_11174;

  corral_source_split_11161:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb308, $bb309;

  corral_source_split_11160:
    assume {:verifier.code 0} true;
    out_$i334 := $eq.i32(out_$i333, 1);
    goto corral_source_split_11161;

  corral_source_split_11159:
    assume {:verifier.code 0} true;
    out_$i333 := $M.60;
    goto corral_source_split_11160;

  $bb299:
    assume out_$i325 == 1;
    goto corral_source_split_11159;

  $bb298:
    assume !(out_$i324 == 1);
    assume {:verifier.code 0} true;
    out_$i325 := $eq.i32(out_$i323, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb299, $bb300;

  corral_source_split_11180:
    assume {:verifier.code 0} true;
    goto $bb312;

  $bb311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2671} ldv_stop();
    goto corral_source_split_11180;

  $bb301:
    assume {:verifier.code 0} true;
    goto $bb311;

  $bb300:
    assume {:verifier.code 0} true;
    assume !(out_$i325 == 1);
    goto $bb301;

  $bb303:
    assume {:verifier.code 0} true;
    assume !(out_$i326 == 1);
    goto $bb301;

  corral_source_split_11182:
    assume {:verifier.code 0} true;
    goto $bb315;

  $bb314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2672} ldv_stop();
    goto corral_source_split_11182;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb314;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i55 == 1);
    goto $bb11;

  $bb21:
    assume {:verifier.code 0} true;
    assume !(out_$i60 == 1);
    goto $bb11;

  $bb52_dummy:
    call {:si_unique_call 1} out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$p71, out_$i72, out_$i74, out_$i75, out_$p76, out_$i77, out_$i78, out_$p79, out_$i80, out_$i81, out_$i82, out_$p83, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p111, out_$i113, out_$i114, out_$p115, out_$i117, out_$i118, out_$p119, out_$i121, out_$i122, out_$p123, out_$i125, out_$i126, out_$p127, out_$i128, out_$i129, out_$p130, out_$i131, out_$i132, out_$p133, out_$i134, out_$i135, out_$p136, out_$p137, out_$i139, out_$i140, out_$p141, out_$p142, out_$i144, out_$i145, out_$p146, out_$p147, out_$i149, out_$i150, out_$p151, out_$i152, out_$i154, out_$i155, out_$p156, out_$i157, out_$i159, out_$i160, out_$p161, out_$i162, out_$i164, out_$i165, out_$p166, out_$i167, out_$i169, out_$i170, out_$p171, out_$i172, out_$i174, out_$i175, out_$p176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i181, out_$p182, out_$i184, out_$i185, out_$p186, out_$i187, out_$i189, out_$i190, out_$p191, out_$i192, out_$i194, out_$i195, out_$p196, out_$i197, out_$i199, out_$i200, out_$p201, out_$i203, out_$i204, out_$p205, out_$i207, out_$i208, out_$p209, out_$i211, out_$i212, out_$p213, out_$i215, out_$i216, out_$p217, out_$i219, out_$i220, out_$p221, out_$i223, out_$i224, out_$i225, out_$i226, out_$i227, out_$i228, out_$i229, out_$i230, out_$i231, out_$i233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$i239, out_$i240, out_$i241, out_$i242, out_$i243, out_$i244, out_$i245, out_$p246, out_$i247, out_$i248, out_$i249, out_$i250, out_$i251, out_$i252, out_$i253, out_$p254, out_$i255, out_$i256, out_$i257, out_$p258, out_$i259, out_$i260, out_$i261, out_$p262, out_$i263, out_$i264, out_$i265, out_$p266, out_$i268, out_$i269, out_$i270, out_$i271, out_$p272, out_$i274, out_$i275, out_$i276, out_$i277, out_$p278, out_$i279, out_$i280, out_$i281, out_$i282, out_$i283, out_$i285, out_$i286, out_$i287, out_$i288, out_$i289, out_$i290, out_$i291, out_$i292, out_$i293, out_$i294, out_$p295, out_$p296, out_$i297, out_$i299, out_$i300, out_$p301, out_$p302, out_$i304, out_$i305, out_$i306, out_$i307, out_$i308, out_$i309, out_$i310, out_$i311, out_$i312, out_$i313, out_$i314, out_$i315, out_$i316, out_$i317, out_$i318, out_$i319, out_$i320, out_$i321, out_$i322, out_$i323, out_$i324, out_$i325, out_$i326, out_$i327, out_$i328, out_$p329, out_$p330, out_$i331, out_$i333, out_$i334, out_$p335, out_$p336, out_vslice_dummy_var_50, out_vslice_dummy_var_51, out_vslice_dummy_var_52, out_vslice_dummy_var_53, out_vslice_dummy_var_54, out_vslice_dummy_var_55, out_vslice_dummy_var_56, out_vslice_dummy_var_57, out_vslice_dummy_var_58, out_vslice_dummy_var_59, out_vslice_dummy_var_60, out_vslice_dummy_var_61, out_vslice_dummy_var_62, out_vslice_dummy_var_63, out_vslice_dummy_var_64, out_vslice_dummy_var_65, out_vslice_dummy_var_66, out_vslice_dummy_var_67, out_vslice_dummy_var_68, out_vslice_dummy_var_69, out_vslice_dummy_var_70, out_vslice_dummy_var_71, out_vslice_dummy_var_72, out_vslice_dummy_var_73, out_vslice_dummy_var_74, out_vslice_dummy_var_75, out_vslice_dummy_var_76, out_vslice_dummy_var_77, out_vslice_dummy_var_78, out_vslice_dummy_var_79, out_vslice_dummy_var_80, out_vslice_dummy_var_81, out_vslice_dummy_var_82 := main_loop_$bb1(in_$p0, in_$p1, in_$p2, in_$p3, in_$p4, in_$p5, in_$p6, in_$p7, in_$p8, in_$p10, in_$p11, in_$p13, in_$p15, in_$p17, in_$p18, in_$p20, in_$p22, in_$p23, in_$p25, in_$p26, in_$p28, in_$p29, in_$p30, in_$p31, in_$p32, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$p71, out_$i72, out_$i74, out_$i75, out_$p76, out_$i77, out_$i78, out_$p79, out_$i80, out_$i81, out_$i82, out_$p83, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p111, out_$i113, out_$i114, out_$p115, out_$i117, out_$i118, out_$p119, out_$i121, out_$i122, out_$p123, out_$i125, out_$i126, out_$p127, out_$i128, out_$i129, out_$p130, out_$i131, out_$i132, out_$p133, out_$i134, out_$i135, out_$p136, out_$p137, out_$i139, out_$i140, out_$p141, out_$p142, out_$i144, out_$i145, out_$p146, out_$p147, out_$i149, out_$i150, out_$p151, out_$i152, out_$i154, out_$i155, out_$p156, out_$i157, out_$i159, out_$i160, out_$p161, out_$i162, out_$i164, out_$i165, out_$p166, out_$i167, out_$i169, out_$i170, out_$p171, out_$i172, out_$i174, out_$i175, out_$p176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i181, out_$p182, out_$i184, out_$i185, out_$p186, out_$i187, out_$i189, out_$i190, out_$p191, out_$i192, out_$i194, out_$i195, out_$p196, out_$i197, out_$i199, out_$i200, out_$p201, out_$i203, out_$i204, out_$p205, out_$i207, out_$i208, out_$p209, out_$i211, out_$i212, out_$p213, out_$i215, out_$i216, out_$p217, out_$i219, out_$i220, out_$p221, out_$i223, out_$i224, out_$i225, out_$i226, out_$i227, out_$i228, out_$i229, out_$i230, out_$i231, out_$i233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$i239, out_$i240, out_$i241, out_$i242, out_$i243, out_$i244, out_$i245, out_$p246, out_$i247, out_$i248, out_$i249, out_$i250, out_$i251, out_$i252, out_$i253, out_$p254, out_$i255, out_$i256, out_$i257, out_$p258, out_$i259, out_$i260, out_$i261, out_$p262, out_$i263, out_$i264, out_$i265, out_$p266, out_$i268, out_$i269, out_$i270, out_$i271, out_$p272, out_$i274, out_$i275, out_$i276, out_$i277, out_$p278, out_$i279, out_$i280, out_$i281, out_$i282, out_$i283, out_$i285, out_$i286, out_$i287, out_$i288, out_$i289, out_$i290, out_$i291, out_$i292, out_$i293, out_$i294, out_$p295, out_$p296, out_$i297, out_$i299, out_$i300, out_$p301, out_$p302, out_$i304, out_$i305, out_$i306, out_$i307, out_$i308, out_$i309, out_$i310, out_$i311, out_$i312, out_$i313, out_$i314, out_$i315, out_$i316, out_$i317, out_$i318, out_$i319, out_$i320, out_$i321, out_$i322, out_$i323, out_$i324, out_$i325, out_$i326, out_$i327, out_$i328, out_$p329, out_$p330, out_$i331, out_$i333, out_$i334, out_$p335, out_$p336, out_vslice_dummy_var_50, out_vslice_dummy_var_51, out_vslice_dummy_var_52, out_vslice_dummy_var_53, out_vslice_dummy_var_54, out_vslice_dummy_var_55, out_vslice_dummy_var_56, out_vslice_dummy_var_57, out_vslice_dummy_var_58, out_vslice_dummy_var_59, out_vslice_dummy_var_60, out_vslice_dummy_var_61, out_vslice_dummy_var_62, out_vslice_dummy_var_63, out_vslice_dummy_var_64, out_vslice_dummy_var_65, out_vslice_dummy_var_66, out_vslice_dummy_var_67, out_vslice_dummy_var_68, out_vslice_dummy_var_69, out_vslice_dummy_var_70, out_vslice_dummy_var_71, out_vslice_dummy_var_72, out_vslice_dummy_var_73, out_vslice_dummy_var_74, out_vslice_dummy_var_75, out_vslice_dummy_var_76, out_vslice_dummy_var_77, out_vslice_dummy_var_78, out_vslice_dummy_var_79, out_vslice_dummy_var_80, out_vslice_dummy_var_81, out_vslice_dummy_var_82);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p10: ref, in_$p11: ref, in_$p13: ref, in_$p15: ref, in_$p17: ref, in_$p18: ref, in_$p20: ref, in_$p22: ref, in_$p23: ref, in_$p25: ref, in_$p26: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$i51: i32, in_$i52: i1, in_$i53: i1, in_$i54: i1, in_$i55: i1, in_$i56: i1, in_$i57: i1, in_$i58: i1, in_$i59: i1, in_$i60: i1, in_$i61: i32, in_$i62: i1, in_$i63: i32, in_$i64: i1, in_$i65: i1, in_$i66: i1, in_$i67: i1, in_$i68: i1, in_$i69: i32, in_$i70: i1, in_$p71: ref, in_$i72: i32, in_$i74: i32, in_$i75: i1, in_$p76: ref, in_$i77: i32, in_$i78: i1, in_$p79: ref, in_$i80: i32, in_$i81: i32, in_$i82: i1, in_$p83: ref, in_$i85: i32, in_$i86: i1, in_$i87: i32, in_$i88: i1, in_$i89: i32, in_$i90: i1, in_$i92: i32, in_$i93: i1, in_$i94: i32, in_$i95: i1, in_$i96: i1, in_$i97: i1, in_$i98: i1, in_$i99: i1, in_$i100: i1, in_$i101: i1, in_$i102: i1, in_$i103: i1, in_$i104: i1, in_$i105: i1, in_$i106: i1, in_$i107: i1, in_$i108: i1, in_$i109: i32, in_$i110: i1, in_$p111: ref, in_$i113: i32, in_$i114: i1, in_$p115: ref, in_$i117: i32, in_$i118: i1, in_$p119: ref, in_$i121: i32, in_$i122: i1, in_$p123: ref, in_$i125: i32, in_$i126: i1, in_$p127: ref, in_$i128: i32, in_$i129: i1, in_$p130: ref, in_$i131: i32, in_$i132: i1, in_$p133: ref, in_$i134: i32, in_$i135: i1, in_$p136: ref, in_$p137: ref, in_$i139: i32, in_$i140: i1, in_$p141: ref, in_$p142: ref, in_$i144: i32, in_$i145: i1, in_$p146: ref, in_$p147: ref, in_$i149: i32, in_$i150: i1, in_$p151: ref, in_$i152: i64, in_$i154: i32, in_$i155: i1, in_$p156: ref, in_$i157: i64, in_$i159: i32, in_$i160: i1, in_$p161: ref, in_$i162: i64, in_$i164: i32, in_$i165: i1, in_$p166: ref, in_$i167: i32, in_$i169: i32, in_$i170: i1, in_$p171: ref, in_$i172: i32, in_$i174: i32, in_$i175: i1, in_$p176: ref, in_$i177: i32, in_$i178: i32, in_$i179: i1, in_$i180: i32, in_$i181: i1, in_$p182: ref, in_$i184: i32, in_$i185: i1, in_$p186: ref, in_$i187: i64, in_$i189: i32, in_$i190: i1, in_$p191: ref, in_$i192: i64, in_$i194: i32, in_$i195: i1, in_$p196: ref, in_$i197: i64, in_$i199: i32, in_$i200: i1, in_$p201: ref, in_$i203: i32, in_$i204: i1, in_$p205: ref, in_$i207: i32, in_$i208: i1, in_$p209: ref, in_$i211: i32, in_$i212: i1, in_$p213: ref, in_$i215: i32, in_$i216: i1, in_$p217: ref, in_$i219: i32, in_$i220: i1, in_$p221: ref, in_$i223: i32, in_$i224: i1, in_$i225: i32, in_$i226: i32, in_$i227: i1, in_$i228: i32, in_$i229: i32, in_$i230: i32, in_$i231: i1, in_$i233: i32, in_$i234: i32, in_$i235: i32, in_$i236: i1, in_$i237: i32, in_$i238: i1, in_$i239: i1, in_$i240: i1, in_$i241: i1, in_$i242: i1, in_$i243: i1, in_$i244: i32, in_$i245: i1, in_$p246: ref, in_$i247: i32, in_$i248: i32, in_$i249: i1, in_$i250: i32, in_$i251: i32, in_$i252: i32, in_$i253: i1, in_$p254: ref, in_$i255: i32, in_$i256: i32, in_$i257: i1, in_$p258: ref, in_$i259: i32, in_$i260: i32, in_$i261: i1, in_$p262: ref, in_$i263: i32, in_$i264: i32, in_$i265: i1, in_$p266: ref, in_$i268: i32, in_$i269: i32, in_$i270: i32, in_$i271: i1, in_$p272: ref, in_$i274: i32, in_$i275: i32, in_$i276: i32, in_$i277: i1, in_$p278: ref, in_$i279: i32, in_$i280: i32, in_$i281: i1, in_$i282: i32, in_$i283: i1, in_$i285: i32, in_$i286: i1, in_$i287: i32, in_$i288: i1, in_$i289: i32, in_$i290: i1, in_$i291: i1, in_$i292: i1, in_$i293: i32, in_$i294: i1, in_$p295: ref, in_$p296: ref, in_$i297: i64, in_$i299: i32, in_$i300: i1, in_$p301: ref, in_$p302: ref, in_$i304: i32, in_$i305: i1, in_$i306: i32, in_$i307: i1, in_$i308: i1, in_$i309: i1, in_$i310: i32, in_$i311: i1, in_$i312: i32, in_$i313: i1, in_$i314: i32, in_$i315: i1, in_$i316: i32, in_$i317: i32, in_$i318: i1, in_$i319: i32, in_$i320: i1, in_$i321: i32, in_$i322: i1, in_$i323: i32, in_$i324: i1, in_$i325: i1, in_$i326: i1, in_$i327: i32, in_$i328: i1, in_$p329: ref, in_$p330: ref, in_$i331: i64, in_$i333: i32, in_$i334: i1, in_$p335: ref, in_$p336: ref, in_vslice_dummy_var_50: i32, in_vslice_dummy_var_51: i32, in_vslice_dummy_var_52: i64, in_vslice_dummy_var_53: i32, in_vslice_dummy_var_54: i32, in_vslice_dummy_var_55: i32, in_vslice_dummy_var_56: i32, in_vslice_dummy_var_57: i16, in_vslice_dummy_var_58: i16, in_vslice_dummy_var_59: i16, in_vslice_dummy_var_60: i32, in_vslice_dummy_var_61: i32, in_vslice_dummy_var_62: i32, in_vslice_dummy_var_63: i32, in_vslice_dummy_var_64: i32, in_vslice_dummy_var_65: i32, in_vslice_dummy_var_66: i64, in_vslice_dummy_var_67: i64, in_vslice_dummy_var_68: i64, in_vslice_dummy_var_69: i32, in_vslice_dummy_var_70: i32, in_vslice_dummy_var_71: i32, in_vslice_dummy_var_72: ref, in_vslice_dummy_var_73: ref, in_vslice_dummy_var_74: ref, in_vslice_dummy_var_75: i32, in_vslice_dummy_var_76: i32, in_vslice_dummy_var_77: i32, in_vslice_dummy_var_78: i32, in_vslice_dummy_var_79: i64, in_vslice_dummy_var_80: i64, in_vslice_dummy_var_81: i64, in_vslice_dummy_var_82: i64) returns (out_$i51: i32, out_$i52: i1, out_$i53: i1, out_$i54: i1, out_$i55: i1, out_$i56: i1, out_$i57: i1, out_$i58: i1, out_$i59: i1, out_$i60: i1, out_$i61: i32, out_$i62: i1, out_$i63: i32, out_$i64: i1, out_$i65: i1, out_$i66: i1, out_$i67: i1, out_$i68: i1, out_$i69: i32, out_$i70: i1, out_$p71: ref, out_$i72: i32, out_$i74: i32, out_$i75: i1, out_$p76: ref, out_$i77: i32, out_$i78: i1, out_$p79: ref, out_$i80: i32, out_$i81: i32, out_$i82: i1, out_$p83: ref, out_$i85: i32, out_$i86: i1, out_$i87: i32, out_$i88: i1, out_$i89: i32, out_$i90: i1, out_$i92: i32, out_$i93: i1, out_$i94: i32, out_$i95: i1, out_$i96: i1, out_$i97: i1, out_$i98: i1, out_$i99: i1, out_$i100: i1, out_$i101: i1, out_$i102: i1, out_$i103: i1, out_$i104: i1, out_$i105: i1, out_$i106: i1, out_$i107: i1, out_$i108: i1, out_$i109: i32, out_$i110: i1, out_$p111: ref, out_$i113: i32, out_$i114: i1, out_$p115: ref, out_$i117: i32, out_$i118: i1, out_$p119: ref, out_$i121: i32, out_$i122: i1, out_$p123: ref, out_$i125: i32, out_$i126: i1, out_$p127: ref, out_$i128: i32, out_$i129: i1, out_$p130: ref, out_$i131: i32, out_$i132: i1, out_$p133: ref, out_$i134: i32, out_$i135: i1, out_$p136: ref, out_$p137: ref, out_$i139: i32, out_$i140: i1, out_$p141: ref, out_$p142: ref, out_$i144: i32, out_$i145: i1, out_$p146: ref, out_$p147: ref, out_$i149: i32, out_$i150: i1, out_$p151: ref, out_$i152: i64, out_$i154: i32, out_$i155: i1, out_$p156: ref, out_$i157: i64, out_$i159: i32, out_$i160: i1, out_$p161: ref, out_$i162: i64, out_$i164: i32, out_$i165: i1, out_$p166: ref, out_$i167: i32, out_$i169: i32, out_$i170: i1, out_$p171: ref, out_$i172: i32, out_$i174: i32, out_$i175: i1, out_$p176: ref, out_$i177: i32, out_$i178: i32, out_$i179: i1, out_$i180: i32, out_$i181: i1, out_$p182: ref, out_$i184: i32, out_$i185: i1, out_$p186: ref, out_$i187: i64, out_$i189: i32, out_$i190: i1, out_$p191: ref, out_$i192: i64, out_$i194: i32, out_$i195: i1, out_$p196: ref, out_$i197: i64, out_$i199: i32, out_$i200: i1, out_$p201: ref, out_$i203: i32, out_$i204: i1, out_$p205: ref, out_$i207: i32, out_$i208: i1, out_$p209: ref, out_$i211: i32, out_$i212: i1, out_$p213: ref, out_$i215: i32, out_$i216: i1, out_$p217: ref, out_$i219: i32, out_$i220: i1, out_$p221: ref, out_$i223: i32, out_$i224: i1, out_$i225: i32, out_$i226: i32, out_$i227: i1, out_$i228: i32, out_$i229: i32, out_$i230: i32, out_$i231: i1, out_$i233: i32, out_$i234: i32, out_$i235: i32, out_$i236: i1, out_$i237: i32, out_$i238: i1, out_$i239: i1, out_$i240: i1, out_$i241: i1, out_$i242: i1, out_$i243: i1, out_$i244: i32, out_$i245: i1, out_$p246: ref, out_$i247: i32, out_$i248: i32, out_$i249: i1, out_$i250: i32, out_$i251: i32, out_$i252: i32, out_$i253: i1, out_$p254: ref, out_$i255: i32, out_$i256: i32, out_$i257: i1, out_$p258: ref, out_$i259: i32, out_$i260: i32, out_$i261: i1, out_$p262: ref, out_$i263: i32, out_$i264: i32, out_$i265: i1, out_$p266: ref, out_$i268: i32, out_$i269: i32, out_$i270: i32, out_$i271: i1, out_$p272: ref, out_$i274: i32, out_$i275: i32, out_$i276: i32, out_$i277: i1, out_$p278: ref, out_$i279: i32, out_$i280: i32, out_$i281: i1, out_$i282: i32, out_$i283: i1, out_$i285: i32, out_$i286: i1, out_$i287: i32, out_$i288: i1, out_$i289: i32, out_$i290: i1, out_$i291: i1, out_$i292: i1, out_$i293: i32, out_$i294: i1, out_$p295: ref, out_$p296: ref, out_$i297: i64, out_$i299: i32, out_$i300: i1, out_$p301: ref, out_$p302: ref, out_$i304: i32, out_$i305: i1, out_$i306: i32, out_$i307: i1, out_$i308: i1, out_$i309: i1, out_$i310: i32, out_$i311: i1, out_$i312: i32, out_$i313: i1, out_$i314: i32, out_$i315: i1, out_$i316: i32, out_$i317: i32, out_$i318: i1, out_$i319: i32, out_$i320: i1, out_$i321: i32, out_$i322: i1, out_$i323: i32, out_$i324: i1, out_$i325: i1, out_$i326: i1, out_$i327: i32, out_$i328: i1, out_$p329: ref, out_$p330: ref, out_$i331: i64, out_$i333: i32, out_$i334: i1, out_$p335: ref, out_$p336: ref, out_vslice_dummy_var_50: i32, out_vslice_dummy_var_51: i32, out_vslice_dummy_var_52: i64, out_vslice_dummy_var_53: i32, out_vslice_dummy_var_54: i32, out_vslice_dummy_var_55: i32, out_vslice_dummy_var_56: i32, out_vslice_dummy_var_57: i16, out_vslice_dummy_var_58: i16, out_vslice_dummy_var_59: i16, out_vslice_dummy_var_60: i32, out_vslice_dummy_var_61: i32, out_vslice_dummy_var_62: i32, out_vslice_dummy_var_63: i32, out_vslice_dummy_var_64: i32, out_vslice_dummy_var_65: i32, out_vslice_dummy_var_66: i64, out_vslice_dummy_var_67: i64, out_vslice_dummy_var_68: i64, out_vslice_dummy_var_69: i32, out_vslice_dummy_var_70: i32, out_vslice_dummy_var_71: i32, out_vslice_dummy_var_72: ref, out_vslice_dummy_var_73: ref, out_vslice_dummy_var_74: ref, out_vslice_dummy_var_75: i32, out_vslice_dummy_var_76: i32, out_vslice_dummy_var_77: i32, out_vslice_dummy_var_78: i32, out_vslice_dummy_var_79: i64, out_vslice_dummy_var_80: i64, out_vslice_dummy_var_81: i64, out_vslice_dummy_var_82: i64);
  modifies $M.53, $M.0, $M.54, $M.30, $M.14, $CurrAddr, $M.61, $M.15, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, assertsPassed, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $M.58, $M.62, $M.55, $M.63, $M.45, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.31, $M.32, $M.33, $M.34, $M.36, $M.37, $M.39, $M.41, $M.43, $M.42, $M.44, $M.64, $M.57, $M.49, $M.51, $M.52, $M.50, $M.46, $M.47, $M.60, $M.59, $M.65, $M.35;


