var $M.0: [ref]i8;

var $M.1: i32;

var $M.2: [ref]i8;

var $M.3: i32;

var $M.4: i32;

var $M.5: ref;

var $M.6: i32;

var $M.7: ref;

var $M.8: i32;

var $M.9: ref;

var $M.10: i32;

var $M.11: ref;

var $M.12: i32;

var $M.13: ref;

var $M.15: [ref]i8;

var $M.16: [ref]i32;

var $M.17: ref;

var $M.18: ref;

var $M.19: [ref]i8;

var $M.20: [ref]i8;

var $M.21: i8;

var $M.22: [ref]i8;

var $M.23: [ref]i8;

var $M.24: [ref]i8;

var $M.25: [ref]i8;

var $M.26: [ref]i8;

var $M.27: i32;

var $M.28: i32;

var $M.29: i32;

var $M.30: i32;

var $M.31: ref;

var $M.32: i32;

var $M.33: i32;

var $M.34: i32;

var $M.35: i32;

var $M.36: ref;

var $M.37: ref;

var $M.38: ref;

var $M.39: ref;

var $M.40: i32;

var $M.41: i32;

var $M.42: i32;

var $M.43: i32;

var $M.44: i32;

var $M.45: i32;

var $M.46: i32;

var $M.47: i32;

var $M.48: i32;

var $M.49: i32;

var $M.50: i32;

var $M.51: [ref]i8;

var $M.52: i32;

var $M.53: i32;

var $M.54: i32;

var $M.58: [ref]i8;

var $M.59: [ref]i8;

var $M.60: [ref]i8;

var $M.61: [ref]i8;

var $M.62: [ref]i8;

var $M.63: [ref]i8;

var $M.64: [ref]i8;

var $M.65: [ref]i8;

var $M.66: [ref]i8;

var $M.67: [ref]i8;

var $M.68: [ref]i16;

var $M.69: [ref]i16;

var $M.70: [ref]i16;

var $M.71: [ref]i16;

var $M.72: [ref]i16;

var $M.73: [ref]i8;

var $M.74: [ref]i8;

var $M.75: [ref]i8;

var $M.76: [ref]i8;

var $M.77: [ref]i8;

var $M.78: [ref]i8;

var $M.79: [ref]i8;

var $M.80: [ref]i64;

var $M.103: [ref]i8;

var $M.104: [ref]i8;

var $M.105: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 500291);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 1028);

const __ksymtab_ftdi_elan_gone_away: ref;

axiom __ksymtab_ftdi_elan_gone_away == $sub.ref(0, 2068);

const {:count 20} __kstrtab_ftdi_elan_gone_away: ref;

axiom __kstrtab_ftdi_elan_gone_away == $sub.ref(0, 3112);

const ldv_mutex_u132_lock_of_usb_ftdi: ref;

axiom ldv_mutex_u132_lock_of_usb_ftdi == $sub.ref(0, 4140);

const ldv_mutex_mutex_of_device: ref;

axiom ldv_mutex_mutex_of_device == $sub.ref(0, 5168);

const ldv_mutex_lock: ref;

axiom ldv_mutex_lock == $sub.ref(0, 6196);

const ldv_mutex_i_mutex_of_inode: ref;

axiom ldv_mutex_i_mutex_of_inode == $sub.ref(0, 7224);

const ldv_mutex_ftdi_module_lock: ref;

axiom ldv_mutex_ftdi_module_lock == $sub.ref(0, 8252);

const {:count 2} ftdi_elan_table: ref;

axiom ftdi_elan_table == $sub.ref(0, 9340);

const ftdi_elan_driver: ref;

axiom ftdi_elan_driver == $sub.ref(0, 10668);

const ftdi_elan_fops: ref;

axiom ftdi_elan_fops == $sub.ref(0, 11916);

const ftdi_elan_jtag_class: ref;

axiom ftdi_elan_jtag_class == $sub.ref(0, 12972);

const ftdi_static_list: ref;

axiom ftdi_static_list == $sub.ref(0, 14012);

const status_queue: ref;

axiom status_queue == $sub.ref(0, 15044);

const distrust_firmware: ref;

axiom distrust_firmware == $sub.ref(0, 16069);

const respond_queue: ref;

axiom respond_queue == $sub.ref(0, 17101);

const {:count 26} __kstrtab_usb_ftdi_elan_edset_flush: ref;

axiom __kstrtab_usb_ftdi_elan_edset_flush == $sub.ref(0, 18151);

const {:count 27} __kstrtab_usb_ftdi_elan_edset_single: ref;

axiom __kstrtab_usb_ftdi_elan_edset_single == $sub.ref(0, 19202);

const {:count 27} __kstrtab_usb_ftdi_elan_edset_output: ref;

axiom __kstrtab_usb_ftdi_elan_edset_output == $sub.ref(0, 20253);

const {:count 26} __kstrtab_usb_ftdi_elan_edset_empty: ref;

axiom __kstrtab_usb_ftdi_elan_edset_empty == $sub.ref(0, 21303);

const {:count 26} __kstrtab_usb_ftdi_elan_edset_input: ref;

axiom __kstrtab_usb_ftdi_elan_edset_input == $sub.ref(0, 22353);

const {:count 26} __kstrtab_usb_ftdi_elan_edset_setup: ref;

axiom __kstrtab_usb_ftdi_elan_edset_setup == $sub.ref(0, 23403);

const {:count 26} __kstrtab_usb_ftdi_elan_read_pcimem: ref;

axiom __kstrtab_usb_ftdi_elan_read_pcimem == $sub.ref(0, 24453);

const {:count 27} __kstrtab_usb_ftdi_elan_write_pcimem: ref;

axiom __kstrtab_usb_ftdi_elan_write_pcimem == $sub.ref(0, 25504);

const command_queue: ref;

axiom command_queue == $sub.ref(0, 26536);

const ftdi_instances: ref;

axiom ftdi_instances == $sub.ref(0, 27564);

const ftdi_module_lock: ref;

axiom ftdi_module_lock == $sub.ref(0, 28748);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 29776);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 30804);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 31832);

const {:count 2} __mod_usb__ftdi_elan_table_device_table: ref;

axiom __mod_usb__ftdi_elan_table_device_table == $sub.ref(0, 32920);

const ldv_work_2_1: ref;

axiom ldv_work_2_1 == $sub.ref(0, 33948);

const ldv_work_struct_3_3: ref;

axiom ldv_work_struct_3_3 == $sub.ref(0, 34980);

const ldv_state_variable_4: ref;

axiom ldv_state_variable_4 == $sub.ref(0, 36008);

const ldv_work_2_3: ref;

axiom ldv_work_2_3 == $sub.ref(0, 37036);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 38064);

const ldv_work_1_0: ref;

axiom ldv_work_1_0 == $sub.ref(0, 39092);

const ldv_work_3_3: ref;

axiom ldv_work_3_3 == $sub.ref(0, 40120);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 41148);

const ldv_work_2_2: ref;

axiom ldv_work_2_2 == $sub.ref(0, 42176);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 43204);

const ldv_work_struct_2_2: ref;

axiom ldv_work_struct_2_2 == $sub.ref(0, 44236);

const ldv_work_struct_1_2: ref;

axiom ldv_work_struct_1_2 == $sub.ref(0, 45268);

const ldv_work_struct_2_0: ref;

axiom ldv_work_struct_2_0 == $sub.ref(0, 46300);

const ldv_work_struct_2_3: ref;

axiom ldv_work_struct_2_3 == $sub.ref(0, 47332);

const ftdi_elan_fops_group2: ref;

axiom ftdi_elan_fops_group2 == $sub.ref(0, 48364);

const ldv_work_3_0: ref;

axiom ldv_work_3_0 == $sub.ref(0, 49392);

const ldv_work_1_2: ref;

axiom ldv_work_1_2 == $sub.ref(0, 50420);

const ldv_work_struct_3_0: ref;

axiom ldv_work_struct_3_0 == $sub.ref(0, 51452);

const ldv_work_3_2: ref;

axiom ldv_work_3_2 == $sub.ref(0, 52480);

const usb_counter: ref;

axiom usb_counter == $sub.ref(0, 53508);

const ldv_work_2_0: ref;

axiom ldv_work_2_0 == $sub.ref(0, 54536);

const ldv_work_1_1: ref;

axiom ldv_work_1_1 == $sub.ref(0, 55564);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 56592);

const ldv_work_3_1: ref;

axiom ldv_work_3_1 == $sub.ref(0, 57620);

const ldv_state_variable_5: ref;

axiom ldv_state_variable_5 == $sub.ref(0, 58648);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 59676);

const ldv_work_struct_3_2: ref;

axiom ldv_work_struct_3_2 == $sub.ref(0, 60708);

const ldv_work_1_3: ref;

axiom ldv_work_1_3 == $sub.ref(0, 61736);

const ldv_work_struct_2_1: ref;

axiom ldv_work_struct_2_1 == $sub.ref(0, 62768);

const ldv_work_struct_1_3: ref;

axiom ldv_work_struct_1_3 == $sub.ref(0, 63800);

const ftdi_elan_fops_group1: ref;

axiom ftdi_elan_fops_group1 == $sub.ref(0, 64832);

const ldv_work_struct_3_1: ref;

axiom ldv_work_struct_3_1 == $sub.ref(0, 65864);

const ftdi_elan_driver_group1: ref;

axiom ftdi_elan_driver_group1 == $sub.ref(0, 66896);

const ldv_work_struct_1_1: ref;

axiom ldv_work_struct_1_1 == $sub.ref(0, 67928);

const ldv_work_struct_1_0: ref;

axiom ldv_work_struct_1_0 == $sub.ref(0, 68960);

const __ksymtab_usb_ftdi_elan_edset_flush: ref;

axiom __ksymtab_usb_ftdi_elan_edset_flush == $sub.ref(0, 70000);

const __ksymtab_usb_ftdi_elan_edset_single: ref;

axiom __ksymtab_usb_ftdi_elan_edset_single == $sub.ref(0, 71040);

const __ksymtab_usb_ftdi_elan_edset_output: ref;

axiom __ksymtab_usb_ftdi_elan_edset_output == $sub.ref(0, 72080);

const __ksymtab_usb_ftdi_elan_edset_empty: ref;

axiom __ksymtab_usb_ftdi_elan_edset_empty == $sub.ref(0, 73120);

const __ksymtab_usb_ftdi_elan_edset_input: ref;

axiom __ksymtab_usb_ftdi_elan_edset_input == $sub.ref(0, 74160);

const __ksymtab_usb_ftdi_elan_edset_setup: ref;

axiom __ksymtab_usb_ftdi_elan_edset_setup == $sub.ref(0, 75200);

const __ksymtab_usb_ftdi_elan_read_pcimem: ref;

axiom __ksymtab_usb_ftdi_elan_read_pcimem == $sub.ref(0, 76240);

const __ksymtab_usb_ftdi_elan_write_pcimem: ref;

axiom __ksymtab_usb_ftdi_elan_write_pcimem == $sub.ref(0, 77280);

const .str: ref;

axiom .str == $sub.ref(0, 78325);

const {:count 17} .str.1: ref;

axiom .str.1 == $sub.ref(0, 79366);

const {:count 9} .str.2: ref;

axiom .str.2 == $sub.ref(0, 80399);

const {:count 20} .str.3: ref;

axiom .str.3 == $sub.ref(0, 81443);

const {:count 6} .str.4: ref;

axiom .str.4 == $sub.ref(0, 82473);

const {:count 4} .str.5: ref;

axiom .str.5 == $sub.ref(0, 83501);

const {:count 13} .str.59: ref;

axiom .str.59 == $sub.ref(0, 84538);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 44} .str.78: ref;

axiom .str.78 == $sub.ref(0, 85606);

const {:count 39} .str.76: ref;

axiom .str.76 == $sub.ref(0, 86669);

const {:count 39} .str.28: ref;

axiom .str.28 == $sub.ref(0, 87732);

const {:count 33} .str.77: ref;

axiom .str.77 == $sub.ref(0, 88789);

const {:count 10} .str.63: ref;

axiom .str.63 == $sub.ref(0, 89823);

const {:count 59} .str.60: ref;

axiom .str.60 == $sub.ref(0, 90906);

const {:count 58} .str.61: ref;

axiom .str.61 == $sub.ref(0, 91988);

const {:count 20} .str.11: ref;

axiom .str.11 == $sub.ref(0, 93032);

const {:count 45} .str.12: ref;

axiom .str.12 == $sub.ref(0, 94101);

const {:count 48} .str.13: ref;

axiom .str.13 == $sub.ref(0, 95173);

const {:count 49} .str.14: ref;

axiom .str.14 == $sub.ref(0, 96246);

const {:count 17} .str.15: ref;

axiom .str.15 == $sub.ref(0, 97287);

const {:count 75} .str.16: ref;

axiom .str.16 == $sub.ref(0, 98386);

const {:count 28} .str.17: ref;

axiom .str.17 == $sub.ref(0, 99438);

const {:count 34} .str.37: ref;

axiom .str.37 == $sub.ref(0, 100496);

const {:count 49} .str.38: ref;

axiom .str.38 == $sub.ref(0, 101569);

const {:count 9} .str.34: ref;

axiom .str.34 == $sub.ref(0, 102602);

const {:count 24} .str.35: ref;

axiom .str.35 == $sub.ref(0, 103650);

const {:count 18} .str.36: ref;

axiom .str.36 == $sub.ref(0, 104692);

const {:count 25} .str.32: ref;

axiom .str.32 == $sub.ref(0, 105741);

const {:count 21} .str.33: ref;

axiom .str.33 == $sub.ref(0, 106786);

const {:count 40} .str.24: ref;

axiom .str.24 == $sub.ref(0, 107850);

const {:count 38} .str.23: ref;

axiom .str.23 == $sub.ref(0, 108912);

const {:count 31} .str.19: ref;

axiom .str.19 == $sub.ref(0, 109967);

const {:count 34} .str.20: ref;

axiom .str.20 == $sub.ref(0, 111025);

const {:count 12} .str.21: ref;

axiom .str.21 == $sub.ref(0, 112061);

const {:count 21} .str.18: ref;

axiom .str.18 == $sub.ref(0, 113106);

const {:count 23} .str.22: ref;

axiom .str.22 == $sub.ref(0, 114153);

const {:count 44} .str.29: ref;

axiom .str.29 == $sub.ref(0, 115221);

const {:count 47} .str.30: ref;

axiom .str.30 == $sub.ref(0, 116292);

const {:count 52} .str.31: ref;

axiom .str.31 == $sub.ref(0, 117368);

const {:count 42} .str.25: ref;

axiom .str.25 == $sub.ref(0, 118434);

const {:count 43} .str.26: ref;

axiom .str.26 == $sub.ref(0, 119501);

const {:count 52} .str.27: ref;

axiom .str.27 == $sub.ref(0, 120577);

const {:count 17} .str.43: ref;

axiom .str.43 == $sub.ref(0, 121618);

const {:count 35} .str.44: ref;

axiom .str.44 == $sub.ref(0, 122677);

const {:count 52} .str.45: ref;

axiom .str.45 == $sub.ref(0, 123753);

const {:count 32} .str.46: ref;

axiom .str.46 == $sub.ref(0, 124809);

const {:count 41} .str.47: ref;

axiom .str.47 == $sub.ref(0, 125874);

const {:count 54} .str.48: ref;

axiom .str.48 == $sub.ref(0, 126952);

const {:count 45} .str.49: ref;

axiom .str.49 == $sub.ref(0, 128021);

const {:count 30} .str.50: ref;

axiom .str.50 == $sub.ref(0, 129075);

const {:count 31} .str.51: ref;

axiom .str.51 == $sub.ref(0, 130130);

const {:count 31} .str.52: ref;

axiom .str.52 == $sub.ref(0, 131185);

const {:count 32} .str.53: ref;

axiom .str.53 == $sub.ref(0, 132241);

const {:count 31} .str.54: ref;

axiom .str.54 == $sub.ref(0, 133296);

const {:count 32} .str.55: ref;

axiom .str.55 == $sub.ref(0, 134352);

const {:count 35} .str.56: ref;

axiom .str.56 == $sub.ref(0, 135411);

const {:count 18} .str.6: ref;

axiom .str.6 == $sub.ref(0, 136453);

const {:count 56} .str.7: ref;

axiom .str.7 == $sub.ref(0, 137533);

const {:count 17} .str.8: ref;

axiom .str.8 == $sub.ref(0, 138574);

const {:count 57} .str.9: ref;

axiom .str.9 == $sub.ref(0, 139655);

const {:count 32} .str.10: ref;

axiom .str.10 == $sub.ref(0, 140711);

const {:count 18} .str.39: ref;

axiom .str.39 == $sub.ref(0, 141753);

const {:count 72} .str.40: ref;

axiom .str.40 == $sub.ref(0, 142849);

const {:count 75} .str.41: ref;

axiom .str.41 == $sub.ref(0, 143948);

const {:count 79} .str.42: ref;

axiom .str.42 == $sub.ref(0, 145051);

const {:count 12} .str.57: ref;

axiom .str.57 == $sub.ref(0, 146087);

const {:count 16} .str.58: ref;

axiom .str.58 == $sub.ref(0, 147127);

const {:count 23} .str.64: ref;

axiom .str.64 == $sub.ref(0, 148174);

const {:count 18} .str.65: ref;

axiom .str.65 == $sub.ref(0, 149216);

const {:count 26} .str.66: ref;

axiom .str.66 == $sub.ref(0, 150266);

const {:count 3} .str.67: ref;

axiom .str.67 == $sub.ref(0, 151293);

const {:count 20} .str.68: ref;

axiom .str.68 == $sub.ref(0, 152337);

const {:count 26} .str.69: ref;

axiom .str.69 == $sub.ref(0, 153387);

const {:count 20} .str.70: ref;

axiom .str.70 == $sub.ref(0, 154431);

const {:count 26} .str.71: ref;

axiom .str.71 == $sub.ref(0, 155481);

const {:count 20} .str.72: ref;

axiom .str.72 == $sub.ref(0, 156525);

const {:count 10} .str.73: ref;

axiom .str.73 == $sub.ref(0, 157559);

const {:count 50} .str.74: ref;

axiom .str.74 == $sub.ref(0, 158633);

const {:count 42} .str.75: ref;

axiom .str.75 == $sub.ref(0, 159699);

const {:count 43} .str.62: ref;

axiom .str.62 == $sub.ref(0, 160766);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 161798);

const {:count 3} .str.1.170: ref;

axiom .str.1.170 == $sub.ref(0, 162825);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 163863);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 164891);

const ftdi_elan_gone_away: ref;

axiom ftdi_elan_gone_away == $sub.ref(0, 165923);

procedure ftdi_elan_gone_away($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.16, $M.19, $M.20, $M.25, $M.23, $M.24, $M.4, $CurrAddr, $M.3, $M.6, $M.8, $M.10, $M.12, $M.22, assertsPassed, $M.7, $M.9, $M.11, $M.13;



implementation ftdi_elan_gone_away($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 5920), 8488));
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 5920), 8488)), $mul.ref(5088, 1));
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $i5 := $add.i32($i4, 1);
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 5920), 8488)), $mul.ref(5088, 1));
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, $i5);
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 0} ftdi_elan_put_kref($p2);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1:
    assume !assertsPassed;
    return;
}



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 166955);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const ftdi_elan_put_kref: ref;

axiom ftdi_elan_put_kref == $sub.ref(0, 167987);

procedure ftdi_elan_put_kref($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.16, $M.19, $M.20, $M.25, $M.23, $M.24, $M.4, $CurrAddr, $M.3, $M.6, $M.8, $M.10, $M.12, $M.22, assertsPassed, $M.7, $M.9, $M.11, $M.13;



implementation ftdi_elan_put_kref($p0: ref)
{
  var $p1: ref;
  var vslice_dummy_var_16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7436, 1));
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1} vslice_dummy_var_16 := kref_put($p1, ftdi_elan_delete);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_4:
    assume !assertsPassed;
    return;
}



const ftdi_elan_delete: ref;

axiom ftdi_elan_delete == $sub.ref(0, 169019);

procedure ftdi_elan_delete($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.3, assertsPassed;



implementation ftdi_elan_delete($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 7428), 8488));
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 7428), 8488)), $mul.ref(5200, 1));
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} dev_warn.ref.ref.ref($p5, .str.1, $p2);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 7428), 8488)), $mul.ref(5200, 1));
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3} usb_put_dev($p7);
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 7428), 8488)), $mul.ref(5084, 1));
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $i10 := $add.i32($i9, 1);
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 7428), 8488)), $mul.ref(5084, 1));
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, $i10);
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4} ldv_mutex_lock_17(ftdi_module_lock);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 7428), 8488)), $mul.ref(0, 1));
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5} list_del_init($p12);
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    $i13 := $M.1;
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    $i14 := $add.i32($i13, $sub.i32(0, 1));
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    $M.1 := $i14;
    call {:si_unique_call 6} {:cexpr "ftdi_instances"} boogie_si_record_i32($i14);
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} ldv_mutex_unlock_18(ftdi_module_lock);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 7428), 8488)), $mul.ref(7400, 1));
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 8} kfree($p16);
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 7428), 8488)), $mul.ref(7400, 1));
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p17, $0.ref);
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  SeqInstr_7:
    assume !assertsPassed;
    return;
}



const kref_put: ref;

axiom kref_put == $sub.ref(0, 170051);

procedure kref_put($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.16, $M.19, $M.20, $M.25, $M.23, $M.24, $M.4, $CurrAddr, $M.3, $M.6, $M.8, $M.10, $M.12, $M.22, assertsPassed, $M.7, $M.9, $M.11, $M.13;



implementation kref_put($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 9} $i2 := kref_sub($p0, 1, $p1);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    call {:si_unique_call 10} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_13:
    assume !assertsPassed;
    return;
}



const kref_sub: ref;

axiom kref_sub == $sub.ref(0, 171083);

procedure kref_sub($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.16, $M.19, $M.20, $M.25, $M.23, $M.24, $M.4, $CurrAddr, $M.3, $M.6, $M.8, $M.10, $M.12, $M.22, assertsPassed, $M.7, $M.9, $M.11, $M.13;



implementation kref_sub($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var vslice_dummy_var_17: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} {:cexpr "kref_sub:arg:count"} boogie_si_record_i32($i1);
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    call {:si_unique_call 12} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i5);
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 14} {:cexpr "tmp"} boogie_si_record_i64($i9);
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i5, 0);
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} vslice_dummy_var_17 := ldv__builtin_expect($i13, 0);
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} $i16 := atomic_sub_and_test($i1, $p15);
    call {:si_unique_call 18} {:cexpr "tmp___0"} boogie_si_record_i32($i16);
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb4:
    assume $i17 == 1;
    call {:si_unique_call 19} devirtbounce($p2, $p0);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    $i18 := 1;
    goto $bb6;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} warn_slowpath_null(.str, 71);
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 172115);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 21} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const warn_slowpath_null: ref;

axiom warn_slowpath_null == $sub.ref(0, 173147);

procedure warn_slowpath_null($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation warn_slowpath_null($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} {:cexpr "warn_slowpath_null:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    return;
}



const atomic_sub_and_test: ref;

axiom atomic_sub_and_test == $sub.ref(0, 174179);

procedure atomic_sub_and_test($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation atomic_sub_and_test($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 24} {:cexpr "atomic_sub_and_test:arg:i"} boogie_si_record_i32($i0);
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 25} devirtbounce.1(0, $p3, $p2, $i0, $p3);
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.2, $p2);
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    $i5 := $sext.i8.i32($i4);
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const dev_warn: ref;

axiom dev_warn == $sub.ref(0, 175211);

procedure dev_warn.ref.ref.ref($p0: ref, $p1: ref, p.2: ref);
  free requires assertsPassed;



implementation dev_warn.ref.ref.ref($p0: ref, $p1: ref, p.2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    return;
}



const usb_put_dev: ref;

axiom usb_put_dev == $sub.ref(0, 176243);

procedure usb_put_dev($p0: ref);
  free requires assertsPassed;



implementation usb_put_dev($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_lock_17: ref;

axiom ldv_mutex_lock_17 == $sub.ref(0, 177275);

procedure ldv_mutex_lock_17($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_lock_17($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} ldv_mutex_lock_ftdi_module_lock($p0);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} mutex_lock($p0);
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_19:
    assume !assertsPassed;
    return;
}



const list_del_init: ref;

axiom list_del_init == $sub.ref(0, 178307);

procedure list_del_init($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation list_del_init($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} __list_del_entry($p0);
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} INIT_LIST_HEAD($p0);
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_unlock_18: ref;

axiom ldv_mutex_unlock_18 == $sub.ref(0, 179339);

procedure ldv_mutex_unlock_18($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_unlock_18($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} ldv_mutex_unlock_ftdi_module_lock($p0);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} mutex_unlock($p0);
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_22:
    assume !assertsPassed;
    return;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 180371);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} free_($p0);
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 181403);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 33} $free($p0);
    return;
}



const ldv_mutex_unlock_ftdi_module_lock: ref;

axiom ldv_mutex_unlock_ftdi_module_lock == $sub.ref(0, 182435);

procedure ldv_mutex_unlock_ftdi_module_lock($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_unlock_ftdi_module_lock($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    $i1 := $M.3;
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 2);
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.3 := 1;
    call {:si_unique_call 35} {:cexpr "ldv_mutex_ftdi_module_lock"} boogie_si_record_i32(1);
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} ldv_error();
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_25:
    assume !assertsPassed;
    return;
}



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 183467);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 184499);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 36} __VERIFIER_error();
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_28:
    assume !assertsPassed;
    return;
}



const __list_del_entry: ref;

axiom __list_del_entry == $sub.ref(0, 185531);

procedure __list_del_entry($p0: ref);
  free requires assertsPassed;



implementation __list_del_entry($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    return;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 186563);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $p0);
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p0);
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_lock_ftdi_module_lock: ref;

axiom ldv_mutex_lock_ftdi_module_lock == $sub.ref(0, 187595);

procedure ldv_mutex_lock_ftdi_module_lock($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_lock_ftdi_module_lock($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    $i1 := $M.3;
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 1);
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.3 := 2;
    call {:si_unique_call 38} {:cexpr "ldv_mutex_ftdi_module_lock"} boogie_si_record_i32(2);
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} ldv_error();
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_31:
    assume !assertsPassed;
    return;
}



const mutex_lock: ref;

axiom mutex_lock == $sub.ref(0, 188627);

procedure mutex_lock($p0: ref);
  free requires assertsPassed;



implementation mutex_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    return;
}



const usb_ftdi_elan_write_pcimem: ref;

axiom usb_ftdi_elan_write_pcimem == $sub.ref(0, 189659);

procedure usb_ftdi_elan_write_pcimem($p0: ref, $i1: i32, $i2: i8, $i3: i32) returns ($r: i32);



const ftdi_elan_write_pcimem: ref;

axiom ftdi_elan_write_pcimem == $sub.ref(0, 190691);

procedure ftdi_elan_write_pcimem($p0: ref, $i1: i32, $i2: i8, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, assertsPassed, $M.7, $M.6, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12;



implementation ftdi_elan_write_pcimem($p0: ref, $i1: i32, $i2: i8, $i3: i32) returns ($r: i32)
{
  var $i4: i32;
  var $i5: i8;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i64;
  var $i22: i64;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $i29: i8;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i32;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} {:cexpr "ftdi_elan_write_pcimem:arg:mem_offset"} boogie_si_record_i32($i1);
    call {:si_unique_call 40} {:cexpr "ftdi_elan_write_pcimem:arg:width"} boogie_si_record_i8($i2);
    call {:si_unique_call 41} {:cexpr "ftdi_elan_write_pcimem:arg:data"} boogie_si_record_i32($i3);
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    $i4 := $sdiv.i32($i1, 4);
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i32.i8($i4);
    call {:si_unique_call 42} {:cexpr "addressofs"} boogie_si_record_i8($i5);
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5084, 1));
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $i8 := $sgt.i32($i7, 0);
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i8 == 1);
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p10, $p11, $i12, $p13, $i14, $i15, $i16, $p41, $i42, $i43 := ftdi_elan_write_pcimem_loop_$bb4($p0, $p6, $p10, $p11, $i12, $p13, $i14, $i15, $i16, $p41, $i42, $i43);
    goto $bb4_last;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} ldv_mutex_lock_53($p10);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(176, 1));
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(180, 1));
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32($i12, $i14);
    call {:si_unique_call 44} {:cexpr "command_size"} boogie_si_record_i32($i15);
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    $i16 := $sle.i32($i15, 31);
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i16 == 1);
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(16, 1));
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} ldv_mutex_unlock_55($p41);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} msleep(100);
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p6);
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $i43 := $sgt.i32($i42, 0);
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i43 == 1);
    goto $bb9_dummy;

  $bb5:
    assume $i43 == 1;
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 19);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  SeqInstr_40:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i16 == 1;
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(184, 1));
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(176, 1));
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i20);
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    $i22 := $and.i64($i21, 31);
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p18, $mul.ref($i22, 24)), $mul.ref(0, 1));
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p24, 7);
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p18, $mul.ref($i22, 24)), $mul.ref(2, 1));
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p25, 4);
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p18, $mul.ref($i22, 24)), $mul.ref(4, 1));
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p26, $i5);
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i2);
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    $i28 := $and.i32($i27, 15);
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i32.i8($i28);
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p18, $mul.ref($i22, 24)), $mul.ref(5, 1));
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p30, $i29);
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p18, $mul.ref($i22, 24)), $mul.ref(12, 1));
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, 4);
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p18, $mul.ref($i22, 24)), $mul.ref(8, 1));
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, $i3);
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p18, $mul.ref($i22, 24)), $mul.ref(8, 1));
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p18, $mul.ref($i22, 24)), $mul.ref(16, 1));
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p35, $p33);
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(176, 1));
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    $i38 := $add.i32($i37, 1);
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(176, 1));
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, $i38);
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} ftdi_elan_kick_command_queue($p0);
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(16, 1));
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} ldv_mutex_unlock_54($p40);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb6;

  SeqInstr_37:
    assume !assertsPassed;
    return;

  SeqInstr_34:
    assume !assertsPassed;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb2;

  $bb9_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(16, 1));
    goto corral_source_split_144;
}



const ldv_mutex_lock_53: ref;

axiom ldv_mutex_lock_53 == $sub.ref(0, 191723);

procedure ldv_mutex_lock_53($p0: ref);
  free requires assertsPassed;
  modifies $M.4, assertsPassed;



implementation ldv_mutex_lock_53($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} ldv_mutex_lock_u132_lock_of_usb_ftdi($p0);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} mutex_lock($p0);
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_43:
    assume !assertsPassed;
    return;
}



const ftdi_elan_kick_command_queue: ref;

axiom ftdi_elan_kick_command_queue == $sub.ref(0, 192755);

procedure ftdi_elan_kick_command_queue($p0: ref);
  free requires assertsPassed;
  modifies $M.7, $M.6, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12;



implementation ftdi_elan_kick_command_queue($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} ftdi_command_queue_work($p0, 0);
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_unlock_54: ref;

axiom ldv_mutex_unlock_54 == $sub.ref(0, 193787);

procedure ldv_mutex_unlock_54($p0: ref);
  free requires assertsPassed;
  modifies $M.4, assertsPassed;



implementation ldv_mutex_unlock_54($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} ldv_mutex_unlock_u132_lock_of_usb_ftdi($p0);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} mutex_unlock($p0);
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_46:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_55: ref;

axiom ldv_mutex_unlock_55 == $sub.ref(0, 194819);

procedure ldv_mutex_unlock_55($p0: ref);
  free requires assertsPassed;
  modifies $M.4, assertsPassed;



implementation ldv_mutex_unlock_55($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} ldv_mutex_unlock_u132_lock_of_usb_ftdi($p0);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} mutex_unlock($p0);
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_49:
    assume !assertsPassed;
    return;
}



const msleep: ref;

axiom msleep == $sub.ref(0, 195851);

procedure msleep($i0: i32);
  free requires assertsPassed;



implementation msleep($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} {:cexpr "msleep:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_unlock_u132_lock_of_usb_ftdi: ref;

axiom ldv_mutex_unlock_u132_lock_of_usb_ftdi == $sub.ref(0, 196883);

procedure ldv_mutex_unlock_u132_lock_of_usb_ftdi($p0: ref);
  free requires assertsPassed;
  modifies $M.4, assertsPassed;



implementation ldv_mutex_unlock_u132_lock_of_usb_ftdi($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $i1 := $M.4;
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 2);
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.4 := 1;
    call {:si_unique_call 58} {:cexpr "ldv_mutex_u132_lock_of_usb_ftdi"} boogie_si_record_i32(1);
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} ldv_error();
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_52:
    assume !assertsPassed;
    return;
}



const ftdi_command_queue_work: ref;

axiom ftdi_command_queue_work == $sub.ref(0, 197915);

procedure ftdi_command_queue_work($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.7, $M.6, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12;



implementation ftdi_command_queue_work($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i8;
  var $i7: i1;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} {:cexpr "ftdi_command_queue_work:arg:delta"} boogie_si_record_i32($i1);
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    $p2 := $M.5;
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5448, 1));
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    $i4 := $zext.i32.i64($i1);
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} $i5 := queue_delayed_work($p2, $p3, $i4);
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i5);
    call {:si_unique_call 61} {:cexpr "tmp"} boogie_si_record_i8($i6);
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7436, 1));
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} kref_get($p8);
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const queue_delayed_work: ref;

axiom queue_delayed_work == $sub.ref(0, 198947);

procedure queue_delayed_work($p0: ref, $p1: ref, $i2: i64) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.7, $M.6, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12;



implementation queue_delayed_work($p0: ref, $p1: ref, $i2: i64) returns ($r: i1)
{
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} {:cexpr "queue_delayed_work:arg:delay"} boogie_si_record_i64($i2);
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} $i3 := ldv_queue_delayed_work_on_6(8192, $p0, $p1, $i2);
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 65} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const kref_get: ref;

axiom kref_get == $sub.ref(0, 199979);

procedure kref_get($p0: ref);
  free requires assertsPassed;



implementation kref_get($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $i18: i1;
  var $i19: i32;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $i23: i1;
  var $i24: i32;
  var $i25: i64;
  var vslice_dummy_var_18: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 66} $i2 := atomic_add_return(1, $p1);
    call {:si_unique_call 67} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    $i3 := $sle.i32($i2, 1);
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    call {:si_unique_call 68} {:cexpr "__ret_warn_once"} boogie_si_record_i32($i4);
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 69} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 70} {:cexpr "tmp___2"} boogie_si_record_i64($i8);
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i4, 0);
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i32($i23);
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 77} vslice_dummy_var_18 := ldv__builtin_expect($i25, 0);
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1(1);
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    $i11 := $xor.i1($i10, 1);
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    call {:si_unique_call 71} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i12);
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 72} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 73} {:cexpr "tmp___0"} boogie_si_record_i64($i16);
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i12, 0);
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i32($i18);
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 75} $i21 := ldv__builtin_expect($i20, 0);
    call {:si_unique_call 76} {:cexpr "tmp___1"} boogie_si_record_i64($i21);
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i22 == 1;
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i17 == 1;
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 74} warn_slowpath_null(.str, 47);
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const atomic_add_return: ref;

axiom atomic_add_return == $sub.ref(0, 201011);

procedure atomic_add_return($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_add_return($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 78} {:cexpr "atomic_add_return:arg:i"} boogie_si_record_i32($i0);
    call {:si_unique_call 79} {:cexpr "atomic_add_return:arg:__ret"} boogie_si_record_i32($i0);
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 80} $i3 := devirtbounce.2(0, $p2, $i0, $p2);
    call {:si_unique_call 81} {:cexpr "__ret"} boogie_si_record_i32($i3);
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, $i0);
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ldv_queue_delayed_work_on_6: ref;

axiom ldv_queue_delayed_work_on_6 == $sub.ref(0, 202043);

procedure ldv_queue_delayed_work_on_6($i0: i32, $p1: ref, $p2: ref, $i3: i64) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.7, $M.6, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12;



implementation ldv_queue_delayed_work_on_6($i0: i32, $p1: ref, $p2: ref, $i3: i64) returns ($r: i1)
{
  var $i4: i1;
  var $i5: i8;
  var $i6: i1;
  var $i7: i8;
  var $p8: ref;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 82} {:cexpr "ldv_queue_delayed_work_on_6:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    call {:si_unique_call 83} {:cexpr "ldv_queue_delayed_work_on_6:arg:ldv_func_arg4"} boogie_si_record_i64($i3);
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 84} $i4 := queue_delayed_work_on($i0, $p1, $p2, $i3);
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i4);
    call {:si_unique_call 85} {:cexpr "tmp"} boogie_si_record_i8($i5);
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i5);
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i6);
    call {:si_unique_call 86} {:cexpr "ldv_func_res"} boogie_si_record_i8($i7);
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 87} activate_work_1($p8, 2);
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i7);
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const queue_delayed_work_on: ref;

axiom queue_delayed_work_on == $sub.ref(0, 203075);

procedure queue_delayed_work_on($i0: i32, $p1: ref, $p2: ref, $i3: i64) returns ($r: i1);
  free requires assertsPassed;



implementation queue_delayed_work_on($i0: i32, $p1: ref, $p2: ref, $i3: i64) returns ($r: i1)
{
  var $i4: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 88} {:cexpr "queue_delayed_work_on:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 89} {:cexpr "queue_delayed_work_on:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 1} true;
    call {:si_unique_call 90} $i4 := __VERIFIER_nondet_bool();
    call {:si_unique_call 91} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i4);
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const activate_work_1: ref;

axiom activate_work_1 == $sub.ref(0, 204107);

procedure activate_work_1($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.7, $M.6, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12;



implementation activate_work_1($p0: ref, $i1: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 92} {:cexpr "activate_work_1:arg:state"} boogie_si_record_i32($i1);
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    $i2 := $M.6;
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i4 := $M.8;
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := $M.10;
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i8 := $M.12;
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    $M.13 := $p0;
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    $M.12 := $i1;
    call {:si_unique_call 96} {:cexpr "ldv_work_1_3"} boogie_si_record_i32($i1);
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    $M.11 := $p0;
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    $M.10 := $i1;
    call {:si_unique_call 95} {:cexpr "ldv_work_1_2"} boogie_si_record_i32($i1);
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    $M.9 := $p0;
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $M.8 := $i1;
    call {:si_unique_call 94} {:cexpr "ldv_work_1_1"} boogie_si_record_i32($i1);
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    $M.7 := $p0;
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    $M.6 := $i1;
    call {:si_unique_call 93} {:cexpr "ldv_work_1_0"} boogie_si_record_i32($i1);
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_mutex_lock_u132_lock_of_usb_ftdi: ref;

axiom ldv_mutex_lock_u132_lock_of_usb_ftdi == $sub.ref(0, 205139);

procedure ldv_mutex_lock_u132_lock_of_usb_ftdi($p0: ref);
  free requires assertsPassed;
  modifies $M.4, assertsPassed;



implementation ldv_mutex_lock_u132_lock_of_usb_ftdi($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    $i1 := $M.4;
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 1);
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.4 := 2;
    call {:si_unique_call 98} {:cexpr "ldv_mutex_u132_lock_of_usb_ftdi"} boogie_si_record_i32(2);
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 97} ldv_error();
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_55:
    assume !assertsPassed;
    return;
}



const usb_ftdi_elan_read_pcimem: ref;

axiom usb_ftdi_elan_read_pcimem == $sub.ref(0, 206171);

procedure usb_ftdi_elan_read_pcimem($p0: ref, $i1: i32, $i2: i8, $p3: ref) returns ($r: i32);



const ftdi_elan_read_pcimem: ref;

axiom ftdi_elan_read_pcimem == $sub.ref(0, 207203);

procedure ftdi_elan_read_pcimem($p0: ref, $i1: i32, $i2: i8, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $CurrAddr, assertsPassed, $M.7, $M.6, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12;



implementation ftdi_elan_read_pcimem($p0: ref, $i1: i32, $i2: i8, $p3: ref) returns ($r: i32)
{
  var $p4: ref;
  var $i5: i32;
  var $i6: i8;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i64;
  var $i29: i64;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i64;
  var $i36: i64;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $i45: i32;
  var $i46: i8;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $i55: i32;
  var $p56: ref;
  var $p57: ref;
  var $i58: i32;
  var $i59: i32;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $p64: ref;
  var $i65: i32;
  var $i66: i1;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 99} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 100} {:cexpr "ftdi_elan_read_pcimem:arg:mem_offset"} boogie_si_record_i32($i1);
    call {:si_unique_call 101} {:cexpr "ftdi_elan_read_pcimem:arg:width"} boogie_si_record_i8($i2);
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    $i5 := $sdiv.i32($i1, 4);
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i8($i5);
    call {:si_unique_call 102} {:cexpr "addressofs"} boogie_si_record_i8($i6);
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5084, 1));
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $i9 := $sgt.i32($i8, 0);
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i9 == 1);
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p11, $p12, $i13, $p14, $i15, $i16, $p17, $i18, $p19, $i20, $i21, $i22, $i23, $p64, $i65, $i66 := ftdi_elan_read_pcimem_loop_$bb4($p0, $p7, $p11, $p12, $i13, $p14, $i15, $i16, $p17, $i18, $p19, $i20, $i21, $i22, $i23, $p64, $i65, $i66);
    goto $bb4_last;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 103} ldv_mutex_lock_62($p11);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(176, 1));
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(180, 1));
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32($i13, $i15);
    call {:si_unique_call 104} {:cexpr "command_size"} boogie_si_record_i32($i16);
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(952, 1));
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(956, 1));
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32($i18, $i20);
    call {:si_unique_call 105} {:cexpr "respond_size"} boogie_si_record_i32($i21);
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $i22 := $sle.i32($i16, 31);
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(16, 1));
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 106} ldv_mutex_unlock_64($p64);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 107} msleep(100);
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, $p7);
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    $i66 := $sgt.i32($i65, 0);
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i66 == 1);
    goto $bb12_dummy;

  $bb5:
    assume $i66 == 1;
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 19);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  SeqInstr_61:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i22 == 1;
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    $i23 := $sle.i32($i21, 31);
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb9;

  $bb10:
    assume $i23 == 1;
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(184, 1));
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(176, 1));
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i27);
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    $i29 := $and.i64($i28, 31);
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(960, 1));
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(952, 1));
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64($i34);
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    $i36 := $and.i64($i35, 31);
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, $sub.i32(0, 19));
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p32, $mul.ref($i36, 120)), $mul.ref(16, 1));
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p38, $p4);
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p25, $mul.ref($i29, 24)), $mul.ref(0, 1));
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p39, 6);
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p32, $mul.ref($i36, 120)), $mul.ref(0, 1));
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p40, 6);
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p25, $mul.ref($i29, 24)), $mul.ref(2, 1));
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p41, 4);
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p25, $mul.ref($i29, 24)), $mul.ref(4, 1));
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p42, $i6);
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p32, $mul.ref($i36, 120)), $mul.ref(1, 1));
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p43, $i6);
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32($i2);
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    $i45 := $and.i32($i44, 15);
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i32.i8($i45);
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p25, $mul.ref($i29, 24)), $mul.ref(5, 1));
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p47, $i46);
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p25, $mul.ref($i29, 24)), $mul.ref(12, 1));
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p48, 0);
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p25, $mul.ref($i29, 24)), $mul.ref(8, 1));
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p49, 0);
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p25, $mul.ref($i29, 24)), $mul.ref(16, 1));
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p50, $0.ref);
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p32, $mul.ref($i36, 120)), $mul.ref(8, 1));
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p51, $p3);
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p32, $mul.ref($i36, 120)), $mul.ref(24, 1));
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 108} init_completion($p52);
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(176, 1));
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    $i55 := $add.i32($i54, 1);
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(176, 1));
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p56, $i55);
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(952, 1));
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.0, $p57);
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    $i59 := $add.i32($i58, 1);
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(952, 1));
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p60, $i59);
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 109} ftdi_elan_kick_command_queue($p0);
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(16, 1));
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 110} ldv_mutex_unlock_63($p61);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p32, $mul.ref($i36, 120)), $mul.ref(24, 1));
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 111} wait_for_completion($p62);
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p4);
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    $i10 := $i63;
    goto $bb6;

  SeqInstr_64:
    assume !assertsPassed;
    return;

  SeqInstr_58:
    assume !assertsPassed;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb2;

  $bb12_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(16, 1));
    goto corral_source_split_344;
}



const ldv_mutex_lock_62: ref;

axiom ldv_mutex_lock_62 == $sub.ref(0, 208235);

procedure ldv_mutex_lock_62($p0: ref);
  free requires assertsPassed;
  modifies $M.4, assertsPassed;



implementation ldv_mutex_lock_62($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 112} ldv_mutex_lock_u132_lock_of_usb_ftdi($p0);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} mutex_lock($p0);
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_67:
    assume !assertsPassed;
    return;
}



const init_completion: ref;

axiom init_completion == $sub.ref(0, 209267);

procedure init_completion($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation init_completion($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 114} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 0);
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(8, 1));
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 115} __init_waitqueue_head($p3, .str.2, $p1);
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_unlock_63: ref;

axiom ldv_mutex_unlock_63 == $sub.ref(0, 210299);

procedure ldv_mutex_unlock_63($p0: ref);
  free requires assertsPassed;
  modifies $M.4, assertsPassed;



implementation ldv_mutex_unlock_63($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} ldv_mutex_unlock_u132_lock_of_usb_ftdi($p0);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 117} mutex_unlock($p0);
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_70:
    assume !assertsPassed;
    return;
}



const wait_for_completion: ref;

axiom wait_for_completion == $sub.ref(0, 211331);

procedure wait_for_completion($p0: ref);
  free requires assertsPassed;



implementation wait_for_completion($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_unlock_64: ref;

axiom ldv_mutex_unlock_64 == $sub.ref(0, 212363);

procedure ldv_mutex_unlock_64($p0: ref);
  free requires assertsPassed;
  modifies $M.4, assertsPassed;



implementation ldv_mutex_unlock_64($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 118} ldv_mutex_unlock_u132_lock_of_usb_ftdi($p0);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 119} mutex_unlock($p0);
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_73:
    assume !assertsPassed;
    return;
}



const __init_waitqueue_head: ref;

axiom __init_waitqueue_head == $sub.ref(0, 213395);

procedure __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    return;
}



const usb_ftdi_elan_edset_setup: ref;

axiom usb_ftdi_elan_edset_setup == $sub.ref(0, 214427);

procedure usb_ftdi_elan_edset_setup($p0: ref, $i1: i8, $p2: ref, $p3: ref, $i4: i8, $i5: i8, $i6: i8, $p7: ref) returns ($r: i32);



const ftdi_elan_edset_setup: ref;

axiom ftdi_elan_edset_setup == $sub.ref(0, 215459);

procedure ftdi_elan_edset_setup($p0: ref, $i1: i8, $p2: ref, $p3: ref, $i4: i8, $i5: i8, $i6: i8, $p7: ref) returns ($r: i32);



const ldv_mutex_lock_65: ref;

axiom ldv_mutex_lock_65 == $sub.ref(0, 216491);

procedure ldv_mutex_lock_65($p0: ref);



const usb_maxpacket: ref;

axiom usb_maxpacket == $sub.ref(0, 217523);

procedure usb_maxpacket($p0: ref, $i1: i32, $i2: i32) returns ($r: i16);



const ldv_mutex_unlock_66: ref;

axiom ldv_mutex_unlock_66 == $sub.ref(0, 218555);

procedure ldv_mutex_unlock_66($p0: ref);



const ldv_mutex_unlock_67: ref;

axiom ldv_mutex_unlock_67 == $sub.ref(0, 219587);

procedure ldv_mutex_unlock_67($p0: ref);



const usb_endpoint_maxp: ref;

axiom usb_endpoint_maxp == $sub.ref(0, 220619);

procedure usb_endpoint_maxp($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_maxp($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i16;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(4, 1));
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.0, $p1);
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i2);
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const usb_ftdi_elan_edset_input: ref;

axiom usb_ftdi_elan_edset_input == $sub.ref(0, 221651);

procedure usb_ftdi_elan_edset_input($p0: ref, $i1: i8, $p2: ref, $p3: ref, $i4: i8, $i5: i8, $i6: i8, $p7: ref) returns ($r: i32);



const ftdi_elan_edset_input: ref;

axiom ftdi_elan_edset_input == $sub.ref(0, 222683);

procedure ftdi_elan_edset_input($p0: ref, $i1: i8, $p2: ref, $p3: ref, $i4: i8, $i5: i8, $i6: i8, $p7: ref) returns ($r: i32);



const ldv_mutex_lock_68: ref;

axiom ldv_mutex_lock_68 == $sub.ref(0, 223715);

procedure ldv_mutex_lock_68($p0: ref);



const ldv_mutex_unlock_69: ref;

axiom ldv_mutex_unlock_69 == $sub.ref(0, 224747);

procedure ldv_mutex_unlock_69($p0: ref);



const ldv_mutex_unlock_70: ref;

axiom ldv_mutex_unlock_70 == $sub.ref(0, 225779);

procedure ldv_mutex_unlock_70($p0: ref);



const usb_ftdi_elan_edset_empty: ref;

axiom usb_ftdi_elan_edset_empty == $sub.ref(0, 226811);

procedure usb_ftdi_elan_edset_empty($p0: ref, $i1: i8, $p2: ref, $p3: ref, $i4: i8, $i5: i8, $i6: i8, $p7: ref) returns ($r: i32);



const ftdi_elan_edset_empty: ref;

axiom ftdi_elan_edset_empty == $sub.ref(0, 227843);

procedure ftdi_elan_edset_empty($p0: ref, $i1: i8, $p2: ref, $p3: ref, $i4: i8, $i5: i8, $i6: i8, $p7: ref) returns ($r: i32);



const ldv_mutex_lock_71: ref;

axiom ldv_mutex_lock_71 == $sub.ref(0, 228875);

procedure ldv_mutex_lock_71($p0: ref);



const ldv_mutex_unlock_72: ref;

axiom ldv_mutex_unlock_72 == $sub.ref(0, 229907);

procedure ldv_mutex_unlock_72($p0: ref);



const ldv_mutex_unlock_73: ref;

axiom ldv_mutex_unlock_73 == $sub.ref(0, 230939);

procedure ldv_mutex_unlock_73($p0: ref);



const usb_ftdi_elan_edset_output: ref;

axiom usb_ftdi_elan_edset_output == $sub.ref(0, 231971);

procedure usb_ftdi_elan_edset_output($p0: ref, $i1: i8, $p2: ref, $p3: ref, $i4: i8, $i5: i8, $i6: i8, $p7: ref) returns ($r: i32);



const ftdi_elan_edset_output: ref;

axiom ftdi_elan_edset_output == $sub.ref(0, 233003);

procedure ftdi_elan_edset_output($p0: ref, $i1: i8, $p2: ref, $p3: ref, $i4: i8, $i5: i8, $i6: i8, $p7: ref) returns ($r: i32);



const ldv_mutex_lock_74: ref;

axiom ldv_mutex_lock_74 == $sub.ref(0, 234035);

procedure ldv_mutex_lock_74($p0: ref);



const sprintf: ref;

axiom sprintf == $sub.ref(0, 235067);

procedure sprintf.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);



procedure sprintf.ref.ref($p0: ref, $p1: ref) returns ($r: i32);



const ldv_mutex_unlock_75: ref;

axiom ldv_mutex_unlock_75 == $sub.ref(0, 236099);

procedure ldv_mutex_unlock_75($p0: ref);



const ldv_mutex_unlock_76: ref;

axiom ldv_mutex_unlock_76 == $sub.ref(0, 237131);

procedure ldv_mutex_unlock_76($p0: ref);



const usb_ftdi_elan_edset_single: ref;

axiom usb_ftdi_elan_edset_single == $sub.ref(0, 238163);

procedure usb_ftdi_elan_edset_single($p0: ref, $i1: i8, $p2: ref, $p3: ref, $i4: i8, $i5: i8, $i6: i8, $p7: ref) returns ($r: i32);



const ftdi_elan_edset_single: ref;

axiom ftdi_elan_edset_single == $sub.ref(0, 239195);

procedure ftdi_elan_edset_single($p0: ref, $i1: i8, $p2: ref, $p3: ref, $i4: i8, $i5: i8, $i6: i8, $p7: ref) returns ($r: i32);



const ldv_mutex_lock_77: ref;

axiom ldv_mutex_lock_77 == $sub.ref(0, 240227);

procedure ldv_mutex_lock_77($p0: ref);



const ldv_mutex_unlock_78: ref;

axiom ldv_mutex_unlock_78 == $sub.ref(0, 241259);

procedure ldv_mutex_unlock_78($p0: ref);



const ldv_mutex_unlock_79: ref;

axiom ldv_mutex_unlock_79 == $sub.ref(0, 242291);

procedure ldv_mutex_unlock_79($p0: ref);



const usb_ftdi_elan_edset_flush: ref;

axiom usb_ftdi_elan_edset_flush == $sub.ref(0, 243323);

procedure usb_ftdi_elan_edset_flush($p0: ref, $i1: i8, $p2: ref) returns ($r: i32);



const ftdi_elan_edset_flush: ref;

axiom ftdi_elan_edset_flush == $sub.ref(0, 244355);

procedure ftdi_elan_edset_flush($p0: ref, $i1: i8, $p2: ref) returns ($r: i32);



const ldv_mutex_lock_80: ref;

axiom ldv_mutex_lock_80 == $sub.ref(0, 245387);

procedure ldv_mutex_lock_80($p0: ref);



const ldv_mutex_unlock_81: ref;

axiom ldv_mutex_unlock_81 == $sub.ref(0, 246419);

procedure ldv_mutex_unlock_81($p0: ref);



const ldv_mutex_unlock_82: ref;

axiom ldv_mutex_unlock_82 == $sub.ref(0, 247451);

procedure ldv_mutex_unlock_82($p0: ref);



const ldv_mutex_lock_83: ref;

axiom ldv_mutex_lock_83 == $sub.ref(0, 248483);

procedure ldv_mutex_lock_83($p0: ref);



const ldv_mutex_unlock_84: ref;

axiom ldv_mutex_unlock_84 == $sub.ref(0, 249515);

procedure ldv_mutex_unlock_84($p0: ref);



const no_llseek: ref;

axiom no_llseek == $sub.ref(0, 250547);

procedure no_llseek($p0: ref, $i1: i64, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation no_llseek($p0: ref, $i1: i64, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 120} {:cexpr "no_llseek:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 121} {:cexpr "no_llseek:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 1} true;
    call {:si_unique_call 122} $i3 := __VERIFIER_nondet_long();
    call {:si_unique_call 123} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i3);
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ftdi_elan_read: ref;

axiom ftdi_elan_read == $sub.ref(0, 251579);

procedure ftdi_elan_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.15, $M.0, $M.16, $CurrAddr;



implementation ftdi_elan_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $i18: i64;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $i28: i32;
  var $i29: i32;
  var $i24: i32;
  var $i25: i32;
  var $i30: i64;
  var $i31: i1;
  var $p33: ref;
  var $i34: i64;
  var $i35: i64;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $i44: i64;
  var $p45: ref;
  var $i46: i1;
  var $i47: i8;
  var $i48: i32;
  var $i49: i32;
  var $i50: i32;
  var $i51: i64;
  var $p52: ref;
  var $i54: i1;
  var $i56: i32;
  var $i57: i64;
  var $p58: ref;
  var $p55: ref;
  var $p53: ref;
  var $p59: ref;
  var $i60: i64;
  var $i61: i1;
  var $i62: i32;
  var $i32: i32;
  var $i63: i64;
  var $i26: i32;
  var $i27: i32;
  var $i64: i1;
  var $i68: i32;
  var $i69: i32;
  var $i66: i32;
  var $i67: i32;
  var $i72: i32;
  var $i71: i32;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i8;
  var $i78: i32;
  var $i79: i32;
  var $p80: ref;
  var $p81: ref;
  var $i82: i32;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $i86: i64;
  var $i87: i32;
  var $i88: i32;
  var $i89: i32;
  var $i90: i1;
  var $i91: i32;
  var $i92: i32;
  var $i93: i32;
  var $i94: i32;
  var $i95: i64;
  var $p96: ref;
  var $p97: ref;
  var $i98: i64;
  var $i99: i1;
  var $i100: i1;
  var $i103: i32;
  var $i104: i1;
  var $i105: i32;
  var $i106: i32;
  var $i107: i1;
  var $i108: i64;
  var $i109: i64;
  var $i101: i32;
  var $i102: i32;
  var $i110: i1;
  var $i112: i32;
  var $i113: i1;
  var $i114: i32;
  var $i115: i64;
  var $i111: i32;
  var $i116: i64;
  var $i65: i32;
  var $i70: i32;
  var $i117: i32;
  var $i73: i32;
  var $i118: i32;
  var $i119: i64;
  var $i13: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 124} $p4 := $alloc($mul.ref(94, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 125} $p5 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 126} {:cexpr "ftdi_elan_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 8488)), $mul.ref(5084, 1));
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    $i12 := $sgt.i32($i11, 0);
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 94)), $mul.ref(0, 1));
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p14, 0);
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    $i15, $p16, $i17, $i18, $p19, $i20 := 0, $p4, 10, $i2, $p1, 5;
    goto $bb5;

  $bb5:
    call $i15, $p16, $i17, $i18, $p19, $i20, $p21, $i22, $i23, $i28, $i29, $i24, $i25, $i30, $i31, $p33, $i34, $i35, $p36, $p37, $p38, $p39, $i40, $p41, $p42, $i43, $i44, $p45, $i46, $i47, $i48, $i49, $i50, $i51, $p52, $i54, $i56, $i57, $p58, $p55, $p53, $p59, $i60, $i61, $i62, $i32, $i26, $i27, $i64, $i68, $i69, $i66, $i67, $i72, $i71, $p74, $p75, $p76, $i77, $i78, $i79, $p80, $p81, $i82, $p83, $p84, $p85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $p96, $p97, $i98, $i99, $i100, $i103, $i104, $i105, $i106, $i101, $i102, $i110, $i112, $i113, $i114, $i111, $i65, $i70, $i73 := ftdi_elan_read_loop_$bb5($p5, $p9, $i15, $p16, $i17, $i18, $p19, $i20, $p21, $i22, $i23, $i28, $i29, $i24, $i25, $i30, $i31, $p33, $i34, $i35, $p36, $p37, $p38, $p39, $i40, $p41, $p42, $i43, $i44, $p45, $i46, $i47, $i48, $i49, $i50, $i51, $p52, $i54, $i56, $i57, $p58, $p55, $p53, $p59, $i60, $i61, $i62, $i32, $i26, $i27, $i64, $i68, $i69, $i66, $i67, $i72, $i71, $p74, $p75, $p76, $i77, $i78, $i79, $p80, $p81, $i82, $p83, $p84, $p85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $p96, $p97, $i98, $i99, $i100, $i103, $i104, $i105, $i106, $i101, $i102, $i110, $i112, $i113, $i114, $i111, $i65, $i70, $i73);
    goto $bb5_last;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p9, $mul.ref(0, 8488)), $mul.ref(7424, 1));
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    $i22 := $load.i64($M.0, $p21);
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    $i24, $i25 := $i17, $i20;
    assume true;
    goto $bb6, $bb8;

  $bb8:
    assume !($i23 == 1);
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    $i26, $i27 := $i20, $i17;
    goto $bb9;

  $bb9:
    call $i28, $i29, $i26, $i27, $i64, $i68, $i69, $i66, $i67, $i72, $i71, $p74, $p75, $p76, $i77, $i78, $i79, $p80, $p81, $i82, $p83, $p84, $p85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $p96, $p97, $i98, $i99, $i100, $i103, $i104, $i105, $i106, $i101, $i102, $i110, $i112, $i113, $i114, $i111, $i65, $i70, $i73 := ftdi_elan_read_loop_$bb9($p5, $p9, $i15, $i18, $p21, $i28, $i29, $i26, $i27, $i64, $i68, $i69, $i66, $i67, $i72, $i71, $p74, $p75, $p76, $i77, $i78, $i79, $p80, $p81, $i82, $p83, $p84, $p85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $p96, $p97, $i98, $i99, $i100, $i103, $i104, $i105, $i106, $i101, $i102, $i110, $i112, $i113, $i114, $i111, $i65, $i70, $i73);
    goto $bb9_last;

  $bb21:
    assume {:verifier.code 0} true;
    $i64 := $ne.i64($i18, 0);
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $i65 := $i15;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    $i117 := $i65;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $i118 := $i117;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    $i119 := $sext.i32.i64($i118);
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    $i13 := $i119;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb22:
    assume $i64 == 1;
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    $i66, $i67 := $i26, $i27;
    goto $bb24;

  $bb24:
    call $i68, $i69, $i66, $i67, $i72, $i71, $p74, $p75, $p76, $i77, $i78, $i79, $p80, $p81, $i82, $p83, $p84, $p85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i100, $i103, $i104, $i105, $i106, $i101, $i102, $i110, $i112, $i113, $i114, $i111, $i70, $i73 := ftdi_elan_read_loop_$bb24($p5, $p9, $i15, $i64, $i68, $i69, $i66, $i67, $i72, $i71, $p74, $p75, $p76, $i77, $i78, $i79, $p80, $p81, $i82, $p83, $p84, $p85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i100, $i103, $i104, $i105, $i106, $i101, $i102, $i110, $i112, $i113, $i114, $i111, $i70, $i73);
    goto $bb24_last;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    $i71 := $i66;
    goto $bb28;

  $bb28:
    call $i72, $i71, $p74, $p75, $p76, $i77, $i78, $i79, $p80, $p81, $i82, $p83, $p84, $p85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i100, $i103, $i104, $i105, $i106, $i101, $i102, $i73 := ftdi_elan_read_loop_$bb28($p5, $p9, $i15, $i64, $i67, $i72, $i71, $p74, $p75, $p76, $i77, $i78, $i79, $p80, $p81, $i82, $p83, $p84, $p85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i100, $i103, $i104, $i105, $i106, $i101, $i102, $i73);
    goto $bb28_last;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    $M.16 := $store.i32($M.16, $p5, 0);
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p9, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.0, $p74);
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p9, $mul.ref(0, 8488)), $mul.ref(7432, 1));
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    $i77 := $load.i8($M.0, $p76);
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $i78 := $zext.i8.i32($i77);
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} $i79 := __create_pipe($p75, $i78);
    call {:si_unique_call 136} {:cexpr "tmp___4"} boogie_si_record_i32($i79);
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p9, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.0, $p80);
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    $i82 := $or.i32($i79, $sub.i32(0, 1073741696));
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p9, $mul.ref(0, 8488)), $mul.ref(7400, 1));
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.0, $p83);
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p9, $mul.ref(0, 8488)), $mul.ref(7408, 1));
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    $i86 := $load.i64($M.0, $p85);
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $i87 := $trunc.i64.i32($i86);
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} $i88 := usb_bulk_msg($p81, $i82, $p84, $i87, $p5, 50);
    call {:si_unique_call 138} {:cexpr "tmp___5"} boogie_si_record_i32($i88);
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.16, $p5);
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $i90 := $sgt.i32($i89, 2);
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    $i91, $i92 := $i67, $i71;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i90 == 1);
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    $i100 := $eq.i32($i88, $sub.i32(0, 110));
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    $i101, $i102 := $i71, $i88;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    $i110 := $eq.i32($i102, 0);
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    $i111 := $i102;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $i116 := $sext.i32.i64($i111);
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $i13 := $i116;
    goto $bb3;

  $bb40:
    assume $i110 == 1;
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $i112 := $sub.i32($i67, 1);
    call {:si_unique_call 140} {:cexpr "retry_on_empty"} boogie_si_record_i32($i112);
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    $i113 := $sgt.i32($i67, 0);
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    $i68, $i69, $i114 := $i112, $i101, $i15;
    assume true;
    goto $bb25, $bb42;

  $bb42:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    $i115 := $sext.i32.i64($i114);
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    $i13 := $i115;
    goto $bb3;

  $bb25:
    assume $i113 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    $i70 := $i15;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    $i117 := $i70;
    goto $bb43;

  $bb26:
    assume $i64 == 1;
    assume {:verifier.code 0} true;
    $i66, $i67 := $i69, $i68;
    goto $bb26_dummy;

  $bb35:
    assume $i100 == 1;
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    $i103 := $sub.i32($i71, 1);
    call {:si_unique_call 139} {:cexpr "retry_on_timeout"} boogie_si_record_i32($i103);
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    $i104 := $sgt.i32($i71, 0);
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    $i72, $i105, $i106 := $i103, $i15, $i88;
    assume true;
    goto $bb29, $bb37;

  $bb37:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    $i107 := $sgt.i32($i105, 0);
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i107 == 1);
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $i109 := $sext.i32.i64($i106);
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    $i13 := $i109;
    goto $bb3;

  $bb38:
    assume $i107 == 1;
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    $i108 := $sext.i32.i64($i105);
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    $i13 := $i108;
    goto $bb3;

  $bb29:
    assume $i104 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    $i73 := $i15;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    $i118 := $i73;
    goto $bb44;

  $bb30:
    assume $i64 == 1;
    assume {:verifier.code 0} true;
    $i71 := $i72;
    goto $bb30_dummy;

  $bb32:
    assume $i90 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    $i93 := $load.i32($M.16, $p5);
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $i94 := $add.i32($i93, $sub.i32(0, 2));
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $i95 := $sext.i32.i64($i94);
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p9, $mul.ref(0, 8488)), $mul.ref(7424, 1));
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p96, $i95);
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p9, $mul.ref(0, 8488)), $mul.ref(7416, 1));
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p97, 1);
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    $i98 := $load.i64($M.0, $p21);
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    $i99 := $ne.i64($i98, 0);
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    $i28, $i29 := $i91, $i92;
    assume true;
    goto $bb10, $bb34;

  $bb34:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    $i26, $i27 := $i92, $i91;
    goto $bb34_dummy;

  $bb10:
    assume $i99 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    $i24, $i25 := $i28, $i29;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $i30 := $sub.i64($i18, 1);
    call {:si_unique_call 127} {:cexpr "count"} boogie_si_record_i64($i30);
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i18, 0);
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    $i32 := $i15;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    $i63 := $sext.i32.i64($i32);
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    $i13 := $i63;
    goto $bb3;

  $bb11:
    assume $i31 == 1;
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p9, $mul.ref(0, 8488)), $mul.ref(7416, 1));
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    $i34 := $load.i64($M.0, $p33);
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    $i35 := $add.i64($i34, 1);
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p9, $mul.ref(0, 8488)), $mul.ref(7416, 1));
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p36, $i35);
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p9, $mul.ref(0, 8488)), $mul.ref(7400, 1));
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p9, $mul.ref(0, 8488)), $mul.ref(7416, 1));
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $i40 := $load.i64($M.0, $p39);
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($p38, $mul.ref($i40, 1));
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p9, $mul.ref(0, 8488)), $mul.ref(7424, 1));
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    $i43 := $load.i64($M.0, $p42);
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    $i44 := $sub.i64($i43, 1);
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p9, $mul.ref(0, 8488)), $mul.ref(7424, 1));
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p45, $i44);
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    $i46 := $slt.i32($i15, 31);
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i46 == 1);
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    $i54 := $sgt.i32($i15, 31);
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i54 == 1);
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 132} $i56 := sprintf.ref.ref($p16, .str.5);
    call {:si_unique_call 133} {:cexpr "tmp___0"} boogie_si_record_i32($i56);
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    $i57 := $sext.i32.i64($i56);
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($p16, $mul.ref($i57, 1));
    assume {:verifier.code 0} true;
    $p55 := $p58;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p53 := $p55;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($p19, $mul.ref(1, 1));
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 130} $i60 := copy_to_user($p19, $p41, 1);
    call {:si_unique_call 131} {:cexpr "tmp___2"} boogie_si_record_i64($i60);
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    $i61 := $ne.i64($i60, 0);
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i61 == 1);
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    $i62 := $add.i32($i15, 1);
    call {:si_unique_call 134} {:cexpr "bytes_read"} boogie_si_record_i32($i62);
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    $i15, $p16, $i17, $i18, $p19, $i20 := $i62, $p53, $i24, $i30, $p59, $i25;
    goto corral_source_split_536_dummy;

  $bb19:
    assume $i61 == 1;
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    $i13 := $sub.i64(0, 14);
    goto $bb3;

  $bb16:
    assume $i54 == 1;
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    $p55 := $p16;
    goto $bb18;

  $bb13:
    assume $i46 == 1;
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    $i47 := $load.i8($M.0, $p41);
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    $i48 := $sext.i8.i32($i47);
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    $i49 := $and.i32($i48, 255);
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 128} $i50 := sprintf.ref.ref.i32($p16, .str.4, $i49);
    call {:si_unique_call 129} {:cexpr "tmp"} boogie_si_record_i32($i50);
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    $i51 := $sext.i32.i64($i50);
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($p16, $mul.ref($i51, 1));
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    $p53 := $p52;
    goto $bb15;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb7;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    $i13 := $sub.i64(0, 19);
    goto $bb3;

  $bb30_dummy:
    assume false;
    return;

  $bb28_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_550;

  $bb26_dummy:
    assume false;
    return;

  $bb24_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_544;

  $bb34_dummy:
    assume false;
    return;

  $bb9_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_536_dummy:
    assume false;
    return;

  $bb5_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_477;
}



const ftdi_elan_write: ref;

axiom ftdi_elan_write == $sub.ref(0, 252611);

procedure ftdi_elan_write($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation ftdi_elan_write($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i11: i1;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $i23: i64;
  var $i24: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i8;
  var $i30: i32;
  var $i31: i32;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i32;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i32;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i25: i32;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i64;
  var $i22: i32;
  var $i15: i32;
  var $i50: i64;
  var $i10: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 141} {:cexpr "ftdi_elan_write:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 8488)), $mul.ref(5084, 1));
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    $i9 := $sgt.i32($i8, 0);
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i2, 0);
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 142} $p12 := usb_alloc_urb(0, 208);
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p6, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(112, 1));
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} $p19 := usb_alloc_coherent($p17, $i2, 208, $p18);
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    $i21 := $eq.i64($i20, 0);
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} $i23 := copy_from_user($p19, $p1, $i2);
    call {:si_unique_call 146} {:cexpr "tmp___0"} boogie_si_record_i64($i23);
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p6, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p6, $mul.ref(0, 8488)), $mul.ref(7433, 1));
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.0, $p28);
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i29);
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} $i31 := __create_pipe($p27, $i30);
    call {:si_unique_call 149} {:cexpr "tmp___1"} boogie_si_record_i32($i31);
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p6, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    $i34 := $or.i32($i31, $sub.i32(0, 1073741824));
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i64.i32($i2);
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p6);
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} usb_fill_bulk_urb($p12, $p33, $i34, $p19, $i35, ftdi_elan_write_bulk_callback, $p36);
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    $i39 := $or.i32($i38, 4);
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p40, $i39);
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} $i41 := usb_submit_urb($p12, 208);
    call {:si_unique_call 152} {:cexpr "retval"} boogie_si_record_i32($i41);
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} usb_free_urb($p12);
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i10 := $i2;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb21:
    assume $i42 == 1;
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p6, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 153} dev_err.ref.ref.i32($p45, .str.76, $i41);
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    $i25 := $i41;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p6, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(112, 1));
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    $i49 := $load.i64($M.0, $p48);
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 147} usb_free_coherent($p47, $i2, $p19, $i49);
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    $i22 := $i25;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 144} usb_free_urb($p12);
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $i15 := $i22;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    $i50 := $sext.i32.i64($i15);
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    $i10 := $i50;
    goto $bb3;

  $bb17:
    assume $i24 == 1;
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32(0, 14);
    goto $bb19;

  $bb13:
    assume $i21 == 1;
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32(0, 12);
    goto $bb15;

  $bb9:
    assume $i14 == 1;
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 12);
    goto $bb11;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    $i10 := $sub.i64(0, 19);
    goto $bb3;
}



const ftdi_elan_open: ref;

axiom ftdi_elan_open == $sub.ref(0, 253643);

procedure ftdi_elan_open($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation ftdi_elan_open($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p16: ref;
  var $i7: i32;
  var vslice_dummy_var_19: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} $i2 := iminor($p0);
    call {:si_unique_call 156} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} $p3 := usb_find_interface(ftdi_elan_driver, $i2);
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} $p8 := usb_get_intfdata($p3);
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p9, $mul.ref(0, 8488)), $mul.ref(5104, 1));
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} $i13 := down_interruptible($p12);
    call {:si_unique_call 161} {:cexpr "tmp___1"} boogie_si_record_i32($i13);
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i14 == 1);
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} ftdi_elan_get_kref($p9);
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p16, $p8);
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb6:
    assume $i14 == 1;
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 4);
    goto $bb3;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 19);
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} vslice_dummy_var_19 := printk.ref.i32(.str.78, $i2);
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 19);
    goto $bb3;
}



const ftdi_elan_release: ref;

axiom ftdi_elan_release == $sub.ref(0, 254675);

procedure ftdi_elan_release($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.16, $M.19, $M.20, $M.25, $M.23, $M.24, $M.4, $CurrAddr, $M.3, $M.6, $M.8, $M.10, $M.12, $M.22, assertsPassed, $M.7, $M.9, $M.11, $M.13;



implementation ftdi_elan_release($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 8488)), $mul.ref(5104, 1));
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 163} up($p8);
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 164} ftdi_elan_put_kref($p4);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  SeqInstr_76:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 19);
    goto $bb3;
}



const up: ref;

axiom up == $sub.ref(0, 255707);

procedure up($p0: ref);
  free requires assertsPassed;



implementation up($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    return;
}



const iminor: ref;

axiom iminor == $sub.ref(0, 256739);

procedure iminor($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation iminor($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1000)), $mul.ref(76, 1));
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 1048575);
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const usb_find_interface: ref;

axiom usb_find_interface == $sub.ref(0, 257771);

procedure usb_find_interface($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation usb_find_interface($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} {:cexpr "usb_find_interface:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 166} $p2 := external_alloc();
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const printk: ref;

axiom printk == $sub.ref(0, 258803);

procedure printk.ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 1} true;
    call {:si_unique_call 167} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 168} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 1} true;
    call {:si_unique_call 169} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 170} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 1} true;
    call {:si_unique_call 171} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 172} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const usb_get_intfdata: ref;

axiom usb_get_intfdata == $sub.ref(0, 259835);

procedure usb_get_intfdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation usb_get_intfdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const down_interruptible: ref;

axiom down_interruptible == $sub.ref(0, 260867);

procedure down_interruptible($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation down_interruptible($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 1} true;
    call {:si_unique_call 174} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 175} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ftdi_elan_get_kref: ref;

axiom ftdi_elan_get_kref == $sub.ref(0, 261899);

procedure ftdi_elan_get_kref($p0: ref);
  free requires assertsPassed;



implementation ftdi_elan_get_kref($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7436, 1));
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} kref_get($p1);
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    return;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 262931);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(512, 1));
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 263963);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 1} true;
    call {:si_unique_call 177} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 178} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const usb_alloc_urb: ref;

axiom usb_alloc_urb == $sub.ref(0, 264995);

procedure usb_alloc_urb($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation usb_alloc_urb($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 179} {:cexpr "usb_alloc_urb:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 180} {:cexpr "usb_alloc_urb:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} $p2 := external_alloc();
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const usb_alloc_coherent: ref;

axiom usb_alloc_coherent == $sub.ref(0, 266027);

procedure usb_alloc_coherent($p0: ref, $i1: i64, $i2: i32, $p3: ref) returns ($r: ref);
  free requires assertsPassed;



implementation usb_alloc_coherent($p0: ref, $i1: i64, $i2: i32, $p3: ref) returns ($r: ref)
{
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} {:cexpr "usb_alloc_coherent:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 183} {:cexpr "usb_alloc_coherent:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 184} $p4 := external_alloc();
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const copy_from_user: ref;

axiom copy_from_user == $sub.ref(0, 267059);

procedure copy_from_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation copy_from_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i32;
  var $i4: i64;
  var $i5: i32;
  var $i6: i1;
  var $i8: i64;
  var $i9: i1;
  var $i7: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} {:cexpr "copy_from_user:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 186} $i3 := __builtinx_object_size.ref.i32($p0, 0);
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    call {:si_unique_call 187} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    call {:si_unique_call 188} {:cexpr "sz"} boogie_si_record_i32($i5);
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 189} __might_fault(.str.77, 697);
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 0);
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    $i7 := 1;
    assume {:branchcond $i6} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i5);
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $i9 := $uge.i64($i8, $i2);
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    $i7 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i7);
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} $i12 := ldv__builtin_expect($i11, 1);
    call {:si_unique_call 191} {:cexpr "tmp___0"} boogie_si_record_i64($i12);
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} __copy_from_user_overflow();
    assume {:verifier.code 0} true;
    $i16 := $i2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i64.i32($i2);
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 192} $i15 := _copy_from_user($p0, $p1, $i14);
    call {:si_unique_call 193} {:cexpr "n"} boogie_si_record_i64($i15);
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const __create_pipe: ref;

axiom __create_pipe == $sub.ref(0, 268091);

procedure __create_pipe($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __create_pipe($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} {:cexpr "__create_pipe:arg:endpoint"} boogie_si_record_i32($i1);
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(0, 1));
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    $i4 := $shl.i32($i3, 8);
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    $i5 := $shl.i32($i1, 15);
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    $i6 := $or.i32($i4, $i5);
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const ftdi_elan_write_bulk_callback: ref;

axiom ftdi_elan_write_bulk_callback == $sub.ref(0, 269123);

procedure ftdi_elan_write_bulk_callback($p0: ref);
  free requires assertsPassed;



implementation ftdi_elan_write_bulk_callback($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i64;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    call {:si_unique_call 196} {:cexpr "status"} boogie_si_record_i32($i5);
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    $i17 := $zext.i32.i64($i16);
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(112, 1));
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.0, $p20);
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} usb_free_coherent($p14, $i17, $p19, $i21);
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i5, $sub.i32(0, 2));
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i5, $sub.i32(0, 104));
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i5, $sub.i32(0, 108));
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb8:
    assume $i9 == 1;
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} dev_err.ref.ref.ref.i32($p12, .str.28, $p0, $i5);
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    goto $bb10;
}



const usb_fill_bulk_urb: ref;

axiom usb_fill_bulk_urb == $sub.ref(0, 270155);

procedure usb_fill_bulk_urb($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_fill_bulk_urb($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref)
{
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 199} {:cexpr "usb_fill_bulk_urb:arg:pipe"} boogie_si_record_i32($i2);
    call {:si_unique_call 200} {:cexpr "usb_fill_bulk_urb:arg:buffer_length"} boogie_si_record_i32($i4);
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $p1);
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $i2);
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, $p3);
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i4);
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $p5);
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, $p6);
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    return;
}



const usb_submit_urb: ref;

axiom usb_submit_urb == $sub.ref(0, 271187);

procedure usb_submit_urb($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_submit_urb($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 201} {:cexpr "usb_submit_urb:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 1} true;
    call {:si_unique_call 202} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 203} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const dev_err: ref;

axiom dev_err == $sub.ref(0, 272219);

procedure dev_err.ref.ref.i32.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: ref, p.4: i32, p.5: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.i32.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: ref, p.4: i32, p.5: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32)
{

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref.i32.i32.i32.ref($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: ref);
  free requires assertsPassed;



implementation dev_err.ref.ref.i32.i32.i32.ref($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: ref)
{

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref.i32.i32.ref($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: ref);
  free requires assertsPassed;



implementation dev_err.ref.ref.i32.i32.ref($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: ref)
{

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref.i32.ref($p0: ref, $p1: ref, p.2: i32, p.3: ref);
  free requires assertsPassed;



implementation dev_err.ref.ref.i32.ref($p0: ref, $p1: ref, p.2: i32, p.3: ref)
{

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation dev_err.ref.ref($p0: ref, $p1: ref)
{

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32)
{

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref.ref.ref($p0: ref, $p1: ref, p.2: ref, p.3: ref);
  free requires assertsPassed;



implementation dev_err.ref.ref.ref.ref($p0: ref, $p1: ref, p.2: ref, p.3: ref)
{

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32)
{

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    return;
}



const usb_free_urb: ref;

axiom usb_free_urb == $sub.ref(0, 273251);

procedure usb_free_urb($p0: ref);
  free requires assertsPassed;



implementation usb_free_urb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    return;
}



const usb_free_coherent: ref;

axiom usb_free_coherent == $sub.ref(0, 274283);

procedure usb_free_coherent($p0: ref, $i1: i64, $p2: ref, $i3: i64);
  free requires assertsPassed;



implementation usb_free_coherent($p0: ref, $i1: i64, $p2: ref, $i3: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 204} {:cexpr "usb_free_coherent:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 205} {:cexpr "usb_free_coherent:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    return;
}



const __builtinx_object_size: ref;

axiom __builtinx_object_size == $sub.ref(0, 275315);

procedure __builtinx_object_size() returns ($r: i32);



procedure __builtinx_object_size.ref.i32(p.0: ref, p.1: i32) returns ($r: i32);



const __might_fault: ref;

axiom __might_fault == $sub.ref(0, 276347);

procedure __might_fault($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __might_fault($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} {:cexpr "__might_fault:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    return;
}



const _copy_from_user: ref;

axiom _copy_from_user == $sub.ref(0, 277379);

procedure _copy_from_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation _copy_from_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 207} {:cexpr "_copy_from_user:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 1} true;
    call {:si_unique_call 208} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 209} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __copy_from_user_overflow: ref;

axiom __copy_from_user_overflow == $sub.ref(0, 278411);

procedure __copy_from_user_overflow();
  free requires assertsPassed;



implementation __copy_from_user_overflow()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    return;
}



const copy_to_user: ref;

axiom copy_to_user == $sub.ref(0, 279443);

procedure copy_to_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation copy_to_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i32;
  var $i4: i64;
  var $i5: i32;
  var $i6: i1;
  var $i8: i64;
  var $i9: i1;
  var $i7: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 210} {:cexpr "copy_to_user:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} $i3 := __builtinx_object_size.ref.i32($p1, 0);
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    call {:si_unique_call 212} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    call {:si_unique_call 213} {:cexpr "sz"} boogie_si_record_i32($i5);
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 214} __might_fault(.str.77, 732);
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 0);
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    $i7 := 1;
    assume {:branchcond $i6} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i5);
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $i9 := $uge.i64($i8, $i2);
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    $i7 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i7);
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} $i12 := ldv__builtin_expect($i11, 1);
    call {:si_unique_call 216} {:cexpr "tmp___0"} boogie_si_record_i64($i12);
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} __copy_to_user_overflow();
    assume {:verifier.code 0} true;
    $i16 := $i2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i64.i32($i2);
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} $i15 := _copy_to_user($p0, $p1, $i14);
    call {:si_unique_call 218} {:cexpr "n"} boogie_si_record_i64($i15);
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const usb_bulk_msg: ref;

axiom usb_bulk_msg == $sub.ref(0, 280475);

procedure usb_bulk_msg($p0: ref, $i1: i32, $p2: ref, $i3: i32, $p4: ref, $i5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_bulk_msg($p0: ref, $i1: i32, $p2: ref, $i3: i32, $p4: ref, $i5: i32) returns ($r: i32)
{
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 220} {:cexpr "usb_bulk_msg:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 221} {:cexpr "usb_bulk_msg:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 222} {:cexpr "usb_bulk_msg:arg:arg5"} boogie_si_record_i32($i5);
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 1} true;
    call {:si_unique_call 223} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 224} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const _copy_to_user: ref;

axiom _copy_to_user == $sub.ref(0, 281507);

procedure _copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation _copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 225} {:cexpr "_copy_to_user:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 1} true;
    call {:si_unique_call 226} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 227} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __copy_to_user_overflow: ref;

axiom __copy_to_user_overflow == $sub.ref(0, 282539);

procedure __copy_to_user_overflow();
  free requires assertsPassed;



implementation __copy_to_user_overflow()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    return;
}



const ftdi_elan_probe: ref;

axiom ftdi_elan_probe == $sub.ref(0, 283571);

procedure ftdi_elan_probe($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.3, $CurrAddr, assertsPassed, $M.7, $M.6, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12, $M.16, $M.19, $M.20, $M.25, $M.23, $M.24, $M.4, $M.22;



implementation ftdi_elan_probe($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p32: ref;
  var $i33: i8;
  var $i34: i32;
  var $i35: i1;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $p41: ref;
  var $p42: ref;
  var $i43: i8;
  var $i44: i32;
  var $i45: i1;
  var $i46: i32;
  var $i47: i1;
  var $i48: i32;
  var $i49: i64;
  var $p50: ref;
  var $p51: ref;
  var $i52: i8;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i64;
  var $i59: i1;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p64: ref;
  var $i65: i8;
  var $i66: i32;
  var $i67: i1;
  var $i68: i32;
  var $i69: i1;
  var $p70: ref;
  var $i71: i8;
  var $p72: ref;
  var $i73: i32;
  var $i74: i8;
  var $i75: i32;
  var $i76: i1;
  var $i36: i32;
  var $p77: ref;
  var $i78: i8;
  var $i79: i32;
  var $i80: i1;
  var $p81: ref;
  var $i82: i8;
  var $i83: i32;
  var $i84: i1;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p92: ref;
  var $i93: i8;
  var $i94: i32;
  var $p95: ref;
  var $i96: i8;
  var $i97: i32;
  var $p98: ref;
  var $i99: i8;
  var $i100: i32;
  var $p101: ref;
  var $p103: ref;
  var $i104: i8;
  var $i105: i32;
  var $i106: i1;
  var $p107: ref;
  var $i108: i8;
  var $i109: i32;
  var $i110: i1;
  var $p111: ref;
  var $i112: i8;
  var $i113: i32;
  var $i114: i1;
  var $i115: i32;
  var $i116: i1;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p125: ref;
  var $i126: i8;
  var $i127: i32;
  var $p128: ref;
  var $i129: i32;
  var $p131: ref;
  var $i132: i8;
  var $i133: i32;
  var $i134: i1;
  var $p135: ref;
  var $i136: i8;
  var $i137: i32;
  var $i138: i1;
  var $p139: ref;
  var $i140: i8;
  var $i141: i32;
  var $i142: i1;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $p146: ref;
  var $p148: ref;
  var $i149: i8;
  var $i150: i32;
  var $p152: ref;
  var $p153: ref;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $p161: ref;
  var $p164: ref;
  var $p167: ref;
  var $p169: ref;
  var $p172: ref;
  var $p173: ref;
  var $i174: i64;
  var $p177: ref;
  var $p179: ref;
  var $p180: ref;
  var $p183: ref;
  var $p184: ref;
  var $p185: ref;
  var $p188: ref;
  var $p191: ref;
  var $p194: ref;
  var $p196: ref;
  var $p199: ref;
  var $p200: ref;
  var $i201: i64;
  var $p204: ref;
  var $p206: ref;
  var $p207: ref;
  var $p210: ref;
  var $p211: ref;
  var $p212: ref;
  var $p215: ref;
  var $p218: ref;
  var $p221: ref;
  var $p223: ref;
  var $p226: ref;
  var $p227: ref;
  var $i228: i64;
  var $p231: ref;
  var $i232: i64;
  var $i233: i32;
  var $p234: ref;
  var $p235: ref;
  var $p236: ref;
  var $i63: i32;
  var $i237: i64;
  var $i238: i1;
  var $i16: i32;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 228} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 229} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 231} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 232} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 233} $p7 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 234} $p8 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} $p9 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} $p10 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 237} $p11 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} $p12 := kzalloc(8480, 208);
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 239} ldv_mutex_lock_85(ftdi_module_lock);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p13, $mul.ref(0, 8488)), $mul.ref(0, 1));
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} list_add_tail($p17, ftdi_static_list);
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $i18 := $M.1;
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    $i19 := $add.i32($i18, 1);
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    $M.1 := $i19;
    call {:si_unique_call 241} {:cexpr "ftdi_instances"} boogie_si_record_i32($i19);
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    $i20 := $M.1;
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p13, $mul.ref(0, 8488)), $mul.ref(5080, 1));
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, $i20);
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 242} ldv_mutex_unlock_86(ftdi_module_lock);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 243} ftdi_elan_init_kref($p13);
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p13, $mul.ref(0, 8488)), $mul.ref(5104, 1));
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} sema_init($p22, 1);
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 245} $p23 := interface_to_usbdev($p0);
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} $p24 := usb_get_dev($p23);
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p13, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p25, $p24);
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p13, $mul.ref(0, 8488)), $mul.ref(5208, 1));
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p26, $p0);
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p13, $mul.ref(0, 8488)), $mul.ref(16, 1));
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} __mutex_init($p27, .str.43, $p2);
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p13, $mul.ref(0, 8488)), $mul.ref(8472, 1));
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, 4);
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(8, 1));
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p30, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.0, $p32);
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i33);
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    $i35 := $sgt.i32($i34, 0);
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p13, $mul.ref(0, 8488)), $mul.ref(7432, 1));
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    $i78 := $load.i8($M.0, $p77);
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $i79 := $zext.i8.i32($i78);
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    $i80 := $eq.i32($i79, 0);
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb31;

  $bb31:
    assume !($i80 == 1);
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p13, $mul.ref(0, 8488)), $mul.ref(7433, 1));
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    $i82 := $load.i8($M.0, $p81);
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    $i83 := $zext.i8.i32($i82);
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    $i84 := $eq.i32($i83, 0);
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    assume {:branchcond $i84} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p13, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.0, $p88);
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p89, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($add.ref($p30, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $i93 := $load.i8($M.0, $p92);
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    $i94 := $zext.i8.i32($i93);
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p13, $mul.ref(0, 8488)), $mul.ref(7432, 1));
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    $i96 := $load.i8($M.0, $p95);
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    $i97 := $zext.i8.i32($i96);
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p13, $mul.ref(0, 8488)), $mul.ref(7433, 1));
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    $i99 := $load.i8($M.0, $p98);
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    $i100 := $zext.i8.i32($i99);
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} _dev_info.ref.ref.i32.i32.i32($p90, .str.46, $i94, $i97, $i100);
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    $p101 := $bitcast.ref.ref($p13);
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} usb_set_intfdata($p0, $p101);
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($add.ref($p30, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    $i104 := $load.i8($M.0, $p103);
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    $i105 := $zext.i8.i32($i104);
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    $i106 := $eq.i32($i105, 0);
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i106 == 1);
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($add.ref($p30, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    $i132 := $load.i8($M.0, $p131);
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    $i133 := $zext.i8.i32($i132);
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $i134 := $eq.i32($i133, 1);
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume !($i134 == 1);
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($p13, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    $p235 := $load.ref($M.0, $p234);
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($add.ref($p235, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} dev_err.ref.ref($p236, .str.56);
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    $i63 := $sub.i32(0, 19);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    $i237 := $p2i.ref.i64($p13);
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    $i238 := $ne.i64($i237, 0);
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    assume {:branchcond $i238} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i238 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $i16 := $i63;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb51:
    assume $i238 == 1;
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} ftdi_elan_put_kref($p13);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    goto $bb53;

  SeqInstr_85:
    assume !assertsPassed;
    return;

  $bb44:
    assume $i134 == 1;
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p13, $mul.ref(0, 8488)), $mul.ref(7432, 1));
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    $i136 := $load.i8($M.0, $p135);
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $i137 := $zext.i8.i32($i136);
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    $i138 := $eq.i32($i137, 131);
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume !($i138 == 1);
    goto $bb46;

  $bb47:
    assume $i138 == 1;
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p13, $mul.ref(0, 8488)), $mul.ref(7433, 1));
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    $i140 := $load.i8($M.0, $p139);
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    $i141 := $zext.i8.i32($i140);
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    $i142 := $eq.i32($i141, 4);
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    assume !($i142 == 1);
    goto $bb46;

  $bb49:
    assume $i142 == 1;
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p13, $mul.ref(0, 8488)), $mul.ref(5216, 1));
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p143, $0.ref);
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p13, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    $p145 := $load.ref($M.0, $p144);
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p145, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($add.ref($p30, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    $i149 := $load.i8($M.0, $p148);
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $i150 := $zext.i8.i32($i149);
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} _dev_info.ref.ref.ref.i32($p146, .str.49, $p13, $i150);
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 8488)), $mul.ref(5224, 1)), $mul.ref(0, 1));
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} __init_work($p152, 0);
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p153, 137438953408);
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($add.ref($add.ref($p13, $mul.ref(0, 8488)), $mul.ref(5224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $p157 := $bitcast.ref.ref($p156);
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $p158 := $bitcast.ref.ref($p4);
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 269} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p157, $p158, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_2;
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($add.ref($add.ref($p13, $mul.ref(0, 8488)), $mul.ref(5224, 1)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 270} lockdep_init_map($p161, .str.50, $p3, 0);
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($add.ref($add.ref($p13, $mul.ref(0, 8488)), $mul.ref(5224, 1)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} INIT_LIST_HEAD($p164);
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($add.ref($add.ref($p13, $mul.ref(0, 8488)), $mul.ref(5224, 1)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p167, ftdi_elan_status_work);
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 8488)), $mul.ref(5224, 1)), $mul.ref(80, 1));
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 272} init_timer_key($p169, 2097152, .str.51, $p5);
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($add.ref($add.ref($p13, $mul.ref(0, 8488)), $mul.ref(5224, 1)), $mul.ref(80, 1)), $mul.ref(24, 1));
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p172, delayed_work_timer_fn);
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p13, $mul.ref(0, 8488)), $mul.ref(5224, 1));
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $i174 := $p2i.ref.i64($p173);
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($add.ref($add.ref($p13, $mul.ref(0, 8488)), $mul.ref(5224, 1)), $mul.ref(80, 1)), $mul.ref(32, 1));
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p177, $i174);
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 8488)), $mul.ref(5448, 1)), $mul.ref(0, 1));
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 273} __init_work($p179, 0);
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p7, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p180, 137438953408);
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($add.ref($add.ref($p13, $mul.ref(0, 8488)), $mul.ref(5448, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $p184 := $bitcast.ref.ref($p183);
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    $p185 := $bitcast.ref.ref($p7);
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.0;
    cmdloc_dummy_var_4 := $M.0;
    call {:si_unique_call 274} cmdloc_dummy_var_5 := $memcpy.i8(cmdloc_dummy_var_3, cmdloc_dummy_var_4, $p184, $p185, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_5;
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($add.ref($add.ref($p13, $mul.ref(0, 8488)), $mul.ref(5448, 1)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} lockdep_init_map($p188, .str.52, $p6, 0);
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($add.ref($add.ref($p13, $mul.ref(0, 8488)), $mul.ref(5448, 1)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 276} INIT_LIST_HEAD($p191);
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($add.ref($add.ref($p13, $mul.ref(0, 8488)), $mul.ref(5448, 1)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p194, ftdi_elan_command_work);
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 8488)), $mul.ref(5448, 1)), $mul.ref(80, 1));
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 277} init_timer_key($p196, 2097152, .str.53, $p8);
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($add.ref($add.ref($p13, $mul.ref(0, 8488)), $mul.ref(5448, 1)), $mul.ref(80, 1)), $mul.ref(24, 1));
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p199, delayed_work_timer_fn);
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p13, $mul.ref(0, 8488)), $mul.ref(5448, 1));
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    $i201 := $p2i.ref.i64($p200);
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($add.ref($add.ref($p13, $mul.ref(0, 8488)), $mul.ref(5448, 1)), $mul.ref(80, 1)), $mul.ref(32, 1));
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p204, $i201);
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 8488)), $mul.ref(5672, 1)), $mul.ref(0, 1));
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} __init_work($p206, 0);
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($p10, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p207, 137438953408);
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($add.ref($add.ref($p13, $mul.ref(0, 8488)), $mul.ref(5672, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    $p211 := $bitcast.ref.ref($p210);
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    $p212 := $bitcast.ref.ref($p10);
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.0;
    cmdloc_dummy_var_7 := $M.0;
    call {:si_unique_call 279} cmdloc_dummy_var_8 := $memcpy.i8(cmdloc_dummy_var_6, cmdloc_dummy_var_7, $p211, $p212, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_8;
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($add.ref($add.ref($p13, $mul.ref(0, 8488)), $mul.ref(5672, 1)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} lockdep_init_map($p215, .str.54, $p9, 0);
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($add.ref($add.ref($p13, $mul.ref(0, 8488)), $mul.ref(5672, 1)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 281} INIT_LIST_HEAD($p218);
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($add.ref($add.ref($p13, $mul.ref(0, 8488)), $mul.ref(5672, 1)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p221, ftdi_elan_respond_work);
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 8488)), $mul.ref(5672, 1)), $mul.ref(80, 1));
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} init_timer_key($p223, 2097152, .str.55, $p11);
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($add.ref($add.ref($p13, $mul.ref(0, 8488)), $mul.ref(5672, 1)), $mul.ref(80, 1)), $mul.ref(24, 1));
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p226, delayed_work_timer_fn);
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($p13, $mul.ref(0, 8488)), $mul.ref(5672, 1));
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    $i228 := $p2i.ref.i64($p227);
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($add.ref($add.ref($p13, $mul.ref(0, 8488)), $mul.ref(5672, 1)), $mul.ref(80, 1)), $mul.ref(32, 1));
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p231, $i228);
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 283} $i232 := msecs_to_jiffies(3000);
    call {:si_unique_call 284} {:cexpr "tmp___5"} boogie_si_record_i64($i232);
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $i233 := $trunc.i64.i32($i232);
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} ftdi_status_queue_work($p13, $i233);
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb3;

  $bb35:
    assume $i106 == 1;
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p13, $mul.ref(0, 8488)), $mul.ref(7432, 1));
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    $i108 := $load.i8($M.0, $p107);
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    $i109 := $zext.i8.i32($i108);
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    $i110 := $eq.i32($i109, 129);
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i110 == 1);
    goto $bb37;

  $bb38:
    assume $i110 == 1;
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p13, $mul.ref(0, 8488)), $mul.ref(7433, 1));
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    $i112 := $load.i8($M.0, $p111);
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    $i113 := $zext.i8.i32($i112);
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    $i114 := $eq.i32($i113, 2);
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    assume {:branchcond $i114} true;
    goto $bb40, $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume !($i114 == 1);
    goto $bb37;

  $bb40:
    assume $i114 == 1;
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 261} $i115 := usb_register_dev($p0, ftdi_elan_jtag_class);
    call {:si_unique_call 262} {:cexpr "retval"} boogie_si_record_i32($i115);
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $i116 := $ne.i32($i115, 0);
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    assume {:branchcond $i116} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i116 == 1);
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p13, $mul.ref(0, 8488)), $mul.ref(5216, 1));
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p120, ftdi_elan_jtag_class);
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p13, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    $p122 := $load.ref($M.0, $p121);
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p122, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($add.ref($p30, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    $i126 := $load.i8($M.0, $p125);
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    $i127 := $zext.i8.i32($i126);
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(32, 1));
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $i129 := $load.i32($M.0, $p128);
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 265} _dev_info.ref.ref.ref.i32.i32($p123, .str.48, $p13, $i127, $i129);
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb3;

  $bb42:
    assume $i116 == 1;
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p13, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    $p118 := $load.ref($M.0, $p117);
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p118, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} dev_err.ref.ref($p119, .str.47);
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} usb_set_intfdata($p0, $0.ref);
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $i63 := $sub.i32(0, 12);
    goto $bb16;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i84 == 1;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p13, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.0, $p85);
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p86, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 258} dev_err.ref.ref($p87, .str.45);
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $i63 := $sub.i32(0, 19);
    goto $bb16;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i80 == 1;
    goto $bb30;

  $bb5:
    assume $i35 == 1;
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    $i36 := 0;
    goto $bb8;

  $bb8:
    call $p37, $p38, $i39, $p41, $p42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $p50, $p51, $i52, $p53, $p54, $p55, $p56, $p57, $i58, $i59, $p64, $i65, $i66, $i67, $i68, $i69, $p70, $i71, $p72, $i73, $i74, $i75, $i76, $i36 := ftdi_elan_probe_loop_$bb8($p13, $p30, $p32, $p37, $p38, $i39, $p41, $p42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $p50, $p51, $i52, $p53, $p54, $p55, $p56, $p57, $i58, $i59, $p64, $i65, $i66, $i67, $i68, $i69, $p70, $i71, $p72, $i73, $i74, $i75, $i76, $i36);
    goto $bb8_last;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p30, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    $i39 := $sext.i32.i64($i36);
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p38, $mul.ref($i39, 72)), $mul.ref(0, 1));
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p13, $mul.ref(0, 8488)), $mul.ref(7432, 1));
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    $i43 := $load.i8($M.0, $p42);
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32($i43);
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i44, 0);
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p13, $mul.ref(0, 8488)), $mul.ref(7433, 1));
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    $i65 := $load.i8($M.0, $p64);
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $i66 := $zext.i8.i32($i65);
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    $i67 := $eq.i32($i66, 0);
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i73 := $add.i32($i36, 1);
    call {:si_unique_call 257} {:cexpr "i"} boogie_si_record_i32($i73);
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $i74 := $load.i8($M.0, $p32);
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    $i75 := $zext.i8.i32($i74);
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    $i76 := $sgt.i32($i75, $i73);
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i76 == 1);
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb26:
    assume $i76 == 1;
    assume {:verifier.code 0} true;
    $i36 := $i73;
    goto $bb26_dummy;

  $bb20:
    assume $i67 == 1;
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 255} $i68 := usb_endpoint_is_bulk_out($p41);
    call {:si_unique_call 256} {:cexpr "tmp___4"} boogie_si_record_i32($i68);
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    $i69 := $ne.i32($i68, 0);
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb22:
    assume $i69 == 1;
    $p70 := $add.ref($add.ref($add.ref($p38, $mul.ref($i39, 72)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    $i71 := $load.i8($M.0, $p70);
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p13, $mul.ref(0, 8488)), $mul.ref(7433, 1));
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p72, $i71);
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb10:
    assume $i45 == 1;
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} $i46 := usb_endpoint_is_bulk_in($p41);
    call {:si_unique_call 249} {:cexpr "tmp___3"} boogie_si_record_i32($i46);
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 0);
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb12:
    assume $i47 == 1;
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} $i48 := usb_endpoint_maxp($p41);
    call {:si_unique_call 251} {:cexpr "tmp___1"} boogie_si_record_i32($i48);
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    $i49 := $sext.i32.i64($i48);
    call {:si_unique_call 252} {:cexpr "buffer_size"} boogie_si_record_i64($i49);
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p13, $mul.ref(0, 8488)), $mul.ref(7408, 1));
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p50, $i49);
    $p51 := $add.ref($add.ref($add.ref($p38, $mul.ref($i39, 72)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    $i52 := $load.i8($M.0, $p51);
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p13, $mul.ref(0, 8488)), $mul.ref(7432, 1));
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p53, $i52);
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 253} $p54 := kmalloc($i49, 208);
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p13, $mul.ref(0, 8488)), $mul.ref(7400, 1));
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p55, $p54);
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p13, $mul.ref(0, 8488)), $mul.ref(7400, 1));
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $i58 := $p2i.ref.i64($p57);
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    $i59 := $eq.i64($i58, 0);
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb14:
    assume $i59 == 1;
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p13, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p61, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 254} dev_err.ref.ref($p62, .str.44);
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    $i63 := $sub.i32(0, 12);
    goto $bb16;

  SeqInstr_82:
    assume !assertsPassed;
    return;

  SeqInstr_79:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 12);
    goto $bb3;

  $bb26_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_977;
}



const ftdi_elan_disconnect: ref;

axiom ftdi_elan_disconnect == $sub.ref(0, 284603);

procedure ftdi_elan_disconnect($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.8, $M.10, $M.12, $M.4, $M.1, assertsPassed, $M.16, $M.19, $M.20, $M.25, $M.23, $M.24, $CurrAddr, $M.3, $M.22, $M.7, $M.9, $M.11, $M.13;



implementation ftdi_elan_disconnect($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $i25: i8;
  var $i26: i8;
  var $p27: ref;
  var $i28: i8;
  var $i29: i8;
  var $p30: ref;
  var $i31: i8;
  var $i32: i8;
  var $p33: ref;
  var $i34: i8;
  var $i35: i8;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i32;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 287} $p1 := usb_get_intfdata($p0);
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 8488)), $mul.ref(5084, 1));
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    $i5 := $add.i32($i4, 1);
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 8488)), $mul.ref(5084, 1));
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, $i5);
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 8488)), $mul.ref(5216, 1));
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} ftdi_status_cancel_work($p2);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} ftdi_command_cancel_work($p2);
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 294} ftdi_response_cancel_work($p2);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} ftdi_elan_abandon_completions($p2);
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 296} ftdi_elan_abandon_targets($p2);
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p2);
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p18, $mul.ref(5072, 1));
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.0, $p19);
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p36 := $M.17;
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 299} ldv_flush_workqueue_87($p36);
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $p37 := $M.5;
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 300} ldv_flush_workqueue_88($p37);
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $p38 := $M.18;
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 301} ldv_flush_workqueue_89($p38);
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p2, $mul.ref(0, 8488)), $mul.ref(5084, 1));
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    $i41 := $add.i32($i40, 1);
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p2, $mul.ref(0, 8488)), $mul.ref(5084, 1));
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p42, $i41);
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} usb_set_intfdata($p0, $0.ref);
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 303} _dev_info.ref.ref($p45, .str.61);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 297} ftdi_elan_put_kref($p2);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_103:
    assume !assertsPassed;
    return;

  SeqInstr_112:
    assume !assertsPassed;
    return;

  SeqInstr_109:
    assume !assertsPassed;
    return;

  SeqInstr_106:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i22 == 1;
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 8488)), $mul.ref(5920, 1));
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 298} platform_device_unregister($p23);
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 8488)), $mul.ref(5072, 1));
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.0, $p24);
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    $i26 := $and.i8($i25, $sub.i8(0, 2));
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p24, $i26);
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 8488)), $mul.ref(5072, 1));
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.0, $p27);
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    $i29 := $and.i8($i28, $sub.i8(0, 3));
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p27, $i29);
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 8488)), $mul.ref(5072, 1));
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.0, $p30);
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    $i32 := $and.i8($i31, $sub.i8(0, 9));
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p30, $i32);
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 8488)), $mul.ref(5072, 1));
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.0, $p33);
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $i35 := $and.i8($i34, $sub.i8(0, 5));
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p33, $i35);
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_100:
    assume !assertsPassed;
    return;

  SeqInstr_97:
    assume !assertsPassed;
    return;

  SeqInstr_94:
    assume !assertsPassed;
    return;

  SeqInstr_91:
    assume !assertsPassed;
    return;

  SeqInstr_88:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(32, 1));
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    call {:si_unique_call 288} {:cexpr "minor"} boogie_si_record_i32($i12);
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 8488)), $mul.ref(5216, 1));
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} usb_set_intfdata($p0, $0.ref);
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} usb_deregister_dev($p0, $p14);
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} _dev_info.ref.ref.i32($p17, .str.60, $i12);
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const usb_set_intfdata: ref;

axiom usb_set_intfdata == $sub.ref(0, 285635);

procedure usb_set_intfdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_set_intfdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} dev_set_drvdata($p2, $p1);
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    return;
}



const usb_deregister_dev: ref;

axiom usb_deregister_dev == $sub.ref(0, 286667);

procedure usb_deregister_dev($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation usb_deregister_dev($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    return;
}



const _dev_info: ref;

axiom _dev_info == $sub.ref(0, 287699);

procedure _dev_info.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    return;
}



procedure _dev_info.ref.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    return;
}



procedure _dev_info.ref.ref.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32)
{

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    return;
}



procedure _dev_info.ref.ref.ref($p0: ref, $p1: ref, p.2: ref);
  free requires assertsPassed;



implementation _dev_info.ref.ref.ref($p0: ref, $p1: ref, p.2: ref)
{

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    return;
}



procedure _dev_info.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation _dev_info.ref.ref($p0: ref, $p1: ref)
{

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    return;
}



procedure _dev_info.ref.ref.i32($p0: ref, $p1: ref, p.2: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref.i32($p0: ref, $p1: ref, p.2: i32)
{

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    return;
}



const ftdi_status_cancel_work: ref;

axiom ftdi_status_cancel_work == $sub.ref(0, 288731);

procedure ftdi_status_cancel_work($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $M.8, $M.10, $M.12, $M.0, $M.1, $M.16, $M.19, $M.20, $M.25, $M.23, $M.24, $M.4, $CurrAddr, $M.3, $M.22, assertsPassed, $M.7, $M.9, $M.11, $M.13;



implementation ftdi_status_cancel_work($p0: ref)
{
  var $p1: ref;
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;
  var $p5: ref;
  var vslice_dummy_var_20: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5224, 1));
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} $i2 := ldv_cancel_delayed_work_19($p1);
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 306} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7436, 1));
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} vslice_dummy_var_20 := kref_put($p5, ftdi_elan_delete);
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_115:
    assume !assertsPassed;
    return;
}



const ftdi_command_cancel_work: ref;

axiom ftdi_command_cancel_work == $sub.ref(0, 289763);

procedure ftdi_command_cancel_work($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $M.8, $M.10, $M.12, $M.0, $M.1, $M.16, $M.19, $M.20, $M.25, $M.23, $M.24, $M.4, $CurrAddr, $M.3, $M.22, assertsPassed, $M.7, $M.9, $M.11, $M.13;



implementation ftdi_command_cancel_work($p0: ref)
{
  var $p1: ref;
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;
  var $p5: ref;
  var vslice_dummy_var_21: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5448, 1));
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} $i2 := ldv_cancel_delayed_work_20($p1);
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 309} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7436, 1));
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} vslice_dummy_var_21 := kref_put($p5, ftdi_elan_delete);
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_118:
    assume !assertsPassed;
    return;
}



const ftdi_response_cancel_work: ref;

axiom ftdi_response_cancel_work == $sub.ref(0, 290795);

procedure ftdi_response_cancel_work($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $M.8, $M.10, $M.12, $M.0, $M.1, $M.16, $M.19, $M.20, $M.25, $M.23, $M.24, $M.4, $CurrAddr, $M.3, $M.22, assertsPassed, $M.7, $M.9, $M.11, $M.13;



implementation ftdi_response_cancel_work($p0: ref)
{
  var $p1: ref;
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;
  var $p5: ref;
  var vslice_dummy_var_22: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5672, 1));
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 311} $i2 := ldv_cancel_delayed_work_21($p1);
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 312} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7436, 1));
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} vslice_dummy_var_22 := kref_put($p5, ftdi_elan_delete);
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_121:
    assume !assertsPassed;
    return;
}



const ftdi_elan_abandon_completions: ref;

axiom ftdi_elan_abandon_completions == $sub.ref(0, 291827);

procedure ftdi_elan_abandon_completions($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.4, assertsPassed;



implementation ftdi_elan_abandon_completions($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i64;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(16, 1));
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} ldv_mutex_lock_22($p1);
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(952, 1));
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(956, 1));
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    $i6 := $sgt.i32($i3, $i5);
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(16, 1));
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} ldv_mutex_unlock_23($p26);
    goto SeqInstr_127, SeqInstr_128;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  SeqInstr_129:
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_127:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p7, $i8, $p9, $i10, $i11, $p12, $p13, $p14, $i15, $i16, $p18, $p19, $p20, $p21, $p22, $i23, $i24, $i25 := ftdi_elan_abandon_completions_loop_$bb4($p0, $p2, $p4, $p7, $i8, $p9, $i10, $i11, $p12, $p13, $p14, $i15, $i16, $p18, $p19, $p20, $p21, $p22, $i23, $i24, $i25);
    goto $bb4_last;

  $bb5:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(956, 1));
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    call {:si_unique_call 315} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(956, 1));
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i10, 1);
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(956, 1));
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, $i11);
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(960, 1));
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i8);
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    $i16 := $and.i64($i15, 31);
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p14, $mul.ref($i16, 120)), $mul.ref(16, 1));
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, $sub.i32(0, 108));
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p14, $mul.ref($i16, 120)), $mul.ref(8, 1));
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, 0);
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p14, $mul.ref($i16, 120)), $mul.ref(24, 1));
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} complete_($p22);
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p2);
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p4);
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    $i25 := $sgt.i32($i23, $i24);
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i25 == 1);
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb6_dummy;

  SeqInstr_124:
    assume !assertsPassed;
    return;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const ftdi_elan_abandon_targets: ref;

axiom ftdi_elan_abandon_targets == $sub.ref(0, 292859);

procedure ftdi_elan_abandon_targets($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.4, assertsPassed;



implementation ftdi_elan_abandon_targets($p0: ref)
{
  var $p1: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $i2: i32;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(16, 1));
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} ldv_mutex_lock_24($p1);
    goto SeqInstr_130, SeqInstr_131;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  SeqInstr_132:
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $i2 := 3;
    goto $bb1;

  $bb1:
    call $p3, $p4, $i5, $p6, $p7, $i8, $i9, $p10, $p11, $p12, $i13, $i14, $i2 := ftdi_elan_abandon_targets_loop_$bb1($p0, $p3, $p4, $i5, $p6, $p7, $i8, $i9, $p10, $p11, $p12, $i13, $i14, $i2);
    goto $bb1_last;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(4800, 1));
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i2);
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p4, $mul.ref($i5, 64));
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref($i5, 64)), $mul.ref(48, 1));
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32($i2, 1);
    call {:si_unique_call 322} {:cexpr "ed_number"} boogie_si_record_i32($i13);
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    $i14 := $sgt.i32($i2, 0);
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(8476, 1));
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, 0);
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(8472, 1));
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, 4);
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(8480, 1));
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, 0);
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(16, 1));
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} ldv_mutex_unlock_27($p18);
    goto SeqInstr_139, SeqInstr_140;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  SeqInstr_141:
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_139:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i2 := $i13;
    goto $bb6_dummy;

  $bb3:
    assume $i9 == 1;
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref($i5, 64)), $mul.ref(24, 1));
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, 5);
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(16, 1));
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 319} ldv_mutex_unlock_25($p11);
    goto SeqInstr_133, SeqInstr_134;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  SeqInstr_135:
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} ftdi_elan_do_callback($p0, $p6, $0.ref, 0);
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(16, 1));
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} ldv_mutex_lock_26($p12);
    goto SeqInstr_136, SeqInstr_137;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  SeqInstr_138:
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_136:
    assume !assertsPassed;
    return;

  SeqInstr_133:
    assume !assertsPassed;
    return;

  SeqInstr_130:
    assume !assertsPassed;
    return;

  $bb6_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1384;
}



const platform_device_unregister: ref;

axiom platform_device_unregister == $sub.ref(0, 293891);

procedure platform_device_unregister($p0: ref);
  free requires assertsPassed;



implementation platform_device_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    return;
}



const ldv_flush_workqueue_87: ref;

axiom ldv_flush_workqueue_87 == $sub.ref(0, 294923);

procedure ldv_flush_workqueue_87($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $M.8, $M.10, $M.12, $M.0, $M.16, $M.19, $M.20, $M.22, $M.4, $M.1, $CurrAddr, $M.7, $M.9, $M.11, $M.13, assertsPassed, $M.25, $M.23, $M.24, $M.3;



implementation ldv_flush_workqueue_87($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} flush_workqueue($p0);
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} call_and_disable_all_1(2);
    goto SeqInstr_142, SeqInstr_143;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  SeqInstr_144:
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_142:
    assume !assertsPassed;
    return;
}



const ldv_flush_workqueue_88: ref;

axiom ldv_flush_workqueue_88 == $sub.ref(0, 295955);

procedure ldv_flush_workqueue_88($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $M.8, $M.10, $M.12, $M.0, $M.16, $M.19, $M.20, $M.22, $M.4, $M.1, $CurrAddr, $M.7, $M.9, $M.11, $M.13, assertsPassed, $M.25, $M.23, $M.24, $M.3;



implementation ldv_flush_workqueue_88($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} flush_workqueue($p0);
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} call_and_disable_all_1(2);
    goto SeqInstr_145, SeqInstr_146;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  SeqInstr_147:
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_145:
    assume !assertsPassed;
    return;
}



const ldv_flush_workqueue_89: ref;

axiom ldv_flush_workqueue_89 == $sub.ref(0, 296987);

procedure ldv_flush_workqueue_89($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $M.8, $M.10, $M.12, $M.0, $M.16, $M.19, $M.20, $M.22, $M.4, $M.1, $CurrAddr, $M.7, $M.9, $M.11, $M.13, assertsPassed, $M.25, $M.23, $M.24, $M.3;



implementation ldv_flush_workqueue_89($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 328} flush_workqueue($p0);
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} call_and_disable_all_1(2);
    goto SeqInstr_148, SeqInstr_149;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  SeqInstr_150:
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_148:
    assume !assertsPassed;
    return;
}



const flush_workqueue: ref;

axiom flush_workqueue == $sub.ref(0, 298019);

procedure flush_workqueue($p0: ref);
  free requires assertsPassed;



implementation flush_workqueue($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    return;
}



const call_and_disable_all_1: ref;

axiom call_and_disable_all_1 == $sub.ref(0, 299051);

procedure call_and_disable_all_1($i0: i32);
  free requires assertsPassed;
  modifies $M.6, $M.8, $M.10, $M.12, $M.0, $M.16, $M.19, $M.20, $M.22, $M.4, $M.1, $CurrAddr, $M.7, $M.9, $M.11, $M.13, assertsPassed, $M.25, $M.23, $M.24, $M.3;



implementation call_and_disable_all_1($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} {:cexpr "call_and_disable_all_1:arg:state"} boogie_si_record_i32($i0);
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $i1 := $M.6;
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, $i0);
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i4 := $M.8;
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, $i0);
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i7 := $M.10;
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, $i0);
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i10 := $M.12;
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, $i0);
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i11 == 1;
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    $p12 := $M.13;
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} call_and_disable_work_1($p12);
    goto SeqInstr_160, SeqInstr_161;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  SeqInstr_162:
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_160:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    $p9 := $M.11;
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} call_and_disable_work_1($p9);
    goto SeqInstr_157, SeqInstr_158;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  SeqInstr_159:
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_157:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $p6 := $M.9;
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} call_and_disable_work_1($p6);
    goto SeqInstr_154, SeqInstr_155;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  SeqInstr_156:
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_154:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $p3 := $M.7;
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} call_and_disable_work_1($p3);
    goto SeqInstr_151, SeqInstr_152;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  SeqInstr_153:
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_151:
    assume !assertsPassed;
    return;
}



const call_and_disable_work_1: ref;

axiom call_and_disable_work_1 == $sub.ref(0, 300083);

procedure call_and_disable_work_1($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $M.8, $M.10, $M.12, $M.0, $M.16, $M.19, $M.20, $M.22, $M.4, $M.1, $CurrAddr, $M.7, $M.9, $M.11, $M.13, assertsPassed, $M.25, $M.23, $M.24, $M.3;



implementation call_and_disable_work_1($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i64;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $i21: i64;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $i29: i64;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    $i1 := $M.6;
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 2);
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i2 == 1);
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $i3 := $M.6;
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 3);
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i9 := $M.8;
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 2);
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb13;

  $bb13:
    assume !($i10 == 1);
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $i11 := $M.8;
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 3);
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i17 := $M.10;
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 2);
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i18 == 1);
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    $i19 := $M.10;
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 3);
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i25 := $M.12;
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 2);
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb31;

  $bb31:
    assume !($i26 == 1);
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    $i27 := $M.12;
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 3);
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p0);
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $p30 := $M.13;
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $i32 := $eq.i64($i29, $i31);
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb34;

  $bb35:
    assume $i32 == 1;
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 341} ftdi_elan_status_work($p0);
    goto SeqInstr_172, SeqInstr_173;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  SeqInstr_174:
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $M.12 := 1;
    call {:si_unique_call 342} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(1);
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_172:
    assume !assertsPassed;
    return;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb30;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p0);
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $p22 := $M.11;
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i21, $i23);
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb25;

  $bb26:
    assume $i24 == 1;
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} ftdi_elan_status_work($p0);
    goto SeqInstr_169, SeqInstr_170;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  SeqInstr_171:
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    $M.10 := 1;
    call {:si_unique_call 340} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(1);
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_169:
    assume !assertsPassed;
    return;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb21;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p0);
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    $p14 := $M.9;
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i13, $i15);
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb16;

  $bb17:
    assume $i16 == 1;
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 337} ftdi_elan_status_work($p0);
    goto SeqInstr_166, SeqInstr_167;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  SeqInstr_168:
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    $M.8 := 1;
    call {:si_unique_call 338} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(1);
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_166:
    assume !assertsPassed;
    return;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb12;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p0);
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    $p6 := $M.7;
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i5, $i7);
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb6;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} ftdi_elan_status_work($p0);
    goto SeqInstr_163, SeqInstr_164;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  SeqInstr_165:
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    $M.6 := 1;
    call {:si_unique_call 336} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(1);
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_163:
    assume !assertsPassed;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb2;
}



const ftdi_elan_status_work: ref;

axiom ftdi_elan_status_work == $sub.ref(0, 301115);

procedure ftdi_elan_status_work($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.16, $M.19, $M.20, $M.22, $M.4, $M.1, $CurrAddr, $M.7, $M.6, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12, assertsPassed, $M.25, $M.23, $M.24, $M.3;



implementation ftdi_elan_status_work($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i8;
  var $i16: i8;
  var $i17: i8;
  var $p18: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i19: i32;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $i32: i8;
  var $i33: i8;
  var $p34: ref;
  var $i35: i32;
  var $p36: ref;
  var $i37: i32;
  var $i38: i32;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $p51: ref;
  var $p52: ref;
  var $i53: i8;
  var $i54: i32;
  var $i55: i1;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $i59: i8;
  var $i60: i8;
  var $i61: i8;
  var $i62: i32;
  var $p64: ref;
  var $p65: ref;
  var $i66: i8;
  var $i67: i32;
  var $i68: i1;
  var $i69: i32;
  var $i70: i1;
  var $p71: ref;
  var $i72: i8;
  var $i73: i8;
  var $i74: i8;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $i75: i32;
  var $p80: ref;
  var $p81: ref;
  var $i82: i8;
  var $i83: i32;
  var $i84: i1;
  var $i85: i32;
  var $i86: i1;
  var $p87: ref;
  var $i88: i8;
  var $i89: i8;
  var $i90: i8;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $i95: i32;
  var $i96: i1;
  var $p98: ref;
  var $i99: i32;
  var $i100: i32;
  var $i101: i1;
  var $p102: ref;
  var $i103: i32;
  var $i104: i1;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p110: ref;
  var $p111: ref;
  var $p113: ref;
  var $p114: ref;
  var $p117: ref;
  var $p118: ref;
  var $i119: i8;
  var $i120: i8;
  var $p121: ref;
  var $i122: i8;
  var $i123: i8;
  var $p124: ref;
  var $i125: i8;
  var $i126: i8;
  var $p127: ref;
  var $i128: i8;
  var $i129: i8;
  var $p130: ref;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $i136: i8;
  var $i137: i8;
  var $p138: ref;
  var $i139: i8;
  var $i140: i8;
  var $i131: i32;
  var $i97: i32;
  var $i94: i32;
  var $i79: i32;
  var $i63: i32;
  var $i50: i32;
  var $i24: i32;
  var $p141: ref;
  var $i142: i32;
  var $i143: i1;
  var $i144: i64;
  var $i145: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 5224), 8488));
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 5224), 8488)), $mul.ref(5084, 1));
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    $i5 := $sgt.i32($i4, 0);
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p2);
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p6, $mul.ref(5072, 1));
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 5224), 8488)), $mul.ref(5092, 1));
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    $i27 := $sgt.i32($i26, 0);
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i27 == 1);
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p2);
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($p51, $mul.ref(5072, 1));
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.0, $p52);
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i32($i53);
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i54, 0);
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i55 == 1);
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p2);
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($p64, $mul.ref(5072, 1));
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    $i66 := $load.i8($M.0, $p65);
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    $i67 := $zext.i8.i32($i66);
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    $i68 := $eq.i32($i67, 0);
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i68 == 1);
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $p80 := $bitcast.ref.ref($p2);
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($p80, $mul.ref(5072, 1));
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    $i82 := $load.i8($M.0, $p81);
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    $i83 := $zext.i8.i32($i82);
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    $i84 := $eq.i32($i83, 0);
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    assume {:branchcond $i84} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i84 == 1);
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 364} $i95 := ftdi_elan_checkingPCI($p2);
    goto SeqInstr_184, SeqInstr_185;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  SeqInstr_186:
    call {:si_unique_call 365} {:cexpr "tmp___5"} boogie_si_record_i32($i95);
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    $i96 := $eq.i32($i95, 0);
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    assume {:branchcond $i96} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i96 == 1);
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 5224), 8488)), $mul.ref(7440, 1));
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    $i99 := $load.i32($M.0, $p98);
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    $i100 := $and.i32($i99, 4194304);
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    $i101 := $ne.i32($i100, 0);
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i101 == 1);
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 5224), 8488)), $mul.ref(5200, 1));
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $p133 := $load.ref($M.0, $p132);
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p133, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} dev_err.ref.ref($p134, .str.17);
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} ftdi_elan_cancel_targets($p2);
    goto SeqInstr_187, SeqInstr_188;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  SeqInstr_189:
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 5224), 8488)), $mul.ref(5072, 1));
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    $i136 := $load.i8($M.0, $p135);
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $i137 := $and.i8($i136, $sub.i8(0, 3));
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p135, $i137);
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 5224), 8488)), $mul.ref(5072, 1));
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    $i139 := $load.i8($M.0, $p138);
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    $i140 := $and.i8($i139, $sub.i8(0, 9));
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p138, $i140);
    assume {:verifier.code 0} true;
    $i131 := 500;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i97 := $i131;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i94 := $i97;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i79 := $i94;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i63 := $i79;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i50 := $i63;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i24 := $i50;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 5224), 8488)), $mul.ref(5084, 1));
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    $i142 := $load.i32($M.0, $p141);
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    $i143 := $sgt.i32($i142, 0);
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i143 == 1);
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} $i144 := msecs_to_jiffies($i24);
    call {:si_unique_call 374} {:cexpr "tmp___6"} boogie_si_record_i64($i144);
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    $i145 := $trunc.i64.i32($i144);
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} ftdi_status_requeue_work($p2, $i145);
    goto SeqInstr_196, SeqInstr_197;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  SeqInstr_198:
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_196:
    assume !assertsPassed;
    return;

  $bb47:
    assume $i143 == 1;
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} ftdi_elan_put_kref($p2);
    goto SeqInstr_193, SeqInstr_194;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  SeqInstr_195:
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_193:
    assume !assertsPassed;
    return;

  SeqInstr_187:
    assume !assertsPassed;
    return;

  $bb40:
    assume $i101 == 1;
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 5224), 8488)), $mul.ref(5088, 1));
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    $i103 := $load.i32($M.0, $p102);
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    $i104 := $sgt.i32($i103, 0);
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i104 == 1);
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} ftdi_elan_flush_targets($p2);
    goto SeqInstr_190, SeqInstr_191;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  SeqInstr_192:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i131 := 250;
    goto $bb45;

  SeqInstr_190:
    assume !assertsPassed;
    return;

  $bb42:
    assume $i104 == 1;
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 5224), 8488)), $mul.ref(5200, 1));
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    $p106 := $load.ref($M.0, $p105);
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p106, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 5224), 8488)), $mul.ref(5920, 1)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    $p111 := $load.ref($M.0, $p110);
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 5224), 8488)), $mul.ref(5920, 1)), $mul.ref(16, 1));
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} dev_err.ref.ref.ref.ref($p107, .str.16, $p111, $p113);
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 5224), 8488)), $mul.ref(5920, 1));
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} platform_device_unregister($p114);
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 5224), 8488)), $mul.ref(5920, 1)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p117, $0.ref);
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 5224), 8488)), $mul.ref(5072, 1));
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    $i119 := $load.i8($M.0, $p118);
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    $i120 := $and.i8($i119, $sub.i8(0, 5));
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p118, $i120);
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 5224), 8488)), $mul.ref(5072, 1));
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    $i122 := $load.i8($M.0, $p121);
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    $i123 := $and.i8($i122, $sub.i8(0, 3));
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p121, $i123);
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 5224), 8488)), $mul.ref(5072, 1));
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    $i125 := $load.i8($M.0, $p124);
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    $i126 := $and.i8($i125, $sub.i8(0, 17));
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p124, $i126);
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 5224), 8488)), $mul.ref(5072, 1));
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    $i128 := $load.i8($M.0, $p127);
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    $i129 := $and.i8($i128, $sub.i8(0, 9));
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p127, $i129);
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 5224), 8488)), $mul.ref(5088, 1));
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p130, 0);
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb37:
    assume $i96 == 1;
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    $i97 := 250;
    goto $bb39;

  SeqInstr_184:
    assume !assertsPassed;
    return;

  $bb31:
    assume $i84 == 1;
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 362} $i85 := ftdi_elan_hcd_init($p2);
    call {:si_unique_call 363} {:cexpr "tmp___4"} boogie_si_record_i32($i85);
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    $i86 := $eq.i32($i85, 0);
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    assume {:branchcond $i86} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i86 == 1);
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 5224), 8488)), $mul.ref(5200, 1));
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.0, $p91);
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p92, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} dev_err.ref.ref($p93, .str.15);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i94 := 250;
    goto $bb36;

  $bb33:
    assume $i86 == 1;
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 5224), 8488)), $mul.ref(5072, 1));
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $i88 := $load.i8($M.0, $p87);
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    $i89 := $and.i8($i88, $sub.i8(0, 5));
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    $i90 := $or.i8($i89, 4);
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p87, $i90);
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb25:
    assume $i68 == 1;
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} $i69 := ftdi_elan_setupOHCI($p2);
    goto SeqInstr_181, SeqInstr_182;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  SeqInstr_183:
    call {:si_unique_call 360} {:cexpr "tmp___3"} boogie_si_record_i32($i69);
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    $i70 := $eq.i32($i69, 0);
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i70 == 1);
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 5224), 8488)), $mul.ref(5200, 1));
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p77, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} dev_err.ref.ref($p78, .str.14);
    assume {:verifier.code 0} true;
    $i75 := 1000;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $i79 := $i75;
    goto $bb30;

  $bb27:
    assume $i70 == 1;
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 5224), 8488)), $mul.ref(5072, 1));
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    $i72 := $load.i8($M.0, $p71);
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    $i73 := $and.i8($i72, $sub.i8(0, 9));
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    $i74 := $or.i8($i73, 8);
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p71, $i74);
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    $i75 := 500;
    goto $bb29;

  SeqInstr_181:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i55 == 1;
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} $i56 := ftdi_elan_enumeratePCI($p2);
    goto SeqInstr_178, SeqInstr_179;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  SeqInstr_180:
    call {:si_unique_call 358} {:cexpr "tmp___2"} boogie_si_record_i32($i56);
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i56, 0);
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    assume {:branchcond $i57} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    $i62 := 1000;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    $i63 := $i62;
    goto $bb24;

  $bb21:
    assume $i57 == 1;
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 5224), 8488)), $mul.ref(5072, 1));
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    $i59 := $load.i8($M.0, $p58);
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $i60 := $and.i8($i59, $sub.i8(0, 3));
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $i61 := $or.i8($i60, 2);
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p58, $i61);
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    $i62 := 250;
    goto $bb23;

  SeqInstr_178:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i27 == 1;
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} $i28 := ftdi_elan_stuck_waiting($p2);
    call {:si_unique_call 353} {:cexpr "tmp___1"} boogie_si_record_i32($i28);
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 0);
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i29 == 1);
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 5224), 8488)), $mul.ref(5092, 1));
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    call {:si_unique_call 354} {:cexpr "tmp___0"} boogie_si_record_i32($i35);
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 5224), 8488)), $mul.ref(5092, 1));
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $i38 := $add.i32($i37, 1);
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 5224), 8488)), $mul.ref(5092, 1));
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, $i38);
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    $i40 := $srem.i32($i35, 60);
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i40, 1);
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i41 == 1);
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 5224), 8488)), $mul.ref(5200, 1));
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p46, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 5224), 8488)), $mul.ref(5092, 1));
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p48);
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} dev_err.ref.ref.i32($p47, .str.13, $i49);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i50 := 100;
    goto $bb18;

  $bb15:
    assume $i41 == 1;
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 5224), 8488)), $mul.ref(5200, 1));
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 355} dev_err.ref.ref($p44, .str.12);
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb12:
    assume $i29 == 1;
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 5224), 8488)), $mul.ref(5092, 1));
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, 0);
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 5224), 8488)), $mul.ref(5072, 1));
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.0, $p31);
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    $i33 := $and.i8($i32, $sub.i8(0, 2));
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p31, $i33);
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 5224), 8488)), $mul.ref(5104, 1));
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} down($p11);
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} $i12 := ftdi_elan_synchronize($p2);
    call {:si_unique_call 346} {:cexpr "tmp"} boogie_si_record_i32($i12);
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i13 == 1);
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 5224), 8488)), $mul.ref(5200, 1));
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 350} dev_err.ref.ref($p22, .str.11);
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 5224), 8488)), $mul.ref(5104, 1));
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} up($p23);
    assume {:verifier.code 0} true;
    $i19 := 10000;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    $i24 := $i19;
    goto $bb9;

  $bb6:
    assume $i13 == 1;
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 5224), 8488)), $mul.ref(5072, 1));
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    $i16 := $and.i8($i15, $sub.i8(0, 2));
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    $i17 := $or.i8($i16, 1);
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p14, $i17);
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} ftdi_command_queue_work($p2, 1);
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} ftdi_respond_queue_work($p2, 1);
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 5224), 8488)), $mul.ref(5104, 1));
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 349} up($p18);
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    $i19 := 100;
    goto $bb8;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} ftdi_elan_put_kref($p2);
    goto SeqInstr_175, SeqInstr_176;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  SeqInstr_177:
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_175:
    assume !assertsPassed;
    return;
}



const down: ref;

axiom down == $sub.ref(0, 302147);

procedure down($p0: ref);
  free requires assertsPassed;



implementation down($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    return;
}



const ftdi_elan_synchronize: ref;

axiom ftdi_elan_synchronize == $sub.ref(0, 303179);

procedure ftdi_elan_synchronize($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.16, $M.19, $M.22, $CurrAddr;



implementation ftdi_elan_synchronize($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i25: i32;
  var $i24: i32;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $i30: i32;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i8;
  var $i35: i32;
  var $i36: i32;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $i44: i32;
  var $i45: i32;
  var $i46: i32;
  var $i47: i1;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $i53: i32;
  var $i54: i32;
  var $i55: i1;
  var $p60: ref;
  var $i61: i8;
  var $i62: i1;
  var $i63: i32;
  var $i64: i32;
  var $i65: i64;
  var $p66: ref;
  var $i68: i1;
  var $i70: i32;
  var $i71: i64;
  var $p72: ref;
  var $p69: ref;
  var $p67: ref;
  var $i73: i32;
  var $i74: i32;
  var $i75: i32;
  var $i76: i32;
  var $i77: i1;
  var $i57: i32;
  var $p58: ref;
  var $p59: ref;
  var $i78: i8;
  var $i56: i8;
  var $i79: i32;
  var $i80: i1;
  var $i81: i32;
  var $i82: i1;
  var $i83: i32;
  var $i84: i32;
  var $i85: i32;
  var $i86: i32;
  var $i87: i32;
  var $i88: i32;
  var $i89: i1;
  var $i90: i32;
  var $i91: i32;
  var $i92: i32;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $i96: i32;
  var $i97: i32;
  var $i98: i32;
  var $i99: i32;
  var $i100: i1;
  var $i101: i32;
  var $i102: i1;
  var $p103: ref;
  var $p104: ref;
  var $i105: i8;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $i109: i8;
  var $i110: i32;
  var $i111: i1;
  var $i112: i32;
  var $i113: i1;
  var $i114: i32;
  var $i115: i1;
  var $i116: i32;
  var $i117: i32;
  var $i118: i32;
  var $i119: i32;
  var $i120: i1;
  var $i121: i32;
  var $i122: i1;
  var $i123: i32;
  var $i124: i1;
  var $i125: i32;
  var $i126: i1;
  var $i127: i32;
  var $i128: i32;
  var $i129: i32;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $i133: i32;
  var $i134: i1;
  var $i135: i32;
  var $i136: i32;
  var $i137: i32;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $i141: i32;
  var $i142: i1;
  var $i143: i32;
  var $i144: i1;
  var $i145: i32;
  var $i146: i32;
  var $i147: i32;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;
  var $i151: i1;
  var $i152: i32;
  var $i153: i1;
  var $i154: i32;
  var $i155: i32;
  var $i156: i32;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $i160: i1;
  var $i161: i32;
  var $i162: i1;
  var $i163: i32;
  var $i164: i32;
  var $i165: i32;
  var $p166: ref;
  var $p167: ref;
  var $p168: ref;
  var $i169: i32;
  var $p170: ref;
  var $p171: ref;
  var $p172: ref;
  var $i173: i32;
  var $i174: i1;
  var $i175: i32;
  var $i176: i32;
  var $i177: i32;
  var $p178: ref;
  var $p179: ref;
  var $p180: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $p181: ref;
  var $p182: ref;
  var $p183: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} $p2 := $alloc($mul.ref(94, $zext.i32.i64(1)));
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} $i3 := ftdi_elan_flush_input_fifo($p0);
    call {:si_unique_call 379} {:cexpr "retval"} boogie_si_record_i32($i3);
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7424, 1));
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p6, 0);
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7416, 1));
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p7, $sub.i64(0, 1));
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    $i8, $i9, $i10, $i11 := 9, 5, 10, 0;
    goto $bb5;

  $bb5:
    call $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i25, $i21, $i22, $i23, $i26, $i27, $i28, $i29, $i30, $p31, $p32, $p33, $i34, $i35, $i36, $p37, $p38, $i39, $p40, $p41, $p42, $i43, $i44, $i45, $i46, $i47, $p49, $p50, $p51, $i52, $i53, $i54, $i55, $p60, $i61, $i62, $i63, $i64, $i65, $p66, $i68, $i70, $i71, $p72, $p69, $p67, $i73, $i74, $i75, $i76, $i77, $i57, $p58, $p59, $i78, $i56, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $p93, $p94, $p95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $p103, $p104, $i105, $p106, $p107, $p108, $i109, $i110, $i111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $p130, $p131, $p132, $i133, $i134, $i135, $i136, $i137, $p138, $p139, $p140, $i141, $i142, $i143, $i144, $i145, $i146, $i147, $p148, $p149, $p150, $i151, $i152, $i153, $i154, $i155, $i156, $p157, $p158, $p159, $i160, $i161, $i162, $i163, $i164, $i165, $p166, $p167, $p168, $i169, $p170, $p171, $p172, $i173, $i174, $i175, $i176, $i177, $p178, $p179, $p180, $i8, $i9, $i10, $i11 := ftdi_elan_synchronize_loop_$bb5($p0, $p1, $p2, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i25, $i21, $i22, $i23, $i26, $i27, $i28, $i29, $i30, $p31, $p32, $p33, $i34, $i35, $i36, $p37, $p38, $i39, $p40, $p41, $p42, $i43, $i44, $i45, $i46, $i47, $p49, $p50, $p51, $i52, $i53, $i54, $i55, $p60, $i61, $i62, $i63, $i64, $i65, $p66, $i68, $i70, $i71, $p72, $p69, $p67, $i73, $i74, $i75, $i76, $i77, $i57, $p58, $p59, $i78, $i56, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $p93, $p94, $p95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $p103, $p104, $i105, $p106, $p107, $p108, $i109, $i110, $i111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $p130, $p131, $p132, $i133, $i134, $i135, $i136, $i137, $p138, $p139, $p140, $i141, $i142, $i143, $i144, $i145, $i146, $i147, $p148, $p149, $p150, $i151, $i152, $i153, $i154, $i155, $i156, $p157, $p158, $p159, $i160, $i161, $i162, $i163, $i164, $i165, $p166, $p167, $p168, $i169, $p170, $p171, $p172, $i173, $i174, $i175, $i176, $i177, $p178, $p179, $p180, $i8, $i9, $i10, $i11);
    goto $bb5_last;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} $i12 := ftdi_elan_synchronize_flush($p0);
    call {:si_unique_call 381} {:cexpr "retval"} boogie_si_record_i32($i12);
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    $i14 := $i12;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} $i15 := ftdi_elan_flush_input_fifo($p0);
    call {:si_unique_call 383} {:cexpr "retval"} boogie_si_record_i32($i15);
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    $i17 := $i15;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} $i18 := ftdi_elan_synchronize_reset($p0);
    call {:si_unique_call 385} {:cexpr "retval"} boogie_si_record_i32($i18);
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    $i20 := $i18;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    $i21, $i22, $i23 := $i9, $i10, $i11;
    goto $bb15;

  $bb15:
    call $i25, $i21, $i22, $i23, $i26, $i27, $i28, $i29, $i30, $p31, $p32, $p33, $i34, $i35, $i36, $p37, $p38, $i39, $p40, $p41, $p42, $i43, $i44, $i45, $i46, $i47, $p49, $p50, $p51, $i52, $i53, $i54, $i55, $p60, $i61, $i62, $i63, $i64, $i65, $p66, $i68, $i70, $i71, $p72, $p69, $p67, $i73, $i74, $i75, $i76, $i77, $i57, $p58, $p59, $i78, $i56, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i101, $i102, $p103, $p104, $i105, $p106, $p107, $p108, $i109, $i110, $i111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $i133, $i134, $i135, $i136, $i137, $i141, $i142, $i143, $i144, $i145, $i146, $i147, $i151, $i152, $i153, $i154, $i155, $i156, $i160, $i161, $i162, $i163, $i164, $i165, $i169, $p170, $p171, $p172, $i173, $i174, $i175, $i176, $i177 := ftdi_elan_synchronize_loop_$bb15($p0, $p1, $p2, $i25, $i21, $i22, $i23, $i26, $i27, $i28, $i29, $i30, $p31, $p32, $p33, $i34, $i35, $i36, $p37, $p38, $i39, $p40, $p41, $p42, $i43, $i44, $i45, $i46, $i47, $p49, $p50, $p51, $i52, $i53, $i54, $i55, $p60, $i61, $i62, $i63, $i64, $i65, $p66, $i68, $i70, $i71, $p72, $p69, $p67, $i73, $i74, $i75, $i76, $i77, $i57, $p58, $p59, $i78, $i56, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i101, $i102, $p103, $p104, $i105, $p106, $p107, $p108, $i109, $i110, $i111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $i133, $i134, $i135, $i136, $i137, $i141, $i142, $i143, $i144, $i145, $i146, $i147, $i151, $i152, $i153, $i154, $i155, $i156, $i160, $i161, $i162, $i163, $i164, $i165, $i169, $p170, $p171, $p172, $i173, $i174, $i175, $i176, $i177);
    goto $bb15_last;

  $bb18:
    assume {:verifier.code 0} true;
    $i26, $i27, $i28, $i29, $i30 := 10, 100, $i23, $i22, $i21;
    goto $bb19;

  $bb19:
    call $i26, $i27, $i28, $i29, $i30, $p31, $p32, $p33, $i34, $i35, $i36, $p37, $p38, $i39, $p40, $p41, $p42, $i43, $i44, $i45, $i46, $i47, $p49, $p50, $p51, $i52, $i53, $i54, $i55, $p60, $i61, $i62, $i63, $i64, $i65, $p66, $i68, $i70, $i71, $p72, $p69, $p67, $i73, $i74, $i75, $i76, $i77, $i57, $p58, $p59, $i78, $i56, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i101, $i102, $p103, $p104, $i105, $p106, $p107, $p108, $i109, $i110, $i111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $i133, $i134, $i135, $i136, $i137, $i141, $i142, $i143, $i144, $i145, $i146, $i147, $i151, $i152, $i153, $i154, $i155, $i156, $i160, $i161, $i162, $i163, $i164, $i165, $i169, $p170, $p171, $p172, $i173, $i174, $i175, $i176, $i177 := ftdi_elan_synchronize_loop_$bb19($p0, $p1, $p2, $i26, $i27, $i28, $i29, $i30, $p31, $p32, $p33, $i34, $i35, $i36, $p37, $p38, $i39, $p40, $p41, $p42, $i43, $i44, $i45, $i46, $i47, $p49, $p50, $p51, $i52, $i53, $i54, $i55, $p60, $i61, $i62, $i63, $i64, $i65, $p66, $i68, $i70, $i71, $p72, $p69, $p67, $i73, $i74, $i75, $i76, $i77, $i57, $p58, $p59, $i78, $i56, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i101, $i102, $p103, $p104, $i105, $p106, $p107, $p108, $i109, $i110, $i111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $i133, $i134, $i135, $i136, $i137, $i141, $i142, $i143, $i144, $i145, $i146, $i147, $i151, $i152, $i153, $i154, $i155, $i156, $i160, $i161, $i162, $i163, $i164, $i165, $i169, $p170, $p171, $p172, $i173, $i174, $i175, $i176, $i177);
    goto $bb19_last;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $M.16 := $store.i32($M.16, $p1, 0);
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7432, 1));
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.0, $p33);
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} $i36 := __create_pipe($p32, $i35);
    call {:si_unique_call 387} {:cexpr "tmp"} boogie_si_record_i32($i36);
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    $i39 := $or.i32($i36, $sub.i32(0, 1073741696));
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7400, 1));
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7408, 1));
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    $i43 := $load.i64($M.0, $p42);
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i64.i32($i43);
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} $i45 := usb_bulk_msg($p38, $i39, $p41, $i44, $p1, 500);
    call {:si_unique_call 389} {:cexpr "retval"} boogie_si_record_i32($i45);
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.16, $p1);
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    $i47 := $sgt.i32($i46, 2);
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i47 == 1);
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    $i101 := $load.i32($M.16, $p1);
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    $i102 := $sgt.i32($i101, 1);
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i102 == 1);
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    $i141 := $load.i32($M.16, $p1);
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    $i142 := $sgt.i32($i141, 0);
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i142 == 1);
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    $i151 := $eq.i32($i45, $sub.i32(0, 110));
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i151 == 1);
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    $i160 := $eq.i32($i45, 0);
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i160 == 1);
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $i169 := $add.i32($i28, 1);
    call {:si_unique_call 415} {:cexpr "err_count"} boogie_si_record_i32($i169);
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    $p171 := $load.ref($M.0, $p170);
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p171, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} dev_err.ref.ref.i32($p172, .str.21, $i45);
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    $i173 := $sub.i32($i27, 1);
    call {:si_unique_call 417} {:cexpr "read_stop"} boogie_si_record_i32($i173);
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    $i174 := $sgt.i32($i27, 0);
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    $i175, $i176, $i177 := $i29, $i30, $i169;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i174 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    $p179 := $load.ref($M.0, $p178);
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p179, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} dev_err.ref.ref($p180, .str.18);
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    $i96, $i97, $i98 := $i177, $i175, $i176;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    $i99 := $sub.i32($i8, 1);
    call {:si_unique_call 400} {:cexpr "long_stop"} boogie_si_record_i32($i99);
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $i100 := $sgt.i32($i8, 0);
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $p182 := $load.ref($M.0, $p181);
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p182, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} dev_err.ref.ref($p183, .str.22);
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 14);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb44:
    assume $i100 == 1;
    assume {:verifier.code 0} true;
    $i8, $i9, $i10, $i11 := $i99, $i98, $i97, $i96;
    goto $bb44_dummy;

  $bb77:
    assume $i174 == 1;
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    $i83, $i84, $i85, $i86, $i87 := $i26, $i173, $i169, $i29, $i30;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    $i26, $i27, $i28, $i29, $i30 := $i83, $i84, $i85, $i86, $i87;
    goto corral_source_split_1875_dummy;

  $bb73:
    assume $i160 == 1;
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $i161 := $sub.i32($i29, 1);
    call {:si_unique_call 414} {:cexpr "retry_on_empty"} boogie_si_record_i32($i161);
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    $i162 := $sgt.i32($i29, 0);
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    $i163, $i164, $i165 := $i28, $i30, $i161;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i162 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $p167 := $load.ref($M.0, $p166);
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p167, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} dev_err.ref.ref($p168, .str.20);
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    $i96, $i97, $i98 := $i163, $i165, $i164;
    goto $bb43;

  $bb75:
    assume $i162 == 1;
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    $i83, $i84, $i85, $i86, $i87 := $i26, $i27, $i28, $i161, $i30;
    goto $bb40;

  $bb69:
    assume $i151 == 1;
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $i152 := $sub.i32($i30, 1);
    call {:si_unique_call 412} {:cexpr "retry_on_timeout"} boogie_si_record_i32($i152);
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    $i153 := $sgt.i32($i30, 0);
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    $i154, $i155, $i156 := $i28, $i29, $i152;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i153 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    $p158 := $load.ref($M.0, $p157);
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p158, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} dev_err.ref.ref($p159, .str.19);
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    $i96, $i97, $i98 := $i154, $i155, $i156;
    goto $bb43;

  $bb71:
    assume $i153 == 1;
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $i83, $i84, $i85, $i86, $i87 := $i26, $i27, $i28, $i29, $i152;
    goto $bb40;

  $bb65:
    assume $i142 == 1;
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    $i143 := $sub.i32($i27, 1);
    call {:si_unique_call 410} {:cexpr "read_stop"} boogie_si_record_i32($i143);
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    $i144 := $sgt.i32($i27, 0);
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    $i145, $i146, $i147 := $i28, $i29, $i30;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i144 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    $p149 := $load.ref($M.0, $p148);
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p149, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} dev_err.ref.ref($p150, .str.18);
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    $i96, $i97, $i98 := $i145, $i146, $i147;
    goto $bb43;

  $bb67:
    assume $i144 == 1;
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $i83, $i84, $i85, $i86, $i87 := $i26, $i143, $i28, $i29, $i30;
    goto $bb40;

  $bb46:
    assume $i102 == 1;
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7400, 1));
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    $p104 := $load.ref($M.0, $p103);
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $i105 := $load.i8($M.0, $p104);
    call {:si_unique_call 401} {:cexpr "s1"} boogie_si_record_i8($i105);
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7400, 1));
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    $p107 := $load.ref($M.0, $p106);
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($p107, $mul.ref(1, 1));
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    $i109 := $load.i8($M.0, $p108);
    call {:si_unique_call 402} {:cexpr "s2"} boogie_si_record_i8($i109);
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    $i110 := $zext.i8.i32($i105);
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    $i111 := $eq.i32($i110, 49);
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    assume !($i111 == 1);
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i121 := $zext.i8.i32($i105);
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    $i122 := $eq.i32($i121, 49);
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    assume !($i122 == 1);
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $i133 := $sub.i32($i27, 1);
    call {:si_unique_call 406} {:cexpr "read_stop"} boogie_si_record_i32($i133);
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    $i134 := $sgt.i32($i27, 0);
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $i135, $i136, $i137 := $i28, $i29, $i30;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i134 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    $p139 := $load.ref($M.0, $p138);
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p139, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} dev_err.ref.ref($p140, .str.18);
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    $i96, $i97, $i98 := $i135, $i136, $i137;
    goto $bb43;

  $bb63:
    assume $i134 == 1;
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $i83, $i84, $i85, $i86, $i87 := $i26, $i133, $i28, $i29, $i30;
    goto $bb40;

  $bb56:
    assume $i122 == 1;
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    $i123 := $zext.i8.i32($i109);
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    $i124 := $eq.i32($i123, 96);
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    assume !($i124 == 1);
    goto $bb58;

  $bb59:
    assume $i124 == 1;
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    $i125 := $sub.i32($i27, 1);
    call {:si_unique_call 407} {:cexpr "read_stop"} boogie_si_record_i32($i125);
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    $i126 := $sgt.i32($i27, 0);
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $i127, $i128, $i129 := $i28, $i29, $i30;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    $p131 := $load.ref($M.0, $p130);
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p131, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} dev_err.ref.ref($p132, .str.18);
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $i96, $i97, $i98 := $i127, $i128, $i129;
    goto $bb43;

  $bb61:
    assume $i126 == 1;
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    $i83, $i84, $i85, $i86, $i87 := $i26, $i125, $i28, $i29, $i30;
    goto $bb40;

  $bb48:
    assume $i111 == 1;
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    $i112 := $zext.i8.i32($i109);
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    $i113 := $eq.i32($i112, 0);
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    assume !($i113 == 1);
    goto $bb50;

  $bb51:
    assume $i113 == 1;
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $i114 := $sub.i32($i26, 1);
    call {:si_unique_call 403} {:cexpr "read_stuck"} boogie_si_record_i32($i114);
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    $i115 := $sgt.i32($i26, 0);
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    $i116, $i117, $i118 := $i28, $i29, $i30;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 404} $i119 := ftdi_elan_synchronize_reset($p0);
    call {:si_unique_call 405} {:cexpr "retval"} boogie_si_record_i32($i119);
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    $i120 := $ne.i32($i119, 0);
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    $i25 := $i119;
    assume true;
    goto $bb17, $bb55;

  $bb55:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    $i21, $i22, $i23 := $i118, $i117, $i116;
    goto $bb55_dummy;

  $bb17:
    assume $i120 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    $i24 := $i25;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    $i5 := $i24;
    goto $bb3;

  $bb53:
    assume $i115 == 1;
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    $i83, $i84, $i85, $i86, $i87 := $i114, $i27, $i28, $i29, $i30;
    goto $bb40;

  $bb20:
    assume $i47 == 1;
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7400, 1));
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p2, $mul.ref(0, 94)), $mul.ref(0, 1));
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    $M.19 := $store.i8($M.19, $p51, 0);
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.16, $p1);
    call {:si_unique_call 390} {:cexpr "tmp___3"} boogie_si_record_i32($i52);
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.16, $p1);
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    $i54 := $sub.i32($i53, 1);
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $M.16 := $store.i32($M.16, $p1, $i54);
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $i55 := $sgt.i32($i52, 0);
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $i56 := 0;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i55 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i79 := $zext.i8.i32($i56);
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    $i80 := $eq.i32($i79, 126);
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i80 == 1);
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    $i81 := $zext.i8.i32($i56);
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $i82 := $eq.i32($i81, 85);
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i82 == 1);
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $i88 := $sub.i32($i27, 1);
    call {:si_unique_call 398} {:cexpr "read_stop"} boogie_si_record_i32($i88);
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $i89 := $sgt.i32($i27, 0);
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    $i90, $i91, $i92 := $i28, $i29, $i30;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    $p94 := $load.ref($M.0, $p93);
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p94, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} dev_err.ref.ref($p95, .str.18);
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    $i96, $i97, $i98 := $i90, $i91, $i92;
    goto $bb43;

  $bb41:
    assume $i89 == 1;
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    $i83, $i84, $i85, $i86, $i87 := $i26, $i88, $i28, $i29, $i30;
    goto $bb40;

  $bb38:
    assume $i82 == 1;
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    $i83, $i84, $i85, $i86, $i87 := $i26, $i27, $i28, $i29, $i30;
    goto $bb40;

  $bb36:
    assume $i80 == 1;
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb22:
    assume $i55 == 1;
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    $i57, $p58, $p59 := 0, $p2, $p50;
    goto $bb25;

  $bb25:
    call $p60, $i61, $i62, $i63, $i64, $i65, $p66, $i68, $i70, $i71, $p72, $p69, $p67, $i73, $i74, $i75, $i76, $i77, $i57, $p58, $p59, $i78 := ftdi_elan_synchronize_loop_$bb25($p1, $p60, $i61, $i62, $i63, $i64, $i65, $p66, $i68, $i70, $i71, $p72, $p69, $p67, $i73, $i74, $i75, $i76, $i77, $i57, $p58, $p59, $i78);
    goto $bb25_last;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($p59, $mul.ref(1, 1));
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    $i61 := $load.i8($M.0, $p59);
    call {:si_unique_call 391} {:cexpr "c"} boogie_si_record_i8($i61);
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    $i62 := $slt.i32($i57, 31);
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i62 == 1);
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    $i68 := $sgt.i32($i57, 31);
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i68 == 1);
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} $i70 := sprintf.ref.ref($p58, .str.5);
    call {:si_unique_call 397} {:cexpr "tmp___2"} boogie_si_record_i32($i70);
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $i71 := $sext.i32.i64($i70);
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($p58, $mul.ref($i71, 1));
    assume {:verifier.code 0} true;
    $p69 := $p72;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p67 := $p69;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    $i73 := $add.i32($i57, 1);
    call {:si_unique_call 394} {:cexpr "bytes_read"} boogie_si_record_i32($i73);
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.16, $p1);
    call {:si_unique_call 395} {:cexpr "tmp___3"} boogie_si_record_i32($i74);
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.16, $p1);
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    $i76 := $sub.i32($i75, 1);
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $M.16 := $store.i32($M.16, $p1, $i76);
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    $i77 := $sgt.i32($i74, 0);
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    $i78 := $i61;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    $i56 := $i78;
    goto $bb24;

  $bb33:
    assume $i77 == 1;
    assume {:verifier.code 0} true;
    $i57, $p58, $p59 := $i73, $p67, $p60;
    goto $bb33_dummy;

  $bb30:
    assume $i68 == 1;
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $p69 := $p58;
    goto $bb32;

  $bb27:
    assume $i62 == 1;
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    $i63 := $zext.i8.i32($i61);
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} $i64 := sprintf.ref.ref.i32($p58, .str.4, $i63);
    call {:si_unique_call 393} {:cexpr "tmp___1"} boogie_si_record_i32($i64);
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    $i65 := $sext.i32.i64($i64);
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($p58, $mul.ref($i65, 1));
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    $p67 := $p66;
    goto $bb29;

  $bb13:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    $i24 := $i20;
    goto $bb16;

  $bb10:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    $i5 := $i17;
    goto $bb3;

  $bb7:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    $i5 := $i14;
    goto $bb3;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    $i5 := $i3;
    goto $bb3;

  $bb33_dummy:
    assume false;
    return;

  $bb25_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1829;

  corral_source_split_1875_dummy:
    assume false;
    return;

  $bb19_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1791;

  $bb55_dummy:
    assume false;
    return;

  $bb15_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb44_dummy:
    assume false;
    return;

  $bb5_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1768;
}



const ftdi_respond_queue_work: ref;

axiom ftdi_respond_queue_work == $sub.ref(0, 304211);

procedure ftdi_respond_queue_work($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.7, $M.6, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12;



implementation ftdi_respond_queue_work($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i8;
  var $i7: i1;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} {:cexpr "ftdi_respond_queue_work:arg:delta"} boogie_si_record_i32($i1);
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    $p2 := $M.18;
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5672, 1));
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    $i4 := $zext.i32.i64($i1);
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} $i5 := queue_delayed_work($p2, $p3, $i4);
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i5);
    call {:si_unique_call 423} {:cexpr "tmp"} boogie_si_record_i8($i6);
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7436, 1));
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} kref_get($p8);
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ftdi_elan_stuck_waiting: ref;

axiom ftdi_elan_stuck_waiting == $sub.ref(0, 305243);

procedure ftdi_elan_stuck_waiting($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.16, $M.20, $CurrAddr;



implementation ftdi_elan_stuck_waiting($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $p38: ref;
  var $i39: i8;
  var $i40: i1;
  var $i41: i32;
  var $i42: i32;
  var $i43: i32;
  var $i44: i64;
  var $p45: ref;
  var $i47: i1;
  var $i49: i32;
  var $i50: i64;
  var $p51: ref;
  var $p48: ref;
  var $p46: ref;
  var $i52: i32;
  var $i53: i32;
  var $i54: i32;
  var $i55: i32;
  var $i56: i1;
  var $i35: i32;
  var $p36: ref;
  var $p37: ref;
  var $i26: i32;
  var $i57: i32;
  var $i58: i1;
  var $i59: i32;
  var $i60: i32;
  var $p61: ref;
  var $p62: ref;
  var $i63: i8;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i8;
  var $i68: i32;
  var $i69: i1;
  var $i70: i32;
  var $i71: i1;
  var $i73: i32;
  var $i74: i1;
  var $i75: i32;
  var $i76: i32;
  var $i77: i32;
  var $i78: i32;
  var $i79: i1;
  var $i80: i32;
  var $i81: i32;
  var $p82: ref;
  var $p83: ref;
  var $i84: i8;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $i88: i32;
  var $i89: i32;
  var $i90: i1;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $i94: i1;
  var $i95: i32;
  var $i96: i32;
  var $i97: i1;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $i101: i1;
  var $i103: i32;
  var $i104: i1;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $i102: i32;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $i72: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 426} $p2 := $alloc($mul.ref(94, $zext.i32.i64(1)));
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    $i3, $i4, $i5 := 50, 5, 10;
    goto $bb1;

  $bb1:
    call $i3, $i4, $i5, $i6, $i7, $i8, $p9, $p10, $p11, $i12, $i13, $i14, $p15, $p16, $i17, $p18, $p19, $p20, $i21, $i22, $i23, $i24, $i25, $p28, $p29, $p30, $i31, $i32, $i33, $i34, $p38, $i39, $i40, $i41, $i42, $i43, $i44, $p45, $i47, $i49, $i50, $p51, $p48, $p46, $i52, $i53, $i54, $i55, $i56, $i35, $p36, $p37, $i26, $i57, $i58, $i59, $i60, $p61, $p62, $i63, $p64, $p65, $p66, $i67, $i68, $i69, $i70, $i71, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $p82, $p83, $i84, $p85, $p86, $p87, $i88, $i89, $i90, $i94, $i95, $i96, $i97, $i101, $i103, $i104, $i102 := ftdi_elan_stuck_waiting_loop_$bb1($p0, $p1, $p2, $i3, $i4, $i5, $i6, $i7, $i8, $p9, $p10, $p11, $i12, $i13, $i14, $p15, $p16, $i17, $p18, $p19, $p20, $i21, $i22, $i23, $i24, $i25, $p28, $p29, $p30, $i31, $i32, $i33, $i34, $p38, $i39, $i40, $i41, $i42, $i43, $i44, $p45, $i47, $i49, $i50, $p51, $p48, $p46, $i52, $i53, $i54, $i55, $i56, $i35, $p36, $p37, $i26, $i57, $i58, $i59, $i60, $p61, $p62, $i63, $p64, $p65, $p66, $i67, $i68, $i69, $i70, $i71, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $p82, $p83, $i84, $p85, $p86, $p87, $i88, $i89, $i90, $i94, $i95, $i96, $i97, $i101, $i103, $i104, $i102);
    goto $bb1_last;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    $i6, $i7 := $i4, $i5;
    goto $bb2;

  $bb2:
    call $i6, $i7, $i8, $p9, $p10, $p11, $i12, $i13, $i14, $p15, $p16, $i17, $p18, $p19, $p20, $i21, $i22, $i23, $i24, $i25, $p28, $p29, $p30, $i31, $i32, $i33, $i34, $p38, $i39, $i40, $i41, $i42, $i43, $i44, $p45, $i47, $i49, $i50, $p51, $p48, $p46, $i52, $i53, $i54, $i55, $i56, $i35, $p36, $p37, $i26, $i57, $i58, $i59, $i60, $i78, $i79, $i80, $i81, $i94, $i95, $i96, $i97, $i101, $i103, $i104, $i102 := ftdi_elan_stuck_waiting_loop_$bb2($p0, $p1, $p2, $i6, $i7, $i8, $p9, $p10, $p11, $i12, $i13, $i14, $p15, $p16, $i17, $p18, $p19, $p20, $i21, $i22, $i23, $i24, $i25, $p28, $p29, $p30, $i31, $i32, $i33, $i34, $p38, $i39, $i40, $i41, $i42, $i43, $i44, $p45, $i47, $i49, $i50, $p51, $p48, $p46, $i52, $i53, $i54, $i55, $i56, $i35, $p36, $p37, $i26, $i57, $i58, $i59, $i60, $i78, $i79, $i80, $i81, $i94, $i95, $i96, $i97, $i101, $i103, $i104, $i102);
    goto $bb2_last;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $i8 := $i7;
    goto $bb3;

  $bb3:
    call $i8, $p9, $p10, $p11, $i12, $i13, $i14, $p15, $p16, $i17, $p18, $p19, $p20, $i21, $i22, $i23, $i24, $i25, $p28, $p29, $p30, $i31, $i32, $i33, $i34, $p38, $i39, $i40, $i41, $i42, $i43, $i44, $p45, $i47, $i49, $i50, $p51, $p48, $p46, $i52, $i53, $i54, $i55, $i56, $i35, $p36, $p37, $i26, $i57, $i58, $i59, $i60, $i78, $i79, $i80, $i81, $i94, $i95, $i101, $i103, $i104, $i102 := ftdi_elan_stuck_waiting_loop_$bb3($p0, $p1, $p2, $i6, $i8, $p9, $p10, $p11, $i12, $i13, $i14, $p15, $p16, $i17, $p18, $p19, $p20, $i21, $i22, $i23, $i24, $i25, $p28, $p29, $p30, $i31, $i32, $i33, $i34, $p38, $i39, $i40, $i41, $i42, $i43, $i44, $p45, $i47, $i49, $i50, $p51, $p48, $p46, $i52, $i53, $i54, $i55, $i56, $i35, $p36, $p37, $i26, $i57, $i58, $i59, $i60, $i78, $i79, $i80, $i81, $i94, $i95, $i101, $i103, $i104, $i102);
    goto $bb3_last;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p9, $p10, $p11, $i12, $i13, $i14, $p15, $p16, $i17, $p18, $p19, $p20, $i21, $i22, $i23, $i24, $i25, $p28, $p29, $p30, $i31, $i32, $i33, $i34, $p38, $i39, $i40, $i41, $i42, $i43, $i44, $p45, $i47, $i49, $i50, $p51, $p48, $p46, $i52, $i53, $i54, $i55, $i56, $i35, $p36, $p37, $i26 := ftdi_elan_stuck_waiting_loop_$bb4($p0, $p1, $p2, $p9, $p10, $p11, $i12, $i13, $i14, $p15, $p16, $i17, $p18, $p19, $p20, $i21, $i22, $i23, $i24, $i25, $p28, $p29, $p30, $i31, $i32, $i33, $i34, $p38, $i39, $i40, $i41, $i42, $i43, $i44, $p45, $i47, $i49, $i50, $p51, $p48, $p46, $i52, $i53, $i54, $i55, $i56, $i35, $p36, $p37, $i26);
    goto $bb4_last;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7432, 1));
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} $i14 := __create_pipe($p10, $i13);
    call {:si_unique_call 428} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    $i17 := $or.i32($i14, $sub.i32(0, 1073741696));
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7400, 1));
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7408, 1));
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.0, $p20);
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i64.i32($i21);
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} $i23 := usb_bulk_msg($p16, $i17, $p19, $i22, $p1, 1000);
    call {:si_unique_call 430} {:cexpr "tmp___0"} boogie_si_record_i32($i23);
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.16, $p1);
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $i25 := $sgt.i32($i24, 2);
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $i26 := $i23;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.16, $p1);
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $i58 := $sgt.i32($i57, 1);
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $i59, $i60 := $i6, $i8;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i58 == 1);
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.16, $p1);
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $i79 := $sgt.i32($i78, 0);
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    $i80, $i81 := $i6, $i8;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i79 == 1);
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    $i94 := $eq.i32($i26, $sub.i32(0, 110));
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    $i95 := $i8;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i94 == 1);
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    $i101 := $eq.i32($i26, 0);
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $i102 := $i26;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    $p109 := $load.ref($M.0, $p108);
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p109, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} dev_err.ref.ref.i32($p110, .str.21, $i102);
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $i72 := $sub.i32(0, 12);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    $r := $i72;
    return;

  $bb40:
    assume $i101 == 1;
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    $i103 := $sub.i32($i8, 1);
    call {:si_unique_call 450} {:cexpr "retry_on_empty"} boogie_si_record_i32($i103);
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    $i104 := $sgt.i32($i8, 0);
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i104 == 1);
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    $p106 := $load.ref($M.0, $p105);
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p106, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} dev_err.ref.ref($p107, .str.20);
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    $i72 := $sub.i32(0, 12);
    goto $bb28;

  $bb42:
    assume $i104 == 1;
    assume {:verifier.code 0} true;
    $i8 := $i103;
    goto $bb42_dummy;

  $bb36:
    assume $i94 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $i96 := $sub.i32($i6, 1);
    call {:si_unique_call 448} {:cexpr "retry_on_timeout"} boogie_si_record_i32($i96);
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    $i97 := $sgt.i32($i6, 0);
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i97 == 1);
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    $p99 := $load.ref($M.0, $p98);
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p99, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} dev_err.ref.ref($p100, .str.19);
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    $i72 := $sub.i32(0, 12);
    goto $bb28;

  $bb38:
    assume $i97 == 1;
    assume {:verifier.code 0} true;
    $i6, $i7 := $i96, $i95;
    goto $bb38_dummy;

  $bb32:
    assume $i79 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7400, 1));
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.0, $p82);
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $i84 := $load.i8($M.0, $p83);
    call {:si_unique_call 443} {:cexpr "b1"} boogie_si_record_i8($i84);
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.0, $p85);
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p86, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    $i88 := $sext.i8.i32($i84);
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} dev_err.ref.ref.i32($p87, .str.24, $i88);
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    $i89 := $sub.i32($i3, 1);
    call {:si_unique_call 445} {:cexpr "retry_on_status"} boogie_si_record_i32($i89);
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $i90 := $sgt.i32($i3, 0);
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i90 == 1);
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.0, $p91);
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p92, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} dev_err.ref.ref($p93, .str.23);
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    $i72 := $sub.i32(0, 14);
    goto $bb28;

  $bb34:
    assume $i90 == 1;
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} msleep(5);
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    $i75, $i76, $i77 := $i80, $i81, $i89;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    $i3, $i4, $i5 := $i77, $i75, $i76;
    goto corral_source_split_2132_dummy;

  $bb21:
    assume $i58 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7400, 1));
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    $i63 := $load.i8($M.0, $p62);
    call {:si_unique_call 439} {:cexpr "s1"} boogie_si_record_i8($i63);
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7400, 1));
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p64);
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($p65, $mul.ref(1, 1));
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $i67 := $load.i8($M.0, $p66);
    call {:si_unique_call 440} {:cexpr "s2"} boogie_si_record_i8($i67);
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    $i68 := $sext.i8.i32($i63);
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    $i69 := $eq.i32($i68, 49);
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i69 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i73 := $sub.i32($i3, 1);
    call {:si_unique_call 441} {:cexpr "retry_on_status"} boogie_si_record_i32($i73);
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $i74 := $sgt.i32($i3, 0);
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i74 == 1);
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    $i72 := $sub.i32(0, 14);
    goto $bb28;

  $bb29:
    assume $i74 == 1;
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 442} msleep(5);
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    $i75, $i76, $i77 := $i59, $i60, $i73;
    goto $bb31;

  $bb23:
    assume $i69 == 1;
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    $i70 := $sext.i8.i32($i67);
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $i71 := $eq.i32($i70, 96);
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i71 == 1);
    goto $bb25;

  $bb26:
    assume $i71 == 1;
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    $i72 := 0;
    goto $bb28;

  $bb5:
    assume $i25 == 1;
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7400, 1));
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 94)), $mul.ref(0, 1));
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    $M.20 := $store.i8($M.20, $p30, 0);
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.16, $p1);
    call {:si_unique_call 431} {:cexpr "tmp___4"} boogie_si_record_i32($i31);
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.16, $p1);
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $i33 := $sub.i32($i32, 1);
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $M.16 := $store.i32($M.16, $p1, $i33);
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    $i34 := $sgt.i32($i31, 0);
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb20_dummy;

  $bb7:
    assume $i34 == 1;
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    $i35, $p36, $p37 := 0, $p29, $p2;
    goto $bb10;

  $bb10:
    call $p38, $i39, $i40, $i41, $i42, $i43, $i44, $p45, $i47, $i49, $i50, $p51, $p48, $p46, $i52, $i53, $i54, $i55, $i56, $i35, $p36, $p37 := ftdi_elan_stuck_waiting_loop_$bb10($p1, $p38, $i39, $i40, $i41, $i42, $i43, $i44, $p45, $i47, $i49, $i50, $p51, $p48, $p46, $i52, $i53, $i54, $i55, $i56, $i35, $p36, $p37);
    goto $bb10_last;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($p36, $mul.ref(1, 1));
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.0, $p36);
    call {:si_unique_call 432} {:cexpr "c"} boogie_si_record_i8($i39);
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    $i40 := $slt.i32($i35, 31);
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i40 == 1);
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $i47 := $sgt.i32($i35, 31);
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i47 == 1);
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} $i49 := sprintf.ref.ref($p37, .str.5);
    call {:si_unique_call 438} {:cexpr "tmp___3"} boogie_si_record_i32($i49);
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    $i50 := $sext.i32.i64($i49);
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($p37, $mul.ref($i50, 1));
    assume {:verifier.code 0} true;
    $p48 := $p51;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p46 := $p48;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $i52 := $add.i32($i35, 1);
    call {:si_unique_call 435} {:cexpr "bytes_read"} boogie_si_record_i32($i52);
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.16, $p1);
    call {:si_unique_call 436} {:cexpr "tmp___4"} boogie_si_record_i32($i53);
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.16, $p1);
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    $i55 := $sub.i32($i54, 1);
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    $M.16 := $store.i32($M.16, $p1, $i55);
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    $i56 := $sgt.i32($i53, 0);
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i56 == 1);
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb18:
    assume $i56 == 1;
    assume {:verifier.code 0} true;
    $i35, $p36, $p37 := $i52, $p38, $p46;
    goto $bb18_dummy;

  $bb15:
    assume $i47 == 1;
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    $p48 := $p37;
    goto $bb17;

  $bb12:
    assume $i40 == 1;
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $i41 := $sext.i8.i32($i39);
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    $i42 := $and.i32($i41, 255);
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} $i43 := sprintf.ref.ref.i32($p37, .str.4, $i42);
    call {:si_unique_call 434} {:cexpr "tmp___2"} boogie_si_record_i32($i43);
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $i44 := $sext.i32.i64($i43);
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($p37, $mul.ref($i44, 1));
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    $p46 := $p45;
    goto $bb14;

  $bb18_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2069;

  $bb20_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    $M.16 := $store.i32($M.16, $p1, 0);
    goto corral_source_split_2032;

  $bb42_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2030;

  $bb38_dummy:
    assume false;
    return;

  $bb2_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2028;

  corral_source_split_2132_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2026;
}



const ftdi_elan_enumeratePCI: ref;

axiom ftdi_elan_enumeratePCI == $sub.ref(0, 306275);

procedure ftdi_elan_enumeratePCI($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.4, assertsPassed, $M.7, $M.6, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12;



implementation ftdi_elan_enumeratePCI($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i32;
  var $i29: i8;
  var $i30: i32;
  var $i31: i32;
  var $i32: i8;
  var $i33: i32;
  var $i34: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} $i2 := ftdi_elan_read_reg($p0, $p1);
    goto SeqInstr_199, SeqInstr_200;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  SeqInstr_201:
    call {:si_unique_call 455} {:cexpr "UxxxStatus"} boogie_si_record_i32($i2);
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} $i5 := ftdi_elan_write_reg($p0, 0);
    goto SeqInstr_202, SeqInstr_203;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  SeqInstr_204:
    call {:si_unique_call 457} {:cexpr "UxxxStatus"} boogie_si_record_i32($i5);
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 458} msleep(750);
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 459} $i7 := ftdi_elan_write_reg($p0, 768);
    goto SeqInstr_205, SeqInstr_206;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  SeqInstr_207:
    call {:si_unique_call 460} {:cexpr "UxxxStatus"} boogie_si_record_i32($i7);
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} $i9 := ftdi_elan_write_reg($p0, 1792);
    goto SeqInstr_208, SeqInstr_209;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  SeqInstr_210:
    call {:si_unique_call 462} {:cexpr "UxxxStatus"} boogie_si_record_i32($i9);
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} $i11 := ftdi_elan_read_reg($p0, $p1);
    goto SeqInstr_211, SeqInstr_212;

  SeqInstr_212:
    assume assertsPassed;
    goto SeqInstr_213;

  SeqInstr_213:
    call {:si_unique_call 464} {:cexpr "UxxxStatus"} boogie_si_record_i32($i11);
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} $i13 := ftdi_elan_write_reg($p0, 524);
    goto SeqInstr_214, SeqInstr_215;

  SeqInstr_215:
    assume assertsPassed;
    goto SeqInstr_216;

  SeqInstr_216:
    call {:si_unique_call 466} {:cexpr "UxxxStatus"} boogie_si_record_i32($i13);
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} $i15 := ftdi_elan_write_reg($p0, 525);
    goto SeqInstr_217, SeqInstr_218;

  SeqInstr_218:
    assume assertsPassed;
    goto SeqInstr_219;

  SeqInstr_219:
    call {:si_unique_call 468} {:cexpr "UxxxStatus"} boogie_si_record_i32($i15);
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} msleep(250);
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} $i17 := ftdi_elan_write_reg($p0, 527);
    goto SeqInstr_220, SeqInstr_221;

  SeqInstr_221:
    assume assertsPassed;
    goto SeqInstr_222;

  SeqInstr_222:
    call {:si_unique_call 471} {:cexpr "UxxxStatus"} boogie_si_record_i32($i17);
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 472} $i19 := ftdi_elan_read_reg($p0, $p1);
    goto SeqInstr_223, SeqInstr_224;

  SeqInstr_224:
    assume assertsPassed;
    goto SeqInstr_225;

  SeqInstr_225:
    call {:si_unique_call 473} {:cexpr "UxxxStatus"} boogie_si_record_i32($i19);
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 474} $i21 := ftdi_elan_write_reg($p0, 2655);
    goto SeqInstr_226, SeqInstr_227;

  SeqInstr_227:
    assume assertsPassed;
    goto SeqInstr_228;

  SeqInstr_228:
    call {:si_unique_call 475} {:cexpr "UxxxStatus"} boogie_si_record_i32($i21);
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} $i23 := ftdi_elan_read_reg($p0, $p1);
    goto SeqInstr_229, SeqInstr_230;

  SeqInstr_230:
    assume assertsPassed;
    goto SeqInstr_231;

  SeqInstr_231:
    call {:si_unique_call 477} {:cexpr "UxxxStatus"} boogie_si_record_i32($i23);
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} $i25 := ftdi_elan_read_reg($p0, $p1);
    goto SeqInstr_232, SeqInstr_233;

  SeqInstr_233:
    assume assertsPassed;
    goto SeqInstr_234;

  SeqInstr_234:
    call {:si_unique_call 479} {:cexpr "UxxxStatus"} boogie_si_record_i32($i25);
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} msleep(1000);
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p1);
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $i28 := $lshr.i32($i27, 16);
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i32.i8($i28);
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i29);
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    $i31 := $and.i32($i30, 15);
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i32.i8($i31);
    call {:si_unique_call 481} {:cexpr "sensebits"} boogie_si_record_i8($i32);
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i32);
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 13);
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i34 == 1);
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 6);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb38:
    assume $i34 == 1;
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb35:
    assume $i26 == 1;
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    $i4 := $i25;
    goto $bb3;

  SeqInstr_232:
    assume !assertsPassed;
    return;

  $bb32:
    assume $i24 == 1;
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    $i4 := $i23;
    goto $bb3;

  SeqInstr_229:
    assume !assertsPassed;
    return;

  $bb29:
    assume $i22 == 1;
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    $i4 := $i21;
    goto $bb3;

  SeqInstr_226:
    assume !assertsPassed;
    return;

  $bb26:
    assume $i20 == 1;
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    $i4 := $i19;
    goto $bb3;

  SeqInstr_223:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i18 == 1;
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $i4 := $i17;
    goto $bb3;

  SeqInstr_220:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i16 == 1;
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    $i4 := $i15;
    goto $bb3;

  SeqInstr_217:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i14 == 1;
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    $i4 := $i13;
    goto $bb3;

  SeqInstr_214:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i12 == 1;
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    $i4 := $i11;
    goto $bb3;

  SeqInstr_211:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i10 == 1;
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    $i4 := $i9;
    goto $bb3;

  SeqInstr_208:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i8 == 1;
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $i4 := $i7;
    goto $bb3;

  SeqInstr_205:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i6 == 1;
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    $i4 := $i5;
    goto $bb3;

  SeqInstr_202:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    $i4 := $i2;
    goto $bb3;

  SeqInstr_199:
    assume !assertsPassed;
    return;
}



const ftdi_elan_setupOHCI: ref;

axiom ftdi_elan_setupOHCI == $sub.ref(0, 307307);

procedure ftdi_elan_setupOHCI($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.4, assertsPassed, $M.7, $M.6, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12;



implementation ftdi_elan_setupOHCI($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $i19: i1;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $i27: i1;
  var $i28: i1;
  var $i29: i32;
  var $i30: i32;
  var $i31: i32;
  var $i36: i1;
  var $i37: i1;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $i45: i1;
  var $i46: i1;
  var $i47: i32;
  var $i48: i32;
  var $i49: i32;
  var $i54: i1;
  var $i55: i1;
  var $i56: i32;
  var $i57: i32;
  var $i58: i32;
  var $i63: i1;
  var $i64: i1;
  var $i65: i32;
  var $i66: i32;
  var $i67: i32;
  var $i71: i32;
  var $i72: i1;
  var $i74: i32;
  var $i73: i32;
  var $i68: i32;
  var $i69: i32;
  var $i70: i32;
  var $i59: i8;
  var $i60: i32;
  var $i61: i32;
  var $i62: i32;
  var $i50: i8;
  var $i51: i32;
  var $i52: i32;
  var $i53: i32;
  var $i41: i8;
  var $i42: i32;
  var $i43: i32;
  var $i44: i32;
  var $i32: i8;
  var $i33: i32;
  var $i34: i32;
  var $i35: i32;
  var $i23: i8;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $i75: i1;
  var $i76: i32;
  var $i77: i32;
  var $p78: ref;
  var $i79: i16;
  var $p81: ref;
  var $i82: i16;
  var $p84: ref;
  var $i85: i32;
  var $i86: i32;
  var $i87: i32;
  var $i88: i8;
  var $i89: i32;
  var $i90: i1;
  var $i3: i8;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i91: i32;
  var $i92: i32;
  var $p93: ref;
  var $i94: i32;
  var $i95: i1;
  var $p96: ref;
  var $i97: i32;
  var $i98: i32;
  var $i99: i32;
  var $i100: i1;
  var $i101: i1;
  var $i102: i1;
  var $p103: ref;
  var $i104: i8;
  var $i105: i8;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5076, 1));
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 0);
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $i3, $i4, $i5, $i6 := 0, 0, 0, 0;
    goto $bb1;

  $bb1:
    call $i7, $i8, $i9, $i10, $i11, $i12, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i27, $i28, $i29, $i30, $i31, $i36, $i37, $i38, $i39, $i40, $i45, $i46, $i47, $i48, $i49, $i54, $i55, $i56, $i57, $i58, $i63, $i64, $i65, $i66, $i67, $i71, $i72, $i74, $i73, $i68, $i69, $i70, $i59, $i60, $i61, $i62, $i50, $i51, $i52, $i53, $i41, $i42, $i43, $i44, $i32, $i33, $i34, $i35, $i23, $i24, $i25, $i26, $i75, $i76, $i77, $p78, $i79, $p81, $i82, $p84, $i85, $i86, $i87, $i88, $i89, $i90, $i3, $i4, $i5, $i6, $i91, $i92 := ftdi_elan_setupOHCI_loop_$bb1($p0, $p1, $i7, $i8, $i9, $i10, $i11, $i12, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i27, $i28, $i29, $i30, $i31, $i36, $i37, $i38, $i39, $i40, $i45, $i46, $i47, $i48, $i49, $i54, $i55, $i56, $i57, $i58, $i63, $i64, $i65, $i66, $i67, $i71, $i72, $i74, $i73, $i68, $i69, $i70, $i59, $i60, $i61, $i62, $i50, $i51, $i52, $i53, $i41, $i42, $i43, $i44, $i32, $i33, $i34, $i35, $i23, $i24, $i25, $i26, $i75, $i76, $i77, $p78, $i79, $p81, $i82, $p84, $i85, $i86, $i87, $i88, $i89, $i90, $i3, $i4, $i5, $i6, $i91, $i92);
    goto $bb1_last;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i3);
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    $i8 := $shl.i32($i7, 8);
    call {:si_unique_call 483} {:cexpr "activePCIfn"} boogie_si_record_i32($i8);
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $i9 := $or.i32($i8, 0);
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} $i10 := ftdi_elan_read_config($p0, $i9, 0, $p1);
    goto SeqInstr_235, SeqInstr_236;

  SeqInstr_236:
    assume assertsPassed;
    goto SeqInstr_237;

  SeqInstr_237:
    call {:si_unique_call 485} {:cexpr "UxxxStatus"} boogie_si_record_i32($i10);
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    $i12 := $i10;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p1);
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i14, 65535);
    call {:si_unique_call 486} {:cexpr "pciVID"} boogie_si_record_i32($i15);
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p1);
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    $i17 := $lshr.i32($i16, 16);
    call {:si_unique_call 487} {:cexpr "pciPID"} boogie_si_record_i32($i17);
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i15, 4165);
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i15, 4147);
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i15, 4281);
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i15, 4545);
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i45 == 1);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i15, 4130);
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i54 == 1);
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i63 := $eq.i32($i15, 3601);
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !($i63 == 1);
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.0, $p1);
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    $i72 := $eq.i32($i71, 0);
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i72 == 1);
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    $i74 := $add.i32($i6, 1);
    call {:si_unique_call 506} {:cexpr "unrecognized"} boogie_si_record_i32($i74);
    assume {:verifier.code 0} true;
    $i73 := $i74;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i68, $i69, $i70 := $i73, $i5, 0;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i59, $i60, $i61, $i62 := $i3, $i68, $i69, $i70;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i50, $i51, $i52, $i53 := $i59, $i60, $i61, $i62;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i41, $i42, $i43, $i44 := $i50, $i51, $i52, $i53;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i32, $i33, $i34, $i35 := $i41, $i42, $i43, $i44;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i23, $i24, $i25, $i26 := $i32, $i33, $i34, $i35;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    $i75 := $sgt.i32($i26, $i4);
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    $i85 := $i4;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    $i86 := $zext.i8.i32($i23);
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    $i87 := $add.i32($i86, 1);
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    $i88 := $trunc.i32.i8($i87);
    call {:si_unique_call 507} {:cexpr "fn"} boogie_si_record_i8($i88);
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $i89 := $zext.i8.i32($i88);
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    $i90 := $ule.i32($i89, 3);
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    $i91, $i92 := $i24, $i25;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5076, 1));
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    $i94 := $load.i32($M.0, $p93);
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    $i95 := $sgt.i32($i94, 0);
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    assume {:branchcond $i95} true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i95 == 1);
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    $i101 := $sgt.i32($i92, 0);
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i101 == 1);
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    $i102 := $sgt.i32($i91, 0);
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i102 == 1);
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5072, 1));
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $i104 := $load.i8($M.0, $p103);
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    $i105 := $and.i8($i104, $sub.i8(0, 3));
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p103, $i105);
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 6);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb59:
    assume $i102 == 1;
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 6);
    goto $bb5;

  $bb57:
    assume $i101 == 1;
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 6);
    goto $bb5;

  $bb52:
    assume $i95 == 1;
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5076, 1));
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    $i97 := $load.i32($M.0, $p96);
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    $i98 := $add.i32($i97, $sub.i32(0, 1));
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} $i99 := ftdi_elan_setup_controller($p0, $i98);
    goto SeqInstr_256, SeqInstr_257;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  SeqInstr_258:
    call {:si_unique_call 509} {:cexpr "UxxxStatus"} boogie_si_record_i32($i99);
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    $i100 := $ne.i32($i99, 0);
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb5;

  $bb54:
    assume $i100 == 1;
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    $i13 := $i99;
    goto $bb5;

  SeqInstr_256:
    assume !assertsPassed;
    return;

  $bb49:
    assume $i90 == 1;
    assume {:verifier.code 0} true;
    $i3, $i4, $i5, $i6 := $i88, $i85, $i25, $i24;
    goto $bb49_dummy;

  $bb46:
    assume $i75 == 1;
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    $i76 := $zext.i8.i32($i23);
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    $i77 := $add.i32($i76, 1);
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5076, 1));
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p78, $i77);
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    $i79 := $trunc.i32.i16($i15);
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5896, 1)), $mul.ref(0, 1));
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p81, $i79);
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    $i82 := $trunc.i32.i16($i17);
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5896, 1)), $mul.ref(2, 1));
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p84, $i82);
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $i85 := $i26;
    goto $bb48;

  $bb43:
    assume $i72 == 1;
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    $i73 := $i6;
    goto $bb45;

  $bb37:
    assume $i63 == 1;
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    $i64 := $eq.i32($i17, 41208);
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume !($i64 == 1);
    goto $bb39;

  $bb40:
    assume $i64 == 1;
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $i65 := $zext.i8.i32($i3);
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} $i66 := ftdi_elan_found_controller($p0, $i65, 32);
    goto SeqInstr_253, SeqInstr_254;

  SeqInstr_254:
    assume assertsPassed;
    goto SeqInstr_255;

  SeqInstr_255:
    call {:si_unique_call 504} {:cexpr "devices"} boogie_si_record_i32($i66);
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    $i67 := $add.i32($i5, 1);
    call {:si_unique_call 505} {:cexpr "controllers"} boogie_si_record_i32($i67);
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    $i68, $i69, $i70 := $i6, $i67, $i66;
    goto $bb42;

  SeqInstr_253:
    assume !assertsPassed;
    return;

  $bb31:
    assume $i54 == 1;
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i17, 29708);
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i55 == 1);
    goto $bb33;

  $bb34:
    assume $i55 == 1;
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i32($i3);
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} $i57 := ftdi_elan_found_controller($p0, $i56, 1);
    goto SeqInstr_250, SeqInstr_251;

  SeqInstr_251:
    assume assertsPassed;
    goto SeqInstr_252;

  SeqInstr_252:
    call {:si_unique_call 501} {:cexpr "devices"} boogie_si_record_i32($i57);
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    $i58 := $add.i32($i5, 1);
    call {:si_unique_call 502} {:cexpr "controllers"} boogie_si_record_i32($i58);
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    $i59, $i60, $i61, $i62 := $i3, $i6, $i58, $i57;
    goto $bb36;

  SeqInstr_250:
    assume !assertsPassed;
    return;

  $bb25:
    assume $i45 == 1;
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i17, 22530);
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb27;

  $bb28:
    assume $i46 == 1;
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i3);
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} $i48 := ftdi_elan_found_controller($p0, $i47, 0);
    goto SeqInstr_247, SeqInstr_248;

  SeqInstr_248:
    assume assertsPassed;
    goto SeqInstr_249;

  SeqInstr_249:
    call {:si_unique_call 498} {:cexpr "devices"} boogie_si_record_i32($i48);
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    $i49 := $add.i32($i5, 1);
    call {:si_unique_call 499} {:cexpr "controllers"} boogie_si_record_i32($i49);
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    $i50, $i51, $i52, $i53 := $i3, $i6, $i49, $i48;
    goto $bb30;

  SeqInstr_247:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i36 == 1;
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i17, 21047);
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb21;

  $bb22:
    assume $i37 == 1;
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i32($i3);
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} $i39 := ftdi_elan_found_controller($p0, $i38, 0);
    goto SeqInstr_244, SeqInstr_245;

  SeqInstr_245:
    assume assertsPassed;
    goto SeqInstr_246;

  SeqInstr_246:
    call {:si_unique_call 495} {:cexpr "devices"} boogie_si_record_i32($i39);
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    $i40 := $add.i32($i5, 1);
    call {:si_unique_call 496} {:cexpr "controllers"} boogie_si_record_i32($i40);
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    $i41, $i42, $i43, $i44 := $i3, $i6, $i40, $i39;
    goto $bb24;

  SeqInstr_244:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i27 == 1;
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i17, 53);
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb15;

  $bb16:
    assume $i28 == 1;
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i3);
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} $i30 := ftdi_elan_found_controller($p0, $i29, 0);
    goto SeqInstr_241, SeqInstr_242;

  SeqInstr_242:
    assume assertsPassed;
    goto SeqInstr_243;

  SeqInstr_243:
    call {:si_unique_call 492} {:cexpr "devices"} boogie_si_record_i32($i30);
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    $i31 := $add.i32($i5, 1);
    call {:si_unique_call 493} {:cexpr "controllers"} boogie_si_record_i32($i31);
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    $i32, $i33, $i34, $i35 := $i3, $i6, $i31, $i30;
    goto $bb18;

  SeqInstr_241:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i18 == 1;
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i17, 51297);
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb9;

  $bb10:
    assume $i19 == 1;
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i3);
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} $i21 := ftdi_elan_found_controller($p0, $i20, 0);
    goto SeqInstr_238, SeqInstr_239;

  SeqInstr_239:
    assume assertsPassed;
    goto SeqInstr_240;

  SeqInstr_240:
    call {:si_unique_call 489} {:cexpr "devices"} boogie_si_record_i32($i21);
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    $i22 := $add.i32($i5, 1);
    call {:si_unique_call 490} {:cexpr "controllers"} boogie_si_record_i32($i22);
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    $i23, $i24, $i25, $i26 := $i3, $i6, $i22, $i21;
    goto $bb12;

  SeqInstr_238:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb5;

  SeqInstr_235:
    assume !assertsPassed;
    return;

  $bb49_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2270;
}



const ftdi_elan_hcd_init: ref;

axiom ftdi_elan_hcd_init == $sub.ref(0, 308339);

procedure ftdi_elan_hcd_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation ftdi_elan_hcd_init($p0: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $p15: ref;
  var $p16: ref;
  var $p19: ref;
  var $p21: ref;
  var $p22: ref;
  var $p26: ref;
  var $p29: ref;
  var $p32: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p39: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $i7: i32;
  var vslice_dummy_var_23: i32;
  var vslice_dummy_var_24: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5920, 1)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} ftdi_elan_get_kref($p0);
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5896, 1)), $mul.ref(4, 1));
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p9, 100);
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5896, 1)), $mul.ref(16, 1));
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $0.ref);
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5080, 1));
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5920, 1)), $mul.ref(8, 1));
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, $i13);
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5920, 1));
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5920, 1)), $mul.ref(1448, 1));
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p19, $p16);
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5920, 1)), $mul.ref(1440, 1));
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, 0);
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5896, 1));
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5920, 1)), $mul.ref(16, 1)), $mul.ref(504, 1));
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p26, $p22);
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5920, 1)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p29, $0.ref);
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5920, 1)), $mul.ref(16, 1)), $mul.ref(1400, 1));
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p32, ftdi_release_platform_dev);
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5920, 1)), $mul.ref(16, 1)), $mul.ref(1160, 1));
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p35, $0.ref);
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5056, 1));
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} vslice_dummy_var_23 := snprintf.ref.i64.ref($p37, 16, .str.34);
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5056, 1));
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5920, 1)), $mul.ref(0, 1));
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p42, $p39);
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} _dev_info.ref.ref.ref($p45, .str.35, .str.34);
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} vslice_dummy_var_24 := __request_module.i1.ref(1, .str.34);
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5920, 1)), $mul.ref(0, 1));
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} _dev_info.ref.ref.ref($p49, .str.36, $p52);
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5920, 1));
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} $i54 := platform_device_register($p53);
    call {:si_unique_call 516} {:cexpr "result"} boogie_si_record_i32($i54);
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    $i7 := $i54;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 16);
    goto $bb3;
}



const ftdi_elan_checkingPCI: ref;

axiom ftdi_elan_checkingPCI == $sub.ref(0, 309371);

procedure ftdi_elan_checkingPCI($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.4, assertsPassed, $M.7, $M.6, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12;



implementation ftdi_elan_checkingPCI($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i8;
  var $i17: i8;
  var $i18: i8;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $p24: ref;
  var $i25: i32;
  var $i26: i8;
  var $i27: i32;
  var $i28: i32;
  var $i29: i8;
  var $i30: i32;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $i38: i32;
  var $p40: ref;
  var $i41: i16;
  var $i42: i32;
  var $i43: i1;
  var $p45: ref;
  var $i46: i16;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p53: ref;
  var $i54: i16;
  var $i55: i32;
  var $p57: ref;
  var $i58: i16;
  var $i59: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7440, 1));
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} $i3 := ftdi_elan_read_reg($p0, $p2);
    goto SeqInstr_259, SeqInstr_260;

  SeqInstr_260:
    assume assertsPassed;
    goto SeqInstr_261;

  SeqInstr_261:
    call {:si_unique_call 519} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7440, 1));
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 4194304);
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5076, 1));
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i32.i8($i25);
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    $i28 := $add.i32($i27, 255);
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i32.i8($i28);
    call {:si_unique_call 520} {:cexpr "fn"} boogie_si_record_i8($i29);
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i29);
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    $i31 := $shl.i32($i30, 8);
    call {:si_unique_call 521} {:cexpr "activePCIfn"} boogie_si_record_i32($i31);
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    $i32 := $or.i32($i31, 0);
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} $i33 := ftdi_elan_read_config($p0, $i32, 0, $p1);
    goto SeqInstr_262, SeqInstr_263;

  SeqInstr_263:
    assume assertsPassed;
    goto SeqInstr_264;

  SeqInstr_264:
    call {:si_unique_call 523} {:cexpr "UxxxStatus"} boogie_si_record_i32($i33);
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p1);
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    $i36 := $and.i32($i35, 65535);
    call {:si_unique_call 525} {:cexpr "pciVID"} boogie_si_record_i32($i36);
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p1);
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    $i38 := $lshr.i32($i37, 16);
    call {:si_unique_call 526} {:cexpr "pciPID"} boogie_si_record_i32($i38);
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5896, 1)), $mul.ref(0, 1));
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $i41 := $load.i16($M.0, $p40);
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $i42 := $zext.i16.i32($i41);
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, $i36);
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i43 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5896, 1)), $mul.ref(0, 1));
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    $i54 := $load.i16($M.0, $p53);
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    $i55 := $zext.i16.i32($i54);
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5896, 1)), $mul.ref(2, 1));
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $i58 := $load.i16($M.0, $p57);
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    $i59 := $zext.i16.i32($i58);
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} dev_err.ref.ref.i32.i32.i32.i32($p51, .str.38, $i55, $i36, $i59, $i38);
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 19);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb13:
    assume $i43 == 1;
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5896, 1)), $mul.ref(2, 1));
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    $i46 := $load.i16($M.0, $p45);
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    $i47 := $zext.i16.i32($i46);
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i47, $i38);
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i48 == 1);
    goto $bb15;

  $bb16:
    assume $i48 == 1;
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb10:
    assume $i34 == 1;
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    $i5 := $i33;
    goto $bb3;

  SeqInstr_262:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p0);
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p10, $mul.ref(5072, 1));
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i14 == 1);
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5072, 1));
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, $p15);
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    $i17 := $and.i8($i16, $sub.i8(0, 17));
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    $i18 := $or.i8($i17, 16);
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p15, $i18);
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7440, 1));
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} dev_err.ref.ref.i32($p21, .str.37, $i23);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 19);
    goto $bb3;

  $bb7:
    assume $i14 == 1;
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $i5 := $i3;
    goto $bb3;

  SeqInstr_259:
    assume !assertsPassed;
    return;
}



const ftdi_elan_flush_targets: ref;

axiom ftdi_elan_flush_targets == $sub.ref(0, 310403);

procedure ftdi_elan_flush_targets($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.4, assertsPassed, $M.7, $M.6, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12;



implementation ftdi_elan_flush_targets($p0: ref)
{
  var $p1: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i64;
  var $i22: i64;
  var $i24: i32;
  var $i25: i8;
  var $i26: i32;
  var $i27: i32;
  var $i28: i8;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i32;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $i50: i32;
  var $p51: ref;
  var $i52: i32;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i32;
  var $i59: i64;
  var $i60: i64;
  var $i62: i32;
  var $i63: i8;
  var $i64: i32;
  var $i65: i32;
  var $i66: i8;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i32;
  var $i78: i32;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $i82: i32;
  var $i83: i1;
  var $i84: i32;
  var $i85: i1;
  var $i2: i32;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(16, 1));
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} ldv_mutex_lock_28($p1);
    goto SeqInstr_265, SeqInstr_266;

  SeqInstr_266:
    assume assertsPassed;
    goto SeqInstr_267;

  SeqInstr_267:
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    $i2 := 3;
    goto $bb1;

  $bb1:
    call $p3, $p4, $i5, $p7, $p8, $i9, $i10, $p11, $i12, $p13, $i14, $i15, $i16, $p17, $p18, $p19, $i20, $i21, $i22, $i24, $i25, $i26, $i27, $i28, $p29, $p30, $p31, $p32, $p33, $p34, $p35, $p37, $p38, $i39, $i40, $p41, $p42, $p43, $i44, $i45, $p46, $i47, $i48, $p49, $i50, $p51, $i52, $i53, $i54, $p55, $p56, $p57, $i58, $i59, $i60, $i62, $i63, $i64, $i65, $i66, $p67, $p68, $p69, $p70, $p71, $p72, $p73, $p75, $p76, $i77, $i78, $p79, $p80, $p81, $i82, $i83, $i84, $i85, $i2 := ftdi_elan_flush_targets_loop_$bb1($p0, $p3, $p4, $i5, $p7, $p8, $i9, $i10, $p11, $i12, $p13, $i14, $i15, $i16, $p17, $p18, $p19, $i20, $i21, $i22, $i24, $i25, $i26, $i27, $i28, $p29, $p30, $p31, $p32, $p33, $p34, $p35, $p37, $p38, $i39, $i40, $p41, $p42, $p43, $i44, $i45, $p46, $i47, $i48, $p49, $i50, $p51, $i52, $i53, $i54, $p55, $p56, $p57, $i58, $i59, $i60, $i62, $i63, $i64, $i65, $i66, $p67, $p68, $p69, $p70, $p71, $p72, $p73, $p75, $p76, $i77, $i78, $p79, $p80, $p81, $i82, $i83, $i84, $i85, $i2);
    goto $bb1_last;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(4800, 1));
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i2);
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref($i5, 64)), $mul.ref(52, 1));
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, 1);
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref($i5, 64)), $mul.ref(48, 1));
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 1);
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p4, $mul.ref($i5, 64)), $mul.ref(48, 1));
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i47, 1);
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i48 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i84 := $sub.i32($i2, 1);
    call {:si_unique_call 539} {:cexpr "ed_number"} boogie_si_record_i32($i84);
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    $i85 := $sgt.i32($i2, 0);
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(8476, 1));
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p86, 0);
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(8472, 1));
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p87, 4);
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(8480, 1));
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p88, 0);
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(16, 1));
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} ldv_mutex_unlock_33($p89);
    goto SeqInstr_280, SeqInstr_281;

  SeqInstr_281:
    assume assertsPassed;
    goto SeqInstr_282;

  SeqInstr_282:
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_280:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i85 == 1;
    assume {:verifier.code 0} true;
    $i2 := $i84;
    goto $bb23_dummy;

  $bb13:
    assume $i48 == 1;
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    call $p49, $i50, $p51, $i52, $i53, $i54, $p80, $p81, $i82, $i83 := ftdi_elan_flush_targets_loop_$bb16($p0, $p46, $p49, $i50, $p51, $i52, $i53, $i54, $p80, $p81, $i82, $i83);
    goto $bb16_last;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(180, 1));
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $p51);
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    $i53 := $sub.i32($i50, $i52);
    call {:si_unique_call 534} {:cexpr "command_size___0"} boogie_si_record_i32($i53);
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    $i54 := $sle.i32($i53, 31);
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i54 == 1);
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(16, 1));
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} ldv_mutex_unlock_31($p80);
    goto SeqInstr_274, SeqInstr_275;

  SeqInstr_275:
    assume assertsPassed;
    goto SeqInstr_276;

  SeqInstr_276:
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} msleep(100);
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(16, 1));
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} ldv_mutex_lock_32($p81);
    goto SeqInstr_277, SeqInstr_278;

  SeqInstr_278:
    assume assertsPassed;
    goto SeqInstr_279;

  SeqInstr_279:
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.0, $p46);
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $i83 := $eq.i32($i82, 1);
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i83 == 1);
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i83 == 1;
    goto $bb20_dummy;

  SeqInstr_277:
    assume !assertsPassed;
    return;

  SeqInstr_274:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i54 == 1;
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(184, 1));
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p55);
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(176, 1));
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.0, $p57);
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    $i59 := $sext.i32.i64($i58);
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $i60 := $and.i64($i59, 31);
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $i62 := $shl.i32($i2, 5);
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    $i63 := $trunc.i32.i8($i62);
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    $i64 := $sext.i8.i32($i63);
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    $i65 := $or.i32($i64, $sub.i32(0, 112));
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    $i66 := $trunc.i32.i8($i65);
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p56, $mul.ref($i60, 24)), $mul.ref(0, 1));
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p67, $i66);
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p56, $mul.ref($i60, 24)), $mul.ref(2, 1));
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p68, 0);
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p56, $mul.ref($i60, 24)), $mul.ref(4, 1));
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p69, 0);
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p56, $mul.ref($i60, 24)), $mul.ref(5, 1));
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p70, 0);
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p56, $mul.ref($i60, 24)), $mul.ref(12, 1));
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p71, 0);
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p56, $mul.ref($i60, 24)), $mul.ref(8, 1));
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p72, 0);
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p56, $mul.ref($i60, 24)), $mul.ref(8, 1));
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p56, $mul.ref($i60, 24)), $mul.ref(16, 1));
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p75, $p73);
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(176, 1));
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.0, $p76);
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    $i78 := $add.i32($i77, 1);
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(176, 1));
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p79, $i78);
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} ftdi_elan_kick_command_queue($p0);
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb3:
    assume $i10 == 1;
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    call $p11, $i12, $p13, $i14, $i15, $i16, $p42, $p43, $i44, $i45 := ftdi_elan_flush_targets_loop_$bb6($p0, $p8, $p11, $i12, $p13, $i14, $i15, $i16, $p42, $p43, $i44, $i45);
    goto $bb6_last;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(180, 1));
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32($i12, $i14);
    call {:si_unique_call 529} {:cexpr "command_size"} boogie_si_record_i32($i15);
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    $i16 := $sle.i32($i15, 31);
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i16 == 1);
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(16, 1));
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} ldv_mutex_unlock_29($p42);
    goto SeqInstr_268, SeqInstr_269;

  SeqInstr_269:
    assume assertsPassed;
    goto SeqInstr_270;

  SeqInstr_270:
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} msleep(100);
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(16, 1));
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} ldv_mutex_lock_30($p43);
    goto SeqInstr_271, SeqInstr_272;

  SeqInstr_272:
    assume assertsPassed;
    goto SeqInstr_273;

  SeqInstr_273:
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p8);
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i44, 1);
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i45 == 1);
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i45 == 1;
    goto $bb10_dummy;

  SeqInstr_271:
    assume !assertsPassed;
    return;

  SeqInstr_268:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i16 == 1;
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(184, 1));
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(176, 1));
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i20);
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    $i22 := $and.i64($i21, 31);
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    $i24 := $shl.i32($i2, 5);
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i32.i8($i24);
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    $i26 := $sext.i8.i32($i25);
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    $i27 := $or.i32($i26, $sub.i32(0, 124));
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i8($i27);
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p18, $mul.ref($i22, 24)), $mul.ref(0, 1));
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p29, $i28);
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p18, $mul.ref($i22, 24)), $mul.ref(2, 1));
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p30, 0);
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p18, $mul.ref($i22, 24)), $mul.ref(4, 1));
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p31, 0);
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p18, $mul.ref($i22, 24)), $mul.ref(5, 1));
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p32, 0);
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p18, $mul.ref($i22, 24)), $mul.ref(12, 1));
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, 0);
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p18, $mul.ref($i22, 24)), $mul.ref(8, 1));
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, 0);
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p18, $mul.ref($i22, 24)), $mul.ref(8, 1));
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p18, $mul.ref($i22, 24)), $mul.ref(16, 1));
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p37, $p35);
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(176, 1));
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    $i40 := $add.i32($i39, 1);
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(176, 1));
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p41, $i40);
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} ftdi_elan_kick_command_queue($p0);
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_265:
    assume !assertsPassed;
    return;

  $bb20_dummy:
    assume false;
    return;

  $bb16_last:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(176, 1));
    goto corral_source_split_2616;

  $bb10_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(176, 1));
    goto corral_source_split_2556;

  $bb23_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2542;
}



const ftdi_elan_cancel_targets: ref;

axiom ftdi_elan_cancel_targets == $sub.ref(0, 311435);

procedure ftdi_elan_cancel_targets($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.4, assertsPassed, $M.7, $M.6, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12;



implementation ftdi_elan_cancel_targets($p0: ref)
{
  var $p1: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i64;
  var $i22: i64;
  var $i24: i32;
  var $i25: i8;
  var $i26: i32;
  var $i27: i32;
  var $i28: i8;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i32;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $i45: i1;
  var $i46: i32;
  var $i47: i1;
  var $i2: i32;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(16, 1));
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} ldv_mutex_lock_34($p1);
    goto SeqInstr_283, SeqInstr_284;

  SeqInstr_284:
    assume assertsPassed;
    goto SeqInstr_285;

  SeqInstr_285:
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $i2 := 3;
    goto $bb1;

  $bb1:
    call $p3, $p4, $i5, $p7, $p8, $i9, $i10, $p11, $i12, $p13, $i14, $i15, $i16, $p17, $p18, $p19, $i20, $i21, $i22, $i24, $i25, $i26, $i27, $i28, $p29, $p30, $p31, $p32, $p33, $p34, $p35, $p37, $p38, $i39, $i40, $p41, $p42, $p43, $i44, $i45, $i46, $i47, $i2 := ftdi_elan_cancel_targets_loop_$bb1($p0, $p3, $p4, $i5, $p7, $p8, $i9, $i10, $p11, $i12, $p13, $i14, $i15, $i16, $p17, $p18, $p19, $i20, $i21, $i22, $i24, $i25, $i26, $i27, $i28, $p29, $p30, $p31, $p32, $p33, $p34, $p35, $p37, $p38, $i39, $i40, $p41, $p42, $p43, $i44, $i45, $i46, $i47, $i2);
    goto $bb1_last;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(4800, 1));
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i2);
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref($i5, 64)), $mul.ref(52, 1));
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, 1);
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref($i5, 64)), $mul.ref(48, 1));
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 1);
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i46 := $sub.i32($i2, 1);
    call {:si_unique_call 547} {:cexpr "ed_number"} boogie_si_record_i32($i46);
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    $i47 := $sgt.i32($i2, 0);
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(8476, 1));
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p48, 0);
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(8472, 1));
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p49, 4);
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(8480, 1));
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p50, 0);
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(16, 1));
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} ldv_mutex_unlock_37($p51);
    goto SeqInstr_292, SeqInstr_293;

  SeqInstr_293:
    assume assertsPassed;
    goto SeqInstr_294;

  SeqInstr_294:
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_292:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i47 == 1;
    assume {:verifier.code 0} true;
    $i2 := $i46;
    goto $bb13_dummy;

  $bb3:
    assume $i10 == 1;
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    call $p11, $i12, $p13, $i14, $i15, $i16, $p42, $p43, $i44, $i45 := ftdi_elan_cancel_targets_loop_$bb6($p0, $p8, $p11, $i12, $p13, $i14, $i15, $i16, $p42, $p43, $i44, $i45);
    goto $bb6_last;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(180, 1));
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32($i12, $i14);
    call {:si_unique_call 542} {:cexpr "command_size"} boogie_si_record_i32($i15);
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $i16 := $sle.i32($i15, 31);
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i16 == 1);
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(16, 1));
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} ldv_mutex_unlock_35($p42);
    goto SeqInstr_286, SeqInstr_287;

  SeqInstr_287:
    assume assertsPassed;
    goto SeqInstr_288;

  SeqInstr_288:
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} msleep(100);
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(16, 1));
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} ldv_mutex_lock_36($p43);
    goto SeqInstr_289, SeqInstr_290;

  SeqInstr_290:
    assume assertsPassed;
    goto SeqInstr_291;

  SeqInstr_291:
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p8);
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i44, 1);
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i45 == 1);
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i45 == 1;
    goto $bb10_dummy;

  SeqInstr_289:
    assume !assertsPassed;
    return;

  SeqInstr_286:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i16 == 1;
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(184, 1));
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(176, 1));
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i20);
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $i22 := $and.i64($i21, 31);
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    $i24 := $shl.i32($i2, 5);
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i32.i8($i24);
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    $i26 := $sext.i8.i32($i25);
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    $i27 := $or.i32($i26, $sub.i32(0, 124));
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i8($i27);
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p18, $mul.ref($i22, 24)), $mul.ref(0, 1));
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p29, $i28);
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p18, $mul.ref($i22, 24)), $mul.ref(2, 1));
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p30, 0);
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p18, $mul.ref($i22, 24)), $mul.ref(4, 1));
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p31, 0);
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p18, $mul.ref($i22, 24)), $mul.ref(5, 1));
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p32, 0);
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p18, $mul.ref($i22, 24)), $mul.ref(12, 1));
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, 0);
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p18, $mul.ref($i22, 24)), $mul.ref(8, 1));
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, 0);
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p18, $mul.ref($i22, 24)), $mul.ref(8, 1));
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p18, $mul.ref($i22, 24)), $mul.ref(16, 1));
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p37, $p35);
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(176, 1));
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    $i40 := $add.i32($i39, 1);
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(176, 1));
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p41, $i40);
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} ftdi_elan_kick_command_queue($p0);
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_283:
    assume !assertsPassed;
    return;

  $bb10_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(176, 1));
    goto corral_source_split_2700;

  $bb13_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2686;
}



const msecs_to_jiffies: ref;

axiom msecs_to_jiffies == $sub.ref(0, 312467);

procedure msecs_to_jiffies($i0: i32) returns ($r: i64);
  free requires assertsPassed;



implementation msecs_to_jiffies($i0: i32) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} {:cexpr "msecs_to_jiffies:arg:m"} boogie_si_record_i32($i0);
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} $i1 := __msecs_to_jiffies($i0);
    call {:si_unique_call 551} {:cexpr "tmp___0"} boogie_si_record_i64($i1);
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ftdi_status_requeue_work: ref;

axiom ftdi_status_requeue_work == $sub.ref(0, 313499);

procedure ftdi_status_requeue_work($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.7, $M.6, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12, $M.0, $M.1, $M.16, $M.19, $M.20, $M.25, $M.23, $M.24, $M.4, $CurrAddr, $M.3, $M.22, assertsPassed;



implementation ftdi_status_requeue_work($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i8;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var vslice_dummy_var_25: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} {:cexpr "ftdi_status_requeue_work:arg:delta"} boogie_si_record_i32($i1);
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    $p2 := $M.17;
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5224, 1));
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    $i4 := $zext.i32.i64($i1);
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} $i5 := queue_delayed_work($p2, $p3, $i4);
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i5);
    call {:si_unique_call 554} {:cexpr "tmp"} boogie_si_record_i8($i6);
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7436, 1));
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 555} vslice_dummy_var_25 := kref_put($p10, ftdi_elan_delete);
    goto SeqInstr_295, SeqInstr_296;

  SeqInstr_296:
    assume assertsPassed;
    goto SeqInstr_297;

  SeqInstr_297:
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_295:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;
}



const __msecs_to_jiffies: ref;

axiom __msecs_to_jiffies == $sub.ref(0, 314531);

procedure __msecs_to_jiffies($i0: i32) returns ($r: i64);
  free requires assertsPassed;



implementation __msecs_to_jiffies($i0: i32) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 556} {:cexpr "__msecs_to_jiffies:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 1} true;
    call {:si_unique_call 557} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 558} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_mutex_lock_34: ref;

axiom ldv_mutex_lock_34 == $sub.ref(0, 315563);

procedure ldv_mutex_lock_34($p0: ref);
  free requires assertsPassed;
  modifies $M.4, assertsPassed;



implementation ldv_mutex_lock_34($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 559} ldv_mutex_lock_u132_lock_of_usb_ftdi($p0);
    goto SeqInstr_298, SeqInstr_299;

  SeqInstr_299:
    assume assertsPassed;
    goto SeqInstr_300;

  SeqInstr_300:
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} mutex_lock($p0);
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_298:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_35: ref;

axiom ldv_mutex_unlock_35 == $sub.ref(0, 316595);

procedure ldv_mutex_unlock_35($p0: ref);
  free requires assertsPassed;
  modifies $M.4, assertsPassed;



implementation ldv_mutex_unlock_35($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} ldv_mutex_unlock_u132_lock_of_usb_ftdi($p0);
    goto SeqInstr_301, SeqInstr_302;

  SeqInstr_302:
    assume assertsPassed;
    goto SeqInstr_303;

  SeqInstr_303:
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} mutex_unlock($p0);
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_301:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_36: ref;

axiom ldv_mutex_lock_36 == $sub.ref(0, 317627);

procedure ldv_mutex_lock_36($p0: ref);
  free requires assertsPassed;
  modifies $M.4, assertsPassed;



implementation ldv_mutex_lock_36($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} ldv_mutex_lock_u132_lock_of_usb_ftdi($p0);
    goto SeqInstr_304, SeqInstr_305;

  SeqInstr_305:
    assume assertsPassed;
    goto SeqInstr_306;

  SeqInstr_306:
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} mutex_lock($p0);
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_304:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_37: ref;

axiom ldv_mutex_unlock_37 == $sub.ref(0, 318659);

procedure ldv_mutex_unlock_37($p0: ref);
  free requires assertsPassed;
  modifies $M.4, assertsPassed;



implementation ldv_mutex_unlock_37($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} ldv_mutex_unlock_u132_lock_of_usb_ftdi($p0);
    goto SeqInstr_307, SeqInstr_308;

  SeqInstr_308:
    assume assertsPassed;
    goto SeqInstr_309;

  SeqInstr_309:
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} mutex_unlock($p0);
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_307:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_28: ref;

axiom ldv_mutex_lock_28 == $sub.ref(0, 319691);

procedure ldv_mutex_lock_28($p0: ref);
  free requires assertsPassed;
  modifies $M.4, assertsPassed;



implementation ldv_mutex_lock_28($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 567} ldv_mutex_lock_u132_lock_of_usb_ftdi($p0);
    goto SeqInstr_310, SeqInstr_311;

  SeqInstr_311:
    assume assertsPassed;
    goto SeqInstr_312;

  SeqInstr_312:
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} mutex_lock($p0);
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_310:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_29: ref;

axiom ldv_mutex_unlock_29 == $sub.ref(0, 320723);

procedure ldv_mutex_unlock_29($p0: ref);
  free requires assertsPassed;
  modifies $M.4, assertsPassed;



implementation ldv_mutex_unlock_29($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} ldv_mutex_unlock_u132_lock_of_usb_ftdi($p0);
    goto SeqInstr_313, SeqInstr_314;

  SeqInstr_314:
    assume assertsPassed;
    goto SeqInstr_315;

  SeqInstr_315:
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} mutex_unlock($p0);
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_313:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_30: ref;

axiom ldv_mutex_lock_30 == $sub.ref(0, 321755);

procedure ldv_mutex_lock_30($p0: ref);
  free requires assertsPassed;
  modifies $M.4, assertsPassed;



implementation ldv_mutex_lock_30($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} ldv_mutex_lock_u132_lock_of_usb_ftdi($p0);
    goto SeqInstr_316, SeqInstr_317;

  SeqInstr_317:
    assume assertsPassed;
    goto SeqInstr_318;

  SeqInstr_318:
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} mutex_lock($p0);
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_316:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_31: ref;

axiom ldv_mutex_unlock_31 == $sub.ref(0, 322787);

procedure ldv_mutex_unlock_31($p0: ref);
  free requires assertsPassed;
  modifies $M.4, assertsPassed;



implementation ldv_mutex_unlock_31($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} ldv_mutex_unlock_u132_lock_of_usb_ftdi($p0);
    goto SeqInstr_319, SeqInstr_320;

  SeqInstr_320:
    assume assertsPassed;
    goto SeqInstr_321;

  SeqInstr_321:
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} mutex_unlock($p0);
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_319:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_32: ref;

axiom ldv_mutex_lock_32 == $sub.ref(0, 323819);

procedure ldv_mutex_lock_32($p0: ref);
  free requires assertsPassed;
  modifies $M.4, assertsPassed;



implementation ldv_mutex_lock_32($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} ldv_mutex_lock_u132_lock_of_usb_ftdi($p0);
    goto SeqInstr_322, SeqInstr_323;

  SeqInstr_323:
    assume assertsPassed;
    goto SeqInstr_324;

  SeqInstr_324:
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} mutex_lock($p0);
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_322:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_33: ref;

axiom ldv_mutex_unlock_33 == $sub.ref(0, 324851);

procedure ldv_mutex_unlock_33($p0: ref);
  free requires assertsPassed;
  modifies $M.4, assertsPassed;



implementation ldv_mutex_unlock_33($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} ldv_mutex_unlock_u132_lock_of_usb_ftdi($p0);
    goto SeqInstr_325, SeqInstr_326;

  SeqInstr_326:
    assume assertsPassed;
    goto SeqInstr_327;

  SeqInstr_327:
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 578} mutex_unlock($p0);
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_325:
    assume !assertsPassed;
    return;
}



const ftdi_elan_read_reg: ref;

axiom ftdi_elan_read_reg == $sub.ref(0, 325883);

procedure ftdi_elan_read_reg($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $CurrAddr, assertsPassed, $M.7, $M.6, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12;



implementation ftdi_elan_read_reg($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i64;
  var $i25: i64;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i64;
  var $i32: i64;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i32;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $i52: i32;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $p57: ref;
  var $i58: i32;
  var $i59: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 579} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5084, 1));
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    $i5 := $sgt.i32($i4, 0);
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p7, $p8, $i9, $p10, $i11, $i12, $p13, $i14, $p15, $i16, $i17, $i18, $i19, $p57, $i58, $i59 := ftdi_elan_read_reg_loop_$bb4($p0, $p3, $p7, $p8, $i9, $p10, $i11, $i12, $p13, $i14, $p15, $i16, $i17, $i18, $i19, $p57, $i58, $i59);
    goto $bb4_last;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 580} ldv_mutex_lock_56($p7);
    goto SeqInstr_328, SeqInstr_329;

  SeqInstr_329:
    assume assertsPassed;
    goto SeqInstr_330;

  SeqInstr_330:
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(176, 1));
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(180, 1));
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32($i9, $i11);
    call {:si_unique_call 581} {:cexpr "command_size"} boogie_si_record_i32($i12);
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(952, 1));
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(956, 1));
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32($i14, $i16);
    call {:si_unique_call 582} {:cexpr "respond_size"} boogie_si_record_i32($i17);
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    $i18 := $sle.i32($i12, 31);
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(16, 1));
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} ldv_mutex_unlock_58($p57);
    goto SeqInstr_331, SeqInstr_332;

  SeqInstr_332:
    assume assertsPassed;
    goto SeqInstr_333;

  SeqInstr_333:
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 584} msleep(100);
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.0, $p3);
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    $i59 := $sgt.i32($i58, 0);
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i59 == 1);
    goto $bb12_dummy;

  $bb5:
    assume $i59 == 1;
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 19);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  SeqInstr_331:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i18 == 1;
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    $i19 := $sle.i32($i17, 31);
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb9;

  $bb10:
    assume $i19 == 1;
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(184, 1));
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(176, 1));
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64($i23);
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    $i25 := $and.i64($i24, 31);
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(960, 1));
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(952, 1));
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i30);
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    $i32 := $and.i64($i31, 31);
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $sub.i32(0, 19));
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p28, $mul.ref($i32, 120)), $mul.ref(16, 1));
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p34, $p2);
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p21, $mul.ref($i25, 24)), $mul.ref(0, 1));
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p35, 0);
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p28, $mul.ref($i32, 120)), $mul.ref(0, 1));
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p36, 0);
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p21, $mul.ref($i25, 24)), $mul.ref(2, 1));
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p37, 4);
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p21, $mul.ref($i25, 24)), $mul.ref(4, 1));
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p38, 0);
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p28, $mul.ref($i32, 120)), $mul.ref(1, 1));
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p39, 0);
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p21, $mul.ref($i25, 24)), $mul.ref(5, 1));
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p40, 0);
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p21, $mul.ref($i25, 24)), $mul.ref(12, 1));
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p41, 0);
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p21, $mul.ref($i25, 24)), $mul.ref(8, 1));
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p42, 0);
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p21, $mul.ref($i25, 24)), $mul.ref(16, 1));
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p43, $0.ref);
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p28, $mul.ref($i32, 120)), $mul.ref(8, 1));
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p44, $p1);
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p28, $mul.ref($i32, 120)), $mul.ref(24, 1));
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 585} init_completion($p45);
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(176, 1));
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    $i48 := $add.i32($i47, 1);
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(176, 1));
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p49, $i48);
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(952, 1));
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    $i52 := $add.i32($i51, 1);
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(952, 1));
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p53, $i52);
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} ftdi_elan_kick_command_queue($p0);
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(16, 1));
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} ldv_mutex_unlock_57($p54);
    goto SeqInstr_334, SeqInstr_335;

  SeqInstr_335:
    assume assertsPassed;
    goto SeqInstr_336;

  SeqInstr_336:
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p28, $mul.ref($i32, 120)), $mul.ref(24, 1));
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 588} wait_for_completion($p55);
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.0, $p2);
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    $i6 := $i56;
    goto $bb6;

  SeqInstr_334:
    assume !assertsPassed;
    return;

  SeqInstr_328:
    assume !assertsPassed;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;

  $bb12_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(16, 1));
    goto corral_source_split_2836;
}



const ftdi_elan_read_config: ref;

axiom ftdi_elan_read_config == $sub.ref(0, 326915);

procedure ftdi_elan_read_config($p0: ref, $i1: i32, $i2: i8, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $CurrAddr, assertsPassed, $M.7, $M.6, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12;



implementation ftdi_elan_read_config($p0: ref, $i1: i32, $i2: i8, $p3: ref) returns ($r: i32)
{
  var $p4: ref;
  var $i5: i32;
  var $i6: i8;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i64;
  var $i29: i64;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i64;
  var $i36: i64;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $i45: i32;
  var $i46: i8;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $i55: i32;
  var $p56: ref;
  var $p57: ref;
  var $i58: i32;
  var $i59: i32;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $p64: ref;
  var $i65: i32;
  var $i66: i1;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 590} {:cexpr "ftdi_elan_read_config:arg:config_offset"} boogie_si_record_i32($i1);
    call {:si_unique_call 591} {:cexpr "ftdi_elan_read_config:arg:width"} boogie_si_record_i8($i2);
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    $i5 := $sdiv.i32($i1, 4);
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i8($i5);
    call {:si_unique_call 592} {:cexpr "addressofs"} boogie_si_record_i8($i6);
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5084, 1));
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    $i9 := $sgt.i32($i8, 0);
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i9 == 1);
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p11, $p12, $i13, $p14, $i15, $i16, $p17, $i18, $p19, $i20, $i21, $i22, $i23, $p64, $i65, $i66 := ftdi_elan_read_config_loop_$bb4($p0, $p7, $p11, $p12, $i13, $p14, $i15, $i16, $p17, $i18, $p19, $i20, $i21, $i22, $i23, $p64, $i65, $i66);
    goto $bb4_last;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} ldv_mutex_lock_59($p11);
    goto SeqInstr_337, SeqInstr_338;

  SeqInstr_338:
    assume assertsPassed;
    goto SeqInstr_339;

  SeqInstr_339:
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(176, 1));
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(180, 1));
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32($i13, $i15);
    call {:si_unique_call 594} {:cexpr "command_size"} boogie_si_record_i32($i16);
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(952, 1));
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(956, 1));
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32($i18, $i20);
    call {:si_unique_call 595} {:cexpr "respond_size"} boogie_si_record_i32($i21);
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    $i22 := $sle.i32($i16, 31);
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(16, 1));
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 596} ldv_mutex_unlock_61($p64);
    goto SeqInstr_340, SeqInstr_341;

  SeqInstr_341:
    assume assertsPassed;
    goto SeqInstr_342;

  SeqInstr_342:
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} msleep(100);
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, $p7);
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    $i66 := $sgt.i32($i65, 0);
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i66 == 1);
    goto $bb12_dummy;

  $bb5:
    assume $i66 == 1;
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 19);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  SeqInstr_340:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i22 == 1;
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    $i23 := $sle.i32($i21, 31);
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb9;

  $bb10:
    assume $i23 == 1;
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(184, 1));
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(176, 1));
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i27);
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    $i29 := $and.i64($i28, 31);
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(960, 1));
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(952, 1));
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64($i34);
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    $i36 := $and.i64($i35, 31);
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, $sub.i32(0, 19));
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p32, $mul.ref($i36, 120)), $mul.ref(16, 1));
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p38, $p4);
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p25, $mul.ref($i29, 24)), $mul.ref(0, 1));
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p39, 10);
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p32, $mul.ref($i36, 120)), $mul.ref(0, 1));
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p40, 10);
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p25, $mul.ref($i29, 24)), $mul.ref(2, 1));
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p41, 4);
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p25, $mul.ref($i29, 24)), $mul.ref(4, 1));
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p42, $i6);
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p32, $mul.ref($i36, 120)), $mul.ref(1, 1));
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p43, $i6);
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32($i2);
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    $i45 := $and.i32($i44, 15);
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i32.i8($i45);
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p25, $mul.ref($i29, 24)), $mul.ref(5, 1));
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p47, $i46);
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p25, $mul.ref($i29, 24)), $mul.ref(12, 1));
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p48, 0);
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p25, $mul.ref($i29, 24)), $mul.ref(8, 1));
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p49, 0);
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p25, $mul.ref($i29, 24)), $mul.ref(16, 1));
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p50, $0.ref);
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p32, $mul.ref($i36, 120)), $mul.ref(8, 1));
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p51, $p3);
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p32, $mul.ref($i36, 120)), $mul.ref(24, 1));
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} init_completion($p52);
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(176, 1));
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    $i55 := $add.i32($i54, 1);
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(176, 1));
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p56, $i55);
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(952, 1));
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.0, $p57);
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    $i59 := $add.i32($i58, 1);
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(952, 1));
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p60, $i59);
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} ftdi_elan_kick_command_queue($p0);
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(16, 1));
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 600} ldv_mutex_unlock_60($p61);
    goto SeqInstr_343, SeqInstr_344;

  SeqInstr_344:
    assume assertsPassed;
    goto SeqInstr_345;

  SeqInstr_345:
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p32, $mul.ref($i36, 120)), $mul.ref(24, 1));
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} wait_for_completion($p62);
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p4);
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    $i10 := $i63;
    goto $bb6;

  SeqInstr_343:
    assume !assertsPassed;
    return;

  SeqInstr_337:
    assume !assertsPassed;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb2;

  $bb12_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(16, 1));
    goto corral_source_split_2929;
}



const ldv_mutex_lock_59: ref;

axiom ldv_mutex_lock_59 == $sub.ref(0, 327947);

procedure ldv_mutex_lock_59($p0: ref);
  free requires assertsPassed;
  modifies $M.4, assertsPassed;



implementation ldv_mutex_lock_59($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} ldv_mutex_lock_u132_lock_of_usb_ftdi($p0);
    goto SeqInstr_346, SeqInstr_347;

  SeqInstr_347:
    assume assertsPassed;
    goto SeqInstr_348;

  SeqInstr_348:
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} mutex_lock($p0);
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_346:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_60: ref;

axiom ldv_mutex_unlock_60 == $sub.ref(0, 328979);

procedure ldv_mutex_unlock_60($p0: ref);
  free requires assertsPassed;
  modifies $M.4, assertsPassed;



implementation ldv_mutex_unlock_60($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 604} ldv_mutex_unlock_u132_lock_of_usb_ftdi($p0);
    goto SeqInstr_349, SeqInstr_350;

  SeqInstr_350:
    assume assertsPassed;
    goto SeqInstr_351;

  SeqInstr_351:
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 605} mutex_unlock($p0);
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_349:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_61: ref;

axiom ldv_mutex_unlock_61 == $sub.ref(0, 330011);

procedure ldv_mutex_unlock_61($p0: ref);
  free requires assertsPassed;
  modifies $M.4, assertsPassed;



implementation ldv_mutex_unlock_61($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} ldv_mutex_unlock_u132_lock_of_usb_ftdi($p0);
    goto SeqInstr_352, SeqInstr_353;

  SeqInstr_353:
    assume assertsPassed;
    goto SeqInstr_354;

  SeqInstr_354:
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 607} mutex_unlock($p0);
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_352:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_56: ref;

axiom ldv_mutex_lock_56 == $sub.ref(0, 331043);

procedure ldv_mutex_lock_56($p0: ref);
  free requires assertsPassed;
  modifies $M.4, assertsPassed;



implementation ldv_mutex_lock_56($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} ldv_mutex_lock_u132_lock_of_usb_ftdi($p0);
    goto SeqInstr_355, SeqInstr_356;

  SeqInstr_356:
    assume assertsPassed;
    goto SeqInstr_357;

  SeqInstr_357:
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} mutex_lock($p0);
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_355:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_57: ref;

axiom ldv_mutex_unlock_57 == $sub.ref(0, 332075);

procedure ldv_mutex_unlock_57($p0: ref);
  free requires assertsPassed;
  modifies $M.4, assertsPassed;



implementation ldv_mutex_unlock_57($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} ldv_mutex_unlock_u132_lock_of_usb_ftdi($p0);
    goto SeqInstr_358, SeqInstr_359;

  SeqInstr_359:
    assume assertsPassed;
    goto SeqInstr_360;

  SeqInstr_360:
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 611} mutex_unlock($p0);
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_358:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_58: ref;

axiom ldv_mutex_unlock_58 == $sub.ref(0, 333107);

procedure ldv_mutex_unlock_58($p0: ref);
  free requires assertsPassed;
  modifies $M.4, assertsPassed;



implementation ldv_mutex_unlock_58($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} ldv_mutex_unlock_u132_lock_of_usb_ftdi($p0);
    goto SeqInstr_361, SeqInstr_362;

  SeqInstr_362:
    assume assertsPassed;
    goto SeqInstr_363;

  SeqInstr_363:
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} mutex_unlock($p0);
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_361:
    assume !assertsPassed;
    return;
}



const ftdi_release_platform_dev: ref;

axiom ftdi_release_platform_dev == $sub.ref(0, 334139);

procedure ftdi_release_platform_dev($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation ftdi_release_platform_dev($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(0, 1));
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $0.ref);
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    return;
}



const snprintf: ref;

axiom snprintf == $sub.ref(0, 335171);

procedure snprintf.ref.i64.ref($p0: ref, $i1: i64, $p2: ref) returns ($r: i32);



const __request_module: ref;

axiom __request_module == $sub.ref(0, 336203);

procedure __request_module.i1.ref($i0: i1, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __request_module.i1.ref($i0: i1, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 614} {:cexpr "__request_module:arg:arg0"} boogie_si_record_i1($i0);
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 1} true;
    call {:si_unique_call 615} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 616} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const platform_device_register: ref;

axiom platform_device_register == $sub.ref(0, 337235);

procedure platform_device_register($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation platform_device_register($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 1} true;
    call {:si_unique_call 617} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 618} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ftdi_elan_found_controller: ref;

axiom ftdi_elan_found_controller == $sub.ref(0, 338267);

procedure ftdi_elan_found_controller($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $CurrAddr, assertsPassed, $M.7, $M.6, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12;



implementation ftdi_elan_found_controller($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 619} {:cexpr "ftdi_elan_found_controller:arg:fn"} boogie_si_record_i32($i1);
    call {:si_unique_call 620} {:cexpr "ftdi_elan_found_controller:arg:quirk"} boogie_si_record_i32($i2);
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} $i3 := ftdi_elan_setup_controller($p0, $i1);
    goto SeqInstr_364, SeqInstr_365;

  SeqInstr_365:
    assume assertsPassed;
    goto SeqInstr_366;

  SeqInstr_366:
    call {:si_unique_call 622} {:cexpr "UxxxStatus"} boogie_si_record_i32($i3);
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 623} $i6 := ftdi_elan_check_controller($p0, $i2);
    goto SeqInstr_367, SeqInstr_368;

  SeqInstr_368:
    assume assertsPassed;
    goto SeqInstr_369;

  SeqInstr_369:
    call {:si_unique_call 624} {:cexpr "result"} boogie_si_record_i32($i6);
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} $i7 := ftdi_elan_close_controller($p0, $i1);
    goto SeqInstr_370, SeqInstr_371;

  SeqInstr_371:
    assume assertsPassed;
    goto SeqInstr_372;

  SeqInstr_372:
    call {:si_unique_call 626} {:cexpr "UxxxStatus"} boogie_si_record_i32($i7);
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i5 := $i6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    $i5 := $i7;
    goto $bb3;

  SeqInstr_370:
    assume !assertsPassed;
    return;

  SeqInstr_367:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $i5 := $i3;
    goto $bb3;

  SeqInstr_364:
    assume !assertsPassed;
    return;
}



const ftdi_elan_setup_controller: ref;

axiom ftdi_elan_setup_controller == $sub.ref(0, 339299);

procedure ftdi_elan_setup_controller($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $CurrAddr, assertsPassed, $M.7, $M.6, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12;



implementation ftdi_elan_setup_controller($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i32;
  var $i39: i1;
  var $i40: i32;
  var $i41: i1;
  var $i42: i32;
  var $i7: i32;
  var $i43: i32;
  var $i44: i1;
  var $i45: i32;
  var $i46: i1;
  var $i47: i32;
  var $i48: i1;
  var $i49: i32;
  var $i50: i1;
  var $i51: i32;
  var $i52: i1;
  var $i53: i32;
  var $i54: i1;
  var $i55: i32;
  var $i56: i1;
  var $i57: i32;
  var $i58: i1;
  var $i59: i32;
  var $i60: i1;
  var $i61: i32;
  var $i62: i1;
  var $i63: i32;
  var $i64: i1;
  var $i65: i32;
  var $i66: i1;
  var $i67: i32;
  var $i68: i1;
  var $i69: i32;
  var $i70: i1;
  var $i71: i32;
  var $i72: i1;
  var $i73: i32;
  var $i74: i1;
  var $i75: i32;
  var $i76: i1;
  var $i77: i32;
  var $i78: i1;
  var $i79: i32;
  var $i80: i1;
  var $i81: i32;
  var $i82: i1;
  var $i83: i32;
  var $i84: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 629} {:cexpr "ftdi_elan_setup_controller:arg:fn"} boogie_si_record_i32($i1);
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    $i4 := $shl.i32($i1, 8);
    call {:si_unique_call 630} {:cexpr "activePCIfn"} boogie_si_record_i32($i4);
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} $i5 := ftdi_elan_write_reg($p0, 10847);
    goto SeqInstr_373, SeqInstr_374;

  SeqInstr_374:
    assume assertsPassed;
    goto SeqInstr_375;

  SeqInstr_375:
    call {:si_unique_call 632} {:cexpr "UxxxStatus"} boogie_si_record_i32($i5);
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i8 := $or.i32($i4, 16);
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} $i9 := ftdi_elan_write_config($p0, $i8, 0, $sub.i32(0, 1));
    goto SeqInstr_376, SeqInstr_377;

  SeqInstr_377:
    assume assertsPassed;
    goto SeqInstr_378;

  SeqInstr_378:
    call {:si_unique_call 634} {:cexpr "UxxxStatus"} boogie_si_record_i32($i9);
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i11 := $or.i32($i4, 16);
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} $i12 := ftdi_elan_read_config($p0, $i11, 0, $p3);
    goto SeqInstr_379, SeqInstr_380;

  SeqInstr_380:
    assume assertsPassed;
    goto SeqInstr_381;

  SeqInstr_381:
    call {:si_unique_call 636} {:cexpr "UxxxStatus"} boogie_si_record_i32($i12);
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i14 := $or.i32($i4, 16);
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} $i15 := ftdi_elan_write_config($p0, $i14, 0, $sub.i32(0, 268435456));
    goto SeqInstr_382, SeqInstr_383;

  SeqInstr_383:
    assume assertsPassed;
    goto SeqInstr_384;

  SeqInstr_384:
    call {:si_unique_call 638} {:cexpr "UxxxStatus"} boogie_si_record_i32($i15);
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i17 := $or.i32($i4, 16);
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} $i18 := ftdi_elan_read_config($p0, $i17, 0, $p3);
    goto SeqInstr_385, SeqInstr_386;

  SeqInstr_386:
    assume assertsPassed;
    goto SeqInstr_387;

  SeqInstr_387:
    call {:si_unique_call 640} {:cexpr "UxxxStatus"} boogie_si_record_i32($i18);
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i20 := $or.i32($i4, 12);
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} $i21 := ftdi_elan_read_config($p0, $i20, 0, $p2);
    goto SeqInstr_388, SeqInstr_389;

  SeqInstr_389:
    assume assertsPassed;
    goto SeqInstr_390;

  SeqInstr_390:
    call {:si_unique_call 642} {:cexpr "UxxxStatus"} boogie_si_record_i32($i21);
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p2);
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i23, $sub.i32(0, 65281));
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i24);
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p2);
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    $i26 := $or.i32($i25, 5632);
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i26);
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    $i27 := $or.i32($i4, 12);
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p2);
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} $i29 := ftdi_elan_write_config($p0, $i27, 0, $i28);
    goto SeqInstr_391, SeqInstr_392;

  SeqInstr_392:
    assume assertsPassed;
    goto SeqInstr_393;

  SeqInstr_393:
    call {:si_unique_call 644} {:cexpr "UxxxStatus"} boogie_si_record_i32($i29);
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i31 := $or.i32($i4, 12);
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} $i32 := ftdi_elan_read_config($p0, $i31, 0, $p3);
    goto SeqInstr_394, SeqInstr_395;

  SeqInstr_395:
    assume assertsPassed;
    goto SeqInstr_396;

  SeqInstr_396:
    call {:si_unique_call 646} {:cexpr "UxxxStatus"} boogie_si_record_i32($i32);
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i34 := $or.i32($i4, 4);
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} $i35 := ftdi_elan_write_config($p0, $i34, 0, 6);
    goto SeqInstr_397, SeqInstr_398;

  SeqInstr_398:
    assume assertsPassed;
    goto SeqInstr_399;

  SeqInstr_399:
    call {:si_unique_call 648} {:cexpr "UxxxStatus"} boogie_si_record_i32($i35);
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i37 := $or.i32($i4, 4);
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 649} $i38 := ftdi_elan_read_config($p0, $i37, 0, $p3);
    goto SeqInstr_400, SeqInstr_401;

  SeqInstr_401:
    assume assertsPassed;
    goto SeqInstr_402;

  SeqInstr_402:
    call {:si_unique_call 650} {:cexpr "UxxxStatus"} boogie_si_record_i32($i38);
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} $i40 := ftdi_elan_read_pcimem($p0, 0, 0, $p3);
    goto SeqInstr_403, SeqInstr_404;

  SeqInstr_404:
    assume assertsPassed;
    goto SeqInstr_405;

  SeqInstr_405:
    call {:si_unique_call 652} {:cexpr "UxxxStatus"} boogie_si_record_i32($i40);
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    $i42 := $i40;
    assume {:branchcond $i41} true;
    goto $bb34, $bb36;

  $bb36:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 653} $i43 := ftdi_elan_read_pcimem($p0, 4, 0, $p3);
    goto SeqInstr_406, SeqInstr_407;

  SeqInstr_407:
    assume assertsPassed;
    goto SeqInstr_408;

  SeqInstr_408:
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    $i42 := $i43;
    assume {:branchcond $i44} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 654} $i45 := ftdi_elan_read_pcimem($p0, 8, 0, $p3);
    goto SeqInstr_409, SeqInstr_410;

  SeqInstr_410:
    assume assertsPassed;
    goto SeqInstr_411;

  SeqInstr_411:
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    $i42 := $i45;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} $i47 := ftdi_elan_read_pcimem($p0, 12, 0, $p3);
    goto SeqInstr_412, SeqInstr_413;

  SeqInstr_413:
    assume assertsPassed;
    goto SeqInstr_414;

  SeqInstr_414:
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $i42 := $i47;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} $i49 := ftdi_elan_read_pcimem($p0, 16, 0, $p3);
    goto SeqInstr_415, SeqInstr_416;

  SeqInstr_416:
    assume assertsPassed;
    goto SeqInstr_417;

  SeqInstr_417:
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    $i42 := $i49;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} $i51 := ftdi_elan_read_pcimem($p0, 20, 0, $p3);
    goto SeqInstr_418, SeqInstr_419;

  SeqInstr_419:
    assume assertsPassed;
    goto SeqInstr_420;

  SeqInstr_420:
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    $i42 := $i51;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} $i53 := ftdi_elan_read_pcimem($p0, 24, 0, $p3);
    goto SeqInstr_421, SeqInstr_422;

  SeqInstr_422:
    assume assertsPassed;
    goto SeqInstr_423;

  SeqInstr_423:
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i53, 0);
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    $i42 := $i53;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} $i55 := ftdi_elan_read_pcimem($p0, 28, 0, $p3);
    goto SeqInstr_424, SeqInstr_425;

  SeqInstr_425:
    assume assertsPassed;
    goto SeqInstr_426;

  SeqInstr_426:
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    $i42 := $i55;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} $i57 := ftdi_elan_read_pcimem($p0, 32, 0, $p3);
    goto SeqInstr_427, SeqInstr_428;

  SeqInstr_428:
    assume assertsPassed;
    goto SeqInstr_429;

  SeqInstr_429:
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i57, 0);
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    $i42 := $i57;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} $i59 := ftdi_elan_read_pcimem($p0, 36, 0, $p3);
    goto SeqInstr_430, SeqInstr_431;

  SeqInstr_431:
    assume assertsPassed;
    goto SeqInstr_432;

  SeqInstr_432:
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i59, 0);
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $i42 := $i59;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} $i61 := ftdi_elan_read_pcimem($p0, 40, 0, $p3);
    goto SeqInstr_433, SeqInstr_434;

  SeqInstr_434:
    assume assertsPassed;
    goto SeqInstr_435;

  SeqInstr_435:
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i61, 0);
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    $i42 := $i61;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    call {:si_unique_call 663} $i63 := ftdi_elan_read_pcimem($p0, 44, 0, $p3);
    goto SeqInstr_436, SeqInstr_437;

  SeqInstr_437:
    assume assertsPassed;
    goto SeqInstr_438;

  SeqInstr_438:
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i63, 0);
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    $i42 := $i63;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} $i65 := ftdi_elan_read_pcimem($p0, 48, 0, $p3);
    goto SeqInstr_439, SeqInstr_440;

  SeqInstr_440:
    assume assertsPassed;
    goto SeqInstr_441;

  SeqInstr_441:
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    $i66 := $ne.i32($i65, 0);
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    $i42 := $i65;
    assume true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} $i67 := ftdi_elan_read_pcimem($p0, 52, 0, $p3);
    goto SeqInstr_442, SeqInstr_443;

  SeqInstr_443:
    assume assertsPassed;
    goto SeqInstr_444;

  SeqInstr_444:
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i67, 0);
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    $i42 := $i67;
    assume true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} $i69 := ftdi_elan_read_pcimem($p0, 56, 0, $p3);
    goto SeqInstr_445, SeqInstr_446;

  SeqInstr_446:
    assume assertsPassed;
    goto SeqInstr_447;

  SeqInstr_447:
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    $i70 := $ne.i32($i69, 0);
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    $i42 := $i69;
    assume true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} $i71 := ftdi_elan_read_pcimem($p0, 60, 0, $p3);
    goto SeqInstr_448, SeqInstr_449;

  SeqInstr_449:
    assume assertsPassed;
    goto SeqInstr_450;

  SeqInstr_450:
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    $i72 := $ne.i32($i71, 0);
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    $i42 := $i71;
    assume true;
    goto $bb96, $bb97;

  $bb97:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    call {:si_unique_call 668} $i73 := ftdi_elan_read_pcimem($p0, 64, 0, $p3);
    goto SeqInstr_451, SeqInstr_452;

  SeqInstr_452:
    assume assertsPassed;
    goto SeqInstr_453;

  SeqInstr_453:
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    $i74 := $ne.i32($i73, 0);
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    $i42 := $i73;
    assume true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 669} $i75 := ftdi_elan_read_pcimem($p0, 68, 0, $p3);
    goto SeqInstr_454, SeqInstr_455;

  SeqInstr_455:
    assume assertsPassed;
    goto SeqInstr_456;

  SeqInstr_456:
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $i76 := $ne.i32($i75, 0);
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    $i42 := $i75;
    assume true;
    goto $bb104, $bb105;

  $bb105:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} $i77 := ftdi_elan_read_pcimem($p0, 72, 0, $p3);
    goto SeqInstr_457, SeqInstr_458;

  SeqInstr_458:
    assume assertsPassed;
    goto SeqInstr_459;

  SeqInstr_459:
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    $i78 := $ne.i32($i77, 0);
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    $i42 := $i77;
    assume true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} $i79 := ftdi_elan_read_pcimem($p0, 76, 0, $p3);
    goto SeqInstr_460, SeqInstr_461;

  SeqInstr_461:
    assume assertsPassed;
    goto SeqInstr_462;

  SeqInstr_462:
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    $i80 := $ne.i32($i79, 0);
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    $i42 := $i79;
    assume true;
    goto $bb112, $bb113;

  $bb113:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} $i81 := ftdi_elan_read_pcimem($p0, 80, 0, $p3);
    goto SeqInstr_463, SeqInstr_464;

  SeqInstr_464:
    assume assertsPassed;
    goto SeqInstr_465;

  SeqInstr_465:
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    $i82 := $ne.i32($i81, 0);
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    $i42 := $i81;
    assume true;
    goto $bb116, $bb117;

  $bb117:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 673} $i83 := ftdi_elan_read_pcimem($p0, 84, 0, $p3);
    goto SeqInstr_466, SeqInstr_467;

  SeqInstr_467:
    assume assertsPassed;
    goto SeqInstr_468;

  SeqInstr_468:
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    $i84 := $ne.i32($i83, 0);
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    $i42 := $i83;
    assume {:branchcond $i84} true;
    goto $bb120, $bb121;

  $bb121:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb120:
    assume {:verifier.code 0} true;
    assume $i84 == 1;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    $i7 := $i42;
    goto $bb3;

  SeqInstr_466:
    assume !assertsPassed;
    return;

  $bb116:
    assume {:verifier.code 0} true;
    assume $i82 == 1;
    goto $bb35;

  SeqInstr_463:
    assume !assertsPassed;
    return;

  $bb112:
    assume {:verifier.code 0} true;
    assume $i80 == 1;
    goto $bb35;

  SeqInstr_460:
    assume !assertsPassed;
    return;

  $bb108:
    assume {:verifier.code 0} true;
    assume $i78 == 1;
    goto $bb35;

  SeqInstr_457:
    assume !assertsPassed;
    return;

  $bb104:
    assume {:verifier.code 0} true;
    assume $i76 == 1;
    goto $bb35;

  SeqInstr_454:
    assume !assertsPassed;
    return;

  $bb100:
    assume {:verifier.code 0} true;
    assume $i74 == 1;
    goto $bb35;

  SeqInstr_451:
    assume !assertsPassed;
    return;

  $bb96:
    assume {:verifier.code 0} true;
    assume $i72 == 1;
    goto $bb35;

  SeqInstr_448:
    assume !assertsPassed;
    return;

  $bb92:
    assume {:verifier.code 0} true;
    assume $i70 == 1;
    goto $bb35;

  SeqInstr_445:
    assume !assertsPassed;
    return;

  $bb88:
    assume {:verifier.code 0} true;
    assume $i68 == 1;
    goto $bb35;

  SeqInstr_442:
    assume !assertsPassed;
    return;

  $bb84:
    assume {:verifier.code 0} true;
    assume $i66 == 1;
    goto $bb35;

  SeqInstr_439:
    assume !assertsPassed;
    return;

  $bb80:
    assume {:verifier.code 0} true;
    assume $i64 == 1;
    goto $bb35;

  SeqInstr_436:
    assume !assertsPassed;
    return;

  $bb76:
    assume {:verifier.code 0} true;
    assume $i62 == 1;
    goto $bb35;

  SeqInstr_433:
    assume !assertsPassed;
    return;

  $bb72:
    assume {:verifier.code 0} true;
    assume $i60 == 1;
    goto $bb35;

  SeqInstr_430:
    assume !assertsPassed;
    return;

  $bb68:
    assume {:verifier.code 0} true;
    assume $i58 == 1;
    goto $bb35;

  SeqInstr_427:
    assume !assertsPassed;
    return;

  $bb64:
    assume {:verifier.code 0} true;
    assume $i56 == 1;
    goto $bb35;

  SeqInstr_424:
    assume !assertsPassed;
    return;

  $bb60:
    assume {:verifier.code 0} true;
    assume $i54 == 1;
    goto $bb35;

  SeqInstr_421:
    assume !assertsPassed;
    return;

  $bb56:
    assume {:verifier.code 0} true;
    assume $i52 == 1;
    goto $bb35;

  SeqInstr_418:
    assume !assertsPassed;
    return;

  $bb52:
    assume {:verifier.code 0} true;
    assume $i50 == 1;
    goto $bb35;

  SeqInstr_415:
    assume !assertsPassed;
    return;

  $bb48:
    assume {:verifier.code 0} true;
    assume $i48 == 1;
    goto $bb35;

  SeqInstr_412:
    assume !assertsPassed;
    return;

  $bb44:
    assume {:verifier.code 0} true;
    assume $i46 == 1;
    goto $bb35;

  SeqInstr_409:
    assume !assertsPassed;
    return;

  $bb40:
    assume {:verifier.code 0} true;
    assume $i44 == 1;
    goto $bb35;

  SeqInstr_406:
    assume !assertsPassed;
    return;

  $bb34:
    assume {:verifier.code 0} true;
    assume $i41 == 1;
    goto $bb35;

  SeqInstr_403:
    assume !assertsPassed;
    return;

  $bb29:
    assume $i39 == 1;
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    $i7 := $i38;
    goto $bb3;

  SeqInstr_400:
    assume !assertsPassed;
    return;

  $bb26:
    assume $i36 == 1;
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    $i7 := $i35;
    goto $bb3;

  SeqInstr_397:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    $i7 := $i32;
    goto $bb3;

  SeqInstr_394:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i30 == 1;
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    $i7 := $i29;
    goto $bb3;

  SeqInstr_391:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i22 == 1;
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    $i7 := $i21;
    goto $bb3;

  SeqInstr_388:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i19 == 1;
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    $i7 := $i18;
    goto $bb3;

  SeqInstr_385:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i16 == 1;
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    $i7 := $i15;
    goto $bb3;

  SeqInstr_382:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i13 == 1;
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    $i7 := $i12;
    goto $bb3;

  SeqInstr_379:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    $i7 := $i9;
    goto $bb3;

  SeqInstr_376:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    $i7 := $i5;
    goto $bb3;

  SeqInstr_373:
    assume !assertsPassed;
    return;
}



const ftdi_elan_write_reg: ref;

axiom ftdi_elan_write_reg == $sub.ref(0, 340331);

procedure ftdi_elan_write_reg($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, assertsPassed, $M.7, $M.6, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12;



implementation ftdi_elan_write_reg($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i32;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} {:cexpr "ftdi_elan_write_reg:arg:data"} boogie_si_record_i32($i1);
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5084, 1));
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    $i4 := $sgt.i32($i3, 0);
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i4 == 1);
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p6, $p7, $i8, $p9, $i10, $i11, $i12, $p34, $i35, $i36 := ftdi_elan_write_reg_loop_$bb4($p0, $p2, $p6, $p7, $i8, $p9, $i10, $i11, $i12, $p34, $i35, $i36);
    goto $bb4_last;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} ldv_mutex_lock_47($p6);
    goto SeqInstr_469, SeqInstr_470;

  SeqInstr_470:
    assume assertsPassed;
    goto SeqInstr_471;

  SeqInstr_471:
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(176, 1));
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(180, 1));
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32($i8, $i10);
    call {:si_unique_call 676} {:cexpr "command_size"} boogie_si_record_i32($i11);
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    $i12 := $sle.i32($i11, 31);
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i12 == 1);
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(16, 1));
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} ldv_mutex_unlock_49($p34);
    goto SeqInstr_475, SeqInstr_476;

  SeqInstr_476:
    assume assertsPassed;
    goto SeqInstr_477;

  SeqInstr_477:
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 680} msleep(100);
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p2);
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    $i36 := $sgt.i32($i35, 0);
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb9_dummy;

  $bb5:
    assume $i36 == 1;
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 19);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  SeqInstr_475:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i12 == 1;
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(184, 1));
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(176, 1));
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    $i18 := $and.i64($i17, 31);
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p14, $mul.ref($i18, 24)), $mul.ref(0, 1));
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p20, 1);
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p14, $mul.ref($i18, 24)), $mul.ref(2, 1));
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p21, 4);
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p14, $mul.ref($i18, 24)), $mul.ref(4, 1));
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p22, 0);
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p14, $mul.ref($i18, 24)), $mul.ref(5, 1));
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p23, 0);
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p14, $mul.ref($i18, 24)), $mul.ref(12, 1));
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, 4);
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p14, $mul.ref($i18, 24)), $mul.ref(8, 1));
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, $i1);
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p14, $mul.ref($i18, 24)), $mul.ref(8, 1));
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p14, $mul.ref($i18, 24)), $mul.ref(16, 1));
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p28, $p26);
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(176, 1));
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    $i31 := $add.i32($i30, 1);
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(176, 1));
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, $i31);
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} ftdi_elan_kick_command_queue($p0);
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(16, 1));
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 678} ldv_mutex_unlock_48($p33);
    goto SeqInstr_472, SeqInstr_473;

  SeqInstr_473:
    assume assertsPassed;
    goto SeqInstr_474;

  SeqInstr_474:
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb6;

  SeqInstr_472:
    assume !assertsPassed;
    return;

  SeqInstr_469:
    assume !assertsPassed;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;

  $bb9_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(16, 1));
    goto corral_source_split_3209;
}



const ftdi_elan_write_config: ref;

axiom ftdi_elan_write_config == $sub.ref(0, 341363);

procedure ftdi_elan_write_config($p0: ref, $i1: i32, $i2: i8, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, assertsPassed, $M.7, $M.6, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12;



implementation ftdi_elan_write_config($p0: ref, $i1: i32, $i2: i8, $i3: i32) returns ($r: i32)
{
  var $i4: i32;
  var $i5: i8;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i64;
  var $i22: i64;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $i29: i8;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i32;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} {:cexpr "ftdi_elan_write_config:arg:config_offset"} boogie_si_record_i32($i1);
    call {:si_unique_call 682} {:cexpr "ftdi_elan_write_config:arg:width"} boogie_si_record_i8($i2);
    call {:si_unique_call 683} {:cexpr "ftdi_elan_write_config:arg:data"} boogie_si_record_i32($i3);
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    $i4 := $sdiv.i32($i1, 4);
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i32.i8($i4);
    call {:si_unique_call 684} {:cexpr "addressofs"} boogie_si_record_i8($i5);
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5084, 1));
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    $i8 := $sgt.i32($i7, 0);
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i8 == 1);
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p10, $p11, $i12, $p13, $i14, $i15, $i16, $p41, $i42, $i43 := ftdi_elan_write_config_loop_$bb4($p0, $p6, $p10, $p11, $i12, $p13, $i14, $i15, $i16, $p41, $i42, $i43);
    goto $bb4_last;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 685} ldv_mutex_lock_50($p10);
    goto SeqInstr_478, SeqInstr_479;

  SeqInstr_479:
    assume assertsPassed;
    goto SeqInstr_480;

  SeqInstr_480:
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(176, 1));
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(180, 1));
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32($i12, $i14);
    call {:si_unique_call 686} {:cexpr "command_size"} boogie_si_record_i32($i15);
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    $i16 := $sle.i32($i15, 31);
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i16 == 1);
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(16, 1));
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} ldv_mutex_unlock_52($p41);
    goto SeqInstr_484, SeqInstr_485;

  SeqInstr_485:
    assume assertsPassed;
    goto SeqInstr_486;

  SeqInstr_486:
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 690} msleep(100);
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p6);
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    $i43 := $sgt.i32($i42, 0);
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i43 == 1);
    goto $bb9_dummy;

  $bb5:
    assume $i43 == 1;
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 19);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  SeqInstr_484:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i16 == 1;
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(184, 1));
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(176, 1));
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i20);
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    $i22 := $and.i64($i21, 31);
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p18, $mul.ref($i22, 24)), $mul.ref(0, 1));
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p24, 11);
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p18, $mul.ref($i22, 24)), $mul.ref(2, 1));
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p25, 4);
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p18, $mul.ref($i22, 24)), $mul.ref(4, 1));
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p26, $i5);
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i2);
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    $i28 := $and.i32($i27, 15);
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i32.i8($i28);
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p18, $mul.ref($i22, 24)), $mul.ref(5, 1));
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p30, $i29);
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p18, $mul.ref($i22, 24)), $mul.ref(12, 1));
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, 4);
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p18, $mul.ref($i22, 24)), $mul.ref(8, 1));
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, $i3);
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p18, $mul.ref($i22, 24)), $mul.ref(8, 1));
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p18, $mul.ref($i22, 24)), $mul.ref(16, 1));
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p35, $p33);
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(176, 1));
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    $i38 := $add.i32($i37, 1);
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(176, 1));
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, $i38);
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} ftdi_elan_kick_command_queue($p0);
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(16, 1));
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} ldv_mutex_unlock_51($p40);
    goto SeqInstr_481, SeqInstr_482;

  SeqInstr_482:
    assume assertsPassed;
    goto SeqInstr_483;

  SeqInstr_483:
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb6;

  SeqInstr_481:
    assume !assertsPassed;
    return;

  SeqInstr_478:
    assume !assertsPassed;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb2;

  $bb9_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(16, 1));
    goto corral_source_split_3271;
}



const ldv_mutex_lock_50: ref;

axiom ldv_mutex_lock_50 == $sub.ref(0, 342395);

procedure ldv_mutex_lock_50($p0: ref);
  free requires assertsPassed;
  modifies $M.4, assertsPassed;



implementation ldv_mutex_lock_50($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} ldv_mutex_lock_u132_lock_of_usb_ftdi($p0);
    goto SeqInstr_487, SeqInstr_488;

  SeqInstr_488:
    assume assertsPassed;
    goto SeqInstr_489;

  SeqInstr_489:
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 692} mutex_lock($p0);
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_487:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_51: ref;

axiom ldv_mutex_unlock_51 == $sub.ref(0, 343427);

procedure ldv_mutex_unlock_51($p0: ref);
  free requires assertsPassed;
  modifies $M.4, assertsPassed;



implementation ldv_mutex_unlock_51($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} ldv_mutex_unlock_u132_lock_of_usb_ftdi($p0);
    goto SeqInstr_490, SeqInstr_491;

  SeqInstr_491:
    assume assertsPassed;
    goto SeqInstr_492;

  SeqInstr_492:
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} mutex_unlock($p0);
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_490:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_52: ref;

axiom ldv_mutex_unlock_52 == $sub.ref(0, 344459);

procedure ldv_mutex_unlock_52($p0: ref);
  free requires assertsPassed;
  modifies $M.4, assertsPassed;



implementation ldv_mutex_unlock_52($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} ldv_mutex_unlock_u132_lock_of_usb_ftdi($p0);
    goto SeqInstr_493, SeqInstr_494;

  SeqInstr_494:
    assume assertsPassed;
    goto SeqInstr_495;

  SeqInstr_495:
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} mutex_unlock($p0);
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_493:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_47: ref;

axiom ldv_mutex_lock_47 == $sub.ref(0, 345491);

procedure ldv_mutex_lock_47($p0: ref);
  free requires assertsPassed;
  modifies $M.4, assertsPassed;



implementation ldv_mutex_lock_47($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} ldv_mutex_lock_u132_lock_of_usb_ftdi($p0);
    goto SeqInstr_496, SeqInstr_497;

  SeqInstr_497:
    assume assertsPassed;
    goto SeqInstr_498;

  SeqInstr_498:
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} mutex_lock($p0);
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_496:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_48: ref;

axiom ldv_mutex_unlock_48 == $sub.ref(0, 346523);

procedure ldv_mutex_unlock_48($p0: ref);
  free requires assertsPassed;
  modifies $M.4, assertsPassed;



implementation ldv_mutex_unlock_48($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} ldv_mutex_unlock_u132_lock_of_usb_ftdi($p0);
    goto SeqInstr_499, SeqInstr_500;

  SeqInstr_500:
    assume assertsPassed;
    goto SeqInstr_501;

  SeqInstr_501:
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 700} mutex_unlock($p0);
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_499:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_49: ref;

axiom ldv_mutex_unlock_49 == $sub.ref(0, 347555);

procedure ldv_mutex_unlock_49($p0: ref);
  free requires assertsPassed;
  modifies $M.4, assertsPassed;



implementation ldv_mutex_unlock_49($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} ldv_mutex_unlock_u132_lock_of_usb_ftdi($p0);
    goto SeqInstr_502, SeqInstr_503;

  SeqInstr_503:
    assume assertsPassed;
    goto SeqInstr_504;

  SeqInstr_504:
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 702} mutex_unlock($p0);
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_502:
    assume !assertsPassed;
    return;
}



const ftdi_elan_check_controller: ref;

axiom ftdi_elan_check_controller == $sub.ref(0, 348587);

procedure ftdi_elan_check_controller($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $CurrAddr, assertsPassed, $M.7, $M.6, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12;



implementation ftdi_elan_check_controller($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $i30: i32;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i32;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i43: i32;
  var $i44: i32;
  var $i45: i32;
  var $i46: i32;
  var $i47: i32;
  var $i48: i32;
  var $i49: i32;
  var $i42: i32;
  var $i50: i32;
  var $i51: i32;
  var $i52: i1;
  var $i53: i32;
  var $i54: i1;
  var $i55: i32;
  var $i56: i1;
  var $i57: i32;
  var $i58: i32;
  var $i59: i1;
  var $i60: i1;
  var $i62: i64;
  var $i63: i64;
  var $i64: i32;
  var $i65: i32;
  var $i66: i32;
  var $i67: i1;
  var $i68: i32;
  var $i69: i32;
  var $i70: i1;
  var $i61: i32;
  var $i71: i32;
  var $i72: i1;
  var $i73: i32;
  var $i74: i1;
  var $i78: i32;
  var $i75: i32;
  var $i76: i32;
  var $i77: i32;
  var $i79: i32;
  var $i80: i1;
  var $i81: i32;
  var $i82: i32;
  var $i83: i1;
  var $i84: i32;
  var $i87: i32;
  var $i86: i32;
  var $i85: i32;
  var $i88: i32;
  var $i89: i32;
  var $i90: i1;
  var $i92: i32;
  var $i93: i1;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $i97: i32;
  var $i98: i1;
  var $i91: i32;
  var $i99: i32;
  var $i100: i1;
  var $i101: i32;
  var $i102: i32;
  var $i103: i1;
  var $i104: i32;
  var $i105: i32;
  var $i106: i1;
  var $i107: i32;
  var $i108: i32;
  var $i109: i1;
  var $i110: i32;
  var $i111: i32;
  var $i112: i1;
  var $i113: i32;
  var $i114: i32;
  var $i115: i1;
  var $i116: i32;
  var $i117: i32;
  var $i118: i1;
  var $i119: i32;
  var $i120: i32;
  var $i121: i32;
  var $i122: i32;
  var $i123: i32;
  var $i124: i32;
  var $i125: i32;
  var $i126: i1;
  var $i127: i32;
  var $i128: i32;
  var $i129: i32;
  var $i130: i32;
  var $i131: i32;
  var $i132: i32;
  var $i133: i1;
  var $i134: i32;
  var $i135: i32;
  var $i136: i1;
  var $i137: i32;
  var $i138: i32;
  var $i139: i1;
  var $i140: i32;
  var $i141: i32;
  var $i142: i32;
  var $i143: i1;
  var $i144: i32;
  var $i145: i1;
  var $i147: i32;
  var $i148: i1;
  var $i150: i32;
  var $i151: i32;
  var $i152: i1;
  var $i149: i32;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $i156: i32;
  var $i157: i32;
  var $i146: i32;
  var $i158: i32;
  var $i159: i32;
  var $i160: i32;
  var $i161: i32;
  var $i162: i32;
  var $i163: i32;
  var $i164: i32;
  var $i165: i1;
  var $i166: i32;
  var $i167: i1;
  var $i168: i32;
  var $i169: i1;
  var $i170: i32;
  var $i171: i1;
  var $i172: i32;
  var $i173: i1;
  var $i174: i32;
  var $i175: i1;
  var $i176: i32;
  var $i177: i1;
  var $i178: i32;
  var $i179: i1;
  var $i180: i32;
  var $i181: i32;
  var $i182: i32;
  var $i183: i1;
  var $i184: i32;
  var $i185: i32;
  var $i186: i32;
  var $i187: i32;
  var $i188: i32;
  var $i189: i32;
  var $i190: i1;
  var $i191: i32;
  var $i192: i1;
  var $i193: i8;
  var $i194: i1;
  var $i195: i32;
  var $i196: i32;
  var $i197: i32;
  var $i198: i32;
  var $i199: i1;
  var $i200: i32;
  var $i201: i1;
  var $i202: i32;
  var $i203: i32;
  var $i204: i1;
  var $i205: i32;
  var $i206: i32;
  var $i207: i1;
  var $i208: i32;
  var $i209: i1;
  var $i210: i32;
  var $i211: i32;
  var $i212: i64;
  var $i213: i64;
  var $i214: i64;
  var $i215: i1;
  var $i217: i64;
  var $i218: i1;
  var $i216: i64;
  var $i219: i1;
  var $i223: i64;
  var $i224: i64;
  var $i225: i32;
  var $i226: i32;
  var $i227: i32;
  var $i228: i1;
  var $i229: i32;
  var $i230: i32;
  var $i231: i32;
  var $i232: i1;
  var $i233: i32;
  var $i234: i32;
  var $i235: i32;
  var $i236: i1;
  var $i221: i32;
  var $i222: i32;
  var $i237: i32;
  var $i220: i32;
  var $i14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 704} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 706} $p5 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} $p6 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 708} $p7 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} $p8 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 710} $p9 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 711} $p10 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 712} $p11 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 713} {:cexpr "ftdi_elan_check_controller:arg:quirk"} boogie_si_record_i32($i1);
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, $sub.i32(0, 1));
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 714} $i12 := ftdi_elan_write_pcimem($p0, 20, 0, $sub.i32(0, 2147483648));
    goto SeqInstr_505, SeqInstr_506;

  SeqInstr_506:
    assume assertsPassed;
    goto SeqInstr_507;

  SeqInstr_507:
    call {:si_unique_call 715} {:cexpr "retval"} boogie_si_record_i32($i12);
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 716} $i15 := ftdi_elan_read_pcimem($p0, 4, 0, $p3);
    goto SeqInstr_508, SeqInstr_509;

  SeqInstr_509:
    assume assertsPassed;
    goto SeqInstr_510;

  SeqInstr_510:
    call {:si_unique_call 717} {:cexpr "retval"} boogie_si_record_i32($i15);
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} $i17 := ftdi_elan_read_pcimem($p0, 72, 0, $p4);
    goto SeqInstr_511, SeqInstr_512;

  SeqInstr_512:
    assume assertsPassed;
    goto SeqInstr_513;

  SeqInstr_513:
    call {:si_unique_call 719} {:cexpr "retval"} boogie_si_record_i32($i17);
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p4);
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i19, 255);
    call {:si_unique_call 720} {:cexpr "num_ports"} boogie_si_record_i32($i20);
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} $i21 := ftdi_elan_read_pcimem($p0, 52, 0, $p7);
    goto SeqInstr_514, SeqInstr_515;

  SeqInstr_515:
    assume assertsPassed;
    goto SeqInstr_516;

  SeqInstr_516:
    call {:si_unique_call 722} {:cexpr "retval"} boogie_si_record_i32($i21);
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p7);
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i23, 16383);
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, $i24);
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p7);
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    $i26 := $mul.i32($i25, 6);
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    $i27 := $add.i32($i26, $sub.i32(0, 1260));
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    $i28 := $udiv.i32($i27, 7);
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, 32767);
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    $i30 := $shl.i32($i29, 16);
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p7);
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $i32 := $or.i32($i30, $i31);
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, $i32);
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 723} $i33 := ftdi_elan_read_pcimem($p0, 4, 0, $p2);
    goto SeqInstr_517, SeqInstr_518;

  SeqInstr_518:
    assume assertsPassed;
    goto SeqInstr_519;

  SeqInstr_519:
    call {:si_unique_call 724} {:cexpr "retval"} boogie_si_record_i32($i33);
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p2);
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    $i36 := $and.i32($i35, 192);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i37 := $slt.i32($i36, 128);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    $i38 := $slt.i32($i36, 192);
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i36, 192);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p2);
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    $i48 := $and.i32($i47, 512);
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i48);
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p2);
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i49);
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    $i42 := 50;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p2);
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} $i51 := ftdi_elan_write_pcimem($p0, 4, 0, $i50);
    goto SeqInstr_520, SeqInstr_521;

  SeqInstr_521:
    assume assertsPassed;
    goto SeqInstr_522;

  SeqInstr_522:
    call {:si_unique_call 726} {:cexpr "retval"} boogie_si_record_i32($i51);
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} $i53 := ftdi_elan_read_pcimem($p0, 4, 0, $p3);
    goto SeqInstr_523, SeqInstr_524;

  SeqInstr_524:
    assume assertsPassed;
    goto SeqInstr_525;

  SeqInstr_525:
    call {:si_unique_call 728} {:cexpr "retval"} boogie_si_record_i32($i53);
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i53, 0);
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} msleep($i42);
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} $i55 := ftdi_elan_read_pcimem($p0, 72, 0, $p10);
    goto SeqInstr_526, SeqInstr_527;

  SeqInstr_527:
    assume assertsPassed;
    goto SeqInstr_528;

  SeqInstr_528:
    call {:si_unique_call 731} {:cexpr "retval"} boogie_si_record_i32($i55);
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p10);
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    $i58 := $and.i32($i57, 512);
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    $i59 := $eq.i32($i58, 0);
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 735} $i71 := ftdi_elan_read_pcimem($p0, 4, 0, $p3);
    goto SeqInstr_532, SeqInstr_533;

  SeqInstr_533:
    assume assertsPassed;
    goto SeqInstr_534;

  SeqInstr_534:
    call {:si_unique_call 736} {:cexpr "retval"} boogie_si_record_i32($i71);
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    $i72 := $ne.i32($i71, 0);
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} $i73 := ftdi_elan_read_pcimem($p0, 8, 0, $p5);
    goto SeqInstr_535, SeqInstr_536;

  SeqInstr_536:
    assume assertsPassed;
    goto SeqInstr_537;

  SeqInstr_537:
    call {:si_unique_call 738} {:cexpr "retval"} boogie_si_record_i32($i73);
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    $i74 := $ne.i32($i73, 0);
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    $i75 := $i73;
    assume true;
    goto $bb58, $bb60;

  $bb60:
    assume !($i74 == 1);
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    $i76, $i77 := $i1, 30;
    goto $bb61;

  $bb61:
    call $i78, $i76, $i77, $i79, $i80, $i81, $i82, $i83, $i84, $i87, $i85, $i88, $i89, $i90, $i92, $i93, $i97, $i98, $i91, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $i134, $i135, $i136, $i137, $i138, $i139, $i140, $i141, $i142, $i143, $i144, $i145, $i147, $i148, $i150, $i151, $i152, $i149, $i146 := ftdi_elan_check_controller_loop_$bb61($p0, $p2, $p3, $p5, $p6, $p7, $p8, $i78, $i76, $i77, $i79, $i80, $i81, $i82, $i83, $i84, $i87, $i85, $i88, $i89, $i90, $i92, $i93, $i97, $i98, $i91, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $i134, $i135, $i136, $i137, $i138, $i139, $i140, $i141, $i142, $i143, $i144, $i145, $i147, $i148, $i150, $i151, $i152, $i149, $i146);
    goto $bb61_last;

  $bb63:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} $i79 := ftdi_elan_write_pcimem($p0, 8, 0, 1);
    goto SeqInstr_538, SeqInstr_539;

  SeqInstr_539:
    assume assertsPassed;
    goto SeqInstr_540;

  SeqInstr_540:
    call {:si_unique_call 740} {:cexpr "retval"} boogie_si_record_i32($i79);
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    $i80 := $ne.i32($i79, 0);
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    $i81 := $i79;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} $i82 := ftdi_elan_read_pcimem($p0, 8, 0, $p5);
    goto SeqInstr_541, SeqInstr_542;

  SeqInstr_542:
    assume assertsPassed;
    goto SeqInstr_543;

  SeqInstr_543:
    call {:si_unique_call 742} {:cexpr "retval"} boogie_si_record_i32($i82);
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    $i83 := $ne.i32($i82, 0);
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    $i84 := $i82;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i83 == 1);
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    $i85 := $i77;
    goto $bb69;

  $bb69:
    call $i87, $i85, $i88, $i89, $i90, $i92, $i93, $i97, $i98, $i91 := ftdi_elan_check_controller_loop_$bb69($p0, $p5, $i87, $i85, $i88, $i89, $i90, $i92, $i93, $i97, $i98, $i91);
    goto $bb69_last;

  $bb72:
    assume {:verifier.code 0} true;
    $i88 := $load.i32($M.0, $p5);
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    $i89 := $and.i32($i88, 1);
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    $i90 := $ne.i32($i89, 0);
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    $i91 := $i85;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $i99 := $and.i32($i76, 4);
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    $i100 := $ne.i32($i99, 0);
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} $i108 := ftdi_elan_write_pcimem($p0, 32, 0, 0);
    goto SeqInstr_553, SeqInstr_554;

  SeqInstr_554:
    assume assertsPassed;
    goto SeqInstr_555;

  SeqInstr_555:
    call {:si_unique_call 753} {:cexpr "retval"} boogie_si_record_i32($i108);
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    $i109 := $ne.i32($i108, 0);
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    $i110 := $i108;
    assume true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i109 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} $i111 := ftdi_elan_write_pcimem($p0, 40, 0, 285212672);
    goto SeqInstr_556, SeqInstr_557;

  SeqInstr_557:
    assume assertsPassed;
    goto SeqInstr_558;

  SeqInstr_558:
    call {:si_unique_call 755} {:cexpr "retval"} boogie_si_record_i32($i111);
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    $i112 := $ne.i32($i111, 0);
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    $i113 := $i111;
    assume true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} $i114 := ftdi_elan_write_pcimem($p0, 24, 0, 0);
    goto SeqInstr_559, SeqInstr_560;

  SeqInstr_560:
    assume assertsPassed;
    goto SeqInstr_561;

  SeqInstr_561:
    call {:si_unique_call 757} {:cexpr "retval"} boogie_si_record_i32($i114);
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    $i115 := $ne.i32($i114, 0);
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    $i116 := $i114;
    assume true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} $i117 := ftdi_elan_read_pcimem($p0, 52, 0, $p6);
    goto SeqInstr_562, SeqInstr_563;

  SeqInstr_563:
    assume assertsPassed;
    goto SeqInstr_564;

  SeqInstr_564:
    call {:si_unique_call 759} {:cexpr "retval"} boogie_si_record_i32($i117);
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    $i118 := $ne.i32($i117, 0);
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    $i119 := $i117;
    assume true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    $i120 := $load.i32($M.0, $p6);
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    $i121 := $xor.i32($i120, $sub.i32(0, 1));
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    $i122 := $and.i32($i121, $sub.i32(0, 2147483648));
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    $i123 := $load.i32($M.0, $p7);
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    $i124 := $or.i32($i122, $i123);
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} $i125 := ftdi_elan_write_pcimem($p0, 52, 0, $i124);
    goto SeqInstr_565, SeqInstr_566;

  SeqInstr_566:
    assume assertsPassed;
    goto SeqInstr_567;

  SeqInstr_567:
    call {:si_unique_call 761} {:cexpr "retval"} boogie_si_record_i32($i125);
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    $i126 := $ne.i32($i125, 0);
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    $i127 := $i125;
    assume true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    $i128 := $load.i32($M.0, $p7);
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    $i129 := $mul.i32($i128, 9);
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    $i130 := $udiv.i32($i129, 10);
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    $i131 := $and.i32($i130, 16383);
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} $i132 := ftdi_elan_write_pcimem($p0, 64, 0, $i131);
    goto SeqInstr_568, SeqInstr_569;

  SeqInstr_569:
    assume assertsPassed;
    goto SeqInstr_570;

  SeqInstr_570:
    call {:si_unique_call 763} {:cexpr "retval"} boogie_si_record_i32($i132);
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    $i133 := $ne.i32($i132, 0);
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    $i134 := $i132;
    assume true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} $i135 := ftdi_elan_read_pcimem($p0, 52, 0, $p6);
    goto SeqInstr_571, SeqInstr_572;

  SeqInstr_572:
    assume assertsPassed;
    goto SeqInstr_573;

  SeqInstr_573:
    call {:si_unique_call 765} {:cexpr "retval"} boogie_si_record_i32($i135);
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    $i136 := $ne.i32($i135, 0);
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    $i137 := $i135;
    assume true;
    goto $bb106, $bb107;

  $bb107:
    assume !($i136 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} $i138 := ftdi_elan_read_pcimem($p0, 64, 0, $p8);
    goto SeqInstr_574, SeqInstr_575;

  SeqInstr_575:
    assume assertsPassed;
    goto SeqInstr_576;

  SeqInstr_576:
    call {:si_unique_call 767} {:cexpr "retval"} boogie_si_record_i32($i138);
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    $i139 := $ne.i32($i138, 0);
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    $i140 := $i138;
    assume true;
    goto $bb109, $bb110;

  $bb110:
    assume !($i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    $i141 := $load.i32($M.0, $p6);
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    $i142 := $and.i32($i141, 1073676288);
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    $i143 := $eq.i32($i142, 0);
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb114;

  $bb114:
    assume !($i143 == 1);
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    $i144 := $load.i32($M.0, $p8);
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    $i145 := $eq.i32($i144, 0);
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    $i146 := $i76;
    assume true;
    goto $bb115, $bb116;

  $bb116:
    assume !($i145 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i158 := $i146;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    $i159 := $load.i32($M.0, $p2);
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    $i160 := $and.i32($i159, 512);
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i160);
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $i161 := $load.i32($M.0, $p2);
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    $i162 := $or.i32($i161, 163);
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i162);
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $i163 := $load.i32($M.0, $p2);
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} $i164 := ftdi_elan_write_pcimem($p0, 4, 0, $i163);
    goto SeqInstr_580, SeqInstr_581;

  SeqInstr_581:
    assume assertsPassed;
    goto SeqInstr_582;

  SeqInstr_582:
    call {:si_unique_call 773} {:cexpr "retval"} boogie_si_record_i32($i164);
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    $i165 := $ne.i32($i164, 0);
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    assume {:branchcond $i165} true;
    goto $bb122, $bb123;

  $bb123:
    assume !($i165 == 1);
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} $i166 := ftdi_elan_write_pcimem($p0, 8, 0, 4);
    goto SeqInstr_583, SeqInstr_584;

  SeqInstr_584:
    assume assertsPassed;
    goto SeqInstr_585;

  SeqInstr_585:
    call {:si_unique_call 775} {:cexpr "retval"} boogie_si_record_i32($i166);
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    $i167 := $ne.i32($i166, 0);
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    assume {:branchcond $i167} true;
    goto $bb125, $bb126;

  $bb126:
    assume !($i167 == 1);
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 776} $i168 := ftdi_elan_read_pcimem($p0, 8, 0, $p9);
    goto SeqInstr_586, SeqInstr_587;

  SeqInstr_587:
    assume assertsPassed;
    goto SeqInstr_588;

  SeqInstr_588:
    call {:si_unique_call 777} {:cexpr "retval"} boogie_si_record_i32($i168);
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    $i169 := $ne.i32($i168, 0);
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    assume {:branchcond $i169} true;
    goto $bb128, $bb129;

  $bb129:
    assume !($i169 == 1);
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 778} $i170 := ftdi_elan_read_pcimem($p0, 4, 0, $p3);
    goto SeqInstr_589, SeqInstr_590;

  SeqInstr_590:
    assume assertsPassed;
    goto SeqInstr_591;

  SeqInstr_591:
    call {:si_unique_call 779} {:cexpr "retval"} boogie_si_record_i32($i170);
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    $i171 := $ne.i32($i170, 0);
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    assume {:branchcond $i171} true;
    goto $bb131, $bb132;

  $bb132:
    assume !($i171 == 1);
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} $i172 := ftdi_elan_write_pcimem($p0, 80, 0, 32768);
    goto SeqInstr_592, SeqInstr_593;

  SeqInstr_593:
    assume assertsPassed;
    goto SeqInstr_594;

  SeqInstr_594:
    call {:si_unique_call 781} {:cexpr "retval"} boogie_si_record_i32($i172);
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    $i173 := $ne.i32($i172, 0);
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb134, $bb135;

  $bb135:
    assume !($i173 == 1);
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} $i174 := ftdi_elan_write_pcimem($p0, 12, 0, $sub.i32(0, 2147483622));
    goto SeqInstr_595, SeqInstr_596;

  SeqInstr_596:
    assume assertsPassed;
    goto SeqInstr_597;

  SeqInstr_597:
    call {:si_unique_call 783} {:cexpr "retval"} boogie_si_record_i32($i174);
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    $i175 := $ne.i32($i174, 0);
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    assume {:branchcond $i175} true;
    goto $bb137, $bb138;

  $bb138:
    assume !($i175 == 1);
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} $i176 := ftdi_elan_write_pcimem($p0, 20, 0, $sub.i32(0, 1073741697));
    goto SeqInstr_598, SeqInstr_599;

  SeqInstr_599:
    assume assertsPassed;
    goto SeqInstr_600;

  SeqInstr_600:
    call {:si_unique_call 785} {:cexpr "retval"} boogie_si_record_i32($i176);
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $i177 := $ne.i32($i176, 0);
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    assume {:branchcond $i177} true;
    goto $bb140, $bb141;

  $bb141:
    assume !($i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} $i178 := ftdi_elan_read_pcimem($p0, 72, 0, $p10);
    goto SeqInstr_601, SeqInstr_602;

  SeqInstr_602:
    assume assertsPassed;
    goto SeqInstr_603;

  SeqInstr_603:
    call {:si_unique_call 787} {:cexpr "retval"} boogie_si_record_i32($i178);
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    $i179 := $ne.i32($i178, 0);
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    assume {:branchcond $i179} true;
    goto $bb143, $bb144;

  $bb144:
    assume !($i179 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    $i180 := $load.i32($M.0, $p10);
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    $i181 := $and.i32($i180, $sub.i32(0, 2305));
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i181);
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    $i182 := $and.i32($i158, 2);
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    $i183 := $ne.i32($i182, 0);
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    assume {:branchcond $i183} true;
    goto $bb146, $bb147;

  $bb147:
    assume !($i183 == 1);
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    $i191 := $and.i32($i158, 1);
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    $i192 := $ne.i32($i191, 0);
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    assume {:branchcond $i192} true;
    goto $bb152, $bb154;

  $bb154:
    assume !($i192 == 1);
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    $i193 := $M.21;
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    $i194 := $trunc.i8.i1($i193);
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    assume {:branchcond $i194} true;
    goto $bb155, $bb156;

  $bb156:
    assume !($i194 == 1);
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 790} $i200 := ftdi_elan_write_pcimem($p0, 80, 0, 65536);
    goto SeqInstr_607, SeqInstr_608;

  SeqInstr_608:
    assume assertsPassed;
    goto SeqInstr_609;

  SeqInstr_609:
    call {:si_unique_call 791} {:cexpr "retval"} boogie_si_record_i32($i200);
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    $i201 := $ne.i32($i200, 0);
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    assume {:branchcond $i201} true;
    goto $bb161, $bb162;

  $bb162:
    assume !($i201 == 1);
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    $i202 := $load.i32($M.0, $p10);
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    $i203 := $and.i32($i202, 512);
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    $i204 := $ne.i32($i203, 0);
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    $i205 := (if $i204 == 1 then 0 else $sub.i32(0, 65536));
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 794} $i206 := ftdi_elan_write_pcimem($p0, 76, 0, $i205);
    goto SeqInstr_613, SeqInstr_614;

  SeqInstr_614:
    assume assertsPassed;
    goto SeqInstr_615;

  SeqInstr_615:
    call {:si_unique_call 795} {:cexpr "retval"} boogie_si_record_i32($i206);
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    $i207 := $ne.i32($i206, 0);
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    assume {:branchcond $i207} true;
    goto $bb164, $bb165;

  $bb165:
    assume !($i207 == 1);
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} $i208 := ftdi_elan_read_pcimem($p0, 4, 0, $p3);
    goto SeqInstr_616, SeqInstr_617;

  SeqInstr_617:
    assume assertsPassed;
    goto SeqInstr_618;

  SeqInstr_618:
    call {:si_unique_call 797} {:cexpr "retval"} boogie_si_record_i32($i208);
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    $i209 := $ne.i32($i208, 0);
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    assume {:branchcond $i209} true;
    goto $bb167, $bb168;

  $bb168:
    assume !($i209 == 1);
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    $i210 := $load.i32($M.0, $p10);
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    $i211 := $lshr.i32($i210, 23);
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    $i212 := $zext.i32.i64($i211);
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    $i213 := $and.i64($i212, 510);
    call {:si_unique_call 798} {:cexpr "__ms"} boogie_si_record_i64($i213);
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    $i214 := $sub.i64($i213, 1);
    call {:si_unique_call 799} {:cexpr "__ms"} boogie_si_record_i64($i214);
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    $i215 := $ne.i64($i213, 0);
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    assume {:branchcond $i215} true;
    goto $bb170, $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    assume !($i215 == 1);
    goto $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    $i219 := $slt.i32(0, $i20);
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    $i220 := 0;
    assume {:branchcond $i219} true;
    goto $bb178, $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    assume !($i219 == 1);
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    $i14 := $i220;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb178:
    assume $i219 == 1;
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    $i221, $i222 := 0, 0;
    goto $bb181;

  $bb181:
    call $i223, $i224, $i225, $i226, $i227, $i228, $i229, $i230, $i231, $i232, $i233, $i234, $i235, $i236, $i221, $i222, $i237 := ftdi_elan_check_controller_loop_$bb181($p0, $p11, $i20, $i223, $i224, $i225, $i226, $i227, $i228, $i229, $i230, $i231, $i232, $i233, $i234, $i235, $i236, $i221, $i222, $i237);
    goto $bb181_last;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    $i223 := $sext.i32.i64($i222);
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    $i224 := $add.i64($i223, 21);
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    $i225 := $trunc.i64.i32($i224);
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    $i226 := $mul.i32($i225, 4);
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} $i227 := ftdi_elan_read_pcimem($p0, $i226, 0, $p11);
    goto SeqInstr_619, SeqInstr_620;

  SeqInstr_620:
    assume assertsPassed;
    goto SeqInstr_621;

  SeqInstr_621:
    call {:si_unique_call 803} {:cexpr "retval"} boogie_si_record_i32($i227);
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    $i228 := $ne.i32($i227, 0);
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    $i229 := $i227;
    assume true;
    goto $bb183, $bb184;

  $bb184:
    assume !($i228 == 1);
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    $i230 := $load.i32($M.0, $p11);
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    $i231 := $and.i32($i230, 1);
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    $i232 := $ne.i32($i231, 0);
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb186, $bb187;

  $bb187:
    assume !($i232 == 1);
    assume {:verifier.code 0} true;
    $i234 := $i221;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    $i235 := $add.i32($i222, 1);
    call {:si_unique_call 805} {:cexpr "temp"} boogie_si_record_i32($i235);
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    $i236 := $slt.i32($i235, $i20);
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    $i237 := $i234;
    assume true;
    goto $bb189, $bb190;

  $bb190:
    assume !($i236 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    $i220 := $i237;
    goto $bb180;

  $bb189:
    assume $i236 == 1;
    assume {:verifier.code 0} true;
    $i221, $i222 := $i234, $i235;
    goto $bb189_dummy;

  $bb186:
    assume $i232 == 1;
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    $i233 := $add.i32($i221, 1);
    call {:si_unique_call 804} {:cexpr "devices"} boogie_si_record_i32($i233);
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    $i234 := $i233;
    goto $bb188;

  $bb183:
    assume $i228 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    $i14 := $i229;
    goto $bb3;

  SeqInstr_619:
    assume !assertsPassed;
    return;

  $bb170:
    assume $i215 == 1;
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    $i216 := $i214;
    goto $bb173;

  $bb173:
    call $i217, $i218, $i216 := ftdi_elan_check_controller_loop_$bb173($i217, $i218, $i216);
    goto $bb173_last;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} __const_udelay(4295000);
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    $i217 := $sub.i64($i216, 1);
    call {:si_unique_call 801} {:cexpr "__ms"} boogie_si_record_i64($i217);
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    $i218 := $ne.i64($i216, 0);
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb175, $bb176;

  $bb176:
    assume !($i218 == 1);
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb175:
    assume $i218 == 1;
    assume {:verifier.code 0} true;
    $i216 := $i217;
    goto $bb175_dummy;

  $bb167:
    assume $i209 == 1;
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    $i14 := $i208;
    goto $bb3;

  SeqInstr_616:
    assume !assertsPassed;
    return;

  $bb164:
    assume $i207 == 1;
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    $i14 := $i206;
    goto $bb3;

  SeqInstr_613:
    assume !assertsPassed;
    return;

  $bb161:
    assume $i201 == 1;
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    $i14 := $i200;
    goto $bb3;

  SeqInstr_607:
    assume !assertsPassed;
    return;

  $bb155:
    assume {:verifier.code 0} true;
    assume $i194 == 1;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    $i195 := $load.i32($M.0, $p10);
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    $i196 := $or.i32($i195, 512);
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i196);
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    $i197 := $load.i32($M.0, $p10);
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} $i198 := ftdi_elan_write_pcimem($p0, 72, 0, $i197);
    goto SeqInstr_610, SeqInstr_611;

  SeqInstr_611:
    assume assertsPassed;
    goto SeqInstr_612;

  SeqInstr_612:
    call {:si_unique_call 793} {:cexpr "retval"} boogie_si_record_i32($i198);
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    $i199 := $ne.i32($i198, 0);
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    assume {:branchcond $i199} true;
    goto $bb157, $bb158;

  $bb158:
    assume !($i199 == 1);
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb157:
    assume $i199 == 1;
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    $i14 := $i198;
    goto $bb3;

  SeqInstr_610:
    assume !assertsPassed;
    return;

  $bb152:
    assume {:verifier.code 0} true;
    assume $i192 == 1;
    goto $bb153;

  $bb146:
    assume $i183 == 1;
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    $i184 := $load.i32($M.0, $p10);
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    $i185 := $or.i32($i184, 4096);
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i185);
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    $i186 := $load.i32($M.0, $p10);
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    $i187 := $and.i32($i186, 16776703);
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i187);
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    $i188 := $load.i32($M.0, $p10);
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} $i189 := ftdi_elan_write_pcimem($p0, 72, 0, $i188);
    goto SeqInstr_604, SeqInstr_605;

  SeqInstr_605:
    assume assertsPassed;
    goto SeqInstr_606;

  SeqInstr_606:
    call {:si_unique_call 789} {:cexpr "retval"} boogie_si_record_i32($i189);
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    $i190 := $ne.i32($i189, 0);
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    assume {:branchcond $i190} true;
    goto $bb148, $bb149;

  $bb149:
    assume !($i190 == 1);
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb148:
    assume $i190 == 1;
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    $i14 := $i189;
    goto $bb3;

  SeqInstr_604:
    assume !assertsPassed;
    return;

  $bb143:
    assume $i179 == 1;
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    $i14 := $i178;
    goto $bb3;

  SeqInstr_601:
    assume !assertsPassed;
    return;

  $bb140:
    assume $i177 == 1;
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    $i14 := $i176;
    goto $bb3;

  SeqInstr_598:
    assume !assertsPassed;
    return;

  $bb137:
    assume $i175 == 1;
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    $i14 := $i174;
    goto $bb3;

  SeqInstr_595:
    assume !assertsPassed;
    return;

  $bb134:
    assume $i173 == 1;
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    $i14 := $i172;
    goto $bb3;

  SeqInstr_592:
    assume !assertsPassed;
    return;

  $bb131:
    assume $i171 == 1;
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    $i14 := $i170;
    goto $bb3;

  SeqInstr_589:
    assume !assertsPassed;
    return;

  $bb128:
    assume $i169 == 1;
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    $i14 := $i168;
    goto $bb3;

  SeqInstr_586:
    assume !assertsPassed;
    return;

  $bb125:
    assume $i167 == 1;
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    $i14 := $i166;
    goto $bb3;

  SeqInstr_583:
    assume !assertsPassed;
    return;

  $bb122:
    assume $i165 == 1;
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    $i14 := $i164;
    goto $bb3;

  SeqInstr_580:
    assume !assertsPassed;
    return;

  $bb115:
    assume {:verifier.code 0} true;
    assume $i145 == 1;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    $i147 := $and.i32($i76, 4);
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    $i148 := $eq.i32($i147, 0);
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    $i149 := $i76;
    assume true;
    goto $bb117, $bb118;

  $bb118:
    assume !($i148 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    $p154 := $load.ref($M.0, $p153);
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p154, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    $i156 := $load.i32($M.0, $p6);
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    $i157 := $load.i32($M.0, $p8);
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} dev_err.ref.ref.i32.i32($p155, .str.33, $i156, $i157);
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    $i158 := $i149;
    goto $bb121;

  $bb117:
    assume $i148 == 1;
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    $i150 := $or.i32($i76, 4);
    call {:si_unique_call 768} {:cexpr "quirk"} boogie_si_record_i32($i150);
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} $i151 := ftdi_elan_read_pcimem($p0, 8, 0, $p5);
    goto SeqInstr_577, SeqInstr_578;

  SeqInstr_578:
    assume assertsPassed;
    goto SeqInstr_579;

  SeqInstr_579:
    call {:si_unique_call 770} {:cexpr "retval"} boogie_si_record_i32($i151);
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    $i152 := $ne.i32($i151, 0);
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    $i78 := $i151;
    assume true;
    goto $bb62, $bb119;

  $bb119:
    assume !($i152 == 1);
    assume {:verifier.code 0} true;
    $i76, $i77 := $i150, $i91;
    goto $bb119_dummy;

  $bb62:
    assume $i152 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    $i75 := $i78;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    $i14 := $i75;
    goto $bb3;

  SeqInstr_577:
    assume !assertsPassed;
    return;

  $bb112:
    assume {:verifier.code 0} true;
    assume $i143 == 1;
    goto $bb113;

  $bb109:
    assume $i139 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    $i14 := $i140;
    goto $bb3;

  SeqInstr_574:
    assume !assertsPassed;
    return;

  $bb106:
    assume $i136 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    $i14 := $i137;
    goto $bb3;

  SeqInstr_571:
    assume !assertsPassed;
    return;

  $bb103:
    assume $i133 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    $i14 := $i134;
    goto $bb3;

  SeqInstr_568:
    assume !assertsPassed;
    return;

  $bb100:
    assume $i126 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    $i14 := $i127;
    goto $bb3;

  SeqInstr_565:
    assume !assertsPassed;
    return;

  $bb97:
    assume $i118 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    $i14 := $i119;
    goto $bb3;

  SeqInstr_562:
    assume !assertsPassed;
    return;

  $bb94:
    assume $i115 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    $i14 := $i116;
    goto $bb3;

  SeqInstr_559:
    assume !assertsPassed;
    return;

  $bb91:
    assume $i112 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    $i14 := $i113;
    goto $bb3;

  SeqInstr_556:
    assume !assertsPassed;
    return;

  $bb88:
    assume $i109 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    $i14 := $i110;
    goto $bb3;

  SeqInstr_553:
    assume !assertsPassed;
    return;

  $bb79:
    assume $i100 == 1;
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    $i101 := $load.i32($M.0, $p2);
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} $i102 := ftdi_elan_write_pcimem($p0, 4, 0, $i101);
    goto SeqInstr_547, SeqInstr_548;

  SeqInstr_548:
    assume assertsPassed;
    goto SeqInstr_549;

  SeqInstr_549:
    call {:si_unique_call 749} {:cexpr "retval"} boogie_si_record_i32($i102);
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    $i103 := $ne.i32($i102, 0);
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    $i104 := $i102;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    call {:si_unique_call 750} $i105 := ftdi_elan_read_pcimem($p0, 4, 0, $p3);
    goto SeqInstr_550, SeqInstr_551;

  SeqInstr_551:
    assume assertsPassed;
    goto SeqInstr_552;

  SeqInstr_552:
    call {:si_unique_call 751} {:cexpr "retval"} boogie_si_record_i32($i105);
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    $i106 := $ne.i32($i105, 0);
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    $i107 := $i105;
    assume true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb84:
    assume $i106 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    $i14 := $i107;
    goto $bb3;

  SeqInstr_550:
    assume !assertsPassed;
    return;

  $bb81:
    assume $i103 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    $i14 := $i104;
    goto $bb3;

  SeqInstr_547:
    assume !assertsPassed;
    return;

  $bb73:
    assume $i90 == 1;
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    $i92 := $sub.i32($i85, 1);
    call {:si_unique_call 743} {:cexpr "reset_timeout"} boogie_si_record_i32($i92);
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    $i93 := $eq.i32($i92, 0);
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i93 == 1);
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} msleep(5);
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} $i97 := ftdi_elan_read_pcimem($p0, 8, 0, $p5);
    goto SeqInstr_544, SeqInstr_545;

  SeqInstr_545:
    assume assertsPassed;
    goto SeqInstr_546;

  SeqInstr_546:
    call {:si_unique_call 747} {:cexpr "retval"} boogie_si_record_i32($i97);
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    $i98 := $ne.i32($i97, 0);
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    $i87 := $i97;
    assume true;
    goto $bb71, $bb77;

  $bb77:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    $i85 := $i92;
    goto $bb77_dummy;

  $bb71:
    assume $i98 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    $i86 := $i87;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    $i14 := $i86;
    goto $bb3;

  SeqInstr_544:
    assume !assertsPassed;
    return;

  $bb75:
    assume $i93 == 1;
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    $p95 := $load.ref($M.0, $p94);
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p95, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} dev_err.ref.ref($p96, .str.32);
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 19);
    goto $bb3;

  $bb67:
    assume $i83 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    $i86 := $i84;
    goto $bb70;

  SeqInstr_541:
    assume !assertsPassed;
    return;

  $bb64:
    assume $i80 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    $i14 := $i81;
    goto $bb3;

  SeqInstr_538:
    assume !assertsPassed;
    return;

  $bb58:
    assume {:verifier.code 0} true;
    assume $i74 == 1;
    goto $bb59;

  SeqInstr_535:
    assume !assertsPassed;
    return;

  $bb55:
    assume $i72 == 1;
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    $i14 := $i71;
    goto $bb3;

  SeqInstr_532:
    assume !assertsPassed;
    return;

  $bb41:
    assume $i59 == 1;
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    $i60 := $slt.i32(0, $i20);
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume !($i60 == 1);
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb43:
    assume $i60 == 1;
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    $i61 := 0;
    goto $bb46;

  $bb46:
    call $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i61 := ftdi_elan_check_controller_loop_$bb46($p0, $i20, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i61);
    goto $bb46_last;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i62 := $sext.i32.i64($i61);
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    $i63 := $add.i64($i62, 21);
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    $i64 := $trunc.i64.i32($i63);
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    $i65 := $mul.i32($i64, 4);
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} $i66 := ftdi_elan_write_pcimem($p0, $i65, 0, 512);
    goto SeqInstr_529, SeqInstr_530;

  SeqInstr_530:
    assume assertsPassed;
    goto SeqInstr_531;

  SeqInstr_531:
    call {:si_unique_call 733} {:cexpr "retval"} boogie_si_record_i32($i66);
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    $i67 := $ne.i32($i66, 0);
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $i68 := $i66;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i69 := $add.i32($i61, 1);
    call {:si_unique_call 734} {:cexpr "temp"} boogie_si_record_i32($i69);
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    $i70 := $slt.i32($i69, $i20);
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i70 == 1);
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb51:
    assume $i70 == 1;
    assume {:verifier.code 0} true;
    $i61 := $i69;
    goto $bb51_dummy;

  $bb48:
    assume $i67 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    $i14 := $i68;
    goto $bb3;

  SeqInstr_529:
    assume !assertsPassed;
    return;

  $bb38:
    assume $i56 == 1;
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    $i14 := $i55;
    goto $bb3;

  SeqInstr_526:
    assume !assertsPassed;
    return;

  $bb35:
    assume $i54 == 1;
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    $i14 := $i53;
    goto $bb3;

  SeqInstr_523:
    assume !assertsPassed;
    return;

  $bb32:
    assume $i52 == 1;
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    $i14 := $i51;
    goto $bb3;

  SeqInstr_520:
    assume !assertsPassed;
    return;

  $bb22:
    assume $i39 == 1;
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p2);
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    $i44 := $and.i32($i43, 512);
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i44);
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p2);
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    $i46 := $or.i32($i45, 64);
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i46);
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    $i42 := 10;
    goto $bb30;

  $bb20:
    assume $i38 == 1;
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i36, 128);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb24;

  $bb25:
    assume $i40 == 1;
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    $i42 := 0;
    goto $bb30;

  $bb18:
    assume $i37 == 1;
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i36, 64);
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb27, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb24;

  $bb27:
    assume {:verifier.code 0} true;
    assume $i41 == 1;
    goto $bb28;

  $bb14:
    assume $i34 == 1;
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    $i14 := $i33;
    goto $bb3;

  SeqInstr_517:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i22 == 1;
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    $i14 := $i21;
    goto $bb3;

  SeqInstr_514:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    $i14 := $i17;
    goto $bb3;

  SeqInstr_511:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    $i14 := $i15;
    goto $bb3;

  SeqInstr_508:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $i14 := $i12;
    goto $bb3;

  SeqInstr_505:
    assume !assertsPassed;
    return;

  $bb189_dummy:
    assume false;
    return;

  $bb181_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3716;

  $bb175_dummy:
    assume false;
    return;

  $bb173_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3704;

  $bb77_dummy:
    assume false;
    return;

  $bb69_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb119_dummy:
    assume false;
    return;

  $bb61_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb51_dummy:
    assume false;
    return;

  $bb46_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3440;
}



const ftdi_elan_close_controller: ref;

axiom ftdi_elan_close_controller == $sub.ref(0, 349619);

procedure ftdi_elan_close_controller($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $CurrAddr, assertsPassed, $M.7, $M.6, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12;



implementation ftdi_elan_close_controller($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i32;
  var $i39: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 807} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 808} {:cexpr "ftdi_elan_close_controller:arg:fn"} boogie_si_record_i32($i1);
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    $i4 := $shl.i32($i1, 8);
    call {:si_unique_call 809} {:cexpr "activePCIfn"} boogie_si_record_i32($i4);
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} $i5 := ftdi_elan_write_reg($p0, 10847);
    goto SeqInstr_622, SeqInstr_623;

  SeqInstr_623:
    assume assertsPassed;
    goto SeqInstr_624;

  SeqInstr_624:
    call {:si_unique_call 811} {:cexpr "UxxxStatus"} boogie_si_record_i32($i5);
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i8 := $or.i32($i4, 16);
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} $i9 := ftdi_elan_write_config($p0, $i8, 0, $sub.i32(0, 1));
    goto SeqInstr_625, SeqInstr_626;

  SeqInstr_626:
    assume assertsPassed;
    goto SeqInstr_627;

  SeqInstr_627:
    call {:si_unique_call 813} {:cexpr "UxxxStatus"} boogie_si_record_i32($i9);
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i11 := $or.i32($i4, 16);
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} $i12 := ftdi_elan_read_config($p0, $i11, 0, $p3);
    goto SeqInstr_628, SeqInstr_629;

  SeqInstr_629:
    assume assertsPassed;
    goto SeqInstr_630;

  SeqInstr_630:
    call {:si_unique_call 815} {:cexpr "UxxxStatus"} boogie_si_record_i32($i12);
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i14 := $or.i32($i4, 16);
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 816} $i15 := ftdi_elan_write_config($p0, $i14, 0, 0);
    goto SeqInstr_631, SeqInstr_632;

  SeqInstr_632:
    assume assertsPassed;
    goto SeqInstr_633;

  SeqInstr_633:
    call {:si_unique_call 817} {:cexpr "UxxxStatus"} boogie_si_record_i32($i15);
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i17 := $or.i32($i4, 16);
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 818} $i18 := ftdi_elan_read_config($p0, $i17, 0, $p3);
    goto SeqInstr_634, SeqInstr_635;

  SeqInstr_635:
    assume assertsPassed;
    goto SeqInstr_636;

  SeqInstr_636:
    call {:si_unique_call 819} {:cexpr "UxxxStatus"} boogie_si_record_i32($i18);
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i20 := $or.i32($i4, 12);
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 820} $i21 := ftdi_elan_read_config($p0, $i20, 0, $p2);
    goto SeqInstr_637, SeqInstr_638;

  SeqInstr_638:
    assume assertsPassed;
    goto SeqInstr_639;

  SeqInstr_639:
    call {:si_unique_call 821} {:cexpr "UxxxStatus"} boogie_si_record_i32($i21);
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p2);
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i23, $sub.i32(0, 65281));
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i24);
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p2);
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    $i26 := $or.i32($i25, 5632);
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i26);
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    $i27 := $or.i32($i4, 12);
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p2);
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 822} $i29 := ftdi_elan_write_config($p0, $i27, 0, $i28);
    goto SeqInstr_640, SeqInstr_641;

  SeqInstr_641:
    assume assertsPassed;
    goto SeqInstr_642;

  SeqInstr_642:
    call {:si_unique_call 823} {:cexpr "UxxxStatus"} boogie_si_record_i32($i29);
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i31 := $or.i32($i4, 12);
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 824} $i32 := ftdi_elan_read_config($p0, $i31, 0, $p3);
    goto SeqInstr_643, SeqInstr_644;

  SeqInstr_644:
    assume assertsPassed;
    goto SeqInstr_645;

  SeqInstr_645:
    call {:si_unique_call 825} {:cexpr "UxxxStatus"} boogie_si_record_i32($i32);
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i34 := $or.i32($i4, 4);
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 826} $i35 := ftdi_elan_write_config($p0, $i34, 0, 0);
    goto SeqInstr_646, SeqInstr_647;

  SeqInstr_647:
    assume assertsPassed;
    goto SeqInstr_648;

  SeqInstr_648:
    call {:si_unique_call 827} {:cexpr "UxxxStatus"} boogie_si_record_i32($i35);
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i37 := $or.i32($i4, 4);
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} $i38 := ftdi_elan_read_config($p0, $i37, 0, $p3);
    goto SeqInstr_649, SeqInstr_650;

  SeqInstr_650:
    assume assertsPassed;
    goto SeqInstr_651;

  SeqInstr_651:
    call {:si_unique_call 829} {:cexpr "UxxxStatus"} boogie_si_record_i32($i38);
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb29:
    assume $i39 == 1;
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    $i7 := $i38;
    goto $bb3;

  SeqInstr_649:
    assume !assertsPassed;
    return;

  $bb26:
    assume $i36 == 1;
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    $i7 := $i35;
    goto $bb3;

  SeqInstr_646:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    $i7 := $i32;
    goto $bb3;

  SeqInstr_643:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i30 == 1;
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    $i7 := $i29;
    goto $bb3;

  SeqInstr_640:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i22 == 1;
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    $i7 := $i21;
    goto $bb3;

  SeqInstr_637:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i19 == 1;
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    $i7 := $i18;
    goto $bb3;

  SeqInstr_634:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i16 == 1;
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    $i7 := $i15;
    goto $bb3;

  SeqInstr_631:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i13 == 1;
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    $i7 := $i12;
    goto $bb3;

  SeqInstr_628:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    $i7 := $i9;
    goto $bb3;

  SeqInstr_625:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    $i7 := $i5;
    goto $bb3;

  SeqInstr_622:
    assume !assertsPassed;
    return;
}



const __const_udelay: ref;

axiom __const_udelay == $sub.ref(0, 350651);

procedure __const_udelay($i0: i64);
  free requires assertsPassed;



implementation __const_udelay($i0: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 830} {:cexpr "__const_udelay:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    return;
}



const ftdi_elan_flush_input_fifo: ref;

axiom ftdi_elan_flush_input_fifo == $sub.ref(0, 351683);

procedure ftdi_elan_flush_input_fifo($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.16, $M.22, $CurrAddr;



implementation ftdi_elan_flush_input_fifo($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $p38: ref;
  var $i39: i8;
  var $i40: i1;
  var $i41: i32;
  var $i42: i32;
  var $i43: i32;
  var $i44: i64;
  var $p45: ref;
  var $i47: i1;
  var $i49: i32;
  var $i50: i64;
  var $p51: ref;
  var $p48: ref;
  var $p46: ref;
  var $i52: i32;
  var $i53: i32;
  var $i54: i32;
  var $i55: i32;
  var $i56: i1;
  var $i35: i32;
  var $p36: ref;
  var $p37: ref;
  var $i26: i32;
  var $i57: i32;
  var $i58: i1;
  var $i59: i32;
  var $i60: i32;
  var $p61: ref;
  var $p62: ref;
  var $i63: i8;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i8;
  var $i68: i32;
  var $i69: i1;
  var $i70: i32;
  var $i71: i1;
  var $i73: i32;
  var $i74: i1;
  var $i75: i32;
  var $i76: i32;
  var $i77: i32;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $i81: i32;
  var $i82: i1;
  var $i83: i32;
  var $i84: i32;
  var $p85: ref;
  var $p86: ref;
  var $i87: i8;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $i91: i32;
  var $i92: i32;
  var $i93: i1;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $i97: i1;
  var $i98: i32;
  var $i99: i32;
  var $i100: i1;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $i104: i1;
  var $i106: i32;
  var $i107: i1;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $i105: i32;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $i72: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 832} $p2 := $alloc($mul.ref(94, $zext.i32.i64(1)));
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    $i3, $i4, $i5 := 20, 5, 10;
    goto $bb1;

  $bb1:
    call $i3, $i4, $i5, $i6, $i7, $i8, $p9, $p10, $p11, $i12, $i13, $i14, $p15, $p16, $i17, $p18, $p19, $p20, $i21, $i22, $i23, $i24, $i25, $p28, $p29, $p30, $i31, $i32, $i33, $i34, $p38, $i39, $i40, $i41, $i42, $i43, $i44, $p45, $i47, $i49, $i50, $p51, $p48, $p46, $i52, $i53, $i54, $i55, $i56, $i35, $p36, $p37, $i26, $i57, $i58, $i59, $i60, $p61, $p62, $i63, $p64, $p65, $p66, $i67, $i68, $i69, $i70, $i71, $i73, $i74, $i75, $i76, $i77, $i81, $i82, $i83, $i84, $p85, $p86, $i87, $p88, $p89, $p90, $i91, $i92, $i93, $i97, $i98, $i99, $i100, $i104, $i106, $i107, $i105 := ftdi_elan_flush_input_fifo_loop_$bb1($p0, $p1, $p2, $i3, $i4, $i5, $i6, $i7, $i8, $p9, $p10, $p11, $i12, $i13, $i14, $p15, $p16, $i17, $p18, $p19, $p20, $i21, $i22, $i23, $i24, $i25, $p28, $p29, $p30, $i31, $i32, $i33, $i34, $p38, $i39, $i40, $i41, $i42, $i43, $i44, $p45, $i47, $i49, $i50, $p51, $p48, $p46, $i52, $i53, $i54, $i55, $i56, $i35, $p36, $p37, $i26, $i57, $i58, $i59, $i60, $p61, $p62, $i63, $p64, $p65, $p66, $i67, $i68, $i69, $i70, $i71, $i73, $i74, $i75, $i76, $i77, $i81, $i82, $i83, $i84, $p85, $p86, $i87, $p88, $p89, $p90, $i91, $i92, $i93, $i97, $i98, $i99, $i100, $i104, $i106, $i107, $i105);
    goto $bb1_last;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    $i6, $i7 := $i4, $i5;
    goto $bb2;

  $bb2:
    call $i6, $i7, $i8, $p9, $p10, $p11, $i12, $i13, $i14, $p15, $p16, $i17, $p18, $p19, $p20, $i21, $i22, $i23, $i24, $i25, $p28, $p29, $p30, $i31, $i32, $i33, $i34, $p38, $i39, $i40, $i41, $i42, $i43, $i44, $p45, $i47, $i49, $i50, $p51, $p48, $p46, $i52, $i53, $i54, $i55, $i56, $i35, $p36, $p37, $i26, $i57, $i58, $i59, $i60, $i81, $i82, $i83, $i84, $i97, $i98, $i99, $i100, $i104, $i106, $i107, $i105 := ftdi_elan_flush_input_fifo_loop_$bb2($p0, $p1, $p2, $i6, $i7, $i8, $p9, $p10, $p11, $i12, $i13, $i14, $p15, $p16, $i17, $p18, $p19, $p20, $i21, $i22, $i23, $i24, $i25, $p28, $p29, $p30, $i31, $i32, $i33, $i34, $p38, $i39, $i40, $i41, $i42, $i43, $i44, $p45, $i47, $i49, $i50, $p51, $p48, $p46, $i52, $i53, $i54, $i55, $i56, $i35, $p36, $p37, $i26, $i57, $i58, $i59, $i60, $i81, $i82, $i83, $i84, $i97, $i98, $i99, $i100, $i104, $i106, $i107, $i105);
    goto $bb2_last;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    $i8 := $i7;
    goto $bb3;

  $bb3:
    call $i8, $p9, $p10, $p11, $i12, $i13, $i14, $p15, $p16, $i17, $p18, $p19, $p20, $i21, $i22, $i23, $i24, $i25, $p28, $p29, $p30, $i31, $i32, $i33, $i34, $p38, $i39, $i40, $i41, $i42, $i43, $i44, $p45, $i47, $i49, $i50, $p51, $p48, $p46, $i52, $i53, $i54, $i55, $i56, $i35, $p36, $p37, $i26, $i57, $i58, $i59, $i60, $i81, $i82, $i83, $i84, $i97, $i98, $i104, $i106, $i107, $i105 := ftdi_elan_flush_input_fifo_loop_$bb3($p0, $p1, $p2, $i6, $i8, $p9, $p10, $p11, $i12, $i13, $i14, $p15, $p16, $i17, $p18, $p19, $p20, $i21, $i22, $i23, $i24, $i25, $p28, $p29, $p30, $i31, $i32, $i33, $i34, $p38, $i39, $i40, $i41, $i42, $i43, $i44, $p45, $i47, $i49, $i50, $p51, $p48, $p46, $i52, $i53, $i54, $i55, $i56, $i35, $p36, $p37, $i26, $i57, $i58, $i59, $i60, $i81, $i82, $i83, $i84, $i97, $i98, $i104, $i106, $i107, $i105);
    goto $bb3_last;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p9, $p10, $p11, $i12, $i13, $i14, $p15, $p16, $i17, $p18, $p19, $p20, $i21, $i22, $i23, $i24, $i25, $p28, $p29, $p30, $i31, $i32, $i33, $i34, $p38, $i39, $i40, $i41, $i42, $i43, $i44, $p45, $i47, $i49, $i50, $p51, $p48, $p46, $i52, $i53, $i54, $i55, $i56, $i35, $p36, $p37, $i26 := ftdi_elan_flush_input_fifo_loop_$bb4($p0, $p1, $p2, $p9, $p10, $p11, $i12, $i13, $i14, $p15, $p16, $i17, $p18, $p19, $p20, $i21, $i22, $i23, $i24, $i25, $p28, $p29, $p30, $i31, $i32, $i33, $i34, $p38, $i39, $i40, $i41, $i42, $i43, $i44, $p45, $i47, $i49, $i50, $p51, $p48, $p46, $i52, $i53, $i54, $i55, $i56, $i35, $p36, $p37, $i26);
    goto $bb4_last;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7432, 1));
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} $i14 := __create_pipe($p10, $i13);
    call {:si_unique_call 834} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    $i17 := $or.i32($i14, $sub.i32(0, 1073741696));
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7400, 1));
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7408, 1));
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.0, $p20);
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i64.i32($i21);
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} $i23 := usb_bulk_msg($p16, $i17, $p19, $i22, $p1, 100);
    call {:si_unique_call 836} {:cexpr "tmp___0"} boogie_si_record_i32($i23);
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.16, $p1);
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    $i25 := $sgt.i32($i24, 2);
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    $i26 := $i23;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.16, $p1);
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    $i58 := $sgt.i32($i57, 1);
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    $i59, $i60 := $i6, $i8;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i58 == 1);
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    $i81 := $load.i32($M.16, $p1);
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    $i82 := $sgt.i32($i81, 0);
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    $i83, $i84 := $i6, $i8;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i82 == 1);
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    $i97 := $eq.i32($i26, $sub.i32(0, 110));
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    $i98 := $i8;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i97 == 1);
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    $i104 := $eq.i32($i26, 0);
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    $i105 := $i26;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    $p112 := $load.ref($M.0, $p111);
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p112, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 856} dev_err.ref.ref.i32($p113, .str.21, $i105);
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    $i72 := $i105;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $r := $i72;
    return;

  $bb40:
    assume $i104 == 1;
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    $i106 := $sub.i32($i8, 1);
    call {:si_unique_call 855} {:cexpr "retry_on_empty"} boogie_si_record_i32($i106);
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    $i107 := $sgt.i32($i8, 0);
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i107 == 1);
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    $p109 := $load.ref($M.0, $p108);
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p109, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 857} dev_err.ref.ref($p110, .str.20);
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    $i72 := $sub.i32(0, 12);
    goto $bb28;

  $bb42:
    assume $i107 == 1;
    assume {:verifier.code 0} true;
    $i8 := $i106;
    goto $bb42_dummy;

  $bb36:
    assume $i97 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    $i99 := $sub.i32($i6, 1);
    call {:si_unique_call 853} {:cexpr "retry_on_timeout"} boogie_si_record_i32($i99);
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    $i100 := $sgt.i32($i6, 0);
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i100 == 1);
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    $p102 := $load.ref($M.0, $p101);
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p102, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 854} dev_err.ref.ref($p103, .str.19);
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    $i72 := $sub.i32(0, 12);
    goto $bb28;

  $bb38:
    assume $i100 == 1;
    assume {:verifier.code 0} true;
    $i6, $i7 := $i99, $i98;
    goto $bb38_dummy;

  $bb32:
    assume $i82 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7400, 1));
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.0, $p85);
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    $i87 := $load.i8($M.0, $p86);
    call {:si_unique_call 849} {:cexpr "b1"} boogie_si_record_i8($i87);
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.0, $p88);
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p89, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    $i91 := $sext.i8.i32($i87);
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 850} dev_err.ref.ref.i32($p90, .str.24, $i91);
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    $i92 := $sub.i32($i3, 1);
    call {:si_unique_call 851} {:cexpr "retry_on_status"} boogie_si_record_i32($i92);
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    $i93 := $sgt.i32($i3, 0);
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i93 == 1);
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    $p95 := $load.ref($M.0, $p94);
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p95, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} dev_err.ref.ref($p96, .str.23);
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    $i72 := $sub.i32(0, 14);
    goto $bb28;

  $bb34:
    assume $i93 == 1;
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    $i75, $i76, $i77 := $i83, $i84, $i92;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    $i3, $i4, $i5 := $i77, $i75, $i76;
    goto corral_source_split_3923_dummy;

  $bb21:
    assume $i58 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7400, 1));
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    $i63 := $load.i8($M.0, $p62);
    call {:si_unique_call 845} {:cexpr "s1"} boogie_si_record_i8($i63);
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7400, 1));
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p64);
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($p65, $mul.ref(1, 1));
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    $i67 := $load.i8($M.0, $p66);
    call {:si_unique_call 846} {:cexpr "s2"} boogie_si_record_i8($i67);
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    $i68 := $sext.i8.i32($i63);
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    $i69 := $eq.i32($i68, 49);
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i69 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i73 := $sub.i32($i3, 1);
    call {:si_unique_call 847} {:cexpr "retry_on_status"} boogie_si_record_i32($i73);
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    $i74 := $sgt.i32($i3, 0);
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i74 == 1);
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.0, $p78);
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p79, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 848} dev_err.ref.ref($p80, .str.23);
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    $i72 := $sub.i32(0, 14);
    goto $bb28;

  $bb29:
    assume $i74 == 1;
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    $i75, $i76, $i77 := $i59, $i60, $i73;
    goto $bb31;

  $bb23:
    assume $i69 == 1;
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $i70 := $sext.i8.i32($i67);
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    $i71 := $eq.i32($i70, 96);
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i71 == 1);
    goto $bb25;

  $bb26:
    assume $i71 == 1;
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    $i72 := 0;
    goto $bb28;

  $bb5:
    assume $i25 == 1;
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7400, 1));
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 94)), $mul.ref(0, 1));
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    $M.22 := $store.i8($M.22, $p30, 0);
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.16, $p1);
    call {:si_unique_call 837} {:cexpr "tmp___4"} boogie_si_record_i32($i31);
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.16, $p1);
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    $i33 := $sub.i32($i32, 1);
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    $M.16 := $store.i32($M.16, $p1, $i33);
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    $i34 := $sgt.i32($i31, 0);
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb20_dummy;

  $bb7:
    assume $i34 == 1;
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    $i35, $p36, $p37 := 0, $p29, $p2;
    goto $bb10;

  $bb10:
    call $p38, $i39, $i40, $i41, $i42, $i43, $i44, $p45, $i47, $i49, $i50, $p51, $p48, $p46, $i52, $i53, $i54, $i55, $i56, $i35, $p36, $p37 := ftdi_elan_flush_input_fifo_loop_$bb10($p1, $p38, $i39, $i40, $i41, $i42, $i43, $i44, $p45, $i47, $i49, $i50, $p51, $p48, $p46, $i52, $i53, $i54, $i55, $i56, $i35, $p36, $p37);
    goto $bb10_last;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($p36, $mul.ref(1, 1));
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.0, $p36);
    call {:si_unique_call 838} {:cexpr "c"} boogie_si_record_i8($i39);
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    $i40 := $slt.i32($i35, 31);
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i40 == 1);
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    $i47 := $sgt.i32($i35, 31);
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i47 == 1);
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} $i49 := sprintf.ref.ref($p37, .str.5);
    call {:si_unique_call 844} {:cexpr "tmp___3"} boogie_si_record_i32($i49);
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    $i50 := $sext.i32.i64($i49);
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($p37, $mul.ref($i50, 1));
    assume {:verifier.code 0} true;
    $p48 := $p51;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p46 := $p48;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    $i52 := $add.i32($i35, 1);
    call {:si_unique_call 841} {:cexpr "bytes_read"} boogie_si_record_i32($i52);
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.16, $p1);
    call {:si_unique_call 842} {:cexpr "tmp___4"} boogie_si_record_i32($i53);
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.16, $p1);
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    $i55 := $sub.i32($i54, 1);
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    $M.16 := $store.i32($M.16, $p1, $i55);
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    $i56 := $sgt.i32($i53, 0);
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i56 == 1);
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb18:
    assume $i56 == 1;
    assume {:verifier.code 0} true;
    $i35, $p36, $p37 := $i52, $p38, $p46;
    goto $bb18_dummy;

  $bb15:
    assume $i47 == 1;
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    $p48 := $p37;
    goto $bb17;

  $bb12:
    assume $i40 == 1;
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    $i41 := $sext.i8.i32($i39);
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    $i42 := $and.i32($i41, 255);
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 839} $i43 := sprintf.ref.ref.i32($p37, .str.4, $i42);
    call {:si_unique_call 840} {:cexpr "tmp___2"} boogie_si_record_i32($i43);
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    $i44 := $sext.i32.i64($i43);
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($p37, $mul.ref($i44, 1));
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    $p46 := $p45;
    goto $bb14;

  $bb18_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3857;

  $bb20_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    $M.16 := $store.i32($M.16, $p1, 0);
    goto corral_source_split_3820;

  $bb42_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3818;

  $bb38_dummy:
    assume false;
    return;

  $bb2_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3816;

  corral_source_split_3923_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3814;
}



const ftdi_elan_synchronize_flush: ref;

axiom ftdi_elan_synchronize_flush == $sub.ref(0, 352715);

procedure ftdi_elan_synchronize_flush($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation ftdi_elan_synchronize_flush($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i8;
  var $i22: i32;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $p40: ref;
  var $i41: i64;
  var $i7: i32;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $p146: ref;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $p152: ref;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $p160: ref;
  var $p161: ref;
  var $p162: ref;
  var $p163: ref;
  var $p164: ref;
  var $p165: ref;
  var $p166: ref;
  var $p167: ref;
  var $p168: ref;
  var $p169: ref;
  var $p170: ref;
  var $p171: ref;
  var $p172: ref;
  var $p173: ref;
  var $p174: ref;
  var $p175: ref;
  var $p176: ref;
  var $p177: ref;
  var $p178: ref;
  var $p179: ref;
  var $p180: ref;
  var $p181: ref;
  var $p182: ref;
  var $p183: ref;
  var $p184: ref;
  var $p185: ref;
  var $p186: ref;
  var $p187: ref;
  var $p188: ref;
  var $p189: ref;
  var $p190: ref;
  var $p191: ref;
  var $p192: ref;
  var $p193: ref;
  var $p194: ref;
  var $p195: ref;
  var $p196: ref;
  var $p197: ref;
  var $p198: ref;
  var $p199: ref;
  var $p200: ref;
  var $p201: ref;
  var $p202: ref;
  var $p203: ref;
  var $p204: ref;
  var $p205: ref;
  var $p206: ref;
  var $p207: ref;
  var $p208: ref;
  var $p209: ref;
  var $p210: ref;
  var $p211: ref;
  var $p212: ref;
  var $p213: ref;
  var $p214: ref;
  var $p215: ref;
  var $p216: ref;
  var $p217: ref;
  var $p218: ref;
  var $p219: ref;
  var $p220: ref;
  var $p221: ref;
  var $p222: ref;
  var $p223: ref;
  var $p224: ref;
  var $p225: ref;
  var $p226: ref;
  var $p227: ref;
  var $p228: ref;
  var $p229: ref;
  var $p230: ref;
  var $p231: ref;
  var $p232: ref;
  var $p233: ref;
  var $p234: ref;
  var $p235: ref;
  var $p236: ref;
  var $p237: ref;
  var $p238: ref;
  var $p239: ref;
  var $p240: ref;
  var $p241: ref;
  var $p242: ref;
  var $p243: ref;
  var $p244: ref;
  var $p245: ref;
  var $p246: ref;
  var $p247: ref;
  var $p248: ref;
  var $p249: ref;
  var $p250: ref;
  var $p251: ref;
  var $p252: ref;
  var $p253: ref;
  var $p254: ref;
  var $p255: ref;
  var $p256: ref;
  var $p257: ref;
  var $p258: ref;
  var $p259: ref;
  var $p260: ref;
  var $p261: ref;
  var $p262: ref;
  var $p263: ref;
  var $p264: ref;
  var $p265: ref;
  var $p266: ref;
  var $p267: ref;
  var $p268: ref;
  var $p269: ref;
  var $p270: ref;
  var $p271: ref;
  var $p272: ref;
  var $p273: ref;
  var $p274: ref;
  var $p275: ref;
  var $p276: ref;
  var $p277: ref;
  var $p278: ref;
  var $p279: ref;
  var $p280: ref;
  var $p281: ref;
  var $p282: ref;
  var $p283: ref;
  var $p284: ref;
  var $p285: ref;
  var $p286: ref;
  var $p287: ref;
  var $p288: ref;
  var $p289: ref;
  var $p290: ref;
  var $p291: ref;
  var $p292: ref;
  var $p293: ref;
  var $p294: ref;
  var $p295: ref;
  var $p296: ref;
  var $p297: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 858} $p1 := usb_alloc_urb(0, 208);
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64(257);
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(112, 1));
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 860} $p12 := usb_alloc_coherent($p9, $i10, 208, $p11);
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p12, 85);
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($p12, $mul.ref(1, 1));
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p42, 85);
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($p12, $mul.ref(2, 1));
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p43, 85);
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($p12, $mul.ref(3, 1));
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p44, 85);
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($p12, $mul.ref(4, 1));
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p45, 85);
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($p12, $mul.ref(5, 1));
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p46, 85);
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($p12, $mul.ref(6, 1));
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p47, 85);
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($p12, $mul.ref(7, 1));
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p48, 85);
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($p12, $mul.ref(8, 1));
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p49, 85);
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($p12, $mul.ref(9, 1));
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p50, 85);
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($p12, $mul.ref(10, 1));
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p51, 85);
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($p12, $mul.ref(11, 1));
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p52, 85);
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($p12, $mul.ref(12, 1));
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p53, 85);
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($p12, $mul.ref(13, 1));
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p54, 85);
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($p12, $mul.ref(14, 1));
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p55, 85);
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($p12, $mul.ref(15, 1));
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p56, 85);
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($p12, $mul.ref(16, 1));
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p57, 85);
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($p12, $mul.ref(17, 1));
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p58, 85);
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($p12, $mul.ref(18, 1));
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p59, 85);
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($p12, $mul.ref(19, 1));
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p60, 85);
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($p12, $mul.ref(20, 1));
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p61, 85);
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($p12, $mul.ref(21, 1));
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p62, 85);
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($p12, $mul.ref(22, 1));
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p63, 85);
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($p12, $mul.ref(23, 1));
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p64, 85);
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($p12, $mul.ref(24, 1));
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p65, 85);
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($p12, $mul.ref(25, 1));
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p66, 85);
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($p12, $mul.ref(26, 1));
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p67, 85);
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($p12, $mul.ref(27, 1));
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p68, 85);
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($p12, $mul.ref(28, 1));
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p69, 85);
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($p12, $mul.ref(29, 1));
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p70, 85);
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($p12, $mul.ref(30, 1));
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p71, 85);
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($p12, $mul.ref(31, 1));
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p72, 85);
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($p12, $mul.ref(32, 1));
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p73, 85);
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($p12, $mul.ref(33, 1));
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p74, 85);
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($p12, $mul.ref(34, 1));
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p75, 85);
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($p12, $mul.ref(35, 1));
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p76, 85);
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($p12, $mul.ref(36, 1));
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p77, 85);
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($p12, $mul.ref(37, 1));
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p78, 85);
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($p12, $mul.ref(38, 1));
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p79, 85);
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($p12, $mul.ref(39, 1));
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p80, 85);
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($p12, $mul.ref(40, 1));
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p81, 85);
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($p12, $mul.ref(41, 1));
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p82, 85);
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($p12, $mul.ref(42, 1));
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p83, 85);
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($p12, $mul.ref(43, 1));
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p84, 85);
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($p12, $mul.ref(44, 1));
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p85, 85);
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($p12, $mul.ref(45, 1));
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p86, 85);
    goto corral_source_split_4174;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($p12, $mul.ref(46, 1));
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p87, 85);
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($p12, $mul.ref(47, 1));
    goto corral_source_split_4179;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p88, 85);
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($p12, $mul.ref(48, 1));
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p89, 85);
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($p12, $mul.ref(49, 1));
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p90, 85);
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($p12, $mul.ref(50, 1));
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p91, 85);
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($p12, $mul.ref(51, 1));
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p92, 85);
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($p12, $mul.ref(52, 1));
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p93, 85);
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($p12, $mul.ref(53, 1));
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p94, 85);
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($p12, $mul.ref(54, 1));
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p95, 85);
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($p12, $mul.ref(55, 1));
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p96, 85);
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($p12, $mul.ref(56, 1));
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p97, 85);
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($p12, $mul.ref(57, 1));
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p98, 85);
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($p12, $mul.ref(58, 1));
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p99, 85);
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($p12, $mul.ref(59, 1));
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p100, 85);
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($p12, $mul.ref(60, 1));
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p101, 85);
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($p12, $mul.ref(61, 1));
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p102, 85);
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($p12, $mul.ref(62, 1));
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p103, 85);
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($p12, $mul.ref(63, 1));
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p104, 85);
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($p12, $mul.ref(64, 1));
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p105, 85);
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($p12, $mul.ref(65, 1));
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p106, 85);
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($p12, $mul.ref(66, 1));
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p107, 85);
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($p12, $mul.ref(67, 1));
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p108, 85);
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($p12, $mul.ref(68, 1));
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p109, 85);
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($p12, $mul.ref(69, 1));
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p110, 85);
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($p12, $mul.ref(70, 1));
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p111, 85);
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($p12, $mul.ref(71, 1));
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p112, 85);
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($p12, $mul.ref(72, 1));
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p113, 85);
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($p12, $mul.ref(73, 1));
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p114, 85);
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($p12, $mul.ref(74, 1));
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p115, 85);
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($p12, $mul.ref(75, 1));
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p116, 85);
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($p12, $mul.ref(76, 1));
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p117, 85);
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($p12, $mul.ref(77, 1));
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p118, 85);
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($p12, $mul.ref(78, 1));
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p119, 85);
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($p12, $mul.ref(79, 1));
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p120, 85);
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($p12, $mul.ref(80, 1));
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p121, 85);
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($p12, $mul.ref(81, 1));
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p122, 85);
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($p12, $mul.ref(82, 1));
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p123, 85);
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($p12, $mul.ref(83, 1));
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p124, 85);
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($p12, $mul.ref(84, 1));
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p125, 85);
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($p12, $mul.ref(85, 1));
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p126, 85);
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($p12, $mul.ref(86, 1));
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p127, 85);
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($p12, $mul.ref(87, 1));
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p128, 85);
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($p12, $mul.ref(88, 1));
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p129, 85);
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($p12, $mul.ref(89, 1));
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p130, 85);
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($p12, $mul.ref(90, 1));
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p131, 85);
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($p12, $mul.ref(91, 1));
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p132, 85);
    goto corral_source_split_4312;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($p12, $mul.ref(92, 1));
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p133, 85);
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($p12, $mul.ref(93, 1));
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p134, 85);
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($p12, $mul.ref(94, 1));
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p135, 85);
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($p12, $mul.ref(95, 1));
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p136, 85);
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($p12, $mul.ref(96, 1));
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p137, 85);
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($p12, $mul.ref(97, 1));
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p138, 85);
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($p12, $mul.ref(98, 1));
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p139, 85);
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($p12, $mul.ref(99, 1));
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p140, 85);
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($p12, $mul.ref(100, 1));
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p141, 85);
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($p12, $mul.ref(101, 1));
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p142, 85);
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($p12, $mul.ref(102, 1));
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p143, 85);
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($p12, $mul.ref(103, 1));
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p144, 85);
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($p12, $mul.ref(104, 1));
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p145, 85);
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($p12, $mul.ref(105, 1));
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p146, 85);
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($p12, $mul.ref(106, 1));
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p147, 85);
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($p12, $mul.ref(107, 1));
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p148, 85);
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($p12, $mul.ref(108, 1));
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p149, 85);
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($p12, $mul.ref(109, 1));
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p150, 85);
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($p12, $mul.ref(110, 1));
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p151, 85);
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($p12, $mul.ref(111, 1));
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p152, 85);
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($p12, $mul.ref(112, 1));
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p153, 85);
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($p12, $mul.ref(113, 1));
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p154, 85);
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($p12, $mul.ref(114, 1));
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p155, 85);
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($p12, $mul.ref(115, 1));
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p156, 85);
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($p12, $mul.ref(116, 1));
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p157, 85);
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($p12, $mul.ref(117, 1));
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p158, 85);
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($p12, $mul.ref(118, 1));
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p159, 85);
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($p12, $mul.ref(119, 1));
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p160, 85);
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($p12, $mul.ref(120, 1));
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p161, 85);
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($p12, $mul.ref(121, 1));
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p162, 85);
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($p12, $mul.ref(122, 1));
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p163, 85);
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($p12, $mul.ref(123, 1));
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p164, 85);
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($p12, $mul.ref(124, 1));
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p165, 85);
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($p12, $mul.ref(125, 1));
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p166, 85);
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($p12, $mul.ref(126, 1));
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p167, 85);
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($p12, $mul.ref(127, 1));
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p168, 85);
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($p12, $mul.ref(128, 1));
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p169, 85);
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($p12, $mul.ref(129, 1));
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p170, 85);
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($p12, $mul.ref(130, 1));
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p171, 85);
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($p12, $mul.ref(131, 1));
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p172, 85);
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($p12, $mul.ref(132, 1));
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p173, 85);
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($p12, $mul.ref(133, 1));
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p174, 85);
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($p12, $mul.ref(134, 1));
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p175, 85);
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($p12, $mul.ref(135, 1));
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p176, 85);
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($p12, $mul.ref(136, 1));
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p177, 85);
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($p12, $mul.ref(137, 1));
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p178, 85);
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($p12, $mul.ref(138, 1));
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p179, 85);
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($p12, $mul.ref(139, 1));
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p180, 85);
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($p12, $mul.ref(140, 1));
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p181, 85);
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($p12, $mul.ref(141, 1));
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p182, 85);
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($p12, $mul.ref(142, 1));
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p183, 85);
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($p12, $mul.ref(143, 1));
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p184, 85);
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($p12, $mul.ref(144, 1));
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p185, 85);
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($p12, $mul.ref(145, 1));
    goto corral_source_split_4473;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p186, 85);
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($p12, $mul.ref(146, 1));
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p187, 85);
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($p12, $mul.ref(147, 1));
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p188, 85);
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($p12, $mul.ref(148, 1));
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p189, 85);
    goto corral_source_split_4483;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($p12, $mul.ref(149, 1));
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p190, 85);
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($p12, $mul.ref(150, 1));
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p191, 85);
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($p12, $mul.ref(151, 1));
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p192, 85);
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($p12, $mul.ref(152, 1));
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p193, 85);
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($p12, $mul.ref(153, 1));
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p194, 85);
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($p12, $mul.ref(154, 1));
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p195, 85);
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($p12, $mul.ref(155, 1));
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p196, 85);
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($p12, $mul.ref(156, 1));
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p197, 85);
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($p12, $mul.ref(157, 1));
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p198, 85);
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($p12, $mul.ref(158, 1));
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p199, 85);
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($p12, $mul.ref(159, 1));
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p200, 85);
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb173:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($p12, $mul.ref(160, 1));
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p201, 85);
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($p12, $mul.ref(161, 1));
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p202, 85);
    goto corral_source_split_4522;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($p12, $mul.ref(162, 1));
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p203, 85);
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($p12, $mul.ref(163, 1));
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p204, 85);
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($p12, $mul.ref(164, 1));
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p205, 85);
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($p12, $mul.ref(165, 1));
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p206, 85);
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($p12, $mul.ref(166, 1));
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p207, 85);
    goto corral_source_split_4537;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($p12, $mul.ref(167, 1));
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p208, 85);
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($p12, $mul.ref(168, 1));
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p209, 85);
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($p12, $mul.ref(169, 1));
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p210, 85);
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($p12, $mul.ref(170, 1));
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p211, 85);
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($p12, $mul.ref(171, 1));
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p212, 85);
    goto corral_source_split_4552;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($p12, $mul.ref(172, 1));
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p213, 85);
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($p12, $mul.ref(173, 1));
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p214, 85);
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($p12, $mul.ref(174, 1));
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p215, 85);
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($p12, $mul.ref(175, 1));
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p216, 85);
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($p12, $mul.ref(176, 1));
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p217, 85);
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($p12, $mul.ref(177, 1));
    goto corral_source_split_4569;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p218, 85);
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($p12, $mul.ref(178, 1));
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p219, 85);
    goto corral_source_split_4573;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($p12, $mul.ref(179, 1));
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p220, 85);
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($p12, $mul.ref(180, 1));
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p221, 85);
    goto corral_source_split_4579;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($p12, $mul.ref(181, 1));
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p222, 85);
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($p12, $mul.ref(182, 1));
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p223, 85);
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($p12, $mul.ref(183, 1));
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p224, 85);
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($p12, $mul.ref(184, 1));
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p225, 85);
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($p12, $mul.ref(185, 1));
    goto corral_source_split_4593;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p226, 85);
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($p12, $mul.ref(186, 1));
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p227, 85);
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($p12, $mul.ref(187, 1));
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p228, 85);
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($p12, $mul.ref(188, 1));
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p229, 85);
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($p12, $mul.ref(189, 1));
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p230, 85);
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($p12, $mul.ref(190, 1));
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p231, 85);
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb204:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($p12, $mul.ref(191, 1));
    goto corral_source_split_4611;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p232, 85);
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($p12, $mul.ref(192, 1));
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p233, 85);
    goto corral_source_split_4615;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($p12, $mul.ref(193, 1));
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p234, 85);
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($p12, $mul.ref(194, 1));
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p235, 85);
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb208:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($p12, $mul.ref(195, 1));
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p236, 85);
    goto corral_source_split_4624;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb209:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($p12, $mul.ref(196, 1));
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p237, 85);
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($p12, $mul.ref(197, 1));
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p238, 85);
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb211:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($p12, $mul.ref(198, 1));
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p239, 85);
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb212:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($p12, $mul.ref(199, 1));
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p240, 85);
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb213:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($p12, $mul.ref(200, 1));
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p241, 85);
    goto corral_source_split_4639;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb214:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($p12, $mul.ref(201, 1));
    goto corral_source_split_4641;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p242, 85);
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb215:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($p12, $mul.ref(202, 1));
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p243, 85);
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($p12, $mul.ref(203, 1));
    goto corral_source_split_4647;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p244, 85);
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($p12, $mul.ref(204, 1));
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p245, 85);
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb218:
    assume {:verifier.code 0} true;
    $p246 := $add.ref($p12, $mul.ref(205, 1));
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p246, 85);
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($p12, $mul.ref(206, 1));
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p247, 85);
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb220:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($p12, $mul.ref(207, 1));
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p248, 85);
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb221:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($p12, $mul.ref(208, 1));
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p249, 85);
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($p12, $mul.ref(209, 1));
    goto corral_source_split_4665;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p250, 85);
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($p12, $mul.ref(210, 1));
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p251, 85);
    goto corral_source_split_4669;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    $p252 := $add.ref($p12, $mul.ref(211, 1));
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p252, 85);
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb225:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($p12, $mul.ref(212, 1));
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p253, 85);
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb226:
    assume {:verifier.code 0} true;
    $p254 := $add.ref($p12, $mul.ref(213, 1));
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p254, 85);
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb227:
    assume {:verifier.code 0} true;
    $p255 := $add.ref($p12, $mul.ref(214, 1));
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p255, 85);
    goto corral_source_split_4681;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    $p256 := $add.ref($p12, $mul.ref(215, 1));
    goto corral_source_split_4683;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p256, 85);
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb229:
    assume {:verifier.code 0} true;
    $p257 := $add.ref($p12, $mul.ref(216, 1));
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p257, 85);
    goto corral_source_split_4687;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    goto $bb230;

  $bb230:
    assume {:verifier.code 0} true;
    $p258 := $add.ref($p12, $mul.ref(217, 1));
    goto corral_source_split_4689;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p258, 85);
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb231:
    assume {:verifier.code 0} true;
    $p259 := $add.ref($p12, $mul.ref(218, 1));
    goto corral_source_split_4692;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p259, 85);
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb232:
    assume {:verifier.code 0} true;
    $p260 := $add.ref($p12, $mul.ref(219, 1));
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p260, 85);
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb233:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($p12, $mul.ref(220, 1));
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p261, 85);
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb234:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($p12, $mul.ref(221, 1));
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p262, 85);
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb235:
    assume {:verifier.code 0} true;
    $p263 := $add.ref($p12, $mul.ref(222, 1));
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p263, 85);
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb236:
    assume {:verifier.code 0} true;
    $p264 := $add.ref($p12, $mul.ref(223, 1));
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p264, 85);
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb237:
    assume {:verifier.code 0} true;
    $p265 := $add.ref($p12, $mul.ref(224, 1));
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p265, 85);
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb238:
    assume {:verifier.code 0} true;
    $p266 := $add.ref($p12, $mul.ref(225, 1));
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p266, 85);
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    goto $bb239;

  $bb239:
    assume {:verifier.code 0} true;
    $p267 := $add.ref($p12, $mul.ref(226, 1));
    goto corral_source_split_4716;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p267, 85);
    goto corral_source_split_4717;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    goto $bb240;

  $bb240:
    assume {:verifier.code 0} true;
    $p268 := $add.ref($p12, $mul.ref(227, 1));
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p268, 85);
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb241:
    assume {:verifier.code 0} true;
    $p269 := $add.ref($p12, $mul.ref(228, 1));
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p269, 85);
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb242:
    assume {:verifier.code 0} true;
    $p270 := $add.ref($p12, $mul.ref(229, 1));
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p270, 85);
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    goto $bb243;

  $bb243:
    assume {:verifier.code 0} true;
    $p271 := $add.ref($p12, $mul.ref(230, 1));
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p271, 85);
    goto corral_source_split_4729;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb244:
    assume {:verifier.code 0} true;
    $p272 := $add.ref($p12, $mul.ref(231, 1));
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p272, 85);
    goto corral_source_split_4732;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb245:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($p12, $mul.ref(232, 1));
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p273, 85);
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb246:
    assume {:verifier.code 0} true;
    $p274 := $add.ref($p12, $mul.ref(233, 1));
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p274, 85);
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb247:
    assume {:verifier.code 0} true;
    $p275 := $add.ref($p12, $mul.ref(234, 1));
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p275, 85);
    goto corral_source_split_4741;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb248:
    assume {:verifier.code 0} true;
    $p276 := $add.ref($p12, $mul.ref(235, 1));
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p276, 85);
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb249:
    assume {:verifier.code 0} true;
    $p277 := $add.ref($p12, $mul.ref(236, 1));
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p277, 85);
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb250:
    assume {:verifier.code 0} true;
    $p278 := $add.ref($p12, $mul.ref(237, 1));
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p278, 85);
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb251:
    assume {:verifier.code 0} true;
    $p279 := $add.ref($p12, $mul.ref(238, 1));
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p279, 85);
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    goto $bb252;

  $bb252:
    assume {:verifier.code 0} true;
    $p280 := $add.ref($p12, $mul.ref(239, 1));
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p280, 85);
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb253:
    assume {:verifier.code 0} true;
    $p281 := $add.ref($p12, $mul.ref(240, 1));
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p281, 85);
    goto corral_source_split_4759;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    goto $bb254;

  $bb254:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($p12, $mul.ref(241, 1));
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p282, 85);
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    goto $bb255;

  $bb255:
    assume {:verifier.code 0} true;
    $p283 := $add.ref($p12, $mul.ref(242, 1));
    goto corral_source_split_4764;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p283, 85);
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb256:
    assume {:verifier.code 0} true;
    $p284 := $add.ref($p12, $mul.ref(243, 1));
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p284, 85);
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb257:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($p12, $mul.ref(244, 1));
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p285, 85);
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb258:
    assume {:verifier.code 0} true;
    $p286 := $add.ref($p12, $mul.ref(245, 1));
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p286, 85);
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb259:
    assume {:verifier.code 0} true;
    $p287 := $add.ref($p12, $mul.ref(246, 1));
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p287, 85);
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb260:
    assume {:verifier.code 0} true;
    $p288 := $add.ref($p12, $mul.ref(247, 1));
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p288, 85);
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    goto $bb261;

  $bb261:
    assume {:verifier.code 0} true;
    $p289 := $add.ref($p12, $mul.ref(248, 1));
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p289, 85);
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb262:
    assume {:verifier.code 0} true;
    $p290 := $add.ref($p12, $mul.ref(249, 1));
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p290, 85);
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    goto $bb263;

  $bb263:
    assume {:verifier.code 0} true;
    $p291 := $add.ref($p12, $mul.ref(250, 1));
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p291, 85);
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    goto $bb264;

  $bb264:
    assume {:verifier.code 0} true;
    $p292 := $add.ref($p12, $mul.ref(251, 1));
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p292, 85);
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb265:
    assume {:verifier.code 0} true;
    $p293 := $add.ref($p12, $mul.ref(252, 1));
    goto corral_source_split_4794;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p293, 85);
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb266:
    assume {:verifier.code 0} true;
    $p294 := $add.ref($p12, $mul.ref(253, 1));
    goto corral_source_split_4797;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p294, 85);
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb267:
    assume {:verifier.code 0} true;
    $p295 := $add.ref($p12, $mul.ref(254, 1));
    goto corral_source_split_4800;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p295, 85);
    goto corral_source_split_4801;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb268:
    assume {:verifier.code 0} true;
    $p296 := $add.ref($p12, $mul.ref(255, 1));
    goto corral_source_split_4803;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p296, 85);
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    goto $bb269;

  $bb269:
    assume {:verifier.code 0} true;
    $p297 := $add.ref($p12, $mul.ref(256, 1));
    goto corral_source_split_4806;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p297, 85);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7433, 1));
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.0, $p20);
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 863} $i23 := __create_pipe($p19, $i22);
    call {:si_unique_call 864} {:cexpr "tmp___2"} boogie_si_record_i32($i23);
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    $i26 := $or.i32($i23, $sub.i32(0, 1073741824));
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p0);
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 865} usb_fill_bulk_urb($p1, $p25, $i26, $p12, 257, ftdi_elan_write_bulk_callback, $p27);
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    $i30 := $or.i32($i29, 4);
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, $i30);
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} $i32 := usb_submit_urb($p1, 208);
    call {:si_unique_call 867} {:cexpr "retval"} boogie_si_record_i32($i32);
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 871} usb_free_urb($p1);
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb12:
    assume $i33 == 1;
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} dev_err.ref.ref($p36, .str.27);
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    $i39 := $sext.i32.i64(257);
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(112, 1));
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    $i41 := $load.i64($M.0, $p40);
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 869} usb_free_coherent($p38, $i39, $p12, $i41);
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 870} usb_free_urb($p1);
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 12);
    goto $bb3;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 861} dev_err.ref.ref($p17, .str.26);
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} usb_free_urb($p1);
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 12);
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 859} dev_err.ref.ref($p6, .str.25);
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 12);
    goto $bb3;
}



const ftdi_elan_synchronize_reset: ref;

axiom ftdi_elan_synchronize_reset == $sub.ref(0, 353747);

procedure ftdi_elan_synchronize_reset($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation ftdi_elan_synchronize_reset($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i64;
  var $p20: ref;
  var $i21: i32;
  var $i22: i64;
  var $p23: ref;
  var $i24: i32;
  var $i25: i64;
  var $p26: ref;
  var $i27: i32;
  var $i28: i64;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i8;
  var $i34: i32;
  var $i35: i32;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $p43: ref;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i64;
  var $p52: ref;
  var $i53: i64;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 872} $p1 := usb_alloc_urb(0, 208);
    goto corral_source_split_4809;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64(4);
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(112, 1));
    goto corral_source_split_4824;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 874} $p12 := usb_alloc_coherent($p9, $i10, 208, $p11);
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_4827;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i18 := $add.i32(0, 1);
    call {:si_unique_call 877} {:cexpr "i"} boogie_si_record_i32($i18);
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64(0);
    goto corral_source_split_4837;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p12, $mul.ref($i19, 1));
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p20, 85);
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    $i21 := $add.i32($i18, 1);
    call {:si_unique_call 878} {:cexpr "i"} boogie_si_record_i32($i21);
    goto corral_source_split_4840;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i18);
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p12, $mul.ref($i22, 1));
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p23, $sub.i8(0, 86));
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    $i24 := $add.i32($i21, 1);
    call {:si_unique_call 879} {:cexpr "i"} boogie_si_record_i32($i24);
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i21);
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p12, $mul.ref($i25, 1));
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p26, 90);
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    $i27 := $add.i32($i24, 1);
    call {:si_unique_call 880} {:cexpr "i"} boogie_si_record_i32($i27);
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i24);
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($p12, $mul.ref($i28, 1));
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p29, $sub.i8(0, 91));
    goto corral_source_split_4851;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7433, 1));
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.0, $p32);
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i33);
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 881} $i35 := __create_pipe($p31, $i34);
    call {:si_unique_call 882} {:cexpr "tmp___4"} boogie_si_record_i32($i35);
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_4858;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    $i38 := $or.i32($i35, $sub.i32(0, 1073741824));
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p0);
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 883} usb_fill_bulk_urb($p1, $p37, $i38, $p12, $i27, ftdi_elan_write_bulk_callback, $p39);
    goto corral_source_split_4862;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_4863;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    $i42 := $or.i32($i41, 4);
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p43, $i42);
    goto corral_source_split_4867;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 884} $i44 := usb_submit_urb($p1, 208);
    call {:si_unique_call 885} {:cexpr "retval"} boogie_si_record_i32($i44);
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 889} usb_free_urb($p1);
    goto corral_source_split_4884;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4819;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb8:
    assume $i45 == 1;
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p47, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} dev_err.ref.ref($p48, .str.31);
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_4876;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    $i51 := $sext.i32.i64($i27);
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(112, 1));
    goto corral_source_split_4879;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    $i53 := $load.i64($M.0, $p52);
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 887} usb_free_coherent($p50, $i51, $p12, $i53);
    goto corral_source_split_4881;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} usb_free_urb($p1);
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 12);
    goto $bb3;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 875} dev_err.ref.ref($p17, .str.30);
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} usb_free_urb($p1);
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 12);
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4813;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_4815;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 873} dev_err.ref.ref($p6, .str.29);
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 12);
    goto $bb3;
}



const ldv_mutex_lock_24: ref;

axiom ldv_mutex_lock_24 == $sub.ref(0, 354779);

procedure ldv_mutex_lock_24($p0: ref);
  free requires assertsPassed;
  modifies $M.4, assertsPassed;



implementation ldv_mutex_lock_24($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} ldv_mutex_lock_u132_lock_of_usb_ftdi($p0);
    goto SeqInstr_652, SeqInstr_653;

  SeqInstr_653:
    assume assertsPassed;
    goto SeqInstr_654;

  SeqInstr_654:
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 891} mutex_lock($p0);
    goto corral_source_split_4888;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_652:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_25: ref;

axiom ldv_mutex_unlock_25 == $sub.ref(0, 355811);

procedure ldv_mutex_unlock_25($p0: ref);
  free requires assertsPassed;
  modifies $M.4, assertsPassed;



implementation ldv_mutex_unlock_25($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} ldv_mutex_unlock_u132_lock_of_usb_ftdi($p0);
    goto SeqInstr_655, SeqInstr_656;

  SeqInstr_656:
    assume assertsPassed;
    goto SeqInstr_657;

  SeqInstr_657:
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} mutex_unlock($p0);
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_655:
    assume !assertsPassed;
    return;
}



const ftdi_elan_do_callback: ref;

axiom ftdi_elan_do_callback == $sub.ref(0, 356843);

procedure ftdi_elan_do_callback($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation ftdi_elan_do_callback($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 894} {:cexpr "ftdi_elan_do_callback:arg:length"} boogie_si_record_i32($i3);
    goto corral_source_split_4894;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    call {:si_unique_call 895} {:cexpr "halted"} boogie_si_record_i32($i7);
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(36, 1));
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    call {:si_unique_call 896} {:cexpr "skipped"} boogie_si_record_i32($i9);
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    call {:si_unique_call 897} {:cexpr "actual"} boogie_si_record_i32($i11);
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(44, 1));
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    call {:si_unique_call 898} {:cexpr "non_null"} boogie_si_record_i32($i13);
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    call {:si_unique_call 899} {:cexpr "toggle_bits"} boogie_si_record_i32($i15);
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(20, 1));
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    call {:si_unique_call 900} {:cexpr "error_count"} boogie_si_record_i32($i17);
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    call {:si_unique_call 901} {:cexpr "condition_code"} boogie_si_record_i32($i19);
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(28, 1));
    goto corral_source_split_4911;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    call {:si_unique_call 902} {:cexpr "repeat_number"} boogie_si_record_i32($i21);
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_4915;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_4916;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, $sub.i32(0, 1));
    goto corral_source_split_4917;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, $i26);
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p28, $0.ref);
    goto corral_source_split_4921;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    call {:si_unique_call 903} devirtbounce.3($p23, $p30, $p5, $p2, $i3, $i15, $i17, $i19, $i21, $i7, $i9, $i11, $i13);
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_lock_26: ref;

axiom ldv_mutex_lock_26 == $sub.ref(0, 357875);

procedure ldv_mutex_lock_26($p0: ref);
  free requires assertsPassed;
  modifies $M.4, assertsPassed;



implementation ldv_mutex_lock_26($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} ldv_mutex_lock_u132_lock_of_usb_ftdi($p0);
    goto SeqInstr_658, SeqInstr_659;

  SeqInstr_659:
    assume assertsPassed;
    goto SeqInstr_660;

  SeqInstr_660:
    goto corral_source_split_4926;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 905} mutex_lock($p0);
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_658:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_27: ref;

axiom ldv_mutex_unlock_27 == $sub.ref(0, 358907);

procedure ldv_mutex_unlock_27($p0: ref);
  free requires assertsPassed;
  modifies $M.4, assertsPassed;



implementation ldv_mutex_unlock_27($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 906} ldv_mutex_unlock_u132_lock_of_usb_ftdi($p0);
    goto SeqInstr_661, SeqInstr_662;

  SeqInstr_662:
    assume assertsPassed;
    goto SeqInstr_663;

  SeqInstr_663:
    goto corral_source_split_4930;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 907} mutex_unlock($p0);
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_661:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_22: ref;

axiom ldv_mutex_lock_22 == $sub.ref(0, 359939);

procedure ldv_mutex_lock_22($p0: ref);
  free requires assertsPassed;
  modifies $M.4, assertsPassed;



implementation ldv_mutex_lock_22($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 908} ldv_mutex_lock_u132_lock_of_usb_ftdi($p0);
    goto SeqInstr_664, SeqInstr_665;

  SeqInstr_665:
    assume assertsPassed;
    goto SeqInstr_666;

  SeqInstr_666:
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 909} mutex_lock($p0);
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_664:
    assume !assertsPassed;
    return;
}



const complete_: ref;

axiom complete_ == $sub.ref(0, 360971);

procedure complete_($p0: ref);
  free requires assertsPassed;



implementation complete_($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_unlock_23: ref;

axiom ldv_mutex_unlock_23 == $sub.ref(0, 362003);

procedure ldv_mutex_unlock_23($p0: ref);
  free requires assertsPassed;
  modifies $M.4, assertsPassed;



implementation ldv_mutex_unlock_23($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 910} ldv_mutex_unlock_u132_lock_of_usb_ftdi($p0);
    goto SeqInstr_667, SeqInstr_668;

  SeqInstr_668:
    assume assertsPassed;
    goto SeqInstr_669;

  SeqInstr_669:
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 911} mutex_unlock($p0);
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_667:
    assume !assertsPassed;
    return;
}



const ldv_cancel_delayed_work_21: ref;

axiom ldv_cancel_delayed_work_21 == $sub.ref(0, 363035);

procedure ldv_cancel_delayed_work_21($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.6, $M.8, $M.10, $M.12;



implementation ldv_cancel_delayed_work_21($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i8;
  var $p5: ref;
  var $i6: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4943;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} $i1 := cancel_delayed_work($p0);
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 913} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 914} {:cexpr "ldv_func_res"} boogie_si_record_i8($i4);
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 915} disable_work_1($p5);
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i4);
    goto corral_source_split_4950;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const cancel_delayed_work: ref;

axiom cancel_delayed_work == $sub.ref(0, 364067);

procedure cancel_delayed_work($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation cancel_delayed_work($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 1} true;
    call {:si_unique_call 916} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 917} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const disable_work_1: ref;

axiom disable_work_1 == $sub.ref(0, 365099);

procedure disable_work_1($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $M.8, $M.10, $M.12;



implementation disable_work_1($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i31: i64;
  var $i32: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    $i1 := $M.6;
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 3);
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i2 == 1);
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    $i3 := $M.6;
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 2);
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i9 := $M.8;
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 3);
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb12;

  $bb12:
    assume !($i10 == 1);
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    $i11 := $M.8;
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 2);
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i17 := $M.10;
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 3);
    goto corral_source_split_4987;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb21;

  $bb21:
    assume !($i18 == 1);
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    $i19 := $M.10;
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 2);
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i25 := $M.12;
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 3);
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb30;

  $bb30:
    assume !($i26 == 1);
    goto corral_source_split_5009;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    $i27 := $M.12;
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    return;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p29 := $M.13;
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p0);
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    $i32 := $eq.i64($i30, $i31);
    goto corral_source_split_5007;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb33;

  $bb34:
    assume $i32 == 1;
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    $M.12 := 1;
    call {:si_unique_call 921} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(1);
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb28:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb29;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p21 := $M.11;
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p0);
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i22, $i23);
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb24;

  $bb25:
    assume $i24 == 1;
    goto corral_source_split_4998;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    $M.10 := 1;
    call {:si_unique_call 920} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(1);
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb20;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p13 := $M.9;
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_4975;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p0);
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i14, $i15);
    goto corral_source_split_4977;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb15;

  $bb16:
    assume $i16 == 1;
    goto corral_source_split_4983;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    $M.8 := 1;
    call {:si_unique_call 919} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(1);
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb11;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p5 := $M.7;
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p0);
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i6, $i7);
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb6;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    $M.6 := 1;
    call {:si_unique_call 918} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(1);
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb2;
}



const ldv_cancel_delayed_work_20: ref;

axiom ldv_cancel_delayed_work_20 == $sub.ref(0, 366131);

procedure ldv_cancel_delayed_work_20($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.6, $M.8, $M.10, $M.12;



implementation ldv_cancel_delayed_work_20($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i8;
  var $p5: ref;
  var $i6: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 922} $i1 := cancel_delayed_work($p0);
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 923} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 924} {:cexpr "ldv_func_res"} boogie_si_record_i8($i4);
    goto corral_source_split_5020;

  corral_source_split_5020:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 925} disable_work_1($p5);
    goto corral_source_split_5022;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i4);
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const ldv_cancel_delayed_work_19: ref;

axiom ldv_cancel_delayed_work_19 == $sub.ref(0, 367163);

procedure ldv_cancel_delayed_work_19($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.6, $M.8, $M.10, $M.12;



implementation ldv_cancel_delayed_work_19($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i8;
  var $p5: ref;
  var $i6: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5025;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 926} $i1 := cancel_delayed_work($p0);
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 927} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_5027;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 928} {:cexpr "ldv_func_res"} boogie_si_record_i8($i4);
    goto corral_source_split_5029;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 929} disable_work_1($p5);
    goto corral_source_split_5031;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i4);
    goto corral_source_split_5032;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const dev_set_drvdata: ref;

axiom dev_set_drvdata == $sub.ref(0, 368195);

procedure dev_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation dev_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(512, 1));
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p1);
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    return;
}



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 369227);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $i2: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 930} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 931} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    $i2 := $or.i32($i1, 32768);
    goto corral_source_split_5039;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 932} $p3 := kmalloc($i0, $i2);
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const ldv_mutex_lock_85: ref;

axiom ldv_mutex_lock_85 == $sub.ref(0, 370259);

procedure ldv_mutex_lock_85($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_lock_85($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 933} ldv_mutex_lock_ftdi_module_lock($p0);
    goto SeqInstr_670, SeqInstr_671;

  SeqInstr_671:
    assume assertsPassed;
    goto SeqInstr_672;

  SeqInstr_672:
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 934} mutex_lock($p0);
    goto corral_source_split_5044;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_670:
    assume !assertsPassed;
    return;
}



const list_add_tail: ref;

axiom list_add_tail == $sub.ref(0, 371291);

procedure list_add_tail($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add_tail($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 935} __list_add($p0, $p3, $p1);
    goto corral_source_split_5049;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_unlock_86: ref;

axiom ldv_mutex_unlock_86 == $sub.ref(0, 372323);

procedure ldv_mutex_unlock_86($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_unlock_86($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 936} ldv_mutex_unlock_ftdi_module_lock($p0);
    goto SeqInstr_673, SeqInstr_674;

  SeqInstr_674:
    assume assertsPassed;
    goto SeqInstr_675;

  SeqInstr_675:
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 937} mutex_unlock($p0);
    goto corral_source_split_5053;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_673:
    assume !assertsPassed;
    return;
}



const ftdi_elan_init_kref: ref;

axiom ftdi_elan_init_kref == $sub.ref(0, 373355);

procedure ftdi_elan_init_kref($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation ftdi_elan_init_kref($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5055;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7436, 1));
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} kref_init($p1);
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    return;
}



const sema_init: ref;

axiom sema_init == $sub.ref(0, 374387);

procedure sema_init($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation sema_init($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p7: ref;
  var $p9: ref;
  var $p11: ref;
  var $p13: ref;
  var $p16: ref;
  var $p20: ref;
  var $p24: ref;
  var $p27: ref;
  var $p30: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p37: ref;
  var $p38: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p44: ref;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;
  var cmdloc_dummy_var_11: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 939} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 940} $p3 := $alloc($mul.ref(96, $zext.i32.i64(1)));
    call {:si_unique_call 941} {:cexpr "sema_init:arg:val"} boogie_si_record_i32($i1);
    goto corral_source_split_5059;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, 0);
    goto corral_source_split_5061;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, $sub.i32(0, 559067475));
    goto corral_source_split_5063;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, $sub.i32(0, 1));
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, $i2p.i64.ref($sub.i64(0, 1)));
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p16, $0.ref);
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8));
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p20, $0.ref);
    goto corral_source_split_5071;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8));
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p24, $0.ref);
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1));
    goto corral_source_split_5074;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p27, .str.57);
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1));
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, 0);
    goto corral_source_split_5077;

  corral_source_split_5077:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1));
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p33, 0);
    goto corral_source_split_5079;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, $i1);
    goto corral_source_split_5081;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(80, 1)), $mul.ref(0, 1));
    goto corral_source_split_5083;

  corral_source_split_5083:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p37, $p35);
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_5085;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(80, 1)), $mul.ref(8, 1));
    goto corral_source_split_5086;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p40, $p38);
    goto corral_source_split_5087;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p0);
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p3);
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_9 := $M.0;
    cmdloc_dummy_var_10 := $M.0;
    call {:si_unique_call 942} cmdloc_dummy_var_11 := $memcpy.i8(cmdloc_dummy_var_9, cmdloc_dummy_var_10, $p41, $p42, 96, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_11;
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_5091;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 943} lockdep_init_map($p44, .str.58, $p2, 0);
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    return;
}



const interface_to_usbdev: ref;

axiom interface_to_usbdev == $sub.ref(0, 375419);

procedure interface_to_usbdev($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation interface_to_usbdev($p0: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5097;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref($sub.ref(0, 144), 2040));
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const usb_get_dev: ref;

axiom usb_get_dev == $sub.ref(0, 376451);

procedure usb_get_dev($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation usb_get_dev($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 944} $p1 := external_alloc();
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __mutex_init: ref;

axiom __mutex_init == $sub.ref(0, 377483);

procedure __mutex_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __mutex_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5104;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    return;
}



const usb_endpoint_is_bulk_in: ref;

axiom usb_endpoint_is_bulk_in == $sub.ref(0, 378515);

procedure usb_endpoint_is_bulk_in($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_is_bulk_in($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5106;

  corral_source_split_5106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 945} $i1 := usb_endpoint_xfer_bulk($p0);
    call {:si_unique_call 946} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_5107;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 947} $i3 := usb_endpoint_dir_in($p0);
    call {:si_unique_call 948} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_5111;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_5116;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    $i6 := $i5;
    goto $bb6;

  $bb3:
    assume $i4 == 1;
    goto corral_source_split_5114;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb5;
}



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 379547);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 949} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 950} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 951} $p2 := __kmalloc($i0, $i1);
    goto corral_source_split_5121;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const usb_endpoint_is_bulk_out: ref;

axiom usb_endpoint_is_bulk_out == $sub.ref(0, 380579);

procedure usb_endpoint_is_bulk_out($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_is_bulk_out($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5123;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 952} $i1 := usb_endpoint_xfer_bulk($p0);
    call {:si_unique_call 953} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_5124;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5135;

  corral_source_split_5135:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5127;

  corral_source_split_5127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 954} $i3 := usb_endpoint_dir_out($p0);
    call {:si_unique_call 955} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_5128;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_5129;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_5133;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    $i6 := $i5;
    goto $bb6;

  $bb3:
    assume $i4 == 1;
    goto corral_source_split_5131;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb5;
}



const usb_register_dev: ref;

axiom usb_register_dev == $sub.ref(0, 381611);

procedure usb_register_dev($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_register_dev($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5137;

  corral_source_split_5137:
    assume {:verifier.code 1} true;
    call {:si_unique_call 956} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 957} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5138;

  corral_source_split_5138:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __init_work: ref;

axiom __init_work == $sub.ref(0, 382643);

procedure __init_work($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __init_work($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} {:cexpr "__init_work:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 383675);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const lockdep_init_map: ref;

axiom lockdep_init_map == $sub.ref(0, 384707);

procedure lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 959} {:cexpr "lockdep_init_map:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_5142;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    return;
}



const init_timer_key: ref;

axiom init_timer_key == $sub.ref(0, 385739);

procedure init_timer_key($p0: ref, $i1: i32, $p2: ref, $p3: ref);
  free requires assertsPassed;



implementation init_timer_key($p0: ref, $i1: i32, $p2: ref, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 960} {:cexpr "init_timer_key:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    return;
}



const delayed_work_timer_fn: ref;

axiom delayed_work_timer_fn == $sub.ref(0, 386771);

procedure delayed_work_timer_fn($i0: i64);



const ftdi_elan_command_work: ref;

axiom ftdi_elan_command_work == $sub.ref(0, 387803);

procedure ftdi_elan_command_work($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.25, $M.1, $CurrAddr, $M.7, $M.6, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12, $M.16, $M.19, $M.20, $M.23, $M.24, $M.4, $M.3, $M.22, assertsPassed;



implementation ftdi_elan_command_work($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $p11: ref;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 5448), 8488));
    goto corral_source_split_5148;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 5448), 8488)), $mul.ref(5084, 1));
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_5150;

  corral_source_split_5150:
    assume {:verifier.code 0} true;
    $i5 := $sgt.i32($i4, 0);
    goto corral_source_split_5151;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_5156;

  corral_source_split_5156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} $i6 := ftdi_elan_command_engine($p2);
    call {:si_unique_call 963} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_5157;

  corral_source_split_5157:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, $sub.i32(0, 108));
    goto corral_source_split_5158;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    goto corral_source_split_5167;

  corral_source_split_5167:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i6, $sub.i32(0, 19));
    goto corral_source_split_5168;

  corral_source_split_5168:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i12 == 1);
    goto corral_source_split_5181;

  corral_source_split_5181:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i6, 0);
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 964} $i21 := msecs_to_jiffies(10);
    call {:si_unique_call 965} {:cexpr "tmp___0"} boogie_si_record_i64($i21);
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i64.i32($i21);
    goto corral_source_split_5171;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} ftdi_command_requeue_work($p2, $i22);
    goto SeqInstr_679, SeqInstr_680;

  SeqInstr_680:
    assume assertsPassed;
    goto SeqInstr_681;

  SeqInstr_681:
    goto corral_source_split_5172;

  corral_source_split_5172:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_679:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i17 == 1;
    goto corral_source_split_5184;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 5448), 8488)), $mul.ref(5200, 1));
    goto corral_source_split_5185;

  corral_source_split_5185:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_5187;

  corral_source_split_5187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 967} dev_err.ref.ref.i32($p20, .str.39, $i6);
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i12 == 1;
    goto corral_source_split_5174;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 5448), 8488)), $mul.ref(5084, 1));
    goto corral_source_split_5175;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i14, 1);
    goto corral_source_split_5177;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 5448), 8488)), $mul.ref(5084, 1));
    goto corral_source_split_5178;

  corral_source_split_5178:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, $i15);
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 5448), 8488)), $mul.ref(5084, 1));
    goto corral_source_split_5161;

  corral_source_split_5161:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    $i10 := $add.i32($i9, 1);
    goto corral_source_split_5163;

  corral_source_split_5163:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 5448), 8488)), $mul.ref(5084, 1));
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, $i10);
    goto corral_source_split_5165;

  corral_source_split_5165:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 961} ftdi_elan_put_kref($p2);
    goto SeqInstr_676, SeqInstr_677;

  SeqInstr_677:
    assume assertsPassed;
    goto SeqInstr_678;

  SeqInstr_678:
    goto corral_source_split_5154;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_676:
    assume !assertsPassed;
    return;
}



const ftdi_elan_respond_work: ref;

axiom ftdi_elan_respond_work == $sub.ref(0, 388835);

procedure ftdi_elan_respond_work($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.16, $M.23, $M.24, $M.4, assertsPassed, $M.1, $CurrAddr, $M.7, $M.6, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12, $M.19, $M.20, $M.25, $M.3, $M.22;



implementation ftdi_elan_respond_work($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $p17: ref;
  var $i18: i1;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $i33: i64;
  var $i34: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_5191;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 5672), 8488));
    goto corral_source_split_5192;

  corral_source_split_5192:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 5672), 8488)), $mul.ref(5084, 1));
    goto corral_source_split_5193;

  corral_source_split_5193:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    $i5 := $sgt.i32($i4, 0);
    goto corral_source_split_5195;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_5200;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 969} $i6 := ftdi_elan_respond_engine($p2);
    goto SeqInstr_685, SeqInstr_686;

  SeqInstr_686:
    assume assertsPassed;
    goto SeqInstr_687;

  SeqInstr_687:
    call {:si_unique_call 970} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_5201;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_5202;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    goto corral_source_split_5206;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i6, $sub.i32(0, 108));
    goto corral_source_split_5207;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i8 == 1);
    goto corral_source_split_5220;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i6, $sub.i32(0, 19));
    goto corral_source_split_5221;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i13 == 1);
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i6, $sub.i32(0, 84));
    goto corral_source_split_5231;

  corral_source_split_5231:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i18 == 1);
    goto corral_source_split_5240;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 5672), 8488)), $mul.ref(5084, 1));
    goto corral_source_split_5241;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_5242;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    $i25 := $add.i32($i24, 1);
    goto corral_source_split_5243;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 5672), 8488)), $mul.ref(5084, 1));
    goto corral_source_split_5244;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, $i25);
    goto corral_source_split_5245;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 5672), 8488)), $mul.ref(5200, 1));
    goto corral_source_split_5246;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_5247;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_5248;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 971} dev_err.ref.ref.i32($p29, .str.6, $i6);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 5672), 8488)), $mul.ref(5084, 1));
    goto corral_source_split_5209;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    $i32 := $sgt.i32($i31, 0);
    goto corral_source_split_5211;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 974} $i33 := msecs_to_jiffies(10);
    call {:si_unique_call 975} {:cexpr "tmp___0"} boogie_si_record_i64($i33);
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i64.i32($i33);
    goto corral_source_split_5255;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 976} ftdi_response_requeue_work($p2, $i34);
    goto SeqInstr_694, SeqInstr_695;

  SeqInstr_695:
    assume assertsPassed;
    goto SeqInstr_696;

  SeqInstr_696:
    goto corral_source_split_5256;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_694:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i32 == 1;
    goto corral_source_split_5250;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} ftdi_elan_abandon_completions($p2);
    goto SeqInstr_688, SeqInstr_689;

  SeqInstr_689:
    assume assertsPassed;
    goto SeqInstr_690;

  SeqInstr_690:
    goto corral_source_split_5251;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 973} ftdi_elan_abandon_targets($p2);
    goto SeqInstr_691, SeqInstr_692;

  SeqInstr_692:
    assume assertsPassed;
    goto SeqInstr_693;

  SeqInstr_693:
    goto corral_source_split_5252;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    goto $bb18;

  SeqInstr_691:
    assume !assertsPassed;
    return;

  SeqInstr_688:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i18 == 1;
    goto corral_source_split_5233;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 5672), 8488)), $mul.ref(5084, 1));
    goto corral_source_split_5234;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_5235;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    $i21 := $add.i32($i20, 1);
    goto corral_source_split_5236;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 5672), 8488)), $mul.ref(5084, 1));
    goto corral_source_split_5237;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, $i21);
    goto corral_source_split_5238;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i13 == 1;
    goto corral_source_split_5223;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 5672), 8488)), $mul.ref(5084, 1));
    goto corral_source_split_5224;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_5225;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i15, 1);
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 5672), 8488)), $mul.ref(5084, 1));
    goto corral_source_split_5227;

  corral_source_split_5227:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, $i16);
    goto corral_source_split_5228;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_5213;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 5672), 8488)), $mul.ref(5084, 1));
    goto corral_source_split_5214;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_5215;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i10, 1);
    goto corral_source_split_5216;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 5672), 8488)), $mul.ref(5084, 1));
    goto corral_source_split_5217;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, $i11);
    goto corral_source_split_5218;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_5204;

  corral_source_split_5204:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_685:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5197;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} ftdi_elan_put_kref($p2);
    goto SeqInstr_682, SeqInstr_683;

  SeqInstr_683:
    assume assertsPassed;
    goto SeqInstr_684;

  SeqInstr_684:
    goto corral_source_split_5198;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_682:
    assume !assertsPassed;
    return;
}



const ftdi_status_queue_work: ref;

axiom ftdi_status_queue_work == $sub.ref(0, 389867);

procedure ftdi_status_queue_work($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.7, $M.6, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12;



implementation ftdi_status_queue_work($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i8;
  var $i7: i1;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 977} {:cexpr "ftdi_status_queue_work:arg:delta"} boogie_si_record_i32($i1);
    goto corral_source_split_5258;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    $p2 := $M.17;
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5224, 1));
    goto corral_source_split_5260;

  corral_source_split_5260:
    assume {:verifier.code 0} true;
    $i4 := $zext.i32.i64($i1);
    goto corral_source_split_5261;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 978} $i5 := queue_delayed_work($p2, $p3, $i4);
    goto corral_source_split_5262;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i5);
    call {:si_unique_call 979} {:cexpr "tmp"} boogie_si_record_i8($i6);
    goto corral_source_split_5263;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_5264;

  corral_source_split_5264:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7436, 1));
    goto corral_source_split_5267;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 980} kref_get($p8);
    goto corral_source_split_5268;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ftdi_elan_respond_engine: ref;

axiom ftdi_elan_respond_engine == $sub.ref(0, 390899);

procedure ftdi_elan_respond_engine($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.16, $M.23, $M.0, $M.24, $CurrAddr, $M.4, assertsPassed;



implementation ftdi_elan_respond_engine($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i64;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i32;
  var $i29: i32;
  var $p30: ref;
  var $i31: i32;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i1;
  var $p37: ref;
  var $i38: i8;
  var $i39: i32;
  var $i40: i32;
  var $i41: i64;
  var $p42: ref;
  var $i45: i32;
  var $i46: i64;
  var $p47: ref;
  var $p43: ref;
  var $p44: ref;
  var $i48: i32;
  var $i49: i1;
  var $i36: i32;
  var $i50: i1;
  var $i51: i32;
  var $i52: i1;
  var $i53: i32;
  var $i54: i32;
  var $i55: i64;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i64;
  var $i60: i1;
  var $i65: i1;
  var $i66: i32;
  var $i67: i1;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i32;
  var $p73: ref;
  var $i68: i32;
  var $i79: i1;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $i88: i32;
  var $p89: ref;
  var $i90: i1;
  var $i91: i32;
  var $i92: i32;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $i96: i32;
  var $p97: ref;
  var $i98: i1;
  var $i99: i32;
  var $i100: i32;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $i104: i32;
  var $p105: ref;
  var $i106: i32;
  var $i107: i1;
  var $p108: ref;
  var $p109: ref;
  var $i110: i8;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $i114: i8;
  var $i115: i32;
  var $i116: i32;
  var $i117: i1;
  var $i118: i32;
  var $i119: i1;
  var $i120: i32;
  var $i121: i1;
  var $i122: i32;
  var $i123: i1;
  var $i124: i32;
  var $i125: i1;
  var $i126: i32;
  var $i127: i1;
  var $i128: i32;
  var $i129: i1;
  var $i130: i32;
  var $i131: i1;
  var $i132: i32;
  var $i133: i1;
  var $i134: i32;
  var $i135: i1;
  var $i74: i32;
  var $i75: i32;
  var $i76: i32;
  var $i77: i32;
  var $p78: ref;
  var $i136: i32;
  var $i137: i64;
  var $i138: i1;
  var $i141: i32;
  var $p142: ref;
  var $i143: i64;
  var $i144: i64;
  var $p145: ref;
  var $p146: ref;
  var $p147: ref;
  var $p148: ref;
  var $i149: i64;
  var $p150: ref;
  var $i151: i8;
  var $i152: i32;
  var $p153: ref;
  var $i154: i64;
  var $i155: i64;
  var $p156: ref;
  var $p157: ref;
  var $i158: i32;
  var $i159: i1;
  var $i162: i32;
  var $i163: i1;
  var $i160: i8;
  var $i161: i32;
  var $p164: ref;
  var $p165: ref;
  var $i166: i32;
  var $i167: i32;
  var $p168: ref;
  var $p169: ref;
  var $i170: i32;
  var $p171: ref;
  var $i172: i32;
  var $i173: i1;
  var $p174: ref;
  var $i175: i64;
  var $i176: i1;
  var $p63: ref;
  var $i64: i32;
  var $p179: ref;
  var $i180: i32;
  var $i181: i1;
  var $p183: ref;
  var $i184: i8;
  var $i185: i32;
  var $i186: i32;
  var $i187: i32;
  var $p189: ref;
  var $i190: i8;
  var $i191: i32;
  var $i192: i32;
  var $i193: i16;
  var $i194: i32;
  var $p196: ref;
  var $i197: i8;
  var $i198: i16;
  var $i199: i32;
  var $i200: i32;
  var $i201: i16;
  var $p202: ref;
  var $p203: ref;
  var $i204: i64;
  var $p205: ref;
  var $i206: i32;
  var $i207: i32;
  var $p208: ref;
  var $p209: ref;
  var $p210: ref;
  var $p211: ref;
  var $p212: ref;
  var $i213: i1;
  var $i215: i64;
  var $p216: ref;
  var $i217: i8;
  var $i218: i32;
  var $i219: i32;
  var $i220: i64;
  var $p221: ref;
  var $i224: i32;
  var $i225: i64;
  var $p226: ref;
  var $p222: ref;
  var $p223: ref;
  var $i227: i32;
  var $i228: i1;
  var $i214: i32;
  var $i229: i1;
  var $p230: ref;
  var $p231: ref;
  var $p232: ref;
  var $p233: ref;
  var $p234: ref;
  var $p235: ref;
  var $p236: ref;
  var $p238: ref;
  var $i239: i32;
  var $i240: i1;
  var $p241: ref;
  var $i242: i32;
  var $p243: ref;
  var $i244: i32;
  var $i245: i32;
  var $p246: ref;
  var $p247: ref;
  var $p248: ref;
  var $i249: i64;
  var $i250: i64;
  var $p253: ref;
  var $i254: i8;
  var $i255: i32;
  var $i256: i32;
  var $p258: ref;
  var $i259: i8;
  var $i260: i32;
  var $i261: i32;
  var $i262: i32;
  var $p264: ref;
  var $i265: i8;
  var $i266: i32;
  var $i267: i32;
  var $i268: i32;
  var $p270: ref;
  var $i271: i8;
  var $i272: i32;
  var $i273: i32;
  var $p274: ref;
  var $p275: ref;
  var $p276: ref;
  var $p277: ref;
  var $p278: ref;
  var $p279: ref;
  var $p280: ref;
  var $p281: ref;
  var $p282: ref;
  var $p285: ref;
  var $i286: i8;
  var $i287: i32;
  var $i288: i32;
  var $i289: i8;
  var $i290: i32;
  var $i291: i1;
  var $i292: i32;
  var $i293: i1;
  var $i294: i32;
  var $i295: i1;
  var $i296: i32;
  var $i297: i1;
  var $p298: ref;
  var $p299: ref;
  var $p300: ref;
  var $i301: i32;
  var $p303: ref;
  var $i304: i8;
  var $i305: i32;
  var $i306: i1;
  var $p307: ref;
  var $p309: ref;
  var $i310: i8;
  var $i311: i32;
  var $i312: i32;
  var $i313: i32;
  var $p315: ref;
  var $i316: i8;
  var $i317: i32;
  var $i318: i32;
  var $p320: ref;
  var $i321: i8;
  var $i322: i32;
  var $i323: i32;
  var $i324: i16;
  var $i325: i32;
  var $p327: ref;
  var $i328: i8;
  var $i329: i16;
  var $i330: i32;
  var $i331: i32;
  var $i332: i16;
  var $p333: ref;
  var $p334: ref;
  var $i335: i64;
  var $p336: ref;
  var $p338: ref;
  var $i339: i8;
  var $i340: i32;
  var $i341: i32;
  var $i342: i32;
  var $p343: ref;
  var $p345: ref;
  var $i346: i8;
  var $i347: i32;
  var $i348: i32;
  var $i349: i32;
  var $p350: ref;
  var $p352: ref;
  var $i353: i8;
  var $i354: i32;
  var $i355: i32;
  var $i356: i32;
  var $p357: ref;
  var $p359: ref;
  var $i360: i8;
  var $i361: i32;
  var $i362: i32;
  var $i363: i32;
  var $p364: ref;
  var $p366: ref;
  var $i367: i8;
  var $i368: i32;
  var $i369: i32;
  var $p370: ref;
  var $p372: ref;
  var $i373: i8;
  var $i374: i32;
  var $i375: i32;
  var $i376: i1;
  var $i377: i32;
  var $i378: i16;
  var $p379: ref;
  var $i380: i32;
  var $i381: i16;
  var $p382: ref;
  var $p177: ref;
  var $i178: i32;
  var $p61: ref;
  var $i62: i32;
  var $p139: ref;
  var $i140: i32;
  var $p383: ref;
  var $i384: i32;
  var $i84: i32;
  var $i385: i1;
  var $i386: i32;
  var $i387: i64;
  var $p388: ref;
  var $p391: ref;
  var $i392: i8;
  var $i393: i32;
  var $i394: i32;
  var $i395: i64;
  var $p396: ref;
  var $p389: ref;
  var $p390: ref;
  var $i397: i32;
  var $i398: i1;
  var $i399: i1;
  var $i400: i32;
  var $i401: i64;
  var $p402: ref;
  var $p405: ref;
  var $i406: i8;
  var $i407: i32;
  var $i408: i32;
  var $i409: i64;
  var $p410: ref;
  var $p403: ref;
  var $p404: ref;
  var $i411: i32;
  var $i412: i1;
  var $i413: i1;
  var $i414: i32;
  var $i415: i64;
  var $p416: ref;
  var $p419: ref;
  var $i420: i8;
  var $i421: i32;
  var $i422: i32;
  var $i423: i64;
  var $p424: ref;
  var $p417: ref;
  var $p418: ref;
  var $i425: i32;
  var $i426: i1;
  var $i427: i1;
  var $i428: i32;
  var $i429: i64;
  var $p430: ref;
  var $p433: ref;
  var $i434: i8;
  var $i435: i32;
  var $i436: i32;
  var $i437: i64;
  var $p438: ref;
  var $p431: ref;
  var $p432: ref;
  var $i439: i32;
  var $i440: i1;
  var $i441: i1;
  var $i442: i32;
  var $i443: i64;
  var $p444: ref;
  var $p447: ref;
  var $i448: i8;
  var $i449: i32;
  var $i450: i32;
  var $i451: i64;
  var $p452: ref;
  var $p445: ref;
  var $p446: ref;
  var $i453: i32;
  var $i454: i1;
  var $i455: i1;
  var $i456: i32;
  var $i457: i64;
  var $p458: ref;
  var $p461: ref;
  var $i462: i8;
  var $i463: i32;
  var $i464: i32;
  var $i465: i64;
  var $p466: ref;
  var $p459: ref;
  var $p460: ref;
  var $i467: i32;
  var $i468: i1;
  var $i469: i1;
  var $i470: i32;
  var $i471: i64;
  var $p472: ref;
  var $p475: ref;
  var $i476: i8;
  var $i477: i32;
  var $i478: i32;
  var $i479: i64;
  var $p480: ref;
  var $p473: ref;
  var $p474: ref;
  var $i481: i32;
  var $i482: i1;
  var $i483: i1;
  var $i484: i32;
  var $i485: i64;
  var $p486: ref;
  var $p489: ref;
  var $i490: i8;
  var $i491: i32;
  var $i492: i32;
  var $i493: i64;
  var $p494: ref;
  var $p487: ref;
  var $p488: ref;
  var $i495: i32;
  var $i496: i1;
  var $i497: i1;
  var $i498: i32;
  var $i499: i64;
  var $p500: ref;
  var $p503: ref;
  var $i504: i8;
  var $i505: i32;
  var $i506: i32;
  var $i507: i64;
  var $p508: ref;
  var $p501: ref;
  var $p502: ref;
  var $i509: i32;
  var $i510: i1;
  var $i511: i1;
  var $i512: i32;
  var $i513: i64;
  var $p514: ref;
  var $p517: ref;
  var $i518: i8;
  var $i519: i32;
  var $i520: i32;
  var $i521: i64;
  var $p522: ref;
  var $p515: ref;
  var $p516: ref;
  var $i523: i32;
  var $i524: i1;
  var $i525: i1;
  var $i526: i32;
  var $i527: i64;
  var $p528: ref;
  var $p531: ref;
  var $i532: i8;
  var $i533: i32;
  var $i534: i32;
  var $i535: i64;
  var $p536: ref;
  var $p529: ref;
  var $p530: ref;
  var $i537: i32;
  var $i538: i1;
  var $i539: i1;
  var $i540: i32;
  var $i541: i64;
  var $p542: ref;
  var $p545: ref;
  var $i546: i8;
  var $i547: i32;
  var $i548: i32;
  var $i549: i64;
  var $p550: ref;
  var $p543: ref;
  var $p544: ref;
  var $i551: i32;
  var $i552: i1;
  var $i553: i1;
  var $i554: i32;
  var $i555: i64;
  var $p556: ref;
  var $p559: ref;
  var $i560: i8;
  var $i561: i32;
  var $i562: i32;
  var $i563: i64;
  var $p564: ref;
  var $p557: ref;
  var $p558: ref;
  var $i565: i32;
  var $i566: i1;
  var $i567: i1;
  var $i568: i32;
  var $i569: i64;
  var $p570: ref;
  var $p573: ref;
  var $i574: i8;
  var $i575: i32;
  var $i576: i32;
  var $i577: i64;
  var $p578: ref;
  var $p571: ref;
  var $p572: ref;
  var $i579: i32;
  var $i580: i1;
  var $i581: i1;
  var $i582: i32;
  var $i583: i64;
  var $p584: ref;
  var $p587: ref;
  var $i588: i8;
  var $i589: i32;
  var $i590: i32;
  var $i591: i64;
  var $p592: ref;
  var $p585: ref;
  var $p586: ref;
  var $i593: i32;
  var $i594: i1;
  var $i595: i1;
  var $i596: i32;
  var $i597: i64;
  var $p598: ref;
  var $p601: ref;
  var $i602: i8;
  var $i603: i32;
  var $i604: i32;
  var $i605: i64;
  var $p606: ref;
  var $p599: ref;
  var $p600: ref;
  var $i607: i32;
  var $i608: i1;
  var $i609: i1;
  var $i610: i32;
  var $i611: i64;
  var $p612: ref;
  var $p615: ref;
  var $i616: i8;
  var $i617: i32;
  var $i618: i32;
  var $i619: i64;
  var $p620: ref;
  var $p613: ref;
  var $p614: ref;
  var $i621: i32;
  var $i622: i1;
  var $i623: i1;
  var $i624: i32;
  var $i625: i64;
  var $p626: ref;
  var $p629: ref;
  var $i630: i8;
  var $i631: i32;
  var $i632: i32;
  var $i633: i64;
  var $p634: ref;
  var $p627: ref;
  var $p628: ref;
  var $i635: i32;
  var $i636: i1;
  var $i637: i1;
  var $i638: i32;
  var $i639: i64;
  var $p640: ref;
  var $p643: ref;
  var $i644: i8;
  var $i645: i32;
  var $i646: i32;
  var $i647: i64;
  var $p648: ref;
  var $p641: ref;
  var $p642: ref;
  var $i649: i32;
  var $i650: i1;
  var $i651: i1;
  var $i652: i32;
  var $i653: i64;
  var $p654: ref;
  var $p657: ref;
  var $i658: i8;
  var $i659: i32;
  var $i660: i32;
  var $i661: i64;
  var $p662: ref;
  var $p655: ref;
  var $p656: ref;
  var $i663: i32;
  var $i664: i1;
  var $i665: i1;
  var $i666: i32;
  var $i667: i64;
  var $p668: ref;
  var $p671: ref;
  var $i672: i8;
  var $i673: i32;
  var $i674: i32;
  var $i675: i64;
  var $p676: ref;
  var $p669: ref;
  var $p670: ref;
  var $i677: i32;
  var $i678: i1;
  var $i679: i1;
  var $i680: i32;
  var $i681: i64;
  var $p682: ref;
  var $p685: ref;
  var $i686: i8;
  var $i687: i32;
  var $i688: i32;
  var $i689: i64;
  var $p690: ref;
  var $p683: ref;
  var $p684: ref;
  var $i691: i32;
  var $i692: i1;
  var $i693: i1;
  var $i694: i32;
  var $i695: i64;
  var $p696: ref;
  var $p699: ref;
  var $i700: i8;
  var $i701: i32;
  var $i702: i32;
  var $i703: i64;
  var $p704: ref;
  var $p697: ref;
  var $p698: ref;
  var $i705: i32;
  var $i706: i1;
  var $i707: i1;
  var $i708: i32;
  var $i709: i64;
  var $p710: ref;
  var $p713: ref;
  var $i714: i8;
  var $i715: i32;
  var $i716: i32;
  var $i717: i64;
  var $p718: ref;
  var $p711: ref;
  var $p712: ref;
  var $i719: i32;
  var $i720: i1;
  var $i721: i1;
  var $i722: i32;
  var $i723: i64;
  var $p724: ref;
  var $p727: ref;
  var $i728: i8;
  var $i729: i32;
  var $i730: i32;
  var $i731: i64;
  var $p732: ref;
  var $p725: ref;
  var $p726: ref;
  var $i733: i32;
  var $i734: i1;
  var $i735: i1;
  var $i736: i32;
  var $i737: i64;
  var $p738: ref;
  var $p741: ref;
  var $i742: i8;
  var $i743: i32;
  var $i744: i32;
  var $i745: i64;
  var $p746: ref;
  var $p739: ref;
  var $p740: ref;
  var $i747: i32;
  var $i748: i1;
  var $i749: i1;
  var $i750: i32;
  var $i751: i64;
  var $p752: ref;
  var $p755: ref;
  var $i756: i8;
  var $i757: i32;
  var $i758: i32;
  var $i759: i64;
  var $p760: ref;
  var $p753: ref;
  var $p754: ref;
  var $i761: i32;
  var $i762: i1;
  var $i763: i1;
  var $i764: i32;
  var $i765: i64;
  var $p766: ref;
  var $p769: ref;
  var $i770: i8;
  var $i771: i32;
  var $i772: i32;
  var $i773: i64;
  var $p774: ref;
  var $p767: ref;
  var $p768: ref;
  var $i775: i32;
  var $i776: i1;
  var $i777: i1;
  var $i778: i32;
  var $i779: i64;
  var $p780: ref;
  var $p783: ref;
  var $i784: i8;
  var $i785: i32;
  var $i786: i32;
  var $i787: i64;
  var $p788: ref;
  var $p781: ref;
  var $p782: ref;
  var $i789: i32;
  var $i790: i1;
  var $i791: i1;
  var $i793: i8;
  var $i794: i32;
  var $i796: i1;
  var $i797: i32;
  var $i798: i64;
  var $p799: ref;
  var $p802: ref;
  var $i803: i8;
  var $i804: i32;
  var $i805: i32;
  var $i806: i64;
  var $p807: ref;
  var $p800: ref;
  var $p801: ref;
  var $i808: i32;
  var $i809: i1;
  var $i810: i1;
  var $i811: i32;
  var $i812: i64;
  var $p813: ref;
  var $p816: ref;
  var $i817: i8;
  var $i818: i32;
  var $i819: i32;
  var $i820: i64;
  var $p821: ref;
  var $p814: ref;
  var $p815: ref;
  var $i822: i32;
  var $i823: i1;
  var $i824: i1;
  var $i825: i32;
  var $i826: i64;
  var $p827: ref;
  var $p830: ref;
  var $i831: i8;
  var $i832: i32;
  var $i833: i32;
  var $i834: i64;
  var $p835: ref;
  var $p828: ref;
  var $p829: ref;
  var $i836: i32;
  var $i837: i1;
  var $i838: i1;
  var $i839: i32;
  var $i840: i64;
  var $p841: ref;
  var $p844: ref;
  var $i845: i8;
  var $i846: i32;
  var $i847: i32;
  var $i848: i64;
  var $p849: ref;
  var $p842: ref;
  var $p843: ref;
  var $i850: i32;
  var $i851: i1;
  var $i852: i1;
  var $i853: i32;
  var $i854: i64;
  var $p855: ref;
  var $p858: ref;
  var $i859: i8;
  var $i860: i32;
  var $i861: i32;
  var $i862: i64;
  var $p863: ref;
  var $p856: ref;
  var $p857: ref;
  var $i864: i32;
  var $i865: i1;
  var $i866: i1;
  var $i867: i32;
  var $i868: i64;
  var $p869: ref;
  var $p872: ref;
  var $i873: i8;
  var $i874: i32;
  var $i875: i32;
  var $i876: i64;
  var $p877: ref;
  var $p870: ref;
  var $p871: ref;
  var $i878: i32;
  var $i879: i1;
  var $i880: i1;
  var $i881: i32;
  var $i882: i64;
  var $p883: ref;
  var $p886: ref;
  var $i887: i8;
  var $i888: i32;
  var $i889: i32;
  var $i890: i64;
  var $p891: ref;
  var $p884: ref;
  var $p885: ref;
  var $i892: i32;
  var $i893: i1;
  var $i894: i1;
  var $i895: i32;
  var $i896: i64;
  var $p897: ref;
  var $p900: ref;
  var $i901: i8;
  var $i902: i32;
  var $i903: i32;
  var $i904: i64;
  var $p905: ref;
  var $p898: ref;
  var $p899: ref;
  var $i906: i32;
  var $i907: i1;
  var $i908: i1;
  var $i909: i32;
  var $i910: i64;
  var $p911: ref;
  var $p914: ref;
  var $i915: i8;
  var $i916: i32;
  var $i917: i32;
  var $i918: i64;
  var $p919: ref;
  var $p912: ref;
  var $p913: ref;
  var $i920: i32;
  var $i921: i1;
  var $i922: i1;
  var $i923: i32;
  var $i924: i64;
  var $p925: ref;
  var $p928: ref;
  var $i929: i8;
  var $i930: i32;
  var $i931: i32;
  var $i932: i64;
  var $p933: ref;
  var $p926: ref;
  var $p927: ref;
  var $i934: i32;
  var $i935: i1;
  var $i936: i1;
  var $i937: i32;
  var $i938: i64;
  var $p939: ref;
  var $p942: ref;
  var $i943: i8;
  var $i944: i32;
  var $i945: i32;
  var $i946: i64;
  var $p947: ref;
  var $p940: ref;
  var $p941: ref;
  var $i948: i32;
  var $i949: i1;
  var $i950: i1;
  var $i951: i32;
  var $i952: i64;
  var $p953: ref;
  var $p956: ref;
  var $i957: i8;
  var $i958: i32;
  var $i959: i32;
  var $i960: i64;
  var $p961: ref;
  var $p954: ref;
  var $p955: ref;
  var $i962: i32;
  var $i963: i1;
  var $i964: i1;
  var $i965: i32;
  var $i966: i64;
  var $p967: ref;
  var $p970: ref;
  var $i971: i8;
  var $i972: i32;
  var $i973: i32;
  var $i974: i64;
  var $p975: ref;
  var $p968: ref;
  var $p969: ref;
  var $i976: i32;
  var $i977: i1;
  var $i978: i1;
  var $i979: i32;
  var $i980: i64;
  var $p981: ref;
  var $p984: ref;
  var $i985: i8;
  var $i986: i32;
  var $i987: i32;
  var $i988: i64;
  var $p989: ref;
  var $p982: ref;
  var $p983: ref;
  var $i990: i32;
  var $i991: i1;
  var $i992: i1;
  var $i993: i32;
  var $i994: i64;
  var $p995: ref;
  var $p998: ref;
  var $i999: i8;
  var $i1000: i32;
  var $i1001: i32;
  var $i1002: i64;
  var $p1003: ref;
  var $p996: ref;
  var $p997: ref;
  var $i1004: i32;
  var $i1005: i1;
  var $i1006: i1;
  var $i1007: i32;
  var $i1008: i64;
  var $p1009: ref;
  var $p1012: ref;
  var $i1013: i8;
  var $i1014: i32;
  var $i1015: i32;
  var $i1016: i64;
  var $p1017: ref;
  var $p1010: ref;
  var $p1011: ref;
  var $i1018: i32;
  var $i1019: i1;
  var $i1020: i1;
  var $i1021: i32;
  var $i1022: i64;
  var $p1023: ref;
  var $p1026: ref;
  var $i1027: i8;
  var $i1028: i32;
  var $i1029: i32;
  var $i1030: i64;
  var $p1031: ref;
  var $p1024: ref;
  var $p1025: ref;
  var $i1032: i32;
  var $i1033: i1;
  var $i1034: i1;
  var $i1035: i32;
  var $i1036: i64;
  var $p1037: ref;
  var $p1040: ref;
  var $i1041: i8;
  var $i1042: i32;
  var $i1043: i32;
  var $i1044: i64;
  var $p1045: ref;
  var $p1038: ref;
  var $p1039: ref;
  var $i1046: i32;
  var $i1047: i1;
  var $i1048: i1;
  var $i1049: i32;
  var $i1050: i64;
  var $p1051: ref;
  var $p1054: ref;
  var $i1055: i8;
  var $i1056: i32;
  var $i1057: i32;
  var $i1058: i64;
  var $p1059: ref;
  var $p1052: ref;
  var $p1053: ref;
  var $i1060: i32;
  var $i1061: i1;
  var $i1062: i1;
  var $i1063: i32;
  var $i1064: i64;
  var $p1065: ref;
  var $p1068: ref;
  var $i1069: i8;
  var $i1070: i32;
  var $i1071: i32;
  var $i1072: i64;
  var $p1073: ref;
  var $p1066: ref;
  var $p1067: ref;
  var $i1074: i32;
  var $i1075: i1;
  var $i1076: i1;
  var $i1077: i32;
  var $i1078: i64;
  var $p1079: ref;
  var $p1082: ref;
  var $i1083: i8;
  var $i1084: i32;
  var $i1085: i32;
  var $i1086: i64;
  var $p1087: ref;
  var $p1080: ref;
  var $p1081: ref;
  var $i1088: i32;
  var $i1089: i1;
  var $i1090: i1;
  var $i1091: i32;
  var $i1092: i64;
  var $p1093: ref;
  var $p1096: ref;
  var $i1097: i8;
  var $i1098: i32;
  var $i1099: i32;
  var $i1100: i64;
  var $p1101: ref;
  var $p1094: ref;
  var $p1095: ref;
  var $i1102: i32;
  var $i1103: i1;
  var $i1104: i1;
  var $i1105: i32;
  var $i1106: i64;
  var $p1107: ref;
  var $p1110: ref;
  var $i1111: i8;
  var $i1112: i32;
  var $i1113: i32;
  var $i1114: i64;
  var $p1115: ref;
  var $p1108: ref;
  var $p1109: ref;
  var $i1116: i32;
  var $i1117: i1;
  var $i1118: i1;
  var $i1119: i32;
  var $i1120: i64;
  var $p1121: ref;
  var $p1124: ref;
  var $i1125: i8;
  var $i1126: i32;
  var $i1127: i32;
  var $i1128: i64;
  var $p1129: ref;
  var $p1122: ref;
  var $p1123: ref;
  var $i1130: i32;
  var $i1131: i1;
  var $i1132: i1;
  var $i1133: i32;
  var $i1134: i64;
  var $p1135: ref;
  var $p1138: ref;
  var $i1139: i8;
  var $i1140: i32;
  var $i1141: i32;
  var $i1142: i64;
  var $p1143: ref;
  var $p1136: ref;
  var $p1137: ref;
  var $i1144: i32;
  var $i1145: i1;
  var $i1146: i1;
  var $i1147: i32;
  var $i1148: i64;
  var $p1149: ref;
  var $p1152: ref;
  var $i1153: i8;
  var $i1154: i32;
  var $i1155: i32;
  var $i1156: i64;
  var $p1157: ref;
  var $p1150: ref;
  var $p1151: ref;
  var $i1158: i32;
  var $i1159: i1;
  var $i1160: i1;
  var $i1161: i32;
  var $i1162: i64;
  var $p1163: ref;
  var $p1166: ref;
  var $i1167: i8;
  var $i1168: i32;
  var $i1169: i32;
  var $i1170: i64;
  var $p1171: ref;
  var $p1164: ref;
  var $p1165: ref;
  var $i1172: i32;
  var $i1173: i1;
  var $i1174: i1;
  var $i1175: i32;
  var $i1176: i64;
  var $p1177: ref;
  var $p1180: ref;
  var $i1181: i8;
  var $i1182: i32;
  var $i1183: i32;
  var $i1184: i64;
  var $p1185: ref;
  var $p1178: ref;
  var $p1179: ref;
  var $i1186: i32;
  var $i1187: i1;
  var $i1188: i1;
  var $i1189: i32;
  var $i1190: i64;
  var $p1191: ref;
  var $p1194: ref;
  var $i1195: i8;
  var $i1196: i32;
  var $i1197: i32;
  var $i1198: i64;
  var $p1199: ref;
  var $p1192: ref;
  var $p1193: ref;
  var $i1200: i32;
  var $i1201: i1;
  var $i1202: i1;
  var $i1204: i8;
  var $i1205: i32;
  var vslice_dummy_var_26: i32;
  var vslice_dummy_var_27: i32;
  var vslice_dummy_var_28: i32;
  var vslice_dummy_var_29: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 981} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 982} $p2 := $alloc($mul.ref(94, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 983} $p3 := $alloc($mul.ref(94, $zext.i32.i64(1)));
    goto corral_source_split_5270;

  corral_source_split_5270:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7444, 1));
    goto corral_source_split_5271;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_5272;

  corral_source_split_5272:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(8476, 1));
    goto corral_source_split_5273;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_5274;

  corral_source_split_5274:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_5275;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p5, $mul.ref($i8, 1));
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    $i10, $i11, $i12, $i13, $p14 := 0, 3, 1, 0, $p9;
    goto $bb1;

  $bb1:
    call $i10, $i11, $i12, $i13, $p14, $p15, $p16, $p17, $i18, $i19, $i20, $p21, $p22, $i23, $p24, $p25, $p26, $i27, $i28, $i29, $p30, $i31, $p32, $p33, $p34, $i35, $p37, $i38, $i39, $i40, $i41, $p42, $i45, $i46, $p47, $p43, $p44, $i48, $i49, $i36, $i50, $i51, $i52, $i53, $i54, $i55, $p56, $p57, $p58, $i59, $i60, $i65, $i66, $i67, $p69, $p70, $p71, $i72, $p73, $i68, $i90, $i91, $i92, $i98, $i99, $i100, $i106, $i107, $p108, $p109, $i110, $p111, $p112, $p113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $i134, $i135, $i74, $i75, $i76, $i77, $p78, $i136, $i137, $i138, $i141, $p142, $i143, $i144, $p145, $p146, $p147, $p148, $i149, $p150, $i151, $i152, $p153, $i154, $i155, $p156, $p157, $i158, $i159, $i162, $i163, $i160, $i161, $p164, $p165, $i166, $i167, $p168, $p169, $i170, $p171, $i172, $i173, $p174, $i175, $i176, $p63, $i64, $p179, $i180, $i181, $p183, $i184, $i185, $i186, $i187, $p189, $i190, $i191, $i192, $i193, $i194, $p196, $i197, $i198, $i199, $i200, $i201, $p202, $p203, $i204, $p205, $i206, $i207, $p208, $p209, $p210, $p211, $p212, $i213, $i215, $p216, $i217, $i218, $i219, $i220, $p221, $i224, $i225, $p226, $p222, $p223, $i227, $i228, $i214, $i229, $p230, $p231, $p232, $p233, $p234, $p235, $p236, $p238, $i239, $i240, $p241, $i242, $p243, $i244, $i245, $p246, $p247, $p248, $i249, $i250, $p253, $i254, $i255, $i256, $p258, $i259, $i260, $i261, $i262, $p264, $i265, $i266, $i267, $i268, $p270, $i271, $i272, $i273, $p274, $p275, $p276, $p277, $p278, $p279, $p280, $p281, $p282, $p285, $i286, $i287, $i288, $i289, $i290, $i291, $i292, $i293, $i294, $i295, $i296, $i297, $p298, $p299, $p300, $i301, $p303, $i304, $i305, $i306, $p307, $p309, $i310, $i311, $i312, $i313, $p315, $i316, $i317, $i318, $p320, $i321, $i322, $i323, $i324, $i325, $p327, $i328, $i329, $i330, $i331, $i332, $p333, $p334, $i335, $p336, $p338, $i339, $i340, $i341, $i342, $p343, $p345, $i346, $i347, $i348, $i349, $p350, $p352, $i353, $i354, $i355, $i356, $p357, $p359, $i360, $i361, $i362, $i363, $p364, $p366, $i367, $i368, $i369, $p370, $p372, $i373, $i374, $i375, $i376, $i377, $i378, $p379, $i380, $i381, $p382, $p177, $i178, $p61, $i62, $p139, $i140, $p383, $i384, $i385, $i386, $i387, $p388, $p391, $i392, $i393, $i394, $i395, $p396, $p389, $p390, $i397, $i398, $i399, $i400, $i401, $p402, $p405, $i406, $i407, $i408, $i409, $p410, $p403, $p404, $i411, $i412, $i413, $i414, $i415, $p416, $p419, $i420, $i421, $i422, $i423, $p424, $p417, $p418, $i425, $i426, $i427, $i428, $i429, $p430, $p433, $i434, $i435, $i436, $i437, $p438, $p431, $p432, $i439, $i440, $i441, $i442, $i443, $p444, $p447, $i448, $i449, $i450, $i451, $p452, $p445, $p446, $i453, $i454, $i455, $i456, $i457, $p458, $p461, $i462, $i463, $i464, $i465, $p466, $p459, $p460, $i467, $i468, $i469, $i470, $i471, $p472, $p475, $i476, $i477, $i478, $i479, $p480, $p473, $p474, $i481, $i482, $i483, $i484, $i485, $p486, $p489, $i490, $i491, $i492, $i493, $p494, $p487, $p488, $i495, $i496, $i497, $i498, $i499, $p500, $p503, $i504, $i505, $i506, $i507, $p508, $p501, $p502, $i509, $i510, $i511, $i512, $i513, $p514, $p517, $i518, $i519, $i520, $i521, $p522, $p515, $p516, $i523, $i524, $i525, $i526, $i527, $p528, $p531, $i532, $i533, $i534, $i535, $p536, $p529, $p530, $i537, $i538, $i539, $i540, $i541, $p542, $p545, $i546, $i547, $i548, $i549, $p550, $p543, $p544, $i551, $i552, $i553, $i554, $i555, $p556, $p559, $i560, $i561, $i562, $i563, $p564, $p557, $p558, $i565, $i566, $i567, $i568, $i569, $p570, $p573, $i574, $i575, $i576, $i577, $p578, $p571, $p572, $i579, $i580, $i581, $i582, $i583, $p584, $p587, $i588, $i589, $i590, $i591, $p592, $p585, $p586, $i593, $i594, $i595, $i596, $i597, $p598, $p601, $i602, $i603, $i604, $i605, $p606, $p599, $p600, $i607, $i608, $i609, $i610, $i611, $p612, $p615, $i616, $i617, $i618, $i619, $p620, $p613, $p614, $i621, $i622, $i623, $i624, $i625, $p626, $p629, $i630, $i631, $i632, $i633, $p634, $p627, $p628, $i635, $i636, $i637, $i638, $i639, $p640, $p643, $i644, $i645, $i646, $i647, $p648, $p641, $p642, $i649, $i650, $i651, $i652, $i653, $p654, $p657, $i658, $i659, $i660, $i661, $p662, $p655, $p656, $i663, $i664, $i665, $i666, $i667, $p668, $p671, $i672, $i673, $i674, $i675, $p676, $p669, $p670, $i677, $i678, $i679, $i680, $i681, $p682, $p685, $i686, $i687, $i688, $i689, $p690, $p683, $p684, $i691, $i692, $i693, $i694, $i695, $p696, $p699, $i700, $i701, $i702, $i703, $p704, $p697, $p698, $i705, $i706, $i707, $i708, $i709, $p710, $p713, $i714, $i715, $i716, $i717, $p718, $p711, $p712, $i719, $i720, $i721, $i722, $i723, $p724, $p727, $i728, $i729, $i730, $i731, $p732, $p725, $p726, $i733, $i734, $i735, $i736, $i737, $p738, $p741, $i742, $i743, $i744, $i745, $p746, $p739, $p740, $i747, $i748, $i749, $i750, $i751, $p752, $p755, $i756, $i757, $i758, $i759, $p760, $p753, $p754, $i761, $i762, $i763, $i764, $i765, $p766, $p769, $i770, $i771, $i772, $i773, $p774, $p767, $p768, $i775, $i776, $i777, $i778, $i779, $p780, $p783, $i784, $i785, $i786, $i787, $p788, $p781, $p782, $i789, $i790, $i791, $i793, $i794, $i796, $i797, $i798, $p799, $p802, $i803, $i804, $i805, $i806, $p807, $p800, $p801, $i808, $i809, $i810, $i811, $i812, $p813, $p816, $i817, $i818, $i819, $i820, $p821, $p814, $p815, $i822, $i823, $i824, $i825, $i826, $p827, $p830, $i831, $i832, $i833, $i834, $p835, $p828, $p829, $i836, $i837, $i838, $i839, $i840, $p841, $p844, $i845, $i846, $i847, $i848, $p849, $p842, $p843, $i850, $i851, $i852, $i853, $i854, $p855, $p858, $i859, $i860, $i861, $i862, $p863, $p856, $p857, $i864, $i865, $i866, $i867, $i868, $p869, $p872, $i873, $i874, $i875, $i876, $p877, $p870, $p871, $i878, $i879, $i880, $i881, $i882, $p883, $p886, $i887, $i888, $i889, $i890, $p891, $p884, $p885, $i892, $i893, $i894, $i895, $i896, $p897, $p900, $i901, $i902, $i903, $i904, $p905, $p898, $p899, $i906, $i907, $i908, $i909, $i910, $p911, $p914, $i915, $i916, $i917, $i918, $p919, $p912, $p913, $i920, $i921, $i922, $i923, $i924, $p925, $p928, $i929, $i930, $i931, $i932, $p933, $p926, $p927, $i934, $i935, $i936, $i937, $i938, $p939, $p942, $i943, $i944, $i945, $i946, $p947, $p940, $p941, $i948, $i949, $i950, $i951, $i952, $p953, $p956, $i957, $i958, $i959, $i960, $p961, $p954, $p955, $i962, $i963, $i964, $i965, $i966, $p967, $p970, $i971, $i972, $i973, $i974, $p975, $p968, $p969, $i976, $i977, $i978, $i979, $i980, $p981, $p984, $i985, $i986, $i987, $i988, $p989, $p982, $p983, $i990, $i991, $i992, $i993, $i994, $p995, $p998, $i999, $i1000, $i1001, $i1002, $p1003, $p996, $p997, $i1004, $i1005, $i1006, $i1007, $i1008, $p1009, $p1012, $i1013, $i1014, $i1015, $i1016, $p1017, $p1010, $p1011, $i1018, $i1019, $i1020, $i1021, $i1022, $p1023, $p1026, $i1027, $i1028, $i1029, $i1030, $p1031, $p1024, $p1025, $i1032, $i1033, $i1034, $i1035, $i1036, $p1037, $p1040, $i1041, $i1042, $i1043, $i1044, $p1045, $p1038, $p1039, $i1046, $i1047, $i1048, $i1049, $i1050, $p1051, $p1054, $i1055, $i1056, $i1057, $i1058, $p1059, $p1052, $p1053, $i1060, $i1061, $i1062, $i1063, $i1064, $p1065, $p1068, $i1069, $i1070, $i1071, $i1072, $p1073, $p1066, $p1067, $i1074, $i1075, $i1076, $i1077, $i1078, $p1079, $p1082, $i1083, $i1084, $i1085, $i1086, $p1087, $p1080, $p1081, $i1088, $i1089, $i1090, $i1091, $i1092, $p1093, $p1096, $i1097, $i1098, $i1099, $i1100, $p1101, $p1094, $p1095, $i1102, $i1103, $i1104, $i1105, $i1106, $p1107, $p1110, $i1111, $i1112, $i1113, $i1114, $p1115, $p1108, $p1109, $i1116, $i1117, $i1118, $i1119, $i1120, $p1121, $p1124, $i1125, $i1126, $i1127, $i1128, $p1129, $p1122, $p1123, $i1130, $i1131, $i1132, $i1133, $i1134, $p1135, $p1138, $i1139, $i1140, $i1141, $i1142, $p1143, $p1136, $p1137, $i1144, $i1145, $i1146, $i1147, $i1148, $p1149, $p1152, $i1153, $i1154, $i1155, $i1156, $p1157, $p1150, $p1151, $i1158, $i1159, $i1160, $i1161, $i1162, $p1163, $p1166, $i1167, $i1168, $i1169, $i1170, $p1171, $p1164, $p1165, $i1172, $i1173, $i1174, $i1175, $i1176, $p1177, $p1180, $i1181, $i1182, $i1183, $i1184, $p1185, $p1178, $p1179, $i1186, $i1187, $i1188, $i1189, $i1190, $p1191, $p1194, $i1195, $i1196, $i1197, $i1198, $p1199, $p1192, $p1193, $i1200, $i1201, $i1202, $i1204, $i1205, vslice_dummy_var_26, vslice_dummy_var_27, vslice_dummy_var_28, vslice_dummy_var_29 := ftdi_elan_respond_engine_loop_$bb1($p0, $p1, $p2, $p3, $i10, $i11, $i12, $i13, $p14, $p15, $p16, $p17, $i18, $i19, $i20, $p21, $p22, $i23, $p24, $p25, $p26, $i27, $i28, $i29, $p30, $i31, $p32, $p33, $p34, $i35, $p37, $i38, $i39, $i40, $i41, $p42, $i45, $i46, $p47, $p43, $p44, $i48, $i49, $i36, $i50, $i51, $i52, $i53, $i54, $i55, $p56, $p57, $p58, $i59, $i60, $i65, $i66, $i67, $p69, $p70, $p71, $i72, $p73, $i68, $i90, $i91, $i92, $i98, $i99, $i100, $i106, $i107, $p108, $p109, $i110, $p111, $p112, $p113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $i134, $i135, $i74, $i75, $i76, $i77, $p78, $i136, $i137, $i138, $i141, $p142, $i143, $i144, $p145, $p146, $p147, $p148, $i149, $p150, $i151, $i152, $p153, $i154, $i155, $p156, $p157, $i158, $i159, $i162, $i163, $i160, $i161, $p164, $p165, $i166, $i167, $p168, $p169, $i170, $p171, $i172, $i173, $p174, $i175, $i176, $p63, $i64, $p179, $i180, $i181, $p183, $i184, $i185, $i186, $i187, $p189, $i190, $i191, $i192, $i193, $i194, $p196, $i197, $i198, $i199, $i200, $i201, $p202, $p203, $i204, $p205, $i206, $i207, $p208, $p209, $p210, $p211, $p212, $i213, $i215, $p216, $i217, $i218, $i219, $i220, $p221, $i224, $i225, $p226, $p222, $p223, $i227, $i228, $i214, $i229, $p230, $p231, $p232, $p233, $p234, $p235, $p236, $p238, $i239, $i240, $p241, $i242, $p243, $i244, $i245, $p246, $p247, $p248, $i249, $i250, $p253, $i254, $i255, $i256, $p258, $i259, $i260, $i261, $i262, $p264, $i265, $i266, $i267, $i268, $p270, $i271, $i272, $i273, $p274, $p275, $p276, $p277, $p278, $p279, $p280, $p281, $p282, $p285, $i286, $i287, $i288, $i289, $i290, $i291, $i292, $i293, $i294, $i295, $i296, $i297, $p298, $p299, $p300, $i301, $p303, $i304, $i305, $i306, $p307, $p309, $i310, $i311, $i312, $i313, $p315, $i316, $i317, $i318, $p320, $i321, $i322, $i323, $i324, $i325, $p327, $i328, $i329, $i330, $i331, $i332, $p333, $p334, $i335, $p336, $p338, $i339, $i340, $i341, $i342, $p343, $p345, $i346, $i347, $i348, $i349, $p350, $p352, $i353, $i354, $i355, $i356, $p357, $p359, $i360, $i361, $i362, $i363, $p364, $p366, $i367, $i368, $i369, $p370, $p372, $i373, $i374, $i375, $i376, $i377, $i378, $p379, $i380, $i381, $p382, $p177, $i178, $p61, $i62, $p139, $i140, $p383, $i384, $i385, $i386, $i387, $p388, $p391, $i392, $i393, $i394, $i395, $p396, $p389, $p390, $i397, $i398, $i399, $i400, $i401, $p402, $p405, $i406, $i407, $i408, $i409, $p410, $p403, $p404, $i411, $i412, $i413, $i414, $i415, $p416, $p419, $i420, $i421, $i422, $i423, $p424, $p417, $p418, $i425, $i426, $i427, $i428, $i429, $p430, $p433, $i434, $i435, $i436, $i437, $p438, $p431, $p432, $i439, $i440, $i441, $i442, $i443, $p444, $p447, $i448, $i449, $i450, $i451, $p452, $p445, $p446, $i453, $i454, $i455, $i456, $i457, $p458, $p461, $i462, $i463, $i464, $i465, $p466, $p459, $p460, $i467, $i468, $i469, $i470, $i471, $p472, $p475, $i476, $i477, $i478, $i479, $p480, $p473, $p474, $i481, $i482, $i483, $i484, $i485, $p486, $p489, $i490, $i491, $i492, $i493, $p494, $p487, $p488, $i495, $i496, $i497, $i498, $i499, $p500, $p503, $i504, $i505, $i506, $i507, $p508, $p501, $p502, $i509, $i510, $i511, $i512, $i513, $p514, $p517, $i518, $i519, $i520, $i521, $p522, $p515, $p516, $i523, $i524, $i525, $i526, $i527, $p528, $p531, $i532, $i533, $i534, $i535, $p536, $p529, $p530, $i537, $i538, $i539, $i540, $i541, $p542, $p545, $i546, $i547, $i548, $i549, $p550, $p543, $p544, $i551, $i552, $i553, $i554, $i555, $p556, $p559, $i560, $i561, $i562, $i563, $p564, $p557, $p558, $i565, $i566, $i567, $i568, $i569, $p570, $p573, $i574, $i575, $i576, $i577, $p578, $p571, $p572, $i579, $i580, $i581, $i582, $i583, $p584, $p587, $i588, $i589, $i590, $i591, $p592, $p585, $p586, $i593, $i594, $i595, $i596, $i597, $p598, $p601, $i602, $i603, $i604, $i605, $p606, $p599, $p600, $i607, $i608, $i609, $i610, $i611, $p612, $p615, $i616, $i617, $i618, $i619, $p620, $p613, $p614, $i621, $i622, $i623, $i624, $i625, $p626, $p629, $i630, $i631, $i632, $i633, $p634, $p627, $p628, $i635, $i636, $i637, $i638, $i639, $p640, $p643, $i644, $i645, $i646, $i647, $p648, $p641, $p642, $i649, $i650, $i651, $i652, $i653, $p654, $p657, $i658, $i659, $i660, $i661, $p662, $p655, $p656, $i663, $i664, $i665, $i666, $i667, $p668, $p671, $i672, $i673, $i674, $i675, $p676, $p669, $p670, $i677, $i678, $i679, $i680, $i681, $p682, $p685, $i686, $i687, $i688, $i689, $p690, $p683, $p684, $i691, $i692, $i693, $i694, $i695, $p696, $p699, $i700, $i701, $i702, $i703, $p704, $p697, $p698, $i705, $i706, $i707, $i708, $i709, $p710, $p713, $i714, $i715, $i716, $i717, $p718, $p711, $p712, $i719, $i720, $i721, $i722, $i723, $p724, $p727, $i728, $i729, $i730, $i731, $p732, $p725, $p726, $i733, $i734, $i735, $i736, $i737, $p738, $p741, $i742, $i743, $i744, $i745, $p746, $p739, $p740, $i747, $i748, $i749, $i750, $i751, $p752, $p755, $i756, $i757, $i758, $i759, $p760, $p753, $p754, $i761, $i762, $i763, $i764, $i765, $p766, $p769, $i770, $i771, $i772, $i773, $p774, $p767, $p768, $i775, $i776, $i777, $i778, $i779, $p780, $p783, $i784, $i785, $i786, $i787, $p788, $p781, $p782, $i789, $i790, $i791, $i793, $i794, $i796, $i797, $i798, $p799, $p802, $i803, $i804, $i805, $i806, $p807, $p800, $p801, $i808, $i809, $i810, $i811, $i812, $p813, $p816, $i817, $i818, $i819, $i820, $p821, $p814, $p815, $i822, $i823, $i824, $i825, $i826, $p827, $p830, $i831, $i832, $i833, $i834, $p835, $p828, $p829, $i836, $i837, $i838, $i839, $i840, $p841, $p844, $i845, $i846, $i847, $i848, $p849, $p842, $p843, $i850, $i851, $i852, $i853, $i854, $p855, $p858, $i859, $i860, $i861, $i862, $p863, $p856, $p857, $i864, $i865, $i866, $i867, $i868, $p869, $p872, $i873, $i874, $i875, $i876, $p877, $p870, $p871, $i878, $i879, $i880, $i881, $i882, $p883, $p886, $i887, $i888, $i889, $i890, $p891, $p884, $p885, $i892, $i893, $i894, $i895, $i896, $p897, $p900, $i901, $i902, $i903, $i904, $p905, $p898, $p899, $i906, $i907, $i908, $i909, $i910, $p911, $p914, $i915, $i916, $i917, $i918, $p919, $p912, $p913, $i920, $i921, $i922, $i923, $i924, $p925, $p928, $i929, $i930, $i931, $i932, $p933, $p926, $p927, $i934, $i935, $i936, $i937, $i938, $p939, $p942, $i943, $i944, $i945, $i946, $p947, $p940, $p941, $i948, $i949, $i950, $i951, $i952, $p953, $p956, $i957, $i958, $i959, $i960, $p961, $p954, $p955, $i962, $i963, $i964, $i965, $i966, $p967, $p970, $i971, $i972, $i973, $i974, $p975, $p968, $p969, $i976, $i977, $i978, $i979, $i980, $p981, $p984, $i985, $i986, $i987, $i988, $p989, $p982, $p983, $i990, $i991, $i992, $i993, $i994, $p995, $p998, $i999, $i1000, $i1001, $i1002, $p1003, $p996, $p997, $i1004, $i1005, $i1006, $i1007, $i1008, $p1009, $p1012, $i1013, $i1014, $i1015, $i1016, $p1017, $p1010, $p1011, $i1018, $i1019, $i1020, $i1021, $i1022, $p1023, $p1026, $i1027, $i1028, $i1029, $i1030, $p1031, $p1024, $p1025, $i1032, $i1033, $i1034, $i1035, $i1036, $p1037, $p1040, $i1041, $i1042, $i1043, $i1044, $p1045, $p1038, $p1039, $i1046, $i1047, $i1048, $i1049, $i1050, $p1051, $p1054, $i1055, $i1056, $i1057, $i1058, $p1059, $p1052, $p1053, $i1060, $i1061, $i1062, $i1063, $i1064, $p1065, $p1068, $i1069, $i1070, $i1071, $i1072, $p1073, $p1066, $p1067, $i1074, $i1075, $i1076, $i1077, $i1078, $p1079, $p1082, $i1083, $i1084, $i1085, $i1086, $p1087, $p1080, $p1081, $i1088, $i1089, $i1090, $i1091, $i1092, $p1093, $p1096, $i1097, $i1098, $i1099, $i1100, $p1101, $p1094, $p1095, $i1102, $i1103, $i1104, $i1105, $i1106, $p1107, $p1110, $i1111, $i1112, $i1113, $i1114, $p1115, $p1108, $p1109, $i1116, $i1117, $i1118, $i1119, $i1120, $p1121, $p1124, $i1125, $i1126, $i1127, $i1128, $p1129, $p1122, $p1123, $i1130, $i1131, $i1132, $i1133, $i1134, $p1135, $p1138, $i1139, $i1140, $i1141, $i1142, $p1143, $p1136, $p1137, $i1144, $i1145, $i1146, $i1147, $i1148, $p1149, $p1152, $i1153, $i1154, $i1155, $i1156, $p1157, $p1150, $p1151, $i1158, $i1159, $i1160, $i1161, $i1162, $p1163, $p1166, $i1167, $i1168, $i1169, $i1170, $p1171, $p1164, $p1165, $i1172, $i1173, $i1174, $i1175, $i1176, $p1177, $p1180, $i1181, $i1182, $i1183, $i1184, $p1185, $p1178, $p1179, $i1186, $i1187, $i1188, $i1189, $i1190, $p1191, $p1194, $i1195, $i1196, $i1197, $i1198, $p1199, $p1192, $p1193, $i1200, $i1201, $i1202, $i1204, $i1205, vslice_dummy_var_26, vslice_dummy_var_27, vslice_dummy_var_28, vslice_dummy_var_29);
    goto $bb1_last;

  corral_source_split_5278:
    assume {:verifier.code 0} true;
    $M.16 := $store.i32($M.16, $p1, 0);
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_5280;

  corral_source_split_5280:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7432, 1));
    goto corral_source_split_5282;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.0, $p17);
    goto corral_source_split_5283;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 984} $i20 := __create_pipe($p16, $i19);
    call {:si_unique_call 985} {:cexpr "tmp"} boogie_si_record_i32($i20);
    goto corral_source_split_5285;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_5286;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_5287;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    $i23 := $or.i32($i20, $sub.i32(0, 1073741696));
    goto corral_source_split_5288;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7400, 1));
    goto corral_source_split_5289;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_5290;

  corral_source_split_5290:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7408, 1));
    goto corral_source_split_5291;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    $i27 := $load.i64($M.0, $p26);
    goto corral_source_split_5292;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i64.i32($i27);
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 986} $i29 := usb_bulk_msg($p22, $i23, $p25, $i28, $p1, 500);
    call {:si_unique_call 987} {:cexpr "tmp___0"} boogie_si_record_i32($i29);
    goto corral_source_split_5294;

  corral_source_split_5294:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p2);
    goto corral_source_split_5295;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.16, $p1);
    call {:si_unique_call 988} {:cexpr "m"} boogie_si_record_i32($i31);
    goto corral_source_split_5296;

  corral_source_split_5296:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7400, 1));
    goto corral_source_split_5297;

  corral_source_split_5297:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 94)), $mul.ref(0, 1));
    goto corral_source_split_5299;

  corral_source_split_5299:
    assume {:verifier.code 0} true;
    $M.23 := $store.i8($M.23, $p34, 0);
    goto corral_source_split_5300;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i36 := $sub.i32($i31, 1);
    call {:si_unique_call 989} {:cexpr "m"} boogie_si_record_i32($i36);
    goto corral_source_split_5302;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    $i50 := $sgt.i32($i31, 0);
    goto corral_source_split_5303;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i50 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.16, $p1);
    goto corral_source_split_5327;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    $i52 := $sgt.i32($i51, 2);
    goto corral_source_split_5328;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i52 == 1);
    goto corral_source_split_5342;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i29, $sub.i32(0, 110));
    goto corral_source_split_5343;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i65 == 1);
    goto corral_source_split_5355;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    $i90 := $eq.i32($i29, $sub.i32(0, 84));
    goto corral_source_split_5356;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    $i91, $i92 := $i13, $i29;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i90 == 1);
    goto corral_source_split_5396;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    $i98 := $ne.i32($i29, 0);
    goto corral_source_split_5397;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    $i99, $i100 := $i13, $i29;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i98 == 1);
    goto corral_source_split_5407;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    $i106 := $load.i32($M.16, $p1);
    goto corral_source_split_5408;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    $i107 := $eq.i32($i106, 2);
    goto corral_source_split_5409;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i107 == 1);
    goto corral_source_split_5423;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    $i130 := $load.i32($M.16, $p1);
    goto corral_source_split_5424;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    $i131 := $eq.i32($i130, 1);
    goto corral_source_split_5425;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i131 == 1);
    goto corral_source_split_5465;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    $i134 := $sub.i32($i12, 1);
    call {:si_unique_call 1007} {:cexpr "retry_on_empty"} boogie_si_record_i32($i134);
    goto corral_source_split_5466;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    $i135 := $sgt.i32($i12, 0);
    goto corral_source_split_5467;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i135 == 1);
    goto corral_source_split_5475;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    $i84 := 0;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_5386;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    $r := $i84;
    return;

  $bb57:
    assume $i135 == 1;
    goto corral_source_split_5473;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    $i74, $i75, $i76, $i77, $p78 := $i10, $i11, $i134, $i13, $p14;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5369;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    $i10, $i11, $i12, $i13, $p14 := $i74, $i75, $i76, $i77, $p78;
    goto corral_source_split_5369_dummy;

  $bb53:
    assume $i131 == 1;
    goto corral_source_split_5461;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    $i132 := $sub.i32($i12, 1);
    call {:si_unique_call 1006} {:cexpr "retry_on_empty"} boogie_si_record_i32($i132);
    goto corral_source_split_5462;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    $i133 := $sgt.i32($i12, 0);
    goto corral_source_split_5463;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i133 == 1);
    goto corral_source_split_5471;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    $i84 := 0;
    goto $bb30;

  $bb55:
    assume $i133 == 1;
    goto corral_source_split_5469;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    $i74, $i75, $i76, $i77, $p78 := $i10, $i11, $i132, $i13, $p14;
    goto $bb27;

  $bb35:
    assume $i107 == 1;
    goto corral_source_split_5411;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7400, 1));
    goto corral_source_split_5412;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    $p109 := $load.ref($M.0, $p108);
    goto corral_source_split_5413;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    $i110 := $load.i8($M.0, $p109);
    call {:si_unique_call 1000} {:cexpr "s0"} boogie_si_record_i8($i110);
    goto corral_source_split_5414;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7400, 1));
    goto corral_source_split_5415;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    $p112 := $load.ref($M.0, $p111);
    goto corral_source_split_5416;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($p112, $mul.ref(1, 1));
    goto corral_source_split_5417;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    $i114 := $load.i8($M.0, $p113);
    call {:si_unique_call 1001} {:cexpr "s1"} boogie_si_record_i8($i114);
    goto corral_source_split_5418;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    $i115 := $add.i32($i10, 1);
    call {:si_unique_call 1002} {:cexpr "empty_packets"} boogie_si_record_i32($i115);
    goto corral_source_split_5419;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    $i116 := $zext.i8.i32($i110);
    goto corral_source_split_5420;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    $i117 := $eq.i32($i116, 49);
    goto corral_source_split_5421;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !($i117 == 1);
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i122 := $zext.i8.i32($i110);
    goto corral_source_split_5431;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    $i123 := $eq.i32($i122, 49);
    goto corral_source_split_5432;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume !($i123 == 1);
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $i128 := $sub.i32($i12, 1);
    call {:si_unique_call 1004} {:cexpr "retry_on_empty"} boogie_si_record_i32($i128);
    goto corral_source_split_5446;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    $i129 := $sgt.i32($i12, 0);
    goto corral_source_split_5447;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i129 == 1);
    goto corral_source_split_5459;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    $i84 := 0;
    goto $bb30;

  $bb51:
    assume $i129 == 1;
    goto corral_source_split_5457;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    $i74, $i75, $i76, $i77, $p78 := $i115, $i11, $i128, $i13, $p14;
    goto $bb27;

  $bb44:
    assume $i123 == 1;
    goto corral_source_split_5442;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    $i124 := $zext.i8.i32($i114);
    goto corral_source_split_5443;

  corral_source_split_5443:
    assume {:verifier.code 0} true;
    $i125 := $eq.i32($i124, 0);
    goto corral_source_split_5444;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume !($i125 == 1);
    goto $bb46;

  $bb47:
    assume $i125 == 1;
    goto corral_source_split_5449;

  corral_source_split_5449:
    assume {:verifier.code 0} true;
    $i126 := $sub.i32($i12, 1);
    call {:si_unique_call 1005} {:cexpr "retry_on_empty"} boogie_si_record_i32($i126);
    goto corral_source_split_5450;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    $i127 := $sgt.i32($i12, 0);
    goto corral_source_split_5451;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i127 == 1);
    goto corral_source_split_5455;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    $i84 := 0;
    goto $bb30;

  $bb49:
    assume $i127 == 1;
    goto corral_source_split_5453;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    $i74, $i75, $i76, $i77, $p78 := $i115, $i11, $i126, $i13, $p14;
    goto $bb27;

  $bb37:
    assume $i117 == 1;
    goto corral_source_split_5427;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    $i118 := $zext.i8.i32($i114);
    goto corral_source_split_5428;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    $i119 := $eq.i32($i118, 96);
    goto corral_source_split_5429;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume !($i119 == 1);
    goto $bb39;

  $bb40:
    assume $i119 == 1;
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    $i120 := $sub.i32($i12, 1);
    call {:si_unique_call 1003} {:cexpr "retry_on_empty"} boogie_si_record_i32($i120);
    goto corral_source_split_5435;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    $i121 := $sgt.i32($i12, 0);
    goto corral_source_split_5436;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i121 == 1);
    goto corral_source_split_5440;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    $i84 := 0;
    goto $bb30;

  $bb42:
    assume $i121 == 1;
    goto corral_source_split_5438;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    $i74, $i75, $i76, $i77, $p78 := $i115, $i11, $i120, $i13, $p14;
    goto $bb27;

  $bb33:
    assume $i98 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5399;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_5400;

  corral_source_split_5400:
    assume {:verifier.code 0} true;
    $p102 := $load.ref($M.0, $p101);
    goto corral_source_split_5401;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p102, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_5402;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    $i104 := $load.i32($M.16, $p1);
    goto corral_source_split_5403;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    $p105 := $bitcast.ref.ref($p2);
    goto corral_source_split_5404;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 999} dev_err.ref.ref.i32.i32.i32.ref($p103, .str.9, $i100, $i104, $i99, $p105);
    goto corral_source_split_5405;

  corral_source_split_5405:
    assume {:verifier.code 0} true;
    $i84 := $i100;
    goto $bb30;

  $bb31:
    assume $i90 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5388;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_5389;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    $p94 := $load.ref($M.0, $p93);
    goto corral_source_split_5390;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p94, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_5391;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    $i96 := $load.i32($M.16, $p1);
    goto corral_source_split_5392;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    $p97 := $bitcast.ref.ref($p2);
    goto corral_source_split_5393;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 998} dev_err.ref.ref.i32.i32.i32.ref($p95, .str.9, $i92, $i96, $i91, $p97);
    goto corral_source_split_5394;

  corral_source_split_5394:
    assume {:verifier.code 0} true;
    $i84 := $i92;
    goto $bb30;

  $bb23:
    assume $i65 == 1;
    goto corral_source_split_5351;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    $i66 := $sub.i32($i11, 1);
    call {:si_unique_call 994} {:cexpr "retry_on_timeout"} boogie_si_record_i32($i66);
    goto corral_source_split_5352;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    $i67 := $sgt.i32($i11, 0);
    goto corral_source_split_5353;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    $i68 := $i13;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_5366;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    $i79 := $sgt.i32($i68, 0);
    goto corral_source_split_5367;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i79 == 1);
    goto corral_source_split_5378;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_5379;

  corral_source_split_5379:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.0, $p85);
    goto corral_source_split_5380;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p86, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    $i88 := $load.i32($M.16, $p1);
    goto corral_source_split_5382;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    $p89 := $bitcast.ref.ref($p2);
    goto corral_source_split_5383;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 997} dev_err.ref.ref.i32.i32.ref($p87, .str.7, $i88, $i68, $p89);
    goto corral_source_split_5384;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    $i84 := $sub.i32(0, 12);
    goto $bb30;

  $bb28:
    assume $i79 == 1;
    goto corral_source_split_5371;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_5372;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.0, $p80);
    goto corral_source_split_5373;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p81, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_5374;

  corral_source_split_5374:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p2);
    goto corral_source_split_5375;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 996} dev_err.ref.ref.i32.ref($p82, .str.8, $i68, $p83);
    goto corral_source_split_5376;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    $i84 := $sub.i32(0, 12);
    goto $bb30;

  $bb25:
    assume $i67 == 1;
    goto corral_source_split_5358;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_5359;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    goto corral_source_split_5360;

  corral_source_split_5360:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p70, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.16, $p1);
    goto corral_source_split_5362;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p2);
    goto corral_source_split_5363;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} dev_err.ref.ref.i32.i32.ref($p71, .str.7, $i72, $i13, $p73);
    goto corral_source_split_5364;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    $i74, $i75, $i76, $i77, $p78 := $i10, $i66, $i12, $i13, $p14;
    goto $bb27;

  $bb17:
    assume $i52 == 1;
    goto corral_source_split_5330;

  corral_source_split_5330:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.16, $p1);
    goto corral_source_split_5331;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    $i54 := $add.i32($i53, $sub.i32(0, 2));
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    $i55 := $sext.i32.i64($i54);
    goto corral_source_split_5333;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7424, 1));
    goto corral_source_split_5334;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p56, $i55);
    goto corral_source_split_5335;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7416, 1));
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p57, 1);
    goto corral_source_split_5337;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7424, 1));
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    $i59 := $load.i64($M.0, $p58);
    goto corral_source_split_5339;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    $i60 := $ne.i64($i59, 0);
    goto corral_source_split_5340;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    $p61, $i62 := $p14, $i13;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i60 == 1);
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5347;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    $p383, $i384 := $p61, $i62;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5778;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    $i74, $i75, $i76, $i77, $p78 := $i10, $i11, $i12, $i384, $p383;
    goto $bb27;

  $bb19:
    assume $i60 == 1;
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    $p63, $i64 := $p14, $i13;
    goto $bb22;

  $bb22:
    call $i136, $i137, $i138, $i141, $p142, $i143, $i144, $p145, $p146, $p147, $p148, $i149, $p150, $i151, $i152, $p153, $i154, $i155, $p156, $p157, $i158, $i159, $i162, $i163, $i160, $i161, $p164, $p165, $i166, $i167, $p168, $p169, $i170, $p171, $i172, $i173, $p174, $i175, $i176, $p63, $i64, $p179, $i180, $i181, $p183, $i184, $i185, $i186, $i187, $p189, $i190, $i191, $i192, $i193, $i194, $p196, $i197, $i198, $i199, $i200, $i201, $p202, $p203, $i204, $p205, $i206, $i207, $p208, $p209, $p210, $p211, $p212, $i213, $i215, $p216, $i217, $i218, $i219, $i220, $p221, $i224, $i225, $p226, $p222, $p223, $i227, $i228, $i214, $i229, $p230, $p231, $p232, $p233, $p234, $p235, $p236, $p238, $i239, $i240, $p241, $i242, $p243, $i244, $i245, $p246, $p247, $p248, $i249, $i250, $p253, $i254, $i255, $i256, $p258, $i259, $i260, $i261, $i262, $p264, $i265, $i266, $i267, $i268, $p270, $i271, $i272, $i273, $p274, $p275, $p276, $p277, $p278, $p279, $p280, $p281, $p282, $p285, $i286, $i287, $i288, $i289, $i290, $i291, $i292, $i293, $i294, $i295, $i296, $i297, $p298, $p299, $p300, $i301, $p303, $i304, $i305, $i306, $p307, $p309, $i310, $i311, $i312, $i313, $p315, $i316, $i317, $i318, $p320, $i321, $i322, $i323, $i324, $i325, $p327, $i328, $i329, $i330, $i331, $i332, $p333, $p334, $i335, $p336, $p338, $i339, $i340, $i341, $i342, $p343, $p345, $i346, $i347, $i348, $i349, $p350, $p352, $i353, $i354, $i355, $i356, $p357, $p359, $i360, $i361, $i362, $i363, $p364, $p366, $i367, $i368, $i369, $p370, $p372, $i373, $i374, $i375, $i376, $i377, $i378, $p379, $i380, $i381, $p382, $p177, $i178, $p139, $i140, $i796, $i797, $i798, $p799, $p802, $i803, $i804, $i805, $i806, $p807, $p800, $p801, $i808, $i809, $i810, $i811, $i812, $p813, $p816, $i817, $i818, $i819, $i820, $p821, $p814, $p815, $i822, $i823, $i824, $i825, $i826, $p827, $p830, $i831, $i832, $i833, $i834, $p835, $p828, $p829, $i836, $i837, $i838, $i839, $i840, $p841, $p844, $i845, $i846, $i847, $i848, $p849, $p842, $p843, $i850, $i851, $i852, $i853, $i854, $p855, $p858, $i859, $i860, $i861, $i862, $p863, $p856, $p857, $i864, $i865, $i866, $i867, $i868, $p869, $p872, $i873, $i874, $i875, $i876, $p877, $p870, $p871, $i878, $i879, $i880, $i881, $i882, $p883, $p886, $i887, $i888, $i889, $i890, $p891, $p884, $p885, $i892, $i893, $i894, $i895, $i896, $p897, $p900, $i901, $i902, $i903, $i904, $p905, $p898, $p899, $i906, $i907, $i908, $i909, $i910, $p911, $p914, $i915, $i916, $i917, $i918, $p919, $p912, $p913, $i920, $i921, $i922, $i923, $i924, $p925, $p928, $i929, $i930, $i931, $i932, $p933, $p926, $p927, $i934, $i935, $i936, $i937, $i938, $p939, $p942, $i943, $i944, $i945, $i946, $p947, $p940, $p941, $i948, $i949, $i950, $i951, $i952, $p953, $p956, $i957, $i958, $i959, $i960, $p961, $p954, $p955, $i962, $i963, $i964, $i965, $i966, $p967, $p970, $i971, $i972, $i973, $i974, $p975, $p968, $p969, $i976, $i977, $i978, $i979, $i980, $p981, $p984, $i985, $i986, $i987, $i988, $p989, $p982, $p983, $i990, $i991, $i992, $i993, $i994, $p995, $p998, $i999, $i1000, $i1001, $i1002, $p1003, $p996, $p997, $i1004, $i1005, $i1006, $i1007, $i1008, $p1009, $p1012, $i1013, $i1014, $i1015, $i1016, $p1017, $p1010, $p1011, $i1018, $i1019, $i1020, $i1021, $i1022, $p1023, $p1026, $i1027, $i1028, $i1029, $i1030, $p1031, $p1024, $p1025, $i1032, $i1033, $i1034, $i1035, $i1036, $p1037, $p1040, $i1041, $i1042, $i1043, $i1044, $p1045, $p1038, $p1039, $i1046, $i1047, $i1048, $i1049, $i1050, $p1051, $p1054, $i1055, $i1056, $i1057, $i1058, $p1059, $p1052, $p1053, $i1060, $i1061, $i1062, $i1063, $i1064, $p1065, $p1068, $i1069, $i1070, $i1071, $i1072, $p1073, $p1066, $p1067, $i1074, $i1075, $i1076, $i1077, $i1078, $p1079, $p1082, $i1083, $i1084, $i1085, $i1086, $p1087, $p1080, $p1081, $i1088, $i1089, $i1090, $i1091, $i1092, $p1093, $p1096, $i1097, $i1098, $i1099, $i1100, $p1101, $p1094, $p1095, $i1102, $i1103, $i1104, $i1105, $i1106, $p1107, $p1110, $i1111, $i1112, $i1113, $i1114, $p1115, $p1108, $p1109, $i1116, $i1117, $i1118, $i1119, $i1120, $p1121, $p1124, $i1125, $i1126, $i1127, $i1128, $p1129, $p1122, $p1123, $i1130, $i1131, $i1132, $i1133, $i1134, $p1135, $p1138, $i1139, $i1140, $i1141, $i1142, $p1143, $p1136, $p1137, $i1144, $i1145, $i1146, $i1147, $i1148, $p1149, $p1152, $i1153, $i1154, $i1155, $i1156, $p1157, $p1150, $p1151, $i1158, $i1159, $i1160, $i1161, $i1162, $p1163, $p1166, $i1167, $i1168, $i1169, $i1170, $p1171, $p1164, $p1165, $i1172, $i1173, $i1174, $i1175, $i1176, $p1177, $p1180, $i1181, $i1182, $i1183, $i1184, $p1185, $p1178, $p1179, $i1186, $i1187, $i1188, $i1189, $i1190, $p1191, $p1194, $i1195, $i1196, $i1197, $i1198, $p1199, $p1192, $p1193, $i1200, $i1201, $i1202, $i1204, $i1205, vslice_dummy_var_28, vslice_dummy_var_29 := ftdi_elan_respond_engine_loop_$bb22($p0, $p3, $p58, $i136, $i137, $i138, $i141, $p142, $i143, $i144, $p145, $p146, $p147, $p148, $i149, $p150, $i151, $i152, $p153, $i154, $i155, $p156, $p157, $i158, $i159, $i162, $i163, $i160, $i161, $p164, $p165, $i166, $i167, $p168, $p169, $i170, $p171, $i172, $i173, $p174, $i175, $i176, $p63, $i64, $p179, $i180, $i181, $p183, $i184, $i185, $i186, $i187, $p189, $i190, $i191, $i192, $i193, $i194, $p196, $i197, $i198, $i199, $i200, $i201, $p202, $p203, $i204, $p205, $i206, $i207, $p208, $p209, $p210, $p211, $p212, $i213, $i215, $p216, $i217, $i218, $i219, $i220, $p221, $i224, $i225, $p226, $p222, $p223, $i227, $i228, $i214, $i229, $p230, $p231, $p232, $p233, $p234, $p235, $p236, $p238, $i239, $i240, $p241, $i242, $p243, $i244, $i245, $p246, $p247, $p248, $i249, $i250, $p253, $i254, $i255, $i256, $p258, $i259, $i260, $i261, $i262, $p264, $i265, $i266, $i267, $i268, $p270, $i271, $i272, $i273, $p274, $p275, $p276, $p277, $p278, $p279, $p280, $p281, $p282, $p285, $i286, $i287, $i288, $i289, $i290, $i291, $i292, $i293, $i294, $i295, $i296, $i297, $p298, $p299, $p300, $i301, $p303, $i304, $i305, $i306, $p307, $p309, $i310, $i311, $i312, $i313, $p315, $i316, $i317, $i318, $p320, $i321, $i322, $i323, $i324, $i325, $p327, $i328, $i329, $i330, $i331, $i332, $p333, $p334, $i335, $p336, $p338, $i339, $i340, $i341, $i342, $p343, $p345, $i346, $i347, $i348, $i349, $p350, $p352, $i353, $i354, $i355, $i356, $p357, $p359, $i360, $i361, $i362, $i363, $p364, $p366, $i367, $i368, $i369, $p370, $p372, $i373, $i374, $i375, $i376, $i377, $i378, $p379, $i380, $i381, $p382, $p177, $i178, $p139, $i140, $i796, $i797, $i798, $p799, $p802, $i803, $i804, $i805, $i806, $p807, $p800, $p801, $i808, $i809, $i810, $i811, $i812, $p813, $p816, $i817, $i818, $i819, $i820, $p821, $p814, $p815, $i822, $i823, $i824, $i825, $i826, $p827, $p830, $i831, $i832, $i833, $i834, $p835, $p828, $p829, $i836, $i837, $i838, $i839, $i840, $p841, $p844, $i845, $i846, $i847, $i848, $p849, $p842, $p843, $i850, $i851, $i852, $i853, $i854, $p855, $p858, $i859, $i860, $i861, $i862, $p863, $p856, $p857, $i864, $i865, $i866, $i867, $i868, $p869, $p872, $i873, $i874, $i875, $i876, $p877, $p870, $p871, $i878, $i879, $i880, $i881, $i882, $p883, $p886, $i887, $i888, $i889, $i890, $p891, $p884, $p885, $i892, $i893, $i894, $i895, $i896, $p897, $p900, $i901, $i902, $i903, $i904, $p905, $p898, $p899, $i906, $i907, $i908, $i909, $i910, $p911, $p914, $i915, $i916, $i917, $i918, $p919, $p912, $p913, $i920, $i921, $i922, $i923, $i924, $p925, $p928, $i929, $i930, $i931, $i932, $p933, $p926, $p927, $i934, $i935, $i936, $i937, $i938, $p939, $p942, $i943, $i944, $i945, $i946, $p947, $p940, $p941, $i948, $i949, $i950, $i951, $i952, $p953, $p956, $i957, $i958, $i959, $i960, $p961, $p954, $p955, $i962, $i963, $i964, $i965, $i966, $p967, $p970, $i971, $i972, $i973, $i974, $p975, $p968, $p969, $i976, $i977, $i978, $i979, $i980, $p981, $p984, $i985, $i986, $i987, $i988, $p989, $p982, $p983, $i990, $i991, $i992, $i993, $i994, $p995, $p998, $i999, $i1000, $i1001, $i1002, $p1003, $p996, $p997, $i1004, $i1005, $i1006, $i1007, $i1008, $p1009, $p1012, $i1013, $i1014, $i1015, $i1016, $p1017, $p1010, $p1011, $i1018, $i1019, $i1020, $i1021, $i1022, $p1023, $p1026, $i1027, $i1028, $i1029, $i1030, $p1031, $p1024, $p1025, $i1032, $i1033, $i1034, $i1035, $i1036, $p1037, $p1040, $i1041, $i1042, $i1043, $i1044, $p1045, $p1038, $p1039, $i1046, $i1047, $i1048, $i1049, $i1050, $p1051, $p1054, $i1055, $i1056, $i1057, $i1058, $p1059, $p1052, $p1053, $i1060, $i1061, $i1062, $i1063, $i1064, $p1065, $p1068, $i1069, $i1070, $i1071, $i1072, $p1073, $p1066, $p1067, $i1074, $i1075, $i1076, $i1077, $i1078, $p1079, $p1082, $i1083, $i1084, $i1085, $i1086, $p1087, $p1080, $p1081, $i1088, $i1089, $i1090, $i1091, $i1092, $p1093, $p1096, $i1097, $i1098, $i1099, $i1100, $p1101, $p1094, $p1095, $i1102, $i1103, $i1104, $i1105, $i1106, $p1107, $p1110, $i1111, $i1112, $i1113, $i1114, $p1115, $p1108, $p1109, $i1116, $i1117, $i1118, $i1119, $i1120, $p1121, $p1124, $i1125, $i1126, $i1127, $i1128, $p1129, $p1122, $p1123, $i1130, $i1131, $i1132, $i1133, $i1134, $p1135, $p1138, $i1139, $i1140, $i1141, $i1142, $p1143, $p1136, $p1137, $i1144, $i1145, $i1146, $i1147, $i1148, $p1149, $p1152, $i1153, $i1154, $i1155, $i1156, $p1157, $p1150, $p1151, $i1158, $i1159, $i1160, $i1161, $i1162, $p1163, $p1166, $i1167, $i1168, $i1169, $i1170, $p1171, $p1164, $p1165, $i1172, $i1173, $i1174, $i1175, $i1176, $p1177, $p1180, $i1181, $i1182, $i1183, $i1184, $p1185, $p1178, $p1179, $i1186, $i1187, $i1188, $i1189, $i1190, $p1191, $p1194, $i1195, $i1196, $i1197, $i1198, $p1199, $p1192, $p1193, $i1200, $i1201, $i1202, $i1204, $i1205, vslice_dummy_var_28, vslice_dummy_var_29);
    goto $bb22_last;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    $i141 := $i64;
    goto $bb62;

  $bb62:
    call $i136, $i137, $i138, $i141, $p142, $i143, $i144, $p145, $p146, $p147, $p148, $i149, $p150, $i151, $i152, $p153, $i154, $i155, $p156, $p157, $i158, $i159, $i162, $i163, $i160, $i161, $p139, $i140 := ftdi_elan_respond_engine_loop_$bb62($p0, $p58, $i136, $i137, $i138, $i141, $p142, $i143, $i144, $p145, $p146, $p147, $p148, $i149, $p150, $i151, $i152, $p153, $i154, $i155, $p156, $p157, $i158, $i159, $i162, $i163, $i160, $i161, $p63, $p139, $i140);
    goto $bb62_last;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7416, 1));
    goto corral_source_split_5484;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    $i143 := $load.i64($M.0, $p142);
    goto corral_source_split_5485;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    $i144 := $add.i64($i143, 1);
    goto corral_source_split_5486;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7416, 1));
    goto corral_source_split_5487;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p145, $i144);
    goto corral_source_split_5488;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7400, 1));
    goto corral_source_split_5489;

  corral_source_split_5489:
    assume {:verifier.code 0} true;
    $p147 := $load.ref($M.0, $p146);
    goto corral_source_split_5490;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7416, 1));
    goto corral_source_split_5491;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    $i149 := $load.i64($M.0, $p148);
    goto corral_source_split_5492;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($p147, $mul.ref($i149, 1));
    goto corral_source_split_5493;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    $i151 := $load.i8($M.0, $p150);
    call {:si_unique_call 1008} {:cexpr "c___0"} boogie_si_record_i8($i151);
    goto corral_source_split_5494;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    $i152 := $add.i32($i141, 1);
    call {:si_unique_call 1009} {:cexpr "bytes_read"} boogie_si_record_i32($i152);
    goto corral_source_split_5495;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7424, 1));
    goto corral_source_split_5496;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    $i154 := $load.i64($M.0, $p153);
    goto corral_source_split_5497;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    $i155 := $sub.i64($i154, 1);
    goto corral_source_split_5498;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7424, 1));
    goto corral_source_split_5499;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p156, $i155);
    goto corral_source_split_5500;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(8476, 1));
    goto corral_source_split_5501;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    $i158 := $load.i32($M.0, $p157);
    goto corral_source_split_5502;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    $i159 := $eq.i32($i158, 0);
    goto corral_source_split_5503;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    $i160, $i161 := $i151, $i152;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    assume !($i159 == 1);
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5509;

  corral_source_split_5509:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($p63, $mul.ref(1, 1));
    goto corral_source_split_5510;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p63, $i160);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(8476, 1));
    goto corral_source_split_5512;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    $i166 := $load.i32($M.0, $p165);
    goto corral_source_split_5513;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    $i167 := $add.i32($i166, 1);
    goto corral_source_split_5514;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(8476, 1));
    goto corral_source_split_5515;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p168, $i167);
    goto corral_source_split_5516;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(8476, 1));
    goto corral_source_split_5517;

  corral_source_split_5517:
    assume {:verifier.code 0} true;
    $i170 := $load.i32($M.0, $p169);
    goto corral_source_split_5518;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(8472, 1));
    goto corral_source_split_5519;

  corral_source_split_5519:
    assume {:verifier.code 0} true;
    $i172 := $load.i32($M.0, $p171);
    goto corral_source_split_5520;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    $i173 := $slt.i32($i170, $i172);
    goto corral_source_split_5521;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i173 == 1);
    goto corral_source_split_5525;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(8480, 1));
    goto corral_source_split_5526;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    $i180 := $load.i32($M.0, $p179);
    goto corral_source_split_5527;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    $i181 := $ne.i32($i180, 0);
    goto corral_source_split_5528;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i181 == 1);
    goto corral_source_split_5567;

  corral_source_split_5567:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(8472, 1));
    goto corral_source_split_5568;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    $i239 := $load.i32($M.0, $p238);
    goto corral_source_split_5569;

  corral_source_split_5569:
    assume {:verifier.code 0} true;
    $i240 := $eq.i32($i239, 8);
    goto corral_source_split_5570;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i240 == 1);
    goto corral_source_split_5666;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    $p303 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7444, 1)), $mul.ref(0, 1));
    goto corral_source_split_5667;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    $i304 := $load.i8($M.0, $p303);
    goto corral_source_split_5668;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    $i305 := $sext.i8.i32($i304);
    goto corral_source_split_5669;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    $i306 := $sge.i32($i305, 0);
    goto corral_source_split_5670;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb104, $bb105;

  $bb105:
    assume !($i306 == 1);
    goto corral_source_split_5702;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    $p309 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7444, 1)), $mul.ref(0, 1));
    goto corral_source_split_5703;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    $i310 := $load.i8($M.0, $p309);
    goto corral_source_split_5704;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    $i311 := $zext.i8.i32($i310);
    goto corral_source_split_5705;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    $i312 := $ashr.i32($i311, 5);
    goto corral_source_split_5706;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    $i313 := $and.i32($i312, 3);
    call {:si_unique_call 1030} {:cexpr "ed_number___0"} boogie_si_record_i32($i313);
    goto corral_source_split_5707;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    $p315 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7444, 1)), $mul.ref(0, 1));
    goto corral_source_split_5708;

  corral_source_split_5708:
    assume {:verifier.code 0} true;
    $i316 := $load.i8($M.0, $p315);
    goto corral_source_split_5709;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    $i317 := $zext.i8.i32($i316);
    goto corral_source_split_5710;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    $i318 := $and.i32($i317, 3);
    call {:si_unique_call 1031} {:cexpr "ed_type"} boogie_si_record_i32($i318);
    goto corral_source_split_5711;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    $p320 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7444, 1)), $mul.ref(2, 1));
    goto corral_source_split_5712;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    $i321 := $load.i8($M.0, $p320);
    goto corral_source_split_5713;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    $i322 := $zext.i8.i32($i321);
    goto corral_source_split_5714;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    $i323 := $shl.i32($i322, 8);
    goto corral_source_split_5715;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    $i324 := $trunc.i32.i16($i323);
    goto corral_source_split_5716;

  corral_source_split_5716:
    assume {:verifier.code 0} true;
    $i325 := $sext.i16.i32($i324);
    goto corral_source_split_5717;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    $p327 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7444, 1)), $mul.ref(1, 1));
    goto corral_source_split_5718;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    $i328 := $load.i8($M.0, $p327);
    goto corral_source_split_5719;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    $i329 := $zext.i8.i16($i328);
    goto corral_source_split_5720;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    $i330 := $sext.i16.i32($i329);
    goto corral_source_split_5721;

  corral_source_split_5721:
    assume {:verifier.code 0} true;
    $i331 := $or.i32($i325, $i330);
    goto corral_source_split_5722;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    $i332 := $trunc.i32.i16($i331);
    call {:si_unique_call 1032} {:cexpr "ed_length___0"} boogie_si_record_i16($i332);
    goto corral_source_split_5723;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    $p333 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(4800, 1));
    goto corral_source_split_5724;

  corral_source_split_5724:
    assume {:verifier.code 0} true;
    $p334 := $bitcast.ref.ref($p333);
    goto corral_source_split_5725;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    $i335 := $sext.i32.i64($i313);
    goto corral_source_split_5726;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    $p336 := $add.ref($p334, $mul.ref($i335, 64));
    goto corral_source_split_5727;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    $p338 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7444, 1)), $mul.ref(0, 1));
    goto corral_source_split_5728;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    $i339 := $load.i8($M.0, $p338);
    goto corral_source_split_5729;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    $i340 := $zext.i8.i32($i339);
    goto corral_source_split_5730;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    $i341 := $ashr.i32($i340, 3);
    goto corral_source_split_5731;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    $i342 := $and.i32($i341, 1);
    goto corral_source_split_5732;

  corral_source_split_5732:
    assume {:verifier.code 0} true;
    $p343 := $add.ref($add.ref($p334, $mul.ref($i335, 64)), $mul.ref(32, 1));
    goto corral_source_split_5733;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p343, $i342);
    goto corral_source_split_5734;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    $p345 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7444, 1)), $mul.ref(0, 1));
    goto corral_source_split_5735;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    $i346 := $load.i8($M.0, $p345);
    goto corral_source_split_5736;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    $i347 := $zext.i8.i32($i346);
    goto corral_source_split_5737;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    $i348 := $ashr.i32($i347, 2);
    goto corral_source_split_5738;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    $i349 := $and.i32($i348, 1);
    goto corral_source_split_5739;

  corral_source_split_5739:
    assume {:verifier.code 0} true;
    $p350 := $add.ref($add.ref($p334, $mul.ref($i335, 64)), $mul.ref(36, 1));
    goto corral_source_split_5740;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p350, $i349);
    goto corral_source_split_5741;

  corral_source_split_5741:
    assume {:verifier.code 0} true;
    $p352 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7444, 1)), $mul.ref(3, 1));
    goto corral_source_split_5742;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    $i353 := $load.i8($M.0, $p352);
    goto corral_source_split_5743;

  corral_source_split_5743:
    assume {:verifier.code 0} true;
    $i354 := $zext.i8.i32($i353);
    goto corral_source_split_5744;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    $i355 := $ashr.i32($i354, 6);
    goto corral_source_split_5745;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    $i356 := $and.i32($i355, 3);
    goto corral_source_split_5746;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    $p357 := $add.ref($add.ref($p334, $mul.ref($i335, 64)), $mul.ref(16, 1));
    goto corral_source_split_5747;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p357, $i356);
    goto corral_source_split_5748;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    $p359 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7444, 1)), $mul.ref(3, 1));
    goto corral_source_split_5749;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    $i360 := $load.i8($M.0, $p359);
    goto corral_source_split_5750;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    $i361 := $zext.i8.i32($i360);
    goto corral_source_split_5751;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    $i362 := $ashr.i32($i361, 4);
    goto corral_source_split_5752;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    $i363 := $and.i32($i362, 3);
    goto corral_source_split_5753;

  corral_source_split_5753:
    assume {:verifier.code 0} true;
    $p364 := $add.ref($add.ref($p334, $mul.ref($i335, 64)), $mul.ref(20, 1));
    goto corral_source_split_5754;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p364, $i363);
    goto corral_source_split_5755;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    $p366 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7444, 1)), $mul.ref(3, 1));
    goto corral_source_split_5756;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    $i367 := $load.i8($M.0, $p366);
    goto corral_source_split_5757;

  corral_source_split_5757:
    assume {:verifier.code 0} true;
    $i368 := $zext.i8.i32($i367);
    goto corral_source_split_5758;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    $i369 := $and.i32($i368, 15);
    goto corral_source_split_5759;

  corral_source_split_5759:
    assume {:verifier.code 0} true;
    $p370 := $add.ref($add.ref($p334, $mul.ref($i335, 64)), $mul.ref(24, 1));
    goto corral_source_split_5760;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p370, $i369);
    goto corral_source_split_5761;

  corral_source_split_5761:
    assume {:verifier.code 0} true;
    $p372 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7444, 1)), $mul.ref(0, 1));
    goto corral_source_split_5762;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    $i373 := $load.i8($M.0, $p372);
    goto corral_source_split_5763;

  corral_source_split_5763:
    assume {:verifier.code 0} true;
    $i374 := $zext.i8.i32($i373);
    goto corral_source_split_5764;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    $i375 := $and.i32($i374, 16);
    goto corral_source_split_5765;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    $i376 := $eq.i32($i375, 0);
    goto corral_source_split_5766;

  corral_source_split_5766:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  $bb107:
    assume !($i376 == 1);
    goto corral_source_split_5773;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    $i380 := $zext.i16.i32($i332);
    goto corral_source_split_5774;

  corral_source_split_5774:
    assume {:verifier.code 0} true;
    $i381 := $trunc.i32.i16($i380);
    goto corral_source_split_5775;

  corral_source_split_5775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1034} $p382 := have_ed_get_response($p0, $p336, $i381, $i313, $i318, $p164);
    goto SeqInstr_700, SeqInstr_701;

  SeqInstr_701:
    assume assertsPassed;
    goto SeqInstr_702;

  SeqInstr_702:
    goto corral_source_split_5776;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    $p174 := $p382;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto corral_source_split_5530;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    $i175 := $load.i64($M.0, $p58);
    goto corral_source_split_5531;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    $i176 := $ne.i64($i175, 0);
    goto corral_source_split_5532;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    $p177, $i178 := $p174, $i161;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i176 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5534;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    $p61, $i62 := $p177, $i178;
    goto $bb21;

  $bb71:
    assume $i176 == 1;
    assume {:verifier.code 0} true;
    $p63, $i64 := $p174, $i161;
    goto $bb71_dummy;

  SeqInstr_700:
    assume !assertsPassed;
    return;

  $bb106:
    assume $i376 == 1;
    goto corral_source_split_5768;

  corral_source_split_5768:
    assume {:verifier.code 0} true;
    $i377 := $zext.i16.i32($i332);
    goto corral_source_split_5769;

  corral_source_split_5769:
    assume {:verifier.code 0} true;
    $i378 := $trunc.i32.i16($i377);
    goto corral_source_split_5770;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1033} $p379 := have_ed_set_response($p0, $p336, $i378, $i313, $i318, $p164);
    goto SeqInstr_697, SeqInstr_698;

  SeqInstr_698:
    assume assertsPassed;
    goto SeqInstr_699;

  SeqInstr_699:
    goto corral_source_split_5771;

  corral_source_split_5771:
    assume {:verifier.code 0} true;
    $p174 := $p379;
    goto $bb70;

  SeqInstr_697:
    assume !assertsPassed;
    return;

  $bb104:
    assume $i306 == 1;
    goto corral_source_split_5698;

  corral_source_split_5698:
    assume {:verifier.code 0} true;
    $p307 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(8472, 1));
    goto corral_source_split_5699;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p307, 8);
    goto corral_source_split_5700;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    $p174 := $p164;
    goto $bb70;

  $bb90:
    assume $i240 == 1;
    goto corral_source_split_5611;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(956, 1));
    goto corral_source_split_5612;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    $i242 := $load.i32($M.0, $p241);
    call {:si_unique_call 1019} {:cexpr "tmp___18"} boogie_si_record_i32($i242);
    goto corral_source_split_5613;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(956, 1));
    goto corral_source_split_5614;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    $i244 := $load.i32($M.0, $p243);
    goto corral_source_split_5615;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    $i245 := $add.i32($i244, 1);
    goto corral_source_split_5616;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    $p246 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(956, 1));
    goto corral_source_split_5617;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p246, $i245);
    goto corral_source_split_5618;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(960, 1));
    goto corral_source_split_5619;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    $p248 := $bitcast.ref.ref($p247);
    goto corral_source_split_5620;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    $i249 := $sext.i32.i64($i242);
    goto corral_source_split_5621;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    $i250 := $and.i64($i249, 31);
    goto corral_source_split_5622;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    goto corral_source_split_5623;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7444, 1)), $mul.ref(7, 1));
    goto corral_source_split_5624;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    $i254 := $load.i8($M.0, $p253);
    goto corral_source_split_5625;

  corral_source_split_5625:
    assume {:verifier.code 0} true;
    $i255 := $zext.i8.i32($i254);
    call {:si_unique_call 1020} {:cexpr "data"} boogie_si_record_i32($i255);
    goto corral_source_split_5626;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    $i256 := $shl.i32($i255, 8);
    call {:si_unique_call 1021} {:cexpr "data"} boogie_si_record_i32($i256);
    goto corral_source_split_5627;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    $p258 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7444, 1)), $mul.ref(6, 1));
    goto corral_source_split_5628;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    $i259 := $load.i8($M.0, $p258);
    goto corral_source_split_5629;

  corral_source_split_5629:
    assume {:verifier.code 0} true;
    $i260 := $zext.i8.i32($i259);
    goto corral_source_split_5630;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    $i261 := $or.i32($i260, $i256);
    call {:si_unique_call 1022} {:cexpr "data"} boogie_si_record_i32($i261);
    goto corral_source_split_5631;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    $i262 := $shl.i32($i261, 8);
    call {:si_unique_call 1023} {:cexpr "data"} boogie_si_record_i32($i262);
    goto corral_source_split_5632;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    $p264 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7444, 1)), $mul.ref(5, 1));
    goto corral_source_split_5633;

  corral_source_split_5633:
    assume {:verifier.code 0} true;
    $i265 := $load.i8($M.0, $p264);
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    $i266 := $zext.i8.i32($i265);
    goto corral_source_split_5635;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    $i267 := $or.i32($i266, $i262);
    call {:si_unique_call 1024} {:cexpr "data"} boogie_si_record_i32($i267);
    goto corral_source_split_5636;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    $i268 := $shl.i32($i267, 8);
    call {:si_unique_call 1025} {:cexpr "data"} boogie_si_record_i32($i268);
    goto corral_source_split_5637;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    $p270 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7444, 1)), $mul.ref(4, 1));
    goto corral_source_split_5638;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    $i271 := $load.i8($M.0, $p270);
    goto corral_source_split_5639;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    $i272 := $zext.i8.i32($i271);
    goto corral_source_split_5640;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    $i273 := $or.i32($i272, $i268);
    call {:si_unique_call 1026} {:cexpr "data"} boogie_si_record_i32($i273);
    goto corral_source_split_5641;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    $p274 := $add.ref($add.ref($p248, $mul.ref($i250, 120)), $mul.ref(8, 1));
    goto corral_source_split_5642;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    $p275 := $load.ref($M.0, $p274);
    goto corral_source_split_5643;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p275, $i273);
    goto corral_source_split_5644;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    $p276 := $add.ref($add.ref($p248, $mul.ref($i250, 120)), $mul.ref(16, 1));
    goto corral_source_split_5645;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    $p277 := $load.ref($M.0, $p276);
    goto corral_source_split_5646;

  corral_source_split_5646:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p277, 0);
    goto corral_source_split_5647;

  corral_source_split_5647:
    assume {:verifier.code 0} true;
    $p278 := $add.ref($add.ref($p248, $mul.ref($i250, 120)), $mul.ref(24, 1));
    goto corral_source_split_5648;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1027} complete_($p278);
    goto corral_source_split_5649;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    $p279 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(8476, 1));
    goto corral_source_split_5650;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p279, 0);
    goto corral_source_split_5651;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    $p280 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(8472, 1));
    goto corral_source_split_5652;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p280, 4);
    goto corral_source_split_5653;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    $p281 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(8480, 1));
    goto corral_source_split_5654;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p281, 0);
    goto corral_source_split_5655;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7444, 1));
    goto corral_source_split_5656;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    goto corral_source_split_5657;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7444, 1)), $mul.ref(0, 1));
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    $i286 := $load.i8($M.0, $p285);
    goto corral_source_split_5659;

  corral_source_split_5659:
    assume {:verifier.code 0} true;
    $i287 := $zext.i8.i32($i286);
    goto corral_source_split_5660;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    $i288 := $and.i32($i287, 15);
    goto corral_source_split_5661;

  corral_source_split_5661:
    assume {:verifier.code 0} true;
    $i289 := $trunc.i32.i8($i288);
    call {:si_unique_call 1028} {:cexpr "buscmd"} boogie_si_record_i8($i289);
    goto corral_source_split_5662;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    $i290 := $zext.i8.i32($i289);
    goto corral_source_split_5663;

  corral_source_split_5663:
    assume {:verifier.code 0} true;
    $i291 := $eq.i32($i290, 0);
    goto corral_source_split_5664;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i291 == 1);
    goto corral_source_split_5674;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    $i292 := $zext.i8.i32($i289);
    goto corral_source_split_5675;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    $i293 := $eq.i32($i292, 2);
    goto corral_source_split_5676;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i293 == 1);
    goto corral_source_split_5680;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    $i294 := $zext.i8.i32($i289);
    goto corral_source_split_5681;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    $i295 := $eq.i32($i294, 6);
    goto corral_source_split_5682;

  corral_source_split_5682:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  $bb99:
    assume !($i295 == 1);
    goto corral_source_split_5686;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    $i296 := $zext.i8.i32($i289);
    goto corral_source_split_5687;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    $i297 := $eq.i32($i296, 10);
    goto corral_source_split_5688;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i297 == 1);
    goto corral_source_split_5692;

  corral_source_split_5692:
    assume {:verifier.code 0} true;
    $p298 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_5693;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    $p299 := $load.ref($M.0, $p298);
    goto corral_source_split_5694;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    $p300 := $add.ref($add.ref($p299, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_5695;

  corral_source_split_5695:
    assume {:verifier.code 0} true;
    $i301 := $zext.i8.i32($i289);
    goto corral_source_split_5696;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1029} dev_err.ref.ref.i32.i32($p300, .str.10, $i301, $i273);
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    $p174 := $p282;
    goto $bb70;

  $bb101:
    assume $i297 == 1;
    goto corral_source_split_5690;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb98:
    assume $i295 == 1;
    goto corral_source_split_5684;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb95:
    assume $i293 == 1;
    goto corral_source_split_5678;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb92:
    assume $i291 == 1;
    goto corral_source_split_5672;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb73:
    assume $i181 == 1;
    goto corral_source_split_5536;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7444, 1)), $mul.ref(0, 1));
    goto corral_source_split_5537;

  corral_source_split_5537:
    assume {:verifier.code 0} true;
    $i184 := $load.i8($M.0, $p183);
    goto corral_source_split_5538;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    $i185 := $zext.i8.i32($i184);
    goto corral_source_split_5539;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    $i186 := $ashr.i32($i185, 5);
    goto corral_source_split_5540;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    $i187 := $and.i32($i186, 3);
    call {:si_unique_call 1010} {:cexpr "ed_number"} boogie_si_record_i32($i187);
    goto corral_source_split_5541;

  corral_source_split_5541:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7444, 1)), $mul.ref(2, 1));
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    $i190 := $load.i8($M.0, $p189);
    goto corral_source_split_5543;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    $i191 := $zext.i8.i32($i190);
    goto corral_source_split_5544;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    $i192 := $shl.i32($i191, 8);
    goto corral_source_split_5545;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    $i193 := $trunc.i32.i16($i192);
    goto corral_source_split_5546;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    $i194 := $sext.i16.i32($i193);
    goto corral_source_split_5547;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7444, 1)), $mul.ref(1, 1));
    goto corral_source_split_5548;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    $i197 := $load.i8($M.0, $p196);
    goto corral_source_split_5549;

  corral_source_split_5549:
    assume {:verifier.code 0} true;
    $i198 := $zext.i8.i16($i197);
    goto corral_source_split_5550;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    $i199 := $sext.i16.i32($i198);
    goto corral_source_split_5551;

  corral_source_split_5551:
    assume {:verifier.code 0} true;
    $i200 := $or.i32($i194, $i199);
    goto corral_source_split_5552;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    $i201 := $trunc.i32.i16($i200);
    call {:si_unique_call 1011} {:cexpr "ed_length"} boogie_si_record_i16($i201);
    goto corral_source_split_5553;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(4800, 1));
    goto corral_source_split_5554;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    $p203 := $bitcast.ref.ref($p202);
    goto corral_source_split_5555;

  corral_source_split_5555:
    assume {:verifier.code 0} true;
    $i204 := $sext.i32.i64($i187);
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($p203, $mul.ref($i204, 64));
    goto corral_source_split_5557;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    $i206 := $zext.i16.i32($i201);
    goto corral_source_split_5558;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    $i207 := $and.i32($i206, 2047);
    call {:si_unique_call 1012} {:cexpr "payload"} boogie_si_record_i32($i207);
    goto corral_source_split_5559;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    $p208 := $bitcast.ref.ref($p3);
    goto corral_source_split_5560;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7444, 1));
    goto corral_source_split_5561;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    $p210 := $bitcast.ref.ref($p209);
    goto corral_source_split_5562;

  corral_source_split_5562:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($p210, $mul.ref(4, 1));
    goto corral_source_split_5563;

  corral_source_split_5563:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($p3, $mul.ref(0, 94)), $mul.ref(0, 1));
    goto corral_source_split_5564;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    $M.24 := $store.i8($M.24, $p212, 0);
    goto corral_source_split_5565;

  corral_source_split_5565:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $i214 := $sub.i32($i207, 1);
    call {:si_unique_call 1013} {:cexpr "m___0"} boogie_si_record_i32($i214);
    goto corral_source_split_5572;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    $i229 := $sgt.i32($i207, 0);
    goto corral_source_split_5573;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    assume !($i229 == 1);
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7444, 1));
    goto corral_source_split_5598;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    $p231 := $bitcast.ref.ref($p230);
    goto corral_source_split_5599;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($p231, $mul.ref(4, 1));
    goto corral_source_split_5600;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1018} ftdi_elan_do_callback($p0, $p205, $p232, $i207);
    goto corral_source_split_5601;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(8476, 1));
    goto corral_source_split_5602;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p233, 0);
    goto corral_source_split_5603;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(8472, 1));
    goto corral_source_split_5604;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p234, 4);
    goto corral_source_split_5605;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(8480, 1));
    goto corral_source_split_5606;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p235, 0);
    goto corral_source_split_5607;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7444, 1));
    goto corral_source_split_5608;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    goto corral_source_split_5609;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    $p174 := $p236;
    goto $bb70;

  $bb86:
    assume $i229 == 1;
    goto corral_source_split_5596;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb77, $bb79;

  $bb79:
    assume !(1 == 1);
    goto corral_source_split_5583;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    $i213 := $eq.i32($i214, 0);
    goto corral_source_split_5584;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i213 == 1);
    goto corral_source_split_5586;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1016} $i224 := sprintf.ref.ref($p208, .str.5);
    call {:si_unique_call 1017} {:cexpr "tmp___15"} boogie_si_record_i32($i224);
    goto corral_source_split_5587;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    $i225 := $sext.i32.i64($i224);
    goto corral_source_split_5588;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($p208, $mul.ref($i225, 1));
    assume {:verifier.code 0} true;
    $p222, $p223 := $p226, $p211;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5590;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    $i227 := $sub.i32($i214, 1);
    goto corral_source_split_5591;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    $i228 := $sgt.i32($i214, 0);
    goto corral_source_split_5592;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    assume !($i228 == 1);
    goto $bb85;

  $bb83:
    assume $i228 == 1;
    goto corral_source_split_5594;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    goto $bb377;

  $bb377:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb378, $bb380;

  $bb380:
    assume !(1 == 1);
    goto corral_source_split_6376;

  corral_source_split_6376:
    assume {:verifier.code 0} true;
    $i796 := $eq.i32($i227, 0);
    goto corral_source_split_6377;

  corral_source_split_6377:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb381, $bb382;

  $bb382:
    assume !($i796 == 1);
    goto corral_source_split_6379;

  corral_source_split_6379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1096} $i797 := sprintf.ref.ref($p222, .str.5);
    goto corral_source_split_6380;

  corral_source_split_6380:
    assume {:verifier.code 0} true;
    $i798 := $sext.i32.i64($i797);
    goto corral_source_split_6381;

  corral_source_split_6381:
    assume {:verifier.code 0} true;
    $p799 := $add.ref($p222, $mul.ref($i798, 1));
    assume {:verifier.code 0} true;
    $p800, $p801 := $p799, $p223;
    goto $bb383;

  $bb383:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6383;

  corral_source_split_6383:
    assume {:verifier.code 0} true;
    $i808 := $sub.i32($i227, 1);
    goto corral_source_split_6384;

  corral_source_split_6384:
    assume {:verifier.code 0} true;
    $i809 := $sgt.i32($i227, 0);
    goto corral_source_split_6385;

  corral_source_split_6385:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb384, $bb385;

  $bb385:
    assume {:verifier.code 0} true;
    assume !($i809 == 1);
    goto $bb85;

  $bb384:
    assume $i809 == 1;
    goto corral_source_split_6387;

  corral_source_split_6387:
    assume {:verifier.code 0} true;
    goto $bb386;

  $bb386:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb387, $bb389;

  $bb389:
    assume !(1 == 1);
    goto corral_source_split_6396;

  corral_source_split_6396:
    assume {:verifier.code 0} true;
    $i810 := $eq.i32($i808, 0);
    goto corral_source_split_6397;

  corral_source_split_6397:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb390, $bb391;

  $bb391:
    assume !($i810 == 1);
    goto corral_source_split_6399;

  corral_source_split_6399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1098} $i811 := sprintf.ref.ref($p800, .str.5);
    goto corral_source_split_6400;

  corral_source_split_6400:
    assume {:verifier.code 0} true;
    $i812 := $sext.i32.i64($i811);
    goto corral_source_split_6401;

  corral_source_split_6401:
    assume {:verifier.code 0} true;
    $p813 := $add.ref($p800, $mul.ref($i812, 1));
    assume {:verifier.code 0} true;
    $p814, $p815 := $p813, $p801;
    goto $bb392;

  $bb392:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6403;

  corral_source_split_6403:
    assume {:verifier.code 0} true;
    $i822 := $sub.i32($i808, 1);
    goto corral_source_split_6404;

  corral_source_split_6404:
    assume {:verifier.code 0} true;
    $i823 := $sgt.i32($i808, 0);
    goto corral_source_split_6405;

  corral_source_split_6405:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb393, $bb394;

  $bb394:
    assume {:verifier.code 0} true;
    assume !($i823 == 1);
    goto $bb85;

  $bb393:
    assume $i823 == 1;
    goto corral_source_split_6407;

  corral_source_split_6407:
    assume {:verifier.code 0} true;
    goto $bb395;

  $bb395:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb396, $bb398;

  $bb398:
    assume !(1 == 1);
    goto corral_source_split_6416;

  corral_source_split_6416:
    assume {:verifier.code 0} true;
    $i824 := $eq.i32($i822, 0);
    goto corral_source_split_6417;

  corral_source_split_6417:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb399, $bb400;

  $bb400:
    assume !($i824 == 1);
    goto corral_source_split_6419;

  corral_source_split_6419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1100} $i825 := sprintf.ref.ref($p814, .str.5);
    goto corral_source_split_6420;

  corral_source_split_6420:
    assume {:verifier.code 0} true;
    $i826 := $sext.i32.i64($i825);
    goto corral_source_split_6421;

  corral_source_split_6421:
    assume {:verifier.code 0} true;
    $p827 := $add.ref($p814, $mul.ref($i826, 1));
    assume {:verifier.code 0} true;
    $p828, $p829 := $p827, $p815;
    goto $bb401;

  $bb401:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6423;

  corral_source_split_6423:
    assume {:verifier.code 0} true;
    $i836 := $sub.i32($i822, 1);
    goto corral_source_split_6424;

  corral_source_split_6424:
    assume {:verifier.code 0} true;
    $i837 := $sgt.i32($i822, 0);
    goto corral_source_split_6425;

  corral_source_split_6425:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb402, $bb403;

  $bb403:
    assume {:verifier.code 0} true;
    assume !($i837 == 1);
    goto $bb85;

  $bb402:
    assume $i837 == 1;
    goto corral_source_split_6427;

  corral_source_split_6427:
    assume {:verifier.code 0} true;
    goto $bb404;

  $bb404:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb405, $bb407;

  $bb407:
    assume !(1 == 1);
    goto corral_source_split_6436;

  corral_source_split_6436:
    assume {:verifier.code 0} true;
    $i838 := $eq.i32($i836, 0);
    goto corral_source_split_6437;

  corral_source_split_6437:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb408, $bb409;

  $bb409:
    assume !($i838 == 1);
    goto corral_source_split_6439;

  corral_source_split_6439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1102} $i839 := sprintf.ref.ref($p828, .str.5);
    goto corral_source_split_6440;

  corral_source_split_6440:
    assume {:verifier.code 0} true;
    $i840 := $sext.i32.i64($i839);
    goto corral_source_split_6441;

  corral_source_split_6441:
    assume {:verifier.code 0} true;
    $p841 := $add.ref($p828, $mul.ref($i840, 1));
    assume {:verifier.code 0} true;
    $p842, $p843 := $p841, $p829;
    goto $bb410;

  $bb410:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6443;

  corral_source_split_6443:
    assume {:verifier.code 0} true;
    $i850 := $sub.i32($i836, 1);
    goto corral_source_split_6444;

  corral_source_split_6444:
    assume {:verifier.code 0} true;
    $i851 := $sgt.i32($i836, 0);
    goto corral_source_split_6445;

  corral_source_split_6445:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb411, $bb412;

  $bb412:
    assume {:verifier.code 0} true;
    assume !($i851 == 1);
    goto $bb85;

  $bb411:
    assume $i851 == 1;
    goto corral_source_split_6447;

  corral_source_split_6447:
    assume {:verifier.code 0} true;
    goto $bb413;

  $bb413:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb414, $bb416;

  $bb416:
    assume !(1 == 1);
    goto corral_source_split_6456;

  corral_source_split_6456:
    assume {:verifier.code 0} true;
    $i852 := $eq.i32($i850, 0);
    goto corral_source_split_6457;

  corral_source_split_6457:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb417, $bb418;

  $bb418:
    assume !($i852 == 1);
    goto corral_source_split_6459;

  corral_source_split_6459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1104} $i853 := sprintf.ref.ref($p842, .str.5);
    goto corral_source_split_6460;

  corral_source_split_6460:
    assume {:verifier.code 0} true;
    $i854 := $sext.i32.i64($i853);
    goto corral_source_split_6461;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    $p855 := $add.ref($p842, $mul.ref($i854, 1));
    assume {:verifier.code 0} true;
    $p856, $p857 := $p855, $p843;
    goto $bb419;

  $bb419:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6463;

  corral_source_split_6463:
    assume {:verifier.code 0} true;
    $i864 := $sub.i32($i850, 1);
    goto corral_source_split_6464;

  corral_source_split_6464:
    assume {:verifier.code 0} true;
    $i865 := $sgt.i32($i850, 0);
    goto corral_source_split_6465;

  corral_source_split_6465:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb420, $bb421;

  $bb421:
    assume {:verifier.code 0} true;
    assume !($i865 == 1);
    goto $bb85;

  $bb420:
    assume $i865 == 1;
    goto corral_source_split_6467;

  corral_source_split_6467:
    assume {:verifier.code 0} true;
    goto $bb422;

  $bb422:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb423, $bb425;

  $bb425:
    assume !(1 == 1);
    goto corral_source_split_6476;

  corral_source_split_6476:
    assume {:verifier.code 0} true;
    $i866 := $eq.i32($i864, 0);
    goto corral_source_split_6477;

  corral_source_split_6477:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb426, $bb427;

  $bb427:
    assume !($i866 == 1);
    goto corral_source_split_6479;

  corral_source_split_6479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1106} $i867 := sprintf.ref.ref($p856, .str.5);
    goto corral_source_split_6480;

  corral_source_split_6480:
    assume {:verifier.code 0} true;
    $i868 := $sext.i32.i64($i867);
    goto corral_source_split_6481;

  corral_source_split_6481:
    assume {:verifier.code 0} true;
    $p869 := $add.ref($p856, $mul.ref($i868, 1));
    assume {:verifier.code 0} true;
    $p870, $p871 := $p869, $p857;
    goto $bb428;

  $bb428:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6483;

  corral_source_split_6483:
    assume {:verifier.code 0} true;
    $i878 := $sub.i32($i864, 1);
    goto corral_source_split_6484;

  corral_source_split_6484:
    assume {:verifier.code 0} true;
    $i879 := $sgt.i32($i864, 0);
    goto corral_source_split_6485;

  corral_source_split_6485:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb429, $bb430;

  $bb430:
    assume {:verifier.code 0} true;
    assume !($i879 == 1);
    goto $bb85;

  $bb429:
    assume $i879 == 1;
    goto corral_source_split_6487;

  corral_source_split_6487:
    assume {:verifier.code 0} true;
    goto $bb431;

  $bb431:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb432, $bb434;

  $bb434:
    assume !(1 == 1);
    goto corral_source_split_6496;

  corral_source_split_6496:
    assume {:verifier.code 0} true;
    $i880 := $eq.i32($i878, 0);
    goto corral_source_split_6497;

  corral_source_split_6497:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb435, $bb436;

  $bb436:
    assume !($i880 == 1);
    goto corral_source_split_6499;

  corral_source_split_6499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1108} $i881 := sprintf.ref.ref($p870, .str.5);
    goto corral_source_split_6500;

  corral_source_split_6500:
    assume {:verifier.code 0} true;
    $i882 := $sext.i32.i64($i881);
    goto corral_source_split_6501;

  corral_source_split_6501:
    assume {:verifier.code 0} true;
    $p883 := $add.ref($p870, $mul.ref($i882, 1));
    assume {:verifier.code 0} true;
    $p884, $p885 := $p883, $p871;
    goto $bb437;

  $bb437:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6503;

  corral_source_split_6503:
    assume {:verifier.code 0} true;
    $i892 := $sub.i32($i878, 1);
    goto corral_source_split_6504;

  corral_source_split_6504:
    assume {:verifier.code 0} true;
    $i893 := $sgt.i32($i878, 0);
    goto corral_source_split_6505;

  corral_source_split_6505:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb438, $bb439;

  $bb439:
    assume {:verifier.code 0} true;
    assume !($i893 == 1);
    goto $bb85;

  $bb438:
    assume $i893 == 1;
    goto corral_source_split_6507;

  corral_source_split_6507:
    assume {:verifier.code 0} true;
    goto $bb440;

  $bb440:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb441, $bb443;

  $bb443:
    assume !(1 == 1);
    goto corral_source_split_6516;

  corral_source_split_6516:
    assume {:verifier.code 0} true;
    $i894 := $eq.i32($i892, 0);
    goto corral_source_split_6517;

  corral_source_split_6517:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb444, $bb445;

  $bb445:
    assume !($i894 == 1);
    goto corral_source_split_6519;

  corral_source_split_6519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1110} $i895 := sprintf.ref.ref($p884, .str.5);
    goto corral_source_split_6520;

  corral_source_split_6520:
    assume {:verifier.code 0} true;
    $i896 := $sext.i32.i64($i895);
    goto corral_source_split_6521;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    $p897 := $add.ref($p884, $mul.ref($i896, 1));
    assume {:verifier.code 0} true;
    $p898, $p899 := $p897, $p885;
    goto $bb446;

  $bb446:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6523;

  corral_source_split_6523:
    assume {:verifier.code 0} true;
    $i906 := $sub.i32($i892, 1);
    goto corral_source_split_6524;

  corral_source_split_6524:
    assume {:verifier.code 0} true;
    $i907 := $sgt.i32($i892, 0);
    goto corral_source_split_6525;

  corral_source_split_6525:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb447, $bb448;

  $bb448:
    assume {:verifier.code 0} true;
    assume !($i907 == 1);
    goto $bb85;

  $bb447:
    assume $i907 == 1;
    goto corral_source_split_6527;

  corral_source_split_6527:
    assume {:verifier.code 0} true;
    goto $bb449;

  $bb449:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb450, $bb452;

  $bb452:
    assume !(1 == 1);
    goto corral_source_split_6536;

  corral_source_split_6536:
    assume {:verifier.code 0} true;
    $i908 := $eq.i32($i906, 0);
    goto corral_source_split_6537;

  corral_source_split_6537:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb453, $bb454;

  $bb454:
    assume !($i908 == 1);
    goto corral_source_split_6539;

  corral_source_split_6539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1112} $i909 := sprintf.ref.ref($p898, .str.5);
    goto corral_source_split_6540;

  corral_source_split_6540:
    assume {:verifier.code 0} true;
    $i910 := $sext.i32.i64($i909);
    goto corral_source_split_6541;

  corral_source_split_6541:
    assume {:verifier.code 0} true;
    $p911 := $add.ref($p898, $mul.ref($i910, 1));
    assume {:verifier.code 0} true;
    $p912, $p913 := $p911, $p899;
    goto $bb455;

  $bb455:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6543;

  corral_source_split_6543:
    assume {:verifier.code 0} true;
    $i920 := $sub.i32($i906, 1);
    goto corral_source_split_6544;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    $i921 := $sgt.i32($i906, 0);
    goto corral_source_split_6545;

  corral_source_split_6545:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb456, $bb457;

  $bb457:
    assume {:verifier.code 0} true;
    assume !($i921 == 1);
    goto $bb85;

  $bb456:
    assume $i921 == 1;
    goto corral_source_split_6547;

  corral_source_split_6547:
    assume {:verifier.code 0} true;
    goto $bb458;

  $bb458:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb459, $bb461;

  $bb461:
    assume !(1 == 1);
    goto corral_source_split_6556;

  corral_source_split_6556:
    assume {:verifier.code 0} true;
    $i922 := $eq.i32($i920, 0);
    goto corral_source_split_6557;

  corral_source_split_6557:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb462, $bb463;

  $bb463:
    assume !($i922 == 1);
    goto corral_source_split_6559;

  corral_source_split_6559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1114} $i923 := sprintf.ref.ref($p912, .str.5);
    goto corral_source_split_6560;

  corral_source_split_6560:
    assume {:verifier.code 0} true;
    $i924 := $sext.i32.i64($i923);
    goto corral_source_split_6561;

  corral_source_split_6561:
    assume {:verifier.code 0} true;
    $p925 := $add.ref($p912, $mul.ref($i924, 1));
    assume {:verifier.code 0} true;
    $p926, $p927 := $p925, $p913;
    goto $bb464;

  $bb464:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6563;

  corral_source_split_6563:
    assume {:verifier.code 0} true;
    $i934 := $sub.i32($i920, 1);
    goto corral_source_split_6564;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    $i935 := $sgt.i32($i920, 0);
    goto corral_source_split_6565;

  corral_source_split_6565:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb465, $bb466;

  $bb466:
    assume {:verifier.code 0} true;
    assume !($i935 == 1);
    goto $bb85;

  $bb465:
    assume $i935 == 1;
    goto corral_source_split_6567;

  corral_source_split_6567:
    assume {:verifier.code 0} true;
    goto $bb467;

  $bb467:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb468, $bb470;

  $bb470:
    assume !(1 == 1);
    goto corral_source_split_6576;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    $i936 := $eq.i32($i934, 0);
    goto corral_source_split_6577;

  corral_source_split_6577:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb471, $bb472;

  $bb472:
    assume !($i936 == 1);
    goto corral_source_split_6579;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1116} $i937 := sprintf.ref.ref($p926, .str.5);
    goto corral_source_split_6580;

  corral_source_split_6580:
    assume {:verifier.code 0} true;
    $i938 := $sext.i32.i64($i937);
    goto corral_source_split_6581;

  corral_source_split_6581:
    assume {:verifier.code 0} true;
    $p939 := $add.ref($p926, $mul.ref($i938, 1));
    assume {:verifier.code 0} true;
    $p940, $p941 := $p939, $p927;
    goto $bb473;

  $bb473:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6583;

  corral_source_split_6583:
    assume {:verifier.code 0} true;
    $i948 := $sub.i32($i934, 1);
    goto corral_source_split_6584;

  corral_source_split_6584:
    assume {:verifier.code 0} true;
    $i949 := $sgt.i32($i934, 0);
    goto corral_source_split_6585;

  corral_source_split_6585:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb474, $bb475;

  $bb475:
    assume {:verifier.code 0} true;
    assume !($i949 == 1);
    goto $bb85;

  $bb474:
    assume $i949 == 1;
    goto corral_source_split_6587;

  corral_source_split_6587:
    assume {:verifier.code 0} true;
    goto $bb476;

  $bb476:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb477, $bb479;

  $bb479:
    assume !(1 == 1);
    goto corral_source_split_6596;

  corral_source_split_6596:
    assume {:verifier.code 0} true;
    $i950 := $eq.i32($i948, 0);
    goto corral_source_split_6597;

  corral_source_split_6597:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb480, $bb481;

  $bb481:
    assume !($i950 == 1);
    goto corral_source_split_6599;

  corral_source_split_6599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1118} $i951 := sprintf.ref.ref($p940, .str.5);
    goto corral_source_split_6600;

  corral_source_split_6600:
    assume {:verifier.code 0} true;
    $i952 := $sext.i32.i64($i951);
    goto corral_source_split_6601;

  corral_source_split_6601:
    assume {:verifier.code 0} true;
    $p953 := $add.ref($p940, $mul.ref($i952, 1));
    assume {:verifier.code 0} true;
    $p954, $p955 := $p953, $p941;
    goto $bb482;

  $bb482:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6603;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    $i962 := $sub.i32($i948, 1);
    goto corral_source_split_6604;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    $i963 := $sgt.i32($i948, 0);
    goto corral_source_split_6605;

  corral_source_split_6605:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb483, $bb484;

  $bb484:
    assume {:verifier.code 0} true;
    assume !($i963 == 1);
    goto $bb85;

  $bb483:
    assume $i963 == 1;
    goto corral_source_split_6607;

  corral_source_split_6607:
    assume {:verifier.code 0} true;
    goto $bb485;

  $bb485:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb486, $bb488;

  $bb488:
    assume !(1 == 1);
    goto corral_source_split_6616;

  corral_source_split_6616:
    assume {:verifier.code 0} true;
    $i964 := $eq.i32($i962, 0);
    goto corral_source_split_6617;

  corral_source_split_6617:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb489, $bb490;

  $bb490:
    assume !($i964 == 1);
    goto corral_source_split_6619;

  corral_source_split_6619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1120} $i965 := sprintf.ref.ref($p954, .str.5);
    goto corral_source_split_6620;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    $i966 := $sext.i32.i64($i965);
    goto corral_source_split_6621;

  corral_source_split_6621:
    assume {:verifier.code 0} true;
    $p967 := $add.ref($p954, $mul.ref($i966, 1));
    assume {:verifier.code 0} true;
    $p968, $p969 := $p967, $p955;
    goto $bb491;

  $bb491:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6623;

  corral_source_split_6623:
    assume {:verifier.code 0} true;
    $i976 := $sub.i32($i962, 1);
    goto corral_source_split_6624;

  corral_source_split_6624:
    assume {:verifier.code 0} true;
    $i977 := $sgt.i32($i962, 0);
    goto corral_source_split_6625;

  corral_source_split_6625:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb492, $bb493;

  $bb493:
    assume {:verifier.code 0} true;
    assume !($i977 == 1);
    goto $bb85;

  $bb492:
    assume $i977 == 1;
    goto corral_source_split_6627;

  corral_source_split_6627:
    assume {:verifier.code 0} true;
    goto $bb494;

  $bb494:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb495, $bb497;

  $bb497:
    assume !(1 == 1);
    goto corral_source_split_6636;

  corral_source_split_6636:
    assume {:verifier.code 0} true;
    $i978 := $eq.i32($i976, 0);
    goto corral_source_split_6637;

  corral_source_split_6637:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb498, $bb499;

  $bb499:
    assume !($i978 == 1);
    goto corral_source_split_6639;

  corral_source_split_6639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1122} $i979 := sprintf.ref.ref($p968, .str.5);
    goto corral_source_split_6640;

  corral_source_split_6640:
    assume {:verifier.code 0} true;
    $i980 := $sext.i32.i64($i979);
    goto corral_source_split_6641;

  corral_source_split_6641:
    assume {:verifier.code 0} true;
    $p981 := $add.ref($p968, $mul.ref($i980, 1));
    assume {:verifier.code 0} true;
    $p982, $p983 := $p981, $p969;
    goto $bb500;

  $bb500:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6643;

  corral_source_split_6643:
    assume {:verifier.code 0} true;
    $i990 := $sub.i32($i976, 1);
    goto corral_source_split_6644;

  corral_source_split_6644:
    assume {:verifier.code 0} true;
    $i991 := $sgt.i32($i976, 0);
    goto corral_source_split_6645;

  corral_source_split_6645:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb501, $bb502;

  $bb502:
    assume {:verifier.code 0} true;
    assume !($i991 == 1);
    goto $bb85;

  $bb501:
    assume $i991 == 1;
    goto corral_source_split_6647;

  corral_source_split_6647:
    assume {:verifier.code 0} true;
    goto $bb503;

  $bb503:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb504, $bb506;

  $bb506:
    assume !(1 == 1);
    goto corral_source_split_6656;

  corral_source_split_6656:
    assume {:verifier.code 0} true;
    $i992 := $eq.i32($i990, 0);
    goto corral_source_split_6657;

  corral_source_split_6657:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb507, $bb508;

  $bb508:
    assume !($i992 == 1);
    goto corral_source_split_6659;

  corral_source_split_6659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1124} $i993 := sprintf.ref.ref($p982, .str.5);
    goto corral_source_split_6660;

  corral_source_split_6660:
    assume {:verifier.code 0} true;
    $i994 := $sext.i32.i64($i993);
    goto corral_source_split_6661;

  corral_source_split_6661:
    assume {:verifier.code 0} true;
    $p995 := $add.ref($p982, $mul.ref($i994, 1));
    assume {:verifier.code 0} true;
    $p996, $p997 := $p995, $p983;
    goto $bb509;

  $bb509:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6663;

  corral_source_split_6663:
    assume {:verifier.code 0} true;
    $i1004 := $sub.i32($i990, 1);
    goto corral_source_split_6664;

  corral_source_split_6664:
    assume {:verifier.code 0} true;
    $i1005 := $sgt.i32($i990, 0);
    goto corral_source_split_6665;

  corral_source_split_6665:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb510, $bb511;

  $bb511:
    assume {:verifier.code 0} true;
    assume !($i1005 == 1);
    goto $bb85;

  $bb510:
    assume $i1005 == 1;
    goto corral_source_split_6667;

  corral_source_split_6667:
    assume {:verifier.code 0} true;
    goto $bb512;

  $bb512:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb513, $bb515;

  $bb515:
    assume !(1 == 1);
    goto corral_source_split_6676;

  corral_source_split_6676:
    assume {:verifier.code 0} true;
    $i1006 := $eq.i32($i1004, 0);
    goto corral_source_split_6677;

  corral_source_split_6677:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb516, $bb517;

  $bb517:
    assume !($i1006 == 1);
    goto corral_source_split_6679;

  corral_source_split_6679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1126} $i1007 := sprintf.ref.ref($p996, .str.5);
    goto corral_source_split_6680;

  corral_source_split_6680:
    assume {:verifier.code 0} true;
    $i1008 := $sext.i32.i64($i1007);
    goto corral_source_split_6681;

  corral_source_split_6681:
    assume {:verifier.code 0} true;
    $p1009 := $add.ref($p996, $mul.ref($i1008, 1));
    assume {:verifier.code 0} true;
    $p1010, $p1011 := $p1009, $p997;
    goto $bb518;

  $bb518:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6683;

  corral_source_split_6683:
    assume {:verifier.code 0} true;
    $i1018 := $sub.i32($i1004, 1);
    goto corral_source_split_6684;

  corral_source_split_6684:
    assume {:verifier.code 0} true;
    $i1019 := $sgt.i32($i1004, 0);
    goto corral_source_split_6685;

  corral_source_split_6685:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb519, $bb520;

  $bb520:
    assume {:verifier.code 0} true;
    assume !($i1019 == 1);
    goto $bb85;

  $bb519:
    assume $i1019 == 1;
    goto corral_source_split_6687;

  corral_source_split_6687:
    assume {:verifier.code 0} true;
    goto $bb521;

  $bb521:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb522, $bb524;

  $bb524:
    assume !(1 == 1);
    goto corral_source_split_6696;

  corral_source_split_6696:
    assume {:verifier.code 0} true;
    $i1020 := $eq.i32($i1018, 0);
    goto corral_source_split_6697;

  corral_source_split_6697:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb525, $bb526;

  $bb526:
    assume !($i1020 == 1);
    goto corral_source_split_6699;

  corral_source_split_6699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1128} $i1021 := sprintf.ref.ref($p1010, .str.5);
    goto corral_source_split_6700;

  corral_source_split_6700:
    assume {:verifier.code 0} true;
    $i1022 := $sext.i32.i64($i1021);
    goto corral_source_split_6701;

  corral_source_split_6701:
    assume {:verifier.code 0} true;
    $p1023 := $add.ref($p1010, $mul.ref($i1022, 1));
    assume {:verifier.code 0} true;
    $p1024, $p1025 := $p1023, $p1011;
    goto $bb527;

  $bb527:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6703;

  corral_source_split_6703:
    assume {:verifier.code 0} true;
    $i1032 := $sub.i32($i1018, 1);
    goto corral_source_split_6704;

  corral_source_split_6704:
    assume {:verifier.code 0} true;
    $i1033 := $sgt.i32($i1018, 0);
    goto corral_source_split_6705;

  corral_source_split_6705:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb528, $bb529;

  $bb529:
    assume {:verifier.code 0} true;
    assume !($i1033 == 1);
    goto $bb85;

  $bb528:
    assume $i1033 == 1;
    goto corral_source_split_6707;

  corral_source_split_6707:
    assume {:verifier.code 0} true;
    goto $bb530;

  $bb530:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb531, $bb533;

  $bb533:
    assume !(1 == 1);
    goto corral_source_split_6716;

  corral_source_split_6716:
    assume {:verifier.code 0} true;
    $i1034 := $eq.i32($i1032, 0);
    goto corral_source_split_6717;

  corral_source_split_6717:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb534, $bb535;

  $bb535:
    assume !($i1034 == 1);
    goto corral_source_split_6719;

  corral_source_split_6719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1130} $i1035 := sprintf.ref.ref($p1024, .str.5);
    goto corral_source_split_6720;

  corral_source_split_6720:
    assume {:verifier.code 0} true;
    $i1036 := $sext.i32.i64($i1035);
    goto corral_source_split_6721;

  corral_source_split_6721:
    assume {:verifier.code 0} true;
    $p1037 := $add.ref($p1024, $mul.ref($i1036, 1));
    assume {:verifier.code 0} true;
    $p1038, $p1039 := $p1037, $p1025;
    goto $bb536;

  $bb536:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6723;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    $i1046 := $sub.i32($i1032, 1);
    goto corral_source_split_6724;

  corral_source_split_6724:
    assume {:verifier.code 0} true;
    $i1047 := $sgt.i32($i1032, 0);
    goto corral_source_split_6725;

  corral_source_split_6725:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb537, $bb538;

  $bb538:
    assume {:verifier.code 0} true;
    assume !($i1047 == 1);
    goto $bb85;

  $bb537:
    assume $i1047 == 1;
    goto corral_source_split_6727;

  corral_source_split_6727:
    assume {:verifier.code 0} true;
    goto $bb539;

  $bb539:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb540, $bb542;

  $bb542:
    assume !(1 == 1);
    goto corral_source_split_6736;

  corral_source_split_6736:
    assume {:verifier.code 0} true;
    $i1048 := $eq.i32($i1046, 0);
    goto corral_source_split_6737;

  corral_source_split_6737:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb543, $bb544;

  $bb544:
    assume !($i1048 == 1);
    goto corral_source_split_6739;

  corral_source_split_6739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1132} $i1049 := sprintf.ref.ref($p1038, .str.5);
    goto corral_source_split_6740;

  corral_source_split_6740:
    assume {:verifier.code 0} true;
    $i1050 := $sext.i32.i64($i1049);
    goto corral_source_split_6741;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    $p1051 := $add.ref($p1038, $mul.ref($i1050, 1));
    assume {:verifier.code 0} true;
    $p1052, $p1053 := $p1051, $p1039;
    goto $bb545;

  $bb545:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6743;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    $i1060 := $sub.i32($i1046, 1);
    goto corral_source_split_6744;

  corral_source_split_6744:
    assume {:verifier.code 0} true;
    $i1061 := $sgt.i32($i1046, 0);
    goto corral_source_split_6745;

  corral_source_split_6745:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb546, $bb547;

  $bb547:
    assume {:verifier.code 0} true;
    assume !($i1061 == 1);
    goto $bb85;

  $bb546:
    assume $i1061 == 1;
    goto corral_source_split_6747;

  corral_source_split_6747:
    assume {:verifier.code 0} true;
    goto $bb548;

  $bb548:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb549, $bb551;

  $bb551:
    assume !(1 == 1);
    goto corral_source_split_6756;

  corral_source_split_6756:
    assume {:verifier.code 0} true;
    $i1062 := $eq.i32($i1060, 0);
    goto corral_source_split_6757;

  corral_source_split_6757:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb552, $bb553;

  $bb553:
    assume !($i1062 == 1);
    goto corral_source_split_6759;

  corral_source_split_6759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1134} $i1063 := sprintf.ref.ref($p1052, .str.5);
    goto corral_source_split_6760;

  corral_source_split_6760:
    assume {:verifier.code 0} true;
    $i1064 := $sext.i32.i64($i1063);
    goto corral_source_split_6761;

  corral_source_split_6761:
    assume {:verifier.code 0} true;
    $p1065 := $add.ref($p1052, $mul.ref($i1064, 1));
    assume {:verifier.code 0} true;
    $p1066, $p1067 := $p1065, $p1053;
    goto $bb554;

  $bb554:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6763;

  corral_source_split_6763:
    assume {:verifier.code 0} true;
    $i1074 := $sub.i32($i1060, 1);
    goto corral_source_split_6764;

  corral_source_split_6764:
    assume {:verifier.code 0} true;
    $i1075 := $sgt.i32($i1060, 0);
    goto corral_source_split_6765;

  corral_source_split_6765:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb555, $bb556;

  $bb556:
    assume {:verifier.code 0} true;
    assume !($i1075 == 1);
    goto $bb85;

  $bb555:
    assume $i1075 == 1;
    goto corral_source_split_6767;

  corral_source_split_6767:
    assume {:verifier.code 0} true;
    goto $bb557;

  $bb557:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb558, $bb560;

  $bb560:
    assume !(1 == 1);
    goto corral_source_split_6776;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    $i1076 := $eq.i32($i1074, 0);
    goto corral_source_split_6777;

  corral_source_split_6777:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb561, $bb562;

  $bb562:
    assume !($i1076 == 1);
    goto corral_source_split_6779;

  corral_source_split_6779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1136} $i1077 := sprintf.ref.ref($p1066, .str.5);
    goto corral_source_split_6780;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    $i1078 := $sext.i32.i64($i1077);
    goto corral_source_split_6781;

  corral_source_split_6781:
    assume {:verifier.code 0} true;
    $p1079 := $add.ref($p1066, $mul.ref($i1078, 1));
    assume {:verifier.code 0} true;
    $p1080, $p1081 := $p1079, $p1067;
    goto $bb563;

  $bb563:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6783;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    $i1088 := $sub.i32($i1074, 1);
    goto corral_source_split_6784;

  corral_source_split_6784:
    assume {:verifier.code 0} true;
    $i1089 := $sgt.i32($i1074, 0);
    goto corral_source_split_6785;

  corral_source_split_6785:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb564, $bb565;

  $bb565:
    assume {:verifier.code 0} true;
    assume !($i1089 == 1);
    goto $bb85;

  $bb564:
    assume $i1089 == 1;
    goto corral_source_split_6787;

  corral_source_split_6787:
    assume {:verifier.code 0} true;
    goto $bb566;

  $bb566:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb567, $bb569;

  $bb569:
    assume !(1 == 1);
    goto corral_source_split_6796;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    $i1090 := $eq.i32($i1088, 0);
    goto corral_source_split_6797;

  corral_source_split_6797:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb570, $bb571;

  $bb571:
    assume !($i1090 == 1);
    goto corral_source_split_6799;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1138} $i1091 := sprintf.ref.ref($p1080, .str.5);
    goto corral_source_split_6800;

  corral_source_split_6800:
    assume {:verifier.code 0} true;
    $i1092 := $sext.i32.i64($i1091);
    goto corral_source_split_6801;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    $p1093 := $add.ref($p1080, $mul.ref($i1092, 1));
    assume {:verifier.code 0} true;
    $p1094, $p1095 := $p1093, $p1081;
    goto $bb572;

  $bb572:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6803;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    $i1102 := $sub.i32($i1088, 1);
    goto corral_source_split_6804;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    $i1103 := $sgt.i32($i1088, 0);
    goto corral_source_split_6805;

  corral_source_split_6805:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb573, $bb574;

  $bb574:
    assume {:verifier.code 0} true;
    assume !($i1103 == 1);
    goto $bb85;

  $bb573:
    assume $i1103 == 1;
    goto corral_source_split_6807;

  corral_source_split_6807:
    assume {:verifier.code 0} true;
    goto $bb575;

  $bb575:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb576, $bb578;

  $bb578:
    assume !(1 == 1);
    goto corral_source_split_6816;

  corral_source_split_6816:
    assume {:verifier.code 0} true;
    $i1104 := $eq.i32($i1102, 0);
    goto corral_source_split_6817;

  corral_source_split_6817:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb579, $bb580;

  $bb580:
    assume !($i1104 == 1);
    goto corral_source_split_6819;

  corral_source_split_6819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1140} $i1105 := sprintf.ref.ref($p1094, .str.5);
    goto corral_source_split_6820;

  corral_source_split_6820:
    assume {:verifier.code 0} true;
    $i1106 := $sext.i32.i64($i1105);
    goto corral_source_split_6821;

  corral_source_split_6821:
    assume {:verifier.code 0} true;
    $p1107 := $add.ref($p1094, $mul.ref($i1106, 1));
    assume {:verifier.code 0} true;
    $p1108, $p1109 := $p1107, $p1095;
    goto $bb581;

  $bb581:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6823;

  corral_source_split_6823:
    assume {:verifier.code 0} true;
    $i1116 := $sub.i32($i1102, 1);
    goto corral_source_split_6824;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    $i1117 := $sgt.i32($i1102, 0);
    goto corral_source_split_6825;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb582, $bb583;

  $bb583:
    assume {:verifier.code 0} true;
    assume !($i1117 == 1);
    goto $bb85;

  $bb582:
    assume $i1117 == 1;
    goto corral_source_split_6827;

  corral_source_split_6827:
    assume {:verifier.code 0} true;
    goto $bb584;

  $bb584:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb585, $bb587;

  $bb587:
    assume !(1 == 1);
    goto corral_source_split_6836;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    $i1118 := $eq.i32($i1116, 0);
    goto corral_source_split_6837;

  corral_source_split_6837:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb588, $bb589;

  $bb589:
    assume !($i1118 == 1);
    goto corral_source_split_6839;

  corral_source_split_6839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1142} $i1119 := sprintf.ref.ref($p1108, .str.5);
    goto corral_source_split_6840;

  corral_source_split_6840:
    assume {:verifier.code 0} true;
    $i1120 := $sext.i32.i64($i1119);
    goto corral_source_split_6841;

  corral_source_split_6841:
    assume {:verifier.code 0} true;
    $p1121 := $add.ref($p1108, $mul.ref($i1120, 1));
    assume {:verifier.code 0} true;
    $p1122, $p1123 := $p1121, $p1109;
    goto $bb590;

  $bb590:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6843;

  corral_source_split_6843:
    assume {:verifier.code 0} true;
    $i1130 := $sub.i32($i1116, 1);
    goto corral_source_split_6844;

  corral_source_split_6844:
    assume {:verifier.code 0} true;
    $i1131 := $sgt.i32($i1116, 0);
    goto corral_source_split_6845;

  corral_source_split_6845:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb591, $bb592;

  $bb592:
    assume {:verifier.code 0} true;
    assume !($i1131 == 1);
    goto $bb85;

  $bb591:
    assume $i1131 == 1;
    goto corral_source_split_6847;

  corral_source_split_6847:
    assume {:verifier.code 0} true;
    goto $bb593;

  $bb593:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb594, $bb596;

  $bb596:
    assume !(1 == 1);
    goto corral_source_split_6856;

  corral_source_split_6856:
    assume {:verifier.code 0} true;
    $i1132 := $eq.i32($i1130, 0);
    goto corral_source_split_6857;

  corral_source_split_6857:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb597, $bb598;

  $bb598:
    assume !($i1132 == 1);
    goto corral_source_split_6859;

  corral_source_split_6859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1144} $i1133 := sprintf.ref.ref($p1122, .str.5);
    goto corral_source_split_6860;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    $i1134 := $sext.i32.i64($i1133);
    goto corral_source_split_6861;

  corral_source_split_6861:
    assume {:verifier.code 0} true;
    $p1135 := $add.ref($p1122, $mul.ref($i1134, 1));
    assume {:verifier.code 0} true;
    $p1136, $p1137 := $p1135, $p1123;
    goto $bb599;

  $bb599:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6863;

  corral_source_split_6863:
    assume {:verifier.code 0} true;
    $i1144 := $sub.i32($i1130, 1);
    goto corral_source_split_6864;

  corral_source_split_6864:
    assume {:verifier.code 0} true;
    $i1145 := $sgt.i32($i1130, 0);
    goto corral_source_split_6865;

  corral_source_split_6865:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb600, $bb601;

  $bb601:
    assume {:verifier.code 0} true;
    assume !($i1145 == 1);
    goto $bb85;

  $bb600:
    assume $i1145 == 1;
    goto corral_source_split_6867;

  corral_source_split_6867:
    assume {:verifier.code 0} true;
    goto $bb602;

  $bb602:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb603, $bb605;

  $bb605:
    assume !(1 == 1);
    goto corral_source_split_6876;

  corral_source_split_6876:
    assume {:verifier.code 0} true;
    $i1146 := $eq.i32($i1144, 0);
    goto corral_source_split_6877;

  corral_source_split_6877:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb606, $bb607;

  $bb607:
    assume !($i1146 == 1);
    goto corral_source_split_6879;

  corral_source_split_6879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1146} $i1147 := sprintf.ref.ref($p1136, .str.5);
    goto corral_source_split_6880;

  corral_source_split_6880:
    assume {:verifier.code 0} true;
    $i1148 := $sext.i32.i64($i1147);
    goto corral_source_split_6881;

  corral_source_split_6881:
    assume {:verifier.code 0} true;
    $p1149 := $add.ref($p1136, $mul.ref($i1148, 1));
    assume {:verifier.code 0} true;
    $p1150, $p1151 := $p1149, $p1137;
    goto $bb608;

  $bb608:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6883;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    $i1158 := $sub.i32($i1144, 1);
    goto corral_source_split_6884;

  corral_source_split_6884:
    assume {:verifier.code 0} true;
    $i1159 := $sgt.i32($i1144, 0);
    goto corral_source_split_6885;

  corral_source_split_6885:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb609, $bb610;

  $bb610:
    assume {:verifier.code 0} true;
    assume !($i1159 == 1);
    goto $bb85;

  $bb609:
    assume $i1159 == 1;
    goto corral_source_split_6887;

  corral_source_split_6887:
    assume {:verifier.code 0} true;
    goto $bb611;

  $bb611:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb612, $bb614;

  $bb614:
    assume !(1 == 1);
    goto corral_source_split_6896;

  corral_source_split_6896:
    assume {:verifier.code 0} true;
    $i1160 := $eq.i32($i1158, 0);
    goto corral_source_split_6897;

  corral_source_split_6897:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb615, $bb616;

  $bb616:
    assume !($i1160 == 1);
    goto corral_source_split_6899;

  corral_source_split_6899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1148} $i1161 := sprintf.ref.ref($p1150, .str.5);
    goto corral_source_split_6900;

  corral_source_split_6900:
    assume {:verifier.code 0} true;
    $i1162 := $sext.i32.i64($i1161);
    goto corral_source_split_6901;

  corral_source_split_6901:
    assume {:verifier.code 0} true;
    $p1163 := $add.ref($p1150, $mul.ref($i1162, 1));
    assume {:verifier.code 0} true;
    $p1164, $p1165 := $p1163, $p1151;
    goto $bb617;

  $bb617:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6903;

  corral_source_split_6903:
    assume {:verifier.code 0} true;
    $i1172 := $sub.i32($i1158, 1);
    goto corral_source_split_6904;

  corral_source_split_6904:
    assume {:verifier.code 0} true;
    $i1173 := $sgt.i32($i1158, 0);
    goto corral_source_split_6905;

  corral_source_split_6905:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb618, $bb619;

  $bb619:
    assume {:verifier.code 0} true;
    assume !($i1173 == 1);
    goto $bb85;

  $bb618:
    assume $i1173 == 1;
    goto corral_source_split_6907;

  corral_source_split_6907:
    assume {:verifier.code 0} true;
    goto $bb620;

  $bb620:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb621, $bb623;

  $bb623:
    assume !(1 == 1);
    goto corral_source_split_6916;

  corral_source_split_6916:
    assume {:verifier.code 0} true;
    $i1174 := $eq.i32($i1172, 0);
    goto corral_source_split_6917;

  corral_source_split_6917:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb624, $bb625;

  $bb625:
    assume !($i1174 == 1);
    goto corral_source_split_6919;

  corral_source_split_6919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1150} $i1175 := sprintf.ref.ref($p1164, .str.5);
    goto corral_source_split_6920;

  corral_source_split_6920:
    assume {:verifier.code 0} true;
    $i1176 := $sext.i32.i64($i1175);
    goto corral_source_split_6921;

  corral_source_split_6921:
    assume {:verifier.code 0} true;
    $p1177 := $add.ref($p1164, $mul.ref($i1176, 1));
    assume {:verifier.code 0} true;
    $p1178, $p1179 := $p1177, $p1165;
    goto $bb626;

  $bb626:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6923;

  corral_source_split_6923:
    assume {:verifier.code 0} true;
    $i1186 := $sub.i32($i1172, 1);
    goto corral_source_split_6924;

  corral_source_split_6924:
    assume {:verifier.code 0} true;
    $i1187 := $sgt.i32($i1172, 0);
    goto corral_source_split_6925;

  corral_source_split_6925:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb627, $bb628;

  $bb628:
    assume {:verifier.code 0} true;
    assume !($i1187 == 1);
    goto $bb85;

  $bb627:
    assume $i1187 == 1;
    goto corral_source_split_6927;

  corral_source_split_6927:
    assume {:verifier.code 0} true;
    goto $bb629;

  $bb629:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb630, $bb632;

  $bb632:
    assume !(1 == 1);
    goto corral_source_split_6936;

  corral_source_split_6936:
    assume {:verifier.code 0} true;
    $i1188 := $eq.i32($i1186, 0);
    goto corral_source_split_6937;

  corral_source_split_6937:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb633, $bb634;

  $bb634:
    assume !($i1188 == 1);
    goto corral_source_split_6939;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1152} $i1189 := sprintf.ref.ref($p1178, .str.5);
    goto corral_source_split_6940;

  corral_source_split_6940:
    assume {:verifier.code 0} true;
    $i1190 := $sext.i32.i64($i1189);
    goto corral_source_split_6941;

  corral_source_split_6941:
    assume {:verifier.code 0} true;
    $p1191 := $add.ref($p1178, $mul.ref($i1190, 1));
    assume {:verifier.code 0} true;
    $p1192, $p1193 := $p1191, $p1179;
    goto $bb635;

  $bb635:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6943;

  corral_source_split_6943:
    assume {:verifier.code 0} true;
    $i1200 := $sub.i32($i1186, 1);
    goto corral_source_split_6944;

  corral_source_split_6944:
    assume {:verifier.code 0} true;
    $i1201 := $sgt.i32($i1186, 0);
    goto corral_source_split_6945;

  corral_source_split_6945:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb636, $bb637;

  $bb637:
    assume {:verifier.code 0} true;
    assume !($i1201 == 1);
    goto $bb85;

  $bb636:
    assume $i1201 == 1;
    goto corral_source_split_6947;

  corral_source_split_6947:
    assume {:verifier.code 0} true;
    goto $bb638;

  $bb638:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb639, $bb641;

  $bb641:
    assume !(0 == 1);
    goto corral_source_split_6953;

  corral_source_split_6953:
    assume {:verifier.code 0} true;
    $i1202 := $eq.i32($i1200, 0);
    goto corral_source_split_6954;

  corral_source_split_6954:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb642, $bb643;

  $bb643:
    assume !($i1202 == 1);
    goto corral_source_split_6956;

  corral_source_split_6956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1154} vslice_dummy_var_29 := sprintf.ref.ref($p1192, .str.5);
    assume {:verifier.code 0} true;
    goto $bb644;

  $bb644:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb642:
    assume {:verifier.code 0} true;
    assume $i1202 == 1;
    goto $bb640;

  $bb640:
    assume {:verifier.code 0} true;
    $i1204 := $load.i8($M.0, $p1193);
    goto corral_source_split_6949;

  corral_source_split_6949:
    assume {:verifier.code 0} true;
    $i1205 := $zext.i8.i32($i1204);
    goto corral_source_split_6950;

  corral_source_split_6950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1153} vslice_dummy_var_28 := sprintf.ref.ref.i32($p1192, .str.4, $i1205);
    goto corral_source_split_6951;

  corral_source_split_6951:
    assume {:verifier.code 0} true;
    goto $bb644;

  $bb639:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb640;

  $bb633:
    assume {:verifier.code 0} true;
    assume $i1188 == 1;
    goto $bb631;

  $bb631:
    assume {:verifier.code 0} true;
    $p1194 := $add.ref($p1179, $mul.ref(1, 1));
    goto corral_source_split_6929;

  corral_source_split_6929:
    assume {:verifier.code 0} true;
    $i1195 := $load.i8($M.0, $p1179);
    goto corral_source_split_6930;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    $i1196 := $zext.i8.i32($i1195);
    goto corral_source_split_6931;

  corral_source_split_6931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1151} $i1197 := sprintf.ref.ref.i32($p1178, .str.4, $i1196);
    goto corral_source_split_6932;

  corral_source_split_6932:
    assume {:verifier.code 0} true;
    $i1198 := $sext.i32.i64($i1197);
    goto corral_source_split_6933;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    $p1199 := $add.ref($p1178, $mul.ref($i1198, 1));
    goto corral_source_split_6934;

  corral_source_split_6934:
    assume {:verifier.code 0} true;
    $p1192, $p1193 := $p1199, $p1194;
    goto $bb635;

  $bb630:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb631;

  $bb624:
    assume {:verifier.code 0} true;
    assume $i1174 == 1;
    goto $bb622;

  $bb622:
    assume {:verifier.code 0} true;
    $p1180 := $add.ref($p1165, $mul.ref(1, 1));
    goto corral_source_split_6909;

  corral_source_split_6909:
    assume {:verifier.code 0} true;
    $i1181 := $load.i8($M.0, $p1165);
    goto corral_source_split_6910;

  corral_source_split_6910:
    assume {:verifier.code 0} true;
    $i1182 := $zext.i8.i32($i1181);
    goto corral_source_split_6911;

  corral_source_split_6911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1149} $i1183 := sprintf.ref.ref.i32($p1164, .str.4, $i1182);
    goto corral_source_split_6912;

  corral_source_split_6912:
    assume {:verifier.code 0} true;
    $i1184 := $sext.i32.i64($i1183);
    goto corral_source_split_6913;

  corral_source_split_6913:
    assume {:verifier.code 0} true;
    $p1185 := $add.ref($p1164, $mul.ref($i1184, 1));
    goto corral_source_split_6914;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    $p1178, $p1179 := $p1185, $p1180;
    goto $bb626;

  $bb621:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb622;

  $bb615:
    assume {:verifier.code 0} true;
    assume $i1160 == 1;
    goto $bb613;

  $bb613:
    assume {:verifier.code 0} true;
    $p1166 := $add.ref($p1151, $mul.ref(1, 1));
    goto corral_source_split_6889;

  corral_source_split_6889:
    assume {:verifier.code 0} true;
    $i1167 := $load.i8($M.0, $p1151);
    goto corral_source_split_6890;

  corral_source_split_6890:
    assume {:verifier.code 0} true;
    $i1168 := $zext.i8.i32($i1167);
    goto corral_source_split_6891;

  corral_source_split_6891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1147} $i1169 := sprintf.ref.ref.i32($p1150, .str.4, $i1168);
    goto corral_source_split_6892;

  corral_source_split_6892:
    assume {:verifier.code 0} true;
    $i1170 := $sext.i32.i64($i1169);
    goto corral_source_split_6893;

  corral_source_split_6893:
    assume {:verifier.code 0} true;
    $p1171 := $add.ref($p1150, $mul.ref($i1170, 1));
    goto corral_source_split_6894;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    $p1164, $p1165 := $p1171, $p1166;
    goto $bb617;

  $bb612:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb613;

  $bb606:
    assume {:verifier.code 0} true;
    assume $i1146 == 1;
    goto $bb604;

  $bb604:
    assume {:verifier.code 0} true;
    $p1152 := $add.ref($p1137, $mul.ref(1, 1));
    goto corral_source_split_6869;

  corral_source_split_6869:
    assume {:verifier.code 0} true;
    $i1153 := $load.i8($M.0, $p1137);
    goto corral_source_split_6870;

  corral_source_split_6870:
    assume {:verifier.code 0} true;
    $i1154 := $zext.i8.i32($i1153);
    goto corral_source_split_6871;

  corral_source_split_6871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1145} $i1155 := sprintf.ref.ref.i32($p1136, .str.4, $i1154);
    goto corral_source_split_6872;

  corral_source_split_6872:
    assume {:verifier.code 0} true;
    $i1156 := $sext.i32.i64($i1155);
    goto corral_source_split_6873;

  corral_source_split_6873:
    assume {:verifier.code 0} true;
    $p1157 := $add.ref($p1136, $mul.ref($i1156, 1));
    goto corral_source_split_6874;

  corral_source_split_6874:
    assume {:verifier.code 0} true;
    $p1150, $p1151 := $p1157, $p1152;
    goto $bb608;

  $bb603:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb604;

  $bb597:
    assume {:verifier.code 0} true;
    assume $i1132 == 1;
    goto $bb595;

  $bb595:
    assume {:verifier.code 0} true;
    $p1138 := $add.ref($p1123, $mul.ref(1, 1));
    goto corral_source_split_6849;

  corral_source_split_6849:
    assume {:verifier.code 0} true;
    $i1139 := $load.i8($M.0, $p1123);
    goto corral_source_split_6850;

  corral_source_split_6850:
    assume {:verifier.code 0} true;
    $i1140 := $zext.i8.i32($i1139);
    goto corral_source_split_6851;

  corral_source_split_6851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1143} $i1141 := sprintf.ref.ref.i32($p1122, .str.4, $i1140);
    goto corral_source_split_6852;

  corral_source_split_6852:
    assume {:verifier.code 0} true;
    $i1142 := $sext.i32.i64($i1141);
    goto corral_source_split_6853;

  corral_source_split_6853:
    assume {:verifier.code 0} true;
    $p1143 := $add.ref($p1122, $mul.ref($i1142, 1));
    goto corral_source_split_6854;

  corral_source_split_6854:
    assume {:verifier.code 0} true;
    $p1136, $p1137 := $p1143, $p1138;
    goto $bb599;

  $bb594:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb595;

  $bb588:
    assume {:verifier.code 0} true;
    assume $i1118 == 1;
    goto $bb586;

  $bb586:
    assume {:verifier.code 0} true;
    $p1124 := $add.ref($p1109, $mul.ref(1, 1));
    goto corral_source_split_6829;

  corral_source_split_6829:
    assume {:verifier.code 0} true;
    $i1125 := $load.i8($M.0, $p1109);
    goto corral_source_split_6830;

  corral_source_split_6830:
    assume {:verifier.code 0} true;
    $i1126 := $zext.i8.i32($i1125);
    goto corral_source_split_6831;

  corral_source_split_6831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1141} $i1127 := sprintf.ref.ref.i32($p1108, .str.4, $i1126);
    goto corral_source_split_6832;

  corral_source_split_6832:
    assume {:verifier.code 0} true;
    $i1128 := $sext.i32.i64($i1127);
    goto corral_source_split_6833;

  corral_source_split_6833:
    assume {:verifier.code 0} true;
    $p1129 := $add.ref($p1108, $mul.ref($i1128, 1));
    goto corral_source_split_6834;

  corral_source_split_6834:
    assume {:verifier.code 0} true;
    $p1122, $p1123 := $p1129, $p1124;
    goto $bb590;

  $bb585:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb586;

  $bb579:
    assume {:verifier.code 0} true;
    assume $i1104 == 1;
    goto $bb577;

  $bb577:
    assume {:verifier.code 0} true;
    $p1110 := $add.ref($p1095, $mul.ref(1, 1));
    goto corral_source_split_6809;

  corral_source_split_6809:
    assume {:verifier.code 0} true;
    $i1111 := $load.i8($M.0, $p1095);
    goto corral_source_split_6810;

  corral_source_split_6810:
    assume {:verifier.code 0} true;
    $i1112 := $zext.i8.i32($i1111);
    goto corral_source_split_6811;

  corral_source_split_6811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1139} $i1113 := sprintf.ref.ref.i32($p1094, .str.4, $i1112);
    goto corral_source_split_6812;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    $i1114 := $sext.i32.i64($i1113);
    goto corral_source_split_6813;

  corral_source_split_6813:
    assume {:verifier.code 0} true;
    $p1115 := $add.ref($p1094, $mul.ref($i1114, 1));
    goto corral_source_split_6814;

  corral_source_split_6814:
    assume {:verifier.code 0} true;
    $p1108, $p1109 := $p1115, $p1110;
    goto $bb581;

  $bb576:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb577;

  $bb570:
    assume {:verifier.code 0} true;
    assume $i1090 == 1;
    goto $bb568;

  $bb568:
    assume {:verifier.code 0} true;
    $p1096 := $add.ref($p1081, $mul.ref(1, 1));
    goto corral_source_split_6789;

  corral_source_split_6789:
    assume {:verifier.code 0} true;
    $i1097 := $load.i8($M.0, $p1081);
    goto corral_source_split_6790;

  corral_source_split_6790:
    assume {:verifier.code 0} true;
    $i1098 := $zext.i8.i32($i1097);
    goto corral_source_split_6791;

  corral_source_split_6791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1137} $i1099 := sprintf.ref.ref.i32($p1080, .str.4, $i1098);
    goto corral_source_split_6792;

  corral_source_split_6792:
    assume {:verifier.code 0} true;
    $i1100 := $sext.i32.i64($i1099);
    goto corral_source_split_6793;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    $p1101 := $add.ref($p1080, $mul.ref($i1100, 1));
    goto corral_source_split_6794;

  corral_source_split_6794:
    assume {:verifier.code 0} true;
    $p1094, $p1095 := $p1101, $p1096;
    goto $bb572;

  $bb567:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb568;

  $bb561:
    assume {:verifier.code 0} true;
    assume $i1076 == 1;
    goto $bb559;

  $bb559:
    assume {:verifier.code 0} true;
    $p1082 := $add.ref($p1067, $mul.ref(1, 1));
    goto corral_source_split_6769;

  corral_source_split_6769:
    assume {:verifier.code 0} true;
    $i1083 := $load.i8($M.0, $p1067);
    goto corral_source_split_6770;

  corral_source_split_6770:
    assume {:verifier.code 0} true;
    $i1084 := $zext.i8.i32($i1083);
    goto corral_source_split_6771;

  corral_source_split_6771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1135} $i1085 := sprintf.ref.ref.i32($p1066, .str.4, $i1084);
    goto corral_source_split_6772;

  corral_source_split_6772:
    assume {:verifier.code 0} true;
    $i1086 := $sext.i32.i64($i1085);
    goto corral_source_split_6773;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    $p1087 := $add.ref($p1066, $mul.ref($i1086, 1));
    goto corral_source_split_6774;

  corral_source_split_6774:
    assume {:verifier.code 0} true;
    $p1080, $p1081 := $p1087, $p1082;
    goto $bb563;

  $bb558:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb559;

  $bb552:
    assume {:verifier.code 0} true;
    assume $i1062 == 1;
    goto $bb550;

  $bb550:
    assume {:verifier.code 0} true;
    $p1068 := $add.ref($p1053, $mul.ref(1, 1));
    goto corral_source_split_6749;

  corral_source_split_6749:
    assume {:verifier.code 0} true;
    $i1069 := $load.i8($M.0, $p1053);
    goto corral_source_split_6750;

  corral_source_split_6750:
    assume {:verifier.code 0} true;
    $i1070 := $zext.i8.i32($i1069);
    goto corral_source_split_6751;

  corral_source_split_6751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1133} $i1071 := sprintf.ref.ref.i32($p1052, .str.4, $i1070);
    goto corral_source_split_6752;

  corral_source_split_6752:
    assume {:verifier.code 0} true;
    $i1072 := $sext.i32.i64($i1071);
    goto corral_source_split_6753;

  corral_source_split_6753:
    assume {:verifier.code 0} true;
    $p1073 := $add.ref($p1052, $mul.ref($i1072, 1));
    goto corral_source_split_6754;

  corral_source_split_6754:
    assume {:verifier.code 0} true;
    $p1066, $p1067 := $p1073, $p1068;
    goto $bb554;

  $bb549:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb550;

  $bb543:
    assume {:verifier.code 0} true;
    assume $i1048 == 1;
    goto $bb541;

  $bb541:
    assume {:verifier.code 0} true;
    $p1054 := $add.ref($p1039, $mul.ref(1, 1));
    goto corral_source_split_6729;

  corral_source_split_6729:
    assume {:verifier.code 0} true;
    $i1055 := $load.i8($M.0, $p1039);
    goto corral_source_split_6730;

  corral_source_split_6730:
    assume {:verifier.code 0} true;
    $i1056 := $zext.i8.i32($i1055);
    goto corral_source_split_6731;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1131} $i1057 := sprintf.ref.ref.i32($p1038, .str.4, $i1056);
    goto corral_source_split_6732;

  corral_source_split_6732:
    assume {:verifier.code 0} true;
    $i1058 := $sext.i32.i64($i1057);
    goto corral_source_split_6733;

  corral_source_split_6733:
    assume {:verifier.code 0} true;
    $p1059 := $add.ref($p1038, $mul.ref($i1058, 1));
    goto corral_source_split_6734;

  corral_source_split_6734:
    assume {:verifier.code 0} true;
    $p1052, $p1053 := $p1059, $p1054;
    goto $bb545;

  $bb540:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb541;

  $bb534:
    assume {:verifier.code 0} true;
    assume $i1034 == 1;
    goto $bb532;

  $bb532:
    assume {:verifier.code 0} true;
    $p1040 := $add.ref($p1025, $mul.ref(1, 1));
    goto corral_source_split_6709;

  corral_source_split_6709:
    assume {:verifier.code 0} true;
    $i1041 := $load.i8($M.0, $p1025);
    goto corral_source_split_6710;

  corral_source_split_6710:
    assume {:verifier.code 0} true;
    $i1042 := $zext.i8.i32($i1041);
    goto corral_source_split_6711;

  corral_source_split_6711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1129} $i1043 := sprintf.ref.ref.i32($p1024, .str.4, $i1042);
    goto corral_source_split_6712;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    $i1044 := $sext.i32.i64($i1043);
    goto corral_source_split_6713;

  corral_source_split_6713:
    assume {:verifier.code 0} true;
    $p1045 := $add.ref($p1024, $mul.ref($i1044, 1));
    goto corral_source_split_6714;

  corral_source_split_6714:
    assume {:verifier.code 0} true;
    $p1038, $p1039 := $p1045, $p1040;
    goto $bb536;

  $bb531:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb532;

  $bb525:
    assume {:verifier.code 0} true;
    assume $i1020 == 1;
    goto $bb523;

  $bb523:
    assume {:verifier.code 0} true;
    $p1026 := $add.ref($p1011, $mul.ref(1, 1));
    goto corral_source_split_6689;

  corral_source_split_6689:
    assume {:verifier.code 0} true;
    $i1027 := $load.i8($M.0, $p1011);
    goto corral_source_split_6690;

  corral_source_split_6690:
    assume {:verifier.code 0} true;
    $i1028 := $zext.i8.i32($i1027);
    goto corral_source_split_6691;

  corral_source_split_6691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1127} $i1029 := sprintf.ref.ref.i32($p1010, .str.4, $i1028);
    goto corral_source_split_6692;

  corral_source_split_6692:
    assume {:verifier.code 0} true;
    $i1030 := $sext.i32.i64($i1029);
    goto corral_source_split_6693;

  corral_source_split_6693:
    assume {:verifier.code 0} true;
    $p1031 := $add.ref($p1010, $mul.ref($i1030, 1));
    goto corral_source_split_6694;

  corral_source_split_6694:
    assume {:verifier.code 0} true;
    $p1024, $p1025 := $p1031, $p1026;
    goto $bb527;

  $bb522:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb523;

  $bb516:
    assume {:verifier.code 0} true;
    assume $i1006 == 1;
    goto $bb514;

  $bb514:
    assume {:verifier.code 0} true;
    $p1012 := $add.ref($p997, $mul.ref(1, 1));
    goto corral_source_split_6669;

  corral_source_split_6669:
    assume {:verifier.code 0} true;
    $i1013 := $load.i8($M.0, $p997);
    goto corral_source_split_6670;

  corral_source_split_6670:
    assume {:verifier.code 0} true;
    $i1014 := $zext.i8.i32($i1013);
    goto corral_source_split_6671;

  corral_source_split_6671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1125} $i1015 := sprintf.ref.ref.i32($p996, .str.4, $i1014);
    goto corral_source_split_6672;

  corral_source_split_6672:
    assume {:verifier.code 0} true;
    $i1016 := $sext.i32.i64($i1015);
    goto corral_source_split_6673;

  corral_source_split_6673:
    assume {:verifier.code 0} true;
    $p1017 := $add.ref($p996, $mul.ref($i1016, 1));
    goto corral_source_split_6674;

  corral_source_split_6674:
    assume {:verifier.code 0} true;
    $p1010, $p1011 := $p1017, $p1012;
    goto $bb518;

  $bb513:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb514;

  $bb507:
    assume {:verifier.code 0} true;
    assume $i992 == 1;
    goto $bb505;

  $bb505:
    assume {:verifier.code 0} true;
    $p998 := $add.ref($p983, $mul.ref(1, 1));
    goto corral_source_split_6649;

  corral_source_split_6649:
    assume {:verifier.code 0} true;
    $i999 := $load.i8($M.0, $p983);
    goto corral_source_split_6650;

  corral_source_split_6650:
    assume {:verifier.code 0} true;
    $i1000 := $zext.i8.i32($i999);
    goto corral_source_split_6651;

  corral_source_split_6651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1123} $i1001 := sprintf.ref.ref.i32($p982, .str.4, $i1000);
    goto corral_source_split_6652;

  corral_source_split_6652:
    assume {:verifier.code 0} true;
    $i1002 := $sext.i32.i64($i1001);
    goto corral_source_split_6653;

  corral_source_split_6653:
    assume {:verifier.code 0} true;
    $p1003 := $add.ref($p982, $mul.ref($i1002, 1));
    goto corral_source_split_6654;

  corral_source_split_6654:
    assume {:verifier.code 0} true;
    $p996, $p997 := $p1003, $p998;
    goto $bb509;

  $bb504:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb505;

  $bb498:
    assume {:verifier.code 0} true;
    assume $i978 == 1;
    goto $bb496;

  $bb496:
    assume {:verifier.code 0} true;
    $p984 := $add.ref($p969, $mul.ref(1, 1));
    goto corral_source_split_6629;

  corral_source_split_6629:
    assume {:verifier.code 0} true;
    $i985 := $load.i8($M.0, $p969);
    goto corral_source_split_6630;

  corral_source_split_6630:
    assume {:verifier.code 0} true;
    $i986 := $zext.i8.i32($i985);
    goto corral_source_split_6631;

  corral_source_split_6631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1121} $i987 := sprintf.ref.ref.i32($p968, .str.4, $i986);
    goto corral_source_split_6632;

  corral_source_split_6632:
    assume {:verifier.code 0} true;
    $i988 := $sext.i32.i64($i987);
    goto corral_source_split_6633;

  corral_source_split_6633:
    assume {:verifier.code 0} true;
    $p989 := $add.ref($p968, $mul.ref($i988, 1));
    goto corral_source_split_6634;

  corral_source_split_6634:
    assume {:verifier.code 0} true;
    $p982, $p983 := $p989, $p984;
    goto $bb500;

  $bb495:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb496;

  $bb489:
    assume {:verifier.code 0} true;
    assume $i964 == 1;
    goto $bb487;

  $bb487:
    assume {:verifier.code 0} true;
    $p970 := $add.ref($p955, $mul.ref(1, 1));
    goto corral_source_split_6609;

  corral_source_split_6609:
    assume {:verifier.code 0} true;
    $i971 := $load.i8($M.0, $p955);
    goto corral_source_split_6610;

  corral_source_split_6610:
    assume {:verifier.code 0} true;
    $i972 := $zext.i8.i32($i971);
    goto corral_source_split_6611;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1119} $i973 := sprintf.ref.ref.i32($p954, .str.4, $i972);
    goto corral_source_split_6612;

  corral_source_split_6612:
    assume {:verifier.code 0} true;
    $i974 := $sext.i32.i64($i973);
    goto corral_source_split_6613;

  corral_source_split_6613:
    assume {:verifier.code 0} true;
    $p975 := $add.ref($p954, $mul.ref($i974, 1));
    goto corral_source_split_6614;

  corral_source_split_6614:
    assume {:verifier.code 0} true;
    $p968, $p969 := $p975, $p970;
    goto $bb491;

  $bb486:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb487;

  $bb480:
    assume {:verifier.code 0} true;
    assume $i950 == 1;
    goto $bb478;

  $bb478:
    assume {:verifier.code 0} true;
    $p956 := $add.ref($p941, $mul.ref(1, 1));
    goto corral_source_split_6589;

  corral_source_split_6589:
    assume {:verifier.code 0} true;
    $i957 := $load.i8($M.0, $p941);
    goto corral_source_split_6590;

  corral_source_split_6590:
    assume {:verifier.code 0} true;
    $i958 := $zext.i8.i32($i957);
    goto corral_source_split_6591;

  corral_source_split_6591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1117} $i959 := sprintf.ref.ref.i32($p940, .str.4, $i958);
    goto corral_source_split_6592;

  corral_source_split_6592:
    assume {:verifier.code 0} true;
    $i960 := $sext.i32.i64($i959);
    goto corral_source_split_6593;

  corral_source_split_6593:
    assume {:verifier.code 0} true;
    $p961 := $add.ref($p940, $mul.ref($i960, 1));
    goto corral_source_split_6594;

  corral_source_split_6594:
    assume {:verifier.code 0} true;
    $p954, $p955 := $p961, $p956;
    goto $bb482;

  $bb477:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb478;

  $bb471:
    assume {:verifier.code 0} true;
    assume $i936 == 1;
    goto $bb469;

  $bb469:
    assume {:verifier.code 0} true;
    $p942 := $add.ref($p927, $mul.ref(1, 1));
    goto corral_source_split_6569;

  corral_source_split_6569:
    assume {:verifier.code 0} true;
    $i943 := $load.i8($M.0, $p927);
    goto corral_source_split_6570;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    $i944 := $zext.i8.i32($i943);
    goto corral_source_split_6571;

  corral_source_split_6571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1115} $i945 := sprintf.ref.ref.i32($p926, .str.4, $i944);
    goto corral_source_split_6572;

  corral_source_split_6572:
    assume {:verifier.code 0} true;
    $i946 := $sext.i32.i64($i945);
    goto corral_source_split_6573;

  corral_source_split_6573:
    assume {:verifier.code 0} true;
    $p947 := $add.ref($p926, $mul.ref($i946, 1));
    goto corral_source_split_6574;

  corral_source_split_6574:
    assume {:verifier.code 0} true;
    $p940, $p941 := $p947, $p942;
    goto $bb473;

  $bb468:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb469;

  $bb462:
    assume {:verifier.code 0} true;
    assume $i922 == 1;
    goto $bb460;

  $bb460:
    assume {:verifier.code 0} true;
    $p928 := $add.ref($p913, $mul.ref(1, 1));
    goto corral_source_split_6549;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    $i929 := $load.i8($M.0, $p913);
    goto corral_source_split_6550;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    $i930 := $zext.i8.i32($i929);
    goto corral_source_split_6551;

  corral_source_split_6551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1113} $i931 := sprintf.ref.ref.i32($p912, .str.4, $i930);
    goto corral_source_split_6552;

  corral_source_split_6552:
    assume {:verifier.code 0} true;
    $i932 := $sext.i32.i64($i931);
    goto corral_source_split_6553;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    $p933 := $add.ref($p912, $mul.ref($i932, 1));
    goto corral_source_split_6554;

  corral_source_split_6554:
    assume {:verifier.code 0} true;
    $p926, $p927 := $p933, $p928;
    goto $bb464;

  $bb459:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb460;

  $bb453:
    assume {:verifier.code 0} true;
    assume $i908 == 1;
    goto $bb451;

  $bb451:
    assume {:verifier.code 0} true;
    $p914 := $add.ref($p899, $mul.ref(1, 1));
    goto corral_source_split_6529;

  corral_source_split_6529:
    assume {:verifier.code 0} true;
    $i915 := $load.i8($M.0, $p899);
    goto corral_source_split_6530;

  corral_source_split_6530:
    assume {:verifier.code 0} true;
    $i916 := $zext.i8.i32($i915);
    goto corral_source_split_6531;

  corral_source_split_6531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1111} $i917 := sprintf.ref.ref.i32($p898, .str.4, $i916);
    goto corral_source_split_6532;

  corral_source_split_6532:
    assume {:verifier.code 0} true;
    $i918 := $sext.i32.i64($i917);
    goto corral_source_split_6533;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    $p919 := $add.ref($p898, $mul.ref($i918, 1));
    goto corral_source_split_6534;

  corral_source_split_6534:
    assume {:verifier.code 0} true;
    $p912, $p913 := $p919, $p914;
    goto $bb455;

  $bb450:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb451;

  $bb444:
    assume {:verifier.code 0} true;
    assume $i894 == 1;
    goto $bb442;

  $bb442:
    assume {:verifier.code 0} true;
    $p900 := $add.ref($p885, $mul.ref(1, 1));
    goto corral_source_split_6509;

  corral_source_split_6509:
    assume {:verifier.code 0} true;
    $i901 := $load.i8($M.0, $p885);
    goto corral_source_split_6510;

  corral_source_split_6510:
    assume {:verifier.code 0} true;
    $i902 := $zext.i8.i32($i901);
    goto corral_source_split_6511;

  corral_source_split_6511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1109} $i903 := sprintf.ref.ref.i32($p884, .str.4, $i902);
    goto corral_source_split_6512;

  corral_source_split_6512:
    assume {:verifier.code 0} true;
    $i904 := $sext.i32.i64($i903);
    goto corral_source_split_6513;

  corral_source_split_6513:
    assume {:verifier.code 0} true;
    $p905 := $add.ref($p884, $mul.ref($i904, 1));
    goto corral_source_split_6514;

  corral_source_split_6514:
    assume {:verifier.code 0} true;
    $p898, $p899 := $p905, $p900;
    goto $bb446;

  $bb441:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb442;

  $bb435:
    assume {:verifier.code 0} true;
    assume $i880 == 1;
    goto $bb433;

  $bb433:
    assume {:verifier.code 0} true;
    $p886 := $add.ref($p871, $mul.ref(1, 1));
    goto corral_source_split_6489;

  corral_source_split_6489:
    assume {:verifier.code 0} true;
    $i887 := $load.i8($M.0, $p871);
    goto corral_source_split_6490;

  corral_source_split_6490:
    assume {:verifier.code 0} true;
    $i888 := $zext.i8.i32($i887);
    goto corral_source_split_6491;

  corral_source_split_6491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1107} $i889 := sprintf.ref.ref.i32($p870, .str.4, $i888);
    goto corral_source_split_6492;

  corral_source_split_6492:
    assume {:verifier.code 0} true;
    $i890 := $sext.i32.i64($i889);
    goto corral_source_split_6493;

  corral_source_split_6493:
    assume {:verifier.code 0} true;
    $p891 := $add.ref($p870, $mul.ref($i890, 1));
    goto corral_source_split_6494;

  corral_source_split_6494:
    assume {:verifier.code 0} true;
    $p884, $p885 := $p891, $p886;
    goto $bb437;

  $bb432:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb433;

  $bb426:
    assume {:verifier.code 0} true;
    assume $i866 == 1;
    goto $bb424;

  $bb424:
    assume {:verifier.code 0} true;
    $p872 := $add.ref($p857, $mul.ref(1, 1));
    goto corral_source_split_6469;

  corral_source_split_6469:
    assume {:verifier.code 0} true;
    $i873 := $load.i8($M.0, $p857);
    goto corral_source_split_6470;

  corral_source_split_6470:
    assume {:verifier.code 0} true;
    $i874 := $zext.i8.i32($i873);
    goto corral_source_split_6471;

  corral_source_split_6471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1105} $i875 := sprintf.ref.ref.i32($p856, .str.4, $i874);
    goto corral_source_split_6472;

  corral_source_split_6472:
    assume {:verifier.code 0} true;
    $i876 := $sext.i32.i64($i875);
    goto corral_source_split_6473;

  corral_source_split_6473:
    assume {:verifier.code 0} true;
    $p877 := $add.ref($p856, $mul.ref($i876, 1));
    goto corral_source_split_6474;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    $p870, $p871 := $p877, $p872;
    goto $bb428;

  $bb423:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb424;

  $bb417:
    assume {:verifier.code 0} true;
    assume $i852 == 1;
    goto $bb415;

  $bb415:
    assume {:verifier.code 0} true;
    $p858 := $add.ref($p843, $mul.ref(1, 1));
    goto corral_source_split_6449;

  corral_source_split_6449:
    assume {:verifier.code 0} true;
    $i859 := $load.i8($M.0, $p843);
    goto corral_source_split_6450;

  corral_source_split_6450:
    assume {:verifier.code 0} true;
    $i860 := $zext.i8.i32($i859);
    goto corral_source_split_6451;

  corral_source_split_6451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1103} $i861 := sprintf.ref.ref.i32($p842, .str.4, $i860);
    goto corral_source_split_6452;

  corral_source_split_6452:
    assume {:verifier.code 0} true;
    $i862 := $sext.i32.i64($i861);
    goto corral_source_split_6453;

  corral_source_split_6453:
    assume {:verifier.code 0} true;
    $p863 := $add.ref($p842, $mul.ref($i862, 1));
    goto corral_source_split_6454;

  corral_source_split_6454:
    assume {:verifier.code 0} true;
    $p856, $p857 := $p863, $p858;
    goto $bb419;

  $bb414:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb415;

  $bb408:
    assume {:verifier.code 0} true;
    assume $i838 == 1;
    goto $bb406;

  $bb406:
    assume {:verifier.code 0} true;
    $p844 := $add.ref($p829, $mul.ref(1, 1));
    goto corral_source_split_6429;

  corral_source_split_6429:
    assume {:verifier.code 0} true;
    $i845 := $load.i8($M.0, $p829);
    goto corral_source_split_6430;

  corral_source_split_6430:
    assume {:verifier.code 0} true;
    $i846 := $zext.i8.i32($i845);
    goto corral_source_split_6431;

  corral_source_split_6431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1101} $i847 := sprintf.ref.ref.i32($p828, .str.4, $i846);
    goto corral_source_split_6432;

  corral_source_split_6432:
    assume {:verifier.code 0} true;
    $i848 := $sext.i32.i64($i847);
    goto corral_source_split_6433;

  corral_source_split_6433:
    assume {:verifier.code 0} true;
    $p849 := $add.ref($p828, $mul.ref($i848, 1));
    goto corral_source_split_6434;

  corral_source_split_6434:
    assume {:verifier.code 0} true;
    $p842, $p843 := $p849, $p844;
    goto $bb410;

  $bb405:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb406;

  $bb399:
    assume {:verifier.code 0} true;
    assume $i824 == 1;
    goto $bb397;

  $bb397:
    assume {:verifier.code 0} true;
    $p830 := $add.ref($p815, $mul.ref(1, 1));
    goto corral_source_split_6409;

  corral_source_split_6409:
    assume {:verifier.code 0} true;
    $i831 := $load.i8($M.0, $p815);
    goto corral_source_split_6410;

  corral_source_split_6410:
    assume {:verifier.code 0} true;
    $i832 := $zext.i8.i32($i831);
    goto corral_source_split_6411;

  corral_source_split_6411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1099} $i833 := sprintf.ref.ref.i32($p814, .str.4, $i832);
    goto corral_source_split_6412;

  corral_source_split_6412:
    assume {:verifier.code 0} true;
    $i834 := $sext.i32.i64($i833);
    goto corral_source_split_6413;

  corral_source_split_6413:
    assume {:verifier.code 0} true;
    $p835 := $add.ref($p814, $mul.ref($i834, 1));
    goto corral_source_split_6414;

  corral_source_split_6414:
    assume {:verifier.code 0} true;
    $p828, $p829 := $p835, $p830;
    goto $bb401;

  $bb396:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb397;

  $bb390:
    assume {:verifier.code 0} true;
    assume $i810 == 1;
    goto $bb388;

  $bb388:
    assume {:verifier.code 0} true;
    $p816 := $add.ref($p801, $mul.ref(1, 1));
    goto corral_source_split_6389;

  corral_source_split_6389:
    assume {:verifier.code 0} true;
    $i817 := $load.i8($M.0, $p801);
    goto corral_source_split_6390;

  corral_source_split_6390:
    assume {:verifier.code 0} true;
    $i818 := $zext.i8.i32($i817);
    goto corral_source_split_6391;

  corral_source_split_6391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1097} $i819 := sprintf.ref.ref.i32($p800, .str.4, $i818);
    goto corral_source_split_6392;

  corral_source_split_6392:
    assume {:verifier.code 0} true;
    $i820 := $sext.i32.i64($i819);
    goto corral_source_split_6393;

  corral_source_split_6393:
    assume {:verifier.code 0} true;
    $p821 := $add.ref($p800, $mul.ref($i820, 1));
    goto corral_source_split_6394;

  corral_source_split_6394:
    assume {:verifier.code 0} true;
    $p814, $p815 := $p821, $p816;
    goto $bb392;

  $bb387:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb388;

  $bb381:
    assume {:verifier.code 0} true;
    assume $i796 == 1;
    goto $bb379;

  $bb379:
    assume {:verifier.code 0} true;
    $p802 := $add.ref($p223, $mul.ref(1, 1));
    goto corral_source_split_6369;

  corral_source_split_6369:
    assume {:verifier.code 0} true;
    $i803 := $load.i8($M.0, $p223);
    goto corral_source_split_6370;

  corral_source_split_6370:
    assume {:verifier.code 0} true;
    $i804 := $zext.i8.i32($i803);
    goto corral_source_split_6371;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1095} $i805 := sprintf.ref.ref.i32($p222, .str.4, $i804);
    goto corral_source_split_6372;

  corral_source_split_6372:
    assume {:verifier.code 0} true;
    $i806 := $sext.i32.i64($i805);
    goto corral_source_split_6373;

  corral_source_split_6373:
    assume {:verifier.code 0} true;
    $p807 := $add.ref($p222, $mul.ref($i806, 1));
    goto corral_source_split_6374;

  corral_source_split_6374:
    assume {:verifier.code 0} true;
    $p800, $p801 := $p807, $p802;
    goto $bb383;

  $bb378:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb379;

  $bb80:
    assume {:verifier.code 0} true;
    assume $i213 == 1;
    goto $bb78;

  $bb78:
    $i215 := $add.i64(4, 1);
    goto corral_source_split_5575;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($p210, $mul.ref($i215, 1));
    goto corral_source_split_5576;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    $i217 := $load.i8($M.0, $p211);
    goto corral_source_split_5577;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    $i218 := $zext.i8.i32($i217);
    goto corral_source_split_5578;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1014} $i219 := sprintf.ref.ref.i32($p208, .str.4, $i218);
    call {:si_unique_call 1015} {:cexpr "tmp___14"} boogie_si_record_i32($i219);
    goto corral_source_split_5579;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    $i220 := $sext.i32.i64($i219);
    goto corral_source_split_5580;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($p208, $mul.ref($i220, 1));
    goto corral_source_split_5581;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    $p222, $p223 := $p221, $p216;
    goto $bb82;

  $bb77:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb78;

  $bb68:
    assume $i173 == 1;
    goto corral_source_split_5523;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    $p174 := $p164;
    goto $bb70;

  $bb63:
    assume $i159 == 1;
    goto corral_source_split_5505;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    $i162 := $zext.i8.i32($i151);
    goto corral_source_split_5506;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    $i163 := $eq.i32($i162, 255);
    goto corral_source_split_5507;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    $i136, $i160, $i161 := $i152, $i151, $i152;
    assume true;
    goto $bb59, $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    assume !($i163 == 1);
    goto $bb65;

  $bb59:
    assume $i163 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_5477;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    $i137 := $load.i64($M.0, $p58);
    goto corral_source_split_5478;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    $i138 := $ne.i64($i137, 0);
    goto corral_source_split_5479;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    $p139, $i140 := $p63, $i136;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i138 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5481;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    $p383, $i384 := $p139, $i140;
    goto $bb108;

  $bb60:
    assume $i138 == 1;
    assume {:verifier.code 0} true;
    $i141 := $i136;
    goto $bb60_dummy;

  $bb13:
    assume $i50 == 1;
    goto corral_source_split_5325;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb4, $bb6;

  $bb6:
    assume !(1 == 1);
    goto corral_source_split_5312;

  corral_source_split_5312:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i36, 0);
    goto corral_source_split_5313;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i35 == 1);
    goto corral_source_split_5315;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 992} $i45 := sprintf.ref.ref($p30, .str.5);
    call {:si_unique_call 993} {:cexpr "tmp___3"} boogie_si_record_i32($i45);
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    $i46 := $sext.i32.i64($i45);
    goto corral_source_split_5317;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($p30, $mul.ref($i46, 1));
    assume {:verifier.code 0} true;
    $p43, $p44 := $p33, $p47;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5319;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    $i48 := $sub.i32($i36, 1);
    goto corral_source_split_5320;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    $i49 := $sgt.i32($i36, 0);
    goto corral_source_split_5321;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i49 == 1);
    goto $bb12;

  $bb10:
    assume $i49 == 1;
    goto corral_source_split_5323;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb110, $bb112;

  $bb112:
    assume !(1 == 1);
    goto corral_source_split_5787;

  corral_source_split_5787:
    assume {:verifier.code 0} true;
    $i385 := $eq.i32($i48, 0);
    goto corral_source_split_5788;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  $bb114:
    assume !($i385 == 1);
    goto corral_source_split_5790;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1036} $i386 := sprintf.ref.ref($p44, .str.5);
    goto corral_source_split_5791;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    $i387 := $sext.i32.i64($i386);
    goto corral_source_split_5792;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    $p388 := $add.ref($p44, $mul.ref($i387, 1));
    assume {:verifier.code 0} true;
    $p389, $p390 := $p43, $p388;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5794;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    $i397 := $sub.i32($i48, 1);
    goto corral_source_split_5795;

  corral_source_split_5795:
    assume {:verifier.code 0} true;
    $i398 := $sgt.i32($i48, 0);
    goto corral_source_split_5796;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    assume !($i398 == 1);
    goto $bb12;

  $bb116:
    assume $i398 == 1;
    goto corral_source_split_5798;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb119, $bb121;

  $bb121:
    assume !(1 == 1);
    goto corral_source_split_5807;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    $i399 := $eq.i32($i397, 0);
    goto corral_source_split_5808;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb122, $bb123;

  $bb123:
    assume !($i399 == 1);
    goto corral_source_split_5810;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1038} $i400 := sprintf.ref.ref($p390, .str.5);
    goto corral_source_split_5811;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    $i401 := $sext.i32.i64($i400);
    goto corral_source_split_5812;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    $p402 := $add.ref($p390, $mul.ref($i401, 1));
    assume {:verifier.code 0} true;
    $p403, $p404 := $p389, $p402;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5814;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    $i411 := $sub.i32($i397, 1);
    goto corral_source_split_5815;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    $i412 := $sgt.i32($i397, 0);
    goto corral_source_split_5816;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb125, $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    assume !($i412 == 1);
    goto $bb12;

  $bb125:
    assume $i412 == 1;
    goto corral_source_split_5818;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb128, $bb130;

  $bb130:
    assume !(1 == 1);
    goto corral_source_split_5827;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    $i413 := $eq.i32($i411, 0);
    goto corral_source_split_5828;

  corral_source_split_5828:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb131, $bb132;

  $bb132:
    assume !($i413 == 1);
    goto corral_source_split_5830;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1040} $i414 := sprintf.ref.ref($p404, .str.5);
    goto corral_source_split_5831;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    $i415 := $sext.i32.i64($i414);
    goto corral_source_split_5832;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    $p416 := $add.ref($p404, $mul.ref($i415, 1));
    assume {:verifier.code 0} true;
    $p417, $p418 := $p403, $p416;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5834;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    $i425 := $sub.i32($i411, 1);
    goto corral_source_split_5835;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    $i426 := $sgt.i32($i411, 0);
    goto corral_source_split_5836;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb134, $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    assume !($i426 == 1);
    goto $bb12;

  $bb134:
    assume $i426 == 1;
    goto corral_source_split_5838;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb137, $bb139;

  $bb139:
    assume !(1 == 1);
    goto corral_source_split_5847;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    $i427 := $eq.i32($i425, 0);
    goto corral_source_split_5848;

  corral_source_split_5848:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb140, $bb141;

  $bb141:
    assume !($i427 == 1);
    goto corral_source_split_5850;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1042} $i428 := sprintf.ref.ref($p418, .str.5);
    goto corral_source_split_5851;

  corral_source_split_5851:
    assume {:verifier.code 0} true;
    $i429 := $sext.i32.i64($i428);
    goto corral_source_split_5852;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    $p430 := $add.ref($p418, $mul.ref($i429, 1));
    assume {:verifier.code 0} true;
    $p431, $p432 := $p417, $p430;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5854;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    $i439 := $sub.i32($i425, 1);
    goto corral_source_split_5855;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    $i440 := $sgt.i32($i425, 0);
    goto corral_source_split_5856;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb143, $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    assume !($i440 == 1);
    goto $bb12;

  $bb143:
    assume $i440 == 1;
    goto corral_source_split_5858;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb146, $bb148;

  $bb148:
    assume !(1 == 1);
    goto corral_source_split_5867;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    $i441 := $eq.i32($i439, 0);
    goto corral_source_split_5868;

  corral_source_split_5868:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb149, $bb150;

  $bb150:
    assume !($i441 == 1);
    goto corral_source_split_5870;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1044} $i442 := sprintf.ref.ref($p432, .str.5);
    goto corral_source_split_5871;

  corral_source_split_5871:
    assume {:verifier.code 0} true;
    $i443 := $sext.i32.i64($i442);
    goto corral_source_split_5872;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    $p444 := $add.ref($p432, $mul.ref($i443, 1));
    assume {:verifier.code 0} true;
    $p445, $p446 := $p431, $p444;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5874;

  corral_source_split_5874:
    assume {:verifier.code 0} true;
    $i453 := $sub.i32($i439, 1);
    goto corral_source_split_5875;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    $i454 := $sgt.i32($i439, 0);
    goto corral_source_split_5876;

  corral_source_split_5876:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb152, $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    assume !($i454 == 1);
    goto $bb12;

  $bb152:
    assume $i454 == 1;
    goto corral_source_split_5878;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb155, $bb157;

  $bb157:
    assume !(1 == 1);
    goto corral_source_split_5887;

  corral_source_split_5887:
    assume {:verifier.code 0} true;
    $i455 := $eq.i32($i453, 0);
    goto corral_source_split_5888;

  corral_source_split_5888:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb158, $bb159;

  $bb159:
    assume !($i455 == 1);
    goto corral_source_split_5890;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1046} $i456 := sprintf.ref.ref($p446, .str.5);
    goto corral_source_split_5891;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    $i457 := $sext.i32.i64($i456);
    goto corral_source_split_5892;

  corral_source_split_5892:
    assume {:verifier.code 0} true;
    $p458 := $add.ref($p446, $mul.ref($i457, 1));
    assume {:verifier.code 0} true;
    $p459, $p460 := $p445, $p458;
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5894;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    $i467 := $sub.i32($i453, 1);
    goto corral_source_split_5895;

  corral_source_split_5895:
    assume {:verifier.code 0} true;
    $i468 := $sgt.i32($i453, 0);
    goto corral_source_split_5896;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb161, $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    assume !($i468 == 1);
    goto $bb12;

  $bb161:
    assume $i468 == 1;
    goto corral_source_split_5898;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb164, $bb166;

  $bb166:
    assume !(1 == 1);
    goto corral_source_split_5907;

  corral_source_split_5907:
    assume {:verifier.code 0} true;
    $i469 := $eq.i32($i467, 0);
    goto corral_source_split_5908;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb167, $bb168;

  $bb168:
    assume !($i469 == 1);
    goto corral_source_split_5910;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1048} $i470 := sprintf.ref.ref($p460, .str.5);
    goto corral_source_split_5911;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    $i471 := $sext.i32.i64($i470);
    goto corral_source_split_5912;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    $p472 := $add.ref($p460, $mul.ref($i471, 1));
    assume {:verifier.code 0} true;
    $p473, $p474 := $p459, $p472;
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5914;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    $i481 := $sub.i32($i467, 1);
    goto corral_source_split_5915;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    $i482 := $sgt.i32($i467, 0);
    goto corral_source_split_5916;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb170, $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    assume !($i482 == 1);
    goto $bb12;

  $bb170:
    assume $i482 == 1;
    goto corral_source_split_5918;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb173, $bb175;

  $bb175:
    assume !(1 == 1);
    goto corral_source_split_5927;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    $i483 := $eq.i32($i481, 0);
    goto corral_source_split_5928;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb176, $bb177;

  $bb177:
    assume !($i483 == 1);
    goto corral_source_split_5930;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1050} $i484 := sprintf.ref.ref($p474, .str.5);
    goto corral_source_split_5931;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    $i485 := $sext.i32.i64($i484);
    goto corral_source_split_5932;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    $p486 := $add.ref($p474, $mul.ref($i485, 1));
    assume {:verifier.code 0} true;
    $p487, $p488 := $p473, $p486;
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5934;

  corral_source_split_5934:
    assume {:verifier.code 0} true;
    $i495 := $sub.i32($i481, 1);
    goto corral_source_split_5935;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    $i496 := $sgt.i32($i481, 0);
    goto corral_source_split_5936;

  corral_source_split_5936:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb179, $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    assume !($i496 == 1);
    goto $bb12;

  $bb179:
    assume $i496 == 1;
    goto corral_source_split_5938;

  corral_source_split_5938:
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb182, $bb184;

  $bb184:
    assume !(1 == 1);
    goto corral_source_split_5947;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    $i497 := $eq.i32($i495, 0);
    goto corral_source_split_5948;

  corral_source_split_5948:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb185, $bb186;

  $bb186:
    assume !($i497 == 1);
    goto corral_source_split_5950;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1052} $i498 := sprintf.ref.ref($p488, .str.5);
    goto corral_source_split_5951;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    $i499 := $sext.i32.i64($i498);
    goto corral_source_split_5952;

  corral_source_split_5952:
    assume {:verifier.code 0} true;
    $p500 := $add.ref($p488, $mul.ref($i499, 1));
    assume {:verifier.code 0} true;
    $p501, $p502 := $p487, $p500;
    goto $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5954;

  corral_source_split_5954:
    assume {:verifier.code 0} true;
    $i509 := $sub.i32($i495, 1);
    goto corral_source_split_5955;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    $i510 := $sgt.i32($i495, 0);
    goto corral_source_split_5956;

  corral_source_split_5956:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb188, $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    assume !($i510 == 1);
    goto $bb12;

  $bb188:
    assume $i510 == 1;
    goto corral_source_split_5958;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb191, $bb193;

  $bb193:
    assume !(1 == 1);
    goto corral_source_split_5967;

  corral_source_split_5967:
    assume {:verifier.code 0} true;
    $i511 := $eq.i32($i509, 0);
    goto corral_source_split_5968;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb194, $bb195;

  $bb195:
    assume !($i511 == 1);
    goto corral_source_split_5970;

  corral_source_split_5970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1054} $i512 := sprintf.ref.ref($p502, .str.5);
    goto corral_source_split_5971;

  corral_source_split_5971:
    assume {:verifier.code 0} true;
    $i513 := $sext.i32.i64($i512);
    goto corral_source_split_5972;

  corral_source_split_5972:
    assume {:verifier.code 0} true;
    $p514 := $add.ref($p502, $mul.ref($i513, 1));
    assume {:verifier.code 0} true;
    $p515, $p516 := $p501, $p514;
    goto $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5974;

  corral_source_split_5974:
    assume {:verifier.code 0} true;
    $i523 := $sub.i32($i509, 1);
    goto corral_source_split_5975;

  corral_source_split_5975:
    assume {:verifier.code 0} true;
    $i524 := $sgt.i32($i509, 0);
    goto corral_source_split_5976;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb197, $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    assume !($i524 == 1);
    goto $bb12;

  $bb197:
    assume $i524 == 1;
    goto corral_source_split_5978;

  corral_source_split_5978:
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb200, $bb202;

  $bb202:
    assume !(1 == 1);
    goto corral_source_split_5987;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    $i525 := $eq.i32($i523, 0);
    goto corral_source_split_5988;

  corral_source_split_5988:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb203, $bb204;

  $bb204:
    assume !($i525 == 1);
    goto corral_source_split_5990;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1056} $i526 := sprintf.ref.ref($p516, .str.5);
    goto corral_source_split_5991;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    $i527 := $sext.i32.i64($i526);
    goto corral_source_split_5992;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    $p528 := $add.ref($p516, $mul.ref($i527, 1));
    assume {:verifier.code 0} true;
    $p529, $p530 := $p515, $p528;
    goto $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5994;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    $i537 := $sub.i32($i523, 1);
    goto corral_source_split_5995;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    $i538 := $sgt.i32($i523, 0);
    goto corral_source_split_5996;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb206, $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    assume !($i538 == 1);
    goto $bb12;

  $bb206:
    assume $i538 == 1;
    goto corral_source_split_5998;

  corral_source_split_5998:
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb208:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb209, $bb211;

  $bb211:
    assume !(1 == 1);
    goto corral_source_split_6007;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    $i539 := $eq.i32($i537, 0);
    goto corral_source_split_6008;

  corral_source_split_6008:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb212, $bb213;

  $bb213:
    assume !($i539 == 1);
    goto corral_source_split_6010;

  corral_source_split_6010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1058} $i540 := sprintf.ref.ref($p530, .str.5);
    goto corral_source_split_6011;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    $i541 := $sext.i32.i64($i540);
    goto corral_source_split_6012;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    $p542 := $add.ref($p530, $mul.ref($i541, 1));
    assume {:verifier.code 0} true;
    $p543, $p544 := $p529, $p542;
    goto $bb214;

  $bb214:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6014;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    $i551 := $sub.i32($i537, 1);
    goto corral_source_split_6015;

  corral_source_split_6015:
    assume {:verifier.code 0} true;
    $i552 := $sgt.i32($i537, 0);
    goto corral_source_split_6016;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb215, $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    assume !($i552 == 1);
    goto $bb12;

  $bb215:
    assume $i552 == 1;
    goto corral_source_split_6018;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb218, $bb220;

  $bb220:
    assume !(1 == 1);
    goto corral_source_split_6027;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    $i553 := $eq.i32($i551, 0);
    goto corral_source_split_6028;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb221, $bb222;

  $bb222:
    assume !($i553 == 1);
    goto corral_source_split_6030;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1060} $i554 := sprintf.ref.ref($p544, .str.5);
    goto corral_source_split_6031;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    $i555 := $sext.i32.i64($i554);
    goto corral_source_split_6032;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    $p556 := $add.ref($p544, $mul.ref($i555, 1));
    assume {:verifier.code 0} true;
    $p557, $p558 := $p543, $p556;
    goto $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6034;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    $i565 := $sub.i32($i551, 1);
    goto corral_source_split_6035;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    $i566 := $sgt.i32($i551, 0);
    goto corral_source_split_6036;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb224, $bb225;

  $bb225:
    assume {:verifier.code 0} true;
    assume !($i566 == 1);
    goto $bb12;

  $bb224:
    assume $i566 == 1;
    goto corral_source_split_6038;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb226:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb227, $bb229;

  $bb229:
    assume !(1 == 1);
    goto corral_source_split_6047;

  corral_source_split_6047:
    assume {:verifier.code 0} true;
    $i567 := $eq.i32($i565, 0);
    goto corral_source_split_6048;

  corral_source_split_6048:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb230, $bb231;

  $bb231:
    assume !($i567 == 1);
    goto corral_source_split_6050;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1062} $i568 := sprintf.ref.ref($p558, .str.5);
    goto corral_source_split_6051;

  corral_source_split_6051:
    assume {:verifier.code 0} true;
    $i569 := $sext.i32.i64($i568);
    goto corral_source_split_6052;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    $p570 := $add.ref($p558, $mul.ref($i569, 1));
    assume {:verifier.code 0} true;
    $p571, $p572 := $p557, $p570;
    goto $bb232;

  $bb232:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6054;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    $i579 := $sub.i32($i565, 1);
    goto corral_source_split_6055;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    $i580 := $sgt.i32($i565, 0);
    goto corral_source_split_6056;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb233, $bb234;

  $bb234:
    assume {:verifier.code 0} true;
    assume !($i580 == 1);
    goto $bb12;

  $bb233:
    assume $i580 == 1;
    goto corral_source_split_6058;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb235:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb236, $bb238;

  $bb238:
    assume !(1 == 1);
    goto corral_source_split_6067;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    $i581 := $eq.i32($i579, 0);
    goto corral_source_split_6068;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb239, $bb240;

  $bb240:
    assume !($i581 == 1);
    goto corral_source_split_6070;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1064} $i582 := sprintf.ref.ref($p572, .str.5);
    goto corral_source_split_6071;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    $i583 := $sext.i32.i64($i582);
    goto corral_source_split_6072;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    $p584 := $add.ref($p572, $mul.ref($i583, 1));
    assume {:verifier.code 0} true;
    $p585, $p586 := $p571, $p584;
    goto $bb241;

  $bb241:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6074;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    $i593 := $sub.i32($i579, 1);
    goto corral_source_split_6075;

  corral_source_split_6075:
    assume {:verifier.code 0} true;
    $i594 := $sgt.i32($i579, 0);
    goto corral_source_split_6076;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb242, $bb243;

  $bb243:
    assume {:verifier.code 0} true;
    assume !($i594 == 1);
    goto $bb12;

  $bb242:
    assume $i594 == 1;
    goto corral_source_split_6078;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb244:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb245, $bb247;

  $bb247:
    assume !(1 == 1);
    goto corral_source_split_6087;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    $i595 := $eq.i32($i593, 0);
    goto corral_source_split_6088;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb248, $bb249;

  $bb249:
    assume !($i595 == 1);
    goto corral_source_split_6090;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1066} $i596 := sprintf.ref.ref($p586, .str.5);
    goto corral_source_split_6091;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    $i597 := $sext.i32.i64($i596);
    goto corral_source_split_6092;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    $p598 := $add.ref($p586, $mul.ref($i597, 1));
    assume {:verifier.code 0} true;
    $p599, $p600 := $p585, $p598;
    goto $bb250;

  $bb250:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6094;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    $i607 := $sub.i32($i593, 1);
    goto corral_source_split_6095;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    $i608 := $sgt.i32($i593, 0);
    goto corral_source_split_6096;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb251, $bb252;

  $bb252:
    assume {:verifier.code 0} true;
    assume !($i608 == 1);
    goto $bb12;

  $bb251:
    assume $i608 == 1;
    goto corral_source_split_6098;

  corral_source_split_6098:
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb253:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb254, $bb256;

  $bb256:
    assume !(1 == 1);
    goto corral_source_split_6107;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    $i609 := $eq.i32($i607, 0);
    goto corral_source_split_6108;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb257, $bb258;

  $bb258:
    assume !($i609 == 1);
    goto corral_source_split_6110;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1068} $i610 := sprintf.ref.ref($p600, .str.5);
    goto corral_source_split_6111;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    $i611 := $sext.i32.i64($i610);
    goto corral_source_split_6112;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    $p612 := $add.ref($p600, $mul.ref($i611, 1));
    assume {:verifier.code 0} true;
    $p613, $p614 := $p599, $p612;
    goto $bb259;

  $bb259:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6114;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    $i621 := $sub.i32($i607, 1);
    goto corral_source_split_6115;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    $i622 := $sgt.i32($i607, 0);
    goto corral_source_split_6116;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb260, $bb261;

  $bb261:
    assume {:verifier.code 0} true;
    assume !($i622 == 1);
    goto $bb12;

  $bb260:
    assume $i622 == 1;
    goto corral_source_split_6118;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb262:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb263, $bb265;

  $bb265:
    assume !(1 == 1);
    goto corral_source_split_6127;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    $i623 := $eq.i32($i621, 0);
    goto corral_source_split_6128;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb266, $bb267;

  $bb267:
    assume !($i623 == 1);
    goto corral_source_split_6130;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1070} $i624 := sprintf.ref.ref($p614, .str.5);
    goto corral_source_split_6131;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    $i625 := $sext.i32.i64($i624);
    goto corral_source_split_6132;

  corral_source_split_6132:
    assume {:verifier.code 0} true;
    $p626 := $add.ref($p614, $mul.ref($i625, 1));
    assume {:verifier.code 0} true;
    $p627, $p628 := $p613, $p626;
    goto $bb268;

  $bb268:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6134;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    $i635 := $sub.i32($i621, 1);
    goto corral_source_split_6135;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    $i636 := $sgt.i32($i621, 0);
    goto corral_source_split_6136;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb269, $bb270;

  $bb270:
    assume {:verifier.code 0} true;
    assume !($i636 == 1);
    goto $bb12;

  $bb269:
    assume $i636 == 1;
    goto corral_source_split_6138;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb271:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb272, $bb274;

  $bb274:
    assume !(1 == 1);
    goto corral_source_split_6147;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    $i637 := $eq.i32($i635, 0);
    goto corral_source_split_6148;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb275, $bb276;

  $bb276:
    assume !($i637 == 1);
    goto corral_source_split_6150;

  corral_source_split_6150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1072} $i638 := sprintf.ref.ref($p628, .str.5);
    goto corral_source_split_6151;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    $i639 := $sext.i32.i64($i638);
    goto corral_source_split_6152;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    $p640 := $add.ref($p628, $mul.ref($i639, 1));
    assume {:verifier.code 0} true;
    $p641, $p642 := $p627, $p640;
    goto $bb277;

  $bb277:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6154;

  corral_source_split_6154:
    assume {:verifier.code 0} true;
    $i649 := $sub.i32($i635, 1);
    goto corral_source_split_6155;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    $i650 := $sgt.i32($i635, 0);
    goto corral_source_split_6156;

  corral_source_split_6156:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb278, $bb279;

  $bb279:
    assume {:verifier.code 0} true;
    assume !($i650 == 1);
    goto $bb12;

  $bb278:
    assume $i650 == 1;
    goto corral_source_split_6158;

  corral_source_split_6158:
    assume {:verifier.code 0} true;
    goto $bb280;

  $bb280:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb281, $bb283;

  $bb283:
    assume !(1 == 1);
    goto corral_source_split_6167;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    $i651 := $eq.i32($i649, 0);
    goto corral_source_split_6168;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb284, $bb285;

  $bb285:
    assume !($i651 == 1);
    goto corral_source_split_6170;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1074} $i652 := sprintf.ref.ref($p642, .str.5);
    goto corral_source_split_6171;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    $i653 := $sext.i32.i64($i652);
    goto corral_source_split_6172;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    $p654 := $add.ref($p642, $mul.ref($i653, 1));
    assume {:verifier.code 0} true;
    $p655, $p656 := $p641, $p654;
    goto $bb286;

  $bb286:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6174;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    $i663 := $sub.i32($i649, 1);
    goto corral_source_split_6175;

  corral_source_split_6175:
    assume {:verifier.code 0} true;
    $i664 := $sgt.i32($i649, 0);
    goto corral_source_split_6176;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb287, $bb288;

  $bb288:
    assume {:verifier.code 0} true;
    assume !($i664 == 1);
    goto $bb12;

  $bb287:
    assume $i664 == 1;
    goto corral_source_split_6178;

  corral_source_split_6178:
    assume {:verifier.code 0} true;
    goto $bb289;

  $bb289:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb290, $bb292;

  $bb292:
    assume !(1 == 1);
    goto corral_source_split_6187;

  corral_source_split_6187:
    assume {:verifier.code 0} true;
    $i665 := $eq.i32($i663, 0);
    goto corral_source_split_6188;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb293, $bb294;

  $bb294:
    assume !($i665 == 1);
    goto corral_source_split_6190;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1076} $i666 := sprintf.ref.ref($p656, .str.5);
    goto corral_source_split_6191;

  corral_source_split_6191:
    assume {:verifier.code 0} true;
    $i667 := $sext.i32.i64($i666);
    goto corral_source_split_6192;

  corral_source_split_6192:
    assume {:verifier.code 0} true;
    $p668 := $add.ref($p656, $mul.ref($i667, 1));
    assume {:verifier.code 0} true;
    $p669, $p670 := $p655, $p668;
    goto $bb295;

  $bb295:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6194;

  corral_source_split_6194:
    assume {:verifier.code 0} true;
    $i677 := $sub.i32($i663, 1);
    goto corral_source_split_6195;

  corral_source_split_6195:
    assume {:verifier.code 0} true;
    $i678 := $sgt.i32($i663, 0);
    goto corral_source_split_6196;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb296, $bb297;

  $bb297:
    assume {:verifier.code 0} true;
    assume !($i678 == 1);
    goto $bb12;

  $bb296:
    assume $i678 == 1;
    goto corral_source_split_6198;

  corral_source_split_6198:
    assume {:verifier.code 0} true;
    goto $bb298;

  $bb298:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb299, $bb301;

  $bb301:
    assume !(1 == 1);
    goto corral_source_split_6207;

  corral_source_split_6207:
    assume {:verifier.code 0} true;
    $i679 := $eq.i32($i677, 0);
    goto corral_source_split_6208;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb302, $bb303;

  $bb303:
    assume !($i679 == 1);
    goto corral_source_split_6210;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1078} $i680 := sprintf.ref.ref($p670, .str.5);
    goto corral_source_split_6211;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    $i681 := $sext.i32.i64($i680);
    goto corral_source_split_6212;

  corral_source_split_6212:
    assume {:verifier.code 0} true;
    $p682 := $add.ref($p670, $mul.ref($i681, 1));
    assume {:verifier.code 0} true;
    $p683, $p684 := $p669, $p682;
    goto $bb304;

  $bb304:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6214;

  corral_source_split_6214:
    assume {:verifier.code 0} true;
    $i691 := $sub.i32($i677, 1);
    goto corral_source_split_6215;

  corral_source_split_6215:
    assume {:verifier.code 0} true;
    $i692 := $sgt.i32($i677, 0);
    goto corral_source_split_6216;

  corral_source_split_6216:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb305, $bb306;

  $bb306:
    assume {:verifier.code 0} true;
    assume !($i692 == 1);
    goto $bb12;

  $bb305:
    assume $i692 == 1;
    goto corral_source_split_6218;

  corral_source_split_6218:
    assume {:verifier.code 0} true;
    goto $bb307;

  $bb307:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb308, $bb310;

  $bb310:
    assume !(1 == 1);
    goto corral_source_split_6227;

  corral_source_split_6227:
    assume {:verifier.code 0} true;
    $i693 := $eq.i32($i691, 0);
    goto corral_source_split_6228;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb311, $bb312;

  $bb312:
    assume !($i693 == 1);
    goto corral_source_split_6230;

  corral_source_split_6230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1080} $i694 := sprintf.ref.ref($p684, .str.5);
    goto corral_source_split_6231;

  corral_source_split_6231:
    assume {:verifier.code 0} true;
    $i695 := $sext.i32.i64($i694);
    goto corral_source_split_6232;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    $p696 := $add.ref($p684, $mul.ref($i695, 1));
    assume {:verifier.code 0} true;
    $p697, $p698 := $p683, $p696;
    goto $bb313;

  $bb313:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6234;

  corral_source_split_6234:
    assume {:verifier.code 0} true;
    $i705 := $sub.i32($i691, 1);
    goto corral_source_split_6235;

  corral_source_split_6235:
    assume {:verifier.code 0} true;
    $i706 := $sgt.i32($i691, 0);
    goto corral_source_split_6236;

  corral_source_split_6236:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb314, $bb315;

  $bb315:
    assume {:verifier.code 0} true;
    assume !($i706 == 1);
    goto $bb12;

  $bb314:
    assume $i706 == 1;
    goto corral_source_split_6238;

  corral_source_split_6238:
    assume {:verifier.code 0} true;
    goto $bb316;

  $bb316:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb317, $bb319;

  $bb319:
    assume !(1 == 1);
    goto corral_source_split_6247;

  corral_source_split_6247:
    assume {:verifier.code 0} true;
    $i707 := $eq.i32($i705, 0);
    goto corral_source_split_6248;

  corral_source_split_6248:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb320, $bb321;

  $bb321:
    assume !($i707 == 1);
    goto corral_source_split_6250;

  corral_source_split_6250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1082} $i708 := sprintf.ref.ref($p698, .str.5);
    goto corral_source_split_6251;

  corral_source_split_6251:
    assume {:verifier.code 0} true;
    $i709 := $sext.i32.i64($i708);
    goto corral_source_split_6252;

  corral_source_split_6252:
    assume {:verifier.code 0} true;
    $p710 := $add.ref($p698, $mul.ref($i709, 1));
    assume {:verifier.code 0} true;
    $p711, $p712 := $p697, $p710;
    goto $bb322;

  $bb322:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6254;

  corral_source_split_6254:
    assume {:verifier.code 0} true;
    $i719 := $sub.i32($i705, 1);
    goto corral_source_split_6255;

  corral_source_split_6255:
    assume {:verifier.code 0} true;
    $i720 := $sgt.i32($i705, 0);
    goto corral_source_split_6256;

  corral_source_split_6256:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb323, $bb324;

  $bb324:
    assume {:verifier.code 0} true;
    assume !($i720 == 1);
    goto $bb12;

  $bb323:
    assume $i720 == 1;
    goto corral_source_split_6258;

  corral_source_split_6258:
    assume {:verifier.code 0} true;
    goto $bb325;

  $bb325:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb326, $bb328;

  $bb328:
    assume !(1 == 1);
    goto corral_source_split_6267;

  corral_source_split_6267:
    assume {:verifier.code 0} true;
    $i721 := $eq.i32($i719, 0);
    goto corral_source_split_6268;

  corral_source_split_6268:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb329, $bb330;

  $bb330:
    assume !($i721 == 1);
    goto corral_source_split_6270;

  corral_source_split_6270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1084} $i722 := sprintf.ref.ref($p712, .str.5);
    goto corral_source_split_6271;

  corral_source_split_6271:
    assume {:verifier.code 0} true;
    $i723 := $sext.i32.i64($i722);
    goto corral_source_split_6272;

  corral_source_split_6272:
    assume {:verifier.code 0} true;
    $p724 := $add.ref($p712, $mul.ref($i723, 1));
    assume {:verifier.code 0} true;
    $p725, $p726 := $p711, $p724;
    goto $bb331;

  $bb331:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6274;

  corral_source_split_6274:
    assume {:verifier.code 0} true;
    $i733 := $sub.i32($i719, 1);
    goto corral_source_split_6275;

  corral_source_split_6275:
    assume {:verifier.code 0} true;
    $i734 := $sgt.i32($i719, 0);
    goto corral_source_split_6276;

  corral_source_split_6276:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb332, $bb333;

  $bb333:
    assume {:verifier.code 0} true;
    assume !($i734 == 1);
    goto $bb12;

  $bb332:
    assume $i734 == 1;
    goto corral_source_split_6278;

  corral_source_split_6278:
    assume {:verifier.code 0} true;
    goto $bb334;

  $bb334:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb335, $bb337;

  $bb337:
    assume !(1 == 1);
    goto corral_source_split_6287;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    $i735 := $eq.i32($i733, 0);
    goto corral_source_split_6288;

  corral_source_split_6288:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb338, $bb339;

  $bb339:
    assume !($i735 == 1);
    goto corral_source_split_6290;

  corral_source_split_6290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1086} $i736 := sprintf.ref.ref($p726, .str.5);
    goto corral_source_split_6291;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    $i737 := $sext.i32.i64($i736);
    goto corral_source_split_6292;

  corral_source_split_6292:
    assume {:verifier.code 0} true;
    $p738 := $add.ref($p726, $mul.ref($i737, 1));
    assume {:verifier.code 0} true;
    $p739, $p740 := $p725, $p738;
    goto $bb340;

  $bb340:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6294;

  corral_source_split_6294:
    assume {:verifier.code 0} true;
    $i747 := $sub.i32($i733, 1);
    goto corral_source_split_6295;

  corral_source_split_6295:
    assume {:verifier.code 0} true;
    $i748 := $sgt.i32($i733, 0);
    goto corral_source_split_6296;

  corral_source_split_6296:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb341, $bb342;

  $bb342:
    assume {:verifier.code 0} true;
    assume !($i748 == 1);
    goto $bb12;

  $bb341:
    assume $i748 == 1;
    goto corral_source_split_6298;

  corral_source_split_6298:
    assume {:verifier.code 0} true;
    goto $bb343;

  $bb343:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb344, $bb346;

  $bb346:
    assume !(1 == 1);
    goto corral_source_split_6307;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    $i749 := $eq.i32($i747, 0);
    goto corral_source_split_6308;

  corral_source_split_6308:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb347, $bb348;

  $bb348:
    assume !($i749 == 1);
    goto corral_source_split_6310;

  corral_source_split_6310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1088} $i750 := sprintf.ref.ref($p740, .str.5);
    goto corral_source_split_6311;

  corral_source_split_6311:
    assume {:verifier.code 0} true;
    $i751 := $sext.i32.i64($i750);
    goto corral_source_split_6312;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    $p752 := $add.ref($p740, $mul.ref($i751, 1));
    assume {:verifier.code 0} true;
    $p753, $p754 := $p739, $p752;
    goto $bb349;

  $bb349:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6314;

  corral_source_split_6314:
    assume {:verifier.code 0} true;
    $i761 := $sub.i32($i747, 1);
    goto corral_source_split_6315;

  corral_source_split_6315:
    assume {:verifier.code 0} true;
    $i762 := $sgt.i32($i747, 0);
    goto corral_source_split_6316;

  corral_source_split_6316:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb350, $bb351;

  $bb351:
    assume {:verifier.code 0} true;
    assume !($i762 == 1);
    goto $bb12;

  $bb350:
    assume $i762 == 1;
    goto corral_source_split_6318;

  corral_source_split_6318:
    assume {:verifier.code 0} true;
    goto $bb352;

  $bb352:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb353, $bb355;

  $bb355:
    assume !(1 == 1);
    goto corral_source_split_6327;

  corral_source_split_6327:
    assume {:verifier.code 0} true;
    $i763 := $eq.i32($i761, 0);
    goto corral_source_split_6328;

  corral_source_split_6328:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb356, $bb357;

  $bb357:
    assume !($i763 == 1);
    goto corral_source_split_6330;

  corral_source_split_6330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1090} $i764 := sprintf.ref.ref($p754, .str.5);
    goto corral_source_split_6331;

  corral_source_split_6331:
    assume {:verifier.code 0} true;
    $i765 := $sext.i32.i64($i764);
    goto corral_source_split_6332;

  corral_source_split_6332:
    assume {:verifier.code 0} true;
    $p766 := $add.ref($p754, $mul.ref($i765, 1));
    assume {:verifier.code 0} true;
    $p767, $p768 := $p753, $p766;
    goto $bb358;

  $bb358:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6334;

  corral_source_split_6334:
    assume {:verifier.code 0} true;
    $i775 := $sub.i32($i761, 1);
    goto corral_source_split_6335;

  corral_source_split_6335:
    assume {:verifier.code 0} true;
    $i776 := $sgt.i32($i761, 0);
    goto corral_source_split_6336;

  corral_source_split_6336:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb359, $bb360;

  $bb360:
    assume {:verifier.code 0} true;
    assume !($i776 == 1);
    goto $bb12;

  $bb359:
    assume $i776 == 1;
    goto corral_source_split_6338;

  corral_source_split_6338:
    assume {:verifier.code 0} true;
    goto $bb361;

  $bb361:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb362, $bb364;

  $bb364:
    assume !(1 == 1);
    goto corral_source_split_6347;

  corral_source_split_6347:
    assume {:verifier.code 0} true;
    $i777 := $eq.i32($i775, 0);
    goto corral_source_split_6348;

  corral_source_split_6348:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb365, $bb366;

  $bb366:
    assume !($i777 == 1);
    goto corral_source_split_6350;

  corral_source_split_6350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1092} $i778 := sprintf.ref.ref($p768, .str.5);
    goto corral_source_split_6351;

  corral_source_split_6351:
    assume {:verifier.code 0} true;
    $i779 := $sext.i32.i64($i778);
    goto corral_source_split_6352;

  corral_source_split_6352:
    assume {:verifier.code 0} true;
    $p780 := $add.ref($p768, $mul.ref($i779, 1));
    assume {:verifier.code 0} true;
    $p781, $p782 := $p767, $p780;
    goto $bb367;

  $bb367:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6354;

  corral_source_split_6354:
    assume {:verifier.code 0} true;
    $i789 := $sub.i32($i775, 1);
    goto corral_source_split_6355;

  corral_source_split_6355:
    assume {:verifier.code 0} true;
    $i790 := $sgt.i32($i775, 0);
    goto corral_source_split_6356;

  corral_source_split_6356:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb368, $bb369;

  $bb369:
    assume {:verifier.code 0} true;
    assume !($i790 == 1);
    goto $bb12;

  $bb368:
    assume $i790 == 1;
    goto corral_source_split_6358;

  corral_source_split_6358:
    assume {:verifier.code 0} true;
    goto $bb370;

  $bb370:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb371, $bb373;

  $bb373:
    assume !(0 == 1);
    goto corral_source_split_6364;

  corral_source_split_6364:
    assume {:verifier.code 0} true;
    $i791 := $eq.i32($i789, 0);
    goto corral_source_split_6365;

  corral_source_split_6365:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb374, $bb375;

  $bb375:
    assume !($i791 == 1);
    goto corral_source_split_6367;

  corral_source_split_6367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1094} vslice_dummy_var_27 := sprintf.ref.ref($p782, .str.5);
    assume {:verifier.code 0} true;
    goto $bb376;

  $bb376:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb374:
    assume {:verifier.code 0} true;
    assume $i791 == 1;
    goto $bb372;

  $bb372:
    assume {:verifier.code 0} true;
    $i793 := $load.i8($M.0, $p781);
    goto corral_source_split_6360;

  corral_source_split_6360:
    assume {:verifier.code 0} true;
    $i794 := $zext.i8.i32($i793);
    goto corral_source_split_6361;

  corral_source_split_6361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1093} vslice_dummy_var_26 := sprintf.ref.ref.i32($p782, .str.4, $i794);
    goto corral_source_split_6362;

  corral_source_split_6362:
    assume {:verifier.code 0} true;
    goto $bb376;

  $bb371:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb372;

  $bb365:
    assume {:verifier.code 0} true;
    assume $i777 == 1;
    goto $bb363;

  $bb363:
    assume {:verifier.code 0} true;
    $p783 := $add.ref($p767, $mul.ref(1, 1));
    goto corral_source_split_6340;

  corral_source_split_6340:
    assume {:verifier.code 0} true;
    $i784 := $load.i8($M.0, $p767);
    goto corral_source_split_6341;

  corral_source_split_6341:
    assume {:verifier.code 0} true;
    $i785 := $zext.i8.i32($i784);
    goto corral_source_split_6342;

  corral_source_split_6342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1091} $i786 := sprintf.ref.ref.i32($p768, .str.4, $i785);
    goto corral_source_split_6343;

  corral_source_split_6343:
    assume {:verifier.code 0} true;
    $i787 := $sext.i32.i64($i786);
    goto corral_source_split_6344;

  corral_source_split_6344:
    assume {:verifier.code 0} true;
    $p788 := $add.ref($p768, $mul.ref($i787, 1));
    goto corral_source_split_6345;

  corral_source_split_6345:
    assume {:verifier.code 0} true;
    $p781, $p782 := $p783, $p788;
    goto $bb367;

  $bb362:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb363;

  $bb356:
    assume {:verifier.code 0} true;
    assume $i763 == 1;
    goto $bb354;

  $bb354:
    assume {:verifier.code 0} true;
    $p769 := $add.ref($p753, $mul.ref(1, 1));
    goto corral_source_split_6320;

  corral_source_split_6320:
    assume {:verifier.code 0} true;
    $i770 := $load.i8($M.0, $p753);
    goto corral_source_split_6321;

  corral_source_split_6321:
    assume {:verifier.code 0} true;
    $i771 := $zext.i8.i32($i770);
    goto corral_source_split_6322;

  corral_source_split_6322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1089} $i772 := sprintf.ref.ref.i32($p754, .str.4, $i771);
    goto corral_source_split_6323;

  corral_source_split_6323:
    assume {:verifier.code 0} true;
    $i773 := $sext.i32.i64($i772);
    goto corral_source_split_6324;

  corral_source_split_6324:
    assume {:verifier.code 0} true;
    $p774 := $add.ref($p754, $mul.ref($i773, 1));
    goto corral_source_split_6325;

  corral_source_split_6325:
    assume {:verifier.code 0} true;
    $p767, $p768 := $p769, $p774;
    goto $bb358;

  $bb353:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb354;

  $bb347:
    assume {:verifier.code 0} true;
    assume $i749 == 1;
    goto $bb345;

  $bb345:
    assume {:verifier.code 0} true;
    $p755 := $add.ref($p739, $mul.ref(1, 1));
    goto corral_source_split_6300;

  corral_source_split_6300:
    assume {:verifier.code 0} true;
    $i756 := $load.i8($M.0, $p739);
    goto corral_source_split_6301;

  corral_source_split_6301:
    assume {:verifier.code 0} true;
    $i757 := $zext.i8.i32($i756);
    goto corral_source_split_6302;

  corral_source_split_6302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1087} $i758 := sprintf.ref.ref.i32($p740, .str.4, $i757);
    goto corral_source_split_6303;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    $i759 := $sext.i32.i64($i758);
    goto corral_source_split_6304;

  corral_source_split_6304:
    assume {:verifier.code 0} true;
    $p760 := $add.ref($p740, $mul.ref($i759, 1));
    goto corral_source_split_6305;

  corral_source_split_6305:
    assume {:verifier.code 0} true;
    $p753, $p754 := $p755, $p760;
    goto $bb349;

  $bb344:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb345;

  $bb338:
    assume {:verifier.code 0} true;
    assume $i735 == 1;
    goto $bb336;

  $bb336:
    assume {:verifier.code 0} true;
    $p741 := $add.ref($p725, $mul.ref(1, 1));
    goto corral_source_split_6280;

  corral_source_split_6280:
    assume {:verifier.code 0} true;
    $i742 := $load.i8($M.0, $p725);
    goto corral_source_split_6281;

  corral_source_split_6281:
    assume {:verifier.code 0} true;
    $i743 := $zext.i8.i32($i742);
    goto corral_source_split_6282;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1085} $i744 := sprintf.ref.ref.i32($p726, .str.4, $i743);
    goto corral_source_split_6283;

  corral_source_split_6283:
    assume {:verifier.code 0} true;
    $i745 := $sext.i32.i64($i744);
    goto corral_source_split_6284;

  corral_source_split_6284:
    assume {:verifier.code 0} true;
    $p746 := $add.ref($p726, $mul.ref($i745, 1));
    goto corral_source_split_6285;

  corral_source_split_6285:
    assume {:verifier.code 0} true;
    $p739, $p740 := $p741, $p746;
    goto $bb340;

  $bb335:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb336;

  $bb329:
    assume {:verifier.code 0} true;
    assume $i721 == 1;
    goto $bb327;

  $bb327:
    assume {:verifier.code 0} true;
    $p727 := $add.ref($p711, $mul.ref(1, 1));
    goto corral_source_split_6260;

  corral_source_split_6260:
    assume {:verifier.code 0} true;
    $i728 := $load.i8($M.0, $p711);
    goto corral_source_split_6261;

  corral_source_split_6261:
    assume {:verifier.code 0} true;
    $i729 := $zext.i8.i32($i728);
    goto corral_source_split_6262;

  corral_source_split_6262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1083} $i730 := sprintf.ref.ref.i32($p712, .str.4, $i729);
    goto corral_source_split_6263;

  corral_source_split_6263:
    assume {:verifier.code 0} true;
    $i731 := $sext.i32.i64($i730);
    goto corral_source_split_6264;

  corral_source_split_6264:
    assume {:verifier.code 0} true;
    $p732 := $add.ref($p712, $mul.ref($i731, 1));
    goto corral_source_split_6265;

  corral_source_split_6265:
    assume {:verifier.code 0} true;
    $p725, $p726 := $p727, $p732;
    goto $bb331;

  $bb326:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb327;

  $bb320:
    assume {:verifier.code 0} true;
    assume $i707 == 1;
    goto $bb318;

  $bb318:
    assume {:verifier.code 0} true;
    $p713 := $add.ref($p697, $mul.ref(1, 1));
    goto corral_source_split_6240;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    $i714 := $load.i8($M.0, $p697);
    goto corral_source_split_6241;

  corral_source_split_6241:
    assume {:verifier.code 0} true;
    $i715 := $zext.i8.i32($i714);
    goto corral_source_split_6242;

  corral_source_split_6242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1081} $i716 := sprintf.ref.ref.i32($p698, .str.4, $i715);
    goto corral_source_split_6243;

  corral_source_split_6243:
    assume {:verifier.code 0} true;
    $i717 := $sext.i32.i64($i716);
    goto corral_source_split_6244;

  corral_source_split_6244:
    assume {:verifier.code 0} true;
    $p718 := $add.ref($p698, $mul.ref($i717, 1));
    goto corral_source_split_6245;

  corral_source_split_6245:
    assume {:verifier.code 0} true;
    $p711, $p712 := $p713, $p718;
    goto $bb322;

  $bb317:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb318;

  $bb311:
    assume {:verifier.code 0} true;
    assume $i693 == 1;
    goto $bb309;

  $bb309:
    assume {:verifier.code 0} true;
    $p699 := $add.ref($p683, $mul.ref(1, 1));
    goto corral_source_split_6220;

  corral_source_split_6220:
    assume {:verifier.code 0} true;
    $i700 := $load.i8($M.0, $p683);
    goto corral_source_split_6221;

  corral_source_split_6221:
    assume {:verifier.code 0} true;
    $i701 := $zext.i8.i32($i700);
    goto corral_source_split_6222;

  corral_source_split_6222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1079} $i702 := sprintf.ref.ref.i32($p684, .str.4, $i701);
    goto corral_source_split_6223;

  corral_source_split_6223:
    assume {:verifier.code 0} true;
    $i703 := $sext.i32.i64($i702);
    goto corral_source_split_6224;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    $p704 := $add.ref($p684, $mul.ref($i703, 1));
    goto corral_source_split_6225;

  corral_source_split_6225:
    assume {:verifier.code 0} true;
    $p697, $p698 := $p699, $p704;
    goto $bb313;

  $bb308:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb309;

  $bb302:
    assume {:verifier.code 0} true;
    assume $i679 == 1;
    goto $bb300;

  $bb300:
    assume {:verifier.code 0} true;
    $p685 := $add.ref($p669, $mul.ref(1, 1));
    goto corral_source_split_6200;

  corral_source_split_6200:
    assume {:verifier.code 0} true;
    $i686 := $load.i8($M.0, $p669);
    goto corral_source_split_6201;

  corral_source_split_6201:
    assume {:verifier.code 0} true;
    $i687 := $zext.i8.i32($i686);
    goto corral_source_split_6202;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1077} $i688 := sprintf.ref.ref.i32($p670, .str.4, $i687);
    goto corral_source_split_6203;

  corral_source_split_6203:
    assume {:verifier.code 0} true;
    $i689 := $sext.i32.i64($i688);
    goto corral_source_split_6204;

  corral_source_split_6204:
    assume {:verifier.code 0} true;
    $p690 := $add.ref($p670, $mul.ref($i689, 1));
    goto corral_source_split_6205;

  corral_source_split_6205:
    assume {:verifier.code 0} true;
    $p683, $p684 := $p685, $p690;
    goto $bb304;

  $bb299:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb300;

  $bb293:
    assume {:verifier.code 0} true;
    assume $i665 == 1;
    goto $bb291;

  $bb291:
    assume {:verifier.code 0} true;
    $p671 := $add.ref($p655, $mul.ref(1, 1));
    goto corral_source_split_6180;

  corral_source_split_6180:
    assume {:verifier.code 0} true;
    $i672 := $load.i8($M.0, $p655);
    goto corral_source_split_6181;

  corral_source_split_6181:
    assume {:verifier.code 0} true;
    $i673 := $zext.i8.i32($i672);
    goto corral_source_split_6182;

  corral_source_split_6182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1075} $i674 := sprintf.ref.ref.i32($p656, .str.4, $i673);
    goto corral_source_split_6183;

  corral_source_split_6183:
    assume {:verifier.code 0} true;
    $i675 := $sext.i32.i64($i674);
    goto corral_source_split_6184;

  corral_source_split_6184:
    assume {:verifier.code 0} true;
    $p676 := $add.ref($p656, $mul.ref($i675, 1));
    goto corral_source_split_6185;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    $p669, $p670 := $p671, $p676;
    goto $bb295;

  $bb290:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb291;

  $bb284:
    assume {:verifier.code 0} true;
    assume $i651 == 1;
    goto $bb282;

  $bb282:
    assume {:verifier.code 0} true;
    $p657 := $add.ref($p641, $mul.ref(1, 1));
    goto corral_source_split_6160;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    $i658 := $load.i8($M.0, $p641);
    goto corral_source_split_6161;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    $i659 := $zext.i8.i32($i658);
    goto corral_source_split_6162;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1073} $i660 := sprintf.ref.ref.i32($p642, .str.4, $i659);
    goto corral_source_split_6163;

  corral_source_split_6163:
    assume {:verifier.code 0} true;
    $i661 := $sext.i32.i64($i660);
    goto corral_source_split_6164;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    $p662 := $add.ref($p642, $mul.ref($i661, 1));
    goto corral_source_split_6165;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    $p655, $p656 := $p657, $p662;
    goto $bb286;

  $bb281:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb282;

  $bb275:
    assume {:verifier.code 0} true;
    assume $i637 == 1;
    goto $bb273;

  $bb273:
    assume {:verifier.code 0} true;
    $p643 := $add.ref($p627, $mul.ref(1, 1));
    goto corral_source_split_6140;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    $i644 := $load.i8($M.0, $p627);
    goto corral_source_split_6141;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    $i645 := $zext.i8.i32($i644);
    goto corral_source_split_6142;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1071} $i646 := sprintf.ref.ref.i32($p628, .str.4, $i645);
    goto corral_source_split_6143;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    $i647 := $sext.i32.i64($i646);
    goto corral_source_split_6144;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    $p648 := $add.ref($p628, $mul.ref($i647, 1));
    goto corral_source_split_6145;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    $p641, $p642 := $p643, $p648;
    goto $bb277;

  $bb272:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb273;

  $bb266:
    assume {:verifier.code 0} true;
    assume $i623 == 1;
    goto $bb264;

  $bb264:
    assume {:verifier.code 0} true;
    $p629 := $add.ref($p613, $mul.ref(1, 1));
    goto corral_source_split_6120;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    $i630 := $load.i8($M.0, $p613);
    goto corral_source_split_6121;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    $i631 := $zext.i8.i32($i630);
    goto corral_source_split_6122;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1069} $i632 := sprintf.ref.ref.i32($p614, .str.4, $i631);
    goto corral_source_split_6123;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    $i633 := $sext.i32.i64($i632);
    goto corral_source_split_6124;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    $p634 := $add.ref($p614, $mul.ref($i633, 1));
    goto corral_source_split_6125;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    $p627, $p628 := $p629, $p634;
    goto $bb268;

  $bb263:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb264;

  $bb257:
    assume {:verifier.code 0} true;
    assume $i609 == 1;
    goto $bb255;

  $bb255:
    assume {:verifier.code 0} true;
    $p615 := $add.ref($p599, $mul.ref(1, 1));
    goto corral_source_split_6100;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    $i616 := $load.i8($M.0, $p599);
    goto corral_source_split_6101;

  corral_source_split_6101:
    assume {:verifier.code 0} true;
    $i617 := $zext.i8.i32($i616);
    goto corral_source_split_6102;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1067} $i618 := sprintf.ref.ref.i32($p600, .str.4, $i617);
    goto corral_source_split_6103;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    $i619 := $sext.i32.i64($i618);
    goto corral_source_split_6104;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    $p620 := $add.ref($p600, $mul.ref($i619, 1));
    goto corral_source_split_6105;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    $p613, $p614 := $p615, $p620;
    goto $bb259;

  $bb254:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb255;

  $bb248:
    assume {:verifier.code 0} true;
    assume $i595 == 1;
    goto $bb246;

  $bb246:
    assume {:verifier.code 0} true;
    $p601 := $add.ref($p585, $mul.ref(1, 1));
    goto corral_source_split_6080;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    $i602 := $load.i8($M.0, $p585);
    goto corral_source_split_6081;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    $i603 := $zext.i8.i32($i602);
    goto corral_source_split_6082;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1065} $i604 := sprintf.ref.ref.i32($p586, .str.4, $i603);
    goto corral_source_split_6083;

  corral_source_split_6083:
    assume {:verifier.code 0} true;
    $i605 := $sext.i32.i64($i604);
    goto corral_source_split_6084;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    $p606 := $add.ref($p586, $mul.ref($i605, 1));
    goto corral_source_split_6085;

  corral_source_split_6085:
    assume {:verifier.code 0} true;
    $p599, $p600 := $p601, $p606;
    goto $bb250;

  $bb245:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb246;

  $bb239:
    assume {:verifier.code 0} true;
    assume $i581 == 1;
    goto $bb237;

  $bb237:
    assume {:verifier.code 0} true;
    $p587 := $add.ref($p571, $mul.ref(1, 1));
    goto corral_source_split_6060;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    $i588 := $load.i8($M.0, $p571);
    goto corral_source_split_6061;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    $i589 := $zext.i8.i32($i588);
    goto corral_source_split_6062;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1063} $i590 := sprintf.ref.ref.i32($p572, .str.4, $i589);
    goto corral_source_split_6063;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    $i591 := $sext.i32.i64($i590);
    goto corral_source_split_6064;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    $p592 := $add.ref($p572, $mul.ref($i591, 1));
    goto corral_source_split_6065;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    $p585, $p586 := $p587, $p592;
    goto $bb241;

  $bb236:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb237;

  $bb230:
    assume {:verifier.code 0} true;
    assume $i567 == 1;
    goto $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    $p573 := $add.ref($p557, $mul.ref(1, 1));
    goto corral_source_split_6040;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    $i574 := $load.i8($M.0, $p557);
    goto corral_source_split_6041;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    $i575 := $zext.i8.i32($i574);
    goto corral_source_split_6042;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1061} $i576 := sprintf.ref.ref.i32($p558, .str.4, $i575);
    goto corral_source_split_6043;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    $i577 := $sext.i32.i64($i576);
    goto corral_source_split_6044;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    $p578 := $add.ref($p558, $mul.ref($i577, 1));
    goto corral_source_split_6045;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    $p571, $p572 := $p573, $p578;
    goto $bb232;

  $bb227:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb228;

  $bb221:
    assume {:verifier.code 0} true;
    assume $i553 == 1;
    goto $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    $p559 := $add.ref($p543, $mul.ref(1, 1));
    goto corral_source_split_6020;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    $i560 := $load.i8($M.0, $p543);
    goto corral_source_split_6021;

  corral_source_split_6021:
    assume {:verifier.code 0} true;
    $i561 := $zext.i8.i32($i560);
    goto corral_source_split_6022;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1059} $i562 := sprintf.ref.ref.i32($p544, .str.4, $i561);
    goto corral_source_split_6023;

  corral_source_split_6023:
    assume {:verifier.code 0} true;
    $i563 := $sext.i32.i64($i562);
    goto corral_source_split_6024;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    $p564 := $add.ref($p544, $mul.ref($i563, 1));
    goto corral_source_split_6025;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    $p557, $p558 := $p559, $p564;
    goto $bb223;

  $bb218:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb219;

  $bb212:
    assume {:verifier.code 0} true;
    assume $i539 == 1;
    goto $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    $p545 := $add.ref($p529, $mul.ref(1, 1));
    goto corral_source_split_6000;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    $i546 := $load.i8($M.0, $p529);
    goto corral_source_split_6001;

  corral_source_split_6001:
    assume {:verifier.code 0} true;
    $i547 := $zext.i8.i32($i546);
    goto corral_source_split_6002;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1057} $i548 := sprintf.ref.ref.i32($p530, .str.4, $i547);
    goto corral_source_split_6003;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    $i549 := $sext.i32.i64($i548);
    goto corral_source_split_6004;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    $p550 := $add.ref($p530, $mul.ref($i549, 1));
    goto corral_source_split_6005;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    $p543, $p544 := $p545, $p550;
    goto $bb214;

  $bb209:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb210;

  $bb203:
    assume {:verifier.code 0} true;
    assume $i525 == 1;
    goto $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    $p531 := $add.ref($p515, $mul.ref(1, 1));
    goto corral_source_split_5980;

  corral_source_split_5980:
    assume {:verifier.code 0} true;
    $i532 := $load.i8($M.0, $p515);
    goto corral_source_split_5981;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    $i533 := $zext.i8.i32($i532);
    goto corral_source_split_5982;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1055} $i534 := sprintf.ref.ref.i32($p516, .str.4, $i533);
    goto corral_source_split_5983;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    $i535 := $sext.i32.i64($i534);
    goto corral_source_split_5984;

  corral_source_split_5984:
    assume {:verifier.code 0} true;
    $p536 := $add.ref($p516, $mul.ref($i535, 1));
    goto corral_source_split_5985;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    $p529, $p530 := $p531, $p536;
    goto $bb205;

  $bb200:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb201;

  $bb194:
    assume {:verifier.code 0} true;
    assume $i511 == 1;
    goto $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    $p517 := $add.ref($p501, $mul.ref(1, 1));
    goto corral_source_split_5960;

  corral_source_split_5960:
    assume {:verifier.code 0} true;
    $i518 := $load.i8($M.0, $p501);
    goto corral_source_split_5961;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    $i519 := $zext.i8.i32($i518);
    goto corral_source_split_5962;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1053} $i520 := sprintf.ref.ref.i32($p502, .str.4, $i519);
    goto corral_source_split_5963;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    $i521 := $sext.i32.i64($i520);
    goto corral_source_split_5964;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    $p522 := $add.ref($p502, $mul.ref($i521, 1));
    goto corral_source_split_5965;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    $p515, $p516 := $p517, $p522;
    goto $bb196;

  $bb191:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb192;

  $bb185:
    assume {:verifier.code 0} true;
    assume $i497 == 1;
    goto $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    $p503 := $add.ref($p487, $mul.ref(1, 1));
    goto corral_source_split_5940;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    $i504 := $load.i8($M.0, $p487);
    goto corral_source_split_5941;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    $i505 := $zext.i8.i32($i504);
    goto corral_source_split_5942;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1051} $i506 := sprintf.ref.ref.i32($p488, .str.4, $i505);
    goto corral_source_split_5943;

  corral_source_split_5943:
    assume {:verifier.code 0} true;
    $i507 := $sext.i32.i64($i506);
    goto corral_source_split_5944;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    $p508 := $add.ref($p488, $mul.ref($i507, 1));
    goto corral_source_split_5945;

  corral_source_split_5945:
    assume {:verifier.code 0} true;
    $p501, $p502 := $p503, $p508;
    goto $bb187;

  $bb182:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb183;

  $bb176:
    assume {:verifier.code 0} true;
    assume $i483 == 1;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    $p489 := $add.ref($p473, $mul.ref(1, 1));
    goto corral_source_split_5920;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    $i490 := $load.i8($M.0, $p473);
    goto corral_source_split_5921;

  corral_source_split_5921:
    assume {:verifier.code 0} true;
    $i491 := $zext.i8.i32($i490);
    goto corral_source_split_5922;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1049} $i492 := sprintf.ref.ref.i32($p474, .str.4, $i491);
    goto corral_source_split_5923;

  corral_source_split_5923:
    assume {:verifier.code 0} true;
    $i493 := $sext.i32.i64($i492);
    goto corral_source_split_5924;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    $p494 := $add.ref($p474, $mul.ref($i493, 1));
    goto corral_source_split_5925;

  corral_source_split_5925:
    assume {:verifier.code 0} true;
    $p487, $p488 := $p489, $p494;
    goto $bb178;

  $bb173:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb174;

  $bb167:
    assume {:verifier.code 0} true;
    assume $i469 == 1;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    $p475 := $add.ref($p459, $mul.ref(1, 1));
    goto corral_source_split_5900;

  corral_source_split_5900:
    assume {:verifier.code 0} true;
    $i476 := $load.i8($M.0, $p459);
    goto corral_source_split_5901;

  corral_source_split_5901:
    assume {:verifier.code 0} true;
    $i477 := $zext.i8.i32($i476);
    goto corral_source_split_5902;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1047} $i478 := sprintf.ref.ref.i32($p460, .str.4, $i477);
    goto corral_source_split_5903;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    $i479 := $sext.i32.i64($i478);
    goto corral_source_split_5904;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    $p480 := $add.ref($p460, $mul.ref($i479, 1));
    goto corral_source_split_5905;

  corral_source_split_5905:
    assume {:verifier.code 0} true;
    $p473, $p474 := $p475, $p480;
    goto $bb169;

  $bb164:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb165;

  $bb158:
    assume {:verifier.code 0} true;
    assume $i455 == 1;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    $p461 := $add.ref($p445, $mul.ref(1, 1));
    goto corral_source_split_5880;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    $i462 := $load.i8($M.0, $p445);
    goto corral_source_split_5881;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    $i463 := $zext.i8.i32($i462);
    goto corral_source_split_5882;

  corral_source_split_5882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1045} $i464 := sprintf.ref.ref.i32($p446, .str.4, $i463);
    goto corral_source_split_5883;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    $i465 := $sext.i32.i64($i464);
    goto corral_source_split_5884;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    $p466 := $add.ref($p446, $mul.ref($i465, 1));
    goto corral_source_split_5885;

  corral_source_split_5885:
    assume {:verifier.code 0} true;
    $p459, $p460 := $p461, $p466;
    goto $bb160;

  $bb155:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb156;

  $bb149:
    assume {:verifier.code 0} true;
    assume $i441 == 1;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    $p447 := $add.ref($p431, $mul.ref(1, 1));
    goto corral_source_split_5860;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    $i448 := $load.i8($M.0, $p431);
    goto corral_source_split_5861;

  corral_source_split_5861:
    assume {:verifier.code 0} true;
    $i449 := $zext.i8.i32($i448);
    goto corral_source_split_5862;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1043} $i450 := sprintf.ref.ref.i32($p432, .str.4, $i449);
    goto corral_source_split_5863;

  corral_source_split_5863:
    assume {:verifier.code 0} true;
    $i451 := $sext.i32.i64($i450);
    goto corral_source_split_5864;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    $p452 := $add.ref($p432, $mul.ref($i451, 1));
    goto corral_source_split_5865;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    $p445, $p446 := $p447, $p452;
    goto $bb151;

  $bb146:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb147;

  $bb140:
    assume {:verifier.code 0} true;
    assume $i427 == 1;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    $p433 := $add.ref($p417, $mul.ref(1, 1));
    goto corral_source_split_5840;

  corral_source_split_5840:
    assume {:verifier.code 0} true;
    $i434 := $load.i8($M.0, $p417);
    goto corral_source_split_5841;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    $i435 := $zext.i8.i32($i434);
    goto corral_source_split_5842;

  corral_source_split_5842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1041} $i436 := sprintf.ref.ref.i32($p418, .str.4, $i435);
    goto corral_source_split_5843;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    $i437 := $sext.i32.i64($i436);
    goto corral_source_split_5844;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    $p438 := $add.ref($p418, $mul.ref($i437, 1));
    goto corral_source_split_5845;

  corral_source_split_5845:
    assume {:verifier.code 0} true;
    $p431, $p432 := $p433, $p438;
    goto $bb142;

  $bb137:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb138;

  $bb131:
    assume {:verifier.code 0} true;
    assume $i413 == 1;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    $p419 := $add.ref($p403, $mul.ref(1, 1));
    goto corral_source_split_5820;

  corral_source_split_5820:
    assume {:verifier.code 0} true;
    $i420 := $load.i8($M.0, $p403);
    goto corral_source_split_5821;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    $i421 := $zext.i8.i32($i420);
    goto corral_source_split_5822;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1039} $i422 := sprintf.ref.ref.i32($p404, .str.4, $i421);
    goto corral_source_split_5823;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    $i423 := $sext.i32.i64($i422);
    goto corral_source_split_5824;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    $p424 := $add.ref($p404, $mul.ref($i423, 1));
    goto corral_source_split_5825;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    $p417, $p418 := $p419, $p424;
    goto $bb133;

  $bb128:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb129;

  $bb122:
    assume {:verifier.code 0} true;
    assume $i399 == 1;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    $p405 := $add.ref($p389, $mul.ref(1, 1));
    goto corral_source_split_5800;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    $i406 := $load.i8($M.0, $p389);
    goto corral_source_split_5801;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    $i407 := $zext.i8.i32($i406);
    goto corral_source_split_5802;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1037} $i408 := sprintf.ref.ref.i32($p390, .str.4, $i407);
    goto corral_source_split_5803;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    $i409 := $sext.i32.i64($i408);
    goto corral_source_split_5804;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    $p410 := $add.ref($p390, $mul.ref($i409, 1));
    goto corral_source_split_5805;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    $p403, $p404 := $p405, $p410;
    goto $bb124;

  $bb119:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb120;

  $bb113:
    assume {:verifier.code 0} true;
    assume $i385 == 1;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    $p391 := $add.ref($p43, $mul.ref(1, 1));
    goto corral_source_split_5780;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    $i392 := $load.i8($M.0, $p43);
    goto corral_source_split_5781;

  corral_source_split_5781:
    assume {:verifier.code 0} true;
    $i393 := $zext.i8.i32($i392);
    goto corral_source_split_5782;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1035} $i394 := sprintf.ref.ref.i32($p44, .str.4, $i393);
    goto corral_source_split_5783;

  corral_source_split_5783:
    assume {:verifier.code 0} true;
    $i395 := $sext.i32.i64($i394);
    goto corral_source_split_5784;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    $p396 := $add.ref($p44, $mul.ref($i395, 1));
    goto corral_source_split_5785;

  corral_source_split_5785:
    assume {:verifier.code 0} true;
    $p389, $p390 := $p391, $p396;
    goto $bb115;

  $bb110:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb111;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i35 == 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($p33, $mul.ref(1, 1));
    goto corral_source_split_5305;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.0, $p33);
    goto corral_source_split_5306;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i38);
    goto corral_source_split_5307;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 990} $i40 := sprintf.ref.ref.i32($p30, .str.4, $i39);
    call {:si_unique_call 991} {:cexpr "tmp___2"} boogie_si_record_i32($i40);
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    $i41 := $sext.i32.i64($i40);
    goto corral_source_split_5309;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($p30, $mul.ref($i41, 1));
    goto corral_source_split_5310;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    $p43, $p44 := $p37, $p42;
    goto $bb9;

  $bb4:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb5;

  $bb60_dummy:
    assume false;
    return;

  $bb62_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5483;

  $bb71_dummy:
    assume false;
    return;

  $bb22_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5349;

  corral_source_split_5369_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5278;
}



const ftdi_response_requeue_work: ref;

axiom ftdi_response_requeue_work == $sub.ref(0, 391931);

procedure ftdi_response_requeue_work($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.7, $M.6, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12, $M.0, $M.1, $M.16, $M.19, $M.20, $M.25, $M.23, $M.24, $M.4, $CurrAddr, $M.3, $M.22, assertsPassed;



implementation ftdi_response_requeue_work($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i8;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var vslice_dummy_var_30: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1155} {:cexpr "ftdi_response_requeue_work:arg:delta"} boogie_si_record_i32($i1);
    goto corral_source_split_6958;

  corral_source_split_6958:
    assume {:verifier.code 0} true;
    $p2 := $M.18;
    goto corral_source_split_6959;

  corral_source_split_6959:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5672, 1));
    goto corral_source_split_6960;

  corral_source_split_6960:
    assume {:verifier.code 0} true;
    $i4 := $zext.i32.i64($i1);
    goto corral_source_split_6961;

  corral_source_split_6961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1156} $i5 := queue_delayed_work($p2, $p3, $i4);
    goto corral_source_split_6962;

  corral_source_split_6962:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i5);
    call {:si_unique_call 1157} {:cexpr "tmp"} boogie_si_record_i8($i6);
    goto corral_source_split_6963;

  corral_source_split_6963:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_6964;

  corral_source_split_6964:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6968;

  corral_source_split_6968:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_6969;

  corral_source_split_6969:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_6971;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7436, 1));
    goto corral_source_split_6972;

  corral_source_split_6972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1158} vslice_dummy_var_30 := kref_put($p10, ftdi_elan_delete);
    goto SeqInstr_703, SeqInstr_704;

  SeqInstr_704:
    assume assertsPassed;
    goto SeqInstr_705;

  SeqInstr_705:
    goto corral_source_split_6973;

  corral_source_split_6973:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_703:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_6966;

  corral_source_split_6966:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;
}



const have_ed_set_response: ref;

axiom have_ed_set_response == $sub.ref(0, 392963);

procedure have_ed_set_response($p0: ref, $p1: ref, $i2: i16, $i3: i32, $i4: i32, $p5: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.4, assertsPassed;



implementation have_ed_set_response($p0: ref, $p1: ref, $i2: i16, $i3: i32, $i4: i32, $p5: ref) returns ($r: ref)
{
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $p17: ref;
  var $i18: i1;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i34: i32;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i1;
  var $i39: i1;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i53: i32;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i1;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p33: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1159} {:cexpr "have_ed_set_response:arg:ed_length"} boogie_si_record_i16($i2);
    call {:si_unique_call 1160} {:cexpr "have_ed_set_response:arg:ed_number"} boogie_si_record_i32($i3);
    call {:si_unique_call 1161} {:cexpr "have_ed_set_response:arg:ed_type"} boogie_si_record_i32($i4);
    goto corral_source_split_6975;

  corral_source_split_6975:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i2);
    goto corral_source_split_6976;

  corral_source_split_6976:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 2047);
    call {:si_unique_call 1162} {:cexpr "payload"} boogie_si_record_i32($i7);
    goto corral_source_split_6977;

  corral_source_split_6977:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(16, 1));
    goto corral_source_split_6978;

  corral_source_split_6978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1163} ldv_mutex_lock_38($p8);
    goto SeqInstr_706, SeqInstr_707;

  SeqInstr_707:
    assume assertsPassed;
    goto SeqInstr_708;

  SeqInstr_708:
    goto corral_source_split_6979;

  corral_source_split_6979:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_6980;

  corral_source_split_6980:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, 0);
    goto corral_source_split_6981;

  corral_source_split_6981:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i2);
    goto corral_source_split_6982;

  corral_source_split_6982:
    assume {:verifier.code 0} true;
    $i11 := $ashr.i32($i10, 15);
    goto corral_source_split_6983;

  corral_source_split_6983:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 1);
    goto corral_source_split_6984;

  corral_source_split_6984:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(44, 1));
    goto corral_source_split_6985;

  corral_source_split_6985:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, $i12);
    goto corral_source_split_6986;

  corral_source_split_6986:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i2);
    goto corral_source_split_6987;

  corral_source_split_6987:
    assume {:verifier.code 0} true;
    $i15 := $ashr.i32($i14, 11);
    goto corral_source_split_6988;

  corral_source_split_6988:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, 15);
    goto corral_source_split_6989;

  corral_source_split_6989:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(28, 1));
    goto corral_source_split_6990;

  corral_source_split_6990:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, $i16);
    goto corral_source_split_6991;

  corral_source_split_6991:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i4, 2);
    goto corral_source_split_6992;

  corral_source_split_6992:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    goto corral_source_split_6997;

  corral_source_split_6997:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i4, 3);
    goto corral_source_split_6998;

  corral_source_split_6998:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i38 == 1);
    goto corral_source_split_7036;

  corral_source_split_7036:
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i4, 1);
    goto corral_source_split_7037;

  corral_source_split_7037:
    assume {:verifier.code 0} true;
    assume {:branchcond $i57} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i57 == 1);
    goto corral_source_split_7088;

  corral_source_split_7088:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(52, 1));
    goto corral_source_split_7089;

  corral_source_split_7089:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p68, 0);
    goto corral_source_split_7090;

  corral_source_split_7090:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(16, 1));
    goto corral_source_split_7091;

  corral_source_split_7091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1172} ldv_mutex_unlock_44($p69);
    goto SeqInstr_724, SeqInstr_725;

  SeqInstr_725:
    assume assertsPassed;
    goto SeqInstr_726;

  SeqInstr_726:
    goto corral_source_split_7092;

  corral_source_split_7092:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7444, 1));
    goto corral_source_split_7093;

  corral_source_split_7093:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p70);
    goto corral_source_split_7094;

  corral_source_split_7094:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($p71, $mul.ref(4, 1));
    goto corral_source_split_7095;

  corral_source_split_7095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1173} ftdi_elan_do_callback($p0, $p1, $p72, $i7);
    goto corral_source_split_7096;

  corral_source_split_7096:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(8476, 1));
    goto corral_source_split_7097;

  corral_source_split_7097:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p73, 0);
    goto corral_source_split_7098;

  corral_source_split_7098:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(8472, 1));
    goto corral_source_split_7099;

  corral_source_split_7099:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p74, 4);
    goto corral_source_split_7100;

  corral_source_split_7100:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(8480, 1));
    goto corral_source_split_7101;

  corral_source_split_7101:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p75, 0);
    goto corral_source_split_7102;

  corral_source_split_7102:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7444, 1));
    goto corral_source_split_7103;

  corral_source_split_7103:
    assume {:verifier.code 0} true;
    goto corral_source_split_7104;

  corral_source_split_7104:
    assume {:verifier.code 0} true;
    $p33 := $p76;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_7031;

  corral_source_split_7031:
    assume {:verifier.code 0} true;
    $r := $p33;
    return;

  SeqInstr_724:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i57 == 1;
    goto corral_source_split_7070;

  corral_source_split_7070:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(52, 1));
    goto corral_source_split_7071;

  corral_source_split_7071:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p58, 0);
    goto corral_source_split_7072;

  corral_source_split_7072:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(16, 1));
    goto corral_source_split_7073;

  corral_source_split_7073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1170} ldv_mutex_unlock_43($p59);
    goto SeqInstr_721, SeqInstr_722;

  SeqInstr_722:
    assume assertsPassed;
    goto SeqInstr_723;

  SeqInstr_723:
    goto corral_source_split_7074;

  corral_source_split_7074:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7444, 1));
    goto corral_source_split_7075;

  corral_source_split_7075:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p60);
    goto corral_source_split_7076;

  corral_source_split_7076:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($p61, $mul.ref(4, 1));
    goto corral_source_split_7077;

  corral_source_split_7077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1171} ftdi_elan_do_callback($p0, $p1, $p62, $i7);
    goto corral_source_split_7078;

  corral_source_split_7078:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(8476, 1));
    goto corral_source_split_7079;

  corral_source_split_7079:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p63, 0);
    goto corral_source_split_7080;

  corral_source_split_7080:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(8472, 1));
    goto corral_source_split_7081;

  corral_source_split_7081:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p64, 4);
    goto corral_source_split_7082;

  corral_source_split_7082:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(8480, 1));
    goto corral_source_split_7083;

  corral_source_split_7083:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p65, 0);
    goto corral_source_split_7084;

  corral_source_split_7084:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7444, 1));
    goto corral_source_split_7085;

  corral_source_split_7085:
    assume {:verifier.code 0} true;
    goto corral_source_split_7086;

  corral_source_split_7086:
    assume {:verifier.code 0} true;
    $p33 := $p66;
    goto $bb8;

  SeqInstr_721:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i38 == 1;
    goto corral_source_split_7033;

  corral_source_split_7033:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i7, 0);
    goto corral_source_split_7034;

  corral_source_split_7034:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb13;

  $bb13:
    assume !($i39 == 1);
    goto corral_source_split_7056;

  corral_source_split_7056:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(52, 1));
    goto corral_source_split_7057;

  corral_source_split_7057:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_7058;

  corral_source_split_7058:
    assume {:verifier.code 0} true;
    $i42 := $sgt.i32($i41, 0);
    goto corral_source_split_7059;

  corral_source_split_7059:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i42 == 1);
    goto corral_source_split_7061;

  corral_source_split_7061:
    assume {:verifier.code 0} true;
    $i53 := $add.i32($i7, 4);
    goto corral_source_split_7062;

  corral_source_split_7062:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(8472, 1));
    goto corral_source_split_7063;

  corral_source_split_7063:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p54, $i53);
    goto corral_source_split_7064;

  corral_source_split_7064:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(8480, 1));
    goto corral_source_split_7065;

  corral_source_split_7065:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p55, 1);
    goto corral_source_split_7066;

  corral_source_split_7066:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(16, 1));
    goto corral_source_split_7067;

  corral_source_split_7067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1169} ldv_mutex_unlock_42($p56);
    goto SeqInstr_718, SeqInstr_719;

  SeqInstr_719:
    assume assertsPassed;
    goto SeqInstr_720;

  SeqInstr_720:
    goto corral_source_split_7068;

  corral_source_split_7068:
    assume {:verifier.code 0} true;
    $p33 := $p5;
    goto $bb8;

  SeqInstr_718:
    assume !assertsPassed;
    return;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i42 == 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(52, 1));
    goto corral_source_split_7039;

  corral_source_split_7039:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p43, 0);
    goto corral_source_split_7040;

  corral_source_split_7040:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(16, 1));
    goto corral_source_split_7041;

  corral_source_split_7041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1167} ldv_mutex_unlock_41($p44);
    goto SeqInstr_715, SeqInstr_716;

  SeqInstr_716:
    assume assertsPassed;
    goto SeqInstr_717;

  SeqInstr_717:
    goto corral_source_split_7042;

  corral_source_split_7042:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7444, 1));
    goto corral_source_split_7043;

  corral_source_split_7043:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_7044;

  corral_source_split_7044:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($p46, $mul.ref(4, 1));
    goto corral_source_split_7045;

  corral_source_split_7045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1168} ftdi_elan_do_callback($p0, $p1, $p47, $i7);
    goto corral_source_split_7046;

  corral_source_split_7046:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(8476, 1));
    goto corral_source_split_7047;

  corral_source_split_7047:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p48, 0);
    goto corral_source_split_7048;

  corral_source_split_7048:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(8472, 1));
    goto corral_source_split_7049;

  corral_source_split_7049:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p49, 4);
    goto corral_source_split_7050;

  corral_source_split_7050:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(8480, 1));
    goto corral_source_split_7051;

  corral_source_split_7051:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p50, 0);
    goto corral_source_split_7052;

  corral_source_split_7052:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7444, 1));
    goto corral_source_split_7053;

  corral_source_split_7053:
    assume {:verifier.code 0} true;
    goto corral_source_split_7054;

  corral_source_split_7054:
    assume {:verifier.code 0} true;
    $p33 := $p51;
    goto $bb8;

  SeqInstr_715:
    assume !assertsPassed;
    return;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i39 == 1;
    goto $bb12;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_6994;

  corral_source_split_6994:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i7, 0);
    goto corral_source_split_6995;

  corral_source_split_6995:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i19 == 1);
    goto corral_source_split_7017;

  corral_source_split_7017:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(52, 1));
    goto corral_source_split_7018;

  corral_source_split_7018:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_7019;

  corral_source_split_7019:
    assume {:verifier.code 0} true;
    $i22 := $sgt.i32($i21, 0);
    goto corral_source_split_7020;

  corral_source_split_7020:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i22 == 1);
    goto corral_source_split_7022;

  corral_source_split_7022:
    assume {:verifier.code 0} true;
    $i34 := $add.i32($i7, 4);
    goto corral_source_split_7023;

  corral_source_split_7023:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(8472, 1));
    goto corral_source_split_7024;

  corral_source_split_7024:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p35, $i34);
    goto corral_source_split_7025;

  corral_source_split_7025:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(8480, 1));
    goto corral_source_split_7026;

  corral_source_split_7026:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, 1);
    goto corral_source_split_7027;

  corral_source_split_7027:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(16, 1));
    goto corral_source_split_7028;

  corral_source_split_7028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1166} ldv_mutex_unlock_40($p37);
    goto SeqInstr_712, SeqInstr_713;

  SeqInstr_713:
    assume assertsPassed;
    goto SeqInstr_714;

  SeqInstr_714:
    goto corral_source_split_7029;

  corral_source_split_7029:
    assume {:verifier.code 0} true;
    $p33 := $p5;
    goto $bb8;

  SeqInstr_712:
    assume !assertsPassed;
    return;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(52, 1));
    goto corral_source_split_7000;

  corral_source_split_7000:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, 0);
    goto corral_source_split_7001;

  corral_source_split_7001:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(16, 1));
    goto corral_source_split_7002;

  corral_source_split_7002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1164} ldv_mutex_unlock_39($p24);
    goto SeqInstr_709, SeqInstr_710;

  SeqInstr_710:
    assume assertsPassed;
    goto SeqInstr_711;

  SeqInstr_711:
    goto corral_source_split_7003;

  corral_source_split_7003:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7444, 1));
    goto corral_source_split_7004;

  corral_source_split_7004:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_7005;

  corral_source_split_7005:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p26, $mul.ref(4, 1));
    goto corral_source_split_7006;

  corral_source_split_7006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1165} ftdi_elan_do_callback($p0, $p1, $p27, $i7);
    goto corral_source_split_7007;

  corral_source_split_7007:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(8476, 1));
    goto corral_source_split_7008;

  corral_source_split_7008:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, 0);
    goto corral_source_split_7009;

  corral_source_split_7009:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(8472, 1));
    goto corral_source_split_7010;

  corral_source_split_7010:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, 4);
    goto corral_source_split_7011;

  corral_source_split_7011:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(8480, 1));
    goto corral_source_split_7012;

  corral_source_split_7012:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, 0);
    goto corral_source_split_7013;

  corral_source_split_7013:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7444, 1));
    goto corral_source_split_7014;

  corral_source_split_7014:
    assume {:verifier.code 0} true;
    goto corral_source_split_7015;

  corral_source_split_7015:
    assume {:verifier.code 0} true;
    $p33 := $p31;
    goto $bb8;

  SeqInstr_709:
    assume !assertsPassed;
    return;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb4;

  SeqInstr_706:
    assume !assertsPassed;
    return;
}



const have_ed_get_response: ref;

axiom have_ed_get_response == $sub.ref(0, 393995);

procedure have_ed_get_response($p0: ref, $p1: ref, $i2: i16, $i3: i32, $i4: i32, $p5: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.4, assertsPassed;



implementation have_ed_get_response($p0: ref, $p1: ref, $i2: i16, $i3: i32, $i4: i32, $p5: ref) returns ($r: ref)
{
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1174} {:cexpr "have_ed_get_response:arg:ed_length"} boogie_si_record_i16($i2);
    call {:si_unique_call 1175} {:cexpr "have_ed_get_response:arg:ed_number"} boogie_si_record_i32($i3);
    call {:si_unique_call 1176} {:cexpr "have_ed_get_response:arg:ed_type"} boogie_si_record_i32($i4);
    goto corral_source_split_7106;

  corral_source_split_7106:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(16, 1));
    goto corral_source_split_7107;

  corral_source_split_7107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1177} ldv_mutex_lock_45($p6);
    goto SeqInstr_727, SeqInstr_728;

  SeqInstr_728:
    assume assertsPassed;
    goto SeqInstr_729;

  SeqInstr_729:
    goto corral_source_split_7108;

  corral_source_split_7108:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_7109;

  corral_source_split_7109:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, 5);
    goto corral_source_split_7110;

  corral_source_split_7110:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i2);
    goto corral_source_split_7111;

  corral_source_split_7111:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 511);
    goto corral_source_split_7112;

  corral_source_split_7112:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_7113;

  corral_source_split_7113:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i9);
    goto corral_source_split_7114;

  corral_source_split_7114:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i2);
    goto corral_source_split_7115;

  corral_source_split_7115:
    assume {:verifier.code 0} true;
    $i12 := $ashr.i32($i11, 15);
    goto corral_source_split_7116;

  corral_source_split_7116:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, 1);
    goto corral_source_split_7117;

  corral_source_split_7117:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(44, 1));
    goto corral_source_split_7118;

  corral_source_split_7118:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, $i13);
    goto corral_source_split_7119;

  corral_source_split_7119:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i32($i2);
    goto corral_source_split_7120;

  corral_source_split_7120:
    assume {:verifier.code 0} true;
    $i16 := $ashr.i32($i15, 11);
    goto corral_source_split_7121;

  corral_source_split_7121:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, 15);
    goto corral_source_split_7122;

  corral_source_split_7122:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(28, 1));
    goto corral_source_split_7123;

  corral_source_split_7123:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $i17);
    goto corral_source_split_7124;

  corral_source_split_7124:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(16, 1));
    goto corral_source_split_7125;

  corral_source_split_7125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1178} ldv_mutex_unlock_46($p19);
    goto SeqInstr_730, SeqInstr_731;

  SeqInstr_731:
    assume assertsPassed;
    goto SeqInstr_732;

  SeqInstr_732:
    goto corral_source_split_7126;

  corral_source_split_7126:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_7127;

  corral_source_split_7127:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_7128;

  corral_source_split_7128:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_7129;

  corral_source_split_7129:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(52, 1));
    goto corral_source_split_7134;

  corral_source_split_7134:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, 0);
    goto corral_source_split_7135;

  corral_source_split_7135:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(8476, 1));
    goto corral_source_split_7136;

  corral_source_split_7136:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, 0);
    goto corral_source_split_7137;

  corral_source_split_7137:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(8472, 1));
    goto corral_source_split_7138;

  corral_source_split_7138:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, 4);
    goto corral_source_split_7139;

  corral_source_split_7139:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(8480, 1));
    goto corral_source_split_7140;

  corral_source_split_7140:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, 0);
    goto corral_source_split_7141;

  corral_source_split_7141:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7444, 1));
    goto corral_source_split_7142;

  corral_source_split_7142:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_7143;

  corral_source_split_7143:
    assume {:verifier.code 0} true;
    $r := $p28;
    return;

  $bb1:
    assume $i22 == 1;
    goto corral_source_split_7131;

  corral_source_split_7131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1179} ftdi_elan_do_callback($p0, $p1, $0.ref, 0);
    goto corral_source_split_7132;

  corral_source_split_7132:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_730:
    assume !assertsPassed;
    return;

  SeqInstr_727:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_45: ref;

axiom ldv_mutex_lock_45 == $sub.ref(0, 395027);

procedure ldv_mutex_lock_45($p0: ref);
  free requires assertsPassed;
  modifies $M.4, assertsPassed;



implementation ldv_mutex_lock_45($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7145;

  corral_source_split_7145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1180} ldv_mutex_lock_u132_lock_of_usb_ftdi($p0);
    goto SeqInstr_733, SeqInstr_734;

  SeqInstr_734:
    assume assertsPassed;
    goto SeqInstr_735;

  SeqInstr_735:
    goto corral_source_split_7146;

  corral_source_split_7146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1181} mutex_lock($p0);
    goto corral_source_split_7147;

  corral_source_split_7147:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_733:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_46: ref;

axiom ldv_mutex_unlock_46 == $sub.ref(0, 396059);

procedure ldv_mutex_unlock_46($p0: ref);
  free requires assertsPassed;
  modifies $M.4, assertsPassed;



implementation ldv_mutex_unlock_46($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7149;

  corral_source_split_7149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1182} ldv_mutex_unlock_u132_lock_of_usb_ftdi($p0);
    goto SeqInstr_736, SeqInstr_737;

  SeqInstr_737:
    assume assertsPassed;
    goto SeqInstr_738;

  SeqInstr_738:
    goto corral_source_split_7150;

  corral_source_split_7150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1183} mutex_unlock($p0);
    goto corral_source_split_7151;

  corral_source_split_7151:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_736:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_38: ref;

axiom ldv_mutex_lock_38 == $sub.ref(0, 397091);

procedure ldv_mutex_lock_38($p0: ref);
  free requires assertsPassed;
  modifies $M.4, assertsPassed;



implementation ldv_mutex_lock_38($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7153;

  corral_source_split_7153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1184} ldv_mutex_lock_u132_lock_of_usb_ftdi($p0);
    goto SeqInstr_739, SeqInstr_740;

  SeqInstr_740:
    assume assertsPassed;
    goto SeqInstr_741;

  SeqInstr_741:
    goto corral_source_split_7154;

  corral_source_split_7154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1185} mutex_lock($p0);
    goto corral_source_split_7155;

  corral_source_split_7155:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_739:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_39: ref;

axiom ldv_mutex_unlock_39 == $sub.ref(0, 398123);

procedure ldv_mutex_unlock_39($p0: ref);
  free requires assertsPassed;
  modifies $M.4, assertsPassed;



implementation ldv_mutex_unlock_39($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7157;

  corral_source_split_7157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1186} ldv_mutex_unlock_u132_lock_of_usb_ftdi($p0);
    goto SeqInstr_742, SeqInstr_743;

  SeqInstr_743:
    assume assertsPassed;
    goto SeqInstr_744;

  SeqInstr_744:
    goto corral_source_split_7158;

  corral_source_split_7158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1187} mutex_unlock($p0);
    goto corral_source_split_7159;

  corral_source_split_7159:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_742:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_40: ref;

axiom ldv_mutex_unlock_40 == $sub.ref(0, 399155);

procedure ldv_mutex_unlock_40($p0: ref);
  free requires assertsPassed;
  modifies $M.4, assertsPassed;



implementation ldv_mutex_unlock_40($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7161;

  corral_source_split_7161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1188} ldv_mutex_unlock_u132_lock_of_usb_ftdi($p0);
    goto SeqInstr_745, SeqInstr_746;

  SeqInstr_746:
    assume assertsPassed;
    goto SeqInstr_747;

  SeqInstr_747:
    goto corral_source_split_7162;

  corral_source_split_7162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1189} mutex_unlock($p0);
    goto corral_source_split_7163;

  corral_source_split_7163:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_745:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_41: ref;

axiom ldv_mutex_unlock_41 == $sub.ref(0, 400187);

procedure ldv_mutex_unlock_41($p0: ref);
  free requires assertsPassed;
  modifies $M.4, assertsPassed;



implementation ldv_mutex_unlock_41($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7165;

  corral_source_split_7165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1190} ldv_mutex_unlock_u132_lock_of_usb_ftdi($p0);
    goto SeqInstr_748, SeqInstr_749;

  SeqInstr_749:
    assume assertsPassed;
    goto SeqInstr_750;

  SeqInstr_750:
    goto corral_source_split_7166;

  corral_source_split_7166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1191} mutex_unlock($p0);
    goto corral_source_split_7167;

  corral_source_split_7167:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_748:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_42: ref;

axiom ldv_mutex_unlock_42 == $sub.ref(0, 401219);

procedure ldv_mutex_unlock_42($p0: ref);
  free requires assertsPassed;
  modifies $M.4, assertsPassed;



implementation ldv_mutex_unlock_42($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7169;

  corral_source_split_7169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1192} ldv_mutex_unlock_u132_lock_of_usb_ftdi($p0);
    goto SeqInstr_751, SeqInstr_752;

  SeqInstr_752:
    assume assertsPassed;
    goto SeqInstr_753;

  SeqInstr_753:
    goto corral_source_split_7170;

  corral_source_split_7170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1193} mutex_unlock($p0);
    goto corral_source_split_7171;

  corral_source_split_7171:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_751:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_43: ref;

axiom ldv_mutex_unlock_43 == $sub.ref(0, 402251);

procedure ldv_mutex_unlock_43($p0: ref);
  free requires assertsPassed;
  modifies $M.4, assertsPassed;



implementation ldv_mutex_unlock_43($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7173;

  corral_source_split_7173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1194} ldv_mutex_unlock_u132_lock_of_usb_ftdi($p0);
    goto SeqInstr_754, SeqInstr_755;

  SeqInstr_755:
    assume assertsPassed;
    goto SeqInstr_756;

  SeqInstr_756:
    goto corral_source_split_7174;

  corral_source_split_7174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1195} mutex_unlock($p0);
    goto corral_source_split_7175;

  corral_source_split_7175:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_754:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_44: ref;

axiom ldv_mutex_unlock_44 == $sub.ref(0, 403283);

procedure ldv_mutex_unlock_44($p0: ref);
  free requires assertsPassed;
  modifies $M.4, assertsPassed;



implementation ldv_mutex_unlock_44($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7177;

  corral_source_split_7177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1196} ldv_mutex_unlock_u132_lock_of_usb_ftdi($p0);
    goto SeqInstr_757, SeqInstr_758;

  SeqInstr_758:
    assume assertsPassed;
    goto SeqInstr_759;

  SeqInstr_759:
    goto corral_source_split_7178;

  corral_source_split_7178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1197} mutex_unlock($p0);
    goto corral_source_split_7179;

  corral_source_split_7179:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_757:
    assume !assertsPassed;
    return;
}



const ftdi_elan_command_engine: ref;

axiom ftdi_elan_command_engine == $sub.ref(0, 404315);

procedure ftdi_elan_command_engine($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.25, $CurrAddr, $M.7, $M.6, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12;



implementation ftdi_elan_command_engine($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i9: i32;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i8;
  var $i31: i32;
  var $i32: i32;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i32;
  var $p40: ref;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $i44: i1;
  var $p46: ref;
  var $i47: i8;
  var $i48: i32;
  var $i49: i32;
  var $i50: i64;
  var $p51: ref;
  var $i54: i32;
  var $i55: i64;
  var $p56: ref;
  var $p52: ref;
  var $p53: ref;
  var $i57: i32;
  var $i58: i1;
  var $i45: i32;
  var $i59: i1;
  var $i60: i32;
  var $i61: i1;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i64;
  var $p68: ref;
  var $i69: i64;
  var $p70: ref;
  var $i71: i32;
  var $i72: i32;
  var $p73: ref;
  var $i8: i32;
  var $i74: i1;
  var $i75: i32;
  var $i76: i64;
  var $p77: ref;
  var $p80: ref;
  var $i81: i8;
  var $i82: i32;
  var $i83: i32;
  var $i84: i64;
  var $p85: ref;
  var $p78: ref;
  var $p79: ref;
  var $i86: i32;
  var $i87: i1;
  var $i88: i1;
  var $i89: i32;
  var $i90: i64;
  var $p91: ref;
  var $p94: ref;
  var $i95: i8;
  var $i96: i32;
  var $i97: i32;
  var $i98: i64;
  var $p99: ref;
  var $p92: ref;
  var $p93: ref;
  var $i100: i32;
  var $i101: i1;
  var $i102: i1;
  var $i103: i32;
  var $i104: i64;
  var $p105: ref;
  var $p108: ref;
  var $i109: i8;
  var $i110: i32;
  var $i111: i32;
  var $i112: i64;
  var $p113: ref;
  var $p106: ref;
  var $p107: ref;
  var $i114: i32;
  var $i115: i1;
  var $i116: i1;
  var $i117: i32;
  var $i118: i64;
  var $p119: ref;
  var $p122: ref;
  var $i123: i8;
  var $i124: i32;
  var $i125: i32;
  var $i126: i64;
  var $p127: ref;
  var $p120: ref;
  var $p121: ref;
  var $i128: i32;
  var $i129: i1;
  var $i130: i1;
  var $i131: i32;
  var $i132: i64;
  var $p133: ref;
  var $p136: ref;
  var $i137: i8;
  var $i138: i32;
  var $i139: i32;
  var $i140: i64;
  var $p141: ref;
  var $p134: ref;
  var $p135: ref;
  var $i142: i32;
  var $i143: i1;
  var $i144: i1;
  var $i145: i32;
  var $i146: i64;
  var $p147: ref;
  var $p150: ref;
  var $i151: i8;
  var $i152: i32;
  var $i153: i32;
  var $i154: i64;
  var $p155: ref;
  var $p148: ref;
  var $p149: ref;
  var $i156: i32;
  var $i157: i1;
  var $i158: i1;
  var $i159: i32;
  var $i160: i64;
  var $p161: ref;
  var $p164: ref;
  var $i165: i8;
  var $i166: i32;
  var $i167: i32;
  var $i168: i64;
  var $p169: ref;
  var $p162: ref;
  var $p163: ref;
  var $i170: i32;
  var $i171: i1;
  var $i172: i1;
  var $i173: i32;
  var $i174: i64;
  var $p175: ref;
  var $p178: ref;
  var $i179: i8;
  var $i180: i32;
  var $i181: i32;
  var $i182: i64;
  var $p183: ref;
  var $p176: ref;
  var $p177: ref;
  var $i184: i32;
  var $i185: i1;
  var $i186: i1;
  var $i187: i32;
  var $i188: i64;
  var $p189: ref;
  var $p192: ref;
  var $i193: i8;
  var $i194: i32;
  var $i195: i32;
  var $i196: i64;
  var $p197: ref;
  var $p190: ref;
  var $p191: ref;
  var $i198: i32;
  var $i199: i1;
  var $i200: i1;
  var $i201: i32;
  var $i202: i64;
  var $p203: ref;
  var $p206: ref;
  var $i207: i8;
  var $i208: i32;
  var $i209: i32;
  var $i210: i64;
  var $p211: ref;
  var $p204: ref;
  var $p205: ref;
  var $i212: i32;
  var $i213: i1;
  var $i214: i1;
  var $i215: i32;
  var $i216: i64;
  var $p217: ref;
  var $p220: ref;
  var $i221: i8;
  var $i222: i32;
  var $i223: i32;
  var $i224: i64;
  var $p225: ref;
  var $p218: ref;
  var $p219: ref;
  var $i226: i32;
  var $i227: i1;
  var $i228: i1;
  var $i229: i32;
  var $i230: i64;
  var $p231: ref;
  var $p234: ref;
  var $i235: i8;
  var $i236: i32;
  var $i237: i32;
  var $i238: i64;
  var $p239: ref;
  var $p232: ref;
  var $p233: ref;
  var $i240: i32;
  var $i241: i1;
  var $i242: i1;
  var $i243: i32;
  var $i244: i64;
  var $p245: ref;
  var $p248: ref;
  var $i249: i8;
  var $i250: i32;
  var $i251: i32;
  var $i252: i64;
  var $p253: ref;
  var $p246: ref;
  var $p247: ref;
  var $i254: i32;
  var $i255: i1;
  var $i256: i1;
  var $i257: i32;
  var $i258: i64;
  var $p259: ref;
  var $p262: ref;
  var $i263: i8;
  var $i264: i32;
  var $i265: i32;
  var $i266: i64;
  var $p267: ref;
  var $p260: ref;
  var $p261: ref;
  var $i268: i32;
  var $i269: i1;
  var $i270: i1;
  var $i271: i32;
  var $i272: i64;
  var $p273: ref;
  var $p276: ref;
  var $i277: i8;
  var $i278: i32;
  var $i279: i32;
  var $i280: i64;
  var $p281: ref;
  var $p274: ref;
  var $p275: ref;
  var $i282: i32;
  var $i283: i1;
  var $i284: i1;
  var $i285: i32;
  var $i286: i64;
  var $p287: ref;
  var $p290: ref;
  var $i291: i8;
  var $i292: i32;
  var $i293: i32;
  var $i294: i64;
  var $p295: ref;
  var $p288: ref;
  var $p289: ref;
  var $i296: i32;
  var $i297: i1;
  var $i298: i1;
  var $i299: i32;
  var $i300: i64;
  var $p301: ref;
  var $p304: ref;
  var $i305: i8;
  var $i306: i32;
  var $i307: i32;
  var $i308: i64;
  var $p309: ref;
  var $p302: ref;
  var $p303: ref;
  var $i310: i32;
  var $i311: i1;
  var $i312: i1;
  var $i313: i32;
  var $i314: i64;
  var $p315: ref;
  var $p318: ref;
  var $i319: i8;
  var $i320: i32;
  var $i321: i32;
  var $i322: i64;
  var $p323: ref;
  var $p316: ref;
  var $p317: ref;
  var $i324: i32;
  var $i325: i1;
  var $i326: i1;
  var $i327: i32;
  var $i328: i64;
  var $p329: ref;
  var $p332: ref;
  var $i333: i8;
  var $i334: i32;
  var $i335: i32;
  var $i336: i64;
  var $p337: ref;
  var $p330: ref;
  var $p331: ref;
  var $i338: i32;
  var $i339: i1;
  var $i340: i1;
  var $i341: i32;
  var $i342: i64;
  var $p343: ref;
  var $p346: ref;
  var $i347: i8;
  var $i348: i32;
  var $i349: i32;
  var $i350: i64;
  var $p351: ref;
  var $p344: ref;
  var $p345: ref;
  var $i352: i32;
  var $i353: i1;
  var $i354: i1;
  var $i355: i32;
  var $i356: i64;
  var $p357: ref;
  var $p360: ref;
  var $i361: i8;
  var $i362: i32;
  var $i363: i32;
  var $i364: i64;
  var $p365: ref;
  var $p358: ref;
  var $p359: ref;
  var $i366: i32;
  var $i367: i1;
  var $i368: i1;
  var $i369: i32;
  var $i370: i64;
  var $p371: ref;
  var $p374: ref;
  var $i375: i8;
  var $i376: i32;
  var $i377: i32;
  var $i378: i64;
  var $p379: ref;
  var $p372: ref;
  var $p373: ref;
  var $i380: i32;
  var $i381: i1;
  var $i382: i1;
  var $i383: i32;
  var $i384: i64;
  var $p385: ref;
  var $p388: ref;
  var $i389: i8;
  var $i390: i32;
  var $i391: i32;
  var $i392: i64;
  var $p393: ref;
  var $p386: ref;
  var $p387: ref;
  var $i394: i32;
  var $i395: i1;
  var $i396: i1;
  var $i397: i32;
  var $i398: i64;
  var $p399: ref;
  var $p402: ref;
  var $i403: i8;
  var $i404: i32;
  var $i405: i32;
  var $i406: i64;
  var $p407: ref;
  var $p400: ref;
  var $p401: ref;
  var $i408: i32;
  var $i409: i1;
  var $i410: i1;
  var $i411: i32;
  var $i412: i64;
  var $p413: ref;
  var $p416: ref;
  var $i417: i8;
  var $i418: i32;
  var $i419: i32;
  var $i420: i64;
  var $p421: ref;
  var $p414: ref;
  var $p415: ref;
  var $i422: i32;
  var $i423: i1;
  var $i424: i1;
  var $i425: i32;
  var $i426: i64;
  var $p427: ref;
  var $p430: ref;
  var $i431: i8;
  var $i432: i32;
  var $i433: i32;
  var $i434: i64;
  var $p435: ref;
  var $p428: ref;
  var $p429: ref;
  var $i436: i32;
  var $i437: i1;
  var $i438: i1;
  var $i439: i32;
  var $i440: i64;
  var $p441: ref;
  var $p444: ref;
  var $i445: i8;
  var $i446: i32;
  var $i447: i32;
  var $i448: i64;
  var $p449: ref;
  var $p442: ref;
  var $p443: ref;
  var $i450: i32;
  var $i451: i1;
  var $i452: i1;
  var $i453: i32;
  var $i454: i64;
  var $p455: ref;
  var $p458: ref;
  var $i459: i8;
  var $i460: i32;
  var $i461: i32;
  var $i462: i64;
  var $p463: ref;
  var $p456: ref;
  var $p457: ref;
  var $i464: i32;
  var $i465: i1;
  var $i466: i1;
  var $i467: i32;
  var $i468: i64;
  var $p469: ref;
  var $p472: ref;
  var $i473: i8;
  var $i474: i32;
  var $i475: i32;
  var $i476: i64;
  var $p477: ref;
  var $p470: ref;
  var $p471: ref;
  var $i478: i32;
  var $i479: i1;
  var $i480: i1;
  var $i481: i32;
  var $i482: i64;
  var $p483: ref;
  var $p486: ref;
  var $i487: i8;
  var $i488: i32;
  var $i489: i32;
  var $i490: i64;
  var $p491: ref;
  var $p484: ref;
  var $p485: ref;
  var $i492: i32;
  var $i493: i1;
  var $i494: i1;
  var $i495: i32;
  var $i496: i64;
  var $p497: ref;
  var $p500: ref;
  var $i501: i8;
  var $i502: i32;
  var $i503: i32;
  var $i504: i64;
  var $p505: ref;
  var $p498: ref;
  var $p499: ref;
  var $i506: i32;
  var $i507: i1;
  var $i508: i1;
  var $i509: i32;
  var $i510: i64;
  var $p511: ref;
  var $p514: ref;
  var $i515: i8;
  var $i516: i32;
  var $i517: i32;
  var $i518: i64;
  var $p519: ref;
  var $p512: ref;
  var $p513: ref;
  var $i520: i32;
  var $i521: i1;
  var $i522: i1;
  var $i523: i32;
  var $i524: i64;
  var $p525: ref;
  var $p528: ref;
  var $i529: i8;
  var $i530: i32;
  var $i531: i32;
  var $i532: i64;
  var $p533: ref;
  var $p526: ref;
  var $p527: ref;
  var $i534: i32;
  var $i535: i1;
  var $i536: i1;
  var $i537: i32;
  var $i538: i64;
  var $p539: ref;
  var $p542: ref;
  var $i543: i8;
  var $i544: i32;
  var $i545: i32;
  var $i546: i64;
  var $p547: ref;
  var $p540: ref;
  var $p541: ref;
  var $i548: i32;
  var $i549: i1;
  var $i550: i1;
  var $i551: i32;
  var $i552: i64;
  var $p553: ref;
  var $p556: ref;
  var $i557: i8;
  var $i558: i32;
  var $i559: i32;
  var $i560: i64;
  var $p561: ref;
  var $p554: ref;
  var $p555: ref;
  var $i562: i32;
  var $i563: i1;
  var $i564: i1;
  var $i565: i32;
  var $i566: i64;
  var $p567: ref;
  var $p570: ref;
  var $i571: i8;
  var $i572: i32;
  var $i573: i32;
  var $i574: i64;
  var $p575: ref;
  var $p568: ref;
  var $p569: ref;
  var $i576: i32;
  var $i577: i1;
  var $i578: i1;
  var $i579: i32;
  var $i580: i64;
  var $p581: ref;
  var $p584: ref;
  var $i585: i8;
  var $i586: i32;
  var $i587: i32;
  var $i588: i64;
  var $p589: ref;
  var $p582: ref;
  var $p583: ref;
  var $i590: i32;
  var $i591: i1;
  var $i592: i1;
  var $i593: i32;
  var $i594: i64;
  var $p595: ref;
  var $p598: ref;
  var $i599: i8;
  var $i600: i32;
  var $i601: i32;
  var $i602: i64;
  var $p603: ref;
  var $p596: ref;
  var $p597: ref;
  var $i604: i32;
  var $i605: i1;
  var $i606: i1;
  var $i607: i32;
  var $i608: i64;
  var $p609: ref;
  var $p612: ref;
  var $i613: i8;
  var $i614: i32;
  var $i615: i32;
  var $i616: i64;
  var $p617: ref;
  var $p610: ref;
  var $p611: ref;
  var $i618: i32;
  var $i619: i1;
  var $i620: i1;
  var $i622: i8;
  var $i623: i32;
  var vslice_dummy_var_31: i32;
  var vslice_dummy_var_32: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1198} $p1 := $alloc($mul.ref(124, $zext.i32.i64(1)));
    goto corral_source_split_7181;

  corral_source_split_7181:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(176, 1));
    goto corral_source_split_7182;

  corral_source_split_7182:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_7183;

  corral_source_split_7183:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(180, 1));
    goto corral_source_split_7184;

  corral_source_split_7184:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_7185;

  corral_source_split_7185:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32($i3, $i5);
    call {:si_unique_call 1199} {:cexpr "command_size"} boogie_si_record_i32($i6);
    goto corral_source_split_7186;

  corral_source_split_7186:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_7187;

  corral_source_split_7187:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1200} $i9 := ftdi_elan_total_command_size($p0, $i6);
    call {:si_unique_call 1201} {:cexpr "total_size"} boogie_si_record_i32($i9);
    goto corral_source_split_7193;

  corral_source_split_7193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1202} $p10 := usb_alloc_urb(0, 208);
    goto corral_source_split_7194;

  corral_source_split_7194:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_7195;

  corral_source_split_7195:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_7196;

  corral_source_split_7196:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_7204;

  corral_source_split_7204:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_7205;

  corral_source_split_7205:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i9);
    goto corral_source_split_7206;

  corral_source_split_7206:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p10, $mul.ref(0, 192)), $mul.ref(112, 1));
    goto corral_source_split_7207;

  corral_source_split_7207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1204} $p20 := usb_alloc_coherent($p17, $i18, 208, $p19);
    goto corral_source_split_7208;

  corral_source_split_7208:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_7209;

  corral_source_split_7209:
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i21, 0);
    goto corral_source_split_7210;

  corral_source_split_7210:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1207} $i26 := fill_buffer_with_all_queued_commands($p0, $p20, $i6, $i9);
    call {:si_unique_call 1208} {:cexpr "ed_commands"} boogie_si_record_i32($i26);
    goto corral_source_split_7219;

  corral_source_split_7219:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_7220;

  corral_source_split_7220:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_7221;

  corral_source_split_7221:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7433, 1));
    goto corral_source_split_7222;

  corral_source_split_7222:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.0, $p29);
    goto corral_source_split_7223;

  corral_source_split_7223:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i30);
    goto corral_source_split_7224;

  corral_source_split_7224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1209} $i32 := __create_pipe($p28, $i31);
    call {:si_unique_call 1210} {:cexpr "tmp___0"} boogie_si_record_i32($i32);
    goto corral_source_split_7225;

  corral_source_split_7225:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_7226;

  corral_source_split_7226:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_7227;

  corral_source_split_7227:
    assume {:verifier.code 0} true;
    $i35 := $or.i32($i32, $sub.i32(0, 1073741824));
    goto corral_source_split_7228;

  corral_source_split_7228:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p0);
    goto corral_source_split_7229;

  corral_source_split_7229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1211} usb_fill_bulk_urb($p10, $p34, $i35, $p20, $i9, ftdi_elan_write_bulk_callback, $p36);
    goto corral_source_split_7230;

  corral_source_split_7230:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p10, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_7231;

  corral_source_split_7231:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_7232;

  corral_source_split_7232:
    assume {:verifier.code 0} true;
    $i39 := $or.i32($i38, 4);
    goto corral_source_split_7233;

  corral_source_split_7233:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p10, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_7234;

  corral_source_split_7234:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p40, $i39);
    goto corral_source_split_7235;

  corral_source_split_7235:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i26, 0);
    goto corral_source_split_7236;

  corral_source_split_7236:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1217} $i60 := usb_submit_urb($p10, 208);
    call {:si_unique_call 1218} {:cexpr "retval"} boogie_si_record_i32($i60);
    goto corral_source_split_7268;

  corral_source_split_7268:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i60, 0);
    goto corral_source_split_7269;

  corral_source_split_7269:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1222} usb_free_urb($p10);
    goto corral_source_split_7284;

  corral_source_split_7284:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(180, 1));
    goto corral_source_split_7285;

  corral_source_split_7285:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.0, $p70);
    goto corral_source_split_7286;

  corral_source_split_7286:
    assume {:verifier.code 0} true;
    $i72 := $add.i32($i71, $i6);
    goto corral_source_split_7287;

  corral_source_split_7287:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(180, 1));
    goto corral_source_split_7288;

  corral_source_split_7288:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p73, $i72);
    goto corral_source_split_7289;

  corral_source_split_7289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1223} ftdi_elan_kick_respond_queue($p0);
    goto corral_source_split_7290;

  corral_source_split_7290:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7191;

  corral_source_split_7191:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb29:
    assume $i61 == 1;
    goto corral_source_split_7271;

  corral_source_split_7271:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_7272;

  corral_source_split_7272:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_7273;

  corral_source_split_7273:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p63, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_7274;

  corral_source_split_7274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1219} dev_err.ref.ref.i32.ref.i32.i32($p64, .str.42, $i60, $p10, $i6, $i9);
    goto corral_source_split_7275;

  corral_source_split_7275:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_7276;

  corral_source_split_7276:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_7277;

  corral_source_split_7277:
    assume {:verifier.code 0} true;
    $i67 := $sext.i32.i64($i9);
    goto corral_source_split_7278;

  corral_source_split_7278:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p10, $mul.ref(0, 192)), $mul.ref(112, 1));
    goto corral_source_split_7279;

  corral_source_split_7279:
    assume {:verifier.code 0} true;
    $i69 := $load.i64($M.0, $p68);
    goto corral_source_split_7280;

  corral_source_split_7280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1220} usb_free_coherent($p66, $i67, $p20, $i69);
    goto corral_source_split_7281;

  corral_source_split_7281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1221} usb_free_urb($p10);
    goto corral_source_split_7282;

  corral_source_split_7282:
    assume {:verifier.code 0} true;
    $i8 := $i60;
    goto $bb3;

  $bb11:
    assume $i41 == 1;
    goto corral_source_split_7238;

  corral_source_split_7238:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p1);
    goto corral_source_split_7239;

  corral_source_split_7239:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p1, $mul.ref(0, 124)), $mul.ref(0, 1));
    goto corral_source_split_7240;

  corral_source_split_7240:
    assume {:verifier.code 0} true;
    $M.25 := $store.i8($M.25, $p43, 0);
    goto corral_source_split_7241;

  corral_source_split_7241:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i45 := $sub.i32($i9, 1);
    call {:si_unique_call 1212} {:cexpr "m"} boogie_si_record_i32($i45);
    goto corral_source_split_7243;

  corral_source_split_7243:
    assume {:verifier.code 0} true;
    $i59 := $sgt.i32($i9, 0);
    goto corral_source_split_7244;

  corral_source_split_7244:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i59 == 1);
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb24:
    assume $i59 == 1;
    goto corral_source_split_7266;

  corral_source_split_7266:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb15, $bb17;

  $bb17:
    assume !(1 == 1);
    goto corral_source_split_7253;

  corral_source_split_7253:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i45, 0);
    goto corral_source_split_7254;

  corral_source_split_7254:
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i44 == 1);
    goto corral_source_split_7256;

  corral_source_split_7256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1215} $i54 := sprintf.ref.ref($p42, .str.5);
    call {:si_unique_call 1216} {:cexpr "tmp___3"} boogie_si_record_i32($i54);
    goto corral_source_split_7257;

  corral_source_split_7257:
    assume {:verifier.code 0} true;
    $i55 := $sext.i32.i64($i54);
    goto corral_source_split_7258;

  corral_source_split_7258:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($p42, $mul.ref($i55, 1));
    assume {:verifier.code 0} true;
    $p52, $p53 := $p56, $p20;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7260;

  corral_source_split_7260:
    assume {:verifier.code 0} true;
    $i57 := $sub.i32($i45, 1);
    goto corral_source_split_7261;

  corral_source_split_7261:
    assume {:verifier.code 0} true;
    $i58 := $sgt.i32($i45, 0);
    goto corral_source_split_7262;

  corral_source_split_7262:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i58 == 1);
    goto $bb23;

  $bb21:
    assume $i58 == 1;
    goto corral_source_split_7264;

  corral_source_split_7264:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb33, $bb35;

  $bb35:
    assume !(1 == 1);
    goto corral_source_split_7299;

  corral_source_split_7299:
    assume {:verifier.code 0} true;
    $i74 := $eq.i32($i57, 0);
    goto corral_source_split_7300;

  corral_source_split_7300:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i74 == 1);
    goto corral_source_split_7302;

  corral_source_split_7302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1225} $i75 := sprintf.ref.ref($p52, .str.5);
    goto corral_source_split_7303;

  corral_source_split_7303:
    assume {:verifier.code 0} true;
    $i76 := $sext.i32.i64($i75);
    goto corral_source_split_7304;

  corral_source_split_7304:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($p52, $mul.ref($i76, 1));
    assume {:verifier.code 0} true;
    $p78, $p79 := $p77, $p53;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7306;

  corral_source_split_7306:
    assume {:verifier.code 0} true;
    $i86 := $sub.i32($i57, 1);
    goto corral_source_split_7307;

  corral_source_split_7307:
    assume {:verifier.code 0} true;
    $i87 := $sgt.i32($i57, 0);
    goto corral_source_split_7308;

  corral_source_split_7308:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume !($i87 == 1);
    goto $bb23;

  $bb39:
    assume $i87 == 1;
    goto corral_source_split_7310;

  corral_source_split_7310:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb42, $bb44;

  $bb44:
    assume !(1 == 1);
    goto corral_source_split_7319;

  corral_source_split_7319:
    assume {:verifier.code 0} true;
    $i88 := $eq.i32($i86, 0);
    goto corral_source_split_7320;

  corral_source_split_7320:
    assume {:verifier.code 0} true;
    assume {:branchcond $i88} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i88 == 1);
    goto corral_source_split_7322;

  corral_source_split_7322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1227} $i89 := sprintf.ref.ref($p78, .str.5);
    goto corral_source_split_7323;

  corral_source_split_7323:
    assume {:verifier.code 0} true;
    $i90 := $sext.i32.i64($i89);
    goto corral_source_split_7324;

  corral_source_split_7324:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($p78, $mul.ref($i90, 1));
    assume {:verifier.code 0} true;
    $p92, $p93 := $p91, $p79;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7326;

  corral_source_split_7326:
    assume {:verifier.code 0} true;
    $i100 := $sub.i32($i86, 1);
    goto corral_source_split_7327;

  corral_source_split_7327:
    assume {:verifier.code 0} true;
    $i101 := $sgt.i32($i86, 0);
    goto corral_source_split_7328;

  corral_source_split_7328:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    assume !($i101 == 1);
    goto $bb23;

  $bb48:
    assume $i101 == 1;
    goto corral_source_split_7330;

  corral_source_split_7330:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb51, $bb53;

  $bb53:
    assume !(1 == 1);
    goto corral_source_split_7339;

  corral_source_split_7339:
    assume {:verifier.code 0} true;
    $i102 := $eq.i32($i100, 0);
    goto corral_source_split_7340;

  corral_source_split_7340:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i102 == 1);
    goto corral_source_split_7342;

  corral_source_split_7342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1229} $i103 := sprintf.ref.ref($p92, .str.5);
    goto corral_source_split_7343;

  corral_source_split_7343:
    assume {:verifier.code 0} true;
    $i104 := $sext.i32.i64($i103);
    goto corral_source_split_7344;

  corral_source_split_7344:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($p92, $mul.ref($i104, 1));
    assume {:verifier.code 0} true;
    $p106, $p107 := $p105, $p93;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7346;

  corral_source_split_7346:
    assume {:verifier.code 0} true;
    $i114 := $sub.i32($i100, 1);
    goto corral_source_split_7347;

  corral_source_split_7347:
    assume {:verifier.code 0} true;
    $i115 := $sgt.i32($i100, 0);
    goto corral_source_split_7348;

  corral_source_split_7348:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    assume !($i115 == 1);
    goto $bb23;

  $bb57:
    assume $i115 == 1;
    goto corral_source_split_7350;

  corral_source_split_7350:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb60, $bb62;

  $bb62:
    assume !(1 == 1);
    goto corral_source_split_7359;

  corral_source_split_7359:
    assume {:verifier.code 0} true;
    $i116 := $eq.i32($i114, 0);
    goto corral_source_split_7360;

  corral_source_split_7360:
    assume {:verifier.code 0} true;
    assume {:branchcond $i116} true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i116 == 1);
    goto corral_source_split_7362;

  corral_source_split_7362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1231} $i117 := sprintf.ref.ref($p106, .str.5);
    goto corral_source_split_7363;

  corral_source_split_7363:
    assume {:verifier.code 0} true;
    $i118 := $sext.i32.i64($i117);
    goto corral_source_split_7364;

  corral_source_split_7364:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($p106, $mul.ref($i118, 1));
    assume {:verifier.code 0} true;
    $p120, $p121 := $p119, $p107;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7366;

  corral_source_split_7366:
    assume {:verifier.code 0} true;
    $i128 := $sub.i32($i114, 1);
    goto corral_source_split_7367;

  corral_source_split_7367:
    assume {:verifier.code 0} true;
    $i129 := $sgt.i32($i114, 0);
    goto corral_source_split_7368;

  corral_source_split_7368:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    assume !($i129 == 1);
    goto $bb23;

  $bb66:
    assume $i129 == 1;
    goto corral_source_split_7370;

  corral_source_split_7370:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb69, $bb71;

  $bb71:
    assume !(1 == 1);
    goto corral_source_split_7379;

  corral_source_split_7379:
    assume {:verifier.code 0} true;
    $i130 := $eq.i32($i128, 0);
    goto corral_source_split_7380;

  corral_source_split_7380:
    assume {:verifier.code 0} true;
    assume {:branchcond $i130} true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i130 == 1);
    goto corral_source_split_7382;

  corral_source_split_7382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1233} $i131 := sprintf.ref.ref($p120, .str.5);
    goto corral_source_split_7383;

  corral_source_split_7383:
    assume {:verifier.code 0} true;
    $i132 := $sext.i32.i64($i131);
    goto corral_source_split_7384;

  corral_source_split_7384:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($p120, $mul.ref($i132, 1));
    assume {:verifier.code 0} true;
    $p134, $p135 := $p133, $p121;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7386;

  corral_source_split_7386:
    assume {:verifier.code 0} true;
    $i142 := $sub.i32($i128, 1);
    goto corral_source_split_7387;

  corral_source_split_7387:
    assume {:verifier.code 0} true;
    $i143 := $sgt.i32($i128, 0);
    goto corral_source_split_7388;

  corral_source_split_7388:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    assume !($i143 == 1);
    goto $bb23;

  $bb75:
    assume $i143 == 1;
    goto corral_source_split_7390;

  corral_source_split_7390:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb78, $bb80;

  $bb80:
    assume !(1 == 1);
    goto corral_source_split_7399;

  corral_source_split_7399:
    assume {:verifier.code 0} true;
    $i144 := $eq.i32($i142, 0);
    goto corral_source_split_7400;

  corral_source_split_7400:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i144 == 1);
    goto corral_source_split_7402;

  corral_source_split_7402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1235} $i145 := sprintf.ref.ref($p134, .str.5);
    goto corral_source_split_7403;

  corral_source_split_7403:
    assume {:verifier.code 0} true;
    $i146 := $sext.i32.i64($i145);
    goto corral_source_split_7404;

  corral_source_split_7404:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($p134, $mul.ref($i146, 1));
    assume {:verifier.code 0} true;
    $p148, $p149 := $p147, $p135;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7406;

  corral_source_split_7406:
    assume {:verifier.code 0} true;
    $i156 := $sub.i32($i142, 1);
    goto corral_source_split_7407;

  corral_source_split_7407:
    assume {:verifier.code 0} true;
    $i157 := $sgt.i32($i142, 0);
    goto corral_source_split_7408;

  corral_source_split_7408:
    assume {:verifier.code 0} true;
    assume {:branchcond $i157} true;
    goto $bb84, $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    assume !($i157 == 1);
    goto $bb23;

  $bb84:
    assume $i157 == 1;
    goto corral_source_split_7410;

  corral_source_split_7410:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb87, $bb89;

  $bb89:
    assume !(1 == 1);
    goto corral_source_split_7419;

  corral_source_split_7419:
    assume {:verifier.code 0} true;
    $i158 := $eq.i32($i156, 0);
    goto corral_source_split_7420;

  corral_source_split_7420:
    assume {:verifier.code 0} true;
    assume {:branchcond $i158} true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i158 == 1);
    goto corral_source_split_7422;

  corral_source_split_7422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1237} $i159 := sprintf.ref.ref($p148, .str.5);
    goto corral_source_split_7423;

  corral_source_split_7423:
    assume {:verifier.code 0} true;
    $i160 := $sext.i32.i64($i159);
    goto corral_source_split_7424;

  corral_source_split_7424:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($p148, $mul.ref($i160, 1));
    assume {:verifier.code 0} true;
    $p162, $p163 := $p161, $p149;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7426;

  corral_source_split_7426:
    assume {:verifier.code 0} true;
    $i170 := $sub.i32($i156, 1);
    goto corral_source_split_7427;

  corral_source_split_7427:
    assume {:verifier.code 0} true;
    $i171 := $sgt.i32($i156, 0);
    goto corral_source_split_7428;

  corral_source_split_7428:
    assume {:verifier.code 0} true;
    assume {:branchcond $i171} true;
    goto $bb93, $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    assume !($i171 == 1);
    goto $bb23;

  $bb93:
    assume $i171 == 1;
    goto corral_source_split_7430;

  corral_source_split_7430:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb96, $bb98;

  $bb98:
    assume !(1 == 1);
    goto corral_source_split_7439;

  corral_source_split_7439:
    assume {:verifier.code 0} true;
    $i172 := $eq.i32($i170, 0);
    goto corral_source_split_7440;

  corral_source_split_7440:
    assume {:verifier.code 0} true;
    assume {:branchcond $i172} true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i172 == 1);
    goto corral_source_split_7442;

  corral_source_split_7442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1239} $i173 := sprintf.ref.ref($p162, .str.5);
    goto corral_source_split_7443;

  corral_source_split_7443:
    assume {:verifier.code 0} true;
    $i174 := $sext.i32.i64($i173);
    goto corral_source_split_7444;

  corral_source_split_7444:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($p162, $mul.ref($i174, 1));
    assume {:verifier.code 0} true;
    $p176, $p177 := $p175, $p163;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7446;

  corral_source_split_7446:
    assume {:verifier.code 0} true;
    $i184 := $sub.i32($i170, 1);
    goto corral_source_split_7447;

  corral_source_split_7447:
    assume {:verifier.code 0} true;
    $i185 := $sgt.i32($i170, 0);
    goto corral_source_split_7448;

  corral_source_split_7448:
    assume {:verifier.code 0} true;
    assume {:branchcond $i185} true;
    goto $bb102, $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    assume !($i185 == 1);
    goto $bb23;

  $bb102:
    assume $i185 == 1;
    goto corral_source_split_7450;

  corral_source_split_7450:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb105, $bb107;

  $bb107:
    assume !(1 == 1);
    goto corral_source_split_7459;

  corral_source_split_7459:
    assume {:verifier.code 0} true;
    $i186 := $eq.i32($i184, 0);
    goto corral_source_split_7460;

  corral_source_split_7460:
    assume {:verifier.code 0} true;
    assume {:branchcond $i186} true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i186 == 1);
    goto corral_source_split_7462;

  corral_source_split_7462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1241} $i187 := sprintf.ref.ref($p176, .str.5);
    goto corral_source_split_7463;

  corral_source_split_7463:
    assume {:verifier.code 0} true;
    $i188 := $sext.i32.i64($i187);
    goto corral_source_split_7464;

  corral_source_split_7464:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($p176, $mul.ref($i188, 1));
    assume {:verifier.code 0} true;
    $p190, $p191 := $p189, $p177;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7466;

  corral_source_split_7466:
    assume {:verifier.code 0} true;
    $i198 := $sub.i32($i184, 1);
    goto corral_source_split_7467;

  corral_source_split_7467:
    assume {:verifier.code 0} true;
    $i199 := $sgt.i32($i184, 0);
    goto corral_source_split_7468;

  corral_source_split_7468:
    assume {:verifier.code 0} true;
    assume {:branchcond $i199} true;
    goto $bb111, $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    assume !($i199 == 1);
    goto $bb23;

  $bb111:
    assume $i199 == 1;
    goto corral_source_split_7470;

  corral_source_split_7470:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb114, $bb116;

  $bb116:
    assume !(1 == 1);
    goto corral_source_split_7479;

  corral_source_split_7479:
    assume {:verifier.code 0} true;
    $i200 := $eq.i32($i198, 0);
    goto corral_source_split_7480;

  corral_source_split_7480:
    assume {:verifier.code 0} true;
    assume {:branchcond $i200} true;
    goto $bb117, $bb118;

  $bb118:
    assume !($i200 == 1);
    goto corral_source_split_7482;

  corral_source_split_7482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1243} $i201 := sprintf.ref.ref($p190, .str.5);
    goto corral_source_split_7483;

  corral_source_split_7483:
    assume {:verifier.code 0} true;
    $i202 := $sext.i32.i64($i201);
    goto corral_source_split_7484;

  corral_source_split_7484:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($p190, $mul.ref($i202, 1));
    assume {:verifier.code 0} true;
    $p204, $p205 := $p203, $p191;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7486;

  corral_source_split_7486:
    assume {:verifier.code 0} true;
    $i212 := $sub.i32($i198, 1);
    goto corral_source_split_7487;

  corral_source_split_7487:
    assume {:verifier.code 0} true;
    $i213 := $sgt.i32($i198, 0);
    goto corral_source_split_7488;

  corral_source_split_7488:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb120, $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    assume !($i213 == 1);
    goto $bb23;

  $bb120:
    assume $i213 == 1;
    goto corral_source_split_7490;

  corral_source_split_7490:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb123, $bb125;

  $bb125:
    assume !(1 == 1);
    goto corral_source_split_7499;

  corral_source_split_7499:
    assume {:verifier.code 0} true;
    $i214 := $eq.i32($i212, 0);
    goto corral_source_split_7500;

  corral_source_split_7500:
    assume {:verifier.code 0} true;
    assume {:branchcond $i214} true;
    goto $bb126, $bb127;

  $bb127:
    assume !($i214 == 1);
    goto corral_source_split_7502;

  corral_source_split_7502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1245} $i215 := sprintf.ref.ref($p204, .str.5);
    goto corral_source_split_7503;

  corral_source_split_7503:
    assume {:verifier.code 0} true;
    $i216 := $sext.i32.i64($i215);
    goto corral_source_split_7504;

  corral_source_split_7504:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($p204, $mul.ref($i216, 1));
    assume {:verifier.code 0} true;
    $p218, $p219 := $p217, $p205;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7506;

  corral_source_split_7506:
    assume {:verifier.code 0} true;
    $i226 := $sub.i32($i212, 1);
    goto corral_source_split_7507;

  corral_source_split_7507:
    assume {:verifier.code 0} true;
    $i227 := $sgt.i32($i212, 0);
    goto corral_source_split_7508;

  corral_source_split_7508:
    assume {:verifier.code 0} true;
    assume {:branchcond $i227} true;
    goto $bb129, $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    assume !($i227 == 1);
    goto $bb23;

  $bb129:
    assume $i227 == 1;
    goto corral_source_split_7510;

  corral_source_split_7510:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb132, $bb134;

  $bb134:
    assume !(1 == 1);
    goto corral_source_split_7519;

  corral_source_split_7519:
    assume {:verifier.code 0} true;
    $i228 := $eq.i32($i226, 0);
    goto corral_source_split_7520;

  corral_source_split_7520:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb135, $bb136;

  $bb136:
    assume !($i228 == 1);
    goto corral_source_split_7522;

  corral_source_split_7522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1247} $i229 := sprintf.ref.ref($p218, .str.5);
    goto corral_source_split_7523;

  corral_source_split_7523:
    assume {:verifier.code 0} true;
    $i230 := $sext.i32.i64($i229);
    goto corral_source_split_7524;

  corral_source_split_7524:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($p218, $mul.ref($i230, 1));
    assume {:verifier.code 0} true;
    $p232, $p233 := $p231, $p219;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7526;

  corral_source_split_7526:
    assume {:verifier.code 0} true;
    $i240 := $sub.i32($i226, 1);
    goto corral_source_split_7527;

  corral_source_split_7527:
    assume {:verifier.code 0} true;
    $i241 := $sgt.i32($i226, 0);
    goto corral_source_split_7528;

  corral_source_split_7528:
    assume {:verifier.code 0} true;
    assume {:branchcond $i241} true;
    goto $bb138, $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    assume !($i241 == 1);
    goto $bb23;

  $bb138:
    assume $i241 == 1;
    goto corral_source_split_7530;

  corral_source_split_7530:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb141, $bb143;

  $bb143:
    assume !(1 == 1);
    goto corral_source_split_7539;

  corral_source_split_7539:
    assume {:verifier.code 0} true;
    $i242 := $eq.i32($i240, 0);
    goto corral_source_split_7540;

  corral_source_split_7540:
    assume {:verifier.code 0} true;
    assume {:branchcond $i242} true;
    goto $bb144, $bb145;

  $bb145:
    assume !($i242 == 1);
    goto corral_source_split_7542;

  corral_source_split_7542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1249} $i243 := sprintf.ref.ref($p232, .str.5);
    goto corral_source_split_7543;

  corral_source_split_7543:
    assume {:verifier.code 0} true;
    $i244 := $sext.i32.i64($i243);
    goto corral_source_split_7544;

  corral_source_split_7544:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($p232, $mul.ref($i244, 1));
    assume {:verifier.code 0} true;
    $p246, $p247 := $p245, $p233;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7546;

  corral_source_split_7546:
    assume {:verifier.code 0} true;
    $i254 := $sub.i32($i240, 1);
    goto corral_source_split_7547;

  corral_source_split_7547:
    assume {:verifier.code 0} true;
    $i255 := $sgt.i32($i240, 0);
    goto corral_source_split_7548;

  corral_source_split_7548:
    assume {:verifier.code 0} true;
    assume {:branchcond $i255} true;
    goto $bb147, $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    assume !($i255 == 1);
    goto $bb23;

  $bb147:
    assume $i255 == 1;
    goto corral_source_split_7550;

  corral_source_split_7550:
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb150, $bb152;

  $bb152:
    assume !(1 == 1);
    goto corral_source_split_7559;

  corral_source_split_7559:
    assume {:verifier.code 0} true;
    $i256 := $eq.i32($i254, 0);
    goto corral_source_split_7560;

  corral_source_split_7560:
    assume {:verifier.code 0} true;
    assume {:branchcond $i256} true;
    goto $bb153, $bb154;

  $bb154:
    assume !($i256 == 1);
    goto corral_source_split_7562;

  corral_source_split_7562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1251} $i257 := sprintf.ref.ref($p246, .str.5);
    goto corral_source_split_7563;

  corral_source_split_7563:
    assume {:verifier.code 0} true;
    $i258 := $sext.i32.i64($i257);
    goto corral_source_split_7564;

  corral_source_split_7564:
    assume {:verifier.code 0} true;
    $p259 := $add.ref($p246, $mul.ref($i258, 1));
    assume {:verifier.code 0} true;
    $p260, $p261 := $p259, $p247;
    goto $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7566;

  corral_source_split_7566:
    assume {:verifier.code 0} true;
    $i268 := $sub.i32($i254, 1);
    goto corral_source_split_7567;

  corral_source_split_7567:
    assume {:verifier.code 0} true;
    $i269 := $sgt.i32($i254, 0);
    goto corral_source_split_7568;

  corral_source_split_7568:
    assume {:verifier.code 0} true;
    assume {:branchcond $i269} true;
    goto $bb156, $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    assume !($i269 == 1);
    goto $bb23;

  $bb156:
    assume $i269 == 1;
    goto corral_source_split_7570;

  corral_source_split_7570:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb159, $bb161;

  $bb161:
    assume !(1 == 1);
    goto corral_source_split_7579;

  corral_source_split_7579:
    assume {:verifier.code 0} true;
    $i270 := $eq.i32($i268, 0);
    goto corral_source_split_7580;

  corral_source_split_7580:
    assume {:verifier.code 0} true;
    assume {:branchcond $i270} true;
    goto $bb162, $bb163;

  $bb163:
    assume !($i270 == 1);
    goto corral_source_split_7582;

  corral_source_split_7582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1253} $i271 := sprintf.ref.ref($p260, .str.5);
    goto corral_source_split_7583;

  corral_source_split_7583:
    assume {:verifier.code 0} true;
    $i272 := $sext.i32.i64($i271);
    goto corral_source_split_7584;

  corral_source_split_7584:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($p260, $mul.ref($i272, 1));
    assume {:verifier.code 0} true;
    $p274, $p275 := $p273, $p261;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7586;

  corral_source_split_7586:
    assume {:verifier.code 0} true;
    $i282 := $sub.i32($i268, 1);
    goto corral_source_split_7587;

  corral_source_split_7587:
    assume {:verifier.code 0} true;
    $i283 := $sgt.i32($i268, 0);
    goto corral_source_split_7588;

  corral_source_split_7588:
    assume {:verifier.code 0} true;
    assume {:branchcond $i283} true;
    goto $bb165, $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    assume !($i283 == 1);
    goto $bb23;

  $bb165:
    assume $i283 == 1;
    goto corral_source_split_7590;

  corral_source_split_7590:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb168, $bb170;

  $bb170:
    assume !(1 == 1);
    goto corral_source_split_7599;

  corral_source_split_7599:
    assume {:verifier.code 0} true;
    $i284 := $eq.i32($i282, 0);
    goto corral_source_split_7600;

  corral_source_split_7600:
    assume {:verifier.code 0} true;
    assume {:branchcond $i284} true;
    goto $bb171, $bb172;

  $bb172:
    assume !($i284 == 1);
    goto corral_source_split_7602;

  corral_source_split_7602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1255} $i285 := sprintf.ref.ref($p274, .str.5);
    goto corral_source_split_7603;

  corral_source_split_7603:
    assume {:verifier.code 0} true;
    $i286 := $sext.i32.i64($i285);
    goto corral_source_split_7604;

  corral_source_split_7604:
    assume {:verifier.code 0} true;
    $p287 := $add.ref($p274, $mul.ref($i286, 1));
    assume {:verifier.code 0} true;
    $p288, $p289 := $p287, $p275;
    goto $bb173;

  $bb173:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7606;

  corral_source_split_7606:
    assume {:verifier.code 0} true;
    $i296 := $sub.i32($i282, 1);
    goto corral_source_split_7607;

  corral_source_split_7607:
    assume {:verifier.code 0} true;
    $i297 := $sgt.i32($i282, 0);
    goto corral_source_split_7608;

  corral_source_split_7608:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb174, $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    assume !($i297 == 1);
    goto $bb23;

  $bb174:
    assume $i297 == 1;
    goto corral_source_split_7610;

  corral_source_split_7610:
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb177, $bb179;

  $bb179:
    assume !(1 == 1);
    goto corral_source_split_7619;

  corral_source_split_7619:
    assume {:verifier.code 0} true;
    $i298 := $eq.i32($i296, 0);
    goto corral_source_split_7620;

  corral_source_split_7620:
    assume {:verifier.code 0} true;
    assume {:branchcond $i298} true;
    goto $bb180, $bb181;

  $bb181:
    assume !($i298 == 1);
    goto corral_source_split_7622;

  corral_source_split_7622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1257} $i299 := sprintf.ref.ref($p288, .str.5);
    goto corral_source_split_7623;

  corral_source_split_7623:
    assume {:verifier.code 0} true;
    $i300 := $sext.i32.i64($i299);
    goto corral_source_split_7624;

  corral_source_split_7624:
    assume {:verifier.code 0} true;
    $p301 := $add.ref($p288, $mul.ref($i300, 1));
    assume {:verifier.code 0} true;
    $p302, $p303 := $p301, $p289;
    goto $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7626;

  corral_source_split_7626:
    assume {:verifier.code 0} true;
    $i310 := $sub.i32($i296, 1);
    goto corral_source_split_7627;

  corral_source_split_7627:
    assume {:verifier.code 0} true;
    $i311 := $sgt.i32($i296, 0);
    goto corral_source_split_7628;

  corral_source_split_7628:
    assume {:verifier.code 0} true;
    assume {:branchcond $i311} true;
    goto $bb183, $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    assume !($i311 == 1);
    goto $bb23;

  $bb183:
    assume $i311 == 1;
    goto corral_source_split_7630;

  corral_source_split_7630:
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb186, $bb188;

  $bb188:
    assume !(1 == 1);
    goto corral_source_split_7639;

  corral_source_split_7639:
    assume {:verifier.code 0} true;
    $i312 := $eq.i32($i310, 0);
    goto corral_source_split_7640;

  corral_source_split_7640:
    assume {:verifier.code 0} true;
    assume {:branchcond $i312} true;
    goto $bb189, $bb190;

  $bb190:
    assume !($i312 == 1);
    goto corral_source_split_7642;

  corral_source_split_7642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1259} $i313 := sprintf.ref.ref($p302, .str.5);
    goto corral_source_split_7643;

  corral_source_split_7643:
    assume {:verifier.code 0} true;
    $i314 := $sext.i32.i64($i313);
    goto corral_source_split_7644;

  corral_source_split_7644:
    assume {:verifier.code 0} true;
    $p315 := $add.ref($p302, $mul.ref($i314, 1));
    assume {:verifier.code 0} true;
    $p316, $p317 := $p315, $p303;
    goto $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7646;

  corral_source_split_7646:
    assume {:verifier.code 0} true;
    $i324 := $sub.i32($i310, 1);
    goto corral_source_split_7647;

  corral_source_split_7647:
    assume {:verifier.code 0} true;
    $i325 := $sgt.i32($i310, 0);
    goto corral_source_split_7648;

  corral_source_split_7648:
    assume {:verifier.code 0} true;
    assume {:branchcond $i325} true;
    goto $bb192, $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    assume !($i325 == 1);
    goto $bb23;

  $bb192:
    assume $i325 == 1;
    goto corral_source_split_7650;

  corral_source_split_7650:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb195, $bb197;

  $bb197:
    assume !(1 == 1);
    goto corral_source_split_7659;

  corral_source_split_7659:
    assume {:verifier.code 0} true;
    $i326 := $eq.i32($i324, 0);
    goto corral_source_split_7660;

  corral_source_split_7660:
    assume {:verifier.code 0} true;
    assume {:branchcond $i326} true;
    goto $bb198, $bb199;

  $bb199:
    assume !($i326 == 1);
    goto corral_source_split_7662;

  corral_source_split_7662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1261} $i327 := sprintf.ref.ref($p316, .str.5);
    goto corral_source_split_7663;

  corral_source_split_7663:
    assume {:verifier.code 0} true;
    $i328 := $sext.i32.i64($i327);
    goto corral_source_split_7664;

  corral_source_split_7664:
    assume {:verifier.code 0} true;
    $p329 := $add.ref($p316, $mul.ref($i328, 1));
    assume {:verifier.code 0} true;
    $p330, $p331 := $p329, $p317;
    goto $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7666;

  corral_source_split_7666:
    assume {:verifier.code 0} true;
    $i338 := $sub.i32($i324, 1);
    goto corral_source_split_7667;

  corral_source_split_7667:
    assume {:verifier.code 0} true;
    $i339 := $sgt.i32($i324, 0);
    goto corral_source_split_7668;

  corral_source_split_7668:
    assume {:verifier.code 0} true;
    assume {:branchcond $i339} true;
    goto $bb201, $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    assume !($i339 == 1);
    goto $bb23;

  $bb201:
    assume $i339 == 1;
    goto corral_source_split_7670;

  corral_source_split_7670:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb204, $bb206;

  $bb206:
    assume !(1 == 1);
    goto corral_source_split_7679;

  corral_source_split_7679:
    assume {:verifier.code 0} true;
    $i340 := $eq.i32($i338, 0);
    goto corral_source_split_7680;

  corral_source_split_7680:
    assume {:verifier.code 0} true;
    assume {:branchcond $i340} true;
    goto $bb207, $bb208;

  $bb208:
    assume !($i340 == 1);
    goto corral_source_split_7682;

  corral_source_split_7682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1263} $i341 := sprintf.ref.ref($p330, .str.5);
    goto corral_source_split_7683;

  corral_source_split_7683:
    assume {:verifier.code 0} true;
    $i342 := $sext.i32.i64($i341);
    goto corral_source_split_7684;

  corral_source_split_7684:
    assume {:verifier.code 0} true;
    $p343 := $add.ref($p330, $mul.ref($i342, 1));
    assume {:verifier.code 0} true;
    $p344, $p345 := $p343, $p331;
    goto $bb209;

  $bb209:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7686;

  corral_source_split_7686:
    assume {:verifier.code 0} true;
    $i352 := $sub.i32($i338, 1);
    goto corral_source_split_7687;

  corral_source_split_7687:
    assume {:verifier.code 0} true;
    $i353 := $sgt.i32($i338, 0);
    goto corral_source_split_7688;

  corral_source_split_7688:
    assume {:verifier.code 0} true;
    assume {:branchcond $i353} true;
    goto $bb210, $bb211;

  $bb211:
    assume {:verifier.code 0} true;
    assume !($i353 == 1);
    goto $bb23;

  $bb210:
    assume $i353 == 1;
    goto corral_source_split_7690;

  corral_source_split_7690:
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb212:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb213, $bb215;

  $bb215:
    assume !(1 == 1);
    goto corral_source_split_7699;

  corral_source_split_7699:
    assume {:verifier.code 0} true;
    $i354 := $eq.i32($i352, 0);
    goto corral_source_split_7700;

  corral_source_split_7700:
    assume {:verifier.code 0} true;
    assume {:branchcond $i354} true;
    goto $bb216, $bb217;

  $bb217:
    assume !($i354 == 1);
    goto corral_source_split_7702;

  corral_source_split_7702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1265} $i355 := sprintf.ref.ref($p344, .str.5);
    goto corral_source_split_7703;

  corral_source_split_7703:
    assume {:verifier.code 0} true;
    $i356 := $sext.i32.i64($i355);
    goto corral_source_split_7704;

  corral_source_split_7704:
    assume {:verifier.code 0} true;
    $p357 := $add.ref($p344, $mul.ref($i356, 1));
    assume {:verifier.code 0} true;
    $p358, $p359 := $p357, $p345;
    goto $bb218;

  $bb218:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7706;

  corral_source_split_7706:
    assume {:verifier.code 0} true;
    $i366 := $sub.i32($i352, 1);
    goto corral_source_split_7707;

  corral_source_split_7707:
    assume {:verifier.code 0} true;
    $i367 := $sgt.i32($i352, 0);
    goto corral_source_split_7708;

  corral_source_split_7708:
    assume {:verifier.code 0} true;
    assume {:branchcond $i367} true;
    goto $bb219, $bb220;

  $bb220:
    assume {:verifier.code 0} true;
    assume !($i367 == 1);
    goto $bb23;

  $bb219:
    assume $i367 == 1;
    goto corral_source_split_7710;

  corral_source_split_7710:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb221:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb222, $bb224;

  $bb224:
    assume !(1 == 1);
    goto corral_source_split_7719;

  corral_source_split_7719:
    assume {:verifier.code 0} true;
    $i368 := $eq.i32($i366, 0);
    goto corral_source_split_7720;

  corral_source_split_7720:
    assume {:verifier.code 0} true;
    assume {:branchcond $i368} true;
    goto $bb225, $bb226;

  $bb226:
    assume !($i368 == 1);
    goto corral_source_split_7722;

  corral_source_split_7722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1267} $i369 := sprintf.ref.ref($p358, .str.5);
    goto corral_source_split_7723;

  corral_source_split_7723:
    assume {:verifier.code 0} true;
    $i370 := $sext.i32.i64($i369);
    goto corral_source_split_7724;

  corral_source_split_7724:
    assume {:verifier.code 0} true;
    $p371 := $add.ref($p358, $mul.ref($i370, 1));
    assume {:verifier.code 0} true;
    $p372, $p373 := $p371, $p359;
    goto $bb227;

  $bb227:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7726;

  corral_source_split_7726:
    assume {:verifier.code 0} true;
    $i380 := $sub.i32($i366, 1);
    goto corral_source_split_7727;

  corral_source_split_7727:
    assume {:verifier.code 0} true;
    $i381 := $sgt.i32($i366, 0);
    goto corral_source_split_7728;

  corral_source_split_7728:
    assume {:verifier.code 0} true;
    assume {:branchcond $i381} true;
    goto $bb228, $bb229;

  $bb229:
    assume {:verifier.code 0} true;
    assume !($i381 == 1);
    goto $bb23;

  $bb228:
    assume $i381 == 1;
    goto corral_source_split_7730;

  corral_source_split_7730:
    assume {:verifier.code 0} true;
    goto $bb230;

  $bb230:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb231, $bb233;

  $bb233:
    assume !(1 == 1);
    goto corral_source_split_7739;

  corral_source_split_7739:
    assume {:verifier.code 0} true;
    $i382 := $eq.i32($i380, 0);
    goto corral_source_split_7740;

  corral_source_split_7740:
    assume {:verifier.code 0} true;
    assume {:branchcond $i382} true;
    goto $bb234, $bb235;

  $bb235:
    assume !($i382 == 1);
    goto corral_source_split_7742;

  corral_source_split_7742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1269} $i383 := sprintf.ref.ref($p372, .str.5);
    goto corral_source_split_7743;

  corral_source_split_7743:
    assume {:verifier.code 0} true;
    $i384 := $sext.i32.i64($i383);
    goto corral_source_split_7744;

  corral_source_split_7744:
    assume {:verifier.code 0} true;
    $p385 := $add.ref($p372, $mul.ref($i384, 1));
    assume {:verifier.code 0} true;
    $p386, $p387 := $p385, $p373;
    goto $bb236;

  $bb236:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7746;

  corral_source_split_7746:
    assume {:verifier.code 0} true;
    $i394 := $sub.i32($i380, 1);
    goto corral_source_split_7747;

  corral_source_split_7747:
    assume {:verifier.code 0} true;
    $i395 := $sgt.i32($i380, 0);
    goto corral_source_split_7748;

  corral_source_split_7748:
    assume {:verifier.code 0} true;
    assume {:branchcond $i395} true;
    goto $bb237, $bb238;

  $bb238:
    assume {:verifier.code 0} true;
    assume !($i395 == 1);
    goto $bb23;

  $bb237:
    assume $i395 == 1;
    goto corral_source_split_7750;

  corral_source_split_7750:
    assume {:verifier.code 0} true;
    goto $bb239;

  $bb239:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb240, $bb242;

  $bb242:
    assume !(1 == 1);
    goto corral_source_split_7759;

  corral_source_split_7759:
    assume {:verifier.code 0} true;
    $i396 := $eq.i32($i394, 0);
    goto corral_source_split_7760;

  corral_source_split_7760:
    assume {:verifier.code 0} true;
    assume {:branchcond $i396} true;
    goto $bb243, $bb244;

  $bb244:
    assume !($i396 == 1);
    goto corral_source_split_7762;

  corral_source_split_7762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1271} $i397 := sprintf.ref.ref($p386, .str.5);
    goto corral_source_split_7763;

  corral_source_split_7763:
    assume {:verifier.code 0} true;
    $i398 := $sext.i32.i64($i397);
    goto corral_source_split_7764;

  corral_source_split_7764:
    assume {:verifier.code 0} true;
    $p399 := $add.ref($p386, $mul.ref($i398, 1));
    assume {:verifier.code 0} true;
    $p400, $p401 := $p399, $p387;
    goto $bb245;

  $bb245:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7766;

  corral_source_split_7766:
    assume {:verifier.code 0} true;
    $i408 := $sub.i32($i394, 1);
    goto corral_source_split_7767;

  corral_source_split_7767:
    assume {:verifier.code 0} true;
    $i409 := $sgt.i32($i394, 0);
    goto corral_source_split_7768;

  corral_source_split_7768:
    assume {:verifier.code 0} true;
    assume {:branchcond $i409} true;
    goto $bb246, $bb247;

  $bb247:
    assume {:verifier.code 0} true;
    assume !($i409 == 1);
    goto $bb23;

  $bb246:
    assume $i409 == 1;
    goto corral_source_split_7770;

  corral_source_split_7770:
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb248:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb249, $bb251;

  $bb251:
    assume !(1 == 1);
    goto corral_source_split_7779;

  corral_source_split_7779:
    assume {:verifier.code 0} true;
    $i410 := $eq.i32($i408, 0);
    goto corral_source_split_7780;

  corral_source_split_7780:
    assume {:verifier.code 0} true;
    assume {:branchcond $i410} true;
    goto $bb252, $bb253;

  $bb253:
    assume !($i410 == 1);
    goto corral_source_split_7782;

  corral_source_split_7782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1273} $i411 := sprintf.ref.ref($p400, .str.5);
    goto corral_source_split_7783;

  corral_source_split_7783:
    assume {:verifier.code 0} true;
    $i412 := $sext.i32.i64($i411);
    goto corral_source_split_7784;

  corral_source_split_7784:
    assume {:verifier.code 0} true;
    $p413 := $add.ref($p400, $mul.ref($i412, 1));
    assume {:verifier.code 0} true;
    $p414, $p415 := $p413, $p401;
    goto $bb254;

  $bb254:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7786;

  corral_source_split_7786:
    assume {:verifier.code 0} true;
    $i422 := $sub.i32($i408, 1);
    goto corral_source_split_7787;

  corral_source_split_7787:
    assume {:verifier.code 0} true;
    $i423 := $sgt.i32($i408, 0);
    goto corral_source_split_7788;

  corral_source_split_7788:
    assume {:verifier.code 0} true;
    assume {:branchcond $i423} true;
    goto $bb255, $bb256;

  $bb256:
    assume {:verifier.code 0} true;
    assume !($i423 == 1);
    goto $bb23;

  $bb255:
    assume $i423 == 1;
    goto corral_source_split_7790;

  corral_source_split_7790:
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb257:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb258, $bb260;

  $bb260:
    assume !(1 == 1);
    goto corral_source_split_7799;

  corral_source_split_7799:
    assume {:verifier.code 0} true;
    $i424 := $eq.i32($i422, 0);
    goto corral_source_split_7800;

  corral_source_split_7800:
    assume {:verifier.code 0} true;
    assume {:branchcond $i424} true;
    goto $bb261, $bb262;

  $bb262:
    assume !($i424 == 1);
    goto corral_source_split_7802;

  corral_source_split_7802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1275} $i425 := sprintf.ref.ref($p414, .str.5);
    goto corral_source_split_7803;

  corral_source_split_7803:
    assume {:verifier.code 0} true;
    $i426 := $sext.i32.i64($i425);
    goto corral_source_split_7804;

  corral_source_split_7804:
    assume {:verifier.code 0} true;
    $p427 := $add.ref($p414, $mul.ref($i426, 1));
    assume {:verifier.code 0} true;
    $p428, $p429 := $p427, $p415;
    goto $bb263;

  $bb263:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7806;

  corral_source_split_7806:
    assume {:verifier.code 0} true;
    $i436 := $sub.i32($i422, 1);
    goto corral_source_split_7807;

  corral_source_split_7807:
    assume {:verifier.code 0} true;
    $i437 := $sgt.i32($i422, 0);
    goto corral_source_split_7808;

  corral_source_split_7808:
    assume {:verifier.code 0} true;
    assume {:branchcond $i437} true;
    goto $bb264, $bb265;

  $bb265:
    assume {:verifier.code 0} true;
    assume !($i437 == 1);
    goto $bb23;

  $bb264:
    assume $i437 == 1;
    goto corral_source_split_7810;

  corral_source_split_7810:
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb266:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb267, $bb269;

  $bb269:
    assume !(1 == 1);
    goto corral_source_split_7819;

  corral_source_split_7819:
    assume {:verifier.code 0} true;
    $i438 := $eq.i32($i436, 0);
    goto corral_source_split_7820;

  corral_source_split_7820:
    assume {:verifier.code 0} true;
    assume {:branchcond $i438} true;
    goto $bb270, $bb271;

  $bb271:
    assume !($i438 == 1);
    goto corral_source_split_7822;

  corral_source_split_7822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1277} $i439 := sprintf.ref.ref($p428, .str.5);
    goto corral_source_split_7823;

  corral_source_split_7823:
    assume {:verifier.code 0} true;
    $i440 := $sext.i32.i64($i439);
    goto corral_source_split_7824;

  corral_source_split_7824:
    assume {:verifier.code 0} true;
    $p441 := $add.ref($p428, $mul.ref($i440, 1));
    assume {:verifier.code 0} true;
    $p442, $p443 := $p441, $p429;
    goto $bb272;

  $bb272:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7826;

  corral_source_split_7826:
    assume {:verifier.code 0} true;
    $i450 := $sub.i32($i436, 1);
    goto corral_source_split_7827;

  corral_source_split_7827:
    assume {:verifier.code 0} true;
    $i451 := $sgt.i32($i436, 0);
    goto corral_source_split_7828;

  corral_source_split_7828:
    assume {:verifier.code 0} true;
    assume {:branchcond $i451} true;
    goto $bb273, $bb274;

  $bb274:
    assume {:verifier.code 0} true;
    assume !($i451 == 1);
    goto $bb23;

  $bb273:
    assume $i451 == 1;
    goto corral_source_split_7830;

  corral_source_split_7830:
    assume {:verifier.code 0} true;
    goto $bb275;

  $bb275:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb276, $bb278;

  $bb278:
    assume !(1 == 1);
    goto corral_source_split_7839;

  corral_source_split_7839:
    assume {:verifier.code 0} true;
    $i452 := $eq.i32($i450, 0);
    goto corral_source_split_7840;

  corral_source_split_7840:
    assume {:verifier.code 0} true;
    assume {:branchcond $i452} true;
    goto $bb279, $bb280;

  $bb280:
    assume !($i452 == 1);
    goto corral_source_split_7842;

  corral_source_split_7842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1279} $i453 := sprintf.ref.ref($p442, .str.5);
    goto corral_source_split_7843;

  corral_source_split_7843:
    assume {:verifier.code 0} true;
    $i454 := $sext.i32.i64($i453);
    goto corral_source_split_7844;

  corral_source_split_7844:
    assume {:verifier.code 0} true;
    $p455 := $add.ref($p442, $mul.ref($i454, 1));
    assume {:verifier.code 0} true;
    $p456, $p457 := $p455, $p443;
    goto $bb281;

  $bb281:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7846;

  corral_source_split_7846:
    assume {:verifier.code 0} true;
    $i464 := $sub.i32($i450, 1);
    goto corral_source_split_7847;

  corral_source_split_7847:
    assume {:verifier.code 0} true;
    $i465 := $sgt.i32($i450, 0);
    goto corral_source_split_7848;

  corral_source_split_7848:
    assume {:verifier.code 0} true;
    assume {:branchcond $i465} true;
    goto $bb282, $bb283;

  $bb283:
    assume {:verifier.code 0} true;
    assume !($i465 == 1);
    goto $bb23;

  $bb282:
    assume $i465 == 1;
    goto corral_source_split_7850;

  corral_source_split_7850:
    assume {:verifier.code 0} true;
    goto $bb284;

  $bb284:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb285, $bb287;

  $bb287:
    assume !(1 == 1);
    goto corral_source_split_7859;

  corral_source_split_7859:
    assume {:verifier.code 0} true;
    $i466 := $eq.i32($i464, 0);
    goto corral_source_split_7860;

  corral_source_split_7860:
    assume {:verifier.code 0} true;
    assume {:branchcond $i466} true;
    goto $bb288, $bb289;

  $bb289:
    assume !($i466 == 1);
    goto corral_source_split_7862;

  corral_source_split_7862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1281} $i467 := sprintf.ref.ref($p456, .str.5);
    goto corral_source_split_7863;

  corral_source_split_7863:
    assume {:verifier.code 0} true;
    $i468 := $sext.i32.i64($i467);
    goto corral_source_split_7864;

  corral_source_split_7864:
    assume {:verifier.code 0} true;
    $p469 := $add.ref($p456, $mul.ref($i468, 1));
    assume {:verifier.code 0} true;
    $p470, $p471 := $p469, $p457;
    goto $bb290;

  $bb290:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7866;

  corral_source_split_7866:
    assume {:verifier.code 0} true;
    $i478 := $sub.i32($i464, 1);
    goto corral_source_split_7867;

  corral_source_split_7867:
    assume {:verifier.code 0} true;
    $i479 := $sgt.i32($i464, 0);
    goto corral_source_split_7868;

  corral_source_split_7868:
    assume {:verifier.code 0} true;
    assume {:branchcond $i479} true;
    goto $bb291, $bb292;

  $bb292:
    assume {:verifier.code 0} true;
    assume !($i479 == 1);
    goto $bb23;

  $bb291:
    assume $i479 == 1;
    goto corral_source_split_7870;

  corral_source_split_7870:
    assume {:verifier.code 0} true;
    goto $bb293;

  $bb293:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb294, $bb296;

  $bb296:
    assume !(1 == 1);
    goto corral_source_split_7879;

  corral_source_split_7879:
    assume {:verifier.code 0} true;
    $i480 := $eq.i32($i478, 0);
    goto corral_source_split_7880;

  corral_source_split_7880:
    assume {:verifier.code 0} true;
    assume {:branchcond $i480} true;
    goto $bb297, $bb298;

  $bb298:
    assume !($i480 == 1);
    goto corral_source_split_7882;

  corral_source_split_7882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1283} $i481 := sprintf.ref.ref($p470, .str.5);
    goto corral_source_split_7883;

  corral_source_split_7883:
    assume {:verifier.code 0} true;
    $i482 := $sext.i32.i64($i481);
    goto corral_source_split_7884;

  corral_source_split_7884:
    assume {:verifier.code 0} true;
    $p483 := $add.ref($p470, $mul.ref($i482, 1));
    assume {:verifier.code 0} true;
    $p484, $p485 := $p483, $p471;
    goto $bb299;

  $bb299:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7886;

  corral_source_split_7886:
    assume {:verifier.code 0} true;
    $i492 := $sub.i32($i478, 1);
    goto corral_source_split_7887;

  corral_source_split_7887:
    assume {:verifier.code 0} true;
    $i493 := $sgt.i32($i478, 0);
    goto corral_source_split_7888;

  corral_source_split_7888:
    assume {:verifier.code 0} true;
    assume {:branchcond $i493} true;
    goto $bb300, $bb301;

  $bb301:
    assume {:verifier.code 0} true;
    assume !($i493 == 1);
    goto $bb23;

  $bb300:
    assume $i493 == 1;
    goto corral_source_split_7890;

  corral_source_split_7890:
    assume {:verifier.code 0} true;
    goto $bb302;

  $bb302:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb303, $bb305;

  $bb305:
    assume !(1 == 1);
    goto corral_source_split_7899;

  corral_source_split_7899:
    assume {:verifier.code 0} true;
    $i494 := $eq.i32($i492, 0);
    goto corral_source_split_7900;

  corral_source_split_7900:
    assume {:verifier.code 0} true;
    assume {:branchcond $i494} true;
    goto $bb306, $bb307;

  $bb307:
    assume !($i494 == 1);
    goto corral_source_split_7902;

  corral_source_split_7902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1285} $i495 := sprintf.ref.ref($p484, .str.5);
    goto corral_source_split_7903;

  corral_source_split_7903:
    assume {:verifier.code 0} true;
    $i496 := $sext.i32.i64($i495);
    goto corral_source_split_7904;

  corral_source_split_7904:
    assume {:verifier.code 0} true;
    $p497 := $add.ref($p484, $mul.ref($i496, 1));
    assume {:verifier.code 0} true;
    $p498, $p499 := $p497, $p485;
    goto $bb308;

  $bb308:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7906;

  corral_source_split_7906:
    assume {:verifier.code 0} true;
    $i506 := $sub.i32($i492, 1);
    goto corral_source_split_7907;

  corral_source_split_7907:
    assume {:verifier.code 0} true;
    $i507 := $sgt.i32($i492, 0);
    goto corral_source_split_7908;

  corral_source_split_7908:
    assume {:verifier.code 0} true;
    assume {:branchcond $i507} true;
    goto $bb309, $bb310;

  $bb310:
    assume {:verifier.code 0} true;
    assume !($i507 == 1);
    goto $bb23;

  $bb309:
    assume $i507 == 1;
    goto corral_source_split_7910;

  corral_source_split_7910:
    assume {:verifier.code 0} true;
    goto $bb311;

  $bb311:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb312, $bb314;

  $bb314:
    assume !(1 == 1);
    goto corral_source_split_7919;

  corral_source_split_7919:
    assume {:verifier.code 0} true;
    $i508 := $eq.i32($i506, 0);
    goto corral_source_split_7920;

  corral_source_split_7920:
    assume {:verifier.code 0} true;
    assume {:branchcond $i508} true;
    goto $bb315, $bb316;

  $bb316:
    assume !($i508 == 1);
    goto corral_source_split_7922;

  corral_source_split_7922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1287} $i509 := sprintf.ref.ref($p498, .str.5);
    goto corral_source_split_7923;

  corral_source_split_7923:
    assume {:verifier.code 0} true;
    $i510 := $sext.i32.i64($i509);
    goto corral_source_split_7924;

  corral_source_split_7924:
    assume {:verifier.code 0} true;
    $p511 := $add.ref($p498, $mul.ref($i510, 1));
    assume {:verifier.code 0} true;
    $p512, $p513 := $p511, $p499;
    goto $bb317;

  $bb317:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7926;

  corral_source_split_7926:
    assume {:verifier.code 0} true;
    $i520 := $sub.i32($i506, 1);
    goto corral_source_split_7927;

  corral_source_split_7927:
    assume {:verifier.code 0} true;
    $i521 := $sgt.i32($i506, 0);
    goto corral_source_split_7928;

  corral_source_split_7928:
    assume {:verifier.code 0} true;
    assume {:branchcond $i521} true;
    goto $bb318, $bb319;

  $bb319:
    assume {:verifier.code 0} true;
    assume !($i521 == 1);
    goto $bb23;

  $bb318:
    assume $i521 == 1;
    goto corral_source_split_7930;

  corral_source_split_7930:
    assume {:verifier.code 0} true;
    goto $bb320;

  $bb320:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb321, $bb323;

  $bb323:
    assume !(1 == 1);
    goto corral_source_split_7939;

  corral_source_split_7939:
    assume {:verifier.code 0} true;
    $i522 := $eq.i32($i520, 0);
    goto corral_source_split_7940;

  corral_source_split_7940:
    assume {:verifier.code 0} true;
    assume {:branchcond $i522} true;
    goto $bb324, $bb325;

  $bb325:
    assume !($i522 == 1);
    goto corral_source_split_7942;

  corral_source_split_7942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1289} $i523 := sprintf.ref.ref($p512, .str.5);
    goto corral_source_split_7943;

  corral_source_split_7943:
    assume {:verifier.code 0} true;
    $i524 := $sext.i32.i64($i523);
    goto corral_source_split_7944;

  corral_source_split_7944:
    assume {:verifier.code 0} true;
    $p525 := $add.ref($p512, $mul.ref($i524, 1));
    assume {:verifier.code 0} true;
    $p526, $p527 := $p525, $p513;
    goto $bb326;

  $bb326:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7946;

  corral_source_split_7946:
    assume {:verifier.code 0} true;
    $i534 := $sub.i32($i520, 1);
    goto corral_source_split_7947;

  corral_source_split_7947:
    assume {:verifier.code 0} true;
    $i535 := $sgt.i32($i520, 0);
    goto corral_source_split_7948;

  corral_source_split_7948:
    assume {:verifier.code 0} true;
    assume {:branchcond $i535} true;
    goto $bb327, $bb328;

  $bb328:
    assume {:verifier.code 0} true;
    assume !($i535 == 1);
    goto $bb23;

  $bb327:
    assume $i535 == 1;
    goto corral_source_split_7950;

  corral_source_split_7950:
    assume {:verifier.code 0} true;
    goto $bb329;

  $bb329:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb330, $bb332;

  $bb332:
    assume !(1 == 1);
    goto corral_source_split_7959;

  corral_source_split_7959:
    assume {:verifier.code 0} true;
    $i536 := $eq.i32($i534, 0);
    goto corral_source_split_7960;

  corral_source_split_7960:
    assume {:verifier.code 0} true;
    assume {:branchcond $i536} true;
    goto $bb333, $bb334;

  $bb334:
    assume !($i536 == 1);
    goto corral_source_split_7962;

  corral_source_split_7962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1291} $i537 := sprintf.ref.ref($p526, .str.5);
    goto corral_source_split_7963;

  corral_source_split_7963:
    assume {:verifier.code 0} true;
    $i538 := $sext.i32.i64($i537);
    goto corral_source_split_7964;

  corral_source_split_7964:
    assume {:verifier.code 0} true;
    $p539 := $add.ref($p526, $mul.ref($i538, 1));
    assume {:verifier.code 0} true;
    $p540, $p541 := $p539, $p527;
    goto $bb335;

  $bb335:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7966;

  corral_source_split_7966:
    assume {:verifier.code 0} true;
    $i548 := $sub.i32($i534, 1);
    goto corral_source_split_7967;

  corral_source_split_7967:
    assume {:verifier.code 0} true;
    $i549 := $sgt.i32($i534, 0);
    goto corral_source_split_7968;

  corral_source_split_7968:
    assume {:verifier.code 0} true;
    assume {:branchcond $i549} true;
    goto $bb336, $bb337;

  $bb337:
    assume {:verifier.code 0} true;
    assume !($i549 == 1);
    goto $bb23;

  $bb336:
    assume $i549 == 1;
    goto corral_source_split_7970;

  corral_source_split_7970:
    assume {:verifier.code 0} true;
    goto $bb338;

  $bb338:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb339, $bb341;

  $bb341:
    assume !(1 == 1);
    goto corral_source_split_7979;

  corral_source_split_7979:
    assume {:verifier.code 0} true;
    $i550 := $eq.i32($i548, 0);
    goto corral_source_split_7980;

  corral_source_split_7980:
    assume {:verifier.code 0} true;
    assume {:branchcond $i550} true;
    goto $bb342, $bb343;

  $bb343:
    assume !($i550 == 1);
    goto corral_source_split_7982;

  corral_source_split_7982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1293} $i551 := sprintf.ref.ref($p540, .str.5);
    goto corral_source_split_7983;

  corral_source_split_7983:
    assume {:verifier.code 0} true;
    $i552 := $sext.i32.i64($i551);
    goto corral_source_split_7984;

  corral_source_split_7984:
    assume {:verifier.code 0} true;
    $p553 := $add.ref($p540, $mul.ref($i552, 1));
    assume {:verifier.code 0} true;
    $p554, $p555 := $p553, $p541;
    goto $bb344;

  $bb344:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7986;

  corral_source_split_7986:
    assume {:verifier.code 0} true;
    $i562 := $sub.i32($i548, 1);
    goto corral_source_split_7987;

  corral_source_split_7987:
    assume {:verifier.code 0} true;
    $i563 := $sgt.i32($i548, 0);
    goto corral_source_split_7988;

  corral_source_split_7988:
    assume {:verifier.code 0} true;
    assume {:branchcond $i563} true;
    goto $bb345, $bb346;

  $bb346:
    assume {:verifier.code 0} true;
    assume !($i563 == 1);
    goto $bb23;

  $bb345:
    assume $i563 == 1;
    goto corral_source_split_7990;

  corral_source_split_7990:
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb347:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb348, $bb350;

  $bb350:
    assume !(1 == 1);
    goto corral_source_split_7999;

  corral_source_split_7999:
    assume {:verifier.code 0} true;
    $i564 := $eq.i32($i562, 0);
    goto corral_source_split_8000;

  corral_source_split_8000:
    assume {:verifier.code 0} true;
    assume {:branchcond $i564} true;
    goto $bb351, $bb352;

  $bb352:
    assume !($i564 == 1);
    goto corral_source_split_8002;

  corral_source_split_8002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1295} $i565 := sprintf.ref.ref($p554, .str.5);
    goto corral_source_split_8003;

  corral_source_split_8003:
    assume {:verifier.code 0} true;
    $i566 := $sext.i32.i64($i565);
    goto corral_source_split_8004;

  corral_source_split_8004:
    assume {:verifier.code 0} true;
    $p567 := $add.ref($p554, $mul.ref($i566, 1));
    assume {:verifier.code 0} true;
    $p568, $p569 := $p567, $p555;
    goto $bb353;

  $bb353:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8006;

  corral_source_split_8006:
    assume {:verifier.code 0} true;
    $i576 := $sub.i32($i562, 1);
    goto corral_source_split_8007;

  corral_source_split_8007:
    assume {:verifier.code 0} true;
    $i577 := $sgt.i32($i562, 0);
    goto corral_source_split_8008;

  corral_source_split_8008:
    assume {:verifier.code 0} true;
    assume {:branchcond $i577} true;
    goto $bb354, $bb355;

  $bb355:
    assume {:verifier.code 0} true;
    assume !($i577 == 1);
    goto $bb23;

  $bb354:
    assume $i577 == 1;
    goto corral_source_split_8010;

  corral_source_split_8010:
    assume {:verifier.code 0} true;
    goto $bb356;

  $bb356:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb357, $bb359;

  $bb359:
    assume !(1 == 1);
    goto corral_source_split_8019;

  corral_source_split_8019:
    assume {:verifier.code 0} true;
    $i578 := $eq.i32($i576, 0);
    goto corral_source_split_8020;

  corral_source_split_8020:
    assume {:verifier.code 0} true;
    assume {:branchcond $i578} true;
    goto $bb360, $bb361;

  $bb361:
    assume !($i578 == 1);
    goto corral_source_split_8022;

  corral_source_split_8022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1297} $i579 := sprintf.ref.ref($p568, .str.5);
    goto corral_source_split_8023;

  corral_source_split_8023:
    assume {:verifier.code 0} true;
    $i580 := $sext.i32.i64($i579);
    goto corral_source_split_8024;

  corral_source_split_8024:
    assume {:verifier.code 0} true;
    $p581 := $add.ref($p568, $mul.ref($i580, 1));
    assume {:verifier.code 0} true;
    $p582, $p583 := $p581, $p569;
    goto $bb362;

  $bb362:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8026;

  corral_source_split_8026:
    assume {:verifier.code 0} true;
    $i590 := $sub.i32($i576, 1);
    goto corral_source_split_8027;

  corral_source_split_8027:
    assume {:verifier.code 0} true;
    $i591 := $sgt.i32($i576, 0);
    goto corral_source_split_8028;

  corral_source_split_8028:
    assume {:verifier.code 0} true;
    assume {:branchcond $i591} true;
    goto $bb363, $bb364;

  $bb364:
    assume {:verifier.code 0} true;
    assume !($i591 == 1);
    goto $bb23;

  $bb363:
    assume $i591 == 1;
    goto corral_source_split_8030;

  corral_source_split_8030:
    assume {:verifier.code 0} true;
    goto $bb365;

  $bb365:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb366, $bb368;

  $bb368:
    assume !(1 == 1);
    goto corral_source_split_8039;

  corral_source_split_8039:
    assume {:verifier.code 0} true;
    $i592 := $eq.i32($i590, 0);
    goto corral_source_split_8040;

  corral_source_split_8040:
    assume {:verifier.code 0} true;
    assume {:branchcond $i592} true;
    goto $bb369, $bb370;

  $bb370:
    assume !($i592 == 1);
    goto corral_source_split_8042;

  corral_source_split_8042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1299} $i593 := sprintf.ref.ref($p582, .str.5);
    goto corral_source_split_8043;

  corral_source_split_8043:
    assume {:verifier.code 0} true;
    $i594 := $sext.i32.i64($i593);
    goto corral_source_split_8044;

  corral_source_split_8044:
    assume {:verifier.code 0} true;
    $p595 := $add.ref($p582, $mul.ref($i594, 1));
    assume {:verifier.code 0} true;
    $p596, $p597 := $p595, $p583;
    goto $bb371;

  $bb371:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8046;

  corral_source_split_8046:
    assume {:verifier.code 0} true;
    $i604 := $sub.i32($i590, 1);
    goto corral_source_split_8047;

  corral_source_split_8047:
    assume {:verifier.code 0} true;
    $i605 := $sgt.i32($i590, 0);
    goto corral_source_split_8048;

  corral_source_split_8048:
    assume {:verifier.code 0} true;
    assume {:branchcond $i605} true;
    goto $bb372, $bb373;

  $bb373:
    assume {:verifier.code 0} true;
    assume !($i605 == 1);
    goto $bb23;

  $bb372:
    assume $i605 == 1;
    goto corral_source_split_8050;

  corral_source_split_8050:
    assume {:verifier.code 0} true;
    goto $bb374;

  $bb374:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb375, $bb377;

  $bb377:
    assume !(1 == 1);
    goto corral_source_split_8059;

  corral_source_split_8059:
    assume {:verifier.code 0} true;
    $i606 := $eq.i32($i604, 0);
    goto corral_source_split_8060;

  corral_source_split_8060:
    assume {:verifier.code 0} true;
    assume {:branchcond $i606} true;
    goto $bb378, $bb379;

  $bb379:
    assume !($i606 == 1);
    goto corral_source_split_8062;

  corral_source_split_8062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1301} $i607 := sprintf.ref.ref($p596, .str.5);
    goto corral_source_split_8063;

  corral_source_split_8063:
    assume {:verifier.code 0} true;
    $i608 := $sext.i32.i64($i607);
    goto corral_source_split_8064;

  corral_source_split_8064:
    assume {:verifier.code 0} true;
    $p609 := $add.ref($p596, $mul.ref($i608, 1));
    assume {:verifier.code 0} true;
    $p610, $p611 := $p609, $p597;
    goto $bb380;

  $bb380:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8066;

  corral_source_split_8066:
    assume {:verifier.code 0} true;
    $i618 := $sub.i32($i604, 1);
    goto corral_source_split_8067;

  corral_source_split_8067:
    assume {:verifier.code 0} true;
    $i619 := $sgt.i32($i604, 0);
    goto corral_source_split_8068;

  corral_source_split_8068:
    assume {:verifier.code 0} true;
    assume {:branchcond $i619} true;
    goto $bb381, $bb382;

  $bb382:
    assume {:verifier.code 0} true;
    assume !($i619 == 1);
    goto $bb23;

  $bb381:
    assume $i619 == 1;
    goto corral_source_split_8070;

  corral_source_split_8070:
    assume {:verifier.code 0} true;
    goto $bb383;

  $bb383:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb384, $bb386;

  $bb386:
    assume !(0 == 1);
    goto corral_source_split_8076;

  corral_source_split_8076:
    assume {:verifier.code 0} true;
    $i620 := $eq.i32($i618, 0);
    goto corral_source_split_8077;

  corral_source_split_8077:
    assume {:verifier.code 0} true;
    assume {:branchcond $i620} true;
    goto $bb387, $bb388;

  $bb388:
    assume !($i620 == 1);
    goto corral_source_split_8079;

  corral_source_split_8079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1303} vslice_dummy_var_32 := sprintf.ref.ref($p610, .str.5);
    assume {:verifier.code 0} true;
    goto $bb389;

  $bb389:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb387:
    assume {:verifier.code 0} true;
    assume $i620 == 1;
    goto $bb385;

  $bb385:
    assume {:verifier.code 0} true;
    $i622 := $load.i8($M.0, $p611);
    goto corral_source_split_8072;

  corral_source_split_8072:
    assume {:verifier.code 0} true;
    $i623 := $zext.i8.i32($i622);
    goto corral_source_split_8073;

  corral_source_split_8073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1302} vslice_dummy_var_31 := sprintf.ref.ref.i32($p610, .str.4, $i623);
    goto corral_source_split_8074;

  corral_source_split_8074:
    assume {:verifier.code 0} true;
    goto $bb389;

  $bb384:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb385;

  $bb378:
    assume {:verifier.code 0} true;
    assume $i606 == 1;
    goto $bb376;

  $bb376:
    assume {:verifier.code 0} true;
    $p612 := $add.ref($p597, $mul.ref(1, 1));
    goto corral_source_split_8052;

  corral_source_split_8052:
    assume {:verifier.code 0} true;
    $i613 := $load.i8($M.0, $p597);
    goto corral_source_split_8053;

  corral_source_split_8053:
    assume {:verifier.code 0} true;
    $i614 := $zext.i8.i32($i613);
    goto corral_source_split_8054;

  corral_source_split_8054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1300} $i615 := sprintf.ref.ref.i32($p596, .str.4, $i614);
    goto corral_source_split_8055;

  corral_source_split_8055:
    assume {:verifier.code 0} true;
    $i616 := $sext.i32.i64($i615);
    goto corral_source_split_8056;

  corral_source_split_8056:
    assume {:verifier.code 0} true;
    $p617 := $add.ref($p596, $mul.ref($i616, 1));
    goto corral_source_split_8057;

  corral_source_split_8057:
    assume {:verifier.code 0} true;
    $p610, $p611 := $p617, $p612;
    goto $bb380;

  $bb375:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb376;

  $bb369:
    assume {:verifier.code 0} true;
    assume $i592 == 1;
    goto $bb367;

  $bb367:
    assume {:verifier.code 0} true;
    $p598 := $add.ref($p583, $mul.ref(1, 1));
    goto corral_source_split_8032;

  corral_source_split_8032:
    assume {:verifier.code 0} true;
    $i599 := $load.i8($M.0, $p583);
    goto corral_source_split_8033;

  corral_source_split_8033:
    assume {:verifier.code 0} true;
    $i600 := $zext.i8.i32($i599);
    goto corral_source_split_8034;

  corral_source_split_8034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1298} $i601 := sprintf.ref.ref.i32($p582, .str.4, $i600);
    goto corral_source_split_8035;

  corral_source_split_8035:
    assume {:verifier.code 0} true;
    $i602 := $sext.i32.i64($i601);
    goto corral_source_split_8036;

  corral_source_split_8036:
    assume {:verifier.code 0} true;
    $p603 := $add.ref($p582, $mul.ref($i602, 1));
    goto corral_source_split_8037;

  corral_source_split_8037:
    assume {:verifier.code 0} true;
    $p596, $p597 := $p603, $p598;
    goto $bb371;

  $bb366:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb367;

  $bb360:
    assume {:verifier.code 0} true;
    assume $i578 == 1;
    goto $bb358;

  $bb358:
    assume {:verifier.code 0} true;
    $p584 := $add.ref($p569, $mul.ref(1, 1));
    goto corral_source_split_8012;

  corral_source_split_8012:
    assume {:verifier.code 0} true;
    $i585 := $load.i8($M.0, $p569);
    goto corral_source_split_8013;

  corral_source_split_8013:
    assume {:verifier.code 0} true;
    $i586 := $zext.i8.i32($i585);
    goto corral_source_split_8014;

  corral_source_split_8014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1296} $i587 := sprintf.ref.ref.i32($p568, .str.4, $i586);
    goto corral_source_split_8015;

  corral_source_split_8015:
    assume {:verifier.code 0} true;
    $i588 := $sext.i32.i64($i587);
    goto corral_source_split_8016;

  corral_source_split_8016:
    assume {:verifier.code 0} true;
    $p589 := $add.ref($p568, $mul.ref($i588, 1));
    goto corral_source_split_8017;

  corral_source_split_8017:
    assume {:verifier.code 0} true;
    $p582, $p583 := $p589, $p584;
    goto $bb362;

  $bb357:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb358;

  $bb351:
    assume {:verifier.code 0} true;
    assume $i564 == 1;
    goto $bb349;

  $bb349:
    assume {:verifier.code 0} true;
    $p570 := $add.ref($p555, $mul.ref(1, 1));
    goto corral_source_split_7992;

  corral_source_split_7992:
    assume {:verifier.code 0} true;
    $i571 := $load.i8($M.0, $p555);
    goto corral_source_split_7993;

  corral_source_split_7993:
    assume {:verifier.code 0} true;
    $i572 := $zext.i8.i32($i571);
    goto corral_source_split_7994;

  corral_source_split_7994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1294} $i573 := sprintf.ref.ref.i32($p554, .str.4, $i572);
    goto corral_source_split_7995;

  corral_source_split_7995:
    assume {:verifier.code 0} true;
    $i574 := $sext.i32.i64($i573);
    goto corral_source_split_7996;

  corral_source_split_7996:
    assume {:verifier.code 0} true;
    $p575 := $add.ref($p554, $mul.ref($i574, 1));
    goto corral_source_split_7997;

  corral_source_split_7997:
    assume {:verifier.code 0} true;
    $p568, $p569 := $p575, $p570;
    goto $bb353;

  $bb348:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb349;

  $bb342:
    assume {:verifier.code 0} true;
    assume $i550 == 1;
    goto $bb340;

  $bb340:
    assume {:verifier.code 0} true;
    $p556 := $add.ref($p541, $mul.ref(1, 1));
    goto corral_source_split_7972;

  corral_source_split_7972:
    assume {:verifier.code 0} true;
    $i557 := $load.i8($M.0, $p541);
    goto corral_source_split_7973;

  corral_source_split_7973:
    assume {:verifier.code 0} true;
    $i558 := $zext.i8.i32($i557);
    goto corral_source_split_7974;

  corral_source_split_7974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1292} $i559 := sprintf.ref.ref.i32($p540, .str.4, $i558);
    goto corral_source_split_7975;

  corral_source_split_7975:
    assume {:verifier.code 0} true;
    $i560 := $sext.i32.i64($i559);
    goto corral_source_split_7976;

  corral_source_split_7976:
    assume {:verifier.code 0} true;
    $p561 := $add.ref($p540, $mul.ref($i560, 1));
    goto corral_source_split_7977;

  corral_source_split_7977:
    assume {:verifier.code 0} true;
    $p554, $p555 := $p561, $p556;
    goto $bb344;

  $bb339:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb340;

  $bb333:
    assume {:verifier.code 0} true;
    assume $i536 == 1;
    goto $bb331;

  $bb331:
    assume {:verifier.code 0} true;
    $p542 := $add.ref($p527, $mul.ref(1, 1));
    goto corral_source_split_7952;

  corral_source_split_7952:
    assume {:verifier.code 0} true;
    $i543 := $load.i8($M.0, $p527);
    goto corral_source_split_7953;

  corral_source_split_7953:
    assume {:verifier.code 0} true;
    $i544 := $zext.i8.i32($i543);
    goto corral_source_split_7954;

  corral_source_split_7954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1290} $i545 := sprintf.ref.ref.i32($p526, .str.4, $i544);
    goto corral_source_split_7955;

  corral_source_split_7955:
    assume {:verifier.code 0} true;
    $i546 := $sext.i32.i64($i545);
    goto corral_source_split_7956;

  corral_source_split_7956:
    assume {:verifier.code 0} true;
    $p547 := $add.ref($p526, $mul.ref($i546, 1));
    goto corral_source_split_7957;

  corral_source_split_7957:
    assume {:verifier.code 0} true;
    $p540, $p541 := $p547, $p542;
    goto $bb335;

  $bb330:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb331;

  $bb324:
    assume {:verifier.code 0} true;
    assume $i522 == 1;
    goto $bb322;

  $bb322:
    assume {:verifier.code 0} true;
    $p528 := $add.ref($p513, $mul.ref(1, 1));
    goto corral_source_split_7932;

  corral_source_split_7932:
    assume {:verifier.code 0} true;
    $i529 := $load.i8($M.0, $p513);
    goto corral_source_split_7933;

  corral_source_split_7933:
    assume {:verifier.code 0} true;
    $i530 := $zext.i8.i32($i529);
    goto corral_source_split_7934;

  corral_source_split_7934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1288} $i531 := sprintf.ref.ref.i32($p512, .str.4, $i530);
    goto corral_source_split_7935;

  corral_source_split_7935:
    assume {:verifier.code 0} true;
    $i532 := $sext.i32.i64($i531);
    goto corral_source_split_7936;

  corral_source_split_7936:
    assume {:verifier.code 0} true;
    $p533 := $add.ref($p512, $mul.ref($i532, 1));
    goto corral_source_split_7937;

  corral_source_split_7937:
    assume {:verifier.code 0} true;
    $p526, $p527 := $p533, $p528;
    goto $bb326;

  $bb321:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb322;

  $bb315:
    assume {:verifier.code 0} true;
    assume $i508 == 1;
    goto $bb313;

  $bb313:
    assume {:verifier.code 0} true;
    $p514 := $add.ref($p499, $mul.ref(1, 1));
    goto corral_source_split_7912;

  corral_source_split_7912:
    assume {:verifier.code 0} true;
    $i515 := $load.i8($M.0, $p499);
    goto corral_source_split_7913;

  corral_source_split_7913:
    assume {:verifier.code 0} true;
    $i516 := $zext.i8.i32($i515);
    goto corral_source_split_7914;

  corral_source_split_7914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1286} $i517 := sprintf.ref.ref.i32($p498, .str.4, $i516);
    goto corral_source_split_7915;

  corral_source_split_7915:
    assume {:verifier.code 0} true;
    $i518 := $sext.i32.i64($i517);
    goto corral_source_split_7916;

  corral_source_split_7916:
    assume {:verifier.code 0} true;
    $p519 := $add.ref($p498, $mul.ref($i518, 1));
    goto corral_source_split_7917;

  corral_source_split_7917:
    assume {:verifier.code 0} true;
    $p512, $p513 := $p519, $p514;
    goto $bb317;

  $bb312:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb313;

  $bb306:
    assume {:verifier.code 0} true;
    assume $i494 == 1;
    goto $bb304;

  $bb304:
    assume {:verifier.code 0} true;
    $p500 := $add.ref($p485, $mul.ref(1, 1));
    goto corral_source_split_7892;

  corral_source_split_7892:
    assume {:verifier.code 0} true;
    $i501 := $load.i8($M.0, $p485);
    goto corral_source_split_7893;

  corral_source_split_7893:
    assume {:verifier.code 0} true;
    $i502 := $zext.i8.i32($i501);
    goto corral_source_split_7894;

  corral_source_split_7894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1284} $i503 := sprintf.ref.ref.i32($p484, .str.4, $i502);
    goto corral_source_split_7895;

  corral_source_split_7895:
    assume {:verifier.code 0} true;
    $i504 := $sext.i32.i64($i503);
    goto corral_source_split_7896;

  corral_source_split_7896:
    assume {:verifier.code 0} true;
    $p505 := $add.ref($p484, $mul.ref($i504, 1));
    goto corral_source_split_7897;

  corral_source_split_7897:
    assume {:verifier.code 0} true;
    $p498, $p499 := $p505, $p500;
    goto $bb308;

  $bb303:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb304;

  $bb297:
    assume {:verifier.code 0} true;
    assume $i480 == 1;
    goto $bb295;

  $bb295:
    assume {:verifier.code 0} true;
    $p486 := $add.ref($p471, $mul.ref(1, 1));
    goto corral_source_split_7872;

  corral_source_split_7872:
    assume {:verifier.code 0} true;
    $i487 := $load.i8($M.0, $p471);
    goto corral_source_split_7873;

  corral_source_split_7873:
    assume {:verifier.code 0} true;
    $i488 := $zext.i8.i32($i487);
    goto corral_source_split_7874;

  corral_source_split_7874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1282} $i489 := sprintf.ref.ref.i32($p470, .str.4, $i488);
    goto corral_source_split_7875;

  corral_source_split_7875:
    assume {:verifier.code 0} true;
    $i490 := $sext.i32.i64($i489);
    goto corral_source_split_7876;

  corral_source_split_7876:
    assume {:verifier.code 0} true;
    $p491 := $add.ref($p470, $mul.ref($i490, 1));
    goto corral_source_split_7877;

  corral_source_split_7877:
    assume {:verifier.code 0} true;
    $p484, $p485 := $p491, $p486;
    goto $bb299;

  $bb294:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb295;

  $bb288:
    assume {:verifier.code 0} true;
    assume $i466 == 1;
    goto $bb286;

  $bb286:
    assume {:verifier.code 0} true;
    $p472 := $add.ref($p457, $mul.ref(1, 1));
    goto corral_source_split_7852;

  corral_source_split_7852:
    assume {:verifier.code 0} true;
    $i473 := $load.i8($M.0, $p457);
    goto corral_source_split_7853;

  corral_source_split_7853:
    assume {:verifier.code 0} true;
    $i474 := $zext.i8.i32($i473);
    goto corral_source_split_7854;

  corral_source_split_7854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1280} $i475 := sprintf.ref.ref.i32($p456, .str.4, $i474);
    goto corral_source_split_7855;

  corral_source_split_7855:
    assume {:verifier.code 0} true;
    $i476 := $sext.i32.i64($i475);
    goto corral_source_split_7856;

  corral_source_split_7856:
    assume {:verifier.code 0} true;
    $p477 := $add.ref($p456, $mul.ref($i476, 1));
    goto corral_source_split_7857;

  corral_source_split_7857:
    assume {:verifier.code 0} true;
    $p470, $p471 := $p477, $p472;
    goto $bb290;

  $bb285:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb286;

  $bb279:
    assume {:verifier.code 0} true;
    assume $i452 == 1;
    goto $bb277;

  $bb277:
    assume {:verifier.code 0} true;
    $p458 := $add.ref($p443, $mul.ref(1, 1));
    goto corral_source_split_7832;

  corral_source_split_7832:
    assume {:verifier.code 0} true;
    $i459 := $load.i8($M.0, $p443);
    goto corral_source_split_7833;

  corral_source_split_7833:
    assume {:verifier.code 0} true;
    $i460 := $zext.i8.i32($i459);
    goto corral_source_split_7834;

  corral_source_split_7834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1278} $i461 := sprintf.ref.ref.i32($p442, .str.4, $i460);
    goto corral_source_split_7835;

  corral_source_split_7835:
    assume {:verifier.code 0} true;
    $i462 := $sext.i32.i64($i461);
    goto corral_source_split_7836;

  corral_source_split_7836:
    assume {:verifier.code 0} true;
    $p463 := $add.ref($p442, $mul.ref($i462, 1));
    goto corral_source_split_7837;

  corral_source_split_7837:
    assume {:verifier.code 0} true;
    $p456, $p457 := $p463, $p458;
    goto $bb281;

  $bb276:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb277;

  $bb270:
    assume {:verifier.code 0} true;
    assume $i438 == 1;
    goto $bb268;

  $bb268:
    assume {:verifier.code 0} true;
    $p444 := $add.ref($p429, $mul.ref(1, 1));
    goto corral_source_split_7812;

  corral_source_split_7812:
    assume {:verifier.code 0} true;
    $i445 := $load.i8($M.0, $p429);
    goto corral_source_split_7813;

  corral_source_split_7813:
    assume {:verifier.code 0} true;
    $i446 := $zext.i8.i32($i445);
    goto corral_source_split_7814;

  corral_source_split_7814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1276} $i447 := sprintf.ref.ref.i32($p428, .str.4, $i446);
    goto corral_source_split_7815;

  corral_source_split_7815:
    assume {:verifier.code 0} true;
    $i448 := $sext.i32.i64($i447);
    goto corral_source_split_7816;

  corral_source_split_7816:
    assume {:verifier.code 0} true;
    $p449 := $add.ref($p428, $mul.ref($i448, 1));
    goto corral_source_split_7817;

  corral_source_split_7817:
    assume {:verifier.code 0} true;
    $p442, $p443 := $p449, $p444;
    goto $bb272;

  $bb267:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb268;

  $bb261:
    assume {:verifier.code 0} true;
    assume $i424 == 1;
    goto $bb259;

  $bb259:
    assume {:verifier.code 0} true;
    $p430 := $add.ref($p415, $mul.ref(1, 1));
    goto corral_source_split_7792;

  corral_source_split_7792:
    assume {:verifier.code 0} true;
    $i431 := $load.i8($M.0, $p415);
    goto corral_source_split_7793;

  corral_source_split_7793:
    assume {:verifier.code 0} true;
    $i432 := $zext.i8.i32($i431);
    goto corral_source_split_7794;

  corral_source_split_7794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1274} $i433 := sprintf.ref.ref.i32($p414, .str.4, $i432);
    goto corral_source_split_7795;

  corral_source_split_7795:
    assume {:verifier.code 0} true;
    $i434 := $sext.i32.i64($i433);
    goto corral_source_split_7796;

  corral_source_split_7796:
    assume {:verifier.code 0} true;
    $p435 := $add.ref($p414, $mul.ref($i434, 1));
    goto corral_source_split_7797;

  corral_source_split_7797:
    assume {:verifier.code 0} true;
    $p428, $p429 := $p435, $p430;
    goto $bb263;

  $bb258:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb259;

  $bb252:
    assume {:verifier.code 0} true;
    assume $i410 == 1;
    goto $bb250;

  $bb250:
    assume {:verifier.code 0} true;
    $p416 := $add.ref($p401, $mul.ref(1, 1));
    goto corral_source_split_7772;

  corral_source_split_7772:
    assume {:verifier.code 0} true;
    $i417 := $load.i8($M.0, $p401);
    goto corral_source_split_7773;

  corral_source_split_7773:
    assume {:verifier.code 0} true;
    $i418 := $zext.i8.i32($i417);
    goto corral_source_split_7774;

  corral_source_split_7774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1272} $i419 := sprintf.ref.ref.i32($p400, .str.4, $i418);
    goto corral_source_split_7775;

  corral_source_split_7775:
    assume {:verifier.code 0} true;
    $i420 := $sext.i32.i64($i419);
    goto corral_source_split_7776;

  corral_source_split_7776:
    assume {:verifier.code 0} true;
    $p421 := $add.ref($p400, $mul.ref($i420, 1));
    goto corral_source_split_7777;

  corral_source_split_7777:
    assume {:verifier.code 0} true;
    $p414, $p415 := $p421, $p416;
    goto $bb254;

  $bb249:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb250;

  $bb243:
    assume {:verifier.code 0} true;
    assume $i396 == 1;
    goto $bb241;

  $bb241:
    assume {:verifier.code 0} true;
    $p402 := $add.ref($p387, $mul.ref(1, 1));
    goto corral_source_split_7752;

  corral_source_split_7752:
    assume {:verifier.code 0} true;
    $i403 := $load.i8($M.0, $p387);
    goto corral_source_split_7753;

  corral_source_split_7753:
    assume {:verifier.code 0} true;
    $i404 := $zext.i8.i32($i403);
    goto corral_source_split_7754;

  corral_source_split_7754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1270} $i405 := sprintf.ref.ref.i32($p386, .str.4, $i404);
    goto corral_source_split_7755;

  corral_source_split_7755:
    assume {:verifier.code 0} true;
    $i406 := $sext.i32.i64($i405);
    goto corral_source_split_7756;

  corral_source_split_7756:
    assume {:verifier.code 0} true;
    $p407 := $add.ref($p386, $mul.ref($i406, 1));
    goto corral_source_split_7757;

  corral_source_split_7757:
    assume {:verifier.code 0} true;
    $p400, $p401 := $p407, $p402;
    goto $bb245;

  $bb240:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb241;

  $bb234:
    assume {:verifier.code 0} true;
    assume $i382 == 1;
    goto $bb232;

  $bb232:
    assume {:verifier.code 0} true;
    $p388 := $add.ref($p373, $mul.ref(1, 1));
    goto corral_source_split_7732;

  corral_source_split_7732:
    assume {:verifier.code 0} true;
    $i389 := $load.i8($M.0, $p373);
    goto corral_source_split_7733;

  corral_source_split_7733:
    assume {:verifier.code 0} true;
    $i390 := $zext.i8.i32($i389);
    goto corral_source_split_7734;

  corral_source_split_7734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1268} $i391 := sprintf.ref.ref.i32($p372, .str.4, $i390);
    goto corral_source_split_7735;

  corral_source_split_7735:
    assume {:verifier.code 0} true;
    $i392 := $sext.i32.i64($i391);
    goto corral_source_split_7736;

  corral_source_split_7736:
    assume {:verifier.code 0} true;
    $p393 := $add.ref($p372, $mul.ref($i392, 1));
    goto corral_source_split_7737;

  corral_source_split_7737:
    assume {:verifier.code 0} true;
    $p386, $p387 := $p393, $p388;
    goto $bb236;

  $bb231:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb232;

  $bb225:
    assume {:verifier.code 0} true;
    assume $i368 == 1;
    goto $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    $p374 := $add.ref($p359, $mul.ref(1, 1));
    goto corral_source_split_7712;

  corral_source_split_7712:
    assume {:verifier.code 0} true;
    $i375 := $load.i8($M.0, $p359);
    goto corral_source_split_7713;

  corral_source_split_7713:
    assume {:verifier.code 0} true;
    $i376 := $zext.i8.i32($i375);
    goto corral_source_split_7714;

  corral_source_split_7714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1266} $i377 := sprintf.ref.ref.i32($p358, .str.4, $i376);
    goto corral_source_split_7715;

  corral_source_split_7715:
    assume {:verifier.code 0} true;
    $i378 := $sext.i32.i64($i377);
    goto corral_source_split_7716;

  corral_source_split_7716:
    assume {:verifier.code 0} true;
    $p379 := $add.ref($p358, $mul.ref($i378, 1));
    goto corral_source_split_7717;

  corral_source_split_7717:
    assume {:verifier.code 0} true;
    $p372, $p373 := $p379, $p374;
    goto $bb227;

  $bb222:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb223;

  $bb216:
    assume {:verifier.code 0} true;
    assume $i354 == 1;
    goto $bb214;

  $bb214:
    assume {:verifier.code 0} true;
    $p360 := $add.ref($p345, $mul.ref(1, 1));
    goto corral_source_split_7692;

  corral_source_split_7692:
    assume {:verifier.code 0} true;
    $i361 := $load.i8($M.0, $p345);
    goto corral_source_split_7693;

  corral_source_split_7693:
    assume {:verifier.code 0} true;
    $i362 := $zext.i8.i32($i361);
    goto corral_source_split_7694;

  corral_source_split_7694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1264} $i363 := sprintf.ref.ref.i32($p344, .str.4, $i362);
    goto corral_source_split_7695;

  corral_source_split_7695:
    assume {:verifier.code 0} true;
    $i364 := $sext.i32.i64($i363);
    goto corral_source_split_7696;

  corral_source_split_7696:
    assume {:verifier.code 0} true;
    $p365 := $add.ref($p344, $mul.ref($i364, 1));
    goto corral_source_split_7697;

  corral_source_split_7697:
    assume {:verifier.code 0} true;
    $p358, $p359 := $p365, $p360;
    goto $bb218;

  $bb213:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb214;

  $bb207:
    assume {:verifier.code 0} true;
    assume $i340 == 1;
    goto $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    $p346 := $add.ref($p331, $mul.ref(1, 1));
    goto corral_source_split_7672;

  corral_source_split_7672:
    assume {:verifier.code 0} true;
    $i347 := $load.i8($M.0, $p331);
    goto corral_source_split_7673;

  corral_source_split_7673:
    assume {:verifier.code 0} true;
    $i348 := $zext.i8.i32($i347);
    goto corral_source_split_7674;

  corral_source_split_7674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1262} $i349 := sprintf.ref.ref.i32($p330, .str.4, $i348);
    goto corral_source_split_7675;

  corral_source_split_7675:
    assume {:verifier.code 0} true;
    $i350 := $sext.i32.i64($i349);
    goto corral_source_split_7676;

  corral_source_split_7676:
    assume {:verifier.code 0} true;
    $p351 := $add.ref($p330, $mul.ref($i350, 1));
    goto corral_source_split_7677;

  corral_source_split_7677:
    assume {:verifier.code 0} true;
    $p344, $p345 := $p351, $p346;
    goto $bb209;

  $bb204:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb205;

  $bb198:
    assume {:verifier.code 0} true;
    assume $i326 == 1;
    goto $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    $p332 := $add.ref($p317, $mul.ref(1, 1));
    goto corral_source_split_7652;

  corral_source_split_7652:
    assume {:verifier.code 0} true;
    $i333 := $load.i8($M.0, $p317);
    goto corral_source_split_7653;

  corral_source_split_7653:
    assume {:verifier.code 0} true;
    $i334 := $zext.i8.i32($i333);
    goto corral_source_split_7654;

  corral_source_split_7654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1260} $i335 := sprintf.ref.ref.i32($p316, .str.4, $i334);
    goto corral_source_split_7655;

  corral_source_split_7655:
    assume {:verifier.code 0} true;
    $i336 := $sext.i32.i64($i335);
    goto corral_source_split_7656;

  corral_source_split_7656:
    assume {:verifier.code 0} true;
    $p337 := $add.ref($p316, $mul.ref($i336, 1));
    goto corral_source_split_7657;

  corral_source_split_7657:
    assume {:verifier.code 0} true;
    $p330, $p331 := $p337, $p332;
    goto $bb200;

  $bb195:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb196;

  $bb189:
    assume {:verifier.code 0} true;
    assume $i312 == 1;
    goto $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    $p318 := $add.ref($p303, $mul.ref(1, 1));
    goto corral_source_split_7632;

  corral_source_split_7632:
    assume {:verifier.code 0} true;
    $i319 := $load.i8($M.0, $p303);
    goto corral_source_split_7633;

  corral_source_split_7633:
    assume {:verifier.code 0} true;
    $i320 := $zext.i8.i32($i319);
    goto corral_source_split_7634;

  corral_source_split_7634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1258} $i321 := sprintf.ref.ref.i32($p302, .str.4, $i320);
    goto corral_source_split_7635;

  corral_source_split_7635:
    assume {:verifier.code 0} true;
    $i322 := $sext.i32.i64($i321);
    goto corral_source_split_7636;

  corral_source_split_7636:
    assume {:verifier.code 0} true;
    $p323 := $add.ref($p302, $mul.ref($i322, 1));
    goto corral_source_split_7637;

  corral_source_split_7637:
    assume {:verifier.code 0} true;
    $p316, $p317 := $p323, $p318;
    goto $bb191;

  $bb186:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb187;

  $bb180:
    assume {:verifier.code 0} true;
    assume $i298 == 1;
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    $p304 := $add.ref($p289, $mul.ref(1, 1));
    goto corral_source_split_7612;

  corral_source_split_7612:
    assume {:verifier.code 0} true;
    $i305 := $load.i8($M.0, $p289);
    goto corral_source_split_7613;

  corral_source_split_7613:
    assume {:verifier.code 0} true;
    $i306 := $zext.i8.i32($i305);
    goto corral_source_split_7614;

  corral_source_split_7614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1256} $i307 := sprintf.ref.ref.i32($p288, .str.4, $i306);
    goto corral_source_split_7615;

  corral_source_split_7615:
    assume {:verifier.code 0} true;
    $i308 := $sext.i32.i64($i307);
    goto corral_source_split_7616;

  corral_source_split_7616:
    assume {:verifier.code 0} true;
    $p309 := $add.ref($p288, $mul.ref($i308, 1));
    goto corral_source_split_7617;

  corral_source_split_7617:
    assume {:verifier.code 0} true;
    $p302, $p303 := $p309, $p304;
    goto $bb182;

  $bb177:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb178;

  $bb171:
    assume {:verifier.code 0} true;
    assume $i284 == 1;
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    $p290 := $add.ref($p275, $mul.ref(1, 1));
    goto corral_source_split_7592;

  corral_source_split_7592:
    assume {:verifier.code 0} true;
    $i291 := $load.i8($M.0, $p275);
    goto corral_source_split_7593;

  corral_source_split_7593:
    assume {:verifier.code 0} true;
    $i292 := $zext.i8.i32($i291);
    goto corral_source_split_7594;

  corral_source_split_7594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1254} $i293 := sprintf.ref.ref.i32($p274, .str.4, $i292);
    goto corral_source_split_7595;

  corral_source_split_7595:
    assume {:verifier.code 0} true;
    $i294 := $sext.i32.i64($i293);
    goto corral_source_split_7596;

  corral_source_split_7596:
    assume {:verifier.code 0} true;
    $p295 := $add.ref($p274, $mul.ref($i294, 1));
    goto corral_source_split_7597;

  corral_source_split_7597:
    assume {:verifier.code 0} true;
    $p288, $p289 := $p295, $p290;
    goto $bb173;

  $bb168:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb169;

  $bb162:
    assume {:verifier.code 0} true;
    assume $i270 == 1;
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    $p276 := $add.ref($p261, $mul.ref(1, 1));
    goto corral_source_split_7572;

  corral_source_split_7572:
    assume {:verifier.code 0} true;
    $i277 := $load.i8($M.0, $p261);
    goto corral_source_split_7573;

  corral_source_split_7573:
    assume {:verifier.code 0} true;
    $i278 := $zext.i8.i32($i277);
    goto corral_source_split_7574;

  corral_source_split_7574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1252} $i279 := sprintf.ref.ref.i32($p260, .str.4, $i278);
    goto corral_source_split_7575;

  corral_source_split_7575:
    assume {:verifier.code 0} true;
    $i280 := $sext.i32.i64($i279);
    goto corral_source_split_7576;

  corral_source_split_7576:
    assume {:verifier.code 0} true;
    $p281 := $add.ref($p260, $mul.ref($i280, 1));
    goto corral_source_split_7577;

  corral_source_split_7577:
    assume {:verifier.code 0} true;
    $p274, $p275 := $p281, $p276;
    goto $bb164;

  $bb159:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb160;

  $bb153:
    assume {:verifier.code 0} true;
    assume $i256 == 1;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($p247, $mul.ref(1, 1));
    goto corral_source_split_7552;

  corral_source_split_7552:
    assume {:verifier.code 0} true;
    $i263 := $load.i8($M.0, $p247);
    goto corral_source_split_7553;

  corral_source_split_7553:
    assume {:verifier.code 0} true;
    $i264 := $zext.i8.i32($i263);
    goto corral_source_split_7554;

  corral_source_split_7554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1250} $i265 := sprintf.ref.ref.i32($p246, .str.4, $i264);
    goto corral_source_split_7555;

  corral_source_split_7555:
    assume {:verifier.code 0} true;
    $i266 := $sext.i32.i64($i265);
    goto corral_source_split_7556;

  corral_source_split_7556:
    assume {:verifier.code 0} true;
    $p267 := $add.ref($p246, $mul.ref($i266, 1));
    goto corral_source_split_7557;

  corral_source_split_7557:
    assume {:verifier.code 0} true;
    $p260, $p261 := $p267, $p262;
    goto $bb155;

  $bb150:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb151;

  $bb144:
    assume {:verifier.code 0} true;
    assume $i242 == 1;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($p233, $mul.ref(1, 1));
    goto corral_source_split_7532;

  corral_source_split_7532:
    assume {:verifier.code 0} true;
    $i249 := $load.i8($M.0, $p233);
    goto corral_source_split_7533;

  corral_source_split_7533:
    assume {:verifier.code 0} true;
    $i250 := $zext.i8.i32($i249);
    goto corral_source_split_7534;

  corral_source_split_7534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1248} $i251 := sprintf.ref.ref.i32($p232, .str.4, $i250);
    goto corral_source_split_7535;

  corral_source_split_7535:
    assume {:verifier.code 0} true;
    $i252 := $sext.i32.i64($i251);
    goto corral_source_split_7536;

  corral_source_split_7536:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($p232, $mul.ref($i252, 1));
    goto corral_source_split_7537;

  corral_source_split_7537:
    assume {:verifier.code 0} true;
    $p246, $p247 := $p253, $p248;
    goto $bb146;

  $bb141:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb142;

  $bb135:
    assume {:verifier.code 0} true;
    assume $i228 == 1;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($p219, $mul.ref(1, 1));
    goto corral_source_split_7512;

  corral_source_split_7512:
    assume {:verifier.code 0} true;
    $i235 := $load.i8($M.0, $p219);
    goto corral_source_split_7513;

  corral_source_split_7513:
    assume {:verifier.code 0} true;
    $i236 := $zext.i8.i32($i235);
    goto corral_source_split_7514;

  corral_source_split_7514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1246} $i237 := sprintf.ref.ref.i32($p218, .str.4, $i236);
    goto corral_source_split_7515;

  corral_source_split_7515:
    assume {:verifier.code 0} true;
    $i238 := $sext.i32.i64($i237);
    goto corral_source_split_7516;

  corral_source_split_7516:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($p218, $mul.ref($i238, 1));
    goto corral_source_split_7517;

  corral_source_split_7517:
    assume {:verifier.code 0} true;
    $p232, $p233 := $p239, $p234;
    goto $bb137;

  $bb132:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb133;

  $bb126:
    assume {:verifier.code 0} true;
    assume $i214 == 1;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($p205, $mul.ref(1, 1));
    goto corral_source_split_7492;

  corral_source_split_7492:
    assume {:verifier.code 0} true;
    $i221 := $load.i8($M.0, $p205);
    goto corral_source_split_7493;

  corral_source_split_7493:
    assume {:verifier.code 0} true;
    $i222 := $zext.i8.i32($i221);
    goto corral_source_split_7494;

  corral_source_split_7494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1244} $i223 := sprintf.ref.ref.i32($p204, .str.4, $i222);
    goto corral_source_split_7495;

  corral_source_split_7495:
    assume {:verifier.code 0} true;
    $i224 := $sext.i32.i64($i223);
    goto corral_source_split_7496;

  corral_source_split_7496:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($p204, $mul.ref($i224, 1));
    goto corral_source_split_7497;

  corral_source_split_7497:
    assume {:verifier.code 0} true;
    $p218, $p219 := $p225, $p220;
    goto $bb128;

  $bb123:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb124;

  $bb117:
    assume {:verifier.code 0} true;
    assume $i200 == 1;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($p191, $mul.ref(1, 1));
    goto corral_source_split_7472;

  corral_source_split_7472:
    assume {:verifier.code 0} true;
    $i207 := $load.i8($M.0, $p191);
    goto corral_source_split_7473;

  corral_source_split_7473:
    assume {:verifier.code 0} true;
    $i208 := $zext.i8.i32($i207);
    goto corral_source_split_7474;

  corral_source_split_7474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1242} $i209 := sprintf.ref.ref.i32($p190, .str.4, $i208);
    goto corral_source_split_7475;

  corral_source_split_7475:
    assume {:verifier.code 0} true;
    $i210 := $sext.i32.i64($i209);
    goto corral_source_split_7476;

  corral_source_split_7476:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($p190, $mul.ref($i210, 1));
    goto corral_source_split_7477;

  corral_source_split_7477:
    assume {:verifier.code 0} true;
    $p204, $p205 := $p211, $p206;
    goto $bb119;

  $bb114:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb115;

  $bb108:
    assume {:verifier.code 0} true;
    assume $i186 == 1;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($p177, $mul.ref(1, 1));
    goto corral_source_split_7452;

  corral_source_split_7452:
    assume {:verifier.code 0} true;
    $i193 := $load.i8($M.0, $p177);
    goto corral_source_split_7453;

  corral_source_split_7453:
    assume {:verifier.code 0} true;
    $i194 := $zext.i8.i32($i193);
    goto corral_source_split_7454;

  corral_source_split_7454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1240} $i195 := sprintf.ref.ref.i32($p176, .str.4, $i194);
    goto corral_source_split_7455;

  corral_source_split_7455:
    assume {:verifier.code 0} true;
    $i196 := $sext.i32.i64($i195);
    goto corral_source_split_7456;

  corral_source_split_7456:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($p176, $mul.ref($i196, 1));
    goto corral_source_split_7457;

  corral_source_split_7457:
    assume {:verifier.code 0} true;
    $p190, $p191 := $p197, $p192;
    goto $bb110;

  $bb105:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb106;

  $bb99:
    assume {:verifier.code 0} true;
    assume $i172 == 1;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($p163, $mul.ref(1, 1));
    goto corral_source_split_7432;

  corral_source_split_7432:
    assume {:verifier.code 0} true;
    $i179 := $load.i8($M.0, $p163);
    goto corral_source_split_7433;

  corral_source_split_7433:
    assume {:verifier.code 0} true;
    $i180 := $zext.i8.i32($i179);
    goto corral_source_split_7434;

  corral_source_split_7434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1238} $i181 := sprintf.ref.ref.i32($p162, .str.4, $i180);
    goto corral_source_split_7435;

  corral_source_split_7435:
    assume {:verifier.code 0} true;
    $i182 := $sext.i32.i64($i181);
    goto corral_source_split_7436;

  corral_source_split_7436:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($p162, $mul.ref($i182, 1));
    goto corral_source_split_7437;

  corral_source_split_7437:
    assume {:verifier.code 0} true;
    $p176, $p177 := $p183, $p178;
    goto $bb101;

  $bb96:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb97;

  $bb90:
    assume {:verifier.code 0} true;
    assume $i158 == 1;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($p149, $mul.ref(1, 1));
    goto corral_source_split_7412;

  corral_source_split_7412:
    assume {:verifier.code 0} true;
    $i165 := $load.i8($M.0, $p149);
    goto corral_source_split_7413;

  corral_source_split_7413:
    assume {:verifier.code 0} true;
    $i166 := $zext.i8.i32($i165);
    goto corral_source_split_7414;

  corral_source_split_7414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1236} $i167 := sprintf.ref.ref.i32($p148, .str.4, $i166);
    goto corral_source_split_7415;

  corral_source_split_7415:
    assume {:verifier.code 0} true;
    $i168 := $sext.i32.i64($i167);
    goto corral_source_split_7416;

  corral_source_split_7416:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($p148, $mul.ref($i168, 1));
    goto corral_source_split_7417;

  corral_source_split_7417:
    assume {:verifier.code 0} true;
    $p162, $p163 := $p169, $p164;
    goto $bb92;

  $bb87:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb88;

  $bb81:
    assume {:verifier.code 0} true;
    assume $i144 == 1;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($p135, $mul.ref(1, 1));
    goto corral_source_split_7392;

  corral_source_split_7392:
    assume {:verifier.code 0} true;
    $i151 := $load.i8($M.0, $p135);
    goto corral_source_split_7393;

  corral_source_split_7393:
    assume {:verifier.code 0} true;
    $i152 := $zext.i8.i32($i151);
    goto corral_source_split_7394;

  corral_source_split_7394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1234} $i153 := sprintf.ref.ref.i32($p134, .str.4, $i152);
    goto corral_source_split_7395;

  corral_source_split_7395:
    assume {:verifier.code 0} true;
    $i154 := $sext.i32.i64($i153);
    goto corral_source_split_7396;

  corral_source_split_7396:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($p134, $mul.ref($i154, 1));
    goto corral_source_split_7397;

  corral_source_split_7397:
    assume {:verifier.code 0} true;
    $p148, $p149 := $p155, $p150;
    goto $bb83;

  $bb78:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb79;

  $bb72:
    assume {:verifier.code 0} true;
    assume $i130 == 1;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($p121, $mul.ref(1, 1));
    goto corral_source_split_7372;

  corral_source_split_7372:
    assume {:verifier.code 0} true;
    $i137 := $load.i8($M.0, $p121);
    goto corral_source_split_7373;

  corral_source_split_7373:
    assume {:verifier.code 0} true;
    $i138 := $zext.i8.i32($i137);
    goto corral_source_split_7374;

  corral_source_split_7374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1232} $i139 := sprintf.ref.ref.i32($p120, .str.4, $i138);
    goto corral_source_split_7375;

  corral_source_split_7375:
    assume {:verifier.code 0} true;
    $i140 := $sext.i32.i64($i139);
    goto corral_source_split_7376;

  corral_source_split_7376:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($p120, $mul.ref($i140, 1));
    goto corral_source_split_7377;

  corral_source_split_7377:
    assume {:verifier.code 0} true;
    $p134, $p135 := $p141, $p136;
    goto $bb74;

  $bb69:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb70;

  $bb63:
    assume {:verifier.code 0} true;
    assume $i116 == 1;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($p107, $mul.ref(1, 1));
    goto corral_source_split_7352;

  corral_source_split_7352:
    assume {:verifier.code 0} true;
    $i123 := $load.i8($M.0, $p107);
    goto corral_source_split_7353;

  corral_source_split_7353:
    assume {:verifier.code 0} true;
    $i124 := $zext.i8.i32($i123);
    goto corral_source_split_7354;

  corral_source_split_7354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1230} $i125 := sprintf.ref.ref.i32($p106, .str.4, $i124);
    goto corral_source_split_7355;

  corral_source_split_7355:
    assume {:verifier.code 0} true;
    $i126 := $sext.i32.i64($i125);
    goto corral_source_split_7356;

  corral_source_split_7356:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($p106, $mul.ref($i126, 1));
    goto corral_source_split_7357;

  corral_source_split_7357:
    assume {:verifier.code 0} true;
    $p120, $p121 := $p127, $p122;
    goto $bb65;

  $bb60:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb61;

  $bb54:
    assume {:verifier.code 0} true;
    assume $i102 == 1;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($p93, $mul.ref(1, 1));
    goto corral_source_split_7332;

  corral_source_split_7332:
    assume {:verifier.code 0} true;
    $i109 := $load.i8($M.0, $p93);
    goto corral_source_split_7333;

  corral_source_split_7333:
    assume {:verifier.code 0} true;
    $i110 := $zext.i8.i32($i109);
    goto corral_source_split_7334;

  corral_source_split_7334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1228} $i111 := sprintf.ref.ref.i32($p92, .str.4, $i110);
    goto corral_source_split_7335;

  corral_source_split_7335:
    assume {:verifier.code 0} true;
    $i112 := $sext.i32.i64($i111);
    goto corral_source_split_7336;

  corral_source_split_7336:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($p92, $mul.ref($i112, 1));
    goto corral_source_split_7337;

  corral_source_split_7337:
    assume {:verifier.code 0} true;
    $p106, $p107 := $p113, $p108;
    goto $bb56;

  $bb51:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb52;

  $bb45:
    assume {:verifier.code 0} true;
    assume $i88 == 1;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($p79, $mul.ref(1, 1));
    goto corral_source_split_7312;

  corral_source_split_7312:
    assume {:verifier.code 0} true;
    $i95 := $load.i8($M.0, $p79);
    goto corral_source_split_7313;

  corral_source_split_7313:
    assume {:verifier.code 0} true;
    $i96 := $zext.i8.i32($i95);
    goto corral_source_split_7314;

  corral_source_split_7314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1226} $i97 := sprintf.ref.ref.i32($p78, .str.4, $i96);
    goto corral_source_split_7315;

  corral_source_split_7315:
    assume {:verifier.code 0} true;
    $i98 := $sext.i32.i64($i97);
    goto corral_source_split_7316;

  corral_source_split_7316:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($p78, $mul.ref($i98, 1));
    goto corral_source_split_7317;

  corral_source_split_7317:
    assume {:verifier.code 0} true;
    $p92, $p93 := $p99, $p94;
    goto $bb47;

  $bb42:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb43;

  $bb36:
    assume {:verifier.code 0} true;
    assume $i74 == 1;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($p53, $mul.ref(1, 1));
    goto corral_source_split_7292;

  corral_source_split_7292:
    assume {:verifier.code 0} true;
    $i81 := $load.i8($M.0, $p53);
    goto corral_source_split_7293;

  corral_source_split_7293:
    assume {:verifier.code 0} true;
    $i82 := $zext.i8.i32($i81);
    goto corral_source_split_7294;

  corral_source_split_7294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1224} $i83 := sprintf.ref.ref.i32($p52, .str.4, $i82);
    goto corral_source_split_7295;

  corral_source_split_7295:
    assume {:verifier.code 0} true;
    $i84 := $sext.i32.i64($i83);
    goto corral_source_split_7296;

  corral_source_split_7296:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($p52, $mul.ref($i84, 1));
    goto corral_source_split_7297;

  corral_source_split_7297:
    assume {:verifier.code 0} true;
    $p78, $p79 := $p85, $p80;
    goto $bb38;

  $bb33:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb34;

  $bb18:
    assume {:verifier.code 0} true;
    assume $i44 == 1;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($p20, $mul.ref(1, 1));
    goto corral_source_split_7246;

  corral_source_split_7246:
    assume {:verifier.code 0} true;
    $i47 := $load.i8($M.0, $p20);
    goto corral_source_split_7247;

  corral_source_split_7247:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i32($i47);
    goto corral_source_split_7248;

  corral_source_split_7248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1213} $i49 := sprintf.ref.ref.i32($p42, .str.4, $i48);
    call {:si_unique_call 1214} {:cexpr "tmp___2"} boogie_si_record_i32($i49);
    goto corral_source_split_7249;

  corral_source_split_7249:
    assume {:verifier.code 0} true;
    $i50 := $sext.i32.i64($i49);
    goto corral_source_split_7250;

  corral_source_split_7250:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($p42, $mul.ref($i50, 1));
    goto corral_source_split_7251;

  corral_source_split_7251:
    assume {:verifier.code 0} true;
    $p52, $p53 := $p51, $p46;
    goto $bb20;

  $bb15:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb16;

  $bb8:
    assume $i22 == 1;
    goto corral_source_split_7212;

  corral_source_split_7212:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_7213;

  corral_source_split_7213:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_7214;

  corral_source_split_7214:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_7215;

  corral_source_split_7215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1205} dev_err.ref.ref.i32.i32($p25, .str.41, $i6, $i9);
    goto corral_source_split_7216;

  corral_source_split_7216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1206} usb_free_urb($p10);
    goto corral_source_split_7217;

  corral_source_split_7217:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 12);
    goto $bb3;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_7198;

  corral_source_split_7198:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_7199;

  corral_source_split_7199:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_7200;

  corral_source_split_7200:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_7201;

  corral_source_split_7201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1203} dev_err.ref.ref.i32.i32($p15, .str.40, $i6, $i9);
    goto corral_source_split_7202;

  corral_source_split_7202:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 12);
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_7189;

  corral_source_split_7189:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;
}



const ftdi_command_requeue_work: ref;

axiom ftdi_command_requeue_work == $sub.ref(0, 405347);

procedure ftdi_command_requeue_work($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.7, $M.6, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12, $M.0, $M.1, $M.16, $M.19, $M.20, $M.25, $M.23, $M.24, $M.4, $CurrAddr, $M.3, $M.22, assertsPassed;



implementation ftdi_command_requeue_work($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i8;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var vslice_dummy_var_33: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1304} {:cexpr "ftdi_command_requeue_work:arg:delta"} boogie_si_record_i32($i1);
    goto corral_source_split_8081;

  corral_source_split_8081:
    assume {:verifier.code 0} true;
    $p2 := $M.5;
    goto corral_source_split_8082;

  corral_source_split_8082:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(5448, 1));
    goto corral_source_split_8083;

  corral_source_split_8083:
    assume {:verifier.code 0} true;
    $i4 := $zext.i32.i64($i1);
    goto corral_source_split_8084;

  corral_source_split_8084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1305} $i5 := queue_delayed_work($p2, $p3, $i4);
    goto corral_source_split_8085;

  corral_source_split_8085:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i5);
    call {:si_unique_call 1306} {:cexpr "tmp"} boogie_si_record_i8($i6);
    goto corral_source_split_8086;

  corral_source_split_8086:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_8087;

  corral_source_split_8087:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8091;

  corral_source_split_8091:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_8092;

  corral_source_split_8092:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_8094;

  corral_source_split_8094:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(7436, 1));
    goto corral_source_split_8095;

  corral_source_split_8095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1307} vslice_dummy_var_33 := kref_put($p10, ftdi_elan_delete);
    goto SeqInstr_760, SeqInstr_761;

  SeqInstr_761:
    assume assertsPassed;
    goto SeqInstr_762;

  SeqInstr_762:
    goto corral_source_split_8096;

  corral_source_split_8096:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_760:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_8089;

  corral_source_split_8089:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;
}



const ftdi_elan_total_command_size: ref;

axiom ftdi_elan_total_command_size == $sub.ref(0, 406379);

procedure ftdi_elan_total_command_size($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ftdi_elan_total_command_size($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i22: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1308} {:cexpr "ftdi_elan_total_command_size:arg:command_size"} boogie_si_record_i32($i1);
    call {:si_unique_call 1309} {:cexpr "ftdi_elan_total_command_size:arg:I"} boogie_si_record_i32($i1);
    goto corral_source_split_8098;

  corral_source_split_8098:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(180, 1));
    goto corral_source_split_8099;

  corral_source_split_8099:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    call {:si_unique_call 1310} {:cexpr "i"} boogie_si_record_i32($i3);
    call {:si_unique_call 1311} {:cexpr "ftdi_elan_total_command_size:arg:tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_8100;

  corral_source_split_8100:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32($i1, 1);
    call {:si_unique_call 1312} {:cexpr "I"} boogie_si_record_i32($i4);
    goto corral_source_split_8101;

  corral_source_split_8101:
    assume {:verifier.code 0} true;
    $i5 := $sgt.i32($i1, 0);
    goto corral_source_split_8102;

  corral_source_split_8102:
    assume {:verifier.code 0} true;
    $i6 := 0;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_8104;

  corral_source_split_8104:
    assume {:verifier.code 0} true;
    $i7, $i8, $i9 := $i4, $i3, 0;
    goto $bb4;

  $bb4:
    call $i10, $p11, $p12, $i13, $i14, $p16, $i17, $i18, $i19, $i20, $i21, $i7, $i8, $i9, $i22 := ftdi_elan_total_command_size_loop_$bb4($p0, $i10, $p11, $p12, $i13, $i14, $p16, $i17, $i18, $i19, $i20, $i21, $i7, $i8, $i9, $i22);
    goto $bb4_last;

  corral_source_split_8106:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i10 := $add.i32($i8, 1);
    call {:si_unique_call 1313} {:cexpr "i"} boogie_si_record_i32($i10);
    goto corral_source_split_8108;

  corral_source_split_8108:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(184, 1));
    goto corral_source_split_8109;

  corral_source_split_8109:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_8110;

  corral_source_split_8110:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i8);
    goto corral_source_split_8111;

  corral_source_split_8111:
    assume {:verifier.code 0} true;
    $i14 := $and.i64($i13, 31);
    goto corral_source_split_8112;

  corral_source_split_8112:
    assume {:verifier.code 0} true;
    goto corral_source_split_8113;

  corral_source_split_8113:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p12, $mul.ref($i14, 24)), $mul.ref(12, 1));
    goto corral_source_split_8114;

  corral_source_split_8114:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_8115;

  corral_source_split_8115:
    assume {:verifier.code 0} true;
    $i18 := $add.i32($i17, 5);
    goto corral_source_split_8116;

  corral_source_split_8116:
    assume {:verifier.code 0} true;
    $i19 := $add.i32($i18, $i9);
    call {:si_unique_call 1314} {:cexpr "total_size"} boogie_si_record_i32($i19);
    goto corral_source_split_8117;

  corral_source_split_8117:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32($i7, 1);
    call {:si_unique_call 1315} {:cexpr "I"} boogie_si_record_i32($i20);
    goto corral_source_split_8118;

  corral_source_split_8118:
    assume {:verifier.code 0} true;
    $i21 := $sgt.i32($i7, 0);
    goto corral_source_split_8119;

  corral_source_split_8119:
    assume {:verifier.code 0} true;
    $i22 := $i19;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_8121;

  corral_source_split_8121:
    assume {:verifier.code 0} true;
    $i6 := $i22;
    goto $bb3;

  $bb6:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    $i7, $i8, $i9 := $i20, $i10, $i19;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8106;
}



const fill_buffer_with_all_queued_commands: ref;

axiom fill_buffer_with_all_queued_commands == $sub.ref(0, 407411);

procedure fill_buffer_with_all_queued_commands($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation fill_buffer_with_all_queued_commands($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i64;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i8;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i28: i8;
  var $i29: i32;
  var $i30: i32;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $i34: i32;
  var $i35: i32;
  var $p36: ref;
  var $i37: i8;
  var $i38: i64;
  var $p39: ref;
  var $i40: i32;
  var $p41: ref;
  var $i42: i16;
  var $i43: i8;
  var $i44: i64;
  var $p45: ref;
  var $i46: i32;
  var $p47: ref;
  var $i48: i16;
  var $i49: i32;
  var $i50: i32;
  var $i51: i8;
  var $i52: i64;
  var $p53: ref;
  var $i54: i32;
  var $p55: ref;
  var $i56: i8;
  var $i57: i64;
  var $p58: ref;
  var $i59: i32;
  var $p60: ref;
  var $i61: i8;
  var $i62: i64;
  var $p63: ref;
  var $i64: i32;
  var $i65: i1;
  var $i70: i32;
  var $p71: ref;
  var $i72: i8;
  var $i73: i64;
  var $p74: ref;
  var $i75: i32;
  var $i76: i1;
  var $i67: i32;
  var $p68: ref;
  var $i69: i32;
  var $i77: i32;
  var $i66: i32;
  var $i78: i32;
  var $i79: i1;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i80: i32;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1316} {:cexpr "fill_buffer_with_all_queued_commands:arg:command_size"} boogie_si_record_i32($i2);
    call {:si_unique_call 1317} {:cexpr "fill_buffer_with_all_queued_commands:arg:total_size"} boogie_si_record_i32($i3);
    call {:si_unique_call 1318} {:cexpr "fill_buffer_with_all_queued_commands:arg:I"} boogie_si_record_i32($i2);
    goto corral_source_split_8123;

  corral_source_split_8123:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(180, 1));
    goto corral_source_split_8124;

  corral_source_split_8124:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    call {:si_unique_call 1319} {:cexpr "i"} boogie_si_record_i32($i5);
    call {:si_unique_call 1320} {:cexpr "fill_buffer_with_all_queued_commands:arg:tmp___8"} boogie_si_record_i32($i2);
    goto corral_source_split_8125;

  corral_source_split_8125:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32($i2, 1);
    call {:si_unique_call 1321} {:cexpr "I"} boogie_si_record_i32($i6);
    goto corral_source_split_8126;

  corral_source_split_8126:
    assume {:verifier.code 0} true;
    $i7 := $sgt.i32($i2, 0);
    goto corral_source_split_8127;

  corral_source_split_8127:
    assume {:verifier.code 0} true;
    $i8 := 0;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_8129;

  corral_source_split_8129:
    assume {:verifier.code 0} true;
    $i9, $i10, $i11, $i12 := $i6, $i5, 0, 0;
    goto $bb4;

  $bb4:
    call $i13, $p14, $p15, $i16, $i17, $p19, $i20, $p21, $p22, $p23, $i24, $i25, $i26, $p27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $p36, $i37, $i38, $p39, $i40, $p41, $i42, $i43, $i44, $p45, $i46, $p47, $i48, $i49, $i50, $i51, $i52, $p53, $i54, $p55, $i56, $i57, $p58, $i59, $p60, $i61, $i62, $p63, $i64, $i65, $i70, $p71, $i72, $i73, $p74, $i75, $i76, $i67, $p68, $i69, $i77, $i66, $i78, $i79, $i9, $i10, $i11, $i12, $i80 := fill_buffer_with_all_queued_commands_loop_$bb4($p0, $p1, $i13, $p14, $p15, $i16, $i17, $p19, $i20, $p21, $p22, $p23, $i24, $i25, $i26, $p27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $p36, $i37, $i38, $p39, $i40, $p41, $i42, $i43, $i44, $p45, $i46, $p47, $i48, $i49, $i50, $i51, $i52, $p53, $i54, $p55, $i56, $i57, $p58, $i59, $p60, $i61, $i62, $p63, $i64, $i65, $i70, $p71, $i72, $i73, $p74, $i75, $i76, $i67, $p68, $i69, $i77, $i66, $i78, $i79, $i9, $i10, $i11, $i12, $i80);
    goto $bb4_last;

  corral_source_split_8131:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i10, 1);
    call {:si_unique_call 1322} {:cexpr "i"} boogie_si_record_i32($i13);
    goto corral_source_split_8133;

  corral_source_split_8133:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 8488)), $mul.ref(184, 1));
    goto corral_source_split_8134;

  corral_source_split_8134:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_8135;

  corral_source_split_8135:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i10);
    goto corral_source_split_8136;

  corral_source_split_8136:
    assume {:verifier.code 0} true;
    $i17 := $and.i64($i16, 31);
    goto corral_source_split_8137;

  corral_source_split_8137:
    assume {:verifier.code 0} true;
    goto corral_source_split_8138;

  corral_source_split_8138:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p15, $mul.ref($i17, 24)), $mul.ref(12, 1));
    goto corral_source_split_8139;

  corral_source_split_8139:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    call {:si_unique_call 1323} {:cexpr "F"} boogie_si_record_i32($i20);
    goto corral_source_split_8140;

  corral_source_split_8140:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p15, $mul.ref($i17, 24)), $mul.ref(16, 1));
    goto corral_source_split_8141;

  corral_source_split_8141:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_8142;

  corral_source_split_8142:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p15, $mul.ref($i17, 24)), $mul.ref(0, 1));
    goto corral_source_split_8143;

  corral_source_split_8143:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.0, $p23);
    goto corral_source_split_8144;

  corral_source_split_8144:
    assume {:verifier.code 0} true;
    $i25 := $sext.i8.i32($i24);
    goto corral_source_split_8145;

  corral_source_split_8145:
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i25, 0);
    goto corral_source_split_8146;

  corral_source_split_8146:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i34 := $i11;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_8157;

  corral_source_split_8157:
    assume {:verifier.code 0} true;
    $i35 := $add.i32($i12, 1);
    call {:si_unique_call 1325} {:cexpr "b"} boogie_si_record_i32($i35);
    goto corral_source_split_8158;

  corral_source_split_8158:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p15, $mul.ref($i17, 24)), $mul.ref(0, 1));
    goto corral_source_split_8159;

  corral_source_split_8159:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.0, $p36);
    goto corral_source_split_8160;

  corral_source_split_8160:
    assume {:verifier.code 0} true;
    $i38 := $sext.i32.i64($i12);
    goto corral_source_split_8161;

  corral_source_split_8161:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($p1, $mul.ref($i38, 1));
    goto corral_source_split_8162;

  corral_source_split_8162:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p39, $i37);
    goto corral_source_split_8163;

  corral_source_split_8163:
    assume {:verifier.code 0} true;
    $i40 := $add.i32($i35, 1);
    call {:si_unique_call 1326} {:cexpr "b"} boogie_si_record_i32($i40);
    goto corral_source_split_8164;

  corral_source_split_8164:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p15, $mul.ref($i17, 24)), $mul.ref(2, 1));
    goto corral_source_split_8165;

  corral_source_split_8165:
    assume {:verifier.code 0} true;
    $i42 := $load.i16($M.0, $p41);
    goto corral_source_split_8166;

  corral_source_split_8166:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i16.i8($i42);
    goto corral_source_split_8167;

  corral_source_split_8167:
    assume {:verifier.code 0} true;
    $i44 := $sext.i32.i64($i35);
    goto corral_source_split_8168;

  corral_source_split_8168:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($p1, $mul.ref($i44, 1));
    goto corral_source_split_8169;

  corral_source_split_8169:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p45, $i43);
    goto corral_source_split_8170;

  corral_source_split_8170:
    assume {:verifier.code 0} true;
    $i46 := $add.i32($i40, 1);
    call {:si_unique_call 1327} {:cexpr "b"} boogie_si_record_i32($i46);
    goto corral_source_split_8171;

  corral_source_split_8171:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p15, $mul.ref($i17, 24)), $mul.ref(2, 1));
    goto corral_source_split_8172;

  corral_source_split_8172:
    assume {:verifier.code 0} true;
    $i48 := $load.i16($M.0, $p47);
    goto corral_source_split_8173;

  corral_source_split_8173:
    assume {:verifier.code 0} true;
    $i49 := $zext.i16.i32($i48);
    goto corral_source_split_8174;

  corral_source_split_8174:
    assume {:verifier.code 0} true;
    $i50 := $ashr.i32($i49, 8);
    goto corral_source_split_8175;

  corral_source_split_8175:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i32.i8($i50);
    goto corral_source_split_8176;

  corral_source_split_8176:
    assume {:verifier.code 0} true;
    $i52 := $sext.i32.i64($i40);
    goto corral_source_split_8177;

  corral_source_split_8177:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($p1, $mul.ref($i52, 1));
    goto corral_source_split_8178;

  corral_source_split_8178:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p53, $i51);
    goto corral_source_split_8179;

  corral_source_split_8179:
    assume {:verifier.code 0} true;
    $i54 := $add.i32($i46, 1);
    call {:si_unique_call 1328} {:cexpr "b"} boogie_si_record_i32($i54);
    goto corral_source_split_8180;

  corral_source_split_8180:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p15, $mul.ref($i17, 24)), $mul.ref(4, 1));
    goto corral_source_split_8181;

  corral_source_split_8181:
    assume {:verifier.code 0} true;
    $i56 := $load.i8($M.0, $p55);
    goto corral_source_split_8182;

  corral_source_split_8182:
    assume {:verifier.code 0} true;
    $i57 := $sext.i32.i64($i46);
    goto corral_source_split_8183;

  corral_source_split_8183:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($p1, $mul.ref($i57, 1));
    goto corral_source_split_8184;

  corral_source_split_8184:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p58, $i56);
    goto corral_source_split_8185;

  corral_source_split_8185:
    assume {:verifier.code 0} true;
    $i59 := $add.i32($i54, 1);
    call {:si_unique_call 1329} {:cexpr "b"} boogie_si_record_i32($i59);
    goto corral_source_split_8186;

  corral_source_split_8186:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p15, $mul.ref($i17, 24)), $mul.ref(5, 1));
    goto corral_source_split_8187;

  corral_source_split_8187:
    assume {:verifier.code 0} true;
    $i61 := $load.i8($M.0, $p60);
    goto corral_source_split_8188;

  corral_source_split_8188:
    assume {:verifier.code 0} true;
    $i62 := $sext.i32.i64($i54);
    goto corral_source_split_8189;

  corral_source_split_8189:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($p1, $mul.ref($i62, 1));
    goto corral_source_split_8190;

  corral_source_split_8190:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p63, $i61);
    goto corral_source_split_8191;

  corral_source_split_8191:
    assume {:verifier.code 0} true;
    $i64 := $sub.i32($i20, 1);
    call {:si_unique_call 1330} {:cexpr "F"} boogie_si_record_i32($i64);
    goto corral_source_split_8192;

  corral_source_split_8192:
    assume {:verifier.code 0} true;
    $i65 := $sgt.i32($i20, 0);
    goto corral_source_split_8193;

  corral_source_split_8193:
    assume {:verifier.code 0} true;
    $i66 := $i59;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i65 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i78 := $sub.i32($i9, 1);
    call {:si_unique_call 1333} {:cexpr "I"} boogie_si_record_i32($i78);
    goto corral_source_split_8210;

  corral_source_split_8210:
    assume {:verifier.code 0} true;
    $i79 := $sgt.i32($i9, 0);
    goto corral_source_split_8211;

  corral_source_split_8211:
    assume {:verifier.code 0} true;
    $i80 := $i34;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_8213;

  corral_source_split_8213:
    assume {:verifier.code 0} true;
    $i8 := $i80;
    goto $bb3;

  $bb17:
    assume $i79 == 1;
    assume {:verifier.code 0} true;
    $i9, $i10, $i11, $i12 := $i78, $i13, $i34, $i66;
    goto $bb17_dummy;

  $bb9:
    assume $i65 == 1;
    goto corral_source_split_8195;

  corral_source_split_8195:
    assume {:verifier.code 0} true;
    $i67, $p68, $i69 := $i64, $p22, $i59;
    goto $bb12;

  $bb12:
    call $i70, $p71, $i72, $i73, $p74, $i75, $i76, $i67, $p68, $i69, $i77 := fill_buffer_with_all_queued_commands_loop_$bb12($p1, $i70, $p71, $i72, $i73, $p74, $i75, $i76, $i67, $p68, $i69, $i77);
    goto $bb12_last;

  corral_source_split_8197:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i70 := $add.i32($i69, 1);
    call {:si_unique_call 1331} {:cexpr "b"} boogie_si_record_i32($i70);
    goto corral_source_split_8199;

  corral_source_split_8199:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($p68, $mul.ref(1, 1));
    goto corral_source_split_8200;

  corral_source_split_8200:
    assume {:verifier.code 0} true;
    $i72 := $load.i8($M.0, $p68);
    goto corral_source_split_8201;

  corral_source_split_8201:
    assume {:verifier.code 0} true;
    $i73 := $sext.i32.i64($i69);
    goto corral_source_split_8202;

  corral_source_split_8202:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($p1, $mul.ref($i73, 1));
    goto corral_source_split_8203;

  corral_source_split_8203:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p74, $i72);
    goto corral_source_split_8204;

  corral_source_split_8204:
    assume {:verifier.code 0} true;
    $i75 := $sub.i32($i67, 1);
    call {:si_unique_call 1332} {:cexpr "F"} boogie_si_record_i32($i75);
    goto corral_source_split_8205;

  corral_source_split_8205:
    assume {:verifier.code 0} true;
    $i76 := $sgt.i32($i67, 0);
    goto corral_source_split_8206;

  corral_source_split_8206:
    assume {:verifier.code 0} true;
    $i77 := $i70;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_8208;

  corral_source_split_8208:
    assume {:verifier.code 0} true;
    $i66 := $i77;
    goto $bb11;

  $bb14:
    assume $i76 == 1;
    assume {:verifier.code 0} true;
    $i67, $p68, $i69 := $i75, $p71, $i70;
    goto $bb14_dummy;

  $bb6:
    assume $i26 == 1;
    goto corral_source_split_8148;

  corral_source_split_8148:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p15, $mul.ref($i17, 24)), $mul.ref(0, 1));
    goto corral_source_split_8149;

  corral_source_split_8149:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.0, $p27);
    goto corral_source_split_8150;

  corral_source_split_8150:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_8151;

  corral_source_split_8151:
    assume {:verifier.code 0} true;
    $i30 := $ashr.i32($i29, 5);
    goto corral_source_split_8152;

  corral_source_split_8152:
    assume {:verifier.code 0} true;
    $i31 := $and.i32($i30, 3);
    goto corral_source_split_8153;

  corral_source_split_8153:
    assume {:verifier.code 0} true;
    $i32 := $shl.i32(1, $i31);
    goto corral_source_split_8154;

  corral_source_split_8154:
    assume {:verifier.code 0} true;
    $i33 := $or.i32($i32, $i11);
    call {:si_unique_call 1324} {:cexpr "ed_commands"} boogie_si_record_i32($i33);
    goto corral_source_split_8155;

  corral_source_split_8155:
    assume {:verifier.code 0} true;
    $i34 := $i33;
    goto $bb8;

  $bb14_dummy:
    assume false;
    return;

  $bb12_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8197;

  $bb17_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8131;
}



const ftdi_elan_kick_respond_queue: ref;

axiom ftdi_elan_kick_respond_queue == $sub.ref(0, 408443);

procedure ftdi_elan_kick_respond_queue($p0: ref);
  free requires assertsPassed;
  modifies $M.7, $M.6, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12;



implementation ftdi_elan_kick_respond_queue($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8215;

  corral_source_split_8215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1334} ftdi_respond_queue_work($p0, 0);
    goto corral_source_split_8216;

  corral_source_split_8216:
    assume {:verifier.code 0} true;
    return;
}



const usb_endpoint_xfer_bulk: ref;

axiom usb_endpoint_xfer_bulk == $sub.ref(0, 409475);

procedure usb_endpoint_xfer_bulk($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_xfer_bulk($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8218;

  corral_source_split_8218:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(3, 1));
    goto corral_source_split_8219;

  corral_source_split_8219:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_8220;

  corral_source_split_8220:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_8221;

  corral_source_split_8221:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 3);
    goto corral_source_split_8222;

  corral_source_split_8222:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 2);
    goto corral_source_split_8223;

  corral_source_split_8223:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_8224;

  corral_source_split_8224:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const usb_endpoint_dir_out: ref;

axiom usb_endpoint_dir_out == $sub.ref(0, 410507);

procedure usb_endpoint_dir_out($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_dir_out($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8226;

  corral_source_split_8226:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_8227;

  corral_source_split_8227:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_8228;

  corral_source_split_8228:
    assume {:verifier.code 0} true;
    $i3 := $sext.i8.i32($i2);
    goto corral_source_split_8229;

  corral_source_split_8229:
    assume {:verifier.code 0} true;
    $i4 := $sge.i32($i3, 0);
    goto corral_source_split_8230;

  corral_source_split_8230:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_8231;

  corral_source_split_8231:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const __kmalloc: ref;

axiom __kmalloc == $sub.ref(0, 411539);

procedure __kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1335} {:cexpr "__kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 1336} {:cexpr "__kmalloc:arg:t"} boogie_si_record_i32($i1);
    goto corral_source_split_8233;

  corral_source_split_8233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1337} $p2 := ldv_malloc($i0);
    goto corral_source_split_8234;

  corral_source_split_8234:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_malloc: ref;

axiom ldv_malloc == $sub.ref(0, 412571);

procedure ldv_malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_malloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1338} {:cexpr "ldv_malloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_8236;

  corral_source_split_8236:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1339} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1340} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 1341} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_8237;

  corral_source_split_8237:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_8238;

  corral_source_split_8238:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_8242;

  corral_source_split_8242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1342} $p4 := malloc($i0);
    goto corral_source_split_8243;

  corral_source_split_8243:
    assume {:verifier.code 1} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_8244;

  corral_source_split_8244:
    assume {:verifier.code 1} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_8245;

  corral_source_split_8245:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_8246;

  corral_source_split_8246:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1343} __VERIFIER_assume($i7);
    goto corral_source_split_8247;

  corral_source_split_8247:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8249;

  corral_source_split_8249:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_8240;

  corral_source_split_8240:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const malloc: ref;

axiom malloc == $sub.ref(0, 413603);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 1344} $r := $malloc($i0);
    return;
}



const usb_endpoint_dir_in: ref;

axiom usb_endpoint_dir_in == $sub.ref(0, 414635);

procedure usb_endpoint_dir_in($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_dir_in($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8251;

  corral_source_split_8251:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_8252;

  corral_source_split_8252:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_8253;

  corral_source_split_8253:
    assume {:verifier.code 0} true;
    $i3 := $sext.i8.i32($i2);
    goto corral_source_split_8254;

  corral_source_split_8254:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i3, 0);
    goto corral_source_split_8255;

  corral_source_split_8255:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_8256;

  corral_source_split_8256:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const kref_init: ref;

axiom kref_init == $sub.ref(0, 415667);

procedure kref_init($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation kref_init($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8258;

  corral_source_split_8258:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_8259;

  corral_source_split_8259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1345} atomic_set($p1, 1);
    goto corral_source_split_8260;

  corral_source_split_8260:
    assume {:verifier.code 0} true;
    return;
}



const atomic_set: ref;

axiom atomic_set == $sub.ref(0, 416699);

procedure atomic_set($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation atomic_set($p0: ref, $i1: i32)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1346} {:cexpr "atomic_set:arg:i"} boogie_si_record_i32($i1);
    goto corral_source_split_8262;

  corral_source_split_8262:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_8263;

  corral_source_split_8263:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i1);
    goto corral_source_split_8264;

  corral_source_split_8264:
    assume {:verifier.code 0} true;
    return;
}



const __list_add: ref;

axiom __list_add == $sub.ref(0, 417731);

procedure __list_add($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __list_add($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8266;

  corral_source_split_8266:
    assume {:verifier.code 0} true;
    return;
}



const ldv_init_zalloc: ref;

axiom ldv_init_zalloc == $sub.ref(0, 418763);

procedure ldv_init_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_init_zalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1347} {:cexpr "ldv_init_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_8268;

  corral_source_split_8268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1348} $p1 := calloc(1, $i0);
    goto corral_source_split_8269;

  corral_source_split_8269:
    assume {:verifier.code 1} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_8270;

  corral_source_split_8270:
    assume {:verifier.code 1} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_8271;

  corral_source_split_8271:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_8272;

  corral_source_split_8272:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1349} __VERIFIER_assume($i4);
    goto corral_source_split_8273;

  corral_source_split_8273:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ldv_memset: ref;

axiom ldv_memset == $sub.ref(0, 419795);

procedure ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.26;



implementation ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref)
{
  var $i3: i8;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1350} {:cexpr "ldv_memset:arg:c"} boogie_si_record_i32($i1);
    call {:si_unique_call 1351} {:cexpr "ldv_memset:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_8275;

  corral_source_split_8275:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i8($i1);
    goto corral_source_split_8276;

  corral_source_split_8276:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_12 := $M.26;
    call {:si_unique_call 1352} cmdloc_dummy_var_13 := $memset.i8(cmdloc_dummy_var_12, $p0, $i3, $i2, $zext.i32.i64(1), 0 == 1);
    $M.26 := cmdloc_dummy_var_13;
    goto corral_source_split_8277;

  corral_source_split_8277:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 420827);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const work_init_3: ref;

axiom work_init_3 == $sub.ref(0, 421859);

procedure work_init_3();
  free requires assertsPassed;
  modifies $M.27, $M.28, $M.29, $M.30;



implementation work_init_3()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8279;

  corral_source_split_8279:
    assume {:verifier.code 0} true;
    $M.27 := 0;
    call {:si_unique_call 1353} {:cexpr "ldv_work_3_0"} boogie_si_record_i32(0);
    goto corral_source_split_8280;

  corral_source_split_8280:
    assume {:verifier.code 0} true;
    $M.28 := 0;
    call {:si_unique_call 1354} {:cexpr "ldv_work_3_1"} boogie_si_record_i32(0);
    goto corral_source_split_8281;

  corral_source_split_8281:
    assume {:verifier.code 0} true;
    $M.29 := 0;
    call {:si_unique_call 1355} {:cexpr "ldv_work_3_2"} boogie_si_record_i32(0);
    goto corral_source_split_8282;

  corral_source_split_8282:
    assume {:verifier.code 0} true;
    $M.30 := 0;
    call {:si_unique_call 1356} {:cexpr "ldv_work_3_3"} boogie_si_record_i32(0);
    goto corral_source_split_8283;

  corral_source_split_8283:
    assume {:verifier.code 0} true;
    return;
}



const invoke_work_3: ref;

axiom invoke_work_3 == $sub.ref(0, 422891);

procedure invoke_work_3();
  free requires assertsPassed;
  modifies $M.27, $M.0, $M.28, $M.29, $M.30, $M.16, $M.23, $M.24, $M.4, assertsPassed, $M.1, $CurrAddr, $M.7, $M.6, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12, $M.19, $M.20, $M.25, $M.3, $M.22;



implementation invoke_work_3()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8285;

  corral_source_split_8285:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1357} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1358} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1359} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1372} ldv_stop();
    goto corral_source_split_8339;

  corral_source_split_8339:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_8291;

  corral_source_split_8291:
    assume {:verifier.code 0} true;
    $i21 := $M.30;
    goto corral_source_split_8292;

  corral_source_split_8292:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 2);
    goto corral_source_split_8293;

  corral_source_split_8293:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb34;

  $bb34:
    assume !($i22 == 1);
    goto corral_source_split_8335;

  corral_source_split_8335:
    assume {:verifier.code 0} true;
    $i23 := $M.30;
    goto corral_source_split_8336;

  corral_source_split_8336:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 3);
    goto corral_source_split_8337;

  corral_source_split_8337:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $M.30 := 4;
    call {:si_unique_call 1369} {:cexpr "ldv_work_3_3"} boogie_si_record_i32(4);
    goto corral_source_split_8330;

  corral_source_split_8330:
    assume {:verifier.code 0} true;
    $p25 := $M.31;
    goto corral_source_split_8331;

  corral_source_split_8331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1370} ftdi_elan_respond_work($p25);
    goto SeqInstr_772, SeqInstr_773;

  SeqInstr_773:
    assume assertsPassed;
    goto SeqInstr_774;

  SeqInstr_774:
    goto corral_source_split_8332;

  corral_source_split_8332:
    assume {:verifier.code 0} true;
    $M.30 := 1;
    call {:si_unique_call 1371} {:cexpr "ldv_work_3_3"} boogie_si_record_i32(1);
    goto corral_source_split_8333;

  corral_source_split_8333:
    assume {:verifier.code 0} true;
    goto $bb37;

  SeqInstr_772:
    assume !assertsPassed;
    return;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb33;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_8287;

  corral_source_split_8287:
    assume {:verifier.code 0} true;
    $i16 := $M.29;
    goto corral_source_split_8288;

  corral_source_split_8288:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 2);
    goto corral_source_split_8289;

  corral_source_split_8289:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb26, $bb28;

  $bb28:
    assume !($i17 == 1);
    goto corral_source_split_8326;

  corral_source_split_8326:
    assume {:verifier.code 0} true;
    $i18 := $M.29;
    goto corral_source_split_8327;

  corral_source_split_8327:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 3);
    goto corral_source_split_8328;

  corral_source_split_8328:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $M.29 := 4;
    call {:si_unique_call 1366} {:cexpr "ldv_work_3_2"} boogie_si_record_i32(4);
    goto corral_source_split_8321;

  corral_source_split_8321:
    assume {:verifier.code 0} true;
    $p20 := $M.31;
    goto corral_source_split_8322;

  corral_source_split_8322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1367} ftdi_elan_respond_work($p20);
    goto SeqInstr_769, SeqInstr_770;

  SeqInstr_770:
    assume assertsPassed;
    goto SeqInstr_771;

  SeqInstr_771:
    goto corral_source_split_8323;

  corral_source_split_8323:
    assume {:verifier.code 0} true;
    $M.29 := 1;
    call {:si_unique_call 1368} {:cexpr "ldv_work_3_2"} boogie_si_record_i32(1);
    goto corral_source_split_8324;

  corral_source_split_8324:
    assume {:verifier.code 0} true;
    goto $bb31;

  SeqInstr_769:
    assume !assertsPassed;
    return;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb27;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_8295;

  corral_source_split_8295:
    assume {:verifier.code 0} true;
    $i11 := $M.28;
    goto corral_source_split_8296;

  corral_source_split_8296:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 2);
    goto corral_source_split_8297;

  corral_source_split_8297:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i12 == 1);
    goto corral_source_split_8317;

  corral_source_split_8317:
    assume {:verifier.code 0} true;
    $i13 := $M.28;
    goto corral_source_split_8318;

  corral_source_split_8318:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 3);
    goto corral_source_split_8319;

  corral_source_split_8319:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $M.28 := 4;
    call {:si_unique_call 1363} {:cexpr "ldv_work_3_1"} boogie_si_record_i32(4);
    goto corral_source_split_8312;

  corral_source_split_8312:
    assume {:verifier.code 0} true;
    $p15 := $M.31;
    goto corral_source_split_8313;

  corral_source_split_8313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1364} ftdi_elan_respond_work($p15);
    goto SeqInstr_766, SeqInstr_767;

  SeqInstr_767:
    assume assertsPassed;
    goto SeqInstr_768;

  SeqInstr_768:
    goto corral_source_split_8314;

  corral_source_split_8314:
    assume {:verifier.code 0} true;
    $M.28 := 1;
    call {:si_unique_call 1365} {:cexpr "ldv_work_3_1"} boogie_si_record_i32(1);
    goto corral_source_split_8315;

  corral_source_split_8315:
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_766:
    assume !assertsPassed;
    return;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb21;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_8299;

  corral_source_split_8299:
    assume {:verifier.code 0} true;
    $i6 := $M.27;
    goto corral_source_split_8300;

  corral_source_split_8300:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 2);
    goto corral_source_split_8301;

  corral_source_split_8301:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i7 == 1);
    goto corral_source_split_8308;

  corral_source_split_8308:
    assume {:verifier.code 0} true;
    $i8 := $M.27;
    goto corral_source_split_8309;

  corral_source_split_8309:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 3);
    goto corral_source_split_8310;

  corral_source_split_8310:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $M.27 := 4;
    call {:si_unique_call 1360} {:cexpr "ldv_work_3_0"} boogie_si_record_i32(4);
    goto corral_source_split_8303;

  corral_source_split_8303:
    assume {:verifier.code 0} true;
    $p10 := $M.31;
    goto corral_source_split_8304;

  corral_source_split_8304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1361} ftdi_elan_respond_work($p10);
    goto SeqInstr_763, SeqInstr_764;

  SeqInstr_764:
    assume assertsPassed;
    goto SeqInstr_765;

  SeqInstr_765:
    goto corral_source_split_8305;

  corral_source_split_8305:
    assume {:verifier.code 0} true;
    $M.27 := 1;
    call {:si_unique_call 1362} {:cexpr "ldv_work_3_0"} boogie_si_record_i32(1);
    goto corral_source_split_8306;

  corral_source_split_8306:
    assume {:verifier.code 0} true;
    goto $bb18;

  SeqInstr_763:
    assume !assertsPassed;
    return;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb14;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 423923);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8341;

  corral_source_split_8341:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const work_init_2: ref;

axiom work_init_2 == $sub.ref(0, 424955);

procedure work_init_2();
  free requires assertsPassed;
  modifies $M.32, $M.33, $M.34, $M.35;



implementation work_init_2()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8343;

  corral_source_split_8343:
    assume {:verifier.code 0} true;
    $M.32 := 0;
    call {:si_unique_call 1373} {:cexpr "ldv_work_2_0"} boogie_si_record_i32(0);
    goto corral_source_split_8344;

  corral_source_split_8344:
    assume {:verifier.code 0} true;
    $M.33 := 0;
    call {:si_unique_call 1374} {:cexpr "ldv_work_2_1"} boogie_si_record_i32(0);
    goto corral_source_split_8345;

  corral_source_split_8345:
    assume {:verifier.code 0} true;
    $M.34 := 0;
    call {:si_unique_call 1375} {:cexpr "ldv_work_2_2"} boogie_si_record_i32(0);
    goto corral_source_split_8346;

  corral_source_split_8346:
    assume {:verifier.code 0} true;
    $M.35 := 0;
    call {:si_unique_call 1376} {:cexpr "ldv_work_2_3"} boogie_si_record_i32(0);
    goto corral_source_split_8347;

  corral_source_split_8347:
    assume {:verifier.code 0} true;
    return;
}



const work_init_1: ref;

axiom work_init_1 == $sub.ref(0, 425987);

procedure work_init_1();
  free requires assertsPassed;
  modifies $M.6, $M.8, $M.10, $M.12;



implementation work_init_1()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8349;

  corral_source_split_8349:
    assume {:verifier.code 0} true;
    $M.6 := 0;
    call {:si_unique_call 1377} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(0);
    goto corral_source_split_8350;

  corral_source_split_8350:
    assume {:verifier.code 0} true;
    $M.8 := 0;
    call {:si_unique_call 1378} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(0);
    goto corral_source_split_8351;

  corral_source_split_8351:
    assume {:verifier.code 0} true;
    $M.10 := 0;
    call {:si_unique_call 1379} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(0);
    goto corral_source_split_8352;

  corral_source_split_8352:
    assume {:verifier.code 0} true;
    $M.12 := 0;
    call {:si_unique_call 1380} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(0);
    goto corral_source_split_8353;

  corral_source_split_8353:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_driver_4: ref;

axiom ldv_usb_driver_4 == $sub.ref(0, 427019);

procedure ldv_usb_driver_4();
  free requires assertsPassed;
  modifies $M.36, $M.0, $CurrAddr;



implementation ldv_usb_driver_4()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8355;

  corral_source_split_8355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1381} $p0 := ldv_init_zalloc(1560);
    goto corral_source_split_8356;

  corral_source_split_8356:
    assume {:verifier.code 0} true;
    goto corral_source_split_8357;

  corral_source_split_8357:
    assume {:verifier.code 0} true;
    $M.36 := $p0;
    goto corral_source_split_8358;

  corral_source_split_8358:
    assume {:verifier.code 0} true;
    return;
}



const invoke_work_1: ref;

axiom invoke_work_1 == $sub.ref(0, 428051);

procedure invoke_work_1();
  free requires assertsPassed;
  modifies $M.6, $M.0, $M.8, $M.10, $M.12, $M.16, $M.19, $M.20, $M.22, $M.4, $M.1, $CurrAddr, $M.7, $M.9, $M.11, $M.13, assertsPassed, $M.25, $M.23, $M.24, $M.3;



implementation invoke_work_1()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8360;

  corral_source_split_8360:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1382} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1383} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1384} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1397} ldv_stop();
    goto corral_source_split_8414;

  corral_source_split_8414:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_8366;

  corral_source_split_8366:
    assume {:verifier.code 0} true;
    $i21 := $M.12;
    goto corral_source_split_8367;

  corral_source_split_8367:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 2);
    goto corral_source_split_8368;

  corral_source_split_8368:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb34;

  $bb34:
    assume !($i22 == 1);
    goto corral_source_split_8410;

  corral_source_split_8410:
    assume {:verifier.code 0} true;
    $i23 := $M.12;
    goto corral_source_split_8411;

  corral_source_split_8411:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 3);
    goto corral_source_split_8412;

  corral_source_split_8412:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $M.12 := 4;
    call {:si_unique_call 1394} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(4);
    goto corral_source_split_8405;

  corral_source_split_8405:
    assume {:verifier.code 0} true;
    $p25 := $M.7;
    goto corral_source_split_8406;

  corral_source_split_8406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1395} ftdi_elan_status_work($p25);
    goto SeqInstr_784, SeqInstr_785;

  SeqInstr_785:
    assume assertsPassed;
    goto SeqInstr_786;

  SeqInstr_786:
    goto corral_source_split_8407;

  corral_source_split_8407:
    assume {:verifier.code 0} true;
    $M.12 := 1;
    call {:si_unique_call 1396} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(1);
    goto corral_source_split_8408;

  corral_source_split_8408:
    assume {:verifier.code 0} true;
    goto $bb37;

  SeqInstr_784:
    assume !assertsPassed;
    return;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb33;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_8362;

  corral_source_split_8362:
    assume {:verifier.code 0} true;
    $i16 := $M.10;
    goto corral_source_split_8363;

  corral_source_split_8363:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 2);
    goto corral_source_split_8364;

  corral_source_split_8364:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb26, $bb28;

  $bb28:
    assume !($i17 == 1);
    goto corral_source_split_8401;

  corral_source_split_8401:
    assume {:verifier.code 0} true;
    $i18 := $M.10;
    goto corral_source_split_8402;

  corral_source_split_8402:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 3);
    goto corral_source_split_8403;

  corral_source_split_8403:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $M.10 := 4;
    call {:si_unique_call 1391} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(4);
    goto corral_source_split_8396;

  corral_source_split_8396:
    assume {:verifier.code 0} true;
    $p20 := $M.7;
    goto corral_source_split_8397;

  corral_source_split_8397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1392} ftdi_elan_status_work($p20);
    goto SeqInstr_781, SeqInstr_782;

  SeqInstr_782:
    assume assertsPassed;
    goto SeqInstr_783;

  SeqInstr_783:
    goto corral_source_split_8398;

  corral_source_split_8398:
    assume {:verifier.code 0} true;
    $M.10 := 1;
    call {:si_unique_call 1393} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(1);
    goto corral_source_split_8399;

  corral_source_split_8399:
    assume {:verifier.code 0} true;
    goto $bb31;

  SeqInstr_781:
    assume !assertsPassed;
    return;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb27;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_8370;

  corral_source_split_8370:
    assume {:verifier.code 0} true;
    $i11 := $M.8;
    goto corral_source_split_8371;

  corral_source_split_8371:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 2);
    goto corral_source_split_8372;

  corral_source_split_8372:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i12 == 1);
    goto corral_source_split_8392;

  corral_source_split_8392:
    assume {:verifier.code 0} true;
    $i13 := $M.8;
    goto corral_source_split_8393;

  corral_source_split_8393:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 3);
    goto corral_source_split_8394;

  corral_source_split_8394:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $M.8 := 4;
    call {:si_unique_call 1388} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(4);
    goto corral_source_split_8387;

  corral_source_split_8387:
    assume {:verifier.code 0} true;
    $p15 := $M.7;
    goto corral_source_split_8388;

  corral_source_split_8388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1389} ftdi_elan_status_work($p15);
    goto SeqInstr_778, SeqInstr_779;

  SeqInstr_779:
    assume assertsPassed;
    goto SeqInstr_780;

  SeqInstr_780:
    goto corral_source_split_8389;

  corral_source_split_8389:
    assume {:verifier.code 0} true;
    $M.8 := 1;
    call {:si_unique_call 1390} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(1);
    goto corral_source_split_8390;

  corral_source_split_8390:
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_778:
    assume !assertsPassed;
    return;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb21;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_8374;

  corral_source_split_8374:
    assume {:verifier.code 0} true;
    $i6 := $M.6;
    goto corral_source_split_8375;

  corral_source_split_8375:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 2);
    goto corral_source_split_8376;

  corral_source_split_8376:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i7 == 1);
    goto corral_source_split_8383;

  corral_source_split_8383:
    assume {:verifier.code 0} true;
    $i8 := $M.6;
    goto corral_source_split_8384;

  corral_source_split_8384:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 3);
    goto corral_source_split_8385;

  corral_source_split_8385:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $M.6 := 4;
    call {:si_unique_call 1385} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(4);
    goto corral_source_split_8378;

  corral_source_split_8378:
    assume {:verifier.code 0} true;
    $p10 := $M.7;
    goto corral_source_split_8379;

  corral_source_split_8379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1386} ftdi_elan_status_work($p10);
    goto SeqInstr_775, SeqInstr_776;

  SeqInstr_776:
    assume assertsPassed;
    goto SeqInstr_777;

  SeqInstr_777:
    goto corral_source_split_8380;

  corral_source_split_8380:
    assume {:verifier.code 0} true;
    $M.6 := 1;
    call {:si_unique_call 1387} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(1);
    goto corral_source_split_8381;

  corral_source_split_8381:
    assume {:verifier.code 0} true;
    goto $bb18;

  SeqInstr_775:
    assume !assertsPassed;
    return;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb14;
}



const ldv_file_operations_5: ref;

axiom ldv_file_operations_5 == $sub.ref(0, 429083);

procedure ldv_file_operations_5();
  free requires assertsPassed;
  modifies $M.37, $M.38, $M.0, $CurrAddr;



implementation ldv_file_operations_5()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8416;

  corral_source_split_8416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1398} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_8417;

  corral_source_split_8417:
    assume {:verifier.code 0} true;
    goto corral_source_split_8418;

  corral_source_split_8418:
    assume {:verifier.code 0} true;
    $M.37 := $p0;
    goto corral_source_split_8419;

  corral_source_split_8419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1399} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_8420;

  corral_source_split_8420:
    assume {:verifier.code 0} true;
    goto corral_source_split_8421;

  corral_source_split_8421:
    assume {:verifier.code 0} true;
    $M.38 := $p2;
    goto corral_source_split_8422;

  corral_source_split_8422:
    assume {:verifier.code 0} true;
    return;
}



const invoke_work_2: ref;

axiom invoke_work_2 == $sub.ref(0, 430115);

procedure invoke_work_2();
  free requires assertsPassed;
  modifies $M.32, $M.0, $M.33, $M.34, $M.35, $M.25, $M.1, $CurrAddr, $M.7, $M.6, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12, $M.16, $M.19, $M.20, $M.23, $M.24, $M.4, $M.3, $M.22, assertsPassed;



implementation invoke_work_2()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8424;

  corral_source_split_8424:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1400} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1401} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1402} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1415} ldv_stop();
    goto corral_source_split_8478;

  corral_source_split_8478:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_8430;

  corral_source_split_8430:
    assume {:verifier.code 0} true;
    $i21 := $M.35;
    goto corral_source_split_8431;

  corral_source_split_8431:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 2);
    goto corral_source_split_8432;

  corral_source_split_8432:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb34;

  $bb34:
    assume !($i22 == 1);
    goto corral_source_split_8474;

  corral_source_split_8474:
    assume {:verifier.code 0} true;
    $i23 := $M.35;
    goto corral_source_split_8475;

  corral_source_split_8475:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 3);
    goto corral_source_split_8476;

  corral_source_split_8476:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $M.35 := 4;
    call {:si_unique_call 1412} {:cexpr "ldv_work_2_3"} boogie_si_record_i32(4);
    goto corral_source_split_8469;

  corral_source_split_8469:
    assume {:verifier.code 0} true;
    $p25 := $M.39;
    goto corral_source_split_8470;

  corral_source_split_8470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1413} ftdi_elan_command_work($p25);
    goto SeqInstr_796, SeqInstr_797;

  SeqInstr_797:
    assume assertsPassed;
    goto SeqInstr_798;

  SeqInstr_798:
    goto corral_source_split_8471;

  corral_source_split_8471:
    assume {:verifier.code 0} true;
    $M.35 := 1;
    call {:si_unique_call 1414} {:cexpr "ldv_work_2_3"} boogie_si_record_i32(1);
    goto corral_source_split_8472;

  corral_source_split_8472:
    assume {:verifier.code 0} true;
    goto $bb37;

  SeqInstr_796:
    assume !assertsPassed;
    return;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb33;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_8426;

  corral_source_split_8426:
    assume {:verifier.code 0} true;
    $i16 := $M.34;
    goto corral_source_split_8427;

  corral_source_split_8427:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 2);
    goto corral_source_split_8428;

  corral_source_split_8428:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb26, $bb28;

  $bb28:
    assume !($i17 == 1);
    goto corral_source_split_8465;

  corral_source_split_8465:
    assume {:verifier.code 0} true;
    $i18 := $M.34;
    goto corral_source_split_8466;

  corral_source_split_8466:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 3);
    goto corral_source_split_8467;

  corral_source_split_8467:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $M.34 := 4;
    call {:si_unique_call 1409} {:cexpr "ldv_work_2_2"} boogie_si_record_i32(4);
    goto corral_source_split_8460;

  corral_source_split_8460:
    assume {:verifier.code 0} true;
    $p20 := $M.39;
    goto corral_source_split_8461;

  corral_source_split_8461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1410} ftdi_elan_command_work($p20);
    goto SeqInstr_793, SeqInstr_794;

  SeqInstr_794:
    assume assertsPassed;
    goto SeqInstr_795;

  SeqInstr_795:
    goto corral_source_split_8462;

  corral_source_split_8462:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 1411} {:cexpr "ldv_work_2_2"} boogie_si_record_i32(1);
    goto corral_source_split_8463;

  corral_source_split_8463:
    assume {:verifier.code 0} true;
    goto $bb31;

  SeqInstr_793:
    assume !assertsPassed;
    return;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb27;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_8434;

  corral_source_split_8434:
    assume {:verifier.code 0} true;
    $i11 := $M.33;
    goto corral_source_split_8435;

  corral_source_split_8435:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 2);
    goto corral_source_split_8436;

  corral_source_split_8436:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i12 == 1);
    goto corral_source_split_8456;

  corral_source_split_8456:
    assume {:verifier.code 0} true;
    $i13 := $M.33;
    goto corral_source_split_8457;

  corral_source_split_8457:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 3);
    goto corral_source_split_8458;

  corral_source_split_8458:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $M.33 := 4;
    call {:si_unique_call 1406} {:cexpr "ldv_work_2_1"} boogie_si_record_i32(4);
    goto corral_source_split_8451;

  corral_source_split_8451:
    assume {:verifier.code 0} true;
    $p15 := $M.39;
    goto corral_source_split_8452;

  corral_source_split_8452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1407} ftdi_elan_command_work($p15);
    goto SeqInstr_790, SeqInstr_791;

  SeqInstr_791:
    assume assertsPassed;
    goto SeqInstr_792;

  SeqInstr_792:
    goto corral_source_split_8453;

  corral_source_split_8453:
    assume {:verifier.code 0} true;
    $M.33 := 1;
    call {:si_unique_call 1408} {:cexpr "ldv_work_2_1"} boogie_si_record_i32(1);
    goto corral_source_split_8454;

  corral_source_split_8454:
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_790:
    assume !assertsPassed;
    return;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb21;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_8438;

  corral_source_split_8438:
    assume {:verifier.code 0} true;
    $i6 := $M.32;
    goto corral_source_split_8439;

  corral_source_split_8439:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 2);
    goto corral_source_split_8440;

  corral_source_split_8440:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i7 == 1);
    goto corral_source_split_8447;

  corral_source_split_8447:
    assume {:verifier.code 0} true;
    $i8 := $M.32;
    goto corral_source_split_8448;

  corral_source_split_8448:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 3);
    goto corral_source_split_8449;

  corral_source_split_8449:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $M.32 := 4;
    call {:si_unique_call 1403} {:cexpr "ldv_work_2_0"} boogie_si_record_i32(4);
    goto corral_source_split_8442;

  corral_source_split_8442:
    assume {:verifier.code 0} true;
    $p10 := $M.39;
    goto corral_source_split_8443;

  corral_source_split_8443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1404} ftdi_elan_command_work($p10);
    goto SeqInstr_787, SeqInstr_788;

  SeqInstr_788:
    assume assertsPassed;
    goto SeqInstr_789;

  SeqInstr_789:
    goto corral_source_split_8444;

  corral_source_split_8444:
    assume {:verifier.code 0} true;
    $M.32 := 1;
    call {:si_unique_call 1405} {:cexpr "ldv_work_2_0"} boogie_si_record_i32(1);
    goto corral_source_split_8445;

  corral_source_split_8445:
    assume {:verifier.code 0} true;
    goto $bb18;

  SeqInstr_787:
    assume !assertsPassed;
    return;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb14;
}



const main: ref;

axiom main == $sub.ref(0, 431147);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.26, $M.40, $M.6, $M.8, $M.10, $M.12, $M.41, $M.42, $M.43, $M.27, $M.28, $M.29, $M.30, $M.44, $M.32, $M.33, $M.34, $M.35, $M.45, $M.46, $M.1, $M.0, $M.47, $M.49, $M.37, $M.38, $M.15, $M.16, $M.50, $M.58, $M.4, $M.54, $M.53, $M.52, $M.3, $M.59, $M.51, $M.17, $M.21, $M.18, $M.60, $M.61, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.5, $M.68, $M.69, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $M.78, $M.79, $M.80, $M.11, $M.39, $M.31, $M.48, $M.13, $M.36, $M.9, $M.7, $M.103, $M.104, $M.105, $CurrAddr, $M.19, $M.20, $M.23, $M.24, $M.25, assertsPassed, $M.22;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p14: ref;
  var $p16: ref;
  var $p18: ref;
  var $i20: i32;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $i37: i32;
  var $i38: i32;
  var $i39: i1;
  var $i40: i32;
  var $i41: i32;
  var $i42: i32;
  var $i43: i1;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $i47: i32;
  var $i48: i32;
  var $i49: i32;
  var $i50: i1;
  var $i51: i32;
  var $i52: i1;
  var $i53: i32;
  var $i54: i1;
  var $i55: i1;
  var $i56: i1;
  var $i57: i32;
  var $i58: i1;
  var $i59: i32;
  var $i60: i1;
  var $i61: i32;
  var $i62: i1;
  var $i63: i32;
  var $i64: i32;
  var $i65: i1;
  var $i66: i32;
  var $i67: i1;
  var $i68: i32;
  var $i69: i1;
  var $i70: i32;
  var $i71: i1;
  var $i72: i32;
  var $i73: i1;
  var $i74: i32;
  var $i75: i1;
  var $i76: i1;
  var $i77: i1;
  var $i78: i1;
  var $i79: i1;
  var $i80: i1;
  var $i81: i32;
  var $i82: i1;
  var $p83: ref;
  var $i84: i64;
  var $i86: i32;
  var $i87: i1;
  var $p88: ref;
  var $i89: i64;
  var $i91: i32;
  var $i92: i1;
  var $p93: ref;
  var $p94: ref;
  var $i96: i32;
  var $i97: i32;
  var $i98: i32;
  var $i99: i1;
  var $p100: ref;
  var $i101: i64;
  var $i103: i32;
  var $i104: i1;
  var $p105: ref;
  var $i106: i64;
  var $i107: i32;
  var $i109: i32;
  var $i110: i1;
  var $p111: ref;
  var $p112: ref;
  var $i113: i32;
  var $i114: i32;
  var $i115: i1;
  var $i116: i32;
  var $i117: i32;
  var vslice_dummy_var_34: ref;
  var vslice_dummy_var_35: ref;
  var vslice_dummy_var_36: ref;
  var vslice_dummy_var_37: ref;
  var vslice_dummy_var_38: i64;
  var vslice_dummy_var_39: i64;
  var vslice_dummy_var_40: i32;
  var vslice_dummy_var_41: i64;
  var vslice_dummy_var_42: i64;

  $bb0:
    call {:si_unique_call 1416} $initialize();
    goto corral_source_split_8480;

  corral_source_split_8480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1417} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    assume {:verifier.code 0} true;
    call {:si_unique_call 1418} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1419} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1420} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1421} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_8481;

  corral_source_split_8481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1422} $p4 := ldv_init_zalloc(32);
    goto corral_source_split_8482;

  corral_source_split_8482:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_8483;

  corral_source_split_8483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1423} $p6 := ldv_init_zalloc(8);
    goto corral_source_split_8484;

  corral_source_split_8484:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_8485;

  corral_source_split_8485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1424} $p8 := ldv_init_zalloc(1);
    goto corral_source_split_8486;

  corral_source_split_8486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1425} $p9 := ldv_init_zalloc(8);
    goto corral_source_split_8487;

  corral_source_split_8487:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_8488;

  corral_source_split_8488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1426} $p11 := ldv_init_zalloc(1);
    goto corral_source_split_8489;

  corral_source_split_8489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1427} ldv_initialize();
    goto corral_source_split_8490;

  corral_source_split_8490:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p0);
    goto corral_source_split_8491;

  corral_source_split_8491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1428} vslice_dummy_var_34 := ldv_memset($p12, 0, 8);
    goto corral_source_split_8492;

  corral_source_split_8492:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p1);
    goto corral_source_split_8493;

  corral_source_split_8493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1429} vslice_dummy_var_35 := ldv_memset($p14, 0, 4);
    goto corral_source_split_8494;

  corral_source_split_8494:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p2);
    goto corral_source_split_8495;

  corral_source_split_8495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1430} vslice_dummy_var_36 := ldv_memset($p16, 0, 8);
    goto corral_source_split_8496;

  corral_source_split_8496:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p3);
    goto corral_source_split_8497;

  corral_source_split_8497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1431} vslice_dummy_var_37 := ldv_memset($p18, 0, 8);
    goto corral_source_split_8498;

  corral_source_split_8498:
    assume {:verifier.code 0} true;
    $M.40 := 0;
    call {:si_unique_call 1432} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_8499;

  corral_source_split_8499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1433} work_init_1();
    goto corral_source_split_8500;

  corral_source_split_8500:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 1434} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_8501;

  corral_source_split_8501:
    assume {:verifier.code 0} true;
    $M.42 := 0;
    call {:si_unique_call 1435} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_8502;

  corral_source_split_8502:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 1436} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_8503;

  corral_source_split_8503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1437} work_init_3();
    goto corral_source_split_8504;

  corral_source_split_8504:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 1438} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_8505;

  corral_source_split_8505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1439} work_init_2();
    goto corral_source_split_8506;

  corral_source_split_8506:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1440} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_8507;

  corral_source_split_8507:
    assume {:verifier.code 0} true;
    $M.46 := 0;
    call {:si_unique_call 1441} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    goto corral_source_split_8508;

  corral_source_split_8508:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $p36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $p46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $p83, $i84, $i86, $i87, $p88, $i89, $i91, $i92, $p93, $p94, $i96, $i97, $i98, $i99, $p100, $i101, $i103, $i104, $p105, $i106, $i107, $i109, $i110, $p111, $p112, $i113, $i114, $i115, $i116, $i117, vslice_dummy_var_38, vslice_dummy_var_39, vslice_dummy_var_40, vslice_dummy_var_41, vslice_dummy_var_42 := main_loop_$bb1($p0, $p1, $p2, $p3, $p5, $p7, $p8, $p10, $p11, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $p36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $p46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $p83, $i84, $i86, $i87, $p88, $i89, $i91, $i92, $p93, $p94, $i96, $i97, $i98, $i99, $p100, $i101, $i103, $i104, $p105, $i106, $i107, $i109, $i110, $p111, $p112, $i113, $i114, $i115, $i116, $i117, vslice_dummy_var_38, vslice_dummy_var_39, vslice_dummy_var_40, vslice_dummy_var_41, vslice_dummy_var_42);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i20, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i20, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i20, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i20, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1491} ldv_stop();
    goto corral_source_split_8694;

  corral_source_split_8694:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb44_dummy;

  $bb9:
    assume $i24 == 1;
    goto corral_source_split_8518;

  corral_source_split_8518:
    assume {:verifier.code 0} true;
    $i72 := $M.46;
    goto corral_source_split_8519;

  corral_source_split_8519:
    assume {:verifier.code 0} true;
    $i73 := $ne.i32($i72, 0);
    goto corral_source_split_8520;

  corral_source_split_8520:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb84:
    assume $i73 == 1;
    goto corral_source_split_8619;

  corral_source_split_8619:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1472} $i74 := __VERIFIER_nondet_int();
    call {:si_unique_call 1473} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i74);
    call {:si_unique_call 1474} {:cexpr "tmp___7"} boogie_si_record_i32($i74);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $i75 := $slt.i32($i74, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    $i76 := $slt.i32($i74, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    $i77 := $slt.i32($i74, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    $i78 := $eq.i32($i74, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    assume !($i78 == 1);
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1490} ldv_stop();
    goto corral_source_split_8692;

  corral_source_split_8692:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb93:
    assume $i78 == 1;
    goto corral_source_split_8629;

  corral_source_split_8629:
    assume {:verifier.code 0} true;
    $i109 := $M.46;
    goto corral_source_split_8630;

  corral_source_split_8630:
    assume {:verifier.code 0} true;
    $i110 := $eq.i32($i109, 1);
    goto corral_source_split_8631;

  corral_source_split_8631:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  $bb117:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb116:
    assume $i110 == 1;
    goto corral_source_split_8678;

  corral_source_split_8678:
    assume {:verifier.code 0} true;
    $p111 := $M.37;
    goto corral_source_split_8679;

  corral_source_split_8679:
    assume {:verifier.code 0} true;
    $p112 := $M.38;
    goto corral_source_split_8680;

  corral_source_split_8680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1486} $i113 := ftdi_elan_open($p111, $p112);
    goto corral_source_split_8681;

  corral_source_split_8681:
    assume {:verifier.code 0} true;
    $M.50 := $i113;
    call {:si_unique_call 1487} {:cexpr "ldv_retval_2"} boogie_si_record_i32($i113);
    goto corral_source_split_8682;

  corral_source_split_8682:
    assume {:verifier.code 0} true;
    $i114 := $M.50;
    goto corral_source_split_8683;

  corral_source_split_8683:
    assume {:verifier.code 0} true;
    $i115 := $eq.i32($i114, 0);
    goto corral_source_split_8684;

  corral_source_split_8684:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  $bb119:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb118:
    assume $i115 == 1;
    goto corral_source_split_8686;

  corral_source_split_8686:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1488} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_8687;

  corral_source_split_8687:
    assume {:verifier.code 0} true;
    $i116 := $M.42;
    goto corral_source_split_8688;

  corral_source_split_8688:
    assume {:verifier.code 0} true;
    $i117 := $add.i32($i116, 1);
    goto corral_source_split_8689;

  corral_source_split_8689:
    assume {:verifier.code 0} true;
    $M.42 := $i117;
    call {:si_unique_call 1489} {:cexpr "ref_cnt"} boogie_si_record_i32($i117);
    goto corral_source_split_8690;

  corral_source_split_8690:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb91:
    assume $i77 == 1;
    goto corral_source_split_8625;

  corral_source_split_8625:
    assume {:verifier.code 0} true;
    $i103 := $M.46;
    goto corral_source_split_8626;

  corral_source_split_8626:
    assume {:verifier.code 0} true;
    $i104 := $eq.i32($i103, 2);
    goto corral_source_split_8627;

  corral_source_split_8627:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  $bb114:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb113:
    assume $i104 == 1;
    goto corral_source_split_8671;

  corral_source_split_8671:
    assume {:verifier.code 0} true;
    $p105 := $M.38;
    goto corral_source_split_8672;

  corral_source_split_8672:
    assume {:verifier.code 0} true;
    $i106 := $load.i64($M.26, $p3);
    goto corral_source_split_8673;

  corral_source_split_8673:
    assume {:verifier.code 0} true;
    $i107 := $load.i32($M.26, $p1);
    goto corral_source_split_8674;

  corral_source_split_8674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1484} vslice_dummy_var_42 := no_llseek($p105, $i106, $i107);
    goto corral_source_split_8675;

  corral_source_split_8675:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1485} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_8676;

  corral_source_split_8676:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb89:
    assume $i76 == 1;
    goto corral_source_split_8621;

  corral_source_split_8621:
    assume {:verifier.code 0} true;
    $i98 := $M.46;
    goto corral_source_split_8622;

  corral_source_split_8622:
    assume {:verifier.code 0} true;
    $i99 := $eq.i32($i98, 2);
    goto corral_source_split_8623;

  corral_source_split_8623:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  $bb111:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb110:
    assume $i99 == 1;
    goto corral_source_split_8665;

  corral_source_split_8665:
    assume {:verifier.code 0} true;
    $p100 := $M.38;
    goto corral_source_split_8666;

  corral_source_split_8666:
    assume {:verifier.code 0} true;
    $i101 := $load.i64($M.26, $p2);
    goto corral_source_split_8667;

  corral_source_split_8667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1482} vslice_dummy_var_41 := ftdi_elan_read($p100, $p8, $i101, $p7);
    goto corral_source_split_8668;

  corral_source_split_8668:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1483} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_8669;

  corral_source_split_8669:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb87:
    assume $i75 == 1;
    assume {:verifier.code 0} true;
    $i79 := $slt.i32($i74, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  $bb97:
    assume !($i79 == 1);
    goto corral_source_split_8633;

  corral_source_split_8633:
    assume {:verifier.code 0} true;
    $i91 := $M.46;
    goto corral_source_split_8634;

  corral_source_split_8634:
    assume {:verifier.code 0} true;
    $i92 := $eq.i32($i91, 2);
    goto corral_source_split_8635;

  corral_source_split_8635:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  $bb108:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb107:
    assume $i92 == 1;
    goto corral_source_split_8656;

  corral_source_split_8656:
    assume {:verifier.code 0} true;
    $p93 := $M.37;
    goto corral_source_split_8657;

  corral_source_split_8657:
    assume {:verifier.code 0} true;
    $p94 := $M.38;
    goto corral_source_split_8658;

  corral_source_split_8658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1479} vslice_dummy_var_40 := ftdi_elan_release($p93, $p94);
    goto SeqInstr_823, SeqInstr_824;

  SeqInstr_824:
    assume assertsPassed;
    goto SeqInstr_825;

  SeqInstr_825:
    goto corral_source_split_8659;

  corral_source_split_8659:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1480} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8660;

  corral_source_split_8660:
    assume {:verifier.code 0} true;
    $i96 := $M.42;
    goto corral_source_split_8661;

  corral_source_split_8661:
    assume {:verifier.code 0} true;
    $i97 := $sub.i32($i96, 1);
    goto corral_source_split_8662;

  corral_source_split_8662:
    assume {:verifier.code 0} true;
    $M.42 := $i97;
    call {:si_unique_call 1481} {:cexpr "ref_cnt"} boogie_si_record_i32($i97);
    goto corral_source_split_8663;

  corral_source_split_8663:
    assume {:verifier.code 0} true;
    goto $bb109;

  SeqInstr_823:
    assume !assertsPassed;
    return;

  $bb96:
    assume $i79 == 1;
    assume {:verifier.code 0} true;
    $i80 := $eq.i32($i74, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    assume !($i80 == 1);
    goto $bb95;

  $bb98:
    assume $i80 == 1;
    goto corral_source_split_8637;

  corral_source_split_8637:
    assume {:verifier.code 0} true;
    $i81 := $M.46;
    goto corral_source_split_8638;

  corral_source_split_8638:
    assume {:verifier.code 0} true;
    $i82 := $eq.i32($i81, 1);
    goto corral_source_split_8639;

  corral_source_split_8639:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    $i86 := $M.46;
    goto corral_source_split_8647;

  corral_source_split_8647:
    assume {:verifier.code 0} true;
    $i87 := $eq.i32($i86, 2);
    goto corral_source_split_8648;

  corral_source_split_8648:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb103:
    assume $i87 == 1;
    goto corral_source_split_8650;

  corral_source_split_8650:
    assume {:verifier.code 0} true;
    $p88 := $M.38;
    goto corral_source_split_8651;

  corral_source_split_8651:
    assume {:verifier.code 0} true;
    $i89 := $load.i64($M.26, $p0);
    goto corral_source_split_8652;

  corral_source_split_8652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1477} vslice_dummy_var_39 := ftdi_elan_write($p88, $p11, $i89, $p10);
    goto corral_source_split_8653;

  corral_source_split_8653:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1478} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_8654;

  corral_source_split_8654:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb100:
    assume $i82 == 1;
    goto corral_source_split_8641;

  corral_source_split_8641:
    assume {:verifier.code 0} true;
    $p83 := $M.38;
    goto corral_source_split_8642;

  corral_source_split_8642:
    assume {:verifier.code 0} true;
    $i84 := $load.i64($M.26, $p0);
    goto corral_source_split_8643;

  corral_source_split_8643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1475} vslice_dummy_var_38 := ftdi_elan_write($p83, $p11, $i84, $p10);
    goto corral_source_split_8644;

  corral_source_split_8644:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1476} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8645;

  corral_source_split_8645:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb7:
    assume $i23 == 1;
    goto corral_source_split_8514;

  corral_source_split_8514:
    assume {:verifier.code 0} true;
    $i70 := $M.45;
    goto corral_source_split_8515;

  corral_source_split_8515:
    assume {:verifier.code 0} true;
    $i71 := $ne.i32($i70, 0);
    goto corral_source_split_8516;

  corral_source_split_8516:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb81:
    assume $i71 == 1;
    goto corral_source_split_8616;

  corral_source_split_8616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1471} invoke_work_2();
    goto SeqInstr_820, SeqInstr_821;

  SeqInstr_821:
    assume assertsPassed;
    goto SeqInstr_822;

  SeqInstr_822:
    goto corral_source_split_8617;

  corral_source_split_8617:
    assume {:verifier.code 0} true;
    goto $bb83;

  SeqInstr_820:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i22 == 1;
    goto corral_source_split_8510;

  corral_source_split_8510:
    assume {:verifier.code 0} true;
    $i68 := $M.44;
    goto corral_source_split_8511;

  corral_source_split_8511:
    assume {:verifier.code 0} true;
    $i69 := $ne.i32($i68, 0);
    goto corral_source_split_8512;

  corral_source_split_8512:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb78:
    assume $i69 == 1;
    goto corral_source_split_8613;

  corral_source_split_8613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1470} invoke_work_3();
    goto SeqInstr_817, SeqInstr_818;

  SeqInstr_818:
    assume assertsPassed;
    goto SeqInstr_819;

  SeqInstr_819:
    goto corral_source_split_8614;

  corral_source_split_8614:
    assume {:verifier.code 0} true;
    goto $bb80;

  SeqInstr_817:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i20, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i20, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i26 == 1);
    goto corral_source_split_8526;

  corral_source_split_8526:
    assume {:verifier.code 0} true;
    $i51 := $M.43;
    goto corral_source_split_8527;

  corral_source_split_8527:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_8528;

  corral_source_split_8528:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb48:
    assume $i52 == 1;
    goto corral_source_split_8574;

  corral_source_split_8574:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1457} $i53 := __VERIFIER_nondet_int();
    call {:si_unique_call 1458} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i53);
    call {:si_unique_call 1459} {:cexpr "tmp___6"} boogie_si_record_i32($i53);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i54 := $slt.i32($i53, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i53, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    assume !($i55 == 1);
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1469} ldv_stop();
    goto corral_source_split_8611;

  corral_source_split_8611:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb53:
    assume $i55 == 1;
    goto corral_source_split_8576;

  corral_source_split_8576:
    assume {:verifier.code 0} true;
    $i61 := $M.43;
    goto corral_source_split_8577;

  corral_source_split_8577:
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i61, 1);
    goto corral_source_split_8578;

  corral_source_split_8578:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb66:
    assume $i62 == 1;
    goto corral_source_split_8594;

  corral_source_split_8594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1463} $i63 := ftdi_elan_init();
    goto SeqInstr_814, SeqInstr_815;

  SeqInstr_815:
    assume assertsPassed;
    goto SeqInstr_816;

  SeqInstr_816:
    goto corral_source_split_8595;

  corral_source_split_8595:
    assume {:verifier.code 0} true;
    $M.49 := $i63;
    call {:si_unique_call 1464} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i63);
    goto corral_source_split_8596;

  corral_source_split_8596:
    assume {:verifier.code 0} true;
    $i64 := $M.49;
    goto corral_source_split_8597;

  corral_source_split_8597:
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i64, 0);
    goto corral_source_split_8598;

  corral_source_split_8598:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $i66 := $M.49;
    goto corral_source_split_8605;

  corral_source_split_8605:
    assume {:verifier.code 0} true;
    $i67 := $ne.i32($i66, 0);
    goto corral_source_split_8606;

  corral_source_split_8606:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb71:
    assume $i67 == 1;
    goto corral_source_split_8608;

  corral_source_split_8608:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 1468} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_8609;

  corral_source_split_8609:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1462} ldv_check_final_state();
    goto SeqInstr_811, SeqInstr_812;

  SeqInstr_812:
    assume assertsPassed;
    goto SeqInstr_813;

  SeqInstr_813:
    goto corral_source_split_8592;

  corral_source_split_8592:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_811:
    assume !assertsPassed;
    return;

  $bb68:
    assume $i65 == 1;
    goto corral_source_split_8600;

  corral_source_split_8600:
    assume {:verifier.code 0} true;
    $M.43 := 3;
    call {:si_unique_call 1465} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_8601;

  corral_source_split_8601:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1466} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8602;

  corral_source_split_8602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1467} ldv_file_operations_5();
    goto corral_source_split_8603;

  corral_source_split_8603:
    assume {:verifier.code 0} true;
    goto $bb70;

  SeqInstr_814:
    assume !assertsPassed;
    return;

  $bb51:
    assume $i54 == 1;
    assume {:verifier.code 0} true;
    $i56 := $eq.i32($i53, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    assume !($i56 == 1);
    goto $bb55;

  $bb56:
    assume $i56 == 1;
    goto corral_source_split_8580;

  corral_source_split_8580:
    assume {:verifier.code 0} true;
    $i57 := $M.43;
    goto corral_source_split_8581;

  corral_source_split_8581:
    assume {:verifier.code 0} true;
    $i58 := $eq.i32($i57, 3);
    goto corral_source_split_8582;

  corral_source_split_8582:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    assume !($i58 == 1);
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb58:
    assume $i58 == 1;
    goto corral_source_split_8584;

  corral_source_split_8584:
    assume {:verifier.code 0} true;
    $i59 := $M.42;
    goto corral_source_split_8585;

  corral_source_split_8585:
    assume {:verifier.code 0} true;
    $i60 := $eq.i32($i59, 0);
    goto corral_source_split_8586;

  corral_source_split_8586:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    assume !($i60 == 1);
    goto $bb60;

  $bb61:
    assume $i60 == 1;
    goto corral_source_split_8588;

  corral_source_split_8588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1460} ftdi_elan_exit();
    goto SeqInstr_808, SeqInstr_809;

  SeqInstr_809:
    assume assertsPassed;
    goto SeqInstr_810;

  SeqInstr_810:
    goto corral_source_split_8589;

  corral_source_split_8589:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 1461} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_8590;

  corral_source_split_8590:
    assume {:verifier.code 0} true;
    goto $bb63;

  SeqInstr_808:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i26 == 1;
    goto corral_source_split_8522;

  corral_source_split_8522:
    assume {:verifier.code 0} true;
    $i49 := $M.41;
    goto corral_source_split_8523;

  corral_source_split_8523:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_8524;

  corral_source_split_8524:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb45:
    assume $i50 == 1;
    goto corral_source_split_8571;

  corral_source_split_8571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1456} invoke_work_1();
    goto SeqInstr_805, SeqInstr_806;

  SeqInstr_806:
    assume assertsPassed;
    goto SeqInstr_807;

  SeqInstr_807:
    goto corral_source_split_8572;

  corral_source_split_8572:
    assume {:verifier.code 0} true;
    goto $bb47;

  SeqInstr_805:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i20, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb11;

  $bb16:
    assume $i27 == 1;
    goto corral_source_split_8530;

  corral_source_split_8530:
    assume {:verifier.code 0} true;
    $i28 := $M.40;
    goto corral_source_split_8531;

  corral_source_split_8531:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_8532;

  corral_source_split_8532:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb18:
    assume $i29 == 1;
    goto corral_source_split_8534;

  corral_source_split_8534:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1445} $i30 := __VERIFIER_nondet_int();
    call {:si_unique_call 1446} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i30);
    call {:si_unique_call 1447} {:cexpr "tmp___5"} boogie_si_record_i32($i30);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i30, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i30, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1455} ldv_stop();
    goto corral_source_split_8569;

  corral_source_split_8569:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb23:
    assume $i32 == 1;
    goto corral_source_split_8536;

  corral_source_split_8536:
    assume {:verifier.code 0} true;
    $i42 := $M.40;
    goto corral_source_split_8537;

  corral_source_split_8537:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, 2);
    goto corral_source_split_8538;

  corral_source_split_8538:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i43 == 1);
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb35:
    assume $i43 == 1;
    goto corral_source_split_8557;

  corral_source_split_8557:
    assume {:verifier.code 0} true;
    $i44 := $M.48;
    goto corral_source_split_8558;

  corral_source_split_8558:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i44, 0);
    goto corral_source_split_8559;

  corral_source_split_8559:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i45 == 1);
    goto $bb37;

  $bb38:
    assume $i45 == 1;
    goto corral_source_split_8561;

  corral_source_split_8561:
    assume {:verifier.code 0} true;
    $p46 := $M.36;
    goto corral_source_split_8562;

  corral_source_split_8562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1452} ftdi_elan_disconnect($p46);
    goto SeqInstr_802, SeqInstr_803;

  SeqInstr_803:
    assume assertsPassed;
    goto SeqInstr_804;

  SeqInstr_804:
    goto corral_source_split_8563;

  corral_source_split_8563:
    assume {:verifier.code 0} true;
    $M.40 := 1;
    call {:si_unique_call 1453} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8564;

  corral_source_split_8564:
    assume {:verifier.code 0} true;
    $i47 := $M.42;
    goto corral_source_split_8565;

  corral_source_split_8565:
    assume {:verifier.code 0} true;
    $i48 := $sub.i32($i47, 1);
    goto corral_source_split_8566;

  corral_source_split_8566:
    assume {:verifier.code 0} true;
    $M.42 := $i48;
    call {:si_unique_call 1454} {:cexpr "ref_cnt"} boogie_si_record_i32($i48);
    goto corral_source_split_8567;

  corral_source_split_8567:
    assume {:verifier.code 0} true;
    goto $bb40;

  SeqInstr_802:
    assume !assertsPassed;
    return;

  $bb21:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i30, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb25;

  $bb26:
    assume $i33 == 1;
    goto corral_source_split_8540;

  corral_source_split_8540:
    assume {:verifier.code 0} true;
    $i34 := $M.40;
    goto corral_source_split_8541;

  corral_source_split_8541:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 1);
    goto corral_source_split_8542;

  corral_source_split_8542:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb28:
    assume $i35 == 1;
    goto corral_source_split_8544;

  corral_source_split_8544:
    assume {:verifier.code 0} true;
    $p36 := $M.36;
    goto corral_source_split_8545;

  corral_source_split_8545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1448} $i37 := ftdi_elan_probe($p36, $p5);
    goto SeqInstr_799, SeqInstr_800;

  SeqInstr_800:
    assume assertsPassed;
    goto SeqInstr_801;

  SeqInstr_801:
    goto corral_source_split_8546;

  corral_source_split_8546:
    assume {:verifier.code 0} true;
    $M.47 := $i37;
    call {:si_unique_call 1449} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i37);
    goto corral_source_split_8547;

  corral_source_split_8547:
    assume {:verifier.code 0} true;
    $i38 := $M.47;
    goto corral_source_split_8548;

  corral_source_split_8548:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 0);
    goto corral_source_split_8549;

  corral_source_split_8549:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb30:
    assume $i39 == 1;
    goto corral_source_split_8551;

  corral_source_split_8551:
    assume {:verifier.code 0} true;
    $M.40 := 2;
    call {:si_unique_call 1450} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_8552;

  corral_source_split_8552:
    assume {:verifier.code 0} true;
    $i40 := $M.42;
    goto corral_source_split_8553;

  corral_source_split_8553:
    assume {:verifier.code 0} true;
    $i41 := $add.i32($i40, 1);
    goto corral_source_split_8554;

  corral_source_split_8554:
    assume {:verifier.code 0} true;
    $M.42 := $i41;
    call {:si_unique_call 1451} {:cexpr "ref_cnt"} boogie_si_record_i32($i41);
    goto corral_source_split_8555;

  corral_source_split_8555:
    assume {:verifier.code 0} true;
    goto $bb32;

  SeqInstr_799:
    assume !assertsPassed;
    return;

  $bb44_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1442} $i20 := __VERIFIER_nondet_int();
    call {:si_unique_call 1443} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i20);
    call {:si_unique_call 1444} {:cexpr "tmp___4"} boogie_si_record_i32($i20);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 432179);

procedure ldv_initialize();
  free requires assertsPassed;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8696;

  corral_source_split_8696:
    assume {:verifier.code 0} true;
    return;
}



const ftdi_elan_exit: ref;

axiom ftdi_elan_exit == $sub.ref(0, 433211);

procedure ftdi_elan_exit();
  free requires assertsPassed;
  modifies $M.17, $M.5, $M.18, $M.40, $M.6, $M.8, $M.10, $M.12, $M.0, $M.1, $M.16, $M.19, $M.20, $M.25, $M.23, $M.24, $M.4, $CurrAddr, $M.3, $M.22, assertsPassed, $M.7, $M.9, $M.11, $M.13;



implementation ftdi_elan_exit()
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p13: ref;
  var $p14: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p10: ref;
  var $p11: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var vslice_dummy_var_43: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8698;

  corral_source_split_8698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1492} ldv_usb_deregister_96(ftdi_elan_driver);
    goto corral_source_split_8699;

  corral_source_split_8699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1493} vslice_dummy_var_43 := printk.ref(.str.62);
    goto corral_source_split_8700;

  corral_source_split_8700:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.0, ftdi_static_list);
    goto corral_source_split_8701;

  corral_source_split_8701:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_8702;

  corral_source_split_8702:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 8488)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_8703;

  corral_source_split_8703:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_8704;

  corral_source_split_8704:
    assume {:verifier.code 0} true;
    goto corral_source_split_8705;

  corral_source_split_8705:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 8488)), $mul.ref(0, 1));
    goto corral_source_split_8706;

  corral_source_split_8706:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_8707;

  corral_source_split_8707:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, $p2i.ref.i64(ftdi_static_list));
    goto corral_source_split_8708;

  corral_source_split_8708:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p19 := $M.17;
    goto corral_source_split_8726;

  corral_source_split_8726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1497} ldv_flush_workqueue_97($p19);
    goto SeqInstr_835, SeqInstr_836;

  SeqInstr_836:
    assume assertsPassed;
    goto SeqInstr_837;

  SeqInstr_837:
    goto corral_source_split_8727;

  corral_source_split_8727:
    assume {:verifier.code 0} true;
    $p20 := $M.17;
    goto corral_source_split_8728;

  corral_source_split_8728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1498} ldv_destroy_workqueue_98($p20);
    goto SeqInstr_838, SeqInstr_839;

  SeqInstr_839:
    assume assertsPassed;
    goto SeqInstr_840;

  SeqInstr_840:
    goto corral_source_split_8729;

  corral_source_split_8729:
    assume {:verifier.code 0} true;
    $M.17 := $0.ref;
    goto corral_source_split_8730;

  corral_source_split_8730:
    assume {:verifier.code 0} true;
    $p21 := $M.5;
    goto corral_source_split_8731;

  corral_source_split_8731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1499} ldv_flush_workqueue_99($p21);
    goto SeqInstr_841, SeqInstr_842;

  SeqInstr_842:
    assume assertsPassed;
    goto SeqInstr_843;

  SeqInstr_843:
    goto corral_source_split_8732;

  corral_source_split_8732:
    assume {:verifier.code 0} true;
    $p22 := $M.5;
    goto corral_source_split_8733;

  corral_source_split_8733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1500} ldv_destroy_workqueue_100($p22);
    goto SeqInstr_844, SeqInstr_845;

  SeqInstr_845:
    assume assertsPassed;
    goto SeqInstr_846;

  SeqInstr_846:
    goto corral_source_split_8734;

  corral_source_split_8734:
    assume {:verifier.code 0} true;
    $M.5 := $0.ref;
    goto corral_source_split_8735;

  corral_source_split_8735:
    assume {:verifier.code 0} true;
    $p23 := $M.18;
    goto corral_source_split_8736;

  corral_source_split_8736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1501} ldv_flush_workqueue_101($p23);
    goto SeqInstr_847, SeqInstr_848;

  SeqInstr_848:
    assume assertsPassed;
    goto SeqInstr_849;

  SeqInstr_849:
    goto corral_source_split_8737;

  corral_source_split_8737:
    assume {:verifier.code 0} true;
    $p24 := $M.18;
    goto corral_source_split_8738;

  corral_source_split_8738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1502} ldv_destroy_workqueue_102($p24);
    goto SeqInstr_850, SeqInstr_851;

  SeqInstr_851:
    assume assertsPassed;
    goto SeqInstr_852;

  SeqInstr_852:
    goto corral_source_split_8739;

  corral_source_split_8739:
    assume {:verifier.code 0} true;
    $M.18 := $0.ref;
    goto corral_source_split_8740;

  corral_source_split_8740:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_850:
    assume !assertsPassed;
    return;

  SeqInstr_847:
    assume !assertsPassed;
    return;

  SeqInstr_844:
    assume !assertsPassed;
    return;

  SeqInstr_841:
    assume !assertsPassed;
    return;

  SeqInstr_838:
    assume !assertsPassed;
    return;

  SeqInstr_835:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_8710;

  corral_source_split_8710:
    assume {:verifier.code 0} true;
    $p10, $p11 := $p1, $p5;
    goto $bb4;

  $bb4:
    call $p13, $p14, $p16, $i17, $i18, $p10, $p11 := ftdi_elan_exit_loop_$bb4($p13, $p14, $p16, $i17, $i18, $p10, $p11);
    goto $bb4_last;

  corral_source_split_8712:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1494} ftdi_status_cancel_work($p10);
    goto SeqInstr_826, SeqInstr_827;

  SeqInstr_827:
    assume assertsPassed;
    goto SeqInstr_828;

  SeqInstr_828:
    goto corral_source_split_8714;

  corral_source_split_8714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1495} ftdi_command_cancel_work($p10);
    goto SeqInstr_829, SeqInstr_830;

  SeqInstr_830:
    assume assertsPassed;
    goto SeqInstr_831;

  SeqInstr_831:
    goto corral_source_split_8715;

  corral_source_split_8715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1496} ftdi_response_cancel_work($p10);
    goto SeqInstr_832, SeqInstr_833;

  SeqInstr_833:
    assume assertsPassed;
    goto SeqInstr_834;

  SeqInstr_834:
    goto corral_source_split_8716;

  corral_source_split_8716:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 8488)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_8717;

  corral_source_split_8717:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_8718;

  corral_source_split_8718:
    assume {:verifier.code 0} true;
    goto corral_source_split_8719;

  corral_source_split_8719:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p11, $mul.ref(0, 8488)), $mul.ref(0, 1));
    goto corral_source_split_8720;

  corral_source_split_8720:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_8721;

  corral_source_split_8721:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, $p2i.ref.i64(ftdi_static_list));
    goto corral_source_split_8722;

  corral_source_split_8722:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i18 == 1);
    goto corral_source_split_8724;

  corral_source_split_8724:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    $p10, $p11 := $p11, $p14;
    goto $bb6_dummy;

  SeqInstr_832:
    assume !assertsPassed;
    return;

  SeqInstr_829:
    assume !assertsPassed;
    return;

  SeqInstr_826:
    assume !assertsPassed;
    return;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8712;
}



const ftdi_elan_init: ref;

axiom ftdi_elan_init == $sub.ref(0, 434243);

procedure ftdi_elan_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.17, $M.5, $M.18, $M.40, $M.48, $M.36, $CurrAddr, $M.6, $M.8, $M.10, $M.12, $M.16, $M.19, $M.20, $M.22, $M.4, $M.1, $M.7, $M.9, $M.11, $M.13, assertsPassed, $M.25, $M.23, $M.24, $M.3;



implementation ftdi_elan_init() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i24: i32;
  var vslice_dummy_var_44: i32;
  var vslice_dummy_var_45: i32;
  var vslice_dummy_var_46: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1503} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1504} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1505} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1506} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_8742;

  corral_source_split_8742:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.51, ftdi_elan_driver);
    goto corral_source_split_8743;

  corral_source_split_8743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1507} vslice_dummy_var_44 := printk.ref.ref(.str.64, $p4);
    goto corral_source_split_8744;

  corral_source_split_8744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1508} __mutex_init(ftdi_module_lock, .str.65, $p0);
    goto corral_source_split_8745;

  corral_source_split_8745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1509} INIT_LIST_HEAD(ftdi_static_list);
    goto corral_source_split_8746;

  corral_source_split_8746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1510} $p6 := __alloc_workqueue_key.ref.i32.i32.ref.ref.ref(.str.67, 131082, 1, $p1, .str.66, .str.68);
    goto corral_source_split_8747;

  corral_source_split_8747:
    assume {:verifier.code 0} true;
    $M.17 := $p6;
    goto corral_source_split_8748;

  corral_source_split_8748:
    assume {:verifier.code 0} true;
    $p7 := $M.17;
    goto corral_source_split_8749;

  corral_source_split_8749:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_8750;

  corral_source_split_8750:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_8751;

  corral_source_split_8751:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1512} $p10 := __alloc_workqueue_key.ref.i32.i32.ref.ref.ref(.str.67, 131082, 1, $p2, .str.69, .str.70);
    goto corral_source_split_8758;

  corral_source_split_8758:
    assume {:verifier.code 0} true;
    $M.5 := $p10;
    goto corral_source_split_8759;

  corral_source_split_8759:
    assume {:verifier.code 0} true;
    $p11 := $M.5;
    goto corral_source_split_8760;

  corral_source_split_8760:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_8761;

  corral_source_split_8761:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_8762;

  corral_source_split_8762:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1514} $p14 := __alloc_workqueue_key.ref.i32.i32.ref.ref.ref(.str.67, 131082, 1, $p3, .str.71, .str.72);
    goto corral_source_split_8769;

  corral_source_split_8769:
    assume {:verifier.code 0} true;
    $M.18 := $p14;
    goto corral_source_split_8770;

  corral_source_split_8770:
    assume {:verifier.code 0} true;
    $p15 := $M.18;
    goto corral_source_split_8771;

  corral_source_split_8771:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_8772;

  corral_source_split_8772:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i16, 0);
    goto corral_source_split_8773;

  corral_source_split_8773:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1516} $i18 := ldv_usb_register_driver_90(ftdi_elan_driver, __this_module, .str.73);
    call {:si_unique_call 1517} {:cexpr "result"} boogie_si_record_i32($i18);
    goto corral_source_split_8780;

  corral_source_split_8780:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_8781;

  corral_source_split_8781:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i24 := $i18;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_8792;

  corral_source_split_8792:
    assume {:verifier.code 0} true;
    $r := $i24;
    return;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_8783;

  corral_source_split_8783:
    assume {:verifier.code 0} true;
    $p20 := $M.17;
    goto corral_source_split_8784;

  corral_source_split_8784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1518} ldv_destroy_workqueue_91($p20);
    goto SeqInstr_859, SeqInstr_860;

  SeqInstr_860:
    assume assertsPassed;
    goto SeqInstr_861;

  SeqInstr_861:
    goto corral_source_split_8785;

  corral_source_split_8785:
    assume {:verifier.code 0} true;
    $p21 := $M.5;
    goto corral_source_split_8786;

  corral_source_split_8786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1519} ldv_destroy_workqueue_92($p21);
    goto SeqInstr_862, SeqInstr_863;

  SeqInstr_863:
    assume assertsPassed;
    goto SeqInstr_864;

  SeqInstr_864:
    goto corral_source_split_8787;

  corral_source_split_8787:
    assume {:verifier.code 0} true;
    $p22 := $M.18;
    goto corral_source_split_8788;

  corral_source_split_8788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1520} ldv_destroy_workqueue_93($p22);
    goto SeqInstr_865, SeqInstr_866;

  SeqInstr_866:
    assume assertsPassed;
    goto SeqInstr_867;

  SeqInstr_867:
    goto corral_source_split_8789;

  corral_source_split_8789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1521} vslice_dummy_var_46 := printk.ref.i32(.str.74, $i18);
    goto corral_source_split_8790;

  corral_source_split_8790:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_865:
    assume !assertsPassed;
    return;

  SeqInstr_862:
    assume !assertsPassed;
    return;

  SeqInstr_859:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i17 == 1;
    goto corral_source_split_8775;

  corral_source_split_8775:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p25 := $M.5;
    goto corral_source_split_8777;

  corral_source_split_8777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1515} ldv_destroy_workqueue_94($p25);
    goto SeqInstr_856, SeqInstr_857;

  SeqInstr_857:
    assume assertsPassed;
    goto SeqInstr_858;

  SeqInstr_858:
    goto corral_source_split_8778;

  corral_source_split_8778:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p26 := $M.17;
    goto corral_source_split_8766;

  corral_source_split_8766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1513} ldv_destroy_workqueue_95($p26);
    goto SeqInstr_853, SeqInstr_854;

  SeqInstr_854:
    assume assertsPassed;
    goto SeqInstr_855;

  SeqInstr_855:
    goto corral_source_split_8767;

  corral_source_split_8767:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.51, ftdi_elan_driver);
    goto corral_source_split_8755;

  corral_source_split_8755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1511} vslice_dummy_var_45 := printk.ref.ref(.str.75, $p27);
    goto corral_source_split_8756;

  corral_source_split_8756:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32(0, 12);
    goto $bb16;

  SeqInstr_853:
    assume !assertsPassed;
    return;

  SeqInstr_856:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_8764;

  corral_source_split_8764:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_8753;

  corral_source_split_8753:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 435275);

procedure ldv_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8794;

  corral_source_split_8794:
    assume {:verifier.code 0} true;
    $i0 := $M.3;
    goto corral_source_split_8795;

  corral_source_split_8795:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 1);
    goto corral_source_split_8796;

  corral_source_split_8796:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i2 := $M.52;
    goto corral_source_split_8801;

  corral_source_split_8801:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 1);
    goto corral_source_split_8802;

  corral_source_split_8802:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i4 := $M.53;
    goto corral_source_split_8807;

  corral_source_split_8807:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 1);
    goto corral_source_split_8808;

  corral_source_split_8808:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i6 := $M.54;
    goto corral_source_split_8813;

  corral_source_split_8813:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 1);
    goto corral_source_split_8814;

  corral_source_split_8814:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i8 := $M.4;
    goto corral_source_split_8819;

  corral_source_split_8819:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 1);
    goto corral_source_split_8820;

  corral_source_split_8820:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    return;

  $bb13:
    assume $i9 == 1;
    goto corral_source_split_8822;

  corral_source_split_8822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1526} ldv_error();
    goto SeqInstr_880, SeqInstr_881;

  SeqInstr_881:
    assume assertsPassed;
    goto SeqInstr_882;

  SeqInstr_882:
    goto corral_source_split_8823;

  corral_source_split_8823:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_880:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i7 == 1;
    goto corral_source_split_8816;

  corral_source_split_8816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1525} ldv_error();
    goto SeqInstr_877, SeqInstr_878;

  SeqInstr_878:
    assume assertsPassed;
    goto SeqInstr_879;

  SeqInstr_879:
    goto corral_source_split_8817;

  corral_source_split_8817:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_877:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i5 == 1;
    goto corral_source_split_8810;

  corral_source_split_8810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1524} ldv_error();
    goto SeqInstr_874, SeqInstr_875;

  SeqInstr_875:
    assume assertsPassed;
    goto SeqInstr_876;

  SeqInstr_876:
    goto corral_source_split_8811;

  corral_source_split_8811:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_874:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i3 == 1;
    goto corral_source_split_8804;

  corral_source_split_8804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1523} ldv_error();
    goto SeqInstr_871, SeqInstr_872;

  SeqInstr_872:
    assume assertsPassed;
    goto SeqInstr_873;

  SeqInstr_873:
    goto corral_source_split_8805;

  corral_source_split_8805:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_871:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_8798;

  corral_source_split_8798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1522} ldv_error();
    goto SeqInstr_868, SeqInstr_869;

  SeqInstr_869:
    assume assertsPassed;
    goto SeqInstr_870;

  SeqInstr_870:
    goto corral_source_split_8799;

  corral_source_split_8799:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_868:
    assume !assertsPassed;
    return;
}



const __alloc_workqueue_key: ref;

axiom __alloc_workqueue_key == $sub.ref(0, 436307);

procedure __alloc_workqueue_key.ref.i32.i32.ref.ref.ref($p0: ref, $i1: i32, $i2: i32, $p3: ref, $p4: ref, p.5: ref) returns ($r: ref);
  free requires assertsPassed;



implementation __alloc_workqueue_key.ref.i32.i32.ref.ref.ref($p0: ref, $i1: i32, $i2: i32, $p3: ref, $p4: ref, p.5: ref) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1527} {:cexpr "__alloc_workqueue_key:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1528} {:cexpr "__alloc_workqueue_key:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_8825;

  corral_source_split_8825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1529} $p5 := external_alloc();
    goto corral_source_split_8826;

  corral_source_split_8826:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_8827;

  corral_source_split_8827:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const ldv_usb_register_driver_90: ref;

axiom ldv_usb_register_driver_90 == $sub.ref(0, 437339);

procedure ldv_usb_register_driver_90($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.40, $M.48, $M.36, $M.0, $CurrAddr;



implementation ldv_usb_register_driver_90($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8829;

  corral_source_split_8829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1530} $i3 := usb_register_driver($p0, $p1, $p2);
    call {:si_unique_call 1531} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_8830;

  corral_source_split_8830:
    assume {:verifier.code 0} true;
    $M.40 := 1;
    call {:si_unique_call 1532} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8831;

  corral_source_split_8831:
    assume {:verifier.code 0} true;
    $M.48 := 0;
    call {:si_unique_call 1533} {:cexpr "usb_counter"} boogie_si_record_i32(0);
    goto corral_source_split_8832;

  corral_source_split_8832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1534} ldv_usb_driver_4();
    goto corral_source_split_8833;

  corral_source_split_8833:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_destroy_workqueue_91: ref;

axiom ldv_destroy_workqueue_91 == $sub.ref(0, 438371);

procedure ldv_destroy_workqueue_91($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $M.8, $M.10, $M.12, $M.0, $M.16, $M.19, $M.20, $M.22, $M.4, $M.1, $CurrAddr, $M.7, $M.9, $M.11, $M.13, assertsPassed, $M.25, $M.23, $M.24, $M.3;



implementation ldv_destroy_workqueue_91($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8835;

  corral_source_split_8835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1535} destroy_workqueue($p0);
    goto corral_source_split_8836;

  corral_source_split_8836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1536} call_and_disable_all_1(2);
    goto SeqInstr_883, SeqInstr_884;

  SeqInstr_884:
    assume assertsPassed;
    goto SeqInstr_885;

  SeqInstr_885:
    goto corral_source_split_8837;

  corral_source_split_8837:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_883:
    assume !assertsPassed;
    return;
}



const ldv_destroy_workqueue_92: ref;

axiom ldv_destroy_workqueue_92 == $sub.ref(0, 439403);

procedure ldv_destroy_workqueue_92($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $M.8, $M.10, $M.12, $M.0, $M.16, $M.19, $M.20, $M.22, $M.4, $M.1, $CurrAddr, $M.7, $M.9, $M.11, $M.13, assertsPassed, $M.25, $M.23, $M.24, $M.3;



implementation ldv_destroy_workqueue_92($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8839;

  corral_source_split_8839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1537} destroy_workqueue($p0);
    goto corral_source_split_8840;

  corral_source_split_8840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1538} call_and_disable_all_1(2);
    goto SeqInstr_886, SeqInstr_887;

  SeqInstr_887:
    assume assertsPassed;
    goto SeqInstr_888;

  SeqInstr_888:
    goto corral_source_split_8841;

  corral_source_split_8841:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_886:
    assume !assertsPassed;
    return;
}



const ldv_destroy_workqueue_93: ref;

axiom ldv_destroy_workqueue_93 == $sub.ref(0, 440435);

procedure ldv_destroy_workqueue_93($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $M.8, $M.10, $M.12, $M.0, $M.16, $M.19, $M.20, $M.22, $M.4, $M.1, $CurrAddr, $M.7, $M.9, $M.11, $M.13, assertsPassed, $M.25, $M.23, $M.24, $M.3;



implementation ldv_destroy_workqueue_93($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8843;

  corral_source_split_8843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1539} destroy_workqueue($p0);
    goto corral_source_split_8844;

  corral_source_split_8844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1540} call_and_disable_all_1(2);
    goto SeqInstr_889, SeqInstr_890;

  SeqInstr_890:
    assume assertsPassed;
    goto SeqInstr_891;

  SeqInstr_891:
    goto corral_source_split_8845;

  corral_source_split_8845:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_889:
    assume !assertsPassed;
    return;
}



const ldv_destroy_workqueue_94: ref;

axiom ldv_destroy_workqueue_94 == $sub.ref(0, 441467);

procedure ldv_destroy_workqueue_94($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $M.8, $M.10, $M.12, $M.0, $M.16, $M.19, $M.20, $M.22, $M.4, $M.1, $CurrAddr, $M.7, $M.9, $M.11, $M.13, assertsPassed, $M.25, $M.23, $M.24, $M.3;



implementation ldv_destroy_workqueue_94($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8847;

  corral_source_split_8847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1541} destroy_workqueue($p0);
    goto corral_source_split_8848;

  corral_source_split_8848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1542} call_and_disable_all_1(2);
    goto SeqInstr_892, SeqInstr_893;

  SeqInstr_893:
    assume assertsPassed;
    goto SeqInstr_894;

  SeqInstr_894:
    goto corral_source_split_8849;

  corral_source_split_8849:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_892:
    assume !assertsPassed;
    return;
}



const ldv_destroy_workqueue_95: ref;

axiom ldv_destroy_workqueue_95 == $sub.ref(0, 442499);

procedure ldv_destroy_workqueue_95($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $M.8, $M.10, $M.12, $M.0, $M.16, $M.19, $M.20, $M.22, $M.4, $M.1, $CurrAddr, $M.7, $M.9, $M.11, $M.13, assertsPassed, $M.25, $M.23, $M.24, $M.3;



implementation ldv_destroy_workqueue_95($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8851;

  corral_source_split_8851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1543} destroy_workqueue($p0);
    goto corral_source_split_8852;

  corral_source_split_8852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1544} call_and_disable_all_1(2);
    goto SeqInstr_895, SeqInstr_896;

  SeqInstr_896:
    assume assertsPassed;
    goto SeqInstr_897;

  SeqInstr_897:
    goto corral_source_split_8853;

  corral_source_split_8853:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_895:
    assume !assertsPassed;
    return;
}



const destroy_workqueue: ref;

axiom destroy_workqueue == $sub.ref(0, 443531);

procedure destroy_workqueue($p0: ref);
  free requires assertsPassed;



implementation destroy_workqueue($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8855;

  corral_source_split_8855:
    assume {:verifier.code 0} true;
    return;
}



const usb_register_driver: ref;

axiom usb_register_driver == $sub.ref(0, 444563);

procedure usb_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8857;

  corral_source_split_8857:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1545} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1546} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_8858;

  corral_source_split_8858:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_usb_deregister_96: ref;

axiom ldv_usb_deregister_96 == $sub.ref(0, 445595);

procedure ldv_usb_deregister_96($p0: ref);
  free requires assertsPassed;
  modifies $M.40;



implementation ldv_usb_deregister_96($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8860;

  corral_source_split_8860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1547} usb_deregister($p0);
    goto corral_source_split_8861;

  corral_source_split_8861:
    assume {:verifier.code 0} true;
    $M.40 := 0;
    call {:si_unique_call 1548} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_8862;

  corral_source_split_8862:
    assume {:verifier.code 0} true;
    return;
}



const ldv_flush_workqueue_97: ref;

axiom ldv_flush_workqueue_97 == $sub.ref(0, 446627);

procedure ldv_flush_workqueue_97($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $M.8, $M.10, $M.12, $M.0, $M.16, $M.19, $M.20, $M.22, $M.4, $M.1, $CurrAddr, $M.7, $M.9, $M.11, $M.13, assertsPassed, $M.25, $M.23, $M.24, $M.3;



implementation ldv_flush_workqueue_97($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8864;

  corral_source_split_8864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1549} flush_workqueue($p0);
    goto corral_source_split_8865;

  corral_source_split_8865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1550} call_and_disable_all_1(2);
    goto SeqInstr_898, SeqInstr_899;

  SeqInstr_899:
    assume assertsPassed;
    goto SeqInstr_900;

  SeqInstr_900:
    goto corral_source_split_8866;

  corral_source_split_8866:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_898:
    assume !assertsPassed;
    return;
}



const ldv_destroy_workqueue_98: ref;

axiom ldv_destroy_workqueue_98 == $sub.ref(0, 447659);

procedure ldv_destroy_workqueue_98($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $M.8, $M.10, $M.12, $M.0, $M.16, $M.19, $M.20, $M.22, $M.4, $M.1, $CurrAddr, $M.7, $M.9, $M.11, $M.13, assertsPassed, $M.25, $M.23, $M.24, $M.3;



implementation ldv_destroy_workqueue_98($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8868;

  corral_source_split_8868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1551} destroy_workqueue($p0);
    goto corral_source_split_8869;

  corral_source_split_8869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1552} call_and_disable_all_1(2);
    goto SeqInstr_901, SeqInstr_902;

  SeqInstr_902:
    assume assertsPassed;
    goto SeqInstr_903;

  SeqInstr_903:
    goto corral_source_split_8870;

  corral_source_split_8870:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_901:
    assume !assertsPassed;
    return;
}



const ldv_flush_workqueue_99: ref;

axiom ldv_flush_workqueue_99 == $sub.ref(0, 448691);

procedure ldv_flush_workqueue_99($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $M.8, $M.10, $M.12, $M.0, $M.16, $M.19, $M.20, $M.22, $M.4, $M.1, $CurrAddr, $M.7, $M.9, $M.11, $M.13, assertsPassed, $M.25, $M.23, $M.24, $M.3;



implementation ldv_flush_workqueue_99($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8872;

  corral_source_split_8872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1553} flush_workqueue($p0);
    goto corral_source_split_8873;

  corral_source_split_8873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1554} call_and_disable_all_1(2);
    goto SeqInstr_904, SeqInstr_905;

  SeqInstr_905:
    assume assertsPassed;
    goto SeqInstr_906;

  SeqInstr_906:
    goto corral_source_split_8874;

  corral_source_split_8874:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_904:
    assume !assertsPassed;
    return;
}



const ldv_destroy_workqueue_100: ref;

axiom ldv_destroy_workqueue_100 == $sub.ref(0, 449723);

procedure ldv_destroy_workqueue_100($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $M.8, $M.10, $M.12, $M.0, $M.16, $M.19, $M.20, $M.22, $M.4, $M.1, $CurrAddr, $M.7, $M.9, $M.11, $M.13, assertsPassed, $M.25, $M.23, $M.24, $M.3;



implementation ldv_destroy_workqueue_100($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8876;

  corral_source_split_8876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1555} destroy_workqueue($p0);
    goto corral_source_split_8877;

  corral_source_split_8877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1556} call_and_disable_all_1(2);
    goto SeqInstr_907, SeqInstr_908;

  SeqInstr_908:
    assume assertsPassed;
    goto SeqInstr_909;

  SeqInstr_909:
    goto corral_source_split_8878;

  corral_source_split_8878:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_907:
    assume !assertsPassed;
    return;
}



const ldv_flush_workqueue_101: ref;

axiom ldv_flush_workqueue_101 == $sub.ref(0, 450755);

procedure ldv_flush_workqueue_101($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $M.8, $M.10, $M.12, $M.0, $M.16, $M.19, $M.20, $M.22, $M.4, $M.1, $CurrAddr, $M.7, $M.9, $M.11, $M.13, assertsPassed, $M.25, $M.23, $M.24, $M.3;



implementation ldv_flush_workqueue_101($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8880;

  corral_source_split_8880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1557} flush_workqueue($p0);
    goto corral_source_split_8881;

  corral_source_split_8881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1558} call_and_disable_all_1(2);
    goto SeqInstr_910, SeqInstr_911;

  SeqInstr_911:
    assume assertsPassed;
    goto SeqInstr_912;

  SeqInstr_912:
    goto corral_source_split_8882;

  corral_source_split_8882:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_910:
    assume !assertsPassed;
    return;
}



const ldv_destroy_workqueue_102: ref;

axiom ldv_destroy_workqueue_102 == $sub.ref(0, 451787);

procedure ldv_destroy_workqueue_102($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $M.8, $M.10, $M.12, $M.0, $M.16, $M.19, $M.20, $M.22, $M.4, $M.1, $CurrAddr, $M.7, $M.9, $M.11, $M.13, assertsPassed, $M.25, $M.23, $M.24, $M.3;



implementation ldv_destroy_workqueue_102($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8884;

  corral_source_split_8884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1559} destroy_workqueue($p0);
    goto corral_source_split_8885;

  corral_source_split_8885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1560} call_and_disable_all_1(2);
    goto SeqInstr_913, SeqInstr_914;

  SeqInstr_914:
    assume assertsPassed;
    goto SeqInstr_915;

  SeqInstr_915:
    goto corral_source_split_8886;

  corral_source_split_8886:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_913:
    assume !assertsPassed;
    return;
}



const usb_deregister: ref;

axiom usb_deregister == $sub.ref(0, 452819);

procedure usb_deregister($p0: ref);
  free requires assertsPassed;



implementation usb_deregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8888;

  corral_source_split_8888:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 453851);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1561} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_8890;

  corral_source_split_8890:
    assume {:verifier.code 1} true;
    goto corral_source_split_8891;

  corral_source_split_8891:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_8892;

  corral_source_split_8892:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 454883);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 455915);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 456947);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8894;

  corral_source_split_8894:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_916, SeqInstr_917;

  SeqInstr_917:
    assume assertsPassed;
    goto SeqInstr_918;

  SeqInstr_918:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_8895;

  corral_source_split_8895:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_916:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 457979);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 459011);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 460043);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 461075);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 462107);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 463139);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 464171);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 465203);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 466235);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 467267);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8897;

  corral_source_split_8897:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1562} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 1563} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1564} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_8898;

  corral_source_split_8898:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_8899;

  corral_source_split_8899:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_8903;

  corral_source_split_8903:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_8904;

  corral_source_split_8904:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1565} __VERIFIER_assume($i4);
    goto corral_source_split_8905;

  corral_source_split_8905:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_8901;

  corral_source_split_8901:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 468299);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 469331);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 470363);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 471395);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __VERIFIER_nondet_long: ref;

axiom __VERIFIER_nondet_long == $sub.ref(0, 472427);

procedure __VERIFIER_nondet_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8907;

  corral_source_split_8907:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1566} $i0 := __SMACK_nondet_long();
    call {:si_unique_call 1567} {:cexpr "smack:ext:__SMACK_nondet_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1568} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_8908;

  corral_source_split_8908:
    assume {:verifier.code 0} true;
    $i1 := $sge.i64($i0, $sub.i64(0, 9223372036854775808));
    goto corral_source_split_8909;

  corral_source_split_8909:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_8913;

  corral_source_split_8913:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_8914;

  corral_source_split_8914:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1569} __VERIFIER_assume($i4);
    goto corral_source_split_8915;

  corral_source_split_8915:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_8911;

  corral_source_split_8911:
    assume {:verifier.code 1} true;
    $i3 := $sle.i64($i0, 9223372036854775807);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 473459);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 474491);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 475523);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 476555);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 477587);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8917;

  corral_source_split_8917:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1570} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1571} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1572} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_8918;

  corral_source_split_8918:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1573} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1574} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 1575} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_8919;

  corral_source_split_8919:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1576} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1577} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 1578} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_8920;

  corral_source_split_8920:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_8921;

  corral_source_split_8921:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_8926;

  corral_source_split_8926:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_8927;

  corral_source_split_8927:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1579} __VERIFIER_assume($i7);
    goto corral_source_split_8928;

  corral_source_split_8928:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_8929;

  corral_source_split_8929:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_8935;

  corral_source_split_8935:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_8936;

  corral_source_split_8936:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1580} __VERIFIER_assume($i11);
    goto corral_source_split_8937;

  corral_source_split_8937:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_8933;

  corral_source_split_8933:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_8923;

  corral_source_split_8923:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_8924;

  corral_source_split_8924:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_8931;

  corral_source_split_8931:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 478619);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 479651);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 480683);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 481715);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 482747);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 483779);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 484811);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 485843);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 486875);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8939;

  corral_source_split_8939:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1581} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1582} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_8940;

  corral_source_split_8940:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_8941;

  corral_source_split_8941:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1583} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_8942;

  corral_source_split_8942:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_8943;

  corral_source_split_8943:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_8944;

  corral_source_split_8944:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_8945;

  corral_source_split_8945:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume {:branchcond $i5} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_8952;

  corral_source_split_8952:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_8953;

  corral_source_split_8953:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_8954;

  corral_source_split_8954:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_8955;

  corral_source_split_8955:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_8947;

  corral_source_split_8947:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_8948;

  corral_source_split_8948:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1584} __VERIFIER_assume($i10);
    goto corral_source_split_8949;

  corral_source_split_8949:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_8950;

  corral_source_split_8950:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 487907);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8957;

  corral_source_split_8957:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1585} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 1586} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1587} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_8958;

  corral_source_split_8958:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 488939);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8960;

  corral_source_split_8960:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1588} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 1589} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_8961;

  corral_source_split_8961:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 489971);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 491003);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1590} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1591} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 492035);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 493067);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8963;

  corral_source_split_8963:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_8964;

  corral_source_split_8964:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 494099);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_14: [ref]i8;
  var cmdloc_dummy_var_15: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1592} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 1593} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_8966;

  corral_source_split_8966:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1594} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1595} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_8967;

  corral_source_split_8967:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_8968;

  corral_source_split_8968:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_8972;

  corral_source_split_8972:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_8973;

  corral_source_split_8973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1596} $p6 := malloc($i5);
    goto corral_source_split_8974;

  corral_source_split_8974:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_8975;

  corral_source_split_8975:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_14 := $M.0;
    call {:si_unique_call 1597} cmdloc_dummy_var_15 := $memset.i8(cmdloc_dummy_var_14, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_15;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8977;

  corral_source_split_8977:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_8970;

  corral_source_split_8970:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 495131);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 496163);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.58, $M.4, $M.54, $M.53, $M.52, $M.3, $M.59, $M.51, $M.0, $M.17, $M.21, $M.18, $M.60, $M.61, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.5, $M.1, $M.50, $M.49, $M.47, $M.68, $M.69, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $M.78, $M.79, $M.80, $M.33, $M.40, $M.35, $M.41, $M.6, $M.30, $M.42, $M.34, $M.44, $M.11, $M.39, $M.38, $M.27, $M.10, $M.31, $M.29, $M.48, $M.32, $M.8, $M.45, $M.28, $M.46, $M.43, $M.12, $M.13, $M.37, $M.36, $M.9, $M.7, $M.103, $M.104, $M.105;



implementation __SMACK_static_init()
{

  $bb0:
    call {:si_unique_call 1598} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.58 := $store.i8($M.58, __kstrtab_ftdi_elan_gone_away, 102);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(__kstrtab_ftdi_elan_gone_away, $mul.ref(0, 20)), $mul.ref(1, 1)), 116);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(__kstrtab_ftdi_elan_gone_away, $mul.ref(0, 20)), $mul.ref(2, 1)), 100);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(__kstrtab_ftdi_elan_gone_away, $mul.ref(0, 20)), $mul.ref(3, 1)), 105);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(__kstrtab_ftdi_elan_gone_away, $mul.ref(0, 20)), $mul.ref(4, 1)), 95);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(__kstrtab_ftdi_elan_gone_away, $mul.ref(0, 20)), $mul.ref(5, 1)), 101);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(__kstrtab_ftdi_elan_gone_away, $mul.ref(0, 20)), $mul.ref(6, 1)), 108);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(__kstrtab_ftdi_elan_gone_away, $mul.ref(0, 20)), $mul.ref(7, 1)), 97);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(__kstrtab_ftdi_elan_gone_away, $mul.ref(0, 20)), $mul.ref(8, 1)), 110);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(__kstrtab_ftdi_elan_gone_away, $mul.ref(0, 20)), $mul.ref(9, 1)), 95);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(__kstrtab_ftdi_elan_gone_away, $mul.ref(0, 20)), $mul.ref(10, 1)), 103);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(__kstrtab_ftdi_elan_gone_away, $mul.ref(0, 20)), $mul.ref(11, 1)), 111);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(__kstrtab_ftdi_elan_gone_away, $mul.ref(0, 20)), $mul.ref(12, 1)), 110);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(__kstrtab_ftdi_elan_gone_away, $mul.ref(0, 20)), $mul.ref(13, 1)), 101);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(__kstrtab_ftdi_elan_gone_away, $mul.ref(0, 20)), $mul.ref(14, 1)), 95);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(__kstrtab_ftdi_elan_gone_away, $mul.ref(0, 20)), $mul.ref(15, 1)), 97);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(__kstrtab_ftdi_elan_gone_away, $mul.ref(0, 20)), $mul.ref(16, 1)), 119);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(__kstrtab_ftdi_elan_gone_away, $mul.ref(0, 20)), $mul.ref(17, 1)), 97);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(__kstrtab_ftdi_elan_gone_away, $mul.ref(0, 20)), $mul.ref(18, 1)), 121);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(__kstrtab_ftdi_elan_gone_away, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.4 := 1;
    call {:si_unique_call 1599} {:cexpr "ldv_mutex_u132_lock_of_usb_ftdi"} boogie_si_record_i32(1);
    $M.54 := 1;
    call {:si_unique_call 1600} {:cexpr "ldv_mutex_mutex_of_device"} boogie_si_record_i32(1);
    $M.53 := 1;
    call {:si_unique_call 1601} {:cexpr "ldv_mutex_lock"} boogie_si_record_i32(1);
    $M.52 := 1;
    call {:si_unique_call 1602} {:cexpr "ldv_mutex_i_mutex_of_inode"} boogie_si_record_i32(1);
    $M.3 := 1;
    call {:si_unique_call 1603} {:cexpr "ldv_mutex_ftdi_module_lock"} boogie_si_record_i32(1);
    $M.59 := $store.i16($M.59, ftdi_elan_table, 3);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(ftdi_elan_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(2, 1)), 1027);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(ftdi_elan_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(4, 1)), $sub.i16(0, 10518));
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(ftdi_elan_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(ftdi_elan_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(ftdi_elan_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(10, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(ftdi_elan_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(11, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(ftdi_elan_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(12, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(ftdi_elan_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(13, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(ftdi_elan_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(14, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(ftdi_elan_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(15, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(ftdi_elan_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.59 := $store.i64($M.59, $add.ref($add.ref($add.ref(ftdi_elan_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(ftdi_elan_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(ftdi_elan_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(2, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(ftdi_elan_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(4, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(ftdi_elan_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(ftdi_elan_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(8, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(ftdi_elan_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(10, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(ftdi_elan_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(11, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(ftdi_elan_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(12, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(ftdi_elan_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(13, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(ftdi_elan_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(14, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(ftdi_elan_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(15, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(ftdi_elan_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.59 := $store.i64($M.59, $add.ref($add.ref($add.ref(ftdi_elan_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.51 := $store.ref($M.51, ftdi_elan_driver, .str.63);
    $M.51 := $store.ref($M.51, $add.ref($add.ref(ftdi_elan_driver, $mul.ref(0, 304)), $mul.ref(8, 1)), ftdi_elan_probe);
    $M.51 := $store.ref($M.51, $add.ref($add.ref(ftdi_elan_driver, $mul.ref(0, 304)), $mul.ref(16, 1)), ftdi_elan_disconnect);
    $M.51 := $store.ref($M.51, $add.ref($add.ref(ftdi_elan_driver, $mul.ref(0, 304)), $mul.ref(24, 1)), $0.ref);
    $M.51 := $store.ref($M.51, $add.ref($add.ref(ftdi_elan_driver, $mul.ref(0, 304)), $mul.ref(32, 1)), $0.ref);
    $M.51 := $store.ref($M.51, $add.ref($add.ref(ftdi_elan_driver, $mul.ref(0, 304)), $mul.ref(40, 1)), $0.ref);
    $M.51 := $store.ref($M.51, $add.ref($add.ref(ftdi_elan_driver, $mul.ref(0, 304)), $mul.ref(48, 1)), $0.ref);
    $M.51 := $store.ref($M.51, $add.ref($add.ref(ftdi_elan_driver, $mul.ref(0, 304)), $mul.ref(56, 1)), $0.ref);
    $M.51 := $store.ref($M.51, $add.ref($add.ref(ftdi_elan_driver, $mul.ref(0, 304)), $mul.ref(64, 1)), $0.ref);
    $M.51 := $store.ref($M.51, $add.ref($add.ref(ftdi_elan_driver, $mul.ref(0, 304)), $mul.ref(72, 1)), ftdi_elan_table);
    $M.51 := $store.i32($M.51, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(ftdi_elan_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.51 := $store.i32($M.51, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(ftdi_elan_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.51 := $store.i32($M.51, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(ftdi_elan_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.51 := $store.ref($M.51, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(ftdi_elan_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.51 := $store.ref($M.51, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(ftdi_elan_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.51 := $store.ref($M.51, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(ftdi_elan_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.51 := $store.ref($M.51, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(ftdi_elan_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.51 := $store.ref($M.51, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(ftdi_elan_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.51 := $store.i32($M.51, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(ftdi_elan_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.51 := $store.i64($M.51, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(ftdi_elan_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.51 := $store.ref($M.51, $add.ref($add.ref($add.ref($add.ref(ftdi_elan_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.51 := $store.ref($M.51, $add.ref($add.ref($add.ref($add.ref(ftdi_elan_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.51 := $store.ref($M.51, $add.ref($add.ref($add.ref($add.ref(ftdi_elan_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.51 := $store.ref($M.51, $add.ref($add.ref($add.ref($add.ref(ftdi_elan_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.51 := $store.ref($M.51, $add.ref($add.ref($add.ref($add.ref(ftdi_elan_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.51 := $store.ref($M.51, $add.ref($add.ref($add.ref($add.ref(ftdi_elan_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $0.ref);
    $M.51 := $store.i8($M.51, $add.ref($add.ref($add.ref($add.ref(ftdi_elan_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), 0);
    $M.51 := $store.i32($M.51, $add.ref($add.ref($add.ref($add.ref(ftdi_elan_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(36, 1)), 0);
    $M.51 := $store.ref($M.51, $add.ref($add.ref($add.ref($add.ref(ftdi_elan_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(40, 1)), $0.ref);
    $M.51 := $store.ref($M.51, $add.ref($add.ref($add.ref($add.ref(ftdi_elan_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(48, 1)), $0.ref);
    $M.51 := $store.ref($M.51, $add.ref($add.ref($add.ref($add.ref(ftdi_elan_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(56, 1)), $0.ref);
    $M.51 := $store.ref($M.51, $add.ref($add.ref($add.ref($add.ref(ftdi_elan_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(64, 1)), $0.ref);
    $M.51 := $store.ref($M.51, $add.ref($add.ref($add.ref($add.ref(ftdi_elan_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(72, 1)), $0.ref);
    $M.51 := $store.ref($M.51, $add.ref($add.ref($add.ref($add.ref(ftdi_elan_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(80, 1)), $0.ref);
    $M.51 := $store.ref($M.51, $add.ref($add.ref($add.ref($add.ref(ftdi_elan_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(88, 1)), $0.ref);
    $M.51 := $store.ref($M.51, $add.ref($add.ref($add.ref($add.ref(ftdi_elan_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(96, 1)), $0.ref);
    $M.51 := $store.ref($M.51, $add.ref($add.ref($add.ref($add.ref(ftdi_elan_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(104, 1)), $0.ref);
    $M.51 := $store.ref($M.51, $add.ref($add.ref($add.ref($add.ref(ftdi_elan_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(112, 1)), $0.ref);
    $M.51 := $store.i32($M.51, $add.ref($add.ref($add.ref(ftdi_elan_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(120, 1)), 0);
    $M.51 := $store.i8($M.51, $add.ref($add.ref(ftdi_elan_driver, $mul.ref(0, 304)), $mul.ref(296, 1)), 0);
    $M.0 := $store.ref($M.0, ftdi_elan_fops, __this_module);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ftdi_elan_fops, $mul.ref(0, 224)), $mul.ref(8, 1)), no_llseek);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ftdi_elan_fops, $mul.ref(0, 224)), $mul.ref(16, 1)), ftdi_elan_read);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ftdi_elan_fops, $mul.ref(0, 224)), $mul.ref(24, 1)), ftdi_elan_write);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ftdi_elan_fops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ftdi_elan_fops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ftdi_elan_fops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ftdi_elan_fops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ftdi_elan_fops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ftdi_elan_fops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ftdi_elan_fops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ftdi_elan_fops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ftdi_elan_fops, $mul.ref(0, 224)), $mul.ref(96, 1)), ftdi_elan_open);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ftdi_elan_fops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ftdi_elan_fops, $mul.ref(0, 224)), $mul.ref(112, 1)), ftdi_elan_release);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ftdi_elan_fops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ftdi_elan_fops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ftdi_elan_fops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ftdi_elan_fops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ftdi_elan_fops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ftdi_elan_fops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ftdi_elan_fops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ftdi_elan_fops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ftdi_elan_fops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ftdi_elan_fops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ftdi_elan_fops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ftdi_elan_fops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ftdi_elan_fops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.0 := $store.ref($M.0, ftdi_elan_jtag_class, .str.59);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ftdi_elan_jtag_class, $mul.ref(0, 32)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ftdi_elan_jtag_class, $mul.ref(0, 32)), $mul.ref(16, 1)), ftdi_elan_fops);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(ftdi_elan_jtag_class, $mul.ref(0, 32)), $mul.ref(24, 1)), 192);
    $M.0 := $store.ref($M.0, ftdi_static_list, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ftdi_static_list, $mul.ref(0, 16)), $mul.ref(8, 1)), $0.ref);
    $M.17 := $0.ref;
    $M.21 := 1;
    call {:si_unique_call 1604} {:cexpr "distrust_firmware"} boogie_si_record_i8(1);
    $M.18 := $0.ref;
    $M.60 := $store.i8($M.60, __kstrtab_usb_ftdi_elan_edset_flush, 117);
    $M.60 := $store.i8($M.60, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_flush, $mul.ref(0, 26)), $mul.ref(1, 1)), 115);
    $M.60 := $store.i8($M.60, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_flush, $mul.ref(0, 26)), $mul.ref(2, 1)), 98);
    $M.60 := $store.i8($M.60, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_flush, $mul.ref(0, 26)), $mul.ref(3, 1)), 95);
    $M.60 := $store.i8($M.60, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_flush, $mul.ref(0, 26)), $mul.ref(4, 1)), 102);
    $M.60 := $store.i8($M.60, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_flush, $mul.ref(0, 26)), $mul.ref(5, 1)), 116);
    $M.60 := $store.i8($M.60, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_flush, $mul.ref(0, 26)), $mul.ref(6, 1)), 100);
    $M.60 := $store.i8($M.60, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_flush, $mul.ref(0, 26)), $mul.ref(7, 1)), 105);
    $M.60 := $store.i8($M.60, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_flush, $mul.ref(0, 26)), $mul.ref(8, 1)), 95);
    $M.60 := $store.i8($M.60, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_flush, $mul.ref(0, 26)), $mul.ref(9, 1)), 101);
    $M.60 := $store.i8($M.60, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_flush, $mul.ref(0, 26)), $mul.ref(10, 1)), 108);
    $M.60 := $store.i8($M.60, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_flush, $mul.ref(0, 26)), $mul.ref(11, 1)), 97);
    $M.60 := $store.i8($M.60, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_flush, $mul.ref(0, 26)), $mul.ref(12, 1)), 110);
    $M.60 := $store.i8($M.60, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_flush, $mul.ref(0, 26)), $mul.ref(13, 1)), 95);
    $M.60 := $store.i8($M.60, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_flush, $mul.ref(0, 26)), $mul.ref(14, 1)), 101);
    $M.60 := $store.i8($M.60, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_flush, $mul.ref(0, 26)), $mul.ref(15, 1)), 100);
    $M.60 := $store.i8($M.60, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_flush, $mul.ref(0, 26)), $mul.ref(16, 1)), 115);
    $M.60 := $store.i8($M.60, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_flush, $mul.ref(0, 26)), $mul.ref(17, 1)), 101);
    $M.60 := $store.i8($M.60, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_flush, $mul.ref(0, 26)), $mul.ref(18, 1)), 116);
    $M.60 := $store.i8($M.60, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_flush, $mul.ref(0, 26)), $mul.ref(19, 1)), 95);
    $M.60 := $store.i8($M.60, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_flush, $mul.ref(0, 26)), $mul.ref(20, 1)), 102);
    $M.60 := $store.i8($M.60, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_flush, $mul.ref(0, 26)), $mul.ref(21, 1)), 108);
    $M.60 := $store.i8($M.60, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_flush, $mul.ref(0, 26)), $mul.ref(22, 1)), 117);
    $M.60 := $store.i8($M.60, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_flush, $mul.ref(0, 26)), $mul.ref(23, 1)), 115);
    $M.60 := $store.i8($M.60, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_flush, $mul.ref(0, 26)), $mul.ref(24, 1)), 104);
    $M.60 := $store.i8($M.60, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_flush, $mul.ref(0, 26)), $mul.ref(25, 1)), 0);
    $M.61 := $store.i8($M.61, __kstrtab_usb_ftdi_elan_edset_single, 117);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_single, $mul.ref(0, 27)), $mul.ref(1, 1)), 115);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_single, $mul.ref(0, 27)), $mul.ref(2, 1)), 98);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_single, $mul.ref(0, 27)), $mul.ref(3, 1)), 95);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_single, $mul.ref(0, 27)), $mul.ref(4, 1)), 102);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_single, $mul.ref(0, 27)), $mul.ref(5, 1)), 116);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_single, $mul.ref(0, 27)), $mul.ref(6, 1)), 100);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_single, $mul.ref(0, 27)), $mul.ref(7, 1)), 105);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_single, $mul.ref(0, 27)), $mul.ref(8, 1)), 95);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_single, $mul.ref(0, 27)), $mul.ref(9, 1)), 101);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_single, $mul.ref(0, 27)), $mul.ref(10, 1)), 108);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_single, $mul.ref(0, 27)), $mul.ref(11, 1)), 97);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_single, $mul.ref(0, 27)), $mul.ref(12, 1)), 110);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_single, $mul.ref(0, 27)), $mul.ref(13, 1)), 95);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_single, $mul.ref(0, 27)), $mul.ref(14, 1)), 101);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_single, $mul.ref(0, 27)), $mul.ref(15, 1)), 100);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_single, $mul.ref(0, 27)), $mul.ref(16, 1)), 115);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_single, $mul.ref(0, 27)), $mul.ref(17, 1)), 101);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_single, $mul.ref(0, 27)), $mul.ref(18, 1)), 116);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_single, $mul.ref(0, 27)), $mul.ref(19, 1)), 95);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_single, $mul.ref(0, 27)), $mul.ref(20, 1)), 115);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_single, $mul.ref(0, 27)), $mul.ref(21, 1)), 105);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_single, $mul.ref(0, 27)), $mul.ref(22, 1)), 110);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_single, $mul.ref(0, 27)), $mul.ref(23, 1)), 103);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_single, $mul.ref(0, 27)), $mul.ref(24, 1)), 108);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_single, $mul.ref(0, 27)), $mul.ref(25, 1)), 101);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_single, $mul.ref(0, 27)), $mul.ref(26, 1)), 0);
    $M.62 := $store.i8($M.62, __kstrtab_usb_ftdi_elan_edset_output, 117);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_output, $mul.ref(0, 27)), $mul.ref(1, 1)), 115);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_output, $mul.ref(0, 27)), $mul.ref(2, 1)), 98);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_output, $mul.ref(0, 27)), $mul.ref(3, 1)), 95);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_output, $mul.ref(0, 27)), $mul.ref(4, 1)), 102);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_output, $mul.ref(0, 27)), $mul.ref(5, 1)), 116);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_output, $mul.ref(0, 27)), $mul.ref(6, 1)), 100);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_output, $mul.ref(0, 27)), $mul.ref(7, 1)), 105);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_output, $mul.ref(0, 27)), $mul.ref(8, 1)), 95);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_output, $mul.ref(0, 27)), $mul.ref(9, 1)), 101);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_output, $mul.ref(0, 27)), $mul.ref(10, 1)), 108);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_output, $mul.ref(0, 27)), $mul.ref(11, 1)), 97);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_output, $mul.ref(0, 27)), $mul.ref(12, 1)), 110);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_output, $mul.ref(0, 27)), $mul.ref(13, 1)), 95);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_output, $mul.ref(0, 27)), $mul.ref(14, 1)), 101);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_output, $mul.ref(0, 27)), $mul.ref(15, 1)), 100);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_output, $mul.ref(0, 27)), $mul.ref(16, 1)), 115);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_output, $mul.ref(0, 27)), $mul.ref(17, 1)), 101);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_output, $mul.ref(0, 27)), $mul.ref(18, 1)), 116);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_output, $mul.ref(0, 27)), $mul.ref(19, 1)), 95);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_output, $mul.ref(0, 27)), $mul.ref(20, 1)), 111);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_output, $mul.ref(0, 27)), $mul.ref(21, 1)), 117);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_output, $mul.ref(0, 27)), $mul.ref(22, 1)), 116);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_output, $mul.ref(0, 27)), $mul.ref(23, 1)), 112);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_output, $mul.ref(0, 27)), $mul.ref(24, 1)), 117);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_output, $mul.ref(0, 27)), $mul.ref(25, 1)), 116);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_output, $mul.ref(0, 27)), $mul.ref(26, 1)), 0);
    $M.63 := $store.i8($M.63, __kstrtab_usb_ftdi_elan_edset_empty, 117);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_empty, $mul.ref(0, 26)), $mul.ref(1, 1)), 115);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_empty, $mul.ref(0, 26)), $mul.ref(2, 1)), 98);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_empty, $mul.ref(0, 26)), $mul.ref(3, 1)), 95);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_empty, $mul.ref(0, 26)), $mul.ref(4, 1)), 102);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_empty, $mul.ref(0, 26)), $mul.ref(5, 1)), 116);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_empty, $mul.ref(0, 26)), $mul.ref(6, 1)), 100);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_empty, $mul.ref(0, 26)), $mul.ref(7, 1)), 105);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_empty, $mul.ref(0, 26)), $mul.ref(8, 1)), 95);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_empty, $mul.ref(0, 26)), $mul.ref(9, 1)), 101);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_empty, $mul.ref(0, 26)), $mul.ref(10, 1)), 108);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_empty, $mul.ref(0, 26)), $mul.ref(11, 1)), 97);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_empty, $mul.ref(0, 26)), $mul.ref(12, 1)), 110);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_empty, $mul.ref(0, 26)), $mul.ref(13, 1)), 95);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_empty, $mul.ref(0, 26)), $mul.ref(14, 1)), 101);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_empty, $mul.ref(0, 26)), $mul.ref(15, 1)), 100);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_empty, $mul.ref(0, 26)), $mul.ref(16, 1)), 115);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_empty, $mul.ref(0, 26)), $mul.ref(17, 1)), 101);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_empty, $mul.ref(0, 26)), $mul.ref(18, 1)), 116);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_empty, $mul.ref(0, 26)), $mul.ref(19, 1)), 95);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_empty, $mul.ref(0, 26)), $mul.ref(20, 1)), 101);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_empty, $mul.ref(0, 26)), $mul.ref(21, 1)), 109);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_empty, $mul.ref(0, 26)), $mul.ref(22, 1)), 112);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_empty, $mul.ref(0, 26)), $mul.ref(23, 1)), 116);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_empty, $mul.ref(0, 26)), $mul.ref(24, 1)), 121);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_empty, $mul.ref(0, 26)), $mul.ref(25, 1)), 0);
    $M.64 := $store.i8($M.64, __kstrtab_usb_ftdi_elan_edset_input, 117);
    $M.64 := $store.i8($M.64, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_input, $mul.ref(0, 26)), $mul.ref(1, 1)), 115);
    $M.64 := $store.i8($M.64, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_input, $mul.ref(0, 26)), $mul.ref(2, 1)), 98);
    $M.64 := $store.i8($M.64, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_input, $mul.ref(0, 26)), $mul.ref(3, 1)), 95);
    $M.64 := $store.i8($M.64, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_input, $mul.ref(0, 26)), $mul.ref(4, 1)), 102);
    $M.64 := $store.i8($M.64, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_input, $mul.ref(0, 26)), $mul.ref(5, 1)), 116);
    $M.64 := $store.i8($M.64, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_input, $mul.ref(0, 26)), $mul.ref(6, 1)), 100);
    $M.64 := $store.i8($M.64, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_input, $mul.ref(0, 26)), $mul.ref(7, 1)), 105);
    $M.64 := $store.i8($M.64, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_input, $mul.ref(0, 26)), $mul.ref(8, 1)), 95);
    $M.64 := $store.i8($M.64, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_input, $mul.ref(0, 26)), $mul.ref(9, 1)), 101);
    $M.64 := $store.i8($M.64, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_input, $mul.ref(0, 26)), $mul.ref(10, 1)), 108);
    $M.64 := $store.i8($M.64, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_input, $mul.ref(0, 26)), $mul.ref(11, 1)), 97);
    $M.64 := $store.i8($M.64, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_input, $mul.ref(0, 26)), $mul.ref(12, 1)), 110);
    $M.64 := $store.i8($M.64, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_input, $mul.ref(0, 26)), $mul.ref(13, 1)), 95);
    $M.64 := $store.i8($M.64, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_input, $mul.ref(0, 26)), $mul.ref(14, 1)), 101);
    $M.64 := $store.i8($M.64, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_input, $mul.ref(0, 26)), $mul.ref(15, 1)), 100);
    $M.64 := $store.i8($M.64, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_input, $mul.ref(0, 26)), $mul.ref(16, 1)), 115);
    $M.64 := $store.i8($M.64, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_input, $mul.ref(0, 26)), $mul.ref(17, 1)), 101);
    $M.64 := $store.i8($M.64, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_input, $mul.ref(0, 26)), $mul.ref(18, 1)), 116);
    $M.64 := $store.i8($M.64, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_input, $mul.ref(0, 26)), $mul.ref(19, 1)), 95);
    $M.64 := $store.i8($M.64, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_input, $mul.ref(0, 26)), $mul.ref(20, 1)), 105);
    $M.64 := $store.i8($M.64, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_input, $mul.ref(0, 26)), $mul.ref(21, 1)), 110);
    $M.64 := $store.i8($M.64, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_input, $mul.ref(0, 26)), $mul.ref(22, 1)), 112);
    $M.64 := $store.i8($M.64, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_input, $mul.ref(0, 26)), $mul.ref(23, 1)), 117);
    $M.64 := $store.i8($M.64, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_input, $mul.ref(0, 26)), $mul.ref(24, 1)), 116);
    $M.64 := $store.i8($M.64, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_input, $mul.ref(0, 26)), $mul.ref(25, 1)), 0);
    $M.65 := $store.i8($M.65, __kstrtab_usb_ftdi_elan_edset_setup, 117);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_setup, $mul.ref(0, 26)), $mul.ref(1, 1)), 115);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_setup, $mul.ref(0, 26)), $mul.ref(2, 1)), 98);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_setup, $mul.ref(0, 26)), $mul.ref(3, 1)), 95);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_setup, $mul.ref(0, 26)), $mul.ref(4, 1)), 102);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_setup, $mul.ref(0, 26)), $mul.ref(5, 1)), 116);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_setup, $mul.ref(0, 26)), $mul.ref(6, 1)), 100);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_setup, $mul.ref(0, 26)), $mul.ref(7, 1)), 105);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_setup, $mul.ref(0, 26)), $mul.ref(8, 1)), 95);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_setup, $mul.ref(0, 26)), $mul.ref(9, 1)), 101);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_setup, $mul.ref(0, 26)), $mul.ref(10, 1)), 108);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_setup, $mul.ref(0, 26)), $mul.ref(11, 1)), 97);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_setup, $mul.ref(0, 26)), $mul.ref(12, 1)), 110);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_setup, $mul.ref(0, 26)), $mul.ref(13, 1)), 95);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_setup, $mul.ref(0, 26)), $mul.ref(14, 1)), 101);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_setup, $mul.ref(0, 26)), $mul.ref(15, 1)), 100);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_setup, $mul.ref(0, 26)), $mul.ref(16, 1)), 115);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_setup, $mul.ref(0, 26)), $mul.ref(17, 1)), 101);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_setup, $mul.ref(0, 26)), $mul.ref(18, 1)), 116);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_setup, $mul.ref(0, 26)), $mul.ref(19, 1)), 95);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_setup, $mul.ref(0, 26)), $mul.ref(20, 1)), 115);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_setup, $mul.ref(0, 26)), $mul.ref(21, 1)), 101);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_setup, $mul.ref(0, 26)), $mul.ref(22, 1)), 116);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_setup, $mul.ref(0, 26)), $mul.ref(23, 1)), 117);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_setup, $mul.ref(0, 26)), $mul.ref(24, 1)), 112);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_edset_setup, $mul.ref(0, 26)), $mul.ref(25, 1)), 0);
    $M.66 := $store.i8($M.66, __kstrtab_usb_ftdi_elan_read_pcimem, 117);
    $M.66 := $store.i8($M.66, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_read_pcimem, $mul.ref(0, 26)), $mul.ref(1, 1)), 115);
    $M.66 := $store.i8($M.66, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_read_pcimem, $mul.ref(0, 26)), $mul.ref(2, 1)), 98);
    $M.66 := $store.i8($M.66, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_read_pcimem, $mul.ref(0, 26)), $mul.ref(3, 1)), 95);
    $M.66 := $store.i8($M.66, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_read_pcimem, $mul.ref(0, 26)), $mul.ref(4, 1)), 102);
    $M.66 := $store.i8($M.66, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_read_pcimem, $mul.ref(0, 26)), $mul.ref(5, 1)), 116);
    $M.66 := $store.i8($M.66, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_read_pcimem, $mul.ref(0, 26)), $mul.ref(6, 1)), 100);
    $M.66 := $store.i8($M.66, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_read_pcimem, $mul.ref(0, 26)), $mul.ref(7, 1)), 105);
    $M.66 := $store.i8($M.66, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_read_pcimem, $mul.ref(0, 26)), $mul.ref(8, 1)), 95);
    $M.66 := $store.i8($M.66, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_read_pcimem, $mul.ref(0, 26)), $mul.ref(9, 1)), 101);
    $M.66 := $store.i8($M.66, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_read_pcimem, $mul.ref(0, 26)), $mul.ref(10, 1)), 108);
    $M.66 := $store.i8($M.66, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_read_pcimem, $mul.ref(0, 26)), $mul.ref(11, 1)), 97);
    $M.66 := $store.i8($M.66, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_read_pcimem, $mul.ref(0, 26)), $mul.ref(12, 1)), 110);
    $M.66 := $store.i8($M.66, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_read_pcimem, $mul.ref(0, 26)), $mul.ref(13, 1)), 95);
    $M.66 := $store.i8($M.66, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_read_pcimem, $mul.ref(0, 26)), $mul.ref(14, 1)), 114);
    $M.66 := $store.i8($M.66, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_read_pcimem, $mul.ref(0, 26)), $mul.ref(15, 1)), 101);
    $M.66 := $store.i8($M.66, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_read_pcimem, $mul.ref(0, 26)), $mul.ref(16, 1)), 97);
    $M.66 := $store.i8($M.66, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_read_pcimem, $mul.ref(0, 26)), $mul.ref(17, 1)), 100);
    $M.66 := $store.i8($M.66, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_read_pcimem, $mul.ref(0, 26)), $mul.ref(18, 1)), 95);
    $M.66 := $store.i8($M.66, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_read_pcimem, $mul.ref(0, 26)), $mul.ref(19, 1)), 112);
    $M.66 := $store.i8($M.66, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_read_pcimem, $mul.ref(0, 26)), $mul.ref(20, 1)), 99);
    $M.66 := $store.i8($M.66, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_read_pcimem, $mul.ref(0, 26)), $mul.ref(21, 1)), 105);
    $M.66 := $store.i8($M.66, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_read_pcimem, $mul.ref(0, 26)), $mul.ref(22, 1)), 109);
    $M.66 := $store.i8($M.66, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_read_pcimem, $mul.ref(0, 26)), $mul.ref(23, 1)), 101);
    $M.66 := $store.i8($M.66, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_read_pcimem, $mul.ref(0, 26)), $mul.ref(24, 1)), 109);
    $M.66 := $store.i8($M.66, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_read_pcimem, $mul.ref(0, 26)), $mul.ref(25, 1)), 0);
    $M.67 := $store.i8($M.67, __kstrtab_usb_ftdi_elan_write_pcimem, 117);
    $M.67 := $store.i8($M.67, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_write_pcimem, $mul.ref(0, 27)), $mul.ref(1, 1)), 115);
    $M.67 := $store.i8($M.67, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_write_pcimem, $mul.ref(0, 27)), $mul.ref(2, 1)), 98);
    $M.67 := $store.i8($M.67, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_write_pcimem, $mul.ref(0, 27)), $mul.ref(3, 1)), 95);
    $M.67 := $store.i8($M.67, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_write_pcimem, $mul.ref(0, 27)), $mul.ref(4, 1)), 102);
    $M.67 := $store.i8($M.67, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_write_pcimem, $mul.ref(0, 27)), $mul.ref(5, 1)), 116);
    $M.67 := $store.i8($M.67, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_write_pcimem, $mul.ref(0, 27)), $mul.ref(6, 1)), 100);
    $M.67 := $store.i8($M.67, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_write_pcimem, $mul.ref(0, 27)), $mul.ref(7, 1)), 105);
    $M.67 := $store.i8($M.67, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_write_pcimem, $mul.ref(0, 27)), $mul.ref(8, 1)), 95);
    $M.67 := $store.i8($M.67, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_write_pcimem, $mul.ref(0, 27)), $mul.ref(9, 1)), 101);
    $M.67 := $store.i8($M.67, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_write_pcimem, $mul.ref(0, 27)), $mul.ref(10, 1)), 108);
    $M.67 := $store.i8($M.67, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_write_pcimem, $mul.ref(0, 27)), $mul.ref(11, 1)), 97);
    $M.67 := $store.i8($M.67, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_write_pcimem, $mul.ref(0, 27)), $mul.ref(12, 1)), 110);
    $M.67 := $store.i8($M.67, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_write_pcimem, $mul.ref(0, 27)), $mul.ref(13, 1)), 95);
    $M.67 := $store.i8($M.67, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_write_pcimem, $mul.ref(0, 27)), $mul.ref(14, 1)), 119);
    $M.67 := $store.i8($M.67, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_write_pcimem, $mul.ref(0, 27)), $mul.ref(15, 1)), 114);
    $M.67 := $store.i8($M.67, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_write_pcimem, $mul.ref(0, 27)), $mul.ref(16, 1)), 105);
    $M.67 := $store.i8($M.67, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_write_pcimem, $mul.ref(0, 27)), $mul.ref(17, 1)), 116);
    $M.67 := $store.i8($M.67, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_write_pcimem, $mul.ref(0, 27)), $mul.ref(18, 1)), 101);
    $M.67 := $store.i8($M.67, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_write_pcimem, $mul.ref(0, 27)), $mul.ref(19, 1)), 95);
    $M.67 := $store.i8($M.67, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_write_pcimem, $mul.ref(0, 27)), $mul.ref(20, 1)), 112);
    $M.67 := $store.i8($M.67, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_write_pcimem, $mul.ref(0, 27)), $mul.ref(21, 1)), 99);
    $M.67 := $store.i8($M.67, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_write_pcimem, $mul.ref(0, 27)), $mul.ref(22, 1)), 105);
    $M.67 := $store.i8($M.67, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_write_pcimem, $mul.ref(0, 27)), $mul.ref(23, 1)), 109);
    $M.67 := $store.i8($M.67, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_write_pcimem, $mul.ref(0, 27)), $mul.ref(24, 1)), 101);
    $M.67 := $store.i8($M.67, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_write_pcimem, $mul.ref(0, 27)), $mul.ref(25, 1)), 109);
    $M.67 := $store.i8($M.67, $add.ref($add.ref(__kstrtab_usb_ftdi_elan_write_pcimem, $mul.ref(0, 27)), $mul.ref(26, 1)), 0);
    $M.5 := $0.ref;
    $M.1 := 0;
    call {:si_unique_call 1605} {:cexpr "ftdi_instances"} boogie_si_record_i32(0);
    $M.0 := $store.i32($M.0, ftdi_module_lock, 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(ftdi_module_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(ftdi_module_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(ftdi_module_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(ftdi_module_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(ftdi_module_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(ftdi_module_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(ftdi_module_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(ftdi_module_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(ftdi_module_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(ftdi_module_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ftdi_module_lock, $mul.ref(0, 160)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ftdi_module_lock, $mul.ref(0, 160)), $mul.ref(80, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ftdi_module_lock, $mul.ref(0, 160)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ftdi_module_lock, $mul.ref(0, 160)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ftdi_module_lock, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(ftdi_module_lock, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(ftdi_module_lock, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ftdi_module_lock, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(ftdi_module_lock, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(ftdi_module_lock, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(40, 1)), 0);
    $M.50 := 0;
    call {:si_unique_call 1606} {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
    $M.49 := 0;
    call {:si_unique_call 1607} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.47 := 0;
    call {:si_unique_call 1608} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.68 := $store.i16($M.68, __mod_usb__ftdi_elan_table_device_table, 0);
    $M.69 := $store.i16($M.69, $add.ref($add.ref($add.ref(__mod_usb__ftdi_elan_table_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(2, 1)), 0);
    $M.70 := $store.i16($M.70, $add.ref($add.ref($add.ref(__mod_usb__ftdi_elan_table_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(4, 1)), 0);
    $M.71 := $store.i16($M.71, $add.ref($add.ref($add.ref(__mod_usb__ftdi_elan_table_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(6, 1)), 0);
    $M.72 := $store.i16($M.72, $add.ref($add.ref($add.ref(__mod_usb__ftdi_elan_table_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref(__mod_usb__ftdi_elan_table_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(10, 1)), 0);
    $M.74 := $store.i8($M.74, $add.ref($add.ref($add.ref(__mod_usb__ftdi_elan_table_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(11, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(__mod_usb__ftdi_elan_table_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(12, 1)), 0);
    $M.76 := $store.i8($M.76, $add.ref($add.ref($add.ref(__mod_usb__ftdi_elan_table_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(13, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(__mod_usb__ftdi_elan_table_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(14, 1)), 0);
    $M.78 := $store.i8($M.78, $add.ref($add.ref($add.ref(__mod_usb__ftdi_elan_table_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(15, 1)), 0);
    $M.79 := $store.i8($M.79, $add.ref($add.ref($add.ref(__mod_usb__ftdi_elan_table_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.80 := $store.i64($M.80, $add.ref($add.ref($add.ref(__mod_usb__ftdi_elan_table_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.68 := $store.i16($M.68, $add.ref($add.ref($add.ref(__mod_usb__ftdi_elan_table_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), 0);
    $M.69 := $store.i16($M.69, $add.ref($add.ref($add.ref(__mod_usb__ftdi_elan_table_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(2, 1)), 0);
    $M.70 := $store.i16($M.70, $add.ref($add.ref($add.ref(__mod_usb__ftdi_elan_table_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(4, 1)), 0);
    $M.71 := $store.i16($M.71, $add.ref($add.ref($add.ref(__mod_usb__ftdi_elan_table_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(6, 1)), 0);
    $M.72 := $store.i16($M.72, $add.ref($add.ref($add.ref(__mod_usb__ftdi_elan_table_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(8, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref(__mod_usb__ftdi_elan_table_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(10, 1)), 0);
    $M.74 := $store.i8($M.74, $add.ref($add.ref($add.ref(__mod_usb__ftdi_elan_table_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(11, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(__mod_usb__ftdi_elan_table_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(12, 1)), 0);
    $M.76 := $store.i8($M.76, $add.ref($add.ref($add.ref(__mod_usb__ftdi_elan_table_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(13, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(__mod_usb__ftdi_elan_table_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(14, 1)), 0);
    $M.78 := $store.i8($M.78, $add.ref($add.ref($add.ref(__mod_usb__ftdi_elan_table_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(15, 1)), 0);
    $M.79 := $store.i8($M.79, $add.ref($add.ref($add.ref(__mod_usb__ftdi_elan_table_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.80 := $store.i64($M.80, $add.ref($add.ref($add.ref(__mod_usb__ftdi_elan_table_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.33 := 0;
    call {:si_unique_call 1609} {:cexpr "ldv_work_2_1"} boogie_si_record_i32(0);
    $M.40 := 0;
    call {:si_unique_call 1610} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    $M.35 := 0;
    call {:si_unique_call 1611} {:cexpr "ldv_work_2_3"} boogie_si_record_i32(0);
    $M.41 := 0;
    call {:si_unique_call 1612} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.6 := 0;
    call {:si_unique_call 1613} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(0);
    $M.30 := 0;
    call {:si_unique_call 1614} {:cexpr "ldv_work_3_3"} boogie_si_record_i32(0);
    $M.42 := 0;
    call {:si_unique_call 1615} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.34 := 0;
    call {:si_unique_call 1616} {:cexpr "ldv_work_2_2"} boogie_si_record_i32(0);
    $M.44 := 0;
    call {:si_unique_call 1617} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    $M.11 := $0.ref;
    $M.39 := $0.ref;
    $M.38 := $0.ref;
    $M.27 := 0;
    call {:si_unique_call 1618} {:cexpr "ldv_work_3_0"} boogie_si_record_i32(0);
    $M.10 := 0;
    call {:si_unique_call 1619} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(0);
    $M.31 := $0.ref;
    $M.29 := 0;
    call {:si_unique_call 1620} {:cexpr "ldv_work_3_2"} boogie_si_record_i32(0);
    $M.48 := 0;
    call {:si_unique_call 1621} {:cexpr "usb_counter"} boogie_si_record_i32(0);
    $M.32 := 0;
    call {:si_unique_call 1622} {:cexpr "ldv_work_2_0"} boogie_si_record_i32(0);
    $M.8 := 0;
    call {:si_unique_call 1623} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(0);
    $M.45 := 0;
    call {:si_unique_call 1624} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.28 := 0;
    call {:si_unique_call 1625} {:cexpr "ldv_work_3_1"} boogie_si_record_i32(0);
    $M.46 := 0;
    call {:si_unique_call 1626} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    $M.43 := 0;
    call {:si_unique_call 1627} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.12 := 0;
    call {:si_unique_call 1628} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(0);
    $M.13 := $0.ref;
    $M.37 := $0.ref;
    $M.36 := $0.ref;
    $M.9 := $0.ref;
    $M.7 := $0.ref;
    $M.103 := $store.i8($M.103, .str.4, 32);
    $M.103 := $store.i8($M.103, $add.ref($add.ref(.str.4, $mul.ref(0, 6)), $mul.ref(1, 1)), 37);
    $M.103 := $store.i8($M.103, $add.ref($add.ref(.str.4, $mul.ref(0, 6)), $mul.ref(2, 1)), 48);
    $M.103 := $store.i8($M.103, $add.ref($add.ref(.str.4, $mul.ref(0, 6)), $mul.ref(3, 1)), 50);
    $M.103 := $store.i8($M.103, $add.ref($add.ref(.str.4, $mul.ref(0, 6)), $mul.ref(4, 1)), 88);
    $M.103 := $store.i8($M.103, $add.ref($add.ref(.str.4, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.104 := $store.i8($M.104, .str.5, 32);
    $M.104 := $store.i8($M.104, $add.ref($add.ref(.str.5, $mul.ref(0, 4)), $mul.ref(1, 1)), 46);
    $M.104 := $store.i8($M.104, $add.ref($add.ref(.str.5, $mul.ref(0, 4)), $mul.ref(2, 1)), 46);
    $M.104 := $store.i8($M.104, $add.ref($add.ref(.str.5, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.105 := $store.i8($M.105, .str.34, 117);
    $M.105 := $store.i8($M.105, $add.ref($add.ref(.str.34, $mul.ref(0, 9)), $mul.ref(1, 1)), 49);
    $M.105 := $store.i8($M.105, $add.ref($add.ref(.str.34, $mul.ref(0, 9)), $mul.ref(2, 1)), 51);
    $M.105 := $store.i8($M.105, $add.ref($add.ref(.str.34, $mul.ref(0, 9)), $mul.ref(3, 1)), 50);
    $M.105 := $store.i8($M.105, $add.ref($add.ref(.str.34, $mul.ref(0, 9)), $mul.ref(4, 1)), 95);
    $M.105 := $store.i8($M.105, $add.ref($add.ref(.str.34, $mul.ref(0, 9)), $mul.ref(5, 1)), 104);
    $M.105 := $store.i8($M.105, $add.ref($add.ref(.str.34, $mul.ref(0, 9)), $mul.ref(6, 1)), 99);
    $M.105 := $store.i8($M.105, $add.ref($add.ref(.str.34, $mul.ref(0, 9)), $mul.ref(7, 1)), 100);
    $M.105 := $store.i8($M.105, $add.ref($add.ref(.str.34, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    call {:si_unique_call 1629} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 497195);

procedure devirtbounce(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.16, $M.19, $M.20, $M.25, $M.23, $M.24, $M.4, $M.3, $M.6, $M.8, $M.10, $M.12, $M.22, assertsPassed, $CurrAddr, $M.7, $M.9, $M.11, $M.13;



implementation devirtbounce(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i15 := $eq.ref(ftdi_elan_respond_work, $p0);
    assume {:branchcond $i15} true;
    goto $bb9, $bb17;

  $bb17:
    assume !($i15 == 1);
    $i14 := $eq.ref(ftdi_elan_command_work, $p0);
    assume true;
    goto $bb8, $bb16;

  $bb16:
    assume !($i14 == 1);
    $i13 := $eq.ref(ftdi_release_platform_dev, $p0);
    assume true;
    goto $bb7, $bb15;

  $bb15:
    assume !($i13 == 1);
    $i12 := $eq.ref(ftdi_elan_status_work, $p0);
    assume true;
    goto $bb6, $bb14;

  $bb14:
    assume !($i12 == 1);
    $i11 := $eq.ref(ftdi_elan_disconnect, $p0);
    assume true;
    goto $bb5, $bb13;

  $bb13:
    assume !($i11 == 1);
    $i10 := $eq.ref(ftdi_elan_write_bulk_callback, $p0);
    assume true;
    goto $bb4, $bb12;

  $bb12:
    assume !($i10 == 1);
    $i9 := $eq.ref(ftdi_elan_delete, $p0);
    assume true;
    goto $bb3, $bb11;

  $bb11:
    assume !($i9 == 1);
    $i8 := $eq.ref(ftdi_elan_gone_away, $p0);
    assume {:branchcond $i8} true;
    goto $bb2, $bb10;

  $bb10:
    assume !($i8 == 1);
    assume false;
    return;

  $bb2:
    assume $i8 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1630} ftdi_elan_gone_away($p1);
    goto SeqInstr_919, SeqInstr_920;

  SeqInstr_920:
    assume assertsPassed;
    goto SeqInstr_921;

  SeqInstr_921:
    return;

  SeqInstr_919:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i9 == 1;
    call {:si_unique_call 1631} ftdi_elan_delete(arg);
    goto SeqInstr_922, SeqInstr_923;

  SeqInstr_923:
    assume assertsPassed;
    goto SeqInstr_924;

  SeqInstr_924:
    return;

  SeqInstr_922:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i10 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1632} ftdi_elan_write_bulk_callback($p2);
    return;

  $bb5:
    assume $i11 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1633} ftdi_elan_disconnect($p3);
    goto SeqInstr_925, SeqInstr_926;

  SeqInstr_926:
    assume assertsPassed;
    goto SeqInstr_927;

  SeqInstr_927:
    return;

  SeqInstr_925:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i12 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1634} ftdi_elan_status_work($p4);
    goto SeqInstr_928, SeqInstr_929;

  SeqInstr_929:
    assume assertsPassed;
    goto SeqInstr_930;

  SeqInstr_930:
    return;

  SeqInstr_928:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i13 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1635} ftdi_release_platform_dev($p5);
    return;

  $bb8:
    assume $i14 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1636} ftdi_elan_command_work($p6);
    goto SeqInstr_931, SeqInstr_932;

  SeqInstr_932:
    assume assertsPassed;
    goto SeqInstr_933;

  SeqInstr_933:
    return;

  SeqInstr_931:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i15 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1637} ftdi_elan_respond_work($p7);
    goto SeqInstr_934, SeqInstr_935;

  SeqInstr_935:
    assume assertsPassed;
    goto SeqInstr_936;

  SeqInstr_936:
    return;

  SeqInstr_934:
    assume !assertsPassed;
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 498227);

procedure devirtbounce.1(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: ref);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 499259);

procedure devirtbounce.2(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 1638} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 500291);

procedure devirtbounce.3(funcPtr: ref, arg: ref, arg1: ref, arg2: ref, arg3: i32, arg4: i32, arg5: i32, arg6: i32, arg7: i32, arg8: i32, arg9: i32, arg10: i32, arg11: i32);
  free requires assertsPassed;



implementation devirtbounce.3(funcPtr: ref, arg: ref, arg1: ref, arg2: ref, arg3: i32, arg4: i32, arg5: i32, arg6: i32, arg7: i32, arg8: i32, arg9: i32, arg10: i32, arg11: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.58, $M.4, $M.54, $M.53, $M.52, $M.3, $M.59, $M.51, $M.0, $M.17, $M.21, $M.18, $M.60, $M.61, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.5, $M.1, $M.50, $M.49, $M.47, $M.68, $M.69, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $M.78, $M.79, $M.80, $M.33, $M.40, $M.35, $M.41, $M.6, $M.30, $M.42, $M.34, $M.44, $M.11, $M.39, $M.38, $M.27, $M.10, $M.31, $M.29, $M.48, $M.32, $M.8, $M.45, $M.28, $M.46, $M.43, $M.12, $M.13, $M.37, $M.36, $M.9, $M.7, $M.103, $M.104, $M.105, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 1639} __SMACK_static_init();
    call {:si_unique_call 1640} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.26, $M.40, $M.6, $M.8, $M.10, $M.12, $M.41, $M.42, $M.43, $M.27, $M.28, $M.29, $M.30, $M.44, $M.32, $M.33, $M.34, $M.35, $M.45, $M.46, $M.1, $M.0, $M.47, $M.49, $M.37, $M.38, $M.15, $M.16, $M.50, $M.58, $M.4, $M.54, $M.53, $M.52, $M.3, $M.59, $M.51, $M.17, $M.21, $M.18, $M.60, $M.61, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.5, $M.68, $M.69, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $M.78, $M.79, $M.80, $M.11, $M.39, $M.31, $M.48, $M.13, $M.36, $M.9, $M.7, $M.103, $M.104, $M.105, $CurrAddr, $M.19, $M.20, $M.23, $M.24, $M.25, $M.22;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation ftdi_elan_write_pcimem_loop_$bb4(in_$p0: ref, in_$p6: ref, in_$p10: ref, in_$p11: ref, in_$i12: i32, in_$p13: ref, in_$i14: i32, in_$i15: i32, in_$i16: i1, in_$p41: ref, in_$i42: i32, in_$i43: i1) returns (out_$p10: ref, out_$p11: ref, out_$i12: i32, out_$p13: ref, out_$i14: i32, out_$i15: i32, out_$i16: i1, out_$p41: ref, out_$i42: i32, out_$i43: i1)
{

  entry:
    out_$p10, out_$p11, out_$i12, out_$p13, out_$i14, out_$i15, out_$i16, out_$p41, out_$i42, out_$i43 := in_$p10, in_$p11, in_$i12, in_$p13, in_$i14, in_$i15, in_$i16, in_$p41, in_$i42, in_$i43;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(16, 1));
    goto corral_source_split_144;

  $bb9:
    assume {:verifier.code 0} true;
    assume !(out_$i43 == 1);
    goto $bb9_dummy;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    out_$i43 := $sgt.i32(out_$i42, 0);
    goto corral_source_split_198;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i32($M.0, in_$p6);
    goto corral_source_split_197;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} msleep(100);
    goto corral_source_split_196;

  SeqInstr_42:
    goto corral_source_split_195;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} ldv_mutex_unlock_55(out_$p41);
    goto SeqInstr_41;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(16, 1));
    goto corral_source_split_194;

  $bb8:
    assume !(out_$i16 == 1);
    goto corral_source_split_193;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    out_$i16 := $sle.i32(out_$i15, 31);
    goto corral_source_split_151;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    out_$i15 := $sub.i32(out_$i12, out_$i14);
    call {:si_unique_call 44} {:cexpr "command_size"} boogie_si_record_i32(out_$i15);
    goto corral_source_split_150;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    out_$i14 := $load.i32($M.0, out_$p13);
    goto corral_source_split_149;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(180, 1));
    goto corral_source_split_148;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    out_$i12 := $load.i32($M.0, out_$p11);
    goto corral_source_split_147;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(176, 1));
    goto corral_source_split_146;

  SeqInstr_36:
    goto corral_source_split_145;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} ldv_mutex_lock_53(out_$p10);
    goto SeqInstr_35;

  $bb9_dummy:
    call {:si_unique_call 1} out_$p10, out_$p11, out_$i12, out_$p13, out_$i14, out_$i15, out_$i16, out_$p41, out_$i42, out_$i43 := ftdi_elan_write_pcimem_loop_$bb4(in_$p0, in_$p6, out_$p10, out_$p11, out_$i12, out_$p13, out_$i14, out_$i15, out_$i16, out_$p41, out_$i42, out_$i43);
    return;

  exit:
    return;
}



procedure ftdi_elan_write_pcimem_loop_$bb4(in_$p0: ref, in_$p6: ref, in_$p10: ref, in_$p11: ref, in_$i12: i32, in_$p13: ref, in_$i14: i32, in_$i15: i32, in_$i16: i1, in_$p41: ref, in_$i42: i32, in_$i43: i1) returns (out_$p10: ref, out_$p11: ref, out_$i12: i32, out_$p13: ref, out_$i14: i32, out_$i15: i32, out_$i16: i1, out_$p41: ref, out_$i42: i32, out_$i43: i1);
  modifies $M.4, assertsPassed;



implementation ftdi_elan_read_pcimem_loop_$bb4(in_$p0: ref, in_$p7: ref, in_$p11: ref, in_$p12: ref, in_$i13: i32, in_$p14: ref, in_$i15: i32, in_$i16: i32, in_$p17: ref, in_$i18: i32, in_$p19: ref, in_$i20: i32, in_$i21: i32, in_$i22: i1, in_$i23: i1, in_$p64: ref, in_$i65: i32, in_$i66: i1) returns (out_$p11: ref, out_$p12: ref, out_$i13: i32, out_$p14: ref, out_$i15: i32, out_$i16: i32, out_$p17: ref, out_$i18: i32, out_$p19: ref, out_$i20: i32, out_$i21: i32, out_$i22: i1, out_$i23: i1, out_$p64: ref, out_$i65: i32, out_$i66: i1)
{

  entry:
    out_$p11, out_$p12, out_$i13, out_$p14, out_$i15, out_$i16, out_$p17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i23, out_$p64, out_$i65, out_$i66 := in_$p11, in_$p12, in_$i13, in_$p14, in_$i15, in_$i16, in_$p17, in_$i18, in_$p19, in_$i20, in_$i21, in_$i22, in_$i23, in_$p64, in_$i65, in_$i66;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(16, 1));
    goto corral_source_split_344;

  $bb12:
    assume {:verifier.code 0} true;
    assume !(out_$i66 == 1);
    goto $bb12_dummy;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    out_$i66 := $sgt.i32(out_$i65, 0);
    goto corral_source_split_369;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    out_$i65 := $load.i32($M.0, in_$p7);
    goto corral_source_split_368;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 107} msleep(100);
    goto corral_source_split_367;

  SeqInstr_63:
    goto corral_source_split_366;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 106} ldv_mutex_unlock_64(out_$p64);
    goto SeqInstr_62;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(16, 1));
    goto corral_source_split_365;

  $bb8:
    assume {:verifier.code 0} true;
    assume !(out_$i22 == 1);
    goto $bb9;

  $bb11:
    assume {:verifier.code 0} true;
    assume !(out_$i23 == 1);
    goto $bb9;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    out_$i23 := $sle.i32(out_$i21, 31);
    goto corral_source_split_363;

  $bb7:
    assume out_$i22 == 1;
    goto corral_source_split_362;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    out_$i22 := $sle.i32(out_$i16, 31);
    goto corral_source_split_356;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    out_$i21 := $sub.i32(out_$i18, out_$i20);
    call {:si_unique_call 105} {:cexpr "respond_size"} boogie_si_record_i32(out_$i21);
    goto corral_source_split_355;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i32($M.0, out_$p19);
    goto corral_source_split_354;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(956, 1));
    goto corral_source_split_353;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    out_$i18 := $load.i32($M.0, out_$p17);
    goto corral_source_split_352;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(952, 1));
    goto corral_source_split_351;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    out_$i16 := $sub.i32(out_$i13, out_$i15);
    call {:si_unique_call 104} {:cexpr "command_size"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_350;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    out_$i15 := $load.i32($M.0, out_$p14);
    goto corral_source_split_349;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(180, 1));
    goto corral_source_split_348;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    out_$i13 := $load.i32($M.0, out_$p12);
    goto corral_source_split_347;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(176, 1));
    goto corral_source_split_346;

  SeqInstr_60:
    goto corral_source_split_345;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 103} ldv_mutex_lock_62(out_$p11);
    goto SeqInstr_59;

  $bb12_dummy:
    call {:si_unique_call 1} out_$p11, out_$p12, out_$i13, out_$p14, out_$i15, out_$i16, out_$p17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i23, out_$p64, out_$i65, out_$i66 := ftdi_elan_read_pcimem_loop_$bb4(in_$p0, in_$p7, out_$p11, out_$p12, out_$i13, out_$p14, out_$i15, out_$i16, out_$p17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i23, out_$p64, out_$i65, out_$i66);
    return;

  exit:
    return;
}



procedure ftdi_elan_read_pcimem_loop_$bb4(in_$p0: ref, in_$p7: ref, in_$p11: ref, in_$p12: ref, in_$i13: i32, in_$p14: ref, in_$i15: i32, in_$i16: i32, in_$p17: ref, in_$i18: i32, in_$p19: ref, in_$i20: i32, in_$i21: i32, in_$i22: i1, in_$i23: i1, in_$p64: ref, in_$i65: i32, in_$i66: i1) returns (out_$p11: ref, out_$p12: ref, out_$i13: i32, out_$p14: ref, out_$i15: i32, out_$i16: i32, out_$p17: ref, out_$i18: i32, out_$p19: ref, out_$i20: i32, out_$i21: i32, out_$i22: i1, out_$i23: i1, out_$p64: ref, out_$i65: i32, out_$i66: i1);
  modifies $M.4, assertsPassed;



implementation ftdi_elan_read_loop_$bb28(in_$p5: ref, in_$p9: ref, in_$i15: i32, in_$i64: i1, in_$i67: i32, in_$i72: i32, in_$i71: i32, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$i77: i8, in_$i78: i32, in_$i79: i32, in_$p80: ref, in_$p81: ref, in_$i82: i32, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$i86: i64, in_$i87: i32, in_$i88: i32, in_$i89: i32, in_$i90: i1, in_$i91: i32, in_$i92: i32, in_$i100: i1, in_$i103: i32, in_$i104: i1, in_$i105: i32, in_$i106: i32, in_$i101: i32, in_$i102: i32, in_$i73: i32) returns (out_$i72: i32, out_$i71: i32, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$i77: i8, out_$i78: i32, out_$i79: i32, out_$p80: ref, out_$p81: ref, out_$i82: i32, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$i86: i64, out_$i87: i32, out_$i88: i32, out_$i89: i32, out_$i90: i1, out_$i91: i32, out_$i92: i32, out_$i100: i1, out_$i103: i32, out_$i104: i1, out_$i105: i32, out_$i106: i32, out_$i101: i32, out_$i102: i32, out_$i73: i32)
{

  entry:
    out_$i72, out_$i71, out_$p74, out_$p75, out_$p76, out_$i77, out_$i78, out_$i79, out_$p80, out_$p81, out_$i82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i100, out_$i103, out_$i104, out_$i105, out_$i106, out_$i101, out_$i102, out_$i73 := in_$i72, in_$i71, in_$p74, in_$p75, in_$p76, in_$i77, in_$i78, in_$i79, in_$p80, in_$p81, in_$i82, in_$p83, in_$p84, in_$p85, in_$i86, in_$i87, in_$i88, in_$i89, in_$i90, in_$i91, in_$i92, in_$i100, in_$i103, in_$i104, in_$i105, in_$i106, in_$i101, in_$i102, in_$i73;
    goto $bb28, exit;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_550;

  $bb30:
    assume in_$i64 == 1;
    assume {:verifier.code 0} true;
    out_$i71 := out_$i72;
    goto $bb30_dummy;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    out_$i73 := in_$i15;
    assume true;
    goto $bb30;

  $bb29:
    assume out_$i104 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_570;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    out_$i72, out_$i105, out_$i106 := out_$i103, in_$i15, out_$i88;
    assume true;
    goto $bb29;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    out_$i104 := $sgt.i32(out_$i71, 0);
    goto corral_source_split_590;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    out_$i103 := $sub.i32(out_$i71, 1);
    call {:si_unique_call 139} {:cexpr "retry_on_timeout"} boogie_si_record_i32(out_$i103);
    goto corral_source_split_589;

  $bb35:
    assume out_$i100 == 1;
    goto corral_source_split_588;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    out_$i101, out_$i102 := out_$i71, out_$i88;
    assume true;
    goto $bb35;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    out_$i100 := $eq.i32(out_$i88, $sub.i32(0, 110));
    goto corral_source_split_586;

  $bb33:
    assume !(out_$i90 == 1);
    goto corral_source_split_585;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    out_$i91, out_$i92 := in_$i67, out_$i71;
    assume true;
    goto $bb33;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    out_$i90 := $sgt.i32(out_$i89, 2);
    goto corral_source_split_568;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    out_$i89 := $load.i32($M.16, in_$p5);
    goto corral_source_split_567;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} out_$i88 := usb_bulk_msg(out_$p81, out_$i82, out_$p84, out_$i87, in_$p5, 50);
    call {:si_unique_call 138} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i88);
    goto corral_source_split_566;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    out_$i87 := $trunc.i64.i32(out_$i86);
    goto corral_source_split_565;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    out_$i86 := $load.i64($M.0, out_$p85);
    goto corral_source_split_564;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref(in_$p9, $mul.ref(0, 8488)), $mul.ref(7408, 1));
    goto corral_source_split_563;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    out_$p84 := $load.ref($M.0, out_$p83);
    goto corral_source_split_562;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref($add.ref(in_$p9, $mul.ref(0, 8488)), $mul.ref(7400, 1));
    goto corral_source_split_561;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    out_$i82 := $or.i32(out_$i79, $sub.i32(0, 1073741696));
    goto corral_source_split_560;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    out_$p81 := $load.ref($M.0, out_$p80);
    goto corral_source_split_559;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref(in_$p9, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_558;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} out_$i79 := __create_pipe(out_$p75, out_$i78);
    call {:si_unique_call 136} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i79);
    goto corral_source_split_557;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    out_$i78 := $zext.i8.i32(out_$i77);
    goto corral_source_split_556;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    out_$i77 := $load.i8($M.0, out_$p76);
    goto corral_source_split_555;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(in_$p9, $mul.ref(0, 8488)), $mul.ref(7432, 1));
    goto corral_source_split_554;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    out_$p75 := $load.ref($M.0, out_$p74);
    goto corral_source_split_553;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref(in_$p9, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_552;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    $M.16 := $store.i32($M.16, in_$p5, 0);
    goto corral_source_split_551;

  $bb30_dummy:
    call {:si_unique_call 1} out_$i72, out_$i71, out_$p74, out_$p75, out_$p76, out_$i77, out_$i78, out_$i79, out_$p80, out_$p81, out_$i82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i100, out_$i103, out_$i104, out_$i105, out_$i106, out_$i101, out_$i102, out_$i73 := ftdi_elan_read_loop_$bb28(in_$p5, in_$p9, in_$i15, in_$i64, in_$i67, out_$i72, out_$i71, out_$p74, out_$p75, out_$p76, out_$i77, out_$i78, out_$i79, out_$p80, out_$p81, out_$i82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i100, out_$i103, out_$i104, out_$i105, out_$i106, out_$i101, out_$i102, out_$i73);
    return;

  exit:
    return;
}



procedure ftdi_elan_read_loop_$bb28(in_$p5: ref, in_$p9: ref, in_$i15: i32, in_$i64: i1, in_$i67: i32, in_$i72: i32, in_$i71: i32, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$i77: i8, in_$i78: i32, in_$i79: i32, in_$p80: ref, in_$p81: ref, in_$i82: i32, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$i86: i64, in_$i87: i32, in_$i88: i32, in_$i89: i32, in_$i90: i1, in_$i91: i32, in_$i92: i32, in_$i100: i1, in_$i103: i32, in_$i104: i1, in_$i105: i32, in_$i106: i32, in_$i101: i32, in_$i102: i32, in_$i73: i32) returns (out_$i72: i32, out_$i71: i32, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$i77: i8, out_$i78: i32, out_$i79: i32, out_$p80: ref, out_$p81: ref, out_$i82: i32, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$i86: i64, out_$i87: i32, out_$i88: i32, out_$i89: i32, out_$i90: i1, out_$i91: i32, out_$i92: i32, out_$i100: i1, out_$i103: i32, out_$i104: i1, out_$i105: i32, out_$i106: i32, out_$i101: i32, out_$i102: i32, out_$i73: i32);
  modifies $M.16;



implementation ftdi_elan_read_loop_$bb24(in_$p5: ref, in_$p9: ref, in_$i15: i32, in_$i64: i1, in_$i68: i32, in_$i69: i32, in_$i66: i32, in_$i67: i32, in_$i72: i32, in_$i71: i32, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$i77: i8, in_$i78: i32, in_$i79: i32, in_$p80: ref, in_$p81: ref, in_$i82: i32, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$i86: i64, in_$i87: i32, in_$i88: i32, in_$i89: i32, in_$i90: i1, in_$i91: i32, in_$i92: i32, in_$i100: i1, in_$i103: i32, in_$i104: i1, in_$i105: i32, in_$i106: i32, in_$i101: i32, in_$i102: i32, in_$i110: i1, in_$i112: i32, in_$i113: i1, in_$i114: i32, in_$i111: i32, in_$i70: i32, in_$i73: i32) returns (out_$i68: i32, out_$i69: i32, out_$i66: i32, out_$i67: i32, out_$i72: i32, out_$i71: i32, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$i77: i8, out_$i78: i32, out_$i79: i32, out_$p80: ref, out_$p81: ref, out_$i82: i32, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$i86: i64, out_$i87: i32, out_$i88: i32, out_$i89: i32, out_$i90: i1, out_$i91: i32, out_$i92: i32, out_$i100: i1, out_$i103: i32, out_$i104: i1, out_$i105: i32, out_$i106: i32, out_$i101: i32, out_$i102: i32, out_$i110: i1, out_$i112: i32, out_$i113: i1, out_$i114: i32, out_$i111: i32, out_$i70: i32, out_$i73: i32)
{

  entry:
    out_$i68, out_$i69, out_$i66, out_$i67, out_$i72, out_$i71, out_$p74, out_$p75, out_$p76, out_$i77, out_$i78, out_$i79, out_$p80, out_$p81, out_$i82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i100, out_$i103, out_$i104, out_$i105, out_$i106, out_$i101, out_$i102, out_$i110, out_$i112, out_$i113, out_$i114, out_$i111, out_$i70, out_$i73 := in_$i68, in_$i69, in_$i66, in_$i67, in_$i72, in_$i71, in_$p74, in_$p75, in_$p76, in_$i77, in_$i78, in_$i79, in_$p80, in_$p81, in_$i82, in_$p83, in_$p84, in_$p85, in_$i86, in_$i87, in_$i88, in_$i89, in_$i90, in_$i91, in_$i92, in_$i100, in_$i103, in_$i104, in_$i105, in_$i106, in_$i101, in_$i102, in_$i110, in_$i112, in_$i113, in_$i114, in_$i111, in_$i70, in_$i73;
    goto $bb24, exit;

  $bb24:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_544;

  $bb26:
    assume in_$i64 == 1;
    assume {:verifier.code 0} true;
    out_$i66, out_$i67 := out_$i69, out_$i68;
    goto $bb26_dummy;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    out_$i70 := in_$i15;
    assume true;
    goto $bb26;

  $bb25:
    assume out_$i113 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_546;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    out_$i68, out_$i69, out_$i114 := out_$i112, out_$i101, in_$i15;
    assume true;
    goto $bb25;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    out_$i113 := $sgt.i32(out_$i67, 0);
    goto corral_source_split_606;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    out_$i112 := $sub.i32(out_$i67, 1);
    call {:si_unique_call 140} {:cexpr "retry_on_empty"} boogie_si_record_i32(out_$i112);
    goto corral_source_split_605;

  $bb40:
    assume out_$i110 == 1;
    goto corral_source_split_604;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    out_$i111 := out_$i102;
    assume true;
    goto $bb40;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    out_$i110 := $eq.i32(out_$i102, 0);
    goto corral_source_split_593;

  $bb36:
    assume !(out_$i100 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_592;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    out_$i101, out_$i102 := out_$i71, out_$i88;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    out_$i100 := $eq.i32(out_$i88, $sub.i32(0, 110));
    goto corral_source_split_586;

  $bb33:
    assume !(out_$i90 == 1);
    goto corral_source_split_585;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    out_$i91, out_$i92 := out_$i67, out_$i71;
    assume true;
    goto $bb33;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    out_$i90 := $sgt.i32(out_$i89, 2);
    goto corral_source_split_568;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    out_$i89 := $load.i32($M.16, in_$p5);
    goto corral_source_split_567;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} out_$i88 := usb_bulk_msg(out_$p81, out_$i82, out_$p84, out_$i87, in_$p5, 50);
    call {:si_unique_call 138} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i88);
    goto corral_source_split_566;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    out_$i87 := $trunc.i64.i32(out_$i86);
    goto corral_source_split_565;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    out_$i86 := $load.i64($M.0, out_$p85);
    goto corral_source_split_564;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref(in_$p9, $mul.ref(0, 8488)), $mul.ref(7408, 1));
    goto corral_source_split_563;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    out_$p84 := $load.ref($M.0, out_$p83);
    goto corral_source_split_562;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref($add.ref(in_$p9, $mul.ref(0, 8488)), $mul.ref(7400, 1));
    goto corral_source_split_561;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    out_$i82 := $or.i32(out_$i79, $sub.i32(0, 1073741696));
    goto corral_source_split_560;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    out_$p81 := $load.ref($M.0, out_$p80);
    goto corral_source_split_559;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref(in_$p9, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_558;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} out_$i79 := __create_pipe(out_$p75, out_$i78);
    call {:si_unique_call 136} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i79);
    goto corral_source_split_557;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    out_$i78 := $zext.i8.i32(out_$i77);
    goto corral_source_split_556;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    out_$i77 := $load.i8($M.0, out_$p76);
    goto corral_source_split_555;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(in_$p9, $mul.ref(0, 8488)), $mul.ref(7432, 1));
    goto corral_source_split_554;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    out_$p75 := $load.ref($M.0, out_$p74);
    goto corral_source_split_553;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref(in_$p9, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_552;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    $M.16 := $store.i32($M.16, in_$p5, 0);
    goto corral_source_split_551;

  $bb28:
    call out_$i72, out_$i71, out_$p74, out_$p75, out_$p76, out_$i77, out_$i78, out_$i79, out_$p80, out_$p81, out_$i82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i100, out_$i103, out_$i104, out_$i105, out_$i106, out_$i101, out_$i102, out_$i73 := ftdi_elan_read_loop_$bb28(in_$p5, in_$p9, in_$i15, in_$i64, out_$i67, out_$i72, out_$i71, out_$p74, out_$p75, out_$p76, out_$i77, out_$i78, out_$i79, out_$p80, out_$p81, out_$i82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i100, out_$i103, out_$i104, out_$i105, out_$i106, out_$i101, out_$i102, out_$i73);
    goto $bb28_last;

  $bb28_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_550;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    out_$i71 := out_$i66;
    goto $bb28;

  $bb30:
    assume in_$i64 == 1;
    assume {:verifier.code 0} true;
    out_$i71 := out_$i72;
    assume false;
    return;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    out_$i73 := in_$i15;
    assume true;
    goto $bb30;

  $bb29:
    assume out_$i104 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_570;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    out_$i72, out_$i105, out_$i106 := out_$i103, in_$i15, out_$i88;
    assume true;
    goto $bb29;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    out_$i104 := $sgt.i32(out_$i71, 0);
    goto corral_source_split_590;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    out_$i103 := $sub.i32(out_$i71, 1);
    call {:si_unique_call 139} {:cexpr "retry_on_timeout"} boogie_si_record_i32(out_$i103);
    goto corral_source_split_589;

  $bb35:
    assume out_$i100 == 1;
    goto corral_source_split_588;

  $bb26_dummy:
    call {:si_unique_call 1} out_$i68, out_$i69, out_$i66, out_$i67, out_$i72, out_$i71, out_$p74, out_$p75, out_$p76, out_$i77, out_$i78, out_$i79, out_$p80, out_$p81, out_$i82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i100, out_$i103, out_$i104, out_$i105, out_$i106, out_$i101, out_$i102, out_$i110, out_$i112, out_$i113, out_$i114, out_$i111, out_$i70, out_$i73 := ftdi_elan_read_loop_$bb24(in_$p5, in_$p9, in_$i15, in_$i64, out_$i68, out_$i69, out_$i66, out_$i67, out_$i72, out_$i71, out_$p74, out_$p75, out_$p76, out_$i77, out_$i78, out_$i79, out_$p80, out_$p81, out_$i82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i100, out_$i103, out_$i104, out_$i105, out_$i106, out_$i101, out_$i102, out_$i110, out_$i112, out_$i113, out_$i114, out_$i111, out_$i70, out_$i73);
    return;

  exit:
    return;
}



procedure ftdi_elan_read_loop_$bb24(in_$p5: ref, in_$p9: ref, in_$i15: i32, in_$i64: i1, in_$i68: i32, in_$i69: i32, in_$i66: i32, in_$i67: i32, in_$i72: i32, in_$i71: i32, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$i77: i8, in_$i78: i32, in_$i79: i32, in_$p80: ref, in_$p81: ref, in_$i82: i32, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$i86: i64, in_$i87: i32, in_$i88: i32, in_$i89: i32, in_$i90: i1, in_$i91: i32, in_$i92: i32, in_$i100: i1, in_$i103: i32, in_$i104: i1, in_$i105: i32, in_$i106: i32, in_$i101: i32, in_$i102: i32, in_$i110: i1, in_$i112: i32, in_$i113: i1, in_$i114: i32, in_$i111: i32, in_$i70: i32, in_$i73: i32) returns (out_$i68: i32, out_$i69: i32, out_$i66: i32, out_$i67: i32, out_$i72: i32, out_$i71: i32, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$i77: i8, out_$i78: i32, out_$i79: i32, out_$p80: ref, out_$p81: ref, out_$i82: i32, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$i86: i64, out_$i87: i32, out_$i88: i32, out_$i89: i32, out_$i90: i1, out_$i91: i32, out_$i92: i32, out_$i100: i1, out_$i103: i32, out_$i104: i1, out_$i105: i32, out_$i106: i32, out_$i101: i32, out_$i102: i32, out_$i110: i1, out_$i112: i32, out_$i113: i1, out_$i114: i32, out_$i111: i32, out_$i70: i32, out_$i73: i32);
  modifies $M.16;



implementation ftdi_elan_read_loop_$bb9(in_$p5: ref, in_$p9: ref, in_$i15: i32, in_$i18: i64, in_$p21: ref, in_$i28: i32, in_$i29: i32, in_$i26: i32, in_$i27: i32, in_$i64: i1, in_$i68: i32, in_$i69: i32, in_$i66: i32, in_$i67: i32, in_$i72: i32, in_$i71: i32, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$i77: i8, in_$i78: i32, in_$i79: i32, in_$p80: ref, in_$p81: ref, in_$i82: i32, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$i86: i64, in_$i87: i32, in_$i88: i32, in_$i89: i32, in_$i90: i1, in_$i91: i32, in_$i92: i32, in_$i93: i32, in_$i94: i32, in_$i95: i64, in_$p96: ref, in_$p97: ref, in_$i98: i64, in_$i99: i1, in_$i100: i1, in_$i103: i32, in_$i104: i1, in_$i105: i32, in_$i106: i32, in_$i101: i32, in_$i102: i32, in_$i110: i1, in_$i112: i32, in_$i113: i1, in_$i114: i32, in_$i111: i32, in_$i65: i32, in_$i70: i32, in_$i73: i32) returns (out_$i28: i32, out_$i29: i32, out_$i26: i32, out_$i27: i32, out_$i64: i1, out_$i68: i32, out_$i69: i32, out_$i66: i32, out_$i67: i32, out_$i72: i32, out_$i71: i32, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$i77: i8, out_$i78: i32, out_$i79: i32, out_$p80: ref, out_$p81: ref, out_$i82: i32, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$i86: i64, out_$i87: i32, out_$i88: i32, out_$i89: i32, out_$i90: i1, out_$i91: i32, out_$i92: i32, out_$i93: i32, out_$i94: i32, out_$i95: i64, out_$p96: ref, out_$p97: ref, out_$i98: i64, out_$i99: i1, out_$i100: i1, out_$i103: i32, out_$i104: i1, out_$i105: i32, out_$i106: i32, out_$i101: i32, out_$i102: i32, out_$i110: i1, out_$i112: i32, out_$i113: i1, out_$i114: i32, out_$i111: i32, out_$i65: i32, out_$i70: i32, out_$i73: i32)
{

  entry:
    out_$i28, out_$i29, out_$i26, out_$i27, out_$i64, out_$i68, out_$i69, out_$i66, out_$i67, out_$i72, out_$i71, out_$p74, out_$p75, out_$p76, out_$i77, out_$i78, out_$i79, out_$p80, out_$p81, out_$i82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$p96, out_$p97, out_$i98, out_$i99, out_$i100, out_$i103, out_$i104, out_$i105, out_$i106, out_$i101, out_$i102, out_$i110, out_$i112, out_$i113, out_$i114, out_$i111, out_$i65, out_$i70, out_$i73 := in_$i28, in_$i29, in_$i26, in_$i27, in_$i64, in_$i68, in_$i69, in_$i66, in_$i67, in_$i72, in_$i71, in_$p74, in_$p75, in_$p76, in_$i77, in_$i78, in_$i79, in_$p80, in_$p81, in_$i82, in_$p83, in_$p84, in_$p85, in_$i86, in_$i87, in_$i88, in_$i89, in_$i90, in_$i91, in_$i92, in_$i93, in_$i94, in_$i95, in_$p96, in_$p97, in_$i98, in_$i99, in_$i100, in_$i103, in_$i104, in_$i105, in_$i106, in_$i101, in_$i102, in_$i110, in_$i112, in_$i113, in_$i114, in_$i111, in_$i65, in_$i70, in_$i73;
    goto $bb9, exit;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb34:
    assume !(out_$i99 == 1);
    assume {:verifier.code 0} true;
    out_$i26, out_$i27 := out_$i92, out_$i91;
    goto $bb34_dummy;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    out_$i28, out_$i29 := out_$i91, out_$i92;
    assume true;
    goto $bb34;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    out_$i99 := $ne.i64(out_$i98, 0);
    goto corral_source_split_583;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    out_$i98 := $load.i64($M.0, in_$p21);
    goto corral_source_split_582;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p97, 1);
    goto corral_source_split_581;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    out_$p97 := $add.ref($add.ref(in_$p9, $mul.ref(0, 8488)), $mul.ref(7416, 1));
    goto corral_source_split_580;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p96, out_$i95);
    goto corral_source_split_579;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    out_$p96 := $add.ref($add.ref(in_$p9, $mul.ref(0, 8488)), $mul.ref(7424, 1));
    goto corral_source_split_578;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    out_$i95 := $sext.i32.i64(out_$i94);
    goto corral_source_split_577;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    out_$i94 := $add.i32(out_$i93, $sub.i32(0, 2));
    goto corral_source_split_576;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    out_$i93 := $load.i32($M.16, in_$p5);
    goto corral_source_split_575;

  $bb32:
    assume out_$i90 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_574;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    out_$i91, out_$i92 := out_$i67, out_$i71;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    out_$i90 := $sgt.i32(out_$i89, 2);
    goto corral_source_split_568;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    out_$i89 := $load.i32($M.16, in_$p5);
    goto corral_source_split_567;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} out_$i88 := usb_bulk_msg(out_$p81, out_$i82, out_$p84, out_$i87, in_$p5, 50);
    call {:si_unique_call 138} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i88);
    goto corral_source_split_566;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    out_$i87 := $trunc.i64.i32(out_$i86);
    goto corral_source_split_565;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    out_$i86 := $load.i64($M.0, out_$p85);
    goto corral_source_split_564;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref(in_$p9, $mul.ref(0, 8488)), $mul.ref(7408, 1));
    goto corral_source_split_563;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    out_$p84 := $load.ref($M.0, out_$p83);
    goto corral_source_split_562;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref($add.ref(in_$p9, $mul.ref(0, 8488)), $mul.ref(7400, 1));
    goto corral_source_split_561;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    out_$i82 := $or.i32(out_$i79, $sub.i32(0, 1073741696));
    goto corral_source_split_560;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    out_$p81 := $load.ref($M.0, out_$p80);
    goto corral_source_split_559;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref(in_$p9, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_558;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} out_$i79 := __create_pipe(out_$p75, out_$i78);
    call {:si_unique_call 136} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i79);
    goto corral_source_split_557;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    out_$i78 := $zext.i8.i32(out_$i77);
    goto corral_source_split_556;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    out_$i77 := $load.i8($M.0, out_$p76);
    goto corral_source_split_555;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(in_$p9, $mul.ref(0, 8488)), $mul.ref(7432, 1));
    goto corral_source_split_554;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    out_$p75 := $load.ref($M.0, out_$p74);
    goto corral_source_split_553;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref(in_$p9, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_552;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    $M.16 := $store.i32($M.16, in_$p5, 0);
    goto corral_source_split_551;

  $bb28:
    call out_$i72, out_$i71, out_$p74, out_$p75, out_$p76, out_$i77, out_$i78, out_$i79, out_$p80, out_$p81, out_$i82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i100, out_$i103, out_$i104, out_$i105, out_$i106, out_$i101, out_$i102, out_$i73 := ftdi_elan_read_loop_$bb28(in_$p5, in_$p9, in_$i15, out_$i64, out_$i67, out_$i72, out_$i71, out_$p74, out_$p75, out_$p76, out_$i77, out_$i78, out_$i79, out_$p80, out_$p81, out_$i82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i100, out_$i103, out_$i104, out_$i105, out_$i106, out_$i101, out_$i102, out_$i73);
    goto $bb28_last;

  $bb28_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_550;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    out_$i71 := out_$i66;
    goto $bb28;

  $bb30:
    assume out_$i64 == 1;
    assume {:verifier.code 0} true;
    out_$i71 := out_$i72;
    assume false;
    return;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    out_$i73 := in_$i15;
    assume true;
    goto $bb30;

  $bb29:
    assume out_$i104 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_570;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    out_$i72, out_$i105, out_$i106 := out_$i103, in_$i15, out_$i88;
    assume true;
    goto $bb29;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    out_$i104 := $sgt.i32(out_$i71, 0);
    goto corral_source_split_590;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    out_$i103 := $sub.i32(out_$i71, 1);
    call {:si_unique_call 139} {:cexpr "retry_on_timeout"} boogie_si_record_i32(out_$i103);
    goto corral_source_split_589;

  $bb35:
    assume out_$i100 == 1;
    goto corral_source_split_588;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    out_$i101, out_$i102 := out_$i71, out_$i88;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    out_$i100 := $eq.i32(out_$i88, $sub.i32(0, 110));
    goto corral_source_split_586;

  $bb33:
    assume !(out_$i90 == 1);
    goto corral_source_split_585;

  $bb24:
    call out_$i68, out_$i69, out_$i66, out_$i67, out_$i72, out_$i71, out_$p74, out_$p75, out_$p76, out_$i77, out_$i78, out_$i79, out_$p80, out_$p81, out_$i82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i100, out_$i103, out_$i104, out_$i105, out_$i106, out_$i101, out_$i102, out_$i110, out_$i112, out_$i113, out_$i114, out_$i111, out_$i70, out_$i73 := ftdi_elan_read_loop_$bb24(in_$p5, in_$p9, in_$i15, out_$i64, out_$i68, out_$i69, out_$i66, out_$i67, out_$i72, out_$i71, out_$p74, out_$p75, out_$p76, out_$i77, out_$i78, out_$i79, out_$p80, out_$p81, out_$i82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i100, out_$i103, out_$i104, out_$i105, out_$i106, out_$i101, out_$i102, out_$i110, out_$i112, out_$i113, out_$i114, out_$i111, out_$i70, out_$i73);
    goto $bb24_last;

  $bb24_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_544;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    out_$i66, out_$i67 := out_$i26, out_$i27;
    goto $bb24;

  $bb26:
    assume out_$i64 == 1;
    assume {:verifier.code 0} true;
    out_$i66, out_$i67 := out_$i69, out_$i68;
    assume false;
    return;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    out_$i70 := in_$i15;
    assume true;
    goto $bb26;

  $bb25:
    assume out_$i113 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_546;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    out_$i68, out_$i69, out_$i114 := out_$i112, out_$i101, in_$i15;
    assume true;
    goto $bb25;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    out_$i113 := $sgt.i32(out_$i67, 0);
    goto corral_source_split_606;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    out_$i112 := $sub.i32(out_$i67, 1);
    call {:si_unique_call 140} {:cexpr "retry_on_empty"} boogie_si_record_i32(out_$i112);
    goto corral_source_split_605;

  $bb40:
    assume out_$i110 == 1;
    goto corral_source_split_604;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    out_$i111 := out_$i102;
    assume true;
    goto $bb40;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    out_$i110 := $eq.i32(out_$i102, 0);
    goto corral_source_split_593;

  $bb36:
    assume !(out_$i100 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_592;

  $bb22:
    assume out_$i64 == 1;
    goto corral_source_split_540;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    out_$i65 := in_$i15;
    assume true;
    goto $bb22;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i64 := $ne.i64(in_$i18, 0);
    goto corral_source_split_538;

  $bb34_dummy:
    call {:si_unique_call 1} out_$i28, out_$i29, out_$i26, out_$i27, out_$i64, out_$i68, out_$i69, out_$i66, out_$i67, out_$i72, out_$i71, out_$p74, out_$p75, out_$p76, out_$i77, out_$i78, out_$i79, out_$p80, out_$p81, out_$i82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$p96, out_$p97, out_$i98, out_$i99, out_$i100, out_$i103, out_$i104, out_$i105, out_$i106, out_$i101, out_$i102, out_$i110, out_$i112, out_$i113, out_$i114, out_$i111, out_$i65, out_$i70, out_$i73 := ftdi_elan_read_loop_$bb9(in_$p5, in_$p9, in_$i15, in_$i18, in_$p21, out_$i28, out_$i29, out_$i26, out_$i27, out_$i64, out_$i68, out_$i69, out_$i66, out_$i67, out_$i72, out_$i71, out_$p74, out_$p75, out_$p76, out_$i77, out_$i78, out_$i79, out_$p80, out_$p81, out_$i82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$p96, out_$p97, out_$i98, out_$i99, out_$i100, out_$i103, out_$i104, out_$i105, out_$i106, out_$i101, out_$i102, out_$i110, out_$i112, out_$i113, out_$i114, out_$i111, out_$i65, out_$i70, out_$i73);
    return;

  exit:
    return;
}



procedure ftdi_elan_read_loop_$bb9(in_$p5: ref, in_$p9: ref, in_$i15: i32, in_$i18: i64, in_$p21: ref, in_$i28: i32, in_$i29: i32, in_$i26: i32, in_$i27: i32, in_$i64: i1, in_$i68: i32, in_$i69: i32, in_$i66: i32, in_$i67: i32, in_$i72: i32, in_$i71: i32, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$i77: i8, in_$i78: i32, in_$i79: i32, in_$p80: ref, in_$p81: ref, in_$i82: i32, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$i86: i64, in_$i87: i32, in_$i88: i32, in_$i89: i32, in_$i90: i1, in_$i91: i32, in_$i92: i32, in_$i93: i32, in_$i94: i32, in_$i95: i64, in_$p96: ref, in_$p97: ref, in_$i98: i64, in_$i99: i1, in_$i100: i1, in_$i103: i32, in_$i104: i1, in_$i105: i32, in_$i106: i32, in_$i101: i32, in_$i102: i32, in_$i110: i1, in_$i112: i32, in_$i113: i1, in_$i114: i32, in_$i111: i32, in_$i65: i32, in_$i70: i32, in_$i73: i32) returns (out_$i28: i32, out_$i29: i32, out_$i26: i32, out_$i27: i32, out_$i64: i1, out_$i68: i32, out_$i69: i32, out_$i66: i32, out_$i67: i32, out_$i72: i32, out_$i71: i32, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$i77: i8, out_$i78: i32, out_$i79: i32, out_$p80: ref, out_$p81: ref, out_$i82: i32, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$i86: i64, out_$i87: i32, out_$i88: i32, out_$i89: i32, out_$i90: i1, out_$i91: i32, out_$i92: i32, out_$i93: i32, out_$i94: i32, out_$i95: i64, out_$p96: ref, out_$p97: ref, out_$i98: i64, out_$i99: i1, out_$i100: i1, out_$i103: i32, out_$i104: i1, out_$i105: i32, out_$i106: i32, out_$i101: i32, out_$i102: i32, out_$i110: i1, out_$i112: i32, out_$i113: i1, out_$i114: i32, out_$i111: i32, out_$i65: i32, out_$i70: i32, out_$i73: i32);
  modifies $M.0, $M.16;



implementation ftdi_elan_read_loop_$bb5(in_$p5: ref, in_$p9: ref, in_$i15: i32, in_$p16: ref, in_$i17: i32, in_$i18: i64, in_$p19: ref, in_$i20: i32, in_$p21: ref, in_$i22: i64, in_$i23: i1, in_$i28: i32, in_$i29: i32, in_$i24: i32, in_$i25: i32, in_$i30: i64, in_$i31: i1, in_$p33: ref, in_$i34: i64, in_$i35: i64, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$i40: i64, in_$p41: ref, in_$p42: ref, in_$i43: i64, in_$i44: i64, in_$p45: ref, in_$i46: i1, in_$i47: i8, in_$i48: i32, in_$i49: i32, in_$i50: i32, in_$i51: i64, in_$p52: ref, in_$i54: i1, in_$i56: i32, in_$i57: i64, in_$p58: ref, in_$p55: ref, in_$p53: ref, in_$p59: ref, in_$i60: i64, in_$i61: i1, in_$i62: i32, in_$i32: i32, in_$i26: i32, in_$i27: i32, in_$i64: i1, in_$i68: i32, in_$i69: i32, in_$i66: i32, in_$i67: i32, in_$i72: i32, in_$i71: i32, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$i77: i8, in_$i78: i32, in_$i79: i32, in_$p80: ref, in_$p81: ref, in_$i82: i32, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$i86: i64, in_$i87: i32, in_$i88: i32, in_$i89: i32, in_$i90: i1, in_$i91: i32, in_$i92: i32, in_$i93: i32, in_$i94: i32, in_$i95: i64, in_$p96: ref, in_$p97: ref, in_$i98: i64, in_$i99: i1, in_$i100: i1, in_$i103: i32, in_$i104: i1, in_$i105: i32, in_$i106: i32, in_$i101: i32, in_$i102: i32, in_$i110: i1, in_$i112: i32, in_$i113: i1, in_$i114: i32, in_$i111: i32, in_$i65: i32, in_$i70: i32, in_$i73: i32) returns (out_$i15: i32, out_$p16: ref, out_$i17: i32, out_$i18: i64, out_$p19: ref, out_$i20: i32, out_$p21: ref, out_$i22: i64, out_$i23: i1, out_$i28: i32, out_$i29: i32, out_$i24: i32, out_$i25: i32, out_$i30: i64, out_$i31: i1, out_$p33: ref, out_$i34: i64, out_$i35: i64, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$i40: i64, out_$p41: ref, out_$p42: ref, out_$i43: i64, out_$i44: i64, out_$p45: ref, out_$i46: i1, out_$i47: i8, out_$i48: i32, out_$i49: i32, out_$i50: i32, out_$i51: i64, out_$p52: ref, out_$i54: i1, out_$i56: i32, out_$i57: i64, out_$p58: ref, out_$p55: ref, out_$p53: ref, out_$p59: ref, out_$i60: i64, out_$i61: i1, out_$i62: i32, out_$i32: i32, out_$i26: i32, out_$i27: i32, out_$i64: i1, out_$i68: i32, out_$i69: i32, out_$i66: i32, out_$i67: i32, out_$i72: i32, out_$i71: i32, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$i77: i8, out_$i78: i32, out_$i79: i32, out_$p80: ref, out_$p81: ref, out_$i82: i32, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$i86: i64, out_$i87: i32, out_$i88: i32, out_$i89: i32, out_$i90: i1, out_$i91: i32, out_$i92: i32, out_$i93: i32, out_$i94: i32, out_$i95: i64, out_$p96: ref, out_$p97: ref, out_$i98: i64, out_$i99: i1, out_$i100: i1, out_$i103: i32, out_$i104: i1, out_$i105: i32, out_$i106: i32, out_$i101: i32, out_$i102: i32, out_$i110: i1, out_$i112: i32, out_$i113: i1, out_$i114: i32, out_$i111: i32, out_$i65: i32, out_$i70: i32, out_$i73: i32)
{

  entry:
    out_$i15, out_$p16, out_$i17, out_$i18, out_$p19, out_$i20, out_$p21, out_$i22, out_$i23, out_$i28, out_$i29, out_$i24, out_$i25, out_$i30, out_$i31, out_$p33, out_$i34, out_$i35, out_$p36, out_$p37, out_$p38, out_$p39, out_$i40, out_$p41, out_$p42, out_$i43, out_$i44, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$p52, out_$i54, out_$i56, out_$i57, out_$p58, out_$p55, out_$p53, out_$p59, out_$i60, out_$i61, out_$i62, out_$i32, out_$i26, out_$i27, out_$i64, out_$i68, out_$i69, out_$i66, out_$i67, out_$i72, out_$i71, out_$p74, out_$p75, out_$p76, out_$i77, out_$i78, out_$i79, out_$p80, out_$p81, out_$i82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$p96, out_$p97, out_$i98, out_$i99, out_$i100, out_$i103, out_$i104, out_$i105, out_$i106, out_$i101, out_$i102, out_$i110, out_$i112, out_$i113, out_$i114, out_$i111, out_$i65, out_$i70, out_$i73 := in_$i15, in_$p16, in_$i17, in_$i18, in_$p19, in_$i20, in_$p21, in_$i22, in_$i23, in_$i28, in_$i29, in_$i24, in_$i25, in_$i30, in_$i31, in_$p33, in_$i34, in_$i35, in_$p36, in_$p37, in_$p38, in_$p39, in_$i40, in_$p41, in_$p42, in_$i43, in_$i44, in_$p45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$p52, in_$i54, in_$i56, in_$i57, in_$p58, in_$p55, in_$p53, in_$p59, in_$i60, in_$i61, in_$i62, in_$i32, in_$i26, in_$i27, in_$i64, in_$i68, in_$i69, in_$i66, in_$i67, in_$i72, in_$i71, in_$p74, in_$p75, in_$p76, in_$i77, in_$i78, in_$i79, in_$p80, in_$p81, in_$i82, in_$p83, in_$p84, in_$p85, in_$i86, in_$i87, in_$i88, in_$i89, in_$i90, in_$i91, in_$i92, in_$i93, in_$i94, in_$i95, in_$p96, in_$p97, in_$i98, in_$i99, in_$i100, in_$i103, in_$i104, in_$i105, in_$i106, in_$i101, in_$i102, in_$i110, in_$i112, in_$i113, in_$i114, in_$i111, in_$i65, in_$i70, in_$i73;
    goto $bb5, exit;

  $bb5:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_477;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    out_$i15, out_$p16, out_$i17, out_$i18, out_$p19, out_$i20 := out_$i62, out_$p53, out_$i24, out_$i30, out_$p59, out_$i25;
    goto corral_source_split_536_dummy;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    out_$i62 := $add.i32(out_$i15, 1);
    call {:si_unique_call 134} {:cexpr "bytes_read"} boogie_si_record_i32(out_$i62);
    goto corral_source_split_536;

  $bb20:
    assume !(out_$i61 == 1);
    goto corral_source_split_535;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    out_$i61 := $ne.i64(out_$i60, 0);
    goto corral_source_split_525;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 130} out_$i60 := copy_to_user(out_$p19, out_$p41, 1);
    call {:si_unique_call 131} {:cexpr "tmp___2"} boogie_si_record_i64(out_$i60);
    goto corral_source_split_524;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref(out_$p19, $mul.ref(1, 1));
    goto corral_source_split_523;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_522;

  $bb18:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$p53 := out_$p55;
    goto $bb15;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    out_$p53 := out_$p52;
    goto $bb15;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref(out_$p16, $mul.ref(out_$i51, 1));
    goto corral_source_split_517;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    out_$i51 := $sext.i32.i64(out_$i50);
    goto corral_source_split_516;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 128} out_$i50 := sprintf.ref.ref.i32(out_$p16, .str.4, out_$i49);
    call {:si_unique_call 129} {:cexpr "tmp"} boogie_si_record_i32(out_$i50);
    goto corral_source_split_515;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    out_$i49 := $and.i32(out_$i48, 255);
    goto corral_source_split_514;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    out_$i48 := $sext.i8.i32(out_$i47);
    goto corral_source_split_513;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    out_$i47 := $load.i8($M.0, out_$p41);
    goto corral_source_split_512;

  $bb13:
    assume out_$i46 == 1;
    goto corral_source_split_511;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    out_$i46 := $slt.i32(out_$i15, 31);
    goto corral_source_split_506;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p45, out_$i44);
    goto corral_source_split_505;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(in_$p9, $mul.ref(0, 8488)), $mul.ref(7424, 1));
    goto corral_source_split_504;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    out_$i44 := $sub.i64(out_$i43, 1);
    goto corral_source_split_503;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i64($M.0, out_$p42);
    goto corral_source_split_502;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(in_$p9, $mul.ref(0, 8488)), $mul.ref(7424, 1));
    goto corral_source_split_501;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref(out_$p38, $mul.ref(out_$i40, 1));
    goto corral_source_split_500;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    out_$i40 := $load.i64($M.0, out_$p39);
    goto corral_source_split_499;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(in_$p9, $mul.ref(0, 8488)), $mul.ref(7416, 1));
    goto corral_source_split_498;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    out_$p38 := $load.ref($M.0, out_$p37);
    goto corral_source_split_497;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(in_$p9, $mul.ref(0, 8488)), $mul.ref(7400, 1));
    goto corral_source_split_496;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p36, out_$i35);
    goto corral_source_split_495;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(in_$p9, $mul.ref(0, 8488)), $mul.ref(7416, 1));
    goto corral_source_split_494;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    out_$i35 := $add.i64(out_$i34, 1);
    goto corral_source_split_493;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i64($M.0, out_$p33);
    goto corral_source_split_492;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(in_$p9, $mul.ref(0, 8488)), $mul.ref(7416, 1));
    goto corral_source_split_491;

  $bb11:
    assume out_$i31 == 1;
    goto corral_source_split_490;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    out_$i32 := out_$i15;
    assume true;
    goto $bb11;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    out_$i31 := $ne.i64(out_$i18, 0);
    goto corral_source_split_484;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    out_$i30 := $sub.i64(out_$i18, 1);
    call {:si_unique_call 127} {:cexpr "count"} boogie_si_record_i64(out_$i30);
    goto corral_source_split_483;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_482;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    out_$i24, out_$i25 := out_$i28, out_$i29;
    goto $bb7;

  $bb6:
    assume {:verifier.code 0} true;
    assume out_$i23 == 1;
    goto $bb7;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    out_$i24, out_$i25 := out_$i17, out_$i20;
    assume true;
    goto $bb6, $bb8;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    out_$i23 := $ne.i64(out_$i22, 0);
    goto corral_source_split_480;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    out_$i22 := $load.i64($M.0, out_$p21);
    goto corral_source_split_479;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(in_$p9, $mul.ref(0, 8488)), $mul.ref(7424, 1));
    goto corral_source_split_478;

  $bb10:
    assume out_$i99 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_488;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    out_$i28, out_$i29 := out_$i91, out_$i92;
    assume true;
    goto $bb10, $bb34;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    out_$i99 := $ne.i64(out_$i98, 0);
    goto corral_source_split_583;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    out_$i98 := $load.i64($M.0, out_$p21);
    goto corral_source_split_582;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p97, 1);
    goto corral_source_split_581;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    out_$p97 := $add.ref($add.ref(in_$p9, $mul.ref(0, 8488)), $mul.ref(7416, 1));
    goto corral_source_split_580;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p96, out_$i95);
    goto corral_source_split_579;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    out_$p96 := $add.ref($add.ref(in_$p9, $mul.ref(0, 8488)), $mul.ref(7424, 1));
    goto corral_source_split_578;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    out_$i95 := $sext.i32.i64(out_$i94);
    goto corral_source_split_577;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    out_$i94 := $add.i32(out_$i93, $sub.i32(0, 2));
    goto corral_source_split_576;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    out_$i93 := $load.i32($M.16, in_$p5);
    goto corral_source_split_575;

  $bb32:
    assume out_$i90 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_574;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    out_$i91, out_$i92 := out_$i67, out_$i71;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    out_$i90 := $sgt.i32(out_$i89, 2);
    goto corral_source_split_568;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    out_$i89 := $load.i32($M.16, in_$p5);
    goto corral_source_split_567;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} out_$i88 := usb_bulk_msg(out_$p81, out_$i82, out_$p84, out_$i87, in_$p5, 50);
    call {:si_unique_call 138} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i88);
    goto corral_source_split_566;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    out_$i87 := $trunc.i64.i32(out_$i86);
    goto corral_source_split_565;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    out_$i86 := $load.i64($M.0, out_$p85);
    goto corral_source_split_564;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref(in_$p9, $mul.ref(0, 8488)), $mul.ref(7408, 1));
    goto corral_source_split_563;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    out_$p84 := $load.ref($M.0, out_$p83);
    goto corral_source_split_562;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref($add.ref(in_$p9, $mul.ref(0, 8488)), $mul.ref(7400, 1));
    goto corral_source_split_561;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    out_$i82 := $or.i32(out_$i79, $sub.i32(0, 1073741696));
    goto corral_source_split_560;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    out_$p81 := $load.ref($M.0, out_$p80);
    goto corral_source_split_559;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref(in_$p9, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_558;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} out_$i79 := __create_pipe(out_$p75, out_$i78);
    call {:si_unique_call 136} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i79);
    goto corral_source_split_557;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    out_$i78 := $zext.i8.i32(out_$i77);
    goto corral_source_split_556;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    out_$i77 := $load.i8($M.0, out_$p76);
    goto corral_source_split_555;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(in_$p9, $mul.ref(0, 8488)), $mul.ref(7432, 1));
    goto corral_source_split_554;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    out_$p75 := $load.ref($M.0, out_$p74);
    goto corral_source_split_553;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref(in_$p9, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_552;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    $M.16 := $store.i32($M.16, in_$p5, 0);
    goto corral_source_split_551;

  $bb28:
    call out_$i72, out_$i71, out_$p74, out_$p75, out_$p76, out_$i77, out_$i78, out_$i79, out_$p80, out_$p81, out_$i82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i100, out_$i103, out_$i104, out_$i105, out_$i106, out_$i101, out_$i102, out_$i73 := ftdi_elan_read_loop_$bb28(in_$p5, in_$p9, out_$i15, out_$i64, out_$i67, out_$i72, out_$i71, out_$p74, out_$p75, out_$p76, out_$i77, out_$i78, out_$i79, out_$p80, out_$p81, out_$i82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i100, out_$i103, out_$i104, out_$i105, out_$i106, out_$i101, out_$i102, out_$i73);
    goto $bb28_last;

  $bb28_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_550;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    out_$i71 := out_$i66;
    goto $bb28;

  $bb30:
    assume out_$i64 == 1;
    assume {:verifier.code 0} true;
    out_$i71 := out_$i72;
    assume false;
    return;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    out_$i73 := out_$i15;
    assume true;
    goto $bb30;

  $bb29:
    assume out_$i104 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_570;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    out_$i72, out_$i105, out_$i106 := out_$i103, out_$i15, out_$i88;
    assume true;
    goto $bb29;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    out_$i104 := $sgt.i32(out_$i71, 0);
    goto corral_source_split_590;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    out_$i103 := $sub.i32(out_$i71, 1);
    call {:si_unique_call 139} {:cexpr "retry_on_timeout"} boogie_si_record_i32(out_$i103);
    goto corral_source_split_589;

  $bb35:
    assume out_$i100 == 1;
    goto corral_source_split_588;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    out_$i101, out_$i102 := out_$i71, out_$i88;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    out_$i100 := $eq.i32(out_$i88, $sub.i32(0, 110));
    goto corral_source_split_586;

  $bb33:
    assume !(out_$i90 == 1);
    goto corral_source_split_585;

  $bb24:
    call out_$i68, out_$i69, out_$i66, out_$i67, out_$i72, out_$i71, out_$p74, out_$p75, out_$p76, out_$i77, out_$i78, out_$i79, out_$p80, out_$p81, out_$i82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i100, out_$i103, out_$i104, out_$i105, out_$i106, out_$i101, out_$i102, out_$i110, out_$i112, out_$i113, out_$i114, out_$i111, out_$i70, out_$i73 := ftdi_elan_read_loop_$bb24(in_$p5, in_$p9, out_$i15, out_$i64, out_$i68, out_$i69, out_$i66, out_$i67, out_$i72, out_$i71, out_$p74, out_$p75, out_$p76, out_$i77, out_$i78, out_$i79, out_$p80, out_$p81, out_$i82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i100, out_$i103, out_$i104, out_$i105, out_$i106, out_$i101, out_$i102, out_$i110, out_$i112, out_$i113, out_$i114, out_$i111, out_$i70, out_$i73);
    goto $bb24_last;

  $bb24_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_544;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    out_$i66, out_$i67 := out_$i26, out_$i27;
    goto $bb24;

  $bb26:
    assume out_$i64 == 1;
    assume {:verifier.code 0} true;
    out_$i66, out_$i67 := out_$i69, out_$i68;
    assume false;
    return;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    out_$i70 := out_$i15;
    assume true;
    goto $bb26;

  $bb25:
    assume out_$i113 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_546;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    out_$i68, out_$i69, out_$i114 := out_$i112, out_$i101, out_$i15;
    assume true;
    goto $bb25;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    out_$i113 := $sgt.i32(out_$i67, 0);
    goto corral_source_split_606;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    out_$i112 := $sub.i32(out_$i67, 1);
    call {:si_unique_call 140} {:cexpr "retry_on_empty"} boogie_si_record_i32(out_$i112);
    goto corral_source_split_605;

  $bb40:
    assume out_$i110 == 1;
    goto corral_source_split_604;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    out_$i111 := out_$i102;
    assume true;
    goto $bb40;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    out_$i110 := $eq.i32(out_$i102, 0);
    goto corral_source_split_593;

  $bb36:
    assume !(out_$i100 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_592;

  $bb22:
    assume out_$i64 == 1;
    goto corral_source_split_540;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    out_$i65 := out_$i15;
    assume true;
    goto $bb22;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i64 := $ne.i64(out_$i18, 0);
    goto corral_source_split_538;

  $bb9:
    call out_$i28, out_$i29, out_$i26, out_$i27, out_$i64, out_$i68, out_$i69, out_$i66, out_$i67, out_$i72, out_$i71, out_$p74, out_$p75, out_$p76, out_$i77, out_$i78, out_$i79, out_$p80, out_$p81, out_$i82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$p96, out_$p97, out_$i98, out_$i99, out_$i100, out_$i103, out_$i104, out_$i105, out_$i106, out_$i101, out_$i102, out_$i110, out_$i112, out_$i113, out_$i114, out_$i111, out_$i65, out_$i70, out_$i73 := ftdi_elan_read_loop_$bb9(in_$p5, in_$p9, out_$i15, out_$i18, out_$p21, out_$i28, out_$i29, out_$i26, out_$i27, out_$i64, out_$i68, out_$i69, out_$i66, out_$i67, out_$i72, out_$i71, out_$p74, out_$p75, out_$p76, out_$i77, out_$i78, out_$i79, out_$p80, out_$p81, out_$i82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$p96, out_$p97, out_$i98, out_$i99, out_$i100, out_$i103, out_$i104, out_$i105, out_$i106, out_$i101, out_$i102, out_$i110, out_$i112, out_$i113, out_$i114, out_$i111, out_$i65, out_$i70, out_$i73);
    goto $bb9_last;

  $bb9_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    out_$i26, out_$i27 := out_$i20, out_$i17;
    goto $bb9;

  $bb34:
    assume !(out_$i99 == 1);
    assume {:verifier.code 0} true;
    out_$i26, out_$i27 := out_$i92, out_$i91;
    assume false;
    return;

  $bb8:
    assume !(out_$i23 == 1);
    goto corral_source_split_486;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref(out_$p16, $mul.ref(out_$i57, 1));
    assume {:verifier.code 0} true;
    out_$p55 := out_$p58;
    goto $bb18;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    out_$p55 := out_$p16;
    goto $bb18;

  $bb16:
    assume out_$i54 == 1;
    goto corral_source_split_527;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    out_$i54 := $sgt.i32(out_$i15, 31);
    goto corral_source_split_520;

  $bb14:
    assume !(out_$i46 == 1);
    goto corral_source_split_519;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    out_$i57 := $sext.i32.i64(out_$i56);
    goto corral_source_split_531;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 132} out_$i56 := sprintf.ref.ref(out_$p16, .str.5);
    call {:si_unique_call 133} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i56);
    goto corral_source_split_530;

  $bb17:
    assume !(out_$i54 == 1);
    goto corral_source_split_529;

  corral_source_split_536_dummy:
    call {:si_unique_call 1} out_$i15, out_$p16, out_$i17, out_$i18, out_$p19, out_$i20, out_$p21, out_$i22, out_$i23, out_$i28, out_$i29, out_$i24, out_$i25, out_$i30, out_$i31, out_$p33, out_$i34, out_$i35, out_$p36, out_$p37, out_$p38, out_$p39, out_$i40, out_$p41, out_$p42, out_$i43, out_$i44, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$p52, out_$i54, out_$i56, out_$i57, out_$p58, out_$p55, out_$p53, out_$p59, out_$i60, out_$i61, out_$i62, out_$i32, out_$i26, out_$i27, out_$i64, out_$i68, out_$i69, out_$i66, out_$i67, out_$i72, out_$i71, out_$p74, out_$p75, out_$p76, out_$i77, out_$i78, out_$i79, out_$p80, out_$p81, out_$i82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$p96, out_$p97, out_$i98, out_$i99, out_$i100, out_$i103, out_$i104, out_$i105, out_$i106, out_$i101, out_$i102, out_$i110, out_$i112, out_$i113, out_$i114, out_$i111, out_$i65, out_$i70, out_$i73 := ftdi_elan_read_loop_$bb5(in_$p5, in_$p9, out_$i15, out_$p16, out_$i17, out_$i18, out_$p19, out_$i20, out_$p21, out_$i22, out_$i23, out_$i28, out_$i29, out_$i24, out_$i25, out_$i30, out_$i31, out_$p33, out_$i34, out_$i35, out_$p36, out_$p37, out_$p38, out_$p39, out_$i40, out_$p41, out_$p42, out_$i43, out_$i44, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$p52, out_$i54, out_$i56, out_$i57, out_$p58, out_$p55, out_$p53, out_$p59, out_$i60, out_$i61, out_$i62, out_$i32, out_$i26, out_$i27, out_$i64, out_$i68, out_$i69, out_$i66, out_$i67, out_$i72, out_$i71, out_$p74, out_$p75, out_$p76, out_$i77, out_$i78, out_$i79, out_$p80, out_$p81, out_$i82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$p96, out_$p97, out_$i98, out_$i99, out_$i100, out_$i103, out_$i104, out_$i105, out_$i106, out_$i101, out_$i102, out_$i110, out_$i112, out_$i113, out_$i114, out_$i111, out_$i65, out_$i70, out_$i73);
    return;

  exit:
    return;
}



procedure ftdi_elan_read_loop_$bb5(in_$p5: ref, in_$p9: ref, in_$i15: i32, in_$p16: ref, in_$i17: i32, in_$i18: i64, in_$p19: ref, in_$i20: i32, in_$p21: ref, in_$i22: i64, in_$i23: i1, in_$i28: i32, in_$i29: i32, in_$i24: i32, in_$i25: i32, in_$i30: i64, in_$i31: i1, in_$p33: ref, in_$i34: i64, in_$i35: i64, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$i40: i64, in_$p41: ref, in_$p42: ref, in_$i43: i64, in_$i44: i64, in_$p45: ref, in_$i46: i1, in_$i47: i8, in_$i48: i32, in_$i49: i32, in_$i50: i32, in_$i51: i64, in_$p52: ref, in_$i54: i1, in_$i56: i32, in_$i57: i64, in_$p58: ref, in_$p55: ref, in_$p53: ref, in_$p59: ref, in_$i60: i64, in_$i61: i1, in_$i62: i32, in_$i32: i32, in_$i26: i32, in_$i27: i32, in_$i64: i1, in_$i68: i32, in_$i69: i32, in_$i66: i32, in_$i67: i32, in_$i72: i32, in_$i71: i32, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$i77: i8, in_$i78: i32, in_$i79: i32, in_$p80: ref, in_$p81: ref, in_$i82: i32, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$i86: i64, in_$i87: i32, in_$i88: i32, in_$i89: i32, in_$i90: i1, in_$i91: i32, in_$i92: i32, in_$i93: i32, in_$i94: i32, in_$i95: i64, in_$p96: ref, in_$p97: ref, in_$i98: i64, in_$i99: i1, in_$i100: i1, in_$i103: i32, in_$i104: i1, in_$i105: i32, in_$i106: i32, in_$i101: i32, in_$i102: i32, in_$i110: i1, in_$i112: i32, in_$i113: i1, in_$i114: i32, in_$i111: i32, in_$i65: i32, in_$i70: i32, in_$i73: i32) returns (out_$i15: i32, out_$p16: ref, out_$i17: i32, out_$i18: i64, out_$p19: ref, out_$i20: i32, out_$p21: ref, out_$i22: i64, out_$i23: i1, out_$i28: i32, out_$i29: i32, out_$i24: i32, out_$i25: i32, out_$i30: i64, out_$i31: i1, out_$p33: ref, out_$i34: i64, out_$i35: i64, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$i40: i64, out_$p41: ref, out_$p42: ref, out_$i43: i64, out_$i44: i64, out_$p45: ref, out_$i46: i1, out_$i47: i8, out_$i48: i32, out_$i49: i32, out_$i50: i32, out_$i51: i64, out_$p52: ref, out_$i54: i1, out_$i56: i32, out_$i57: i64, out_$p58: ref, out_$p55: ref, out_$p53: ref, out_$p59: ref, out_$i60: i64, out_$i61: i1, out_$i62: i32, out_$i32: i32, out_$i26: i32, out_$i27: i32, out_$i64: i1, out_$i68: i32, out_$i69: i32, out_$i66: i32, out_$i67: i32, out_$i72: i32, out_$i71: i32, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$i77: i8, out_$i78: i32, out_$i79: i32, out_$p80: ref, out_$p81: ref, out_$i82: i32, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$i86: i64, out_$i87: i32, out_$i88: i32, out_$i89: i32, out_$i90: i1, out_$i91: i32, out_$i92: i32, out_$i93: i32, out_$i94: i32, out_$i95: i64, out_$p96: ref, out_$p97: ref, out_$i98: i64, out_$i99: i1, out_$i100: i1, out_$i103: i32, out_$i104: i1, out_$i105: i32, out_$i106: i32, out_$i101: i32, out_$i102: i32, out_$i110: i1, out_$i112: i32, out_$i113: i1, out_$i114: i32, out_$i111: i32, out_$i65: i32, out_$i70: i32, out_$i73: i32);
  modifies $M.0, $M.16;



implementation ftdi_elan_probe_loop_$bb8(in_$p13: ref, in_$p30: ref, in_$p32: ref, in_$p37: ref, in_$p38: ref, in_$i39: i64, in_$p41: ref, in_$p42: ref, in_$i43: i8, in_$i44: i32, in_$i45: i1, in_$i46: i32, in_$i47: i1, in_$i48: i32, in_$i49: i64, in_$p50: ref, in_$p51: ref, in_$i52: i8, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$i58: i64, in_$i59: i1, in_$p64: ref, in_$i65: i8, in_$i66: i32, in_$i67: i1, in_$i68: i32, in_$i69: i1, in_$p70: ref, in_$i71: i8, in_$p72: ref, in_$i73: i32, in_$i74: i8, in_$i75: i32, in_$i76: i1, in_$i36: i32) returns (out_$p37: ref, out_$p38: ref, out_$i39: i64, out_$p41: ref, out_$p42: ref, out_$i43: i8, out_$i44: i32, out_$i45: i1, out_$i46: i32, out_$i47: i1, out_$i48: i32, out_$i49: i64, out_$p50: ref, out_$p51: ref, out_$i52: i8, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$i58: i64, out_$i59: i1, out_$p64: ref, out_$i65: i8, out_$i66: i32, out_$i67: i1, out_$i68: i32, out_$i69: i1, out_$p70: ref, out_$i71: i8, out_$p72: ref, out_$i73: i32, out_$i74: i8, out_$i75: i32, out_$i76: i1, out_$i36: i32)
{

  entry:
    out_$p37, out_$p38, out_$i39, out_$p41, out_$p42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$p50, out_$p51, out_$i52, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$i58, out_$i59, out_$p64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$p70, out_$i71, out_$p72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i36 := in_$p37, in_$p38, in_$i39, in_$p41, in_$p42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$p50, in_$p51, in_$i52, in_$p53, in_$p54, in_$p55, in_$p56, in_$p57, in_$i58, in_$i59, in_$p64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69, in_$p70, in_$i71, in_$p72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i36;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_977;

  $bb26:
    assume out_$i76 == 1;
    assume {:verifier.code 0} true;
    out_$i36 := out_$i73;
    goto $bb26_dummy;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    out_$i76 := $sgt.i32(out_$i75, out_$i73);
    goto corral_source_split_1036;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    out_$i75 := $zext.i8.i32(out_$i74);
    goto corral_source_split_1035;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    out_$i74 := $load.i8($M.0, in_$p32);
    goto corral_source_split_1034;

  $bb25:
    assume {:verifier.code 0} true;
    out_$i73 := $add.i32(out_$i36, 1);
    call {:si_unique_call 257} {:cexpr "i"} boogie_si_record_i32(out_$i73);
    goto corral_source_split_1033;

  $bb21:
    assume !(out_$i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb23:
    assume !(out_$i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p72, out_$i71);
    goto corral_source_split_1031;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref(in_$p13, $mul.ref(0, 8488)), $mul.ref(7433, 1));
    goto corral_source_split_1030;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    out_$i71 := $load.i8($M.0, out_$p70);
    goto corral_source_split_1029;

  $bb22:
    assume out_$i69 == 1;
    out_$p70 := $add.ref($add.ref($add.ref(out_$p38, $mul.ref(out_$i39, 72)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_1028;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    out_$i69 := $ne.i32(out_$i68, 0);
    goto corral_source_split_1026;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 255} out_$i68 := usb_endpoint_is_bulk_out(out_$p41);
    call {:si_unique_call 256} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i68);
    goto corral_source_split_1025;

  $bb20:
    assume out_$i67 == 1;
    goto corral_source_split_1024;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    out_$i67 := $eq.i32(out_$i66, 0);
    goto corral_source_split_1022;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    out_$i66 := $zext.i8.i32(out_$i65);
    goto corral_source_split_1021;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    out_$i65 := $load.i8($M.0, out_$p64);
    goto corral_source_split_1020;

  $bb19:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(in_$p13, $mul.ref(0, 8488)), $mul.ref(7433, 1));
    goto corral_source_split_1019;

  $bb11:
    assume !(out_$i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume !(out_$i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume !(out_$i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    out_$i59 := $eq.i64(out_$i58, 0);
    goto corral_source_split_1007;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    out_$i58 := $p2i.ref.i64(out_$p57);
    goto corral_source_split_1006;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    out_$p57 := $load.ref($M.0, out_$p56);
    goto corral_source_split_1005;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(in_$p13, $mul.ref(0, 8488)), $mul.ref(7400, 1));
    goto corral_source_split_1004;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p55, out_$p54);
    goto corral_source_split_1003;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(in_$p13, $mul.ref(0, 8488)), $mul.ref(7400, 1));
    goto corral_source_split_1002;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 253} out_$p54 := kmalloc(out_$i49, 208);
    goto corral_source_split_1001;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p53, out_$i52);
    goto corral_source_split_1000;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(in_$p13, $mul.ref(0, 8488)), $mul.ref(7432, 1));
    goto corral_source_split_999;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    out_$i52 := $load.i8($M.0, out_$p51);
    goto corral_source_split_998;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p50, out_$i49);
    out_$p51 := $add.ref($add.ref($add.ref(out_$p38, $mul.ref(out_$i39, 72)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_997;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(in_$p13, $mul.ref(0, 8488)), $mul.ref(7408, 1));
    goto corral_source_split_996;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    out_$i49 := $sext.i32.i64(out_$i48);
    call {:si_unique_call 252} {:cexpr "buffer_size"} boogie_si_record_i64(out_$i49);
    goto corral_source_split_995;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} out_$i48 := usb_endpoint_maxp(out_$p41);
    call {:si_unique_call 251} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i48);
    goto corral_source_split_994;

  $bb12:
    assume out_$i47 == 1;
    goto corral_source_split_993;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    out_$i47 := $ne.i32(out_$i46, 0);
    goto corral_source_split_991;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} out_$i46 := usb_endpoint_is_bulk_in(out_$p41);
    call {:si_unique_call 249} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i46);
    goto corral_source_split_990;

  $bb10:
    assume out_$i45 == 1;
    goto corral_source_split_989;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    out_$i45 := $eq.i32(out_$i44, 0);
    goto corral_source_split_987;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    out_$i44 := $zext.i8.i32(out_$i43);
    goto corral_source_split_986;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i8($M.0, out_$p42);
    goto corral_source_split_985;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(in_$p13, $mul.ref(0, 8488)), $mul.ref(7432, 1));
    goto corral_source_split_984;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(out_$p38, $mul.ref(out_$i39, 72)), $mul.ref(0, 1));
    goto corral_source_split_983;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    goto corral_source_split_982;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    out_$i39 := $sext.i32.i64(out_$i36);
    goto corral_source_split_981;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    out_$p38 := $load.ref($M.0, out_$p37);
    goto corral_source_split_980;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(in_$p30, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_979;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb26_dummy:
    call {:si_unique_call 1} out_$p37, out_$p38, out_$i39, out_$p41, out_$p42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$p50, out_$p51, out_$i52, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$i58, out_$i59, out_$p64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$p70, out_$i71, out_$p72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i36 := ftdi_elan_probe_loop_$bb8(in_$p13, in_$p30, in_$p32, out_$p37, out_$p38, out_$i39, out_$p41, out_$p42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$p50, out_$p51, out_$i52, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$i58, out_$i59, out_$p64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$p70, out_$i71, out_$p72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i36);
    return;

  exit:
    return;
}



procedure ftdi_elan_probe_loop_$bb8(in_$p13: ref, in_$p30: ref, in_$p32: ref, in_$p37: ref, in_$p38: ref, in_$i39: i64, in_$p41: ref, in_$p42: ref, in_$i43: i8, in_$i44: i32, in_$i45: i1, in_$i46: i32, in_$i47: i1, in_$i48: i32, in_$i49: i64, in_$p50: ref, in_$p51: ref, in_$i52: i8, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$i58: i64, in_$i59: i1, in_$p64: ref, in_$i65: i8, in_$i66: i32, in_$i67: i1, in_$i68: i32, in_$i69: i1, in_$p70: ref, in_$i71: i8, in_$p72: ref, in_$i73: i32, in_$i74: i8, in_$i75: i32, in_$i76: i1, in_$i36: i32) returns (out_$p37: ref, out_$p38: ref, out_$i39: i64, out_$p41: ref, out_$p42: ref, out_$i43: i8, out_$i44: i32, out_$i45: i1, out_$i46: i32, out_$i47: i1, out_$i48: i32, out_$i49: i64, out_$p50: ref, out_$p51: ref, out_$i52: i8, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$i58: i64, out_$i59: i1, out_$p64: ref, out_$i65: i8, out_$i66: i32, out_$i67: i1, out_$i68: i32, out_$i69: i1, out_$p70: ref, out_$i71: i8, out_$p72: ref, out_$i73: i32, out_$i74: i8, out_$i75: i32, out_$i76: i1, out_$i36: i32);
  modifies $M.0, $CurrAddr;



implementation ftdi_elan_abandon_completions_loop_$bb4(in_$p0: ref, in_$p2: ref, in_$p4: ref, in_$p7: ref, in_$i8: i32, in_$p9: ref, in_$i10: i32, in_$i11: i32, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i64, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$i23: i32, in_$i24: i32, in_$i25: i1) returns (out_$p7: ref, out_$i8: i32, out_$p9: ref, out_$i10: i32, out_$i11: i32, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i64, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$i23: i32, out_$i24: i32, out_$i25: i1)
{

  entry:
    out_$p7, out_$i8, out_$p9, out_$i10, out_$i11, out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$i25 := in_$p7, in_$i8, in_$p9, in_$i10, in_$i11, in_$p12, in_$p13, in_$p14, in_$i15, in_$i16, in_$p18, in_$p19, in_$p20, in_$p21, in_$p22, in_$i23, in_$i24, in_$i25;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6:
    assume {:verifier.code 0} true;
    assume out_$i25 == 1;
    goto $bb6_dummy;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    out_$i25 := $sgt.i32(out_$i23, out_$i24);
    goto corral_source_split_1373;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i32($M.0, in_$p4);
    goto corral_source_split_1372;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    out_$i23 := $load.i32($M.0, in_$p2);
    goto corral_source_split_1371;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} complete_(out_$p22);
    goto corral_source_split_1370;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p14, $mul.ref(out_$i16, 120)), $mul.ref(24, 1));
    goto corral_source_split_1369;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p21, 0);
    goto corral_source_split_1368;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    out_$p21 := $load.ref($M.0, out_$p20);
    goto corral_source_split_1367;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(out_$p14, $mul.ref(out_$i16, 120)), $mul.ref(8, 1));
    goto corral_source_split_1366;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p19, $sub.i32(0, 108));
    goto corral_source_split_1365;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.0, out_$p18);
    goto corral_source_split_1364;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(out_$p14, $mul.ref(out_$i16, 120)), $mul.ref(16, 1));
    goto corral_source_split_1363;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    goto corral_source_split_1362;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    out_$i16 := $and.i64(out_$i15, 31);
    goto corral_source_split_1361;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    out_$i15 := $sext.i32.i64(out_$i8);
    goto corral_source_split_1360;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    out_$p14 := $bitcast.ref.ref(out_$p13);
    goto corral_source_split_1359;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(960, 1));
    goto corral_source_split_1358;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p12, out_$i11);
    goto corral_source_split_1357;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(956, 1));
    goto corral_source_split_1356;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    out_$i11 := $add.i32(out_$i10, 1);
    goto corral_source_split_1355;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    out_$i10 := $load.i32($M.0, out_$p9);
    goto corral_source_split_1354;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(956, 1));
    goto corral_source_split_1353;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    out_$i8 := $load.i32($M.0, out_$p7);
    call {:si_unique_call 315} {:cexpr "tmp"} boogie_si_record_i32(out_$i8);
    goto corral_source_split_1352;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(956, 1));
    goto corral_source_split_1351;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p7, out_$i8, out_$p9, out_$i10, out_$i11, out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$i25 := ftdi_elan_abandon_completions_loop_$bb4(in_$p0, in_$p2, in_$p4, out_$p7, out_$i8, out_$p9, out_$i10, out_$i11, out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$i25);
    return;

  exit:
    return;
}



procedure ftdi_elan_abandon_completions_loop_$bb4(in_$p0: ref, in_$p2: ref, in_$p4: ref, in_$p7: ref, in_$i8: i32, in_$p9: ref, in_$i10: i32, in_$i11: i32, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i64, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$i23: i32, in_$i24: i32, in_$i25: i1) returns (out_$p7: ref, out_$i8: i32, out_$p9: ref, out_$i10: i32, out_$i11: i32, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i64, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$i23: i32, out_$i24: i32, out_$i25: i1);
  modifies $M.0;



implementation {:SIextraRecBound 4} ftdi_elan_abandon_targets_loop_$bb1(in_$p0: ref, in_$p3: ref, in_$p4: ref, in_$i5: i64, in_$p6: ref, in_$p7: ref, in_$i8: i32, in_$i9: i1, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$i13: i32, in_$i14: i1, in_$i2: i32) returns (out_$p3: ref, out_$p4: ref, out_$i5: i64, out_$p6: ref, out_$p7: ref, out_$i8: i32, out_$i9: i1, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$i13: i32, out_$i14: i1, out_$i2: i32)
{

  entry:
    out_$p3, out_$p4, out_$i5, out_$p6, out_$p7, out_$i8, out_$i9, out_$p10, out_$p11, out_$p12, out_$i13, out_$i14, out_$i2 := in_$p3, in_$p4, in_$i5, in_$p6, in_$p7, in_$i8, in_$i9, in_$p10, in_$p11, in_$p12, in_$i13, in_$i14, in_$i2;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_1384;

  $bb6:
    assume out_$i14 == 1;
    assume {:verifier.code 0} true;
    out_$i2 := out_$i13;
    goto $bb6_dummy;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    out_$i14 := $sgt.i32(out_$i2, 0);
    goto corral_source_split_1404;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i13 := $sub.i32(out_$i2, 1);
    call {:si_unique_call 322} {:cexpr "ed_number"} boogie_si_record_i32(out_$i13);
    goto corral_source_split_1403;

  $bb4:
    assume !(out_$i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_138:
    goto corral_source_split_1401;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} ldv_mutex_lock_26(out_$p12);
    goto SeqInstr_137;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(16, 1));
    goto corral_source_split_1400;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} ftdi_elan_do_callback(in_$p0, out_$p6, $0.ref, 0);
    goto corral_source_split_1399;

  SeqInstr_135:
    goto corral_source_split_1398;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 319} ldv_mutex_unlock_25(out_$p11);
    goto SeqInstr_134;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(16, 1));
    goto corral_source_split_1397;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p10, 5);
    goto corral_source_split_1396;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(out_$p4, $mul.ref(out_$i5, 64)), $mul.ref(24, 1));
    goto corral_source_split_1395;

  $bb3:
    assume out_$i9 == 1;
    goto corral_source_split_1394;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    out_$i9 := $eq.i32(out_$i8, 1);
    goto corral_source_split_1392;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    out_$i8 := $load.i32($M.0, out_$p7);
    goto corral_source_split_1391;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref($add.ref(out_$p4, $mul.ref(out_$i5, 64)), $mul.ref(48, 1));
    goto corral_source_split_1390;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref(out_$p4, $mul.ref(out_$i5, 64));
    goto corral_source_split_1389;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    out_$i5 := $sext.i32.i64(out_$i2);
    goto corral_source_split_1388;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    out_$p4 := $bitcast.ref.ref(out_$p3);
    goto corral_source_split_1387;

  $bb2:
    assume {:verifier.code 0} true;
    out_$p3 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(4800, 1));
    goto corral_source_split_1386;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p3, out_$p4, out_$i5, out_$p6, out_$p7, out_$i8, out_$i9, out_$p10, out_$p11, out_$p12, out_$i13, out_$i14, out_$i2 := ftdi_elan_abandon_targets_loop_$bb1(in_$p0, out_$p3, out_$p4, out_$i5, out_$p6, out_$p7, out_$i8, out_$i9, out_$p10, out_$p11, out_$p12, out_$i13, out_$i14, out_$i2);
    return;

  exit:
    return;
}



procedure ftdi_elan_abandon_targets_loop_$bb1(in_$p0: ref, in_$p3: ref, in_$p4: ref, in_$i5: i64, in_$p6: ref, in_$p7: ref, in_$i8: i32, in_$i9: i1, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$i13: i32, in_$i14: i1, in_$i2: i32) returns (out_$p3: ref, out_$p4: ref, out_$i5: i64, out_$p6: ref, out_$p7: ref, out_$i8: i32, out_$i9: i1, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$i13: i32, out_$i14: i1, out_$i2: i32);
  modifies $M.4, assertsPassed, $M.0;



implementation ftdi_elan_synchronize_loop_$bb25(in_$p1: ref, in_$p60: ref, in_$i61: i8, in_$i62: i1, in_$i63: i32, in_$i64: i32, in_$i65: i64, in_$p66: ref, in_$i68: i1, in_$i70: i32, in_$i71: i64, in_$p72: ref, in_$p69: ref, in_$p67: ref, in_$i73: i32, in_$i74: i32, in_$i75: i32, in_$i76: i32, in_$i77: i1, in_$i57: i32, in_$p58: ref, in_$p59: ref, in_$i78: i8) returns (out_$p60: ref, out_$i61: i8, out_$i62: i1, out_$i63: i32, out_$i64: i32, out_$i65: i64, out_$p66: ref, out_$i68: i1, out_$i70: i32, out_$i71: i64, out_$p72: ref, out_$p69: ref, out_$p67: ref, out_$i73: i32, out_$i74: i32, out_$i75: i32, out_$i76: i32, out_$i77: i1, out_$i57: i32, out_$p58: ref, out_$p59: ref, out_$i78: i8)
{

  entry:
    out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p66, out_$i68, out_$i70, out_$i71, out_$p72, out_$p69, out_$p67, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i57, out_$p58, out_$p59, out_$i78 := in_$p60, in_$i61, in_$i62, in_$i63, in_$i64, in_$i65, in_$p66, in_$i68, in_$i70, in_$i71, in_$p72, in_$p69, in_$p67, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$i57, in_$p58, in_$p59, in_$i78;
    goto $bb25, exit;

  $bb25:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1829;

  $bb33:
    assume out_$i77 == 1;
    assume {:verifier.code 0} true;
    out_$i57, out_$p58, out_$p59 := out_$i73, out_$p67, out_$p60;
    goto $bb33_dummy;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    out_$i78 := out_$i61;
    assume true;
    goto $bb33;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    out_$i77 := $sgt.i32(out_$i74, 0);
    goto corral_source_split_1850;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $M.16 := $store.i32($M.16, in_$p1, out_$i76);
    goto corral_source_split_1849;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    out_$i76 := $sub.i32(out_$i75, 1);
    goto corral_source_split_1848;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    out_$i75 := $load.i32($M.16, in_$p1);
    goto corral_source_split_1847;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    out_$i74 := $load.i32($M.16, in_$p1);
    call {:si_unique_call 395} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i74);
    goto corral_source_split_1846;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    out_$i73 := $add.i32(out_$i57, 1);
    call {:si_unique_call 394} {:cexpr "bytes_read"} boogie_si_record_i32(out_$i73);
    goto corral_source_split_1845;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_1844;

  $bb32:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$p67 := out_$p69;
    goto $bb29;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    out_$p67 := out_$p66;
    goto $bb29;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref(out_$p58, $mul.ref(out_$i65, 1));
    goto corral_source_split_1839;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    out_$i65 := $sext.i32.i64(out_$i64);
    goto corral_source_split_1838;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} out_$i64 := sprintf.ref.ref.i32(out_$p58, .str.4, out_$i63);
    call {:si_unique_call 393} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i64);
    goto corral_source_split_1837;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    out_$i63 := $zext.i8.i32(out_$i61);
    goto corral_source_split_1836;

  $bb27:
    assume out_$i62 == 1;
    goto corral_source_split_1835;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    out_$i62 := $slt.i32(out_$i57, 31);
    goto corral_source_split_1833;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    out_$i61 := $load.i8($M.0, out_$p59);
    call {:si_unique_call 391} {:cexpr "c"} boogie_si_record_i8(out_$i61);
    goto corral_source_split_1832;

  $bb26:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref(out_$p59, $mul.ref(1, 1));
    goto corral_source_split_1831;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref(out_$p58, $mul.ref(out_$i71, 1));
    assume {:verifier.code 0} true;
    out_$p69 := out_$p72;
    goto $bb32;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    out_$p69 := out_$p58;
    goto $bb32;

  $bb30:
    assume out_$i68 == 1;
    goto corral_source_split_1852;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    out_$i68 := $sgt.i32(out_$i57, 31);
    goto corral_source_split_1842;

  $bb28:
    assume !(out_$i62 == 1);
    goto corral_source_split_1841;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    out_$i71 := $sext.i32.i64(out_$i70);
    goto corral_source_split_1856;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} out_$i70 := sprintf.ref.ref(out_$p58, .str.5);
    call {:si_unique_call 397} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i70);
    goto corral_source_split_1855;

  $bb31:
    assume !(out_$i68 == 1);
    goto corral_source_split_1854;

  $bb33_dummy:
    call {:si_unique_call 1} out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p66, out_$i68, out_$i70, out_$i71, out_$p72, out_$p69, out_$p67, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i57, out_$p58, out_$p59, out_$i78 := ftdi_elan_synchronize_loop_$bb25(in_$p1, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p66, out_$i68, out_$i70, out_$i71, out_$p72, out_$p69, out_$p67, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i57, out_$p58, out_$p59, out_$i78);
    return;

  exit:
    return;
}



procedure ftdi_elan_synchronize_loop_$bb25(in_$p1: ref, in_$p60: ref, in_$i61: i8, in_$i62: i1, in_$i63: i32, in_$i64: i32, in_$i65: i64, in_$p66: ref, in_$i68: i1, in_$i70: i32, in_$i71: i64, in_$p72: ref, in_$p69: ref, in_$p67: ref, in_$i73: i32, in_$i74: i32, in_$i75: i32, in_$i76: i32, in_$i77: i1, in_$i57: i32, in_$p58: ref, in_$p59: ref, in_$i78: i8) returns (out_$p60: ref, out_$i61: i8, out_$i62: i1, out_$i63: i32, out_$i64: i32, out_$i65: i64, out_$p66: ref, out_$i68: i1, out_$i70: i32, out_$i71: i64, out_$p72: ref, out_$p69: ref, out_$p67: ref, out_$i73: i32, out_$i74: i32, out_$i75: i32, out_$i76: i32, out_$i77: i1, out_$i57: i32, out_$p58: ref, out_$p59: ref, out_$i78: i8);
  modifies $M.16;



implementation ftdi_elan_synchronize_loop_$bb19(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i26: i32, in_$i27: i32, in_$i28: i32, in_$i29: i32, in_$i30: i32, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$i34: i8, in_$i35: i32, in_$i36: i32, in_$p37: ref, in_$p38: ref, in_$i39: i32, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$i43: i64, in_$i44: i32, in_$i45: i32, in_$i46: i32, in_$i47: i1, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$i52: i32, in_$i53: i32, in_$i54: i32, in_$i55: i1, in_$p60: ref, in_$i61: i8, in_$i62: i1, in_$i63: i32, in_$i64: i32, in_$i65: i64, in_$p66: ref, in_$i68: i1, in_$i70: i32, in_$i71: i64, in_$p72: ref, in_$p69: ref, in_$p67: ref, in_$i73: i32, in_$i74: i32, in_$i75: i32, in_$i76: i32, in_$i77: i1, in_$i57: i32, in_$p58: ref, in_$p59: ref, in_$i78: i8, in_$i56: i8, in_$i79: i32, in_$i80: i1, in_$i81: i32, in_$i82: i1, in_$i83: i32, in_$i84: i32, in_$i85: i32, in_$i86: i32, in_$i87: i32, in_$i88: i32, in_$i89: i1, in_$i90: i32, in_$i91: i32, in_$i92: i32, in_$i101: i32, in_$i102: i1, in_$p103: ref, in_$p104: ref, in_$i105: i8, in_$p106: ref, in_$p107: ref, in_$p108: ref, in_$i109: i8, in_$i110: i32, in_$i111: i1, in_$i112: i32, in_$i113: i1, in_$i114: i32, in_$i115: i1, in_$i116: i32, in_$i117: i32, in_$i118: i32, in_$i121: i32, in_$i122: i1, in_$i123: i32, in_$i124: i1, in_$i125: i32, in_$i126: i1, in_$i127: i32, in_$i128: i32, in_$i129: i32, in_$i133: i32, in_$i134: i1, in_$i135: i32, in_$i136: i32, in_$i137: i32, in_$i141: i32, in_$i142: i1, in_$i143: i32, in_$i144: i1, in_$i145: i32, in_$i146: i32, in_$i147: i32, in_$i151: i1, in_$i152: i32, in_$i153: i1, in_$i154: i32, in_$i155: i32, in_$i156: i32, in_$i160: i1, in_$i161: i32, in_$i162: i1, in_$i163: i32, in_$i164: i32, in_$i165: i32, in_$i169: i32, in_$p170: ref, in_$p171: ref, in_$p172: ref, in_$i173: i32, in_$i174: i1, in_$i175: i32, in_$i176: i32, in_$i177: i32) returns (out_$i26: i32, out_$i27: i32, out_$i28: i32, out_$i29: i32, out_$i30: i32, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$i34: i8, out_$i35: i32, out_$i36: i32, out_$p37: ref, out_$p38: ref, out_$i39: i32, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$i43: i64, out_$i44: i32, out_$i45: i32, out_$i46: i32, out_$i47: i1, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$i52: i32, out_$i53: i32, out_$i54: i32, out_$i55: i1, out_$p60: ref, out_$i61: i8, out_$i62: i1, out_$i63: i32, out_$i64: i32, out_$i65: i64, out_$p66: ref, out_$i68: i1, out_$i70: i32, out_$i71: i64, out_$p72: ref, out_$p69: ref, out_$p67: ref, out_$i73: i32, out_$i74: i32, out_$i75: i32, out_$i76: i32, out_$i77: i1, out_$i57: i32, out_$p58: ref, out_$p59: ref, out_$i78: i8, out_$i56: i8, out_$i79: i32, out_$i80: i1, out_$i81: i32, out_$i82: i1, out_$i83: i32, out_$i84: i32, out_$i85: i32, out_$i86: i32, out_$i87: i32, out_$i88: i32, out_$i89: i1, out_$i90: i32, out_$i91: i32, out_$i92: i32, out_$i101: i32, out_$i102: i1, out_$p103: ref, out_$p104: ref, out_$i105: i8, out_$p106: ref, out_$p107: ref, out_$p108: ref, out_$i109: i8, out_$i110: i32, out_$i111: i1, out_$i112: i32, out_$i113: i1, out_$i114: i32, out_$i115: i1, out_$i116: i32, out_$i117: i32, out_$i118: i32, out_$i121: i32, out_$i122: i1, out_$i123: i32, out_$i124: i1, out_$i125: i32, out_$i126: i1, out_$i127: i32, out_$i128: i32, out_$i129: i32, out_$i133: i32, out_$i134: i1, out_$i135: i32, out_$i136: i32, out_$i137: i32, out_$i141: i32, out_$i142: i1, out_$i143: i32, out_$i144: i1, out_$i145: i32, out_$i146: i32, out_$i147: i32, out_$i151: i1, out_$i152: i32, out_$i153: i1, out_$i154: i32, out_$i155: i32, out_$i156: i32, out_$i160: i1, out_$i161: i32, out_$i162: i1, out_$i163: i32, out_$i164: i32, out_$i165: i32, out_$i169: i32, out_$p170: ref, out_$p171: ref, out_$p172: ref, out_$i173: i32, out_$i174: i1, out_$i175: i32, out_$i176: i32, out_$i177: i32)
{

  entry:
    out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$i36, out_$p37, out_$p38, out_$i39, out_$p40, out_$p41, out_$p42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$p49, out_$p50, out_$p51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p66, out_$i68, out_$i70, out_$i71, out_$p72, out_$p69, out_$p67, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i57, out_$p58, out_$p59, out_$i78, out_$i56, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i101, out_$i102, out_$p103, out_$p104, out_$i105, out_$p106, out_$p107, out_$p108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i151, out_$i152, out_$i153, out_$i154, out_$i155, out_$i156, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i169, out_$p170, out_$p171, out_$p172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177 := in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$p31, in_$p32, in_$p33, in_$i34, in_$i35, in_$i36, in_$p37, in_$p38, in_$i39, in_$p40, in_$p41, in_$p42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$p49, in_$p50, in_$p51, in_$i52, in_$i53, in_$i54, in_$i55, in_$p60, in_$i61, in_$i62, in_$i63, in_$i64, in_$i65, in_$p66, in_$i68, in_$i70, in_$i71, in_$p72, in_$p69, in_$p67, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$i57, in_$p58, in_$p59, in_$i78, in_$i56, in_$i79, in_$i80, in_$i81, in_$i82, in_$i83, in_$i84, in_$i85, in_$i86, in_$i87, in_$i88, in_$i89, in_$i90, in_$i91, in_$i92, in_$i101, in_$i102, in_$p103, in_$p104, in_$i105, in_$p106, in_$p107, in_$p108, in_$i109, in_$i110, in_$i111, in_$i112, in_$i113, in_$i114, in_$i115, in_$i116, in_$i117, in_$i118, in_$i121, in_$i122, in_$i123, in_$i124, in_$i125, in_$i126, in_$i127, in_$i128, in_$i129, in_$i133, in_$i134, in_$i135, in_$i136, in_$i137, in_$i141, in_$i142, in_$i143, in_$i144, in_$i145, in_$i146, in_$i147, in_$i151, in_$i152, in_$i153, in_$i154, in_$i155, in_$i156, in_$i160, in_$i161, in_$i162, in_$i163, in_$i164, in_$i165, in_$i169, in_$p170, in_$p171, in_$p172, in_$i173, in_$i174, in_$i175, in_$i176, in_$i177;
    goto $bb19, exit;

  $bb19:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1791;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    out_$i26, out_$i27, out_$i28, out_$i29, out_$i30 := out_$i83, out_$i84, out_$i85, out_$i86, out_$i87;
    goto corral_source_split_1875_dummy;

  $bb40:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1875;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    out_$i83, out_$i84, out_$i85, out_$i86, out_$i87 := out_$i26, out_$i173, out_$i169, out_$i29, out_$i30;
    goto $bb40;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    out_$i83, out_$i84, out_$i85, out_$i86, out_$i87 := out_$i26, out_$i27, out_$i28, out_$i161, out_$i30;
    goto $bb40;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    out_$i83, out_$i84, out_$i85, out_$i86, out_$i87 := out_$i26, out_$i27, out_$i28, out_$i29, out_$i152;
    goto $bb40;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    out_$i83, out_$i84, out_$i85, out_$i86, out_$i87 := out_$i26, out_$i143, out_$i28, out_$i29, out_$i30;
    goto $bb40;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    out_$i83, out_$i84, out_$i85, out_$i86, out_$i87 := out_$i26, out_$i133, out_$i28, out_$i29, out_$i30;
    goto $bb40;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    out_$i83, out_$i84, out_$i85, out_$i86, out_$i87 := out_$i26, out_$i125, out_$i28, out_$i29, out_$i30;
    goto $bb40;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    out_$i83, out_$i84, out_$i85, out_$i86, out_$i87 := out_$i114, out_$i27, out_$i28, out_$i29, out_$i30;
    goto $bb40;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    out_$i83, out_$i84, out_$i85, out_$i86, out_$i87 := out_$i26, out_$i88, out_$i28, out_$i29, out_$i30;
    goto $bb40;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    out_$i83, out_$i84, out_$i85, out_$i86, out_$i87 := out_$i26, out_$i27, out_$i28, out_$i29, out_$i30;
    goto $bb40;

  $bb38:
    assume out_$i82 == 1;
    goto corral_source_split_1869;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    out_$i82 := $eq.i32(out_$i81, 85);
    goto corral_source_split_1867;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    out_$i81 := $zext.i8.i32(out_$i56);
    goto corral_source_split_1866;

  $bb37:
    assume !(out_$i80 == 1);
    goto corral_source_split_1865;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    out_$i80 := $eq.i32(out_$i79, 126);
    goto corral_source_split_1861;

  $bb35:
    assume {:verifier.code 0} true;
    out_$i79 := $zext.i8.i32(out_$i56);
    goto corral_source_split_1860;

  $bb24:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb23:
    assume {:verifier.code 0} true;
    assume !(out_$i55 == 1);
    goto $bb24;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    out_$i56 := out_$i78;
    goto $bb24;

  $bb34:
    assume !(out_$i77 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1858;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    out_$i78 := out_$i61;
    assume true;
    goto $bb33, $bb34;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    out_$i77 := $sgt.i32(out_$i74, 0);
    goto corral_source_split_1850;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $M.16 := $store.i32($M.16, in_$p1, out_$i76);
    goto corral_source_split_1849;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    out_$i76 := $sub.i32(out_$i75, 1);
    goto corral_source_split_1848;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    out_$i75 := $load.i32($M.16, in_$p1);
    goto corral_source_split_1847;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    out_$i74 := $load.i32($M.16, in_$p1);
    call {:si_unique_call 395} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i74);
    goto corral_source_split_1846;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    out_$i73 := $add.i32(out_$i57, 1);
    call {:si_unique_call 394} {:cexpr "bytes_read"} boogie_si_record_i32(out_$i73);
    goto corral_source_split_1845;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_1844;

  $bb32:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$p67 := out_$p69;
    goto $bb29;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    out_$p67 := out_$p66;
    goto $bb29;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref(out_$p58, $mul.ref(out_$i65, 1));
    goto corral_source_split_1839;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    out_$i65 := $sext.i32.i64(out_$i64);
    goto corral_source_split_1838;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} out_$i64 := sprintf.ref.ref.i32(out_$p58, .str.4, out_$i63);
    call {:si_unique_call 393} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i64);
    goto corral_source_split_1837;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    out_$i63 := $zext.i8.i32(out_$i61);
    goto corral_source_split_1836;

  $bb27:
    assume out_$i62 == 1;
    goto corral_source_split_1835;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    out_$i62 := $slt.i32(out_$i57, 31);
    goto corral_source_split_1833;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    out_$i61 := $load.i8($M.0, out_$p59);
    call {:si_unique_call 391} {:cexpr "c"} boogie_si_record_i8(out_$i61);
    goto corral_source_split_1832;

  $bb26:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref(out_$p59, $mul.ref(1, 1));
    goto corral_source_split_1831;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb25:
    call out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p66, out_$i68, out_$i70, out_$i71, out_$p72, out_$p69, out_$p67, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i57, out_$p58, out_$p59, out_$i78 := ftdi_elan_synchronize_loop_$bb25(in_$p1, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p66, out_$i68, out_$i70, out_$i71, out_$p72, out_$p69, out_$p67, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i57, out_$p58, out_$p59, out_$i78);
    goto $bb25_last;

  $bb25_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1829;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    out_$i57, out_$p58, out_$p59 := 0, in_$p2, out_$p50;
    goto $bb25;

  $bb33:
    assume out_$i77 == 1;
    assume {:verifier.code 0} true;
    out_$i57, out_$p58, out_$p59 := out_$i73, out_$p67, out_$p60;
    assume false;
    return;

  $bb22:
    assume out_$i55 == 1;
    goto corral_source_split_1827;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    out_$i56 := 0;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    out_$i55 := $sgt.i32(out_$i52, 0);
    goto corral_source_split_1821;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $M.16 := $store.i32($M.16, in_$p1, out_$i54);
    goto corral_source_split_1820;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    out_$i54 := $sub.i32(out_$i53, 1);
    goto corral_source_split_1819;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    out_$i53 := $load.i32($M.16, in_$p1);
    goto corral_source_split_1818;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    out_$i52 := $load.i32($M.16, in_$p1);
    call {:si_unique_call 390} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i52);
    goto corral_source_split_1817;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    $M.19 := $store.i8($M.19, out_$p51, 0);
    goto corral_source_split_1816;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(in_$p2, $mul.ref(0, 94)), $mul.ref(0, 1));
    goto corral_source_split_1815;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    out_$p50 := $load.ref($M.0, out_$p49);
    goto corral_source_split_1814;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7400, 1));
    goto corral_source_split_1813;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    goto corral_source_split_1812;

  $bb20:
    assume out_$i47 == 1;
    goto corral_source_split_1811;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    out_$i47 := $sgt.i32(out_$i46, 2);
    goto corral_source_split_1809;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    out_$i46 := $load.i32($M.16, in_$p1);
    goto corral_source_split_1808;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} out_$i45 := usb_bulk_msg(out_$p38, out_$i39, out_$p41, out_$i44, in_$p1, 500);
    call {:si_unique_call 389} {:cexpr "retval"} boogie_si_record_i32(out_$i45);
    goto corral_source_split_1807;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    out_$i44 := $trunc.i64.i32(out_$i43);
    goto corral_source_split_1806;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i64($M.0, out_$p42);
    goto corral_source_split_1805;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7408, 1));
    goto corral_source_split_1804;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    out_$p41 := $load.ref($M.0, out_$p40);
    goto corral_source_split_1803;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7400, 1));
    goto corral_source_split_1802;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    out_$i39 := $or.i32(out_$i36, $sub.i32(0, 1073741696));
    goto corral_source_split_1801;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    out_$p38 := $load.ref($M.0, out_$p37);
    goto corral_source_split_1800;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_1799;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} out_$i36 := __create_pipe(out_$p32, out_$i35);
    call {:si_unique_call 387} {:cexpr "tmp"} boogie_si_record_i32(out_$i36);
    goto corral_source_split_1798;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    out_$i35 := $zext.i8.i32(out_$i34);
    goto corral_source_split_1797;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i8($M.0, out_$p33);
    goto corral_source_split_1796;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7432, 1));
    goto corral_source_split_1795;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    out_$p32 := $load.ref($M.0, out_$p31);
    goto corral_source_split_1794;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_1793;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $M.16 := $store.i32($M.16, in_$p1, 0);
    goto corral_source_split_1792;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref(out_$p58, $mul.ref(out_$i71, 1));
    assume {:verifier.code 0} true;
    out_$p69 := out_$p72;
    goto $bb32;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    out_$p69 := out_$p58;
    goto $bb32;

  $bb30:
    assume out_$i68 == 1;
    goto corral_source_split_1852;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    out_$i68 := $sgt.i32(out_$i57, 31);
    goto corral_source_split_1842;

  $bb28:
    assume !(out_$i62 == 1);
    goto corral_source_split_1841;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    out_$i71 := $sext.i32.i64(out_$i70);
    goto corral_source_split_1856;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} out_$i70 := sprintf.ref.ref(out_$p58, .str.5);
    call {:si_unique_call 397} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i70);
    goto corral_source_split_1855;

  $bb31:
    assume !(out_$i68 == 1);
    goto corral_source_split_1854;

  $bb41:
    assume out_$i89 == 1;
    goto corral_source_split_1877;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    out_$i90, out_$i91, out_$i92 := out_$i28, out_$i29, out_$i30;
    assume true;
    goto $bb41;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    out_$i89 := $sgt.i32(out_$i27, 0);
    goto corral_source_split_1873;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    out_$i88 := $sub.i32(out_$i27, 1);
    call {:si_unique_call 398} {:cexpr "read_stop"} boogie_si_record_i32(out_$i88);
    goto corral_source_split_1872;

  $bb39:
    assume !(out_$i82 == 1);
    goto corral_source_split_1871;

  $bb53:
    assume out_$i115 == 1;
    goto corral_source_split_1915;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    out_$i116, out_$i117, out_$i118 := out_$i28, out_$i29, out_$i30;
    assume true;
    goto $bb53;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    out_$i115 := $sgt.i32(out_$i26, 0);
    goto corral_source_split_1913;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    out_$i114 := $sub.i32(out_$i26, 1);
    call {:si_unique_call 403} {:cexpr "read_stuck"} boogie_si_record_i32(out_$i114);
    goto corral_source_split_1912;

  $bb51:
    assume out_$i113 == 1;
    goto corral_source_split_1911;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    out_$i113 := $eq.i32(out_$i112, 0);
    goto corral_source_split_1906;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    out_$i112 := $zext.i8.i32(out_$i109);
    goto corral_source_split_1905;

  $bb48:
    assume out_$i111 == 1;
    goto corral_source_split_1904;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    out_$i111 := $eq.i32(out_$i110, 49);
    goto corral_source_split_1898;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    out_$i110 := $zext.i8.i32(out_$i105);
    goto corral_source_split_1897;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    out_$i109 := $load.i8($M.0, out_$p108);
    call {:si_unique_call 402} {:cexpr "s2"} boogie_si_record_i8(out_$i109);
    goto corral_source_split_1896;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    out_$p108 := $add.ref(out_$p107, $mul.ref(1, 1));
    goto corral_source_split_1895;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    out_$p107 := $load.ref($M.0, out_$p106);
    goto corral_source_split_1894;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    out_$p106 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7400, 1));
    goto corral_source_split_1893;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    out_$i105 := $load.i8($M.0, out_$p104);
    call {:si_unique_call 401} {:cexpr "s1"} boogie_si_record_i8(out_$i105);
    goto corral_source_split_1892;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    out_$p104 := $load.ref($M.0, out_$p103);
    goto corral_source_split_1891;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    out_$p103 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7400, 1));
    goto corral_source_split_1890;

  $bb46:
    assume out_$i102 == 1;
    goto corral_source_split_1889;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    out_$i102 := $sgt.i32(out_$i101, 1);
    goto corral_source_split_1825;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    out_$i101 := $load.i32($M.16, in_$p1);
    goto corral_source_split_1824;

  $bb21:
    assume !(out_$i47 == 1);
    goto corral_source_split_1823;

  $bb61:
    assume out_$i126 == 1;
    goto corral_source_split_1932;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    out_$i127, out_$i128, out_$i129 := out_$i28, out_$i29, out_$i30;
    assume true;
    goto $bb61;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    out_$i126 := $sgt.i32(out_$i27, 0);
    goto corral_source_split_1930;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    out_$i125 := $sub.i32(out_$i27, 1);
    call {:si_unique_call 407} {:cexpr "read_stop"} boogie_si_record_i32(out_$i125);
    goto corral_source_split_1929;

  $bb59:
    assume out_$i124 == 1;
    goto corral_source_split_1928;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    out_$i124 := $eq.i32(out_$i123, 96);
    goto corral_source_split_1923;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    out_$i123 := $zext.i8.i32(out_$i109);
    goto corral_source_split_1922;

  $bb56:
    assume out_$i122 == 1;
    goto corral_source_split_1921;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    out_$i122 := $eq.i32(out_$i121, 49);
    goto corral_source_split_1909;

  $bb50:
    assume {:verifier.code 0} true;
    out_$i121 := $zext.i8.i32(out_$i105);
    goto corral_source_split_1908;

  $bb49:
    assume {:verifier.code 0} true;
    assume !(out_$i111 == 1);
    goto $bb50;

  $bb52:
    assume {:verifier.code 0} true;
    assume !(out_$i113 == 1);
    goto $bb50;

  $bb63:
    assume out_$i134 == 1;
    goto corral_source_split_1940;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    out_$i135, out_$i136, out_$i137 := out_$i28, out_$i29, out_$i30;
    assume true;
    goto $bb63;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    out_$i134 := $sgt.i32(out_$i27, 0);
    goto corral_source_split_1926;

  $bb58:
    assume {:verifier.code 0} true;
    out_$i133 := $sub.i32(out_$i27, 1);
    call {:si_unique_call 406} {:cexpr "read_stop"} boogie_si_record_i32(out_$i133);
    goto corral_source_split_1925;

  $bb57:
    assume {:verifier.code 0} true;
    assume !(out_$i122 == 1);
    goto $bb58;

  $bb60:
    assume {:verifier.code 0} true;
    assume !(out_$i124 == 1);
    goto $bb58;

  $bb67:
    assume out_$i144 == 1;
    goto corral_source_split_1955;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    out_$i145, out_$i146, out_$i147 := out_$i28, out_$i29, out_$i30;
    assume true;
    goto $bb67;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    out_$i144 := $sgt.i32(out_$i27, 0);
    goto corral_source_split_1950;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    out_$i143 := $sub.i32(out_$i27, 1);
    call {:si_unique_call 410} {:cexpr "read_stop"} boogie_si_record_i32(out_$i143);
    goto corral_source_split_1949;

  $bb65:
    assume out_$i142 == 1;
    goto corral_source_split_1948;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    out_$i142 := $sgt.i32(out_$i141, 0);
    goto corral_source_split_1902;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    out_$i141 := $load.i32($M.16, in_$p1);
    goto corral_source_split_1901;

  $bb47:
    assume !(out_$i102 == 1);
    goto corral_source_split_1900;

  $bb71:
    assume out_$i153 == 1;
    goto corral_source_split_1970;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    out_$i154, out_$i155, out_$i156 := out_$i28, out_$i29, out_$i152;
    assume true;
    goto $bb71;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    out_$i153 := $sgt.i32(out_$i30, 0);
    goto corral_source_split_1965;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    out_$i152 := $sub.i32(out_$i30, 1);
    call {:si_unique_call 412} {:cexpr "retry_on_timeout"} boogie_si_record_i32(out_$i152);
    goto corral_source_split_1964;

  $bb69:
    assume out_$i151 == 1;
    goto corral_source_split_1963;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    out_$i151 := $eq.i32(out_$i45, $sub.i32(0, 110));
    goto corral_source_split_1953;

  $bb66:
    assume !(out_$i142 == 1);
    goto corral_source_split_1952;

  $bb75:
    assume out_$i162 == 1;
    goto corral_source_split_1991;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    out_$i163, out_$i164, out_$i165 := out_$i28, out_$i30, out_$i161;
    assume true;
    goto $bb75;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    out_$i162 := $sgt.i32(out_$i29, 0);
    goto corral_source_split_1980;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    out_$i161 := $sub.i32(out_$i29, 1);
    call {:si_unique_call 414} {:cexpr "retry_on_empty"} boogie_si_record_i32(out_$i161);
    goto corral_source_split_1979;

  $bb73:
    assume out_$i160 == 1;
    goto corral_source_split_1978;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    out_$i160 := $eq.i32(out_$i45, 0);
    goto corral_source_split_1968;

  $bb70:
    assume !(out_$i151 == 1);
    goto corral_source_split_1967;

  $bb77:
    assume out_$i174 == 1;
    goto corral_source_split_1999;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    out_$i175, out_$i176, out_$i177 := out_$i29, out_$i30, out_$i169;
    assume true;
    goto $bb77;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    out_$i174 := $sgt.i32(out_$i27, 0);
    goto corral_source_split_1989;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    out_$i173 := $sub.i32(out_$i27, 1);
    call {:si_unique_call 417} {:cexpr "read_stop"} boogie_si_record_i32(out_$i173);
    goto corral_source_split_1988;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} dev_err.ref.ref.i32(out_$p172, .str.21, out_$i45);
    goto corral_source_split_1987;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    out_$p172 := $add.ref($add.ref(out_$p171, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_1986;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    out_$p171 := $load.ref($M.0, out_$p170);
    goto corral_source_split_1985;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    out_$p170 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_1984;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    out_$i169 := $add.i32(out_$i28, 1);
    call {:si_unique_call 415} {:cexpr "err_count"} boogie_si_record_i32(out_$i169);
    goto corral_source_split_1983;

  $bb74:
    assume !(out_$i160 == 1);
    goto corral_source_split_1982;

  corral_source_split_1875_dummy:
    call {:si_unique_call 1} out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$i36, out_$p37, out_$p38, out_$i39, out_$p40, out_$p41, out_$p42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$p49, out_$p50, out_$p51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p66, out_$i68, out_$i70, out_$i71, out_$p72, out_$p69, out_$p67, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i57, out_$p58, out_$p59, out_$i78, out_$i56, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i101, out_$i102, out_$p103, out_$p104, out_$i105, out_$p106, out_$p107, out_$p108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i151, out_$i152, out_$i153, out_$i154, out_$i155, out_$i156, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i169, out_$p170, out_$p171, out_$p172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177 := ftdi_elan_synchronize_loop_$bb19(in_$p0, in_$p1, in_$p2, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$i36, out_$p37, out_$p38, out_$i39, out_$p40, out_$p41, out_$p42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$p49, out_$p50, out_$p51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p66, out_$i68, out_$i70, out_$i71, out_$p72, out_$p69, out_$p67, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i57, out_$p58, out_$p59, out_$i78, out_$i56, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i101, out_$i102, out_$p103, out_$p104, out_$i105, out_$p106, out_$p107, out_$p108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i151, out_$i152, out_$i153, out_$i154, out_$i155, out_$i156, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i169, out_$p170, out_$p171, out_$p172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177);
    return;

  exit:
    return;
}



procedure ftdi_elan_synchronize_loop_$bb19(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i26: i32, in_$i27: i32, in_$i28: i32, in_$i29: i32, in_$i30: i32, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$i34: i8, in_$i35: i32, in_$i36: i32, in_$p37: ref, in_$p38: ref, in_$i39: i32, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$i43: i64, in_$i44: i32, in_$i45: i32, in_$i46: i32, in_$i47: i1, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$i52: i32, in_$i53: i32, in_$i54: i32, in_$i55: i1, in_$p60: ref, in_$i61: i8, in_$i62: i1, in_$i63: i32, in_$i64: i32, in_$i65: i64, in_$p66: ref, in_$i68: i1, in_$i70: i32, in_$i71: i64, in_$p72: ref, in_$p69: ref, in_$p67: ref, in_$i73: i32, in_$i74: i32, in_$i75: i32, in_$i76: i32, in_$i77: i1, in_$i57: i32, in_$p58: ref, in_$p59: ref, in_$i78: i8, in_$i56: i8, in_$i79: i32, in_$i80: i1, in_$i81: i32, in_$i82: i1, in_$i83: i32, in_$i84: i32, in_$i85: i32, in_$i86: i32, in_$i87: i32, in_$i88: i32, in_$i89: i1, in_$i90: i32, in_$i91: i32, in_$i92: i32, in_$i101: i32, in_$i102: i1, in_$p103: ref, in_$p104: ref, in_$i105: i8, in_$p106: ref, in_$p107: ref, in_$p108: ref, in_$i109: i8, in_$i110: i32, in_$i111: i1, in_$i112: i32, in_$i113: i1, in_$i114: i32, in_$i115: i1, in_$i116: i32, in_$i117: i32, in_$i118: i32, in_$i121: i32, in_$i122: i1, in_$i123: i32, in_$i124: i1, in_$i125: i32, in_$i126: i1, in_$i127: i32, in_$i128: i32, in_$i129: i32, in_$i133: i32, in_$i134: i1, in_$i135: i32, in_$i136: i32, in_$i137: i32, in_$i141: i32, in_$i142: i1, in_$i143: i32, in_$i144: i1, in_$i145: i32, in_$i146: i32, in_$i147: i32, in_$i151: i1, in_$i152: i32, in_$i153: i1, in_$i154: i32, in_$i155: i32, in_$i156: i32, in_$i160: i1, in_$i161: i32, in_$i162: i1, in_$i163: i32, in_$i164: i32, in_$i165: i32, in_$i169: i32, in_$p170: ref, in_$p171: ref, in_$p172: ref, in_$i173: i32, in_$i174: i1, in_$i175: i32, in_$i176: i32, in_$i177: i32) returns (out_$i26: i32, out_$i27: i32, out_$i28: i32, out_$i29: i32, out_$i30: i32, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$i34: i8, out_$i35: i32, out_$i36: i32, out_$p37: ref, out_$p38: ref, out_$i39: i32, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$i43: i64, out_$i44: i32, out_$i45: i32, out_$i46: i32, out_$i47: i1, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$i52: i32, out_$i53: i32, out_$i54: i32, out_$i55: i1, out_$p60: ref, out_$i61: i8, out_$i62: i1, out_$i63: i32, out_$i64: i32, out_$i65: i64, out_$p66: ref, out_$i68: i1, out_$i70: i32, out_$i71: i64, out_$p72: ref, out_$p69: ref, out_$p67: ref, out_$i73: i32, out_$i74: i32, out_$i75: i32, out_$i76: i32, out_$i77: i1, out_$i57: i32, out_$p58: ref, out_$p59: ref, out_$i78: i8, out_$i56: i8, out_$i79: i32, out_$i80: i1, out_$i81: i32, out_$i82: i1, out_$i83: i32, out_$i84: i32, out_$i85: i32, out_$i86: i32, out_$i87: i32, out_$i88: i32, out_$i89: i1, out_$i90: i32, out_$i91: i32, out_$i92: i32, out_$i101: i32, out_$i102: i1, out_$p103: ref, out_$p104: ref, out_$i105: i8, out_$p106: ref, out_$p107: ref, out_$p108: ref, out_$i109: i8, out_$i110: i32, out_$i111: i1, out_$i112: i32, out_$i113: i1, out_$i114: i32, out_$i115: i1, out_$i116: i32, out_$i117: i32, out_$i118: i32, out_$i121: i32, out_$i122: i1, out_$i123: i32, out_$i124: i1, out_$i125: i32, out_$i126: i1, out_$i127: i32, out_$i128: i32, out_$i129: i32, out_$i133: i32, out_$i134: i1, out_$i135: i32, out_$i136: i32, out_$i137: i32, out_$i141: i32, out_$i142: i1, out_$i143: i32, out_$i144: i1, out_$i145: i32, out_$i146: i32, out_$i147: i32, out_$i151: i1, out_$i152: i32, out_$i153: i1, out_$i154: i32, out_$i155: i32, out_$i156: i32, out_$i160: i1, out_$i161: i32, out_$i162: i1, out_$i163: i32, out_$i164: i32, out_$i165: i32, out_$i169: i32, out_$p170: ref, out_$p171: ref, out_$p172: ref, out_$i173: i32, out_$i174: i1, out_$i175: i32, out_$i176: i32, out_$i177: i32);
  modifies $M.16, $M.19;



implementation ftdi_elan_synchronize_loop_$bb15(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i25: i32, in_$i21: i32, in_$i22: i32, in_$i23: i32, in_$i26: i32, in_$i27: i32, in_$i28: i32, in_$i29: i32, in_$i30: i32, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$i34: i8, in_$i35: i32, in_$i36: i32, in_$p37: ref, in_$p38: ref, in_$i39: i32, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$i43: i64, in_$i44: i32, in_$i45: i32, in_$i46: i32, in_$i47: i1, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$i52: i32, in_$i53: i32, in_$i54: i32, in_$i55: i1, in_$p60: ref, in_$i61: i8, in_$i62: i1, in_$i63: i32, in_$i64: i32, in_$i65: i64, in_$p66: ref, in_$i68: i1, in_$i70: i32, in_$i71: i64, in_$p72: ref, in_$p69: ref, in_$p67: ref, in_$i73: i32, in_$i74: i32, in_$i75: i32, in_$i76: i32, in_$i77: i1, in_$i57: i32, in_$p58: ref, in_$p59: ref, in_$i78: i8, in_$i56: i8, in_$i79: i32, in_$i80: i1, in_$i81: i32, in_$i82: i1, in_$i83: i32, in_$i84: i32, in_$i85: i32, in_$i86: i32, in_$i87: i32, in_$i88: i32, in_$i89: i1, in_$i90: i32, in_$i91: i32, in_$i92: i32, in_$i101: i32, in_$i102: i1, in_$p103: ref, in_$p104: ref, in_$i105: i8, in_$p106: ref, in_$p107: ref, in_$p108: ref, in_$i109: i8, in_$i110: i32, in_$i111: i1, in_$i112: i32, in_$i113: i1, in_$i114: i32, in_$i115: i1, in_$i116: i32, in_$i117: i32, in_$i118: i32, in_$i119: i32, in_$i120: i1, in_$i121: i32, in_$i122: i1, in_$i123: i32, in_$i124: i1, in_$i125: i32, in_$i126: i1, in_$i127: i32, in_$i128: i32, in_$i129: i32, in_$i133: i32, in_$i134: i1, in_$i135: i32, in_$i136: i32, in_$i137: i32, in_$i141: i32, in_$i142: i1, in_$i143: i32, in_$i144: i1, in_$i145: i32, in_$i146: i32, in_$i147: i32, in_$i151: i1, in_$i152: i32, in_$i153: i1, in_$i154: i32, in_$i155: i32, in_$i156: i32, in_$i160: i1, in_$i161: i32, in_$i162: i1, in_$i163: i32, in_$i164: i32, in_$i165: i32, in_$i169: i32, in_$p170: ref, in_$p171: ref, in_$p172: ref, in_$i173: i32, in_$i174: i1, in_$i175: i32, in_$i176: i32, in_$i177: i32) returns (out_$i25: i32, out_$i21: i32, out_$i22: i32, out_$i23: i32, out_$i26: i32, out_$i27: i32, out_$i28: i32, out_$i29: i32, out_$i30: i32, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$i34: i8, out_$i35: i32, out_$i36: i32, out_$p37: ref, out_$p38: ref, out_$i39: i32, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$i43: i64, out_$i44: i32, out_$i45: i32, out_$i46: i32, out_$i47: i1, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$i52: i32, out_$i53: i32, out_$i54: i32, out_$i55: i1, out_$p60: ref, out_$i61: i8, out_$i62: i1, out_$i63: i32, out_$i64: i32, out_$i65: i64, out_$p66: ref, out_$i68: i1, out_$i70: i32, out_$i71: i64, out_$p72: ref, out_$p69: ref, out_$p67: ref, out_$i73: i32, out_$i74: i32, out_$i75: i32, out_$i76: i32, out_$i77: i1, out_$i57: i32, out_$p58: ref, out_$p59: ref, out_$i78: i8, out_$i56: i8, out_$i79: i32, out_$i80: i1, out_$i81: i32, out_$i82: i1, out_$i83: i32, out_$i84: i32, out_$i85: i32, out_$i86: i32, out_$i87: i32, out_$i88: i32, out_$i89: i1, out_$i90: i32, out_$i91: i32, out_$i92: i32, out_$i101: i32, out_$i102: i1, out_$p103: ref, out_$p104: ref, out_$i105: i8, out_$p106: ref, out_$p107: ref, out_$p108: ref, out_$i109: i8, out_$i110: i32, out_$i111: i1, out_$i112: i32, out_$i113: i1, out_$i114: i32, out_$i115: i1, out_$i116: i32, out_$i117: i32, out_$i118: i32, out_$i119: i32, out_$i120: i1, out_$i121: i32, out_$i122: i1, out_$i123: i32, out_$i124: i1, out_$i125: i32, out_$i126: i1, out_$i127: i32, out_$i128: i32, out_$i129: i32, out_$i133: i32, out_$i134: i1, out_$i135: i32, out_$i136: i32, out_$i137: i32, out_$i141: i32, out_$i142: i1, out_$i143: i32, out_$i144: i1, out_$i145: i32, out_$i146: i32, out_$i147: i32, out_$i151: i1, out_$i152: i32, out_$i153: i1, out_$i154: i32, out_$i155: i32, out_$i156: i32, out_$i160: i1, out_$i161: i32, out_$i162: i1, out_$i163: i32, out_$i164: i32, out_$i165: i32, out_$i169: i32, out_$p170: ref, out_$p171: ref, out_$p172: ref, out_$i173: i32, out_$i174: i1, out_$i175: i32, out_$i176: i32, out_$i177: i32)
{

  entry:
    out_$i25, out_$i21, out_$i22, out_$i23, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$i36, out_$p37, out_$p38, out_$i39, out_$p40, out_$p41, out_$p42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$p49, out_$p50, out_$p51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p66, out_$i68, out_$i70, out_$i71, out_$p72, out_$p69, out_$p67, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i57, out_$p58, out_$p59, out_$i78, out_$i56, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i101, out_$i102, out_$p103, out_$p104, out_$i105, out_$p106, out_$p107, out_$p108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i151, out_$i152, out_$i153, out_$i154, out_$i155, out_$i156, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i169, out_$p170, out_$p171, out_$p172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177 := in_$i25, in_$i21, in_$i22, in_$i23, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$p31, in_$p32, in_$p33, in_$i34, in_$i35, in_$i36, in_$p37, in_$p38, in_$i39, in_$p40, in_$p41, in_$p42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$p49, in_$p50, in_$p51, in_$i52, in_$i53, in_$i54, in_$i55, in_$p60, in_$i61, in_$i62, in_$i63, in_$i64, in_$i65, in_$p66, in_$i68, in_$i70, in_$i71, in_$p72, in_$p69, in_$p67, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$i57, in_$p58, in_$p59, in_$i78, in_$i56, in_$i79, in_$i80, in_$i81, in_$i82, in_$i83, in_$i84, in_$i85, in_$i86, in_$i87, in_$i88, in_$i89, in_$i90, in_$i91, in_$i92, in_$i101, in_$i102, in_$p103, in_$p104, in_$i105, in_$p106, in_$p107, in_$p108, in_$i109, in_$i110, in_$i111, in_$i112, in_$i113, in_$i114, in_$i115, in_$i116, in_$i117, in_$i118, in_$i119, in_$i120, in_$i121, in_$i122, in_$i123, in_$i124, in_$i125, in_$i126, in_$i127, in_$i128, in_$i129, in_$i133, in_$i134, in_$i135, in_$i136, in_$i137, in_$i141, in_$i142, in_$i143, in_$i144, in_$i145, in_$i146, in_$i147, in_$i151, in_$i152, in_$i153, in_$i154, in_$i155, in_$i156, in_$i160, in_$i161, in_$i162, in_$i163, in_$i164, in_$i165, in_$i169, in_$p170, in_$p171, in_$p172, in_$i173, in_$i174, in_$i175, in_$i176, in_$i177;
    goto $bb15, exit;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb55:
    assume !(out_$i120 == 1);
    assume {:verifier.code 0} true;
    out_$i21, out_$i22, out_$i23 := out_$i118, out_$i117, out_$i116;
    goto $bb55_dummy;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    out_$i25 := out_$i119;
    assume true;
    goto $bb55;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    out_$i120 := $ne.i32(out_$i119, 0);
    goto corral_source_split_1919;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 404} out_$i119 := ftdi_elan_synchronize_reset(in_$p0);
    call {:si_unique_call 405} {:cexpr "retval"} boogie_si_record_i32(out_$i119);
    goto corral_source_split_1918;

  $bb54:
    assume !(out_$i115 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1917;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    out_$i116, out_$i117, out_$i118 := out_$i28, out_$i29, out_$i30;
    assume true;
    goto $bb53, $bb54;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    out_$i115 := $sgt.i32(out_$i26, 0);
    goto corral_source_split_1913;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    out_$i114 := $sub.i32(out_$i26, 1);
    call {:si_unique_call 403} {:cexpr "read_stuck"} boogie_si_record_i32(out_$i114);
    goto corral_source_split_1912;

  $bb51:
    assume out_$i113 == 1;
    goto corral_source_split_1911;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    out_$i113 := $eq.i32(out_$i112, 0);
    goto corral_source_split_1906;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    out_$i112 := $zext.i8.i32(out_$i109);
    goto corral_source_split_1905;

  $bb48:
    assume out_$i111 == 1;
    goto corral_source_split_1904;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    out_$i111 := $eq.i32(out_$i110, 49);
    goto corral_source_split_1898;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    out_$i110 := $zext.i8.i32(out_$i105);
    goto corral_source_split_1897;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    out_$i109 := $load.i8($M.0, out_$p108);
    call {:si_unique_call 402} {:cexpr "s2"} boogie_si_record_i8(out_$i109);
    goto corral_source_split_1896;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    out_$p108 := $add.ref(out_$p107, $mul.ref(1, 1));
    goto corral_source_split_1895;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    out_$p107 := $load.ref($M.0, out_$p106);
    goto corral_source_split_1894;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    out_$p106 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7400, 1));
    goto corral_source_split_1893;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    out_$i105 := $load.i8($M.0, out_$p104);
    call {:si_unique_call 401} {:cexpr "s1"} boogie_si_record_i8(out_$i105);
    goto corral_source_split_1892;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    out_$p104 := $load.ref($M.0, out_$p103);
    goto corral_source_split_1891;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    out_$p103 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7400, 1));
    goto corral_source_split_1890;

  $bb46:
    assume out_$i102 == 1;
    goto corral_source_split_1889;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    out_$i102 := $sgt.i32(out_$i101, 1);
    goto corral_source_split_1825;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    out_$i101 := $load.i32($M.16, in_$p1);
    goto corral_source_split_1824;

  $bb21:
    assume !(out_$i47 == 1);
    goto corral_source_split_1823;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    out_$i47 := $sgt.i32(out_$i46, 2);
    goto corral_source_split_1809;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    out_$i46 := $load.i32($M.16, in_$p1);
    goto corral_source_split_1808;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} out_$i45 := usb_bulk_msg(out_$p38, out_$i39, out_$p41, out_$i44, in_$p1, 500);
    call {:si_unique_call 389} {:cexpr "retval"} boogie_si_record_i32(out_$i45);
    goto corral_source_split_1807;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    out_$i44 := $trunc.i64.i32(out_$i43);
    goto corral_source_split_1806;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i64($M.0, out_$p42);
    goto corral_source_split_1805;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7408, 1));
    goto corral_source_split_1804;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    out_$p41 := $load.ref($M.0, out_$p40);
    goto corral_source_split_1803;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7400, 1));
    goto corral_source_split_1802;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    out_$i39 := $or.i32(out_$i36, $sub.i32(0, 1073741696));
    goto corral_source_split_1801;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    out_$p38 := $load.ref($M.0, out_$p37);
    goto corral_source_split_1800;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_1799;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} out_$i36 := __create_pipe(out_$p32, out_$i35);
    call {:si_unique_call 387} {:cexpr "tmp"} boogie_si_record_i32(out_$i36);
    goto corral_source_split_1798;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    out_$i35 := $zext.i8.i32(out_$i34);
    goto corral_source_split_1797;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i8($M.0, out_$p33);
    goto corral_source_split_1796;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7432, 1));
    goto corral_source_split_1795;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    out_$p32 := $load.ref($M.0, out_$p31);
    goto corral_source_split_1794;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_1793;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $M.16 := $store.i32($M.16, in_$p1, 0);
    goto corral_source_split_1792;

  $bb19:
    call out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$i36, out_$p37, out_$p38, out_$i39, out_$p40, out_$p41, out_$p42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$p49, out_$p50, out_$p51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p66, out_$i68, out_$i70, out_$i71, out_$p72, out_$p69, out_$p67, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i57, out_$p58, out_$p59, out_$i78, out_$i56, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i101, out_$i102, out_$p103, out_$p104, out_$i105, out_$p106, out_$p107, out_$p108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i151, out_$i152, out_$i153, out_$i154, out_$i155, out_$i156, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i169, out_$p170, out_$p171, out_$p172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177 := ftdi_elan_synchronize_loop_$bb19(in_$p0, in_$p1, in_$p2, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$i36, out_$p37, out_$p38, out_$i39, out_$p40, out_$p41, out_$p42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$p49, out_$p50, out_$p51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p66, out_$i68, out_$i70, out_$i71, out_$p72, out_$p69, out_$p67, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i57, out_$p58, out_$p59, out_$i78, out_$i56, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i101, out_$i102, out_$p103, out_$p104, out_$i105, out_$p106, out_$p107, out_$p108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i151, out_$i152, out_$i153, out_$i154, out_$i155, out_$i156, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i169, out_$p170, out_$p171, out_$p172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177);
    goto $bb19_last;

  $bb19_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1791;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i26, out_$i27, out_$i28, out_$i29, out_$i30 := 10, 100, out_$i23, out_$i22, out_$i21;
    goto $bb19;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    out_$i26, out_$i27, out_$i28, out_$i29, out_$i30 := out_$i83, out_$i84, out_$i85, out_$i86, out_$i87;
    assume false;
    return;

  $bb40:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1875;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    out_$i83, out_$i84, out_$i85, out_$i86, out_$i87 := out_$i26, out_$i173, out_$i169, out_$i29, out_$i30;
    goto $bb40;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    out_$i83, out_$i84, out_$i85, out_$i86, out_$i87 := out_$i26, out_$i27, out_$i28, out_$i161, out_$i30;
    goto $bb40;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    out_$i83, out_$i84, out_$i85, out_$i86, out_$i87 := out_$i26, out_$i27, out_$i28, out_$i29, out_$i152;
    goto $bb40;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    out_$i83, out_$i84, out_$i85, out_$i86, out_$i87 := out_$i26, out_$i143, out_$i28, out_$i29, out_$i30;
    goto $bb40;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    out_$i83, out_$i84, out_$i85, out_$i86, out_$i87 := out_$i26, out_$i133, out_$i28, out_$i29, out_$i30;
    goto $bb40;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    out_$i83, out_$i84, out_$i85, out_$i86, out_$i87 := out_$i26, out_$i125, out_$i28, out_$i29, out_$i30;
    goto $bb40;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    out_$i83, out_$i84, out_$i85, out_$i86, out_$i87 := out_$i114, out_$i27, out_$i28, out_$i29, out_$i30;
    goto $bb40;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    out_$i83, out_$i84, out_$i85, out_$i86, out_$i87 := out_$i26, out_$i88, out_$i28, out_$i29, out_$i30;
    goto $bb40;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    out_$i83, out_$i84, out_$i85, out_$i86, out_$i87 := out_$i26, out_$i27, out_$i28, out_$i29, out_$i30;
    goto $bb40;

  $bb38:
    assume out_$i82 == 1;
    goto corral_source_split_1869;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    out_$i82 := $eq.i32(out_$i81, 85);
    goto corral_source_split_1867;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    out_$i81 := $zext.i8.i32(out_$i56);
    goto corral_source_split_1866;

  $bb37:
    assume !(out_$i80 == 1);
    goto corral_source_split_1865;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    out_$i80 := $eq.i32(out_$i79, 126);
    goto corral_source_split_1861;

  $bb35:
    assume {:verifier.code 0} true;
    out_$i79 := $zext.i8.i32(out_$i56);
    goto corral_source_split_1860;

  $bb24:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb23:
    assume {:verifier.code 0} true;
    assume !(out_$i55 == 1);
    goto $bb24;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    out_$i56 := out_$i78;
    goto $bb24;

  $bb34:
    assume !(out_$i77 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1858;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    out_$i78 := out_$i61;
    assume true;
    goto $bb33, $bb34;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    out_$i77 := $sgt.i32(out_$i74, 0);
    goto corral_source_split_1850;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $M.16 := $store.i32($M.16, in_$p1, out_$i76);
    goto corral_source_split_1849;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    out_$i76 := $sub.i32(out_$i75, 1);
    goto corral_source_split_1848;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    out_$i75 := $load.i32($M.16, in_$p1);
    goto corral_source_split_1847;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    out_$i74 := $load.i32($M.16, in_$p1);
    call {:si_unique_call 395} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i74);
    goto corral_source_split_1846;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    out_$i73 := $add.i32(out_$i57, 1);
    call {:si_unique_call 394} {:cexpr "bytes_read"} boogie_si_record_i32(out_$i73);
    goto corral_source_split_1845;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_1844;

  $bb32:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$p67 := out_$p69;
    goto $bb29;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    out_$p67 := out_$p66;
    goto $bb29;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref(out_$p58, $mul.ref(out_$i65, 1));
    goto corral_source_split_1839;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    out_$i65 := $sext.i32.i64(out_$i64);
    goto corral_source_split_1838;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} out_$i64 := sprintf.ref.ref.i32(out_$p58, .str.4, out_$i63);
    call {:si_unique_call 393} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i64);
    goto corral_source_split_1837;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    out_$i63 := $zext.i8.i32(out_$i61);
    goto corral_source_split_1836;

  $bb27:
    assume out_$i62 == 1;
    goto corral_source_split_1835;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    out_$i62 := $slt.i32(out_$i57, 31);
    goto corral_source_split_1833;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    out_$i61 := $load.i8($M.0, out_$p59);
    call {:si_unique_call 391} {:cexpr "c"} boogie_si_record_i8(out_$i61);
    goto corral_source_split_1832;

  $bb26:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref(out_$p59, $mul.ref(1, 1));
    goto corral_source_split_1831;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb25:
    call out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p66, out_$i68, out_$i70, out_$i71, out_$p72, out_$p69, out_$p67, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i57, out_$p58, out_$p59, out_$i78 := ftdi_elan_synchronize_loop_$bb25(in_$p1, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p66, out_$i68, out_$i70, out_$i71, out_$p72, out_$p69, out_$p67, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i57, out_$p58, out_$p59, out_$i78);
    goto $bb25_last;

  $bb25_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1829;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    out_$i57, out_$p58, out_$p59 := 0, in_$p2, out_$p50;
    goto $bb25;

  $bb33:
    assume out_$i77 == 1;
    assume {:verifier.code 0} true;
    out_$i57, out_$p58, out_$p59 := out_$i73, out_$p67, out_$p60;
    assume false;
    return;

  $bb22:
    assume out_$i55 == 1;
    goto corral_source_split_1827;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    out_$i56 := 0;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    out_$i55 := $sgt.i32(out_$i52, 0);
    goto corral_source_split_1821;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $M.16 := $store.i32($M.16, in_$p1, out_$i54);
    goto corral_source_split_1820;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    out_$i54 := $sub.i32(out_$i53, 1);
    goto corral_source_split_1819;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    out_$i53 := $load.i32($M.16, in_$p1);
    goto corral_source_split_1818;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    out_$i52 := $load.i32($M.16, in_$p1);
    call {:si_unique_call 390} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i52);
    goto corral_source_split_1817;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    $M.19 := $store.i8($M.19, out_$p51, 0);
    goto corral_source_split_1816;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(in_$p2, $mul.ref(0, 94)), $mul.ref(0, 1));
    goto corral_source_split_1815;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    out_$p50 := $load.ref($M.0, out_$p49);
    goto corral_source_split_1814;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7400, 1));
    goto corral_source_split_1813;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    goto corral_source_split_1812;

  $bb20:
    assume out_$i47 == 1;
    goto corral_source_split_1811;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref(out_$p58, $mul.ref(out_$i71, 1));
    assume {:verifier.code 0} true;
    out_$p69 := out_$p72;
    goto $bb32;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    out_$p69 := out_$p58;
    goto $bb32;

  $bb30:
    assume out_$i68 == 1;
    goto corral_source_split_1852;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    out_$i68 := $sgt.i32(out_$i57, 31);
    goto corral_source_split_1842;

  $bb28:
    assume !(out_$i62 == 1);
    goto corral_source_split_1841;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    out_$i71 := $sext.i32.i64(out_$i70);
    goto corral_source_split_1856;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} out_$i70 := sprintf.ref.ref(out_$p58, .str.5);
    call {:si_unique_call 397} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i70);
    goto corral_source_split_1855;

  $bb31:
    assume !(out_$i68 == 1);
    goto corral_source_split_1854;

  $bb41:
    assume out_$i89 == 1;
    goto corral_source_split_1877;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    out_$i90, out_$i91, out_$i92 := out_$i28, out_$i29, out_$i30;
    assume true;
    goto $bb41;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    out_$i89 := $sgt.i32(out_$i27, 0);
    goto corral_source_split_1873;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    out_$i88 := $sub.i32(out_$i27, 1);
    call {:si_unique_call 398} {:cexpr "read_stop"} boogie_si_record_i32(out_$i88);
    goto corral_source_split_1872;

  $bb39:
    assume !(out_$i82 == 1);
    goto corral_source_split_1871;

  $bb53:
    assume out_$i115 == 1;
    goto corral_source_split_1915;

  $bb61:
    assume out_$i126 == 1;
    goto corral_source_split_1932;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    out_$i127, out_$i128, out_$i129 := out_$i28, out_$i29, out_$i30;
    assume true;
    goto $bb61;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    out_$i126 := $sgt.i32(out_$i27, 0);
    goto corral_source_split_1930;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    out_$i125 := $sub.i32(out_$i27, 1);
    call {:si_unique_call 407} {:cexpr "read_stop"} boogie_si_record_i32(out_$i125);
    goto corral_source_split_1929;

  $bb59:
    assume out_$i124 == 1;
    goto corral_source_split_1928;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    out_$i124 := $eq.i32(out_$i123, 96);
    goto corral_source_split_1923;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    out_$i123 := $zext.i8.i32(out_$i109);
    goto corral_source_split_1922;

  $bb56:
    assume out_$i122 == 1;
    goto corral_source_split_1921;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    out_$i122 := $eq.i32(out_$i121, 49);
    goto corral_source_split_1909;

  $bb50:
    assume {:verifier.code 0} true;
    out_$i121 := $zext.i8.i32(out_$i105);
    goto corral_source_split_1908;

  $bb49:
    assume {:verifier.code 0} true;
    assume !(out_$i111 == 1);
    goto $bb50;

  $bb52:
    assume {:verifier.code 0} true;
    assume !(out_$i113 == 1);
    goto $bb50;

  $bb63:
    assume out_$i134 == 1;
    goto corral_source_split_1940;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    out_$i135, out_$i136, out_$i137 := out_$i28, out_$i29, out_$i30;
    assume true;
    goto $bb63;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    out_$i134 := $sgt.i32(out_$i27, 0);
    goto corral_source_split_1926;

  $bb58:
    assume {:verifier.code 0} true;
    out_$i133 := $sub.i32(out_$i27, 1);
    call {:si_unique_call 406} {:cexpr "read_stop"} boogie_si_record_i32(out_$i133);
    goto corral_source_split_1925;

  $bb57:
    assume {:verifier.code 0} true;
    assume !(out_$i122 == 1);
    goto $bb58;

  $bb60:
    assume {:verifier.code 0} true;
    assume !(out_$i124 == 1);
    goto $bb58;

  $bb67:
    assume out_$i144 == 1;
    goto corral_source_split_1955;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    out_$i145, out_$i146, out_$i147 := out_$i28, out_$i29, out_$i30;
    assume true;
    goto $bb67;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    out_$i144 := $sgt.i32(out_$i27, 0);
    goto corral_source_split_1950;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    out_$i143 := $sub.i32(out_$i27, 1);
    call {:si_unique_call 410} {:cexpr "read_stop"} boogie_si_record_i32(out_$i143);
    goto corral_source_split_1949;

  $bb65:
    assume out_$i142 == 1;
    goto corral_source_split_1948;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    out_$i142 := $sgt.i32(out_$i141, 0);
    goto corral_source_split_1902;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    out_$i141 := $load.i32($M.16, in_$p1);
    goto corral_source_split_1901;

  $bb47:
    assume !(out_$i102 == 1);
    goto corral_source_split_1900;

  $bb71:
    assume out_$i153 == 1;
    goto corral_source_split_1970;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    out_$i154, out_$i155, out_$i156 := out_$i28, out_$i29, out_$i152;
    assume true;
    goto $bb71;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    out_$i153 := $sgt.i32(out_$i30, 0);
    goto corral_source_split_1965;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    out_$i152 := $sub.i32(out_$i30, 1);
    call {:si_unique_call 412} {:cexpr "retry_on_timeout"} boogie_si_record_i32(out_$i152);
    goto corral_source_split_1964;

  $bb69:
    assume out_$i151 == 1;
    goto corral_source_split_1963;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    out_$i151 := $eq.i32(out_$i45, $sub.i32(0, 110));
    goto corral_source_split_1953;

  $bb66:
    assume !(out_$i142 == 1);
    goto corral_source_split_1952;

  $bb75:
    assume out_$i162 == 1;
    goto corral_source_split_1991;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    out_$i163, out_$i164, out_$i165 := out_$i28, out_$i30, out_$i161;
    assume true;
    goto $bb75;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    out_$i162 := $sgt.i32(out_$i29, 0);
    goto corral_source_split_1980;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    out_$i161 := $sub.i32(out_$i29, 1);
    call {:si_unique_call 414} {:cexpr "retry_on_empty"} boogie_si_record_i32(out_$i161);
    goto corral_source_split_1979;

  $bb73:
    assume out_$i160 == 1;
    goto corral_source_split_1978;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    out_$i160 := $eq.i32(out_$i45, 0);
    goto corral_source_split_1968;

  $bb70:
    assume !(out_$i151 == 1);
    goto corral_source_split_1967;

  $bb77:
    assume out_$i174 == 1;
    goto corral_source_split_1999;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    out_$i175, out_$i176, out_$i177 := out_$i29, out_$i30, out_$i169;
    assume true;
    goto $bb77;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    out_$i174 := $sgt.i32(out_$i27, 0);
    goto corral_source_split_1989;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    out_$i173 := $sub.i32(out_$i27, 1);
    call {:si_unique_call 417} {:cexpr "read_stop"} boogie_si_record_i32(out_$i173);
    goto corral_source_split_1988;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} dev_err.ref.ref.i32(out_$p172, .str.21, out_$i45);
    goto corral_source_split_1987;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    out_$p172 := $add.ref($add.ref(out_$p171, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_1986;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    out_$p171 := $load.ref($M.0, out_$p170);
    goto corral_source_split_1985;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    out_$p170 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_1984;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    out_$i169 := $add.i32(out_$i28, 1);
    call {:si_unique_call 415} {:cexpr "err_count"} boogie_si_record_i32(out_$i169);
    goto corral_source_split_1983;

  $bb74:
    assume !(out_$i160 == 1);
    goto corral_source_split_1982;

  $bb55_dummy:
    call {:si_unique_call 1} out_$i25, out_$i21, out_$i22, out_$i23, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$i36, out_$p37, out_$p38, out_$i39, out_$p40, out_$p41, out_$p42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$p49, out_$p50, out_$p51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p66, out_$i68, out_$i70, out_$i71, out_$p72, out_$p69, out_$p67, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i57, out_$p58, out_$p59, out_$i78, out_$i56, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i101, out_$i102, out_$p103, out_$p104, out_$i105, out_$p106, out_$p107, out_$p108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i151, out_$i152, out_$i153, out_$i154, out_$i155, out_$i156, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i169, out_$p170, out_$p171, out_$p172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177 := ftdi_elan_synchronize_loop_$bb15(in_$p0, in_$p1, in_$p2, out_$i25, out_$i21, out_$i22, out_$i23, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$i36, out_$p37, out_$p38, out_$i39, out_$p40, out_$p41, out_$p42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$p49, out_$p50, out_$p51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p66, out_$i68, out_$i70, out_$i71, out_$p72, out_$p69, out_$p67, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i57, out_$p58, out_$p59, out_$i78, out_$i56, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i101, out_$i102, out_$p103, out_$p104, out_$i105, out_$p106, out_$p107, out_$p108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i151, out_$i152, out_$i153, out_$i154, out_$i155, out_$i156, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i169, out_$p170, out_$p171, out_$p172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177);
    return;

  exit:
    return;
}



procedure ftdi_elan_synchronize_loop_$bb15(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i25: i32, in_$i21: i32, in_$i22: i32, in_$i23: i32, in_$i26: i32, in_$i27: i32, in_$i28: i32, in_$i29: i32, in_$i30: i32, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$i34: i8, in_$i35: i32, in_$i36: i32, in_$p37: ref, in_$p38: ref, in_$i39: i32, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$i43: i64, in_$i44: i32, in_$i45: i32, in_$i46: i32, in_$i47: i1, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$i52: i32, in_$i53: i32, in_$i54: i32, in_$i55: i1, in_$p60: ref, in_$i61: i8, in_$i62: i1, in_$i63: i32, in_$i64: i32, in_$i65: i64, in_$p66: ref, in_$i68: i1, in_$i70: i32, in_$i71: i64, in_$p72: ref, in_$p69: ref, in_$p67: ref, in_$i73: i32, in_$i74: i32, in_$i75: i32, in_$i76: i32, in_$i77: i1, in_$i57: i32, in_$p58: ref, in_$p59: ref, in_$i78: i8, in_$i56: i8, in_$i79: i32, in_$i80: i1, in_$i81: i32, in_$i82: i1, in_$i83: i32, in_$i84: i32, in_$i85: i32, in_$i86: i32, in_$i87: i32, in_$i88: i32, in_$i89: i1, in_$i90: i32, in_$i91: i32, in_$i92: i32, in_$i101: i32, in_$i102: i1, in_$p103: ref, in_$p104: ref, in_$i105: i8, in_$p106: ref, in_$p107: ref, in_$p108: ref, in_$i109: i8, in_$i110: i32, in_$i111: i1, in_$i112: i32, in_$i113: i1, in_$i114: i32, in_$i115: i1, in_$i116: i32, in_$i117: i32, in_$i118: i32, in_$i119: i32, in_$i120: i1, in_$i121: i32, in_$i122: i1, in_$i123: i32, in_$i124: i1, in_$i125: i32, in_$i126: i1, in_$i127: i32, in_$i128: i32, in_$i129: i32, in_$i133: i32, in_$i134: i1, in_$i135: i32, in_$i136: i32, in_$i137: i32, in_$i141: i32, in_$i142: i1, in_$i143: i32, in_$i144: i1, in_$i145: i32, in_$i146: i32, in_$i147: i32, in_$i151: i1, in_$i152: i32, in_$i153: i1, in_$i154: i32, in_$i155: i32, in_$i156: i32, in_$i160: i1, in_$i161: i32, in_$i162: i1, in_$i163: i32, in_$i164: i32, in_$i165: i32, in_$i169: i32, in_$p170: ref, in_$p171: ref, in_$p172: ref, in_$i173: i32, in_$i174: i1, in_$i175: i32, in_$i176: i32, in_$i177: i32) returns (out_$i25: i32, out_$i21: i32, out_$i22: i32, out_$i23: i32, out_$i26: i32, out_$i27: i32, out_$i28: i32, out_$i29: i32, out_$i30: i32, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$i34: i8, out_$i35: i32, out_$i36: i32, out_$p37: ref, out_$p38: ref, out_$i39: i32, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$i43: i64, out_$i44: i32, out_$i45: i32, out_$i46: i32, out_$i47: i1, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$i52: i32, out_$i53: i32, out_$i54: i32, out_$i55: i1, out_$p60: ref, out_$i61: i8, out_$i62: i1, out_$i63: i32, out_$i64: i32, out_$i65: i64, out_$p66: ref, out_$i68: i1, out_$i70: i32, out_$i71: i64, out_$p72: ref, out_$p69: ref, out_$p67: ref, out_$i73: i32, out_$i74: i32, out_$i75: i32, out_$i76: i32, out_$i77: i1, out_$i57: i32, out_$p58: ref, out_$p59: ref, out_$i78: i8, out_$i56: i8, out_$i79: i32, out_$i80: i1, out_$i81: i32, out_$i82: i1, out_$i83: i32, out_$i84: i32, out_$i85: i32, out_$i86: i32, out_$i87: i32, out_$i88: i32, out_$i89: i1, out_$i90: i32, out_$i91: i32, out_$i92: i32, out_$i101: i32, out_$i102: i1, out_$p103: ref, out_$p104: ref, out_$i105: i8, out_$p106: ref, out_$p107: ref, out_$p108: ref, out_$i109: i8, out_$i110: i32, out_$i111: i1, out_$i112: i32, out_$i113: i1, out_$i114: i32, out_$i115: i1, out_$i116: i32, out_$i117: i32, out_$i118: i32, out_$i119: i32, out_$i120: i1, out_$i121: i32, out_$i122: i1, out_$i123: i32, out_$i124: i1, out_$i125: i32, out_$i126: i1, out_$i127: i32, out_$i128: i32, out_$i129: i32, out_$i133: i32, out_$i134: i1, out_$i135: i32, out_$i136: i32, out_$i137: i32, out_$i141: i32, out_$i142: i1, out_$i143: i32, out_$i144: i1, out_$i145: i32, out_$i146: i32, out_$i147: i32, out_$i151: i1, out_$i152: i32, out_$i153: i1, out_$i154: i32, out_$i155: i32, out_$i156: i32, out_$i160: i1, out_$i161: i32, out_$i162: i1, out_$i163: i32, out_$i164: i32, out_$i165: i32, out_$i169: i32, out_$p170: ref, out_$p171: ref, out_$p172: ref, out_$i173: i32, out_$i174: i1, out_$i175: i32, out_$i176: i32, out_$i177: i32);
  modifies $M.0, $M.16, $M.19;



implementation ftdi_elan_synchronize_loop_$bb5(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i12: i32, in_$i13: i1, in_$i14: i32, in_$i15: i32, in_$i16: i1, in_$i17: i32, in_$i18: i32, in_$i19: i1, in_$i20: i32, in_$i25: i32, in_$i21: i32, in_$i22: i32, in_$i23: i32, in_$i26: i32, in_$i27: i32, in_$i28: i32, in_$i29: i32, in_$i30: i32, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$i34: i8, in_$i35: i32, in_$i36: i32, in_$p37: ref, in_$p38: ref, in_$i39: i32, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$i43: i64, in_$i44: i32, in_$i45: i32, in_$i46: i32, in_$i47: i1, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$i52: i32, in_$i53: i32, in_$i54: i32, in_$i55: i1, in_$p60: ref, in_$i61: i8, in_$i62: i1, in_$i63: i32, in_$i64: i32, in_$i65: i64, in_$p66: ref, in_$i68: i1, in_$i70: i32, in_$i71: i64, in_$p72: ref, in_$p69: ref, in_$p67: ref, in_$i73: i32, in_$i74: i32, in_$i75: i32, in_$i76: i32, in_$i77: i1, in_$i57: i32, in_$p58: ref, in_$p59: ref, in_$i78: i8, in_$i56: i8, in_$i79: i32, in_$i80: i1, in_$i81: i32, in_$i82: i1, in_$i83: i32, in_$i84: i32, in_$i85: i32, in_$i86: i32, in_$i87: i32, in_$i88: i32, in_$i89: i1, in_$i90: i32, in_$i91: i32, in_$i92: i32, in_$p93: ref, in_$p94: ref, in_$p95: ref, in_$i96: i32, in_$i97: i32, in_$i98: i32, in_$i99: i32, in_$i100: i1, in_$i101: i32, in_$i102: i1, in_$p103: ref, in_$p104: ref, in_$i105: i8, in_$p106: ref, in_$p107: ref, in_$p108: ref, in_$i109: i8, in_$i110: i32, in_$i111: i1, in_$i112: i32, in_$i113: i1, in_$i114: i32, in_$i115: i1, in_$i116: i32, in_$i117: i32, in_$i118: i32, in_$i119: i32, in_$i120: i1, in_$i121: i32, in_$i122: i1, in_$i123: i32, in_$i124: i1, in_$i125: i32, in_$i126: i1, in_$i127: i32, in_$i128: i32, in_$i129: i32, in_$p130: ref, in_$p131: ref, in_$p132: ref, in_$i133: i32, in_$i134: i1, in_$i135: i32, in_$i136: i32, in_$i137: i32, in_$p138: ref, in_$p139: ref, in_$p140: ref, in_$i141: i32, in_$i142: i1, in_$i143: i32, in_$i144: i1, in_$i145: i32, in_$i146: i32, in_$i147: i32, in_$p148: ref, in_$p149: ref, in_$p150: ref, in_$i151: i1, in_$i152: i32, in_$i153: i1, in_$i154: i32, in_$i155: i32, in_$i156: i32, in_$p157: ref, in_$p158: ref, in_$p159: ref, in_$i160: i1, in_$i161: i32, in_$i162: i1, in_$i163: i32, in_$i164: i32, in_$i165: i32, in_$p166: ref, in_$p167: ref, in_$p168: ref, in_$i169: i32, in_$p170: ref, in_$p171: ref, in_$p172: ref, in_$i173: i32, in_$i174: i1, in_$i175: i32, in_$i176: i32, in_$i177: i32, in_$p178: ref, in_$p179: ref, in_$p180: ref, in_$i8: i32, in_$i9: i32, in_$i10: i32, in_$i11: i32) returns (out_$i12: i32, out_$i13: i1, out_$i14: i32, out_$i15: i32, out_$i16: i1, out_$i17: i32, out_$i18: i32, out_$i19: i1, out_$i20: i32, out_$i25: i32, out_$i21: i32, out_$i22: i32, out_$i23: i32, out_$i26: i32, out_$i27: i32, out_$i28: i32, out_$i29: i32, out_$i30: i32, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$i34: i8, out_$i35: i32, out_$i36: i32, out_$p37: ref, out_$p38: ref, out_$i39: i32, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$i43: i64, out_$i44: i32, out_$i45: i32, out_$i46: i32, out_$i47: i1, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$i52: i32, out_$i53: i32, out_$i54: i32, out_$i55: i1, out_$p60: ref, out_$i61: i8, out_$i62: i1, out_$i63: i32, out_$i64: i32, out_$i65: i64, out_$p66: ref, out_$i68: i1, out_$i70: i32, out_$i71: i64, out_$p72: ref, out_$p69: ref, out_$p67: ref, out_$i73: i32, out_$i74: i32, out_$i75: i32, out_$i76: i32, out_$i77: i1, out_$i57: i32, out_$p58: ref, out_$p59: ref, out_$i78: i8, out_$i56: i8, out_$i79: i32, out_$i80: i1, out_$i81: i32, out_$i82: i1, out_$i83: i32, out_$i84: i32, out_$i85: i32, out_$i86: i32, out_$i87: i32, out_$i88: i32, out_$i89: i1, out_$i90: i32, out_$i91: i32, out_$i92: i32, out_$p93: ref, out_$p94: ref, out_$p95: ref, out_$i96: i32, out_$i97: i32, out_$i98: i32, out_$i99: i32, out_$i100: i1, out_$i101: i32, out_$i102: i1, out_$p103: ref, out_$p104: ref, out_$i105: i8, out_$p106: ref, out_$p107: ref, out_$p108: ref, out_$i109: i8, out_$i110: i32, out_$i111: i1, out_$i112: i32, out_$i113: i1, out_$i114: i32, out_$i115: i1, out_$i116: i32, out_$i117: i32, out_$i118: i32, out_$i119: i32, out_$i120: i1, out_$i121: i32, out_$i122: i1, out_$i123: i32, out_$i124: i1, out_$i125: i32, out_$i126: i1, out_$i127: i32, out_$i128: i32, out_$i129: i32, out_$p130: ref, out_$p131: ref, out_$p132: ref, out_$i133: i32, out_$i134: i1, out_$i135: i32, out_$i136: i32, out_$i137: i32, out_$p138: ref, out_$p139: ref, out_$p140: ref, out_$i141: i32, out_$i142: i1, out_$i143: i32, out_$i144: i1, out_$i145: i32, out_$i146: i32, out_$i147: i32, out_$p148: ref, out_$p149: ref, out_$p150: ref, out_$i151: i1, out_$i152: i32, out_$i153: i1, out_$i154: i32, out_$i155: i32, out_$i156: i32, out_$p157: ref, out_$p158: ref, out_$p159: ref, out_$i160: i1, out_$i161: i32, out_$i162: i1, out_$i163: i32, out_$i164: i32, out_$i165: i32, out_$p166: ref, out_$p167: ref, out_$p168: ref, out_$i169: i32, out_$p170: ref, out_$p171: ref, out_$p172: ref, out_$i173: i32, out_$i174: i1, out_$i175: i32, out_$i176: i32, out_$i177: i32, out_$p178: ref, out_$p179: ref, out_$p180: ref, out_$i8: i32, out_$i9: i32, out_$i10: i32, out_$i11: i32)
{

  entry:
    out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i25, out_$i21, out_$i22, out_$i23, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$i36, out_$p37, out_$p38, out_$i39, out_$p40, out_$p41, out_$p42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$p49, out_$p50, out_$p51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p66, out_$i68, out_$i70, out_$i71, out_$p72, out_$p69, out_$p67, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i57, out_$p58, out_$p59, out_$i78, out_$i56, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$p93, out_$p94, out_$p95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$p103, out_$p104, out_$i105, out_$p106, out_$p107, out_$p108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$p130, out_$p131, out_$p132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$p138, out_$p139, out_$p140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$p148, out_$p149, out_$p150, out_$i151, out_$i152, out_$i153, out_$i154, out_$i155, out_$i156, out_$p157, out_$p158, out_$p159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i165, out_$p166, out_$p167, out_$p168, out_$i169, out_$p170, out_$p171, out_$p172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177, out_$p178, out_$p179, out_$p180, out_$i8, out_$i9, out_$i10, out_$i11 := in_$i12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i25, in_$i21, in_$i22, in_$i23, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$p31, in_$p32, in_$p33, in_$i34, in_$i35, in_$i36, in_$p37, in_$p38, in_$i39, in_$p40, in_$p41, in_$p42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$p49, in_$p50, in_$p51, in_$i52, in_$i53, in_$i54, in_$i55, in_$p60, in_$i61, in_$i62, in_$i63, in_$i64, in_$i65, in_$p66, in_$i68, in_$i70, in_$i71, in_$p72, in_$p69, in_$p67, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$i57, in_$p58, in_$p59, in_$i78, in_$i56, in_$i79, in_$i80, in_$i81, in_$i82, in_$i83, in_$i84, in_$i85, in_$i86, in_$i87, in_$i88, in_$i89, in_$i90, in_$i91, in_$i92, in_$p93, in_$p94, in_$p95, in_$i96, in_$i97, in_$i98, in_$i99, in_$i100, in_$i101, in_$i102, in_$p103, in_$p104, in_$i105, in_$p106, in_$p107, in_$p108, in_$i109, in_$i110, in_$i111, in_$i112, in_$i113, in_$i114, in_$i115, in_$i116, in_$i117, in_$i118, in_$i119, in_$i120, in_$i121, in_$i122, in_$i123, in_$i124, in_$i125, in_$i126, in_$i127, in_$i128, in_$i129, in_$p130, in_$p131, in_$p132, in_$i133, in_$i134, in_$i135, in_$i136, in_$i137, in_$p138, in_$p139, in_$p140, in_$i141, in_$i142, in_$i143, in_$i144, in_$i145, in_$i146, in_$i147, in_$p148, in_$p149, in_$p150, in_$i151, in_$i152, in_$i153, in_$i154, in_$i155, in_$i156, in_$p157, in_$p158, in_$p159, in_$i160, in_$i161, in_$i162, in_$i163, in_$i164, in_$i165, in_$p166, in_$p167, in_$p168, in_$i169, in_$p170, in_$p171, in_$p172, in_$i173, in_$i174, in_$i175, in_$i176, in_$i177, in_$p178, in_$p179, in_$p180, in_$i8, in_$i9, in_$i10, in_$i11;
    goto $bb5, exit;

  $bb5:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1768;

  $bb44:
    assume out_$i100 == 1;
    assume {:verifier.code 0} true;
    out_$i8, out_$i9, out_$i10, out_$i11 := out_$i99, out_$i98, out_$i97, out_$i96;
    goto $bb44_dummy;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    out_$i100 := $sgt.i32(out_$i8, 0);
    goto corral_source_split_1887;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    out_$i99 := $sub.i32(out_$i8, 1);
    call {:si_unique_call 400} {:cexpr "long_stop"} boogie_si_record_i32(out_$i99);
    goto corral_source_split_1886;

  $bb43:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1885;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    out_$i96, out_$i97, out_$i98 := out_$i177, out_$i175, out_$i176;
    goto $bb43;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    out_$i96, out_$i97, out_$i98 := out_$i163, out_$i165, out_$i164;
    goto $bb43;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    out_$i96, out_$i97, out_$i98 := out_$i154, out_$i155, out_$i156;
    goto $bb43;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    out_$i96, out_$i97, out_$i98 := out_$i145, out_$i146, out_$i147;
    goto $bb43;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    out_$i96, out_$i97, out_$i98 := out_$i135, out_$i136, out_$i137;
    goto $bb43;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    out_$i96, out_$i97, out_$i98 := out_$i127, out_$i128, out_$i129;
    goto $bb43;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    out_$i96, out_$i97, out_$i98 := out_$i90, out_$i91, out_$i92;
    goto $bb43;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} dev_err.ref.ref(out_$p95, .str.18);
    goto corral_source_split_1883;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    out_$p95 := $add.ref($add.ref(out_$p94, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_1882;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    out_$p94 := $load.ref($M.0, out_$p93);
    goto corral_source_split_1881;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    out_$p93 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_1880;

  $bb42:
    assume !(out_$i89 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1879;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    out_$i90, out_$i91, out_$i92 := out_$i28, out_$i29, out_$i30;
    assume true;
    goto $bb41, $bb42;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    out_$i89 := $sgt.i32(out_$i27, 0);
    goto corral_source_split_1873;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    out_$i88 := $sub.i32(out_$i27, 1);
    call {:si_unique_call 398} {:cexpr "read_stop"} boogie_si_record_i32(out_$i88);
    goto corral_source_split_1872;

  $bb39:
    assume !(out_$i82 == 1);
    goto corral_source_split_1871;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    out_$i82 := $eq.i32(out_$i81, 85);
    goto corral_source_split_1867;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    out_$i81 := $zext.i8.i32(out_$i56);
    goto corral_source_split_1866;

  $bb37:
    assume !(out_$i80 == 1);
    goto corral_source_split_1865;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    out_$i80 := $eq.i32(out_$i79, 126);
    goto corral_source_split_1861;

  $bb35:
    assume {:verifier.code 0} true;
    out_$i79 := $zext.i8.i32(out_$i56);
    goto corral_source_split_1860;

  $bb24:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb23:
    assume {:verifier.code 0} true;
    assume !(out_$i55 == 1);
    goto $bb24;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    out_$i56 := out_$i78;
    goto $bb24;

  $bb34:
    assume !(out_$i77 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1858;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    out_$i78 := out_$i61;
    assume true;
    goto $bb33, $bb34;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    out_$i77 := $sgt.i32(out_$i74, 0);
    goto corral_source_split_1850;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $M.16 := $store.i32($M.16, in_$p1, out_$i76);
    goto corral_source_split_1849;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    out_$i76 := $sub.i32(out_$i75, 1);
    goto corral_source_split_1848;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    out_$i75 := $load.i32($M.16, in_$p1);
    goto corral_source_split_1847;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    out_$i74 := $load.i32($M.16, in_$p1);
    call {:si_unique_call 395} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i74);
    goto corral_source_split_1846;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    out_$i73 := $add.i32(out_$i57, 1);
    call {:si_unique_call 394} {:cexpr "bytes_read"} boogie_si_record_i32(out_$i73);
    goto corral_source_split_1845;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_1844;

  $bb32:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$p67 := out_$p69;
    goto $bb29;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    out_$p67 := out_$p66;
    goto $bb29;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref(out_$p58, $mul.ref(out_$i65, 1));
    goto corral_source_split_1839;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    out_$i65 := $sext.i32.i64(out_$i64);
    goto corral_source_split_1838;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} out_$i64 := sprintf.ref.ref.i32(out_$p58, .str.4, out_$i63);
    call {:si_unique_call 393} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i64);
    goto corral_source_split_1837;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    out_$i63 := $zext.i8.i32(out_$i61);
    goto corral_source_split_1836;

  $bb27:
    assume out_$i62 == 1;
    goto corral_source_split_1835;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    out_$i62 := $slt.i32(out_$i57, 31);
    goto corral_source_split_1833;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    out_$i61 := $load.i8($M.0, out_$p59);
    call {:si_unique_call 391} {:cexpr "c"} boogie_si_record_i8(out_$i61);
    goto corral_source_split_1832;

  $bb26:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref(out_$p59, $mul.ref(1, 1));
    goto corral_source_split_1831;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb25:
    call out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p66, out_$i68, out_$i70, out_$i71, out_$p72, out_$p69, out_$p67, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i57, out_$p58, out_$p59, out_$i78 := ftdi_elan_synchronize_loop_$bb25(in_$p1, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p66, out_$i68, out_$i70, out_$i71, out_$p72, out_$p69, out_$p67, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i57, out_$p58, out_$p59, out_$i78);
    goto $bb25_last;

  $bb25_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1829;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    out_$i57, out_$p58, out_$p59 := 0, in_$p2, out_$p50;
    goto $bb25;

  $bb33:
    assume out_$i77 == 1;
    assume {:verifier.code 0} true;
    out_$i57, out_$p58, out_$p59 := out_$i73, out_$p67, out_$p60;
    assume false;
    return;

  $bb22:
    assume out_$i55 == 1;
    goto corral_source_split_1827;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    out_$i56 := 0;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    out_$i55 := $sgt.i32(out_$i52, 0);
    goto corral_source_split_1821;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $M.16 := $store.i32($M.16, in_$p1, out_$i54);
    goto corral_source_split_1820;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    out_$i54 := $sub.i32(out_$i53, 1);
    goto corral_source_split_1819;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    out_$i53 := $load.i32($M.16, in_$p1);
    goto corral_source_split_1818;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    out_$i52 := $load.i32($M.16, in_$p1);
    call {:si_unique_call 390} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i52);
    goto corral_source_split_1817;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    $M.19 := $store.i8($M.19, out_$p51, 0);
    goto corral_source_split_1816;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(in_$p2, $mul.ref(0, 94)), $mul.ref(0, 1));
    goto corral_source_split_1815;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    out_$p50 := $load.ref($M.0, out_$p49);
    goto corral_source_split_1814;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7400, 1));
    goto corral_source_split_1813;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    goto corral_source_split_1812;

  $bb20:
    assume out_$i47 == 1;
    goto corral_source_split_1811;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    out_$i47 := $sgt.i32(out_$i46, 2);
    goto corral_source_split_1809;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    out_$i46 := $load.i32($M.16, in_$p1);
    goto corral_source_split_1808;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} out_$i45 := usb_bulk_msg(out_$p38, out_$i39, out_$p41, out_$i44, in_$p1, 500);
    call {:si_unique_call 389} {:cexpr "retval"} boogie_si_record_i32(out_$i45);
    goto corral_source_split_1807;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    out_$i44 := $trunc.i64.i32(out_$i43);
    goto corral_source_split_1806;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i64($M.0, out_$p42);
    goto corral_source_split_1805;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7408, 1));
    goto corral_source_split_1804;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    out_$p41 := $load.ref($M.0, out_$p40);
    goto corral_source_split_1803;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7400, 1));
    goto corral_source_split_1802;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    out_$i39 := $or.i32(out_$i36, $sub.i32(0, 1073741696));
    goto corral_source_split_1801;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    out_$p38 := $load.ref($M.0, out_$p37);
    goto corral_source_split_1800;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_1799;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} out_$i36 := __create_pipe(out_$p32, out_$i35);
    call {:si_unique_call 387} {:cexpr "tmp"} boogie_si_record_i32(out_$i36);
    goto corral_source_split_1798;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    out_$i35 := $zext.i8.i32(out_$i34);
    goto corral_source_split_1797;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i8($M.0, out_$p33);
    goto corral_source_split_1796;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7432, 1));
    goto corral_source_split_1795;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    out_$p32 := $load.ref($M.0, out_$p31);
    goto corral_source_split_1794;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_1793;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $M.16 := $store.i32($M.16, in_$p1, 0);
    goto corral_source_split_1792;

  $bb19:
    call out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$i36, out_$p37, out_$p38, out_$i39, out_$p40, out_$p41, out_$p42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$p49, out_$p50, out_$p51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p66, out_$i68, out_$i70, out_$i71, out_$p72, out_$p69, out_$p67, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i57, out_$p58, out_$p59, out_$i78, out_$i56, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i101, out_$i102, out_$p103, out_$p104, out_$i105, out_$p106, out_$p107, out_$p108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i151, out_$i152, out_$i153, out_$i154, out_$i155, out_$i156, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i169, out_$p170, out_$p171, out_$p172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177 := ftdi_elan_synchronize_loop_$bb19(in_$p0, in_$p1, in_$p2, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$i36, out_$p37, out_$p38, out_$i39, out_$p40, out_$p41, out_$p42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$p49, out_$p50, out_$p51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p66, out_$i68, out_$i70, out_$i71, out_$p72, out_$p69, out_$p67, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i57, out_$p58, out_$p59, out_$i78, out_$i56, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i101, out_$i102, out_$p103, out_$p104, out_$i105, out_$p106, out_$p107, out_$p108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i151, out_$i152, out_$i153, out_$i154, out_$i155, out_$i156, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i169, out_$p170, out_$p171, out_$p172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177);
    goto $bb19_last;

  $bb19_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1791;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i26, out_$i27, out_$i28, out_$i29, out_$i30 := 10, 100, out_$i23, out_$i22, out_$i21;
    goto $bb19;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    out_$i26, out_$i27, out_$i28, out_$i29, out_$i30 := out_$i83, out_$i84, out_$i85, out_$i86, out_$i87;
    assume false;
    return;

  $bb40:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1875;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    out_$i83, out_$i84, out_$i85, out_$i86, out_$i87 := out_$i26, out_$i173, out_$i169, out_$i29, out_$i30;
    goto $bb40;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    out_$i83, out_$i84, out_$i85, out_$i86, out_$i87 := out_$i26, out_$i27, out_$i28, out_$i161, out_$i30;
    goto $bb40;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    out_$i83, out_$i84, out_$i85, out_$i86, out_$i87 := out_$i26, out_$i27, out_$i28, out_$i29, out_$i152;
    goto $bb40;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    out_$i83, out_$i84, out_$i85, out_$i86, out_$i87 := out_$i26, out_$i143, out_$i28, out_$i29, out_$i30;
    goto $bb40;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    out_$i83, out_$i84, out_$i85, out_$i86, out_$i87 := out_$i26, out_$i133, out_$i28, out_$i29, out_$i30;
    goto $bb40;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    out_$i83, out_$i84, out_$i85, out_$i86, out_$i87 := out_$i26, out_$i125, out_$i28, out_$i29, out_$i30;
    goto $bb40;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    out_$i83, out_$i84, out_$i85, out_$i86, out_$i87 := out_$i114, out_$i27, out_$i28, out_$i29, out_$i30;
    goto $bb40;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    out_$i83, out_$i84, out_$i85, out_$i86, out_$i87 := out_$i26, out_$i88, out_$i28, out_$i29, out_$i30;
    goto $bb40;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    out_$i83, out_$i84, out_$i85, out_$i86, out_$i87 := out_$i26, out_$i27, out_$i28, out_$i29, out_$i30;
    goto $bb40;

  $bb38:
    assume out_$i82 == 1;
    goto corral_source_split_1869;

  $bb41:
    assume out_$i89 == 1;
    goto corral_source_split_1877;

  $bb53:
    assume out_$i115 == 1;
    goto corral_source_split_1915;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    out_$i116, out_$i117, out_$i118 := out_$i28, out_$i29, out_$i30;
    assume true;
    goto $bb53, $bb54;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    out_$i115 := $sgt.i32(out_$i26, 0);
    goto corral_source_split_1913;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    out_$i114 := $sub.i32(out_$i26, 1);
    call {:si_unique_call 403} {:cexpr "read_stuck"} boogie_si_record_i32(out_$i114);
    goto corral_source_split_1912;

  $bb51:
    assume out_$i113 == 1;
    goto corral_source_split_1911;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    out_$i113 := $eq.i32(out_$i112, 0);
    goto corral_source_split_1906;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    out_$i112 := $zext.i8.i32(out_$i109);
    goto corral_source_split_1905;

  $bb48:
    assume out_$i111 == 1;
    goto corral_source_split_1904;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    out_$i111 := $eq.i32(out_$i110, 49);
    goto corral_source_split_1898;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    out_$i110 := $zext.i8.i32(out_$i105);
    goto corral_source_split_1897;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    out_$i109 := $load.i8($M.0, out_$p108);
    call {:si_unique_call 402} {:cexpr "s2"} boogie_si_record_i8(out_$i109);
    goto corral_source_split_1896;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    out_$p108 := $add.ref(out_$p107, $mul.ref(1, 1));
    goto corral_source_split_1895;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    out_$p107 := $load.ref($M.0, out_$p106);
    goto corral_source_split_1894;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    out_$p106 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7400, 1));
    goto corral_source_split_1893;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    out_$i105 := $load.i8($M.0, out_$p104);
    call {:si_unique_call 401} {:cexpr "s1"} boogie_si_record_i8(out_$i105);
    goto corral_source_split_1892;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    out_$p104 := $load.ref($M.0, out_$p103);
    goto corral_source_split_1891;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    out_$p103 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7400, 1));
    goto corral_source_split_1890;

  $bb46:
    assume out_$i102 == 1;
    goto corral_source_split_1889;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    out_$i102 := $sgt.i32(out_$i101, 1);
    goto corral_source_split_1825;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    out_$i101 := $load.i32($M.16, in_$p1);
    goto corral_source_split_1824;

  $bb21:
    assume !(out_$i47 == 1);
    goto corral_source_split_1823;

  $bb61:
    assume out_$i126 == 1;
    goto corral_source_split_1932;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    out_$i127, out_$i128, out_$i129 := out_$i28, out_$i29, out_$i30;
    assume true;
    goto $bb61, $bb62;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    out_$i126 := $sgt.i32(out_$i27, 0);
    goto corral_source_split_1930;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    out_$i125 := $sub.i32(out_$i27, 1);
    call {:si_unique_call 407} {:cexpr "read_stop"} boogie_si_record_i32(out_$i125);
    goto corral_source_split_1929;

  $bb59:
    assume out_$i124 == 1;
    goto corral_source_split_1928;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    out_$i124 := $eq.i32(out_$i123, 96);
    goto corral_source_split_1923;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    out_$i123 := $zext.i8.i32(out_$i109);
    goto corral_source_split_1922;

  $bb56:
    assume out_$i122 == 1;
    goto corral_source_split_1921;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    out_$i122 := $eq.i32(out_$i121, 49);
    goto corral_source_split_1909;

  $bb50:
    assume {:verifier.code 0} true;
    out_$i121 := $zext.i8.i32(out_$i105);
    goto corral_source_split_1908;

  $bb49:
    assume {:verifier.code 0} true;
    assume !(out_$i111 == 1);
    goto $bb50;

  $bb52:
    assume {:verifier.code 0} true;
    assume !(out_$i113 == 1);
    goto $bb50;

  $bb63:
    assume out_$i134 == 1;
    goto corral_source_split_1940;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    out_$i135, out_$i136, out_$i137 := out_$i28, out_$i29, out_$i30;
    assume true;
    goto $bb63, $bb64;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    out_$i134 := $sgt.i32(out_$i27, 0);
    goto corral_source_split_1926;

  $bb58:
    assume {:verifier.code 0} true;
    out_$i133 := $sub.i32(out_$i27, 1);
    call {:si_unique_call 406} {:cexpr "read_stop"} boogie_si_record_i32(out_$i133);
    goto corral_source_split_1925;

  $bb57:
    assume {:verifier.code 0} true;
    assume !(out_$i122 == 1);
    goto $bb58;

  $bb60:
    assume {:verifier.code 0} true;
    assume !(out_$i124 == 1);
    goto $bb58;

  $bb67:
    assume out_$i144 == 1;
    goto corral_source_split_1955;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    out_$i145, out_$i146, out_$i147 := out_$i28, out_$i29, out_$i30;
    assume true;
    goto $bb67, $bb68;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    out_$i144 := $sgt.i32(out_$i27, 0);
    goto corral_source_split_1950;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    out_$i143 := $sub.i32(out_$i27, 1);
    call {:si_unique_call 410} {:cexpr "read_stop"} boogie_si_record_i32(out_$i143);
    goto corral_source_split_1949;

  $bb65:
    assume out_$i142 == 1;
    goto corral_source_split_1948;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    out_$i142 := $sgt.i32(out_$i141, 0);
    goto corral_source_split_1902;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    out_$i141 := $load.i32($M.16, in_$p1);
    goto corral_source_split_1901;

  $bb47:
    assume !(out_$i102 == 1);
    goto corral_source_split_1900;

  $bb71:
    assume out_$i153 == 1;
    goto corral_source_split_1970;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    out_$i154, out_$i155, out_$i156 := out_$i28, out_$i29, out_$i152;
    assume true;
    goto $bb71, $bb72;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    out_$i153 := $sgt.i32(out_$i30, 0);
    goto corral_source_split_1965;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    out_$i152 := $sub.i32(out_$i30, 1);
    call {:si_unique_call 412} {:cexpr "retry_on_timeout"} boogie_si_record_i32(out_$i152);
    goto corral_source_split_1964;

  $bb69:
    assume out_$i151 == 1;
    goto corral_source_split_1963;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    out_$i151 := $eq.i32(out_$i45, $sub.i32(0, 110));
    goto corral_source_split_1953;

  $bb66:
    assume !(out_$i142 == 1);
    goto corral_source_split_1952;

  $bb75:
    assume out_$i162 == 1;
    goto corral_source_split_1991;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    out_$i163, out_$i164, out_$i165 := out_$i28, out_$i30, out_$i161;
    assume true;
    goto $bb75, $bb76;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    out_$i162 := $sgt.i32(out_$i29, 0);
    goto corral_source_split_1980;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    out_$i161 := $sub.i32(out_$i29, 1);
    call {:si_unique_call 414} {:cexpr "retry_on_empty"} boogie_si_record_i32(out_$i161);
    goto corral_source_split_1979;

  $bb73:
    assume out_$i160 == 1;
    goto corral_source_split_1978;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    out_$i160 := $eq.i32(out_$i45, 0);
    goto corral_source_split_1968;

  $bb70:
    assume !(out_$i151 == 1);
    goto corral_source_split_1967;

  $bb77:
    assume out_$i174 == 1;
    goto corral_source_split_1999;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    out_$i175, out_$i176, out_$i177 := out_$i29, out_$i30, out_$i169;
    assume true;
    goto $bb77, $bb78;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    out_$i174 := $sgt.i32(out_$i27, 0);
    goto corral_source_split_1989;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    out_$i173 := $sub.i32(out_$i27, 1);
    call {:si_unique_call 417} {:cexpr "read_stop"} boogie_si_record_i32(out_$i173);
    goto corral_source_split_1988;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} dev_err.ref.ref.i32(out_$p172, .str.21, out_$i45);
    goto corral_source_split_1987;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    out_$p172 := $add.ref($add.ref(out_$p171, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_1986;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    out_$p171 := $load.ref($M.0, out_$p170);
    goto corral_source_split_1985;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    out_$p170 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_1984;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    out_$i169 := $add.i32(out_$i28, 1);
    call {:si_unique_call 415} {:cexpr "err_count"} boogie_si_record_i32(out_$i169);
    goto corral_source_split_1983;

  $bb74:
    assume !(out_$i160 == 1);
    goto corral_source_split_1982;

  $bb15:
    call out_$i25, out_$i21, out_$i22, out_$i23, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$i36, out_$p37, out_$p38, out_$i39, out_$p40, out_$p41, out_$p42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$p49, out_$p50, out_$p51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p66, out_$i68, out_$i70, out_$i71, out_$p72, out_$p69, out_$p67, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i57, out_$p58, out_$p59, out_$i78, out_$i56, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i101, out_$i102, out_$p103, out_$p104, out_$i105, out_$p106, out_$p107, out_$p108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i151, out_$i152, out_$i153, out_$i154, out_$i155, out_$i156, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i169, out_$p170, out_$p171, out_$p172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177 := ftdi_elan_synchronize_loop_$bb15(in_$p0, in_$p1, in_$p2, out_$i25, out_$i21, out_$i22, out_$i23, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$i36, out_$p37, out_$p38, out_$i39, out_$p40, out_$p41, out_$p42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$p49, out_$p50, out_$p51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p66, out_$i68, out_$i70, out_$i71, out_$p72, out_$p69, out_$p67, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i57, out_$p58, out_$p59, out_$i78, out_$i56, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i101, out_$i102, out_$p103, out_$p104, out_$i105, out_$p106, out_$p107, out_$p108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i151, out_$i152, out_$i153, out_$i154, out_$i155, out_$i156, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i169, out_$p170, out_$p171, out_$p172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177);
    goto $bb15_last;

  $bb15_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    out_$i21, out_$i22, out_$i23 := out_$i9, out_$i10, out_$i11;
    goto $bb15;

  $bb55:
    assume !(out_$i120 == 1);
    assume {:verifier.code 0} true;
    out_$i21, out_$i22, out_$i23 := out_$i118, out_$i117, out_$i116;
    assume false;
    return;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    out_$i25 := out_$i119;
    assume true;
    goto $bb55;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    out_$i120 := $ne.i32(out_$i119, 0);
    goto corral_source_split_1919;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 404} out_$i119 := ftdi_elan_synchronize_reset(in_$p0);
    call {:si_unique_call 405} {:cexpr "retval"} boogie_si_record_i32(out_$i119);
    goto corral_source_split_1918;

  $bb54:
    assume !(out_$i115 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1917;

  $bb14:
    assume !(out_$i19 == 1);
    goto corral_source_split_1785;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    out_$i20 := out_$i18;
    assume true;
    goto $bb14;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    out_$i19 := $ne.i32(out_$i18, 0);
    goto corral_source_split_1781;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} out_$i18 := ftdi_elan_synchronize_reset(in_$p0);
    call {:si_unique_call 385} {:cexpr "retval"} boogie_si_record_i32(out_$i18);
    goto corral_source_split_1780;

  $bb11:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    out_$i17 := out_$i15;
    assume true;
    goto $bb11;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    out_$i16 := $ne.i32(out_$i15, 0);
    goto corral_source_split_1776;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} out_$i15 := ftdi_elan_flush_input_fifo(in_$p0);
    call {:si_unique_call 383} {:cexpr "retval"} boogie_si_record_i32(out_$i15);
    goto corral_source_split_1775;

  $bb8:
    assume !(out_$i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    out_$i14 := out_$i12;
    assume true;
    goto $bb8;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    out_$i13 := $ne.i32(out_$i12, 0);
    goto corral_source_split_1771;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} out_$i12 := ftdi_elan_synchronize_flush(in_$p0);
    call {:si_unique_call 381} {:cexpr "retval"} boogie_si_record_i32(out_$i12);
    goto corral_source_split_1770;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    goto $bb6;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref(out_$p58, $mul.ref(out_$i71, 1));
    assume {:verifier.code 0} true;
    out_$p69 := out_$p72;
    goto $bb32;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    out_$p69 := out_$p58;
    goto $bb32;

  $bb30:
    assume out_$i68 == 1;
    goto corral_source_split_1852;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    out_$i68 := $sgt.i32(out_$i57, 31);
    goto corral_source_split_1842;

  $bb28:
    assume !(out_$i62 == 1);
    goto corral_source_split_1841;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    out_$i71 := $sext.i32.i64(out_$i70);
    goto corral_source_split_1856;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} out_$i70 := sprintf.ref.ref(out_$p58, .str.5);
    call {:si_unique_call 397} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i70);
    goto corral_source_split_1855;

  $bb31:
    assume !(out_$i68 == 1);
    goto corral_source_split_1854;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} dev_err.ref.ref(out_$p132, .str.18);
    goto corral_source_split_1938;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    out_$p132 := $add.ref($add.ref(out_$p131, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_1937;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    out_$p131 := $load.ref($M.0, out_$p130);
    goto corral_source_split_1936;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    out_$p130 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_1935;

  $bb62:
    assume !(out_$i126 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1934;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} dev_err.ref.ref(out_$p140, .str.18);
    goto corral_source_split_1946;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    out_$p140 := $add.ref($add.ref(out_$p139, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_1945;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    out_$p139 := $load.ref($M.0, out_$p138);
    goto corral_source_split_1944;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    out_$p138 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_1943;

  $bb64:
    assume !(out_$i134 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1942;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} dev_err.ref.ref(out_$p150, .str.18);
    goto corral_source_split_1961;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    out_$p150 := $add.ref($add.ref(out_$p149, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_1960;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    out_$p149 := $load.ref($M.0, out_$p148);
    goto corral_source_split_1959;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    out_$p148 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_1958;

  $bb68:
    assume !(out_$i144 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1957;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} dev_err.ref.ref(out_$p159, .str.19);
    goto corral_source_split_1976;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    out_$p159 := $add.ref($add.ref(out_$p158, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_1975;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    out_$p158 := $load.ref($M.0, out_$p157);
    goto corral_source_split_1974;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    out_$p157 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_1973;

  $bb72:
    assume !(out_$i153 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1972;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} dev_err.ref.ref(out_$p168, .str.20);
    goto corral_source_split_1997;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    out_$p168 := $add.ref($add.ref(out_$p167, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_1996;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    out_$p167 := $load.ref($M.0, out_$p166);
    goto corral_source_split_1995;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    out_$p166 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_1994;

  $bb76:
    assume !(out_$i162 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1993;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} dev_err.ref.ref(out_$p180, .str.18);
    goto corral_source_split_2005;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    out_$p180 := $add.ref($add.ref(out_$p179, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_2004;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    out_$p179 := $load.ref($M.0, out_$p178);
    goto corral_source_split_2003;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    out_$p178 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_2002;

  $bb78:
    assume !(out_$i174 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2001;

  $bb44_dummy:
    call {:si_unique_call 1} out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i25, out_$i21, out_$i22, out_$i23, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$i36, out_$p37, out_$p38, out_$i39, out_$p40, out_$p41, out_$p42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$p49, out_$p50, out_$p51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p66, out_$i68, out_$i70, out_$i71, out_$p72, out_$p69, out_$p67, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i57, out_$p58, out_$p59, out_$i78, out_$i56, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$p93, out_$p94, out_$p95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$p103, out_$p104, out_$i105, out_$p106, out_$p107, out_$p108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$p130, out_$p131, out_$p132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$p138, out_$p139, out_$p140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$p148, out_$p149, out_$p150, out_$i151, out_$i152, out_$i153, out_$i154, out_$i155, out_$i156, out_$p157, out_$p158, out_$p159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i165, out_$p166, out_$p167, out_$p168, out_$i169, out_$p170, out_$p171, out_$p172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177, out_$p178, out_$p179, out_$p180, out_$i8, out_$i9, out_$i10, out_$i11 := ftdi_elan_synchronize_loop_$bb5(in_$p0, in_$p1, in_$p2, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i25, out_$i21, out_$i22, out_$i23, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$i36, out_$p37, out_$p38, out_$i39, out_$p40, out_$p41, out_$p42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$p49, out_$p50, out_$p51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p66, out_$i68, out_$i70, out_$i71, out_$p72, out_$p69, out_$p67, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i57, out_$p58, out_$p59, out_$i78, out_$i56, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$p93, out_$p94, out_$p95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$p103, out_$p104, out_$i105, out_$p106, out_$p107, out_$p108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$p130, out_$p131, out_$p132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$p138, out_$p139, out_$p140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$p148, out_$p149, out_$p150, out_$i151, out_$i152, out_$i153, out_$i154, out_$i155, out_$i156, out_$p157, out_$p158, out_$p159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i165, out_$p166, out_$p167, out_$p168, out_$i169, out_$p170, out_$p171, out_$p172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177, out_$p178, out_$p179, out_$p180, out_$i8, out_$i9, out_$i10, out_$i11);
    return;

  exit:
    return;
}



procedure ftdi_elan_synchronize_loop_$bb5(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i12: i32, in_$i13: i1, in_$i14: i32, in_$i15: i32, in_$i16: i1, in_$i17: i32, in_$i18: i32, in_$i19: i1, in_$i20: i32, in_$i25: i32, in_$i21: i32, in_$i22: i32, in_$i23: i32, in_$i26: i32, in_$i27: i32, in_$i28: i32, in_$i29: i32, in_$i30: i32, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$i34: i8, in_$i35: i32, in_$i36: i32, in_$p37: ref, in_$p38: ref, in_$i39: i32, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$i43: i64, in_$i44: i32, in_$i45: i32, in_$i46: i32, in_$i47: i1, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$i52: i32, in_$i53: i32, in_$i54: i32, in_$i55: i1, in_$p60: ref, in_$i61: i8, in_$i62: i1, in_$i63: i32, in_$i64: i32, in_$i65: i64, in_$p66: ref, in_$i68: i1, in_$i70: i32, in_$i71: i64, in_$p72: ref, in_$p69: ref, in_$p67: ref, in_$i73: i32, in_$i74: i32, in_$i75: i32, in_$i76: i32, in_$i77: i1, in_$i57: i32, in_$p58: ref, in_$p59: ref, in_$i78: i8, in_$i56: i8, in_$i79: i32, in_$i80: i1, in_$i81: i32, in_$i82: i1, in_$i83: i32, in_$i84: i32, in_$i85: i32, in_$i86: i32, in_$i87: i32, in_$i88: i32, in_$i89: i1, in_$i90: i32, in_$i91: i32, in_$i92: i32, in_$p93: ref, in_$p94: ref, in_$p95: ref, in_$i96: i32, in_$i97: i32, in_$i98: i32, in_$i99: i32, in_$i100: i1, in_$i101: i32, in_$i102: i1, in_$p103: ref, in_$p104: ref, in_$i105: i8, in_$p106: ref, in_$p107: ref, in_$p108: ref, in_$i109: i8, in_$i110: i32, in_$i111: i1, in_$i112: i32, in_$i113: i1, in_$i114: i32, in_$i115: i1, in_$i116: i32, in_$i117: i32, in_$i118: i32, in_$i119: i32, in_$i120: i1, in_$i121: i32, in_$i122: i1, in_$i123: i32, in_$i124: i1, in_$i125: i32, in_$i126: i1, in_$i127: i32, in_$i128: i32, in_$i129: i32, in_$p130: ref, in_$p131: ref, in_$p132: ref, in_$i133: i32, in_$i134: i1, in_$i135: i32, in_$i136: i32, in_$i137: i32, in_$p138: ref, in_$p139: ref, in_$p140: ref, in_$i141: i32, in_$i142: i1, in_$i143: i32, in_$i144: i1, in_$i145: i32, in_$i146: i32, in_$i147: i32, in_$p148: ref, in_$p149: ref, in_$p150: ref, in_$i151: i1, in_$i152: i32, in_$i153: i1, in_$i154: i32, in_$i155: i32, in_$i156: i32, in_$p157: ref, in_$p158: ref, in_$p159: ref, in_$i160: i1, in_$i161: i32, in_$i162: i1, in_$i163: i32, in_$i164: i32, in_$i165: i32, in_$p166: ref, in_$p167: ref, in_$p168: ref, in_$i169: i32, in_$p170: ref, in_$p171: ref, in_$p172: ref, in_$i173: i32, in_$i174: i1, in_$i175: i32, in_$i176: i32, in_$i177: i32, in_$p178: ref, in_$p179: ref, in_$p180: ref, in_$i8: i32, in_$i9: i32, in_$i10: i32, in_$i11: i32) returns (out_$i12: i32, out_$i13: i1, out_$i14: i32, out_$i15: i32, out_$i16: i1, out_$i17: i32, out_$i18: i32, out_$i19: i1, out_$i20: i32, out_$i25: i32, out_$i21: i32, out_$i22: i32, out_$i23: i32, out_$i26: i32, out_$i27: i32, out_$i28: i32, out_$i29: i32, out_$i30: i32, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$i34: i8, out_$i35: i32, out_$i36: i32, out_$p37: ref, out_$p38: ref, out_$i39: i32, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$i43: i64, out_$i44: i32, out_$i45: i32, out_$i46: i32, out_$i47: i1, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$i52: i32, out_$i53: i32, out_$i54: i32, out_$i55: i1, out_$p60: ref, out_$i61: i8, out_$i62: i1, out_$i63: i32, out_$i64: i32, out_$i65: i64, out_$p66: ref, out_$i68: i1, out_$i70: i32, out_$i71: i64, out_$p72: ref, out_$p69: ref, out_$p67: ref, out_$i73: i32, out_$i74: i32, out_$i75: i32, out_$i76: i32, out_$i77: i1, out_$i57: i32, out_$p58: ref, out_$p59: ref, out_$i78: i8, out_$i56: i8, out_$i79: i32, out_$i80: i1, out_$i81: i32, out_$i82: i1, out_$i83: i32, out_$i84: i32, out_$i85: i32, out_$i86: i32, out_$i87: i32, out_$i88: i32, out_$i89: i1, out_$i90: i32, out_$i91: i32, out_$i92: i32, out_$p93: ref, out_$p94: ref, out_$p95: ref, out_$i96: i32, out_$i97: i32, out_$i98: i32, out_$i99: i32, out_$i100: i1, out_$i101: i32, out_$i102: i1, out_$p103: ref, out_$p104: ref, out_$i105: i8, out_$p106: ref, out_$p107: ref, out_$p108: ref, out_$i109: i8, out_$i110: i32, out_$i111: i1, out_$i112: i32, out_$i113: i1, out_$i114: i32, out_$i115: i1, out_$i116: i32, out_$i117: i32, out_$i118: i32, out_$i119: i32, out_$i120: i1, out_$i121: i32, out_$i122: i1, out_$i123: i32, out_$i124: i1, out_$i125: i32, out_$i126: i1, out_$i127: i32, out_$i128: i32, out_$i129: i32, out_$p130: ref, out_$p131: ref, out_$p132: ref, out_$i133: i32, out_$i134: i1, out_$i135: i32, out_$i136: i32, out_$i137: i32, out_$p138: ref, out_$p139: ref, out_$p140: ref, out_$i141: i32, out_$i142: i1, out_$i143: i32, out_$i144: i1, out_$i145: i32, out_$i146: i32, out_$i147: i32, out_$p148: ref, out_$p149: ref, out_$p150: ref, out_$i151: i1, out_$i152: i32, out_$i153: i1, out_$i154: i32, out_$i155: i32, out_$i156: i32, out_$p157: ref, out_$p158: ref, out_$p159: ref, out_$i160: i1, out_$i161: i32, out_$i162: i1, out_$i163: i32, out_$i164: i32, out_$i165: i32, out_$p166: ref, out_$p167: ref, out_$p168: ref, out_$i169: i32, out_$p170: ref, out_$p171: ref, out_$p172: ref, out_$i173: i32, out_$i174: i1, out_$i175: i32, out_$i176: i32, out_$i177: i32, out_$p178: ref, out_$p179: ref, out_$p180: ref, out_$i8: i32, out_$i9: i32, out_$i10: i32, out_$i11: i32);
  modifies $M.16, $M.19, $M.0, $M.22, $CurrAddr;



implementation ftdi_elan_stuck_waiting_loop_$bb10(in_$p1: ref, in_$p38: ref, in_$i39: i8, in_$i40: i1, in_$i41: i32, in_$i42: i32, in_$i43: i32, in_$i44: i64, in_$p45: ref, in_$i47: i1, in_$i49: i32, in_$i50: i64, in_$p51: ref, in_$p48: ref, in_$p46: ref, in_$i52: i32, in_$i53: i32, in_$i54: i32, in_$i55: i32, in_$i56: i1, in_$i35: i32, in_$p36: ref, in_$p37: ref) returns (out_$p38: ref, out_$i39: i8, out_$i40: i1, out_$i41: i32, out_$i42: i32, out_$i43: i32, out_$i44: i64, out_$p45: ref, out_$i47: i1, out_$i49: i32, out_$i50: i64, out_$p51: ref, out_$p48: ref, out_$p46: ref, out_$i52: i32, out_$i53: i32, out_$i54: i32, out_$i55: i32, out_$i56: i1, out_$i35: i32, out_$p36: ref, out_$p37: ref)
{

  entry:
    out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i47, out_$i49, out_$i50, out_$p51, out_$p48, out_$p46, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i35, out_$p36, out_$p37 := in_$p38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$p45, in_$i47, in_$i49, in_$i50, in_$p51, in_$p48, in_$p46, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i35, in_$p36, in_$p37;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2069;

  $bb18:
    assume out_$i56 == 1;
    assume {:verifier.code 0} true;
    out_$i35, out_$p36, out_$p37 := out_$i52, out_$p38, out_$p46;
    goto $bb18_dummy;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    out_$i56 := $sgt.i32(out_$i53, 0);
    goto corral_source_split_2091;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    $M.16 := $store.i32($M.16, in_$p1, out_$i55);
    goto corral_source_split_2090;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    out_$i55 := $sub.i32(out_$i54, 1);
    goto corral_source_split_2089;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    out_$i54 := $load.i32($M.16, in_$p1);
    goto corral_source_split_2088;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    out_$i53 := $load.i32($M.16, in_$p1);
    call {:si_unique_call 436} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i53);
    goto corral_source_split_2087;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    out_$i52 := $add.i32(out_$i35, 1);
    call {:si_unique_call 435} {:cexpr "bytes_read"} boogie_si_record_i32(out_$i52);
    goto corral_source_split_2086;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_2085;

  $bb17:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$p46 := out_$p48;
    goto $bb14;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    out_$p46 := out_$p45;
    goto $bb14;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref(out_$p37, $mul.ref(out_$i44, 1));
    goto corral_source_split_2080;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    out_$i44 := $sext.i32.i64(out_$i43);
    goto corral_source_split_2079;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} out_$i43 := sprintf.ref.ref.i32(out_$p37, .str.4, out_$i42);
    call {:si_unique_call 434} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i43);
    goto corral_source_split_2078;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    out_$i42 := $and.i32(out_$i41, 255);
    goto corral_source_split_2077;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    out_$i41 := $sext.i8.i32(out_$i39);
    goto corral_source_split_2076;

  $bb12:
    assume out_$i40 == 1;
    goto corral_source_split_2075;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    out_$i40 := $slt.i32(out_$i35, 31);
    goto corral_source_split_2073;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i8($M.0, out_$p36);
    call {:si_unique_call 432} {:cexpr "c"} boogie_si_record_i8(out_$i39);
    goto corral_source_split_2072;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref(out_$p36, $mul.ref(1, 1));
    goto corral_source_split_2071;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref(out_$p37, $mul.ref(out_$i50, 1));
    assume {:verifier.code 0} true;
    out_$p48 := out_$p51;
    goto $bb17;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    out_$p48 := out_$p37;
    goto $bb17;

  $bb15:
    assume out_$i47 == 1;
    goto corral_source_split_2093;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    out_$i47 := $sgt.i32(out_$i35, 31);
    goto corral_source_split_2083;

  $bb13:
    assume !(out_$i40 == 1);
    goto corral_source_split_2082;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    out_$i50 := $sext.i32.i64(out_$i49);
    goto corral_source_split_2097;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} out_$i49 := sprintf.ref.ref(out_$p37, .str.5);
    call {:si_unique_call 438} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i49);
    goto corral_source_split_2096;

  $bb16:
    assume !(out_$i47 == 1);
    goto corral_source_split_2095;

  $bb18_dummy:
    call {:si_unique_call 1} out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i47, out_$i49, out_$i50, out_$p51, out_$p48, out_$p46, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i35, out_$p36, out_$p37 := ftdi_elan_stuck_waiting_loop_$bb10(in_$p1, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i47, out_$i49, out_$i50, out_$p51, out_$p48, out_$p46, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i35, out_$p36, out_$p37);
    return;

  exit:
    return;
}



procedure ftdi_elan_stuck_waiting_loop_$bb10(in_$p1: ref, in_$p38: ref, in_$i39: i8, in_$i40: i1, in_$i41: i32, in_$i42: i32, in_$i43: i32, in_$i44: i64, in_$p45: ref, in_$i47: i1, in_$i49: i32, in_$i50: i64, in_$p51: ref, in_$p48: ref, in_$p46: ref, in_$i52: i32, in_$i53: i32, in_$i54: i32, in_$i55: i32, in_$i56: i1, in_$i35: i32, in_$p36: ref, in_$p37: ref) returns (out_$p38: ref, out_$i39: i8, out_$i40: i1, out_$i41: i32, out_$i42: i32, out_$i43: i32, out_$i44: i64, out_$p45: ref, out_$i47: i1, out_$i49: i32, out_$i50: i64, out_$p51: ref, out_$p48: ref, out_$p46: ref, out_$i52: i32, out_$i53: i32, out_$i54: i32, out_$i55: i32, out_$i56: i1, out_$i35: i32, out_$p36: ref, out_$p37: ref);
  modifies $M.16;



implementation ftdi_elan_stuck_waiting_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$i12: i8, in_$i13: i32, in_$i14: i32, in_$p15: ref, in_$p16: ref, in_$i17: i32, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i32, in_$i23: i32, in_$i24: i32, in_$i25: i1, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i32, in_$i32: i32, in_$i33: i32, in_$i34: i1, in_$p38: ref, in_$i39: i8, in_$i40: i1, in_$i41: i32, in_$i42: i32, in_$i43: i32, in_$i44: i64, in_$p45: ref, in_$i47: i1, in_$i49: i32, in_$i50: i64, in_$p51: ref, in_$p48: ref, in_$p46: ref, in_$i52: i32, in_$i53: i32, in_$i54: i32, in_$i55: i32, in_$i56: i1, in_$i35: i32, in_$p36: ref, in_$p37: ref, in_$i26: i32) returns (out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$i12: i8, out_$i13: i32, out_$i14: i32, out_$p15: ref, out_$p16: ref, out_$i17: i32, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i32, out_$i23: i32, out_$i24: i32, out_$i25: i1, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: i32, out_$i32: i32, out_$i33: i32, out_$i34: i1, out_$p38: ref, out_$i39: i8, out_$i40: i1, out_$i41: i32, out_$i42: i32, out_$i43: i32, out_$i44: i64, out_$p45: ref, out_$i47: i1, out_$i49: i32, out_$i50: i64, out_$p51: ref, out_$p48: ref, out_$p46: ref, out_$i52: i32, out_$i53: i32, out_$i54: i32, out_$i55: i32, out_$i56: i1, out_$i35: i32, out_$p36: ref, out_$p37: ref, out_$i26: i32)
{

  entry:
    out_$p9, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p15, out_$p16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i47, out_$i49, out_$i50, out_$p51, out_$p48, out_$p46, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i35, out_$p36, out_$p37, out_$i26 := in_$p9, in_$p10, in_$p11, in_$i12, in_$i13, in_$i14, in_$p15, in_$p16, in_$i17, in_$p18, in_$p19, in_$p20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$p28, in_$p29, in_$p30, in_$i31, in_$i32, in_$i33, in_$i34, in_$p38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$p45, in_$i47, in_$i49, in_$i50, in_$p51, in_$p48, in_$p46, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i35, in_$p36, in_$p37, in_$i26;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    $M.16 := $store.i32($M.16, in_$p1, 0);
    goto corral_source_split_2032;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb20_dummy;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb8:
    assume {:verifier.code 0} true;
    assume !(out_$i34 == 1);
    goto $bb9;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb19:
    assume !(out_$i56 == 1);
    goto corral_source_split_2099;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    out_$i56 := $sgt.i32(out_$i53, 0);
    goto corral_source_split_2091;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    $M.16 := $store.i32($M.16, in_$p1, out_$i55);
    goto corral_source_split_2090;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    out_$i55 := $sub.i32(out_$i54, 1);
    goto corral_source_split_2089;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    out_$i54 := $load.i32($M.16, in_$p1);
    goto corral_source_split_2088;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    out_$i53 := $load.i32($M.16, in_$p1);
    call {:si_unique_call 436} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i53);
    goto corral_source_split_2087;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    out_$i52 := $add.i32(out_$i35, 1);
    call {:si_unique_call 435} {:cexpr "bytes_read"} boogie_si_record_i32(out_$i52);
    goto corral_source_split_2086;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_2085;

  $bb17:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$p46 := out_$p48;
    goto $bb14;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    out_$p46 := out_$p45;
    goto $bb14;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref(out_$p37, $mul.ref(out_$i44, 1));
    goto corral_source_split_2080;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    out_$i44 := $sext.i32.i64(out_$i43);
    goto corral_source_split_2079;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} out_$i43 := sprintf.ref.ref.i32(out_$p37, .str.4, out_$i42);
    call {:si_unique_call 434} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i43);
    goto corral_source_split_2078;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    out_$i42 := $and.i32(out_$i41, 255);
    goto corral_source_split_2077;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    out_$i41 := $sext.i8.i32(out_$i39);
    goto corral_source_split_2076;

  $bb12:
    assume out_$i40 == 1;
    goto corral_source_split_2075;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    out_$i40 := $slt.i32(out_$i35, 31);
    goto corral_source_split_2073;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i8($M.0, out_$p36);
    call {:si_unique_call 432} {:cexpr "c"} boogie_si_record_i8(out_$i39);
    goto corral_source_split_2072;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref(out_$p36, $mul.ref(1, 1));
    goto corral_source_split_2071;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb10:
    call out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i47, out_$i49, out_$i50, out_$p51, out_$p48, out_$p46, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i35, out_$p36, out_$p37 := ftdi_elan_stuck_waiting_loop_$bb10(in_$p1, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i47, out_$i49, out_$i50, out_$p51, out_$p48, out_$p46, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i35, out_$p36, out_$p37);
    goto $bb10_last;

  $bb10_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2069;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    out_$i35, out_$p36, out_$p37 := 0, out_$p29, in_$p2;
    goto $bb10;

  $bb18:
    assume out_$i56 == 1;
    assume {:verifier.code 0} true;
    out_$i35, out_$p36, out_$p37 := out_$i52, out_$p38, out_$p46;
    assume false;
    return;

  $bb7:
    assume out_$i34 == 1;
    goto corral_source_split_2067;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    out_$i34 := $sgt.i32(out_$i31, 0);
    goto corral_source_split_2061;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $M.16 := $store.i32($M.16, in_$p1, out_$i33);
    goto corral_source_split_2060;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    out_$i33 := $sub.i32(out_$i32, 1);
    goto corral_source_split_2059;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i32($M.16, in_$p1);
    goto corral_source_split_2058;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i32($M.16, in_$p1);
    call {:si_unique_call 431} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i31);
    goto corral_source_split_2057;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    $M.20 := $store.i8($M.20, out_$p30, 0);
    goto corral_source_split_2056;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(in_$p2, $mul.ref(0, 94)), $mul.ref(0, 1));
    goto corral_source_split_2055;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    out_$p29 := $load.ref($M.0, out_$p28);
    goto corral_source_split_2054;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7400, 1));
    goto corral_source_split_2053;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    goto corral_source_split_2052;

  $bb5:
    assume out_$i25 == 1;
    goto corral_source_split_2051;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    out_$i26 := out_$i23;
    assume true;
    goto $bb5;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    out_$i25 := $sgt.i32(out_$i24, 2);
    goto corral_source_split_2049;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i32($M.16, in_$p1);
    goto corral_source_split_2048;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} out_$i23 := usb_bulk_msg(out_$p16, out_$i17, out_$p19, out_$i22, in_$p1, 1000);
    call {:si_unique_call 430} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i23);
    goto corral_source_split_2047;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    out_$i22 := $trunc.i64.i32(out_$i21);
    goto corral_source_split_2046;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    out_$i21 := $load.i64($M.0, out_$p20);
    goto corral_source_split_2045;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7408, 1));
    goto corral_source_split_2044;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.0, out_$p18);
    goto corral_source_split_2043;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7400, 1));
    goto corral_source_split_2042;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    out_$i17 := $or.i32(out_$i14, $sub.i32(0, 1073741696));
    goto corral_source_split_2041;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    out_$p16 := $load.ref($M.0, out_$p15);
    goto corral_source_split_2040;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_2039;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} out_$i14 := __create_pipe(out_$p10, out_$i13);
    call {:si_unique_call 428} {:cexpr "tmp"} boogie_si_record_i32(out_$i14);
    goto corral_source_split_2038;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    out_$i13 := $zext.i8.i32(out_$i12);
    goto corral_source_split_2037;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    out_$i12 := $load.i8($M.0, out_$p11);
    goto corral_source_split_2036;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7432, 1));
    goto corral_source_split_2035;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    out_$p10 := $load.ref($M.0, out_$p9);
    goto corral_source_split_2034;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_2033;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref(out_$p37, $mul.ref(out_$i50, 1));
    assume {:verifier.code 0} true;
    out_$p48 := out_$p51;
    goto $bb17;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    out_$p48 := out_$p37;
    goto $bb17;

  $bb15:
    assume out_$i47 == 1;
    goto corral_source_split_2093;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    out_$i47 := $sgt.i32(out_$i35, 31);
    goto corral_source_split_2083;

  $bb13:
    assume !(out_$i40 == 1);
    goto corral_source_split_2082;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    out_$i50 := $sext.i32.i64(out_$i49);
    goto corral_source_split_2097;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} out_$i49 := sprintf.ref.ref(out_$p37, .str.5);
    call {:si_unique_call 438} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i49);
    goto corral_source_split_2096;

  $bb16:
    assume !(out_$i47 == 1);
    goto corral_source_split_2095;

  $bb20_dummy:
    call {:si_unique_call 1} out_$p9, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p15, out_$p16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i47, out_$i49, out_$i50, out_$p51, out_$p48, out_$p46, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i35, out_$p36, out_$p37, out_$i26 := ftdi_elan_stuck_waiting_loop_$bb4(in_$p0, in_$p1, in_$p2, out_$p9, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p15, out_$p16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i47, out_$i49, out_$i50, out_$p51, out_$p48, out_$p46, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i35, out_$p36, out_$p37, out_$i26);
    return;

  exit:
    return;
}



procedure ftdi_elan_stuck_waiting_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$i12: i8, in_$i13: i32, in_$i14: i32, in_$p15: ref, in_$p16: ref, in_$i17: i32, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i32, in_$i23: i32, in_$i24: i32, in_$i25: i1, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i32, in_$i32: i32, in_$i33: i32, in_$i34: i1, in_$p38: ref, in_$i39: i8, in_$i40: i1, in_$i41: i32, in_$i42: i32, in_$i43: i32, in_$i44: i64, in_$p45: ref, in_$i47: i1, in_$i49: i32, in_$i50: i64, in_$p51: ref, in_$p48: ref, in_$p46: ref, in_$i52: i32, in_$i53: i32, in_$i54: i32, in_$i55: i32, in_$i56: i1, in_$i35: i32, in_$p36: ref, in_$p37: ref, in_$i26: i32) returns (out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$i12: i8, out_$i13: i32, out_$i14: i32, out_$p15: ref, out_$p16: ref, out_$i17: i32, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i32, out_$i23: i32, out_$i24: i32, out_$i25: i1, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: i32, out_$i32: i32, out_$i33: i32, out_$i34: i1, out_$p38: ref, out_$i39: i8, out_$i40: i1, out_$i41: i32, out_$i42: i32, out_$i43: i32, out_$i44: i64, out_$p45: ref, out_$i47: i1, out_$i49: i32, out_$i50: i64, out_$p51: ref, out_$p48: ref, out_$p46: ref, out_$i52: i32, out_$i53: i32, out_$i54: i32, out_$i55: i32, out_$i56: i1, out_$i35: i32, out_$p36: ref, out_$p37: ref, out_$i26: i32);
  modifies $M.16, $M.20;



implementation ftdi_elan_stuck_waiting_loop_$bb3(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i6: i32, in_$i8: i32, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$i12: i8, in_$i13: i32, in_$i14: i32, in_$p15: ref, in_$p16: ref, in_$i17: i32, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i32, in_$i23: i32, in_$i24: i32, in_$i25: i1, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i32, in_$i32: i32, in_$i33: i32, in_$i34: i1, in_$p38: ref, in_$i39: i8, in_$i40: i1, in_$i41: i32, in_$i42: i32, in_$i43: i32, in_$i44: i64, in_$p45: ref, in_$i47: i1, in_$i49: i32, in_$i50: i64, in_$p51: ref, in_$p48: ref, in_$p46: ref, in_$i52: i32, in_$i53: i32, in_$i54: i32, in_$i55: i32, in_$i56: i1, in_$i35: i32, in_$p36: ref, in_$p37: ref, in_$i26: i32, in_$i57: i32, in_$i58: i1, in_$i59: i32, in_$i60: i32, in_$i78: i32, in_$i79: i1, in_$i80: i32, in_$i81: i32, in_$i94: i1, in_$i95: i32, in_$i101: i1, in_$i103: i32, in_$i104: i1, in_$i102: i32) returns (out_$i8: i32, out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$i12: i8, out_$i13: i32, out_$i14: i32, out_$p15: ref, out_$p16: ref, out_$i17: i32, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i32, out_$i23: i32, out_$i24: i32, out_$i25: i1, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: i32, out_$i32: i32, out_$i33: i32, out_$i34: i1, out_$p38: ref, out_$i39: i8, out_$i40: i1, out_$i41: i32, out_$i42: i32, out_$i43: i32, out_$i44: i64, out_$p45: ref, out_$i47: i1, out_$i49: i32, out_$i50: i64, out_$p51: ref, out_$p48: ref, out_$p46: ref, out_$i52: i32, out_$i53: i32, out_$i54: i32, out_$i55: i32, out_$i56: i1, out_$i35: i32, out_$p36: ref, out_$p37: ref, out_$i26: i32, out_$i57: i32, out_$i58: i1, out_$i59: i32, out_$i60: i32, out_$i78: i32, out_$i79: i1, out_$i80: i32, out_$i81: i32, out_$i94: i1, out_$i95: i32, out_$i101: i1, out_$i103: i32, out_$i104: i1, out_$i102: i32)
{

  entry:
    out_$i8, out_$p9, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p15, out_$p16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i47, out_$i49, out_$i50, out_$p51, out_$p48, out_$p46, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i35, out_$p36, out_$p37, out_$i26, out_$i57, out_$i58, out_$i59, out_$i60, out_$i78, out_$i79, out_$i80, out_$i81, out_$i94, out_$i95, out_$i101, out_$i103, out_$i104, out_$i102 := in_$i8, in_$p9, in_$p10, in_$p11, in_$i12, in_$i13, in_$i14, in_$p15, in_$p16, in_$i17, in_$p18, in_$p19, in_$p20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$p28, in_$p29, in_$p30, in_$i31, in_$i32, in_$i33, in_$i34, in_$p38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$p45, in_$i47, in_$i49, in_$i50, in_$p51, in_$p48, in_$p46, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i35, in_$p36, in_$p37, in_$i26, in_$i57, in_$i58, in_$i59, in_$i60, in_$i78, in_$i79, in_$i80, in_$i81, in_$i94, in_$i95, in_$i101, in_$i103, in_$i104, in_$i102;
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2030;

  $bb42:
    assume out_$i104 == 1;
    assume {:verifier.code 0} true;
    out_$i8 := out_$i103;
    goto $bb42_dummy;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    out_$i104 := $sgt.i32(out_$i8, 0);
    goto corral_source_split_2173;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    out_$i103 := $sub.i32(out_$i8, 1);
    call {:si_unique_call 450} {:cexpr "retry_on_empty"} boogie_si_record_i32(out_$i103);
    goto corral_source_split_2172;

  $bb40:
    assume out_$i101 == 1;
    goto corral_source_split_2171;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    out_$i102 := out_$i26;
    assume true;
    goto $bb40;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    out_$i101 := $eq.i32(out_$i26, 0);
    goto corral_source_split_2163;

  $bb37:
    assume !(out_$i94 == 1);
    goto corral_source_split_2162;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    out_$i95 := out_$i8;
    assume true;
    goto $bb37;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    out_$i94 := $eq.i32(out_$i26, $sub.i32(0, 110));
    goto corral_source_split_2147;

  $bb33:
    assume !(out_$i79 == 1);
    goto corral_source_split_2146;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    out_$i80, out_$i81 := in_$i6, out_$i8;
    assume true;
    goto $bb33;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    out_$i79 := $sgt.i32(out_$i78, 0);
    goto corral_source_split_2114;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    out_$i78 := $load.i32($M.16, in_$p1);
    goto corral_source_split_2113;

  $bb22:
    assume !(out_$i58 == 1);
    goto corral_source_split_2112;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    out_$i59, out_$i60 := in_$i6, out_$i8;
    assume true;
    goto $bb22;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    out_$i58 := $sgt.i32(out_$i57, 1);
    goto corral_source_split_2065;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    out_$i57 := $load.i32($M.16, in_$p1);
    goto corral_source_split_2064;

  $bb6:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2063;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    out_$i26 := out_$i23;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    out_$i25 := $sgt.i32(out_$i24, 2);
    goto corral_source_split_2049;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i32($M.16, in_$p1);
    goto corral_source_split_2048;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} out_$i23 := usb_bulk_msg(out_$p16, out_$i17, out_$p19, out_$i22, in_$p1, 1000);
    call {:si_unique_call 430} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i23);
    goto corral_source_split_2047;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    out_$i22 := $trunc.i64.i32(out_$i21);
    goto corral_source_split_2046;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    out_$i21 := $load.i64($M.0, out_$p20);
    goto corral_source_split_2045;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7408, 1));
    goto corral_source_split_2044;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.0, out_$p18);
    goto corral_source_split_2043;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7400, 1));
    goto corral_source_split_2042;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    out_$i17 := $or.i32(out_$i14, $sub.i32(0, 1073741696));
    goto corral_source_split_2041;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    out_$p16 := $load.ref($M.0, out_$p15);
    goto corral_source_split_2040;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_2039;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} out_$i14 := __create_pipe(out_$p10, out_$i13);
    call {:si_unique_call 428} {:cexpr "tmp"} boogie_si_record_i32(out_$i14);
    goto corral_source_split_2038;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    out_$i13 := $zext.i8.i32(out_$i12);
    goto corral_source_split_2037;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    out_$i12 := $load.i8($M.0, out_$p11);
    goto corral_source_split_2036;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7432, 1));
    goto corral_source_split_2035;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    out_$p10 := $load.ref($M.0, out_$p9);
    goto corral_source_split_2034;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_2033;

  $bb4:
    call out_$p9, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p15, out_$p16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i47, out_$i49, out_$i50, out_$p51, out_$p48, out_$p46, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i35, out_$p36, out_$p37, out_$i26 := ftdi_elan_stuck_waiting_loop_$bb4(in_$p0, in_$p1, in_$p2, out_$p9, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p15, out_$p16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i47, out_$i49, out_$i50, out_$p51, out_$p48, out_$p46, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i35, out_$p36, out_$p37, out_$i26);
    goto $bb4_last;

  $bb4_last:
    assume {:verifier.code 0} true;
    $M.16 := $store.i32($M.16, in_$p1, 0);
    goto corral_source_split_2032;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb20:
    assume {:verifier.code 0} true;
    assume false;
    return;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb8:
    assume {:verifier.code 0} true;
    assume !(out_$i34 == 1);
    goto $bb9;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb19:
    assume !(out_$i56 == 1);
    goto corral_source_split_2099;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    out_$i56 := $sgt.i32(out_$i53, 0);
    goto corral_source_split_2091;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    $M.16 := $store.i32($M.16, in_$p1, out_$i55);
    goto corral_source_split_2090;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    out_$i55 := $sub.i32(out_$i54, 1);
    goto corral_source_split_2089;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    out_$i54 := $load.i32($M.16, in_$p1);
    goto corral_source_split_2088;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    out_$i53 := $load.i32($M.16, in_$p1);
    call {:si_unique_call 436} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i53);
    goto corral_source_split_2087;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    out_$i52 := $add.i32(out_$i35, 1);
    call {:si_unique_call 435} {:cexpr "bytes_read"} boogie_si_record_i32(out_$i52);
    goto corral_source_split_2086;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_2085;

  $bb17:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$p46 := out_$p48;
    goto $bb14;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    out_$p46 := out_$p45;
    goto $bb14;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref(out_$p37, $mul.ref(out_$i44, 1));
    goto corral_source_split_2080;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    out_$i44 := $sext.i32.i64(out_$i43);
    goto corral_source_split_2079;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} out_$i43 := sprintf.ref.ref.i32(out_$p37, .str.4, out_$i42);
    call {:si_unique_call 434} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i43);
    goto corral_source_split_2078;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    out_$i42 := $and.i32(out_$i41, 255);
    goto corral_source_split_2077;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    out_$i41 := $sext.i8.i32(out_$i39);
    goto corral_source_split_2076;

  $bb12:
    assume out_$i40 == 1;
    goto corral_source_split_2075;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    out_$i40 := $slt.i32(out_$i35, 31);
    goto corral_source_split_2073;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i8($M.0, out_$p36);
    call {:si_unique_call 432} {:cexpr "c"} boogie_si_record_i8(out_$i39);
    goto corral_source_split_2072;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref(out_$p36, $mul.ref(1, 1));
    goto corral_source_split_2071;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb10:
    call out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i47, out_$i49, out_$i50, out_$p51, out_$p48, out_$p46, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i35, out_$p36, out_$p37 := ftdi_elan_stuck_waiting_loop_$bb10(in_$p1, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i47, out_$i49, out_$i50, out_$p51, out_$p48, out_$p46, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i35, out_$p36, out_$p37);
    goto $bb10_last;

  $bb10_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2069;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    out_$i35, out_$p36, out_$p37 := 0, out_$p29, in_$p2;
    goto $bb10;

  $bb18:
    assume out_$i56 == 1;
    assume {:verifier.code 0} true;
    out_$i35, out_$p36, out_$p37 := out_$i52, out_$p38, out_$p46;
    assume false;
    return;

  $bb7:
    assume out_$i34 == 1;
    goto corral_source_split_2067;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    out_$i34 := $sgt.i32(out_$i31, 0);
    goto corral_source_split_2061;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $M.16 := $store.i32($M.16, in_$p1, out_$i33);
    goto corral_source_split_2060;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    out_$i33 := $sub.i32(out_$i32, 1);
    goto corral_source_split_2059;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i32($M.16, in_$p1);
    goto corral_source_split_2058;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i32($M.16, in_$p1);
    call {:si_unique_call 431} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i31);
    goto corral_source_split_2057;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    $M.20 := $store.i8($M.20, out_$p30, 0);
    goto corral_source_split_2056;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(in_$p2, $mul.ref(0, 94)), $mul.ref(0, 1));
    goto corral_source_split_2055;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    out_$p29 := $load.ref($M.0, out_$p28);
    goto corral_source_split_2054;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7400, 1));
    goto corral_source_split_2053;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    goto corral_source_split_2052;

  $bb5:
    assume out_$i25 == 1;
    goto corral_source_split_2051;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref(out_$p37, $mul.ref(out_$i50, 1));
    assume {:verifier.code 0} true;
    out_$p48 := out_$p51;
    goto $bb17;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    out_$p48 := out_$p37;
    goto $bb17;

  $bb15:
    assume out_$i47 == 1;
    goto corral_source_split_2093;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    out_$i47 := $sgt.i32(out_$i35, 31);
    goto corral_source_split_2083;

  $bb13:
    assume !(out_$i40 == 1);
    goto corral_source_split_2082;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    out_$i50 := $sext.i32.i64(out_$i49);
    goto corral_source_split_2097;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} out_$i49 := sprintf.ref.ref(out_$p37, .str.5);
    call {:si_unique_call 438} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i49);
    goto corral_source_split_2096;

  $bb16:
    assume !(out_$i47 == 1);
    goto corral_source_split_2095;

  $bb42_dummy:
    call {:si_unique_call 1} out_$i8, out_$p9, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p15, out_$p16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i47, out_$i49, out_$i50, out_$p51, out_$p48, out_$p46, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i35, out_$p36, out_$p37, out_$i26, out_$i57, out_$i58, out_$i59, out_$i60, out_$i78, out_$i79, out_$i80, out_$i81, out_$i94, out_$i95, out_$i101, out_$i103, out_$i104, out_$i102 := ftdi_elan_stuck_waiting_loop_$bb3(in_$p0, in_$p1, in_$p2, in_$i6, out_$i8, out_$p9, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p15, out_$p16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i47, out_$i49, out_$i50, out_$p51, out_$p48, out_$p46, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i35, out_$p36, out_$p37, out_$i26, out_$i57, out_$i58, out_$i59, out_$i60, out_$i78, out_$i79, out_$i80, out_$i81, out_$i94, out_$i95, out_$i101, out_$i103, out_$i104, out_$i102);
    return;

  exit:
    return;
}



procedure ftdi_elan_stuck_waiting_loop_$bb3(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i6: i32, in_$i8: i32, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$i12: i8, in_$i13: i32, in_$i14: i32, in_$p15: ref, in_$p16: ref, in_$i17: i32, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i32, in_$i23: i32, in_$i24: i32, in_$i25: i1, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i32, in_$i32: i32, in_$i33: i32, in_$i34: i1, in_$p38: ref, in_$i39: i8, in_$i40: i1, in_$i41: i32, in_$i42: i32, in_$i43: i32, in_$i44: i64, in_$p45: ref, in_$i47: i1, in_$i49: i32, in_$i50: i64, in_$p51: ref, in_$p48: ref, in_$p46: ref, in_$i52: i32, in_$i53: i32, in_$i54: i32, in_$i55: i32, in_$i56: i1, in_$i35: i32, in_$p36: ref, in_$p37: ref, in_$i26: i32, in_$i57: i32, in_$i58: i1, in_$i59: i32, in_$i60: i32, in_$i78: i32, in_$i79: i1, in_$i80: i32, in_$i81: i32, in_$i94: i1, in_$i95: i32, in_$i101: i1, in_$i103: i32, in_$i104: i1, in_$i102: i32) returns (out_$i8: i32, out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$i12: i8, out_$i13: i32, out_$i14: i32, out_$p15: ref, out_$p16: ref, out_$i17: i32, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i32, out_$i23: i32, out_$i24: i32, out_$i25: i1, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: i32, out_$i32: i32, out_$i33: i32, out_$i34: i1, out_$p38: ref, out_$i39: i8, out_$i40: i1, out_$i41: i32, out_$i42: i32, out_$i43: i32, out_$i44: i64, out_$p45: ref, out_$i47: i1, out_$i49: i32, out_$i50: i64, out_$p51: ref, out_$p48: ref, out_$p46: ref, out_$i52: i32, out_$i53: i32, out_$i54: i32, out_$i55: i32, out_$i56: i1, out_$i35: i32, out_$p36: ref, out_$p37: ref, out_$i26: i32, out_$i57: i32, out_$i58: i1, out_$i59: i32, out_$i60: i32, out_$i78: i32, out_$i79: i1, out_$i80: i32, out_$i81: i32, out_$i94: i1, out_$i95: i32, out_$i101: i1, out_$i103: i32, out_$i104: i1, out_$i102: i32);
  modifies $M.16, $M.20;



implementation ftdi_elan_stuck_waiting_loop_$bb2(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i6: i32, in_$i7: i32, in_$i8: i32, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$i12: i8, in_$i13: i32, in_$i14: i32, in_$p15: ref, in_$p16: ref, in_$i17: i32, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i32, in_$i23: i32, in_$i24: i32, in_$i25: i1, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i32, in_$i32: i32, in_$i33: i32, in_$i34: i1, in_$p38: ref, in_$i39: i8, in_$i40: i1, in_$i41: i32, in_$i42: i32, in_$i43: i32, in_$i44: i64, in_$p45: ref, in_$i47: i1, in_$i49: i32, in_$i50: i64, in_$p51: ref, in_$p48: ref, in_$p46: ref, in_$i52: i32, in_$i53: i32, in_$i54: i32, in_$i55: i32, in_$i56: i1, in_$i35: i32, in_$p36: ref, in_$p37: ref, in_$i26: i32, in_$i57: i32, in_$i58: i1, in_$i59: i32, in_$i60: i32, in_$i78: i32, in_$i79: i1, in_$i80: i32, in_$i81: i32, in_$i94: i1, in_$i95: i32, in_$i96: i32, in_$i97: i1, in_$i101: i1, in_$i103: i32, in_$i104: i1, in_$i102: i32) returns (out_$i6: i32, out_$i7: i32, out_$i8: i32, out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$i12: i8, out_$i13: i32, out_$i14: i32, out_$p15: ref, out_$p16: ref, out_$i17: i32, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i32, out_$i23: i32, out_$i24: i32, out_$i25: i1, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: i32, out_$i32: i32, out_$i33: i32, out_$i34: i1, out_$p38: ref, out_$i39: i8, out_$i40: i1, out_$i41: i32, out_$i42: i32, out_$i43: i32, out_$i44: i64, out_$p45: ref, out_$i47: i1, out_$i49: i32, out_$i50: i64, out_$p51: ref, out_$p48: ref, out_$p46: ref, out_$i52: i32, out_$i53: i32, out_$i54: i32, out_$i55: i32, out_$i56: i1, out_$i35: i32, out_$p36: ref, out_$p37: ref, out_$i26: i32, out_$i57: i32, out_$i58: i1, out_$i59: i32, out_$i60: i32, out_$i78: i32, out_$i79: i1, out_$i80: i32, out_$i81: i32, out_$i94: i1, out_$i95: i32, out_$i96: i32, out_$i97: i1, out_$i101: i1, out_$i103: i32, out_$i104: i1, out_$i102: i32)
{

  entry:
    out_$i6, out_$i7, out_$i8, out_$p9, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p15, out_$p16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i47, out_$i49, out_$i50, out_$p51, out_$p48, out_$p46, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i35, out_$p36, out_$p37, out_$i26, out_$i57, out_$i58, out_$i59, out_$i60, out_$i78, out_$i79, out_$i80, out_$i81, out_$i94, out_$i95, out_$i96, out_$i97, out_$i101, out_$i103, out_$i104, out_$i102 := in_$i6, in_$i7, in_$i8, in_$p9, in_$p10, in_$p11, in_$i12, in_$i13, in_$i14, in_$p15, in_$p16, in_$i17, in_$p18, in_$p19, in_$p20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$p28, in_$p29, in_$p30, in_$i31, in_$i32, in_$i33, in_$i34, in_$p38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$p45, in_$i47, in_$i49, in_$i50, in_$p51, in_$p48, in_$p46, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i35, in_$p36, in_$p37, in_$i26, in_$i57, in_$i58, in_$i59, in_$i60, in_$i78, in_$i79, in_$i80, in_$i81, in_$i94, in_$i95, in_$i96, in_$i97, in_$i101, in_$i103, in_$i104, in_$i102;
    goto $bb2, exit;

  $bb2:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2028;

  $bb38:
    assume out_$i97 == 1;
    assume {:verifier.code 0} true;
    out_$i6, out_$i7 := out_$i96, out_$i95;
    goto $bb38_dummy;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    out_$i97 := $sgt.i32(out_$i6, 0);
    goto corral_source_split_2160;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    out_$i96 := $sub.i32(out_$i6, 1);
    call {:si_unique_call 448} {:cexpr "retry_on_timeout"} boogie_si_record_i32(out_$i96);
    goto corral_source_split_2159;

  $bb36:
    assume out_$i94 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2158;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    out_$i95 := out_$i8;
    assume true;
    goto $bb36, $bb37;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    out_$i94 := $eq.i32(out_$i26, $sub.i32(0, 110));
    goto corral_source_split_2147;

  $bb33:
    assume !(out_$i79 == 1);
    goto corral_source_split_2146;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    out_$i80, out_$i81 := out_$i6, out_$i8;
    assume true;
    goto $bb33;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    out_$i79 := $sgt.i32(out_$i78, 0);
    goto corral_source_split_2114;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    out_$i78 := $load.i32($M.16, in_$p1);
    goto corral_source_split_2113;

  $bb22:
    assume !(out_$i58 == 1);
    goto corral_source_split_2112;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    out_$i59, out_$i60 := out_$i6, out_$i8;
    assume true;
    goto $bb22;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    out_$i58 := $sgt.i32(out_$i57, 1);
    goto corral_source_split_2065;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    out_$i57 := $load.i32($M.16, in_$p1);
    goto corral_source_split_2064;

  $bb6:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2063;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    out_$i26 := out_$i23;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    out_$i25 := $sgt.i32(out_$i24, 2);
    goto corral_source_split_2049;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i32($M.16, in_$p1);
    goto corral_source_split_2048;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} out_$i23 := usb_bulk_msg(out_$p16, out_$i17, out_$p19, out_$i22, in_$p1, 1000);
    call {:si_unique_call 430} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i23);
    goto corral_source_split_2047;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    out_$i22 := $trunc.i64.i32(out_$i21);
    goto corral_source_split_2046;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    out_$i21 := $load.i64($M.0, out_$p20);
    goto corral_source_split_2045;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7408, 1));
    goto corral_source_split_2044;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.0, out_$p18);
    goto corral_source_split_2043;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7400, 1));
    goto corral_source_split_2042;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    out_$i17 := $or.i32(out_$i14, $sub.i32(0, 1073741696));
    goto corral_source_split_2041;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    out_$p16 := $load.ref($M.0, out_$p15);
    goto corral_source_split_2040;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_2039;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} out_$i14 := __create_pipe(out_$p10, out_$i13);
    call {:si_unique_call 428} {:cexpr "tmp"} boogie_si_record_i32(out_$i14);
    goto corral_source_split_2038;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    out_$i13 := $zext.i8.i32(out_$i12);
    goto corral_source_split_2037;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    out_$i12 := $load.i8($M.0, out_$p11);
    goto corral_source_split_2036;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7432, 1));
    goto corral_source_split_2035;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    out_$p10 := $load.ref($M.0, out_$p9);
    goto corral_source_split_2034;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_2033;

  $bb4:
    call out_$p9, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p15, out_$p16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i47, out_$i49, out_$i50, out_$p51, out_$p48, out_$p46, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i35, out_$p36, out_$p37, out_$i26 := ftdi_elan_stuck_waiting_loop_$bb4(in_$p0, in_$p1, in_$p2, out_$p9, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p15, out_$p16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i47, out_$i49, out_$i50, out_$p51, out_$p48, out_$p46, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i35, out_$p36, out_$p37, out_$i26);
    goto $bb4_last;

  $bb4_last:
    assume {:verifier.code 0} true;
    $M.16 := $store.i32($M.16, in_$p1, 0);
    goto corral_source_split_2032;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb20:
    assume {:verifier.code 0} true;
    assume false;
    return;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb8:
    assume {:verifier.code 0} true;
    assume !(out_$i34 == 1);
    goto $bb9;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb19:
    assume !(out_$i56 == 1);
    goto corral_source_split_2099;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    out_$i56 := $sgt.i32(out_$i53, 0);
    goto corral_source_split_2091;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    $M.16 := $store.i32($M.16, in_$p1, out_$i55);
    goto corral_source_split_2090;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    out_$i55 := $sub.i32(out_$i54, 1);
    goto corral_source_split_2089;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    out_$i54 := $load.i32($M.16, in_$p1);
    goto corral_source_split_2088;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    out_$i53 := $load.i32($M.16, in_$p1);
    call {:si_unique_call 436} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i53);
    goto corral_source_split_2087;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    out_$i52 := $add.i32(out_$i35, 1);
    call {:si_unique_call 435} {:cexpr "bytes_read"} boogie_si_record_i32(out_$i52);
    goto corral_source_split_2086;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_2085;

  $bb17:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$p46 := out_$p48;
    goto $bb14;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    out_$p46 := out_$p45;
    goto $bb14;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref(out_$p37, $mul.ref(out_$i44, 1));
    goto corral_source_split_2080;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    out_$i44 := $sext.i32.i64(out_$i43);
    goto corral_source_split_2079;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} out_$i43 := sprintf.ref.ref.i32(out_$p37, .str.4, out_$i42);
    call {:si_unique_call 434} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i43);
    goto corral_source_split_2078;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    out_$i42 := $and.i32(out_$i41, 255);
    goto corral_source_split_2077;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    out_$i41 := $sext.i8.i32(out_$i39);
    goto corral_source_split_2076;

  $bb12:
    assume out_$i40 == 1;
    goto corral_source_split_2075;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    out_$i40 := $slt.i32(out_$i35, 31);
    goto corral_source_split_2073;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i8($M.0, out_$p36);
    call {:si_unique_call 432} {:cexpr "c"} boogie_si_record_i8(out_$i39);
    goto corral_source_split_2072;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref(out_$p36, $mul.ref(1, 1));
    goto corral_source_split_2071;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb10:
    call out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i47, out_$i49, out_$i50, out_$p51, out_$p48, out_$p46, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i35, out_$p36, out_$p37 := ftdi_elan_stuck_waiting_loop_$bb10(in_$p1, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i47, out_$i49, out_$i50, out_$p51, out_$p48, out_$p46, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i35, out_$p36, out_$p37);
    goto $bb10_last;

  $bb10_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2069;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    out_$i35, out_$p36, out_$p37 := 0, out_$p29, in_$p2;
    goto $bb10;

  $bb18:
    assume out_$i56 == 1;
    assume {:verifier.code 0} true;
    out_$i35, out_$p36, out_$p37 := out_$i52, out_$p38, out_$p46;
    assume false;
    return;

  $bb7:
    assume out_$i34 == 1;
    goto corral_source_split_2067;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    out_$i34 := $sgt.i32(out_$i31, 0);
    goto corral_source_split_2061;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $M.16 := $store.i32($M.16, in_$p1, out_$i33);
    goto corral_source_split_2060;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    out_$i33 := $sub.i32(out_$i32, 1);
    goto corral_source_split_2059;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i32($M.16, in_$p1);
    goto corral_source_split_2058;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i32($M.16, in_$p1);
    call {:si_unique_call 431} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i31);
    goto corral_source_split_2057;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    $M.20 := $store.i8($M.20, out_$p30, 0);
    goto corral_source_split_2056;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(in_$p2, $mul.ref(0, 94)), $mul.ref(0, 1));
    goto corral_source_split_2055;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    out_$p29 := $load.ref($M.0, out_$p28);
    goto corral_source_split_2054;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7400, 1));
    goto corral_source_split_2053;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    goto corral_source_split_2052;

  $bb5:
    assume out_$i25 == 1;
    goto corral_source_split_2051;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref(out_$p37, $mul.ref(out_$i50, 1));
    assume {:verifier.code 0} true;
    out_$p48 := out_$p51;
    goto $bb17;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    out_$p48 := out_$p37;
    goto $bb17;

  $bb15:
    assume out_$i47 == 1;
    goto corral_source_split_2093;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    out_$i47 := $sgt.i32(out_$i35, 31);
    goto corral_source_split_2083;

  $bb13:
    assume !(out_$i40 == 1);
    goto corral_source_split_2082;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    out_$i50 := $sext.i32.i64(out_$i49);
    goto corral_source_split_2097;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} out_$i49 := sprintf.ref.ref(out_$p37, .str.5);
    call {:si_unique_call 438} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i49);
    goto corral_source_split_2096;

  $bb16:
    assume !(out_$i47 == 1);
    goto corral_source_split_2095;

  $bb3:
    call out_$i8, out_$p9, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p15, out_$p16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i47, out_$i49, out_$i50, out_$p51, out_$p48, out_$p46, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i35, out_$p36, out_$p37, out_$i26, out_$i57, out_$i58, out_$i59, out_$i60, out_$i78, out_$i79, out_$i80, out_$i81, out_$i94, out_$i95, out_$i101, out_$i103, out_$i104, out_$i102 := ftdi_elan_stuck_waiting_loop_$bb3(in_$p0, in_$p1, in_$p2, out_$i6, out_$i8, out_$p9, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p15, out_$p16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i47, out_$i49, out_$i50, out_$p51, out_$p48, out_$p46, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i35, out_$p36, out_$p37, out_$i26, out_$i57, out_$i58, out_$i59, out_$i60, out_$i78, out_$i79, out_$i80, out_$i81, out_$i94, out_$i95, out_$i101, out_$i103, out_$i104, out_$i102);
    goto $bb3_last;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2030;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    out_$i8 := out_$i7;
    goto $bb3;

  $bb42:
    assume out_$i104 == 1;
    assume {:verifier.code 0} true;
    out_$i8 := out_$i103;
    assume false;
    return;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    out_$i104 := $sgt.i32(out_$i8, 0);
    goto corral_source_split_2173;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    out_$i103 := $sub.i32(out_$i8, 1);
    call {:si_unique_call 450} {:cexpr "retry_on_empty"} boogie_si_record_i32(out_$i103);
    goto corral_source_split_2172;

  $bb40:
    assume out_$i101 == 1;
    goto corral_source_split_2171;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    out_$i102 := out_$i26;
    assume true;
    goto $bb40;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    out_$i101 := $eq.i32(out_$i26, 0);
    goto corral_source_split_2163;

  $bb37:
    assume !(out_$i94 == 1);
    goto corral_source_split_2162;

  $bb38_dummy:
    call {:si_unique_call 1} out_$i6, out_$i7, out_$i8, out_$p9, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p15, out_$p16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i47, out_$i49, out_$i50, out_$p51, out_$p48, out_$p46, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i35, out_$p36, out_$p37, out_$i26, out_$i57, out_$i58, out_$i59, out_$i60, out_$i78, out_$i79, out_$i80, out_$i81, out_$i94, out_$i95, out_$i96, out_$i97, out_$i101, out_$i103, out_$i104, out_$i102 := ftdi_elan_stuck_waiting_loop_$bb2(in_$p0, in_$p1, in_$p2, out_$i6, out_$i7, out_$i8, out_$p9, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p15, out_$p16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i47, out_$i49, out_$i50, out_$p51, out_$p48, out_$p46, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i35, out_$p36, out_$p37, out_$i26, out_$i57, out_$i58, out_$i59, out_$i60, out_$i78, out_$i79, out_$i80, out_$i81, out_$i94, out_$i95, out_$i96, out_$i97, out_$i101, out_$i103, out_$i104, out_$i102);
    return;

  exit:
    return;
}



procedure ftdi_elan_stuck_waiting_loop_$bb2(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i6: i32, in_$i7: i32, in_$i8: i32, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$i12: i8, in_$i13: i32, in_$i14: i32, in_$p15: ref, in_$p16: ref, in_$i17: i32, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i32, in_$i23: i32, in_$i24: i32, in_$i25: i1, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i32, in_$i32: i32, in_$i33: i32, in_$i34: i1, in_$p38: ref, in_$i39: i8, in_$i40: i1, in_$i41: i32, in_$i42: i32, in_$i43: i32, in_$i44: i64, in_$p45: ref, in_$i47: i1, in_$i49: i32, in_$i50: i64, in_$p51: ref, in_$p48: ref, in_$p46: ref, in_$i52: i32, in_$i53: i32, in_$i54: i32, in_$i55: i32, in_$i56: i1, in_$i35: i32, in_$p36: ref, in_$p37: ref, in_$i26: i32, in_$i57: i32, in_$i58: i1, in_$i59: i32, in_$i60: i32, in_$i78: i32, in_$i79: i1, in_$i80: i32, in_$i81: i32, in_$i94: i1, in_$i95: i32, in_$i96: i32, in_$i97: i1, in_$i101: i1, in_$i103: i32, in_$i104: i1, in_$i102: i32) returns (out_$i6: i32, out_$i7: i32, out_$i8: i32, out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$i12: i8, out_$i13: i32, out_$i14: i32, out_$p15: ref, out_$p16: ref, out_$i17: i32, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i32, out_$i23: i32, out_$i24: i32, out_$i25: i1, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: i32, out_$i32: i32, out_$i33: i32, out_$i34: i1, out_$p38: ref, out_$i39: i8, out_$i40: i1, out_$i41: i32, out_$i42: i32, out_$i43: i32, out_$i44: i64, out_$p45: ref, out_$i47: i1, out_$i49: i32, out_$i50: i64, out_$p51: ref, out_$p48: ref, out_$p46: ref, out_$i52: i32, out_$i53: i32, out_$i54: i32, out_$i55: i32, out_$i56: i1, out_$i35: i32, out_$p36: ref, out_$p37: ref, out_$i26: i32, out_$i57: i32, out_$i58: i1, out_$i59: i32, out_$i60: i32, out_$i78: i32, out_$i79: i1, out_$i80: i32, out_$i81: i32, out_$i94: i1, out_$i95: i32, out_$i96: i32, out_$i97: i1, out_$i101: i1, out_$i103: i32, out_$i104: i1, out_$i102: i32);
  modifies $M.16, $M.20;



implementation ftdi_elan_stuck_waiting_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i3: i32, in_$i4: i32, in_$i5: i32, in_$i6: i32, in_$i7: i32, in_$i8: i32, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$i12: i8, in_$i13: i32, in_$i14: i32, in_$p15: ref, in_$p16: ref, in_$i17: i32, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i32, in_$i23: i32, in_$i24: i32, in_$i25: i1, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i32, in_$i32: i32, in_$i33: i32, in_$i34: i1, in_$p38: ref, in_$i39: i8, in_$i40: i1, in_$i41: i32, in_$i42: i32, in_$i43: i32, in_$i44: i64, in_$p45: ref, in_$i47: i1, in_$i49: i32, in_$i50: i64, in_$p51: ref, in_$p48: ref, in_$p46: ref, in_$i52: i32, in_$i53: i32, in_$i54: i32, in_$i55: i32, in_$i56: i1, in_$i35: i32, in_$p36: ref, in_$p37: ref, in_$i26: i32, in_$i57: i32, in_$i58: i1, in_$i59: i32, in_$i60: i32, in_$p61: ref, in_$p62: ref, in_$i63: i8, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$i67: i8, in_$i68: i32, in_$i69: i1, in_$i70: i32, in_$i71: i1, in_$i73: i32, in_$i74: i1, in_$i75: i32, in_$i76: i32, in_$i77: i32, in_$i78: i32, in_$i79: i1, in_$i80: i32, in_$i81: i32, in_$p82: ref, in_$p83: ref, in_$i84: i8, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$i88: i32, in_$i89: i32, in_$i90: i1, in_$i94: i1, in_$i95: i32, in_$i96: i32, in_$i97: i1, in_$i101: i1, in_$i103: i32, in_$i104: i1, in_$i102: i32) returns (out_$i3: i32, out_$i4: i32, out_$i5: i32, out_$i6: i32, out_$i7: i32, out_$i8: i32, out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$i12: i8, out_$i13: i32, out_$i14: i32, out_$p15: ref, out_$p16: ref, out_$i17: i32, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i32, out_$i23: i32, out_$i24: i32, out_$i25: i1, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: i32, out_$i32: i32, out_$i33: i32, out_$i34: i1, out_$p38: ref, out_$i39: i8, out_$i40: i1, out_$i41: i32, out_$i42: i32, out_$i43: i32, out_$i44: i64, out_$p45: ref, out_$i47: i1, out_$i49: i32, out_$i50: i64, out_$p51: ref, out_$p48: ref, out_$p46: ref, out_$i52: i32, out_$i53: i32, out_$i54: i32, out_$i55: i32, out_$i56: i1, out_$i35: i32, out_$p36: ref, out_$p37: ref, out_$i26: i32, out_$i57: i32, out_$i58: i1, out_$i59: i32, out_$i60: i32, out_$p61: ref, out_$p62: ref, out_$i63: i8, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$i67: i8, out_$i68: i32, out_$i69: i1, out_$i70: i32, out_$i71: i1, out_$i73: i32, out_$i74: i1, out_$i75: i32, out_$i76: i32, out_$i77: i32, out_$i78: i32, out_$i79: i1, out_$i80: i32, out_$i81: i32, out_$p82: ref, out_$p83: ref, out_$i84: i8, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$i88: i32, out_$i89: i32, out_$i90: i1, out_$i94: i1, out_$i95: i32, out_$i96: i32, out_$i97: i1, out_$i101: i1, out_$i103: i32, out_$i104: i1, out_$i102: i32)
{

  entry:
    out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$p9, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p15, out_$p16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i47, out_$i49, out_$i50, out_$p51, out_$p48, out_$p46, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i35, out_$p36, out_$p37, out_$i26, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$p62, out_$i63, out_$p64, out_$p65, out_$p66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$p82, out_$p83, out_$i84, out_$p85, out_$p86, out_$p87, out_$i88, out_$i89, out_$i90, out_$i94, out_$i95, out_$i96, out_$i97, out_$i101, out_$i103, out_$i104, out_$i102 := in_$i3, in_$i4, in_$i5, in_$i6, in_$i7, in_$i8, in_$p9, in_$p10, in_$p11, in_$i12, in_$i13, in_$i14, in_$p15, in_$p16, in_$i17, in_$p18, in_$p19, in_$p20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$p28, in_$p29, in_$p30, in_$i31, in_$i32, in_$i33, in_$i34, in_$p38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$p45, in_$i47, in_$i49, in_$i50, in_$p51, in_$p48, in_$p46, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i35, in_$p36, in_$p37, in_$i26, in_$i57, in_$i58, in_$i59, in_$i60, in_$p61, in_$p62, in_$i63, in_$p64, in_$p65, in_$p66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$i78, in_$i79, in_$i80, in_$i81, in_$p82, in_$p83, in_$i84, in_$p85, in_$p86, in_$p87, in_$i88, in_$i89, in_$i90, in_$i94, in_$i95, in_$i96, in_$i97, in_$i101, in_$i103, in_$i104, in_$i102;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2026;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    out_$i3, out_$i4, out_$i5 := out_$i77, out_$i75, out_$i76;
    goto corral_source_split_2132_dummy;

  $bb31:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2132;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    out_$i75, out_$i76, out_$i77 := out_$i80, out_$i81, out_$i89;
    goto $bb31;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    out_$i75, out_$i76, out_$i77 := out_$i59, out_$i60, out_$i73;
    goto $bb31;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 442} msleep(5);
    goto corral_source_split_2128;

  $bb29:
    assume out_$i74 == 1;
    goto corral_source_split_2127;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    out_$i74 := $sgt.i32(out_$i3, 0);
    goto corral_source_split_2121;

  $bb25:
    assume {:verifier.code 0} true;
    out_$i73 := $sub.i32(out_$i3, 1);
    call {:si_unique_call 441} {:cexpr "retry_on_status"} boogie_si_record_i32(out_$i73);
    goto corral_source_split_2120;

  $bb24:
    assume {:verifier.code 0} true;
    assume !(out_$i69 == 1);
    goto $bb25;

  $bb27:
    assume {:verifier.code 0} true;
    assume !(out_$i71 == 1);
    goto $bb25;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    out_$i71 := $eq.i32(out_$i70, 96);
    goto corral_source_split_2118;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    out_$i70 := $sext.i8.i32(out_$i67);
    goto corral_source_split_2117;

  $bb23:
    assume out_$i69 == 1;
    goto corral_source_split_2116;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    out_$i69 := $eq.i32(out_$i68, 49);
    goto corral_source_split_2110;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    out_$i68 := $sext.i8.i32(out_$i63);
    goto corral_source_split_2109;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    out_$i67 := $load.i8($M.0, out_$p66);
    call {:si_unique_call 440} {:cexpr "s2"} boogie_si_record_i8(out_$i67);
    goto corral_source_split_2108;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref(out_$p65, $mul.ref(1, 1));
    goto corral_source_split_2107;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    out_$p65 := $load.ref($M.0, out_$p64);
    goto corral_source_split_2106;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7400, 1));
    goto corral_source_split_2105;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    out_$i63 := $load.i8($M.0, out_$p62);
    call {:si_unique_call 439} {:cexpr "s1"} boogie_si_record_i8(out_$i63);
    goto corral_source_split_2104;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    out_$p62 := $load.ref($M.0, out_$p61);
    goto corral_source_split_2103;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7400, 1));
    goto corral_source_split_2102;

  $bb21:
    assume out_$i58 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2101;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    out_$i59, out_$i60 := out_$i6, out_$i8;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    out_$i58 := $sgt.i32(out_$i57, 1);
    goto corral_source_split_2065;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    out_$i57 := $load.i32($M.16, in_$p1);
    goto corral_source_split_2064;

  $bb6:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2063;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    out_$i26 := out_$i23;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    out_$i25 := $sgt.i32(out_$i24, 2);
    goto corral_source_split_2049;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i32($M.16, in_$p1);
    goto corral_source_split_2048;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} out_$i23 := usb_bulk_msg(out_$p16, out_$i17, out_$p19, out_$i22, in_$p1, 1000);
    call {:si_unique_call 430} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i23);
    goto corral_source_split_2047;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    out_$i22 := $trunc.i64.i32(out_$i21);
    goto corral_source_split_2046;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    out_$i21 := $load.i64($M.0, out_$p20);
    goto corral_source_split_2045;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7408, 1));
    goto corral_source_split_2044;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.0, out_$p18);
    goto corral_source_split_2043;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7400, 1));
    goto corral_source_split_2042;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    out_$i17 := $or.i32(out_$i14, $sub.i32(0, 1073741696));
    goto corral_source_split_2041;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    out_$p16 := $load.ref($M.0, out_$p15);
    goto corral_source_split_2040;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_2039;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} out_$i14 := __create_pipe(out_$p10, out_$i13);
    call {:si_unique_call 428} {:cexpr "tmp"} boogie_si_record_i32(out_$i14);
    goto corral_source_split_2038;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    out_$i13 := $zext.i8.i32(out_$i12);
    goto corral_source_split_2037;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    out_$i12 := $load.i8($M.0, out_$p11);
    goto corral_source_split_2036;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7432, 1));
    goto corral_source_split_2035;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    out_$p10 := $load.ref($M.0, out_$p9);
    goto corral_source_split_2034;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_2033;

  $bb4:
    call out_$p9, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p15, out_$p16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i47, out_$i49, out_$i50, out_$p51, out_$p48, out_$p46, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i35, out_$p36, out_$p37, out_$i26 := ftdi_elan_stuck_waiting_loop_$bb4(in_$p0, in_$p1, in_$p2, out_$p9, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p15, out_$p16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i47, out_$i49, out_$i50, out_$p51, out_$p48, out_$p46, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i35, out_$p36, out_$p37, out_$i26);
    goto $bb4_last;

  $bb4_last:
    assume {:verifier.code 0} true;
    $M.16 := $store.i32($M.16, in_$p1, 0);
    goto corral_source_split_2032;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb20:
    assume {:verifier.code 0} true;
    assume false;
    return;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb8:
    assume {:verifier.code 0} true;
    assume !(out_$i34 == 1);
    goto $bb9;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb19:
    assume !(out_$i56 == 1);
    goto corral_source_split_2099;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    out_$i56 := $sgt.i32(out_$i53, 0);
    goto corral_source_split_2091;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    $M.16 := $store.i32($M.16, in_$p1, out_$i55);
    goto corral_source_split_2090;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    out_$i55 := $sub.i32(out_$i54, 1);
    goto corral_source_split_2089;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    out_$i54 := $load.i32($M.16, in_$p1);
    goto corral_source_split_2088;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    out_$i53 := $load.i32($M.16, in_$p1);
    call {:si_unique_call 436} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i53);
    goto corral_source_split_2087;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    out_$i52 := $add.i32(out_$i35, 1);
    call {:si_unique_call 435} {:cexpr "bytes_read"} boogie_si_record_i32(out_$i52);
    goto corral_source_split_2086;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_2085;

  $bb17:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$p46 := out_$p48;
    goto $bb14;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    out_$p46 := out_$p45;
    goto $bb14;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref(out_$p37, $mul.ref(out_$i44, 1));
    goto corral_source_split_2080;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    out_$i44 := $sext.i32.i64(out_$i43);
    goto corral_source_split_2079;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} out_$i43 := sprintf.ref.ref.i32(out_$p37, .str.4, out_$i42);
    call {:si_unique_call 434} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i43);
    goto corral_source_split_2078;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    out_$i42 := $and.i32(out_$i41, 255);
    goto corral_source_split_2077;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    out_$i41 := $sext.i8.i32(out_$i39);
    goto corral_source_split_2076;

  $bb12:
    assume out_$i40 == 1;
    goto corral_source_split_2075;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    out_$i40 := $slt.i32(out_$i35, 31);
    goto corral_source_split_2073;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i8($M.0, out_$p36);
    call {:si_unique_call 432} {:cexpr "c"} boogie_si_record_i8(out_$i39);
    goto corral_source_split_2072;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref(out_$p36, $mul.ref(1, 1));
    goto corral_source_split_2071;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb10:
    call out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i47, out_$i49, out_$i50, out_$p51, out_$p48, out_$p46, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i35, out_$p36, out_$p37 := ftdi_elan_stuck_waiting_loop_$bb10(in_$p1, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i47, out_$i49, out_$i50, out_$p51, out_$p48, out_$p46, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i35, out_$p36, out_$p37);
    goto $bb10_last;

  $bb10_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2069;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    out_$i35, out_$p36, out_$p37 := 0, out_$p29, in_$p2;
    goto $bb10;

  $bb18:
    assume out_$i56 == 1;
    assume {:verifier.code 0} true;
    out_$i35, out_$p36, out_$p37 := out_$i52, out_$p38, out_$p46;
    assume false;
    return;

  $bb7:
    assume out_$i34 == 1;
    goto corral_source_split_2067;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    out_$i34 := $sgt.i32(out_$i31, 0);
    goto corral_source_split_2061;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $M.16 := $store.i32($M.16, in_$p1, out_$i33);
    goto corral_source_split_2060;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    out_$i33 := $sub.i32(out_$i32, 1);
    goto corral_source_split_2059;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i32($M.16, in_$p1);
    goto corral_source_split_2058;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i32($M.16, in_$p1);
    call {:si_unique_call 431} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i31);
    goto corral_source_split_2057;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    $M.20 := $store.i8($M.20, out_$p30, 0);
    goto corral_source_split_2056;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(in_$p2, $mul.ref(0, 94)), $mul.ref(0, 1));
    goto corral_source_split_2055;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    out_$p29 := $load.ref($M.0, out_$p28);
    goto corral_source_split_2054;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7400, 1));
    goto corral_source_split_2053;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    goto corral_source_split_2052;

  $bb5:
    assume out_$i25 == 1;
    goto corral_source_split_2051;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref(out_$p37, $mul.ref(out_$i50, 1));
    assume {:verifier.code 0} true;
    out_$p48 := out_$p51;
    goto $bb17;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    out_$p48 := out_$p37;
    goto $bb17;

  $bb15:
    assume out_$i47 == 1;
    goto corral_source_split_2093;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    out_$i47 := $sgt.i32(out_$i35, 31);
    goto corral_source_split_2083;

  $bb13:
    assume !(out_$i40 == 1);
    goto corral_source_split_2082;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    out_$i50 := $sext.i32.i64(out_$i49);
    goto corral_source_split_2097;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} out_$i49 := sprintf.ref.ref(out_$p37, .str.5);
    call {:si_unique_call 438} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i49);
    goto corral_source_split_2096;

  $bb16:
    assume !(out_$i47 == 1);
    goto corral_source_split_2095;

  $bb3:
    call out_$i8, out_$p9, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p15, out_$p16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i47, out_$i49, out_$i50, out_$p51, out_$p48, out_$p46, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i35, out_$p36, out_$p37, out_$i26, out_$i57, out_$i58, out_$i59, out_$i60, out_$i78, out_$i79, out_$i80, out_$i81, out_$i94, out_$i95, out_$i101, out_$i103, out_$i104, out_$i102 := ftdi_elan_stuck_waiting_loop_$bb3(in_$p0, in_$p1, in_$p2, out_$i6, out_$i8, out_$p9, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p15, out_$p16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i47, out_$i49, out_$i50, out_$p51, out_$p48, out_$p46, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i35, out_$p36, out_$p37, out_$i26, out_$i57, out_$i58, out_$i59, out_$i60, out_$i78, out_$i79, out_$i80, out_$i81, out_$i94, out_$i95, out_$i101, out_$i103, out_$i104, out_$i102);
    goto $bb3_last;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2030;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    out_$i8 := out_$i7;
    goto $bb3;

  $bb42:
    assume out_$i104 == 1;
    assume {:verifier.code 0} true;
    out_$i8 := out_$i103;
    assume false;
    return;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    out_$i104 := $sgt.i32(out_$i8, 0);
    goto corral_source_split_2173;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    out_$i103 := $sub.i32(out_$i8, 1);
    call {:si_unique_call 450} {:cexpr "retry_on_empty"} boogie_si_record_i32(out_$i103);
    goto corral_source_split_2172;

  $bb40:
    assume out_$i101 == 1;
    goto corral_source_split_2171;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    out_$i102 := out_$i26;
    assume true;
    goto $bb40;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    out_$i101 := $eq.i32(out_$i26, 0);
    goto corral_source_split_2163;

  $bb37:
    assume !(out_$i94 == 1);
    goto corral_source_split_2162;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    out_$i95 := out_$i8;
    assume true;
    goto $bb36, $bb37;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    out_$i94 := $eq.i32(out_$i26, $sub.i32(0, 110));
    goto corral_source_split_2147;

  $bb33:
    assume !(out_$i79 == 1);
    goto corral_source_split_2146;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    out_$i80, out_$i81 := out_$i6, out_$i8;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    out_$i79 := $sgt.i32(out_$i78, 0);
    goto corral_source_split_2114;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    out_$i78 := $load.i32($M.16, in_$p1);
    goto corral_source_split_2113;

  $bb22:
    assume !(out_$i58 == 1);
    goto corral_source_split_2112;

  $bb2:
    call out_$i6, out_$i7, out_$i8, out_$p9, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p15, out_$p16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i47, out_$i49, out_$i50, out_$p51, out_$p48, out_$p46, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i35, out_$p36, out_$p37, out_$i26, out_$i57, out_$i58, out_$i59, out_$i60, out_$i78, out_$i79, out_$i80, out_$i81, out_$i94, out_$i95, out_$i96, out_$i97, out_$i101, out_$i103, out_$i104, out_$i102 := ftdi_elan_stuck_waiting_loop_$bb2(in_$p0, in_$p1, in_$p2, out_$i6, out_$i7, out_$i8, out_$p9, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p15, out_$p16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i47, out_$i49, out_$i50, out_$p51, out_$p48, out_$p46, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i35, out_$p36, out_$p37, out_$i26, out_$i57, out_$i58, out_$i59, out_$i60, out_$i78, out_$i79, out_$i80, out_$i81, out_$i94, out_$i95, out_$i96, out_$i97, out_$i101, out_$i103, out_$i104, out_$i102);
    goto $bb2_last;

  $bb2_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2028;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    out_$i6, out_$i7 := out_$i4, out_$i5;
    goto $bb2;

  $bb38:
    assume out_$i97 == 1;
    assume {:verifier.code 0} true;
    out_$i6, out_$i7 := out_$i96, out_$i95;
    assume false;
    return;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    out_$i97 := $sgt.i32(out_$i6, 0);
    goto corral_source_split_2160;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    out_$i96 := $sub.i32(out_$i6, 1);
    call {:si_unique_call 448} {:cexpr "retry_on_timeout"} boogie_si_record_i32(out_$i96);
    goto corral_source_split_2159;

  $bb36:
    assume out_$i94 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2158;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} msleep(5);
    goto corral_source_split_2150;

  $bb34:
    assume out_$i90 == 1;
    goto corral_source_split_2149;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    out_$i90 := $sgt.i32(out_$i3, 0);
    goto corral_source_split_2144;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    out_$i89 := $sub.i32(out_$i3, 1);
    call {:si_unique_call 445} {:cexpr "retry_on_status"} boogie_si_record_i32(out_$i89);
    goto corral_source_split_2143;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} dev_err.ref.ref.i32(out_$p87, .str.24, out_$i88);
    goto corral_source_split_2142;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    out_$i88 := $sext.i8.i32(out_$i84);
    goto corral_source_split_2141;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref($add.ref(out_$p86, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_2140;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    out_$p86 := $load.ref($M.0, out_$p85);
    goto corral_source_split_2139;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_2138;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    out_$i84 := $load.i8($M.0, out_$p83);
    call {:si_unique_call 443} {:cexpr "b1"} boogie_si_record_i8(out_$i84);
    goto corral_source_split_2137;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    out_$p83 := $load.ref($M.0, out_$p82);
    goto corral_source_split_2136;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7400, 1));
    goto corral_source_split_2135;

  $bb32:
    assume out_$i79 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2134;

  corral_source_split_2132_dummy:
    call {:si_unique_call 1} out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$p9, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p15, out_$p16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i47, out_$i49, out_$i50, out_$p51, out_$p48, out_$p46, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i35, out_$p36, out_$p37, out_$i26, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$p62, out_$i63, out_$p64, out_$p65, out_$p66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$p82, out_$p83, out_$i84, out_$p85, out_$p86, out_$p87, out_$i88, out_$i89, out_$i90, out_$i94, out_$i95, out_$i96, out_$i97, out_$i101, out_$i103, out_$i104, out_$i102 := ftdi_elan_stuck_waiting_loop_$bb1(in_$p0, in_$p1, in_$p2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$p9, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p15, out_$p16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i47, out_$i49, out_$i50, out_$p51, out_$p48, out_$p46, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i35, out_$p36, out_$p37, out_$i26, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$p62, out_$i63, out_$p64, out_$p65, out_$p66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$p82, out_$p83, out_$i84, out_$p85, out_$p86, out_$p87, out_$i88, out_$i89, out_$i90, out_$i94, out_$i95, out_$i96, out_$i97, out_$i101, out_$i103, out_$i104, out_$i102);
    return;

  exit:
    return;
}



procedure ftdi_elan_stuck_waiting_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i3: i32, in_$i4: i32, in_$i5: i32, in_$i6: i32, in_$i7: i32, in_$i8: i32, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$i12: i8, in_$i13: i32, in_$i14: i32, in_$p15: ref, in_$p16: ref, in_$i17: i32, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i32, in_$i23: i32, in_$i24: i32, in_$i25: i1, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i32, in_$i32: i32, in_$i33: i32, in_$i34: i1, in_$p38: ref, in_$i39: i8, in_$i40: i1, in_$i41: i32, in_$i42: i32, in_$i43: i32, in_$i44: i64, in_$p45: ref, in_$i47: i1, in_$i49: i32, in_$i50: i64, in_$p51: ref, in_$p48: ref, in_$p46: ref, in_$i52: i32, in_$i53: i32, in_$i54: i32, in_$i55: i32, in_$i56: i1, in_$i35: i32, in_$p36: ref, in_$p37: ref, in_$i26: i32, in_$i57: i32, in_$i58: i1, in_$i59: i32, in_$i60: i32, in_$p61: ref, in_$p62: ref, in_$i63: i8, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$i67: i8, in_$i68: i32, in_$i69: i1, in_$i70: i32, in_$i71: i1, in_$i73: i32, in_$i74: i1, in_$i75: i32, in_$i76: i32, in_$i77: i32, in_$i78: i32, in_$i79: i1, in_$i80: i32, in_$i81: i32, in_$p82: ref, in_$p83: ref, in_$i84: i8, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$i88: i32, in_$i89: i32, in_$i90: i1, in_$i94: i1, in_$i95: i32, in_$i96: i32, in_$i97: i1, in_$i101: i1, in_$i103: i32, in_$i104: i1, in_$i102: i32) returns (out_$i3: i32, out_$i4: i32, out_$i5: i32, out_$i6: i32, out_$i7: i32, out_$i8: i32, out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$i12: i8, out_$i13: i32, out_$i14: i32, out_$p15: ref, out_$p16: ref, out_$i17: i32, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i32, out_$i23: i32, out_$i24: i32, out_$i25: i1, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: i32, out_$i32: i32, out_$i33: i32, out_$i34: i1, out_$p38: ref, out_$i39: i8, out_$i40: i1, out_$i41: i32, out_$i42: i32, out_$i43: i32, out_$i44: i64, out_$p45: ref, out_$i47: i1, out_$i49: i32, out_$i50: i64, out_$p51: ref, out_$p48: ref, out_$p46: ref, out_$i52: i32, out_$i53: i32, out_$i54: i32, out_$i55: i32, out_$i56: i1, out_$i35: i32, out_$p36: ref, out_$p37: ref, out_$i26: i32, out_$i57: i32, out_$i58: i1, out_$i59: i32, out_$i60: i32, out_$p61: ref, out_$p62: ref, out_$i63: i8, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$i67: i8, out_$i68: i32, out_$i69: i1, out_$i70: i32, out_$i71: i1, out_$i73: i32, out_$i74: i1, out_$i75: i32, out_$i76: i32, out_$i77: i32, out_$i78: i32, out_$i79: i1, out_$i80: i32, out_$i81: i32, out_$p82: ref, out_$p83: ref, out_$i84: i8, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$i88: i32, out_$i89: i32, out_$i90: i1, out_$i94: i1, out_$i95: i32, out_$i96: i32, out_$i97: i1, out_$i101: i1, out_$i103: i32, out_$i104: i1, out_$i102: i32);
  modifies $M.16, $M.20;



implementation ftdi_elan_setupOHCI_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$i7: i32, in_$i8: i32, in_$i9: i32, in_$i10: i32, in_$i11: i1, in_$i12: i32, in_$i14: i32, in_$i15: i32, in_$i16: i32, in_$i17: i32, in_$i18: i1, in_$i19: i1, in_$i20: i32, in_$i21: i32, in_$i22: i32, in_$i27: i1, in_$i28: i1, in_$i29: i32, in_$i30: i32, in_$i31: i32, in_$i36: i1, in_$i37: i1, in_$i38: i32, in_$i39: i32, in_$i40: i32, in_$i45: i1, in_$i46: i1, in_$i47: i32, in_$i48: i32, in_$i49: i32, in_$i54: i1, in_$i55: i1, in_$i56: i32, in_$i57: i32, in_$i58: i32, in_$i63: i1, in_$i64: i1, in_$i65: i32, in_$i66: i32, in_$i67: i32, in_$i71: i32, in_$i72: i1, in_$i74: i32, in_$i73: i32, in_$i68: i32, in_$i69: i32, in_$i70: i32, in_$i59: i8, in_$i60: i32, in_$i61: i32, in_$i62: i32, in_$i50: i8, in_$i51: i32, in_$i52: i32, in_$i53: i32, in_$i41: i8, in_$i42: i32, in_$i43: i32, in_$i44: i32, in_$i32: i8, in_$i33: i32, in_$i34: i32, in_$i35: i32, in_$i23: i8, in_$i24: i32, in_$i25: i32, in_$i26: i32, in_$i75: i1, in_$i76: i32, in_$i77: i32, in_$p78: ref, in_$i79: i16, in_$p81: ref, in_$i82: i16, in_$p84: ref, in_$i85: i32, in_$i86: i32, in_$i87: i32, in_$i88: i8, in_$i89: i32, in_$i90: i1, in_$i3: i8, in_$i4: i32, in_$i5: i32, in_$i6: i32, in_$i91: i32, in_$i92: i32) returns (out_$i7: i32, out_$i8: i32, out_$i9: i32, out_$i10: i32, out_$i11: i1, out_$i12: i32, out_$i14: i32, out_$i15: i32, out_$i16: i32, out_$i17: i32, out_$i18: i1, out_$i19: i1, out_$i20: i32, out_$i21: i32, out_$i22: i32, out_$i27: i1, out_$i28: i1, out_$i29: i32, out_$i30: i32, out_$i31: i32, out_$i36: i1, out_$i37: i1, out_$i38: i32, out_$i39: i32, out_$i40: i32, out_$i45: i1, out_$i46: i1, out_$i47: i32, out_$i48: i32, out_$i49: i32, out_$i54: i1, out_$i55: i1, out_$i56: i32, out_$i57: i32, out_$i58: i32, out_$i63: i1, out_$i64: i1, out_$i65: i32, out_$i66: i32, out_$i67: i32, out_$i71: i32, out_$i72: i1, out_$i74: i32, out_$i73: i32, out_$i68: i32, out_$i69: i32, out_$i70: i32, out_$i59: i8, out_$i60: i32, out_$i61: i32, out_$i62: i32, out_$i50: i8, out_$i51: i32, out_$i52: i32, out_$i53: i32, out_$i41: i8, out_$i42: i32, out_$i43: i32, out_$i44: i32, out_$i32: i8, out_$i33: i32, out_$i34: i32, out_$i35: i32, out_$i23: i8, out_$i24: i32, out_$i25: i32, out_$i26: i32, out_$i75: i1, out_$i76: i32, out_$i77: i32, out_$p78: ref, out_$i79: i16, out_$p81: ref, out_$i82: i16, out_$p84: ref, out_$i85: i32, out_$i86: i32, out_$i87: i32, out_$i88: i8, out_$i89: i32, out_$i90: i1, out_$i3: i8, out_$i4: i32, out_$i5: i32, out_$i6: i32, out_$i91: i32, out_$i92: i32)
{

  entry:
    out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i71, out_$i72, out_$i74, out_$i73, out_$i68, out_$i69, out_$i70, out_$i59, out_$i60, out_$i61, out_$i62, out_$i50, out_$i51, out_$i52, out_$i53, out_$i41, out_$i42, out_$i43, out_$i44, out_$i32, out_$i33, out_$i34, out_$i35, out_$i23, out_$i24, out_$i25, out_$i26, out_$i75, out_$i76, out_$i77, out_$p78, out_$i79, out_$p81, out_$i82, out_$p84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i3, out_$i4, out_$i5, out_$i6, out_$i91, out_$i92 := in_$i7, in_$i8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i63, in_$i64, in_$i65, in_$i66, in_$i67, in_$i71, in_$i72, in_$i74, in_$i73, in_$i68, in_$i69, in_$i70, in_$i59, in_$i60, in_$i61, in_$i62, in_$i50, in_$i51, in_$i52, in_$i53, in_$i41, in_$i42, in_$i43, in_$i44, in_$i32, in_$i33, in_$i34, in_$i35, in_$i23, in_$i24, in_$i25, in_$i26, in_$i75, in_$i76, in_$i77, in_$p78, in_$i79, in_$p81, in_$i82, in_$p84, in_$i85, in_$i86, in_$i87, in_$i88, in_$i89, in_$i90, in_$i3, in_$i4, in_$i5, in_$i6, in_$i91, in_$i92;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2270;

  $bb49:
    assume out_$i90 == 1;
    assume {:verifier.code 0} true;
    out_$i3, out_$i4, out_$i5, out_$i6 := out_$i88, out_$i85, out_$i25, out_$i24;
    goto $bb49_dummy;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    out_$i91, out_$i92 := out_$i24, out_$i25;
    assume true;
    goto $bb49;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    out_$i90 := $ule.i32(out_$i89, 3);
    goto corral_source_split_2373;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    out_$i89 := $zext.i8.i32(out_$i88);
    goto corral_source_split_2372;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    out_$i88 := $trunc.i32.i8(out_$i87);
    call {:si_unique_call 507} {:cexpr "fn"} boogie_si_record_i8(out_$i88);
    goto corral_source_split_2371;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    out_$i87 := $add.i32(out_$i86, 1);
    goto corral_source_split_2370;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    out_$i86 := $zext.i8.i32(out_$i23);
    goto corral_source_split_2369;

  $bb48:
    assume {:verifier.code 0} true;
    goto corral_source_split_2368;

  $bb47:
    assume !(out_$i75 == 1);
    assume {:verifier.code 0} true;
    out_$i85 := out_$i4;
    goto $bb48;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    out_$i85 := out_$i26;
    goto $bb48;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p84, out_$i82);
    goto corral_source_split_2366;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(5896, 1)), $mul.ref(2, 1));
    goto corral_source_split_2365;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    out_$i82 := $trunc.i32.i16(out_$i17);
    goto corral_source_split_2364;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p81, out_$i79);
    goto corral_source_split_2363;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(5896, 1)), $mul.ref(0, 1));
    goto corral_source_split_2362;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    out_$i79 := $trunc.i32.i16(out_$i15);
    goto corral_source_split_2361;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p78, out_$i77);
    goto corral_source_split_2360;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    out_$p78 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(5076, 1));
    goto corral_source_split_2359;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    out_$i77 := $add.i32(out_$i76, 1);
    goto corral_source_split_2358;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    out_$i76 := $zext.i8.i32(out_$i23);
    goto corral_source_split_2357;

  $bb46:
    assume out_$i75 == 1;
    goto corral_source_split_2356;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    out_$i75 := $sgt.i32(out_$i26, out_$i4);
    goto corral_source_split_2299;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2298;

  $bb18:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$i23, out_$i24, out_$i25, out_$i26 := out_$i32, out_$i33, out_$i34, out_$i35;
    goto $bb12;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    out_$i23, out_$i24, out_$i25, out_$i26 := out_$i3, out_$i6, out_$i22, out_$i21;
    goto $bb12;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    out_$i22 := $add.i32(out_$i5, 1);
    call {:si_unique_call 490} {:cexpr "controllers"} boogie_si_record_i32(out_$i22);
    goto corral_source_split_2296;

  SeqInstr_240:
    call {:si_unique_call 489} {:cexpr "devices"} boogie_si_record_i32(out_$i21);
    goto corral_source_split_2295;

  SeqInstr_239:
    assume assertsPassed;
    goto SeqInstr_240;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} out_$i21 := ftdi_elan_found_controller(in_$p0, out_$i20, 0);
    goto SeqInstr_239;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    out_$i20 := $zext.i8.i32(out_$i3);
    goto corral_source_split_2294;

  $bb10:
    assume out_$i19 == 1;
    goto corral_source_split_2293;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    out_$i19 := $eq.i32(out_$i17, 51297);
    goto corral_source_split_2289;

  $bb7:
    assume out_$i18 == 1;
    goto corral_source_split_2288;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    out_$i18 := $eq.i32(out_$i15, 4165);
    goto corral_source_split_2286;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    out_$i17 := $lshr.i32(out_$i16, 16);
    call {:si_unique_call 487} {:cexpr "pciPID"} boogie_si_record_i32(out_$i17);
    goto corral_source_split_2285;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    out_$i16 := $load.i32($M.0, in_$p1);
    goto corral_source_split_2284;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    out_$i15 := $and.i32(out_$i14, 65535);
    call {:si_unique_call 486} {:cexpr "pciVID"} boogie_si_record_i32(out_$i15);
    goto corral_source_split_2283;

  $bb6:
    assume {:verifier.code 0} true;
    out_$i14 := $load.i32($M.0, in_$p1);
    goto corral_source_split_2282;

  $bb4:
    assume !(out_$i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    out_$i12 := out_$i10;
    assume true;
    goto $bb4;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    out_$i11 := $ne.i32(out_$i10, 0);
    goto corral_source_split_2276;

  SeqInstr_237:
    call {:si_unique_call 485} {:cexpr "UxxxStatus"} boogie_si_record_i32(out_$i10);
    goto corral_source_split_2275;

  SeqInstr_236:
    assume assertsPassed;
    goto SeqInstr_237;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} out_$i10 := ftdi_elan_read_config(in_$p0, out_$i9, 0, in_$p1);
    goto SeqInstr_236;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    out_$i9 := $or.i32(out_$i8, 0);
    goto corral_source_split_2274;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    out_$i8 := $shl.i32(out_$i7, 8);
    call {:si_unique_call 483} {:cexpr "activePCIfn"} boogie_si_record_i32(out_$i8);
    goto corral_source_split_2273;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i7 := $zext.i8.i32(out_$i3);
    goto corral_source_split_2272;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb24:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$i32, out_$i33, out_$i34, out_$i35 := out_$i41, out_$i42, out_$i43, out_$i44;
    goto $bb18;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    out_$i32, out_$i33, out_$i34, out_$i35 := out_$i3, out_$i6, out_$i31, out_$i30;
    goto $bb18;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    out_$i31 := $add.i32(out_$i5, 1);
    call {:si_unique_call 493} {:cexpr "controllers"} boogie_si_record_i32(out_$i31);
    goto corral_source_split_2309;

  SeqInstr_243:
    call {:si_unique_call 492} {:cexpr "devices"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_2308;

  SeqInstr_242:
    assume assertsPassed;
    goto SeqInstr_243;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} out_$i30 := ftdi_elan_found_controller(in_$p0, out_$i29, 0);
    goto SeqInstr_242;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    out_$i29 := $zext.i8.i32(out_$i3);
    goto corral_source_split_2307;

  $bb16:
    assume out_$i28 == 1;
    goto corral_source_split_2306;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    out_$i28 := $eq.i32(out_$i17, 53);
    goto corral_source_split_2302;

  $bb13:
    assume out_$i27 == 1;
    goto corral_source_split_2301;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i27 := $eq.i32(out_$i15, 4147);
    goto corral_source_split_2291;

  $bb8:
    assume {:verifier.code 0} true;
    assume !(out_$i18 == 1);
    goto $bb9;

  $bb11:
    assume {:verifier.code 0} true;
    assume !(out_$i19 == 1);
    goto $bb9;

  $bb30:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$i41, out_$i42, out_$i43, out_$i44 := out_$i50, out_$i51, out_$i52, out_$i53;
    goto $bb24;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    out_$i41, out_$i42, out_$i43, out_$i44 := out_$i3, out_$i6, out_$i40, out_$i39;
    goto $bb24;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    out_$i40 := $add.i32(out_$i5, 1);
    call {:si_unique_call 496} {:cexpr "controllers"} boogie_si_record_i32(out_$i40);
    goto corral_source_split_2319;

  SeqInstr_246:
    call {:si_unique_call 495} {:cexpr "devices"} boogie_si_record_i32(out_$i39);
    goto corral_source_split_2318;

  SeqInstr_245:
    assume assertsPassed;
    goto SeqInstr_246;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} out_$i39 := ftdi_elan_found_controller(in_$p0, out_$i38, 0);
    goto SeqInstr_245;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    out_$i38 := $zext.i8.i32(out_$i3);
    goto corral_source_split_2317;

  $bb22:
    assume out_$i37 == 1;
    goto corral_source_split_2316;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    out_$i37 := $eq.i32(out_$i17, 21047);
    goto corral_source_split_2312;

  $bb19:
    assume out_$i36 == 1;
    goto corral_source_split_2311;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i36 := $eq.i32(out_$i15, 4281);
    goto corral_source_split_2304;

  $bb14:
    assume {:verifier.code 0} true;
    assume !(out_$i27 == 1);
    goto $bb15;

  $bb17:
    assume {:verifier.code 0} true;
    assume !(out_$i28 == 1);
    goto $bb15;

  $bb36:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$i50, out_$i51, out_$i52, out_$i53 := out_$i59, out_$i60, out_$i61, out_$i62;
    goto $bb30;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    out_$i50, out_$i51, out_$i52, out_$i53 := out_$i3, out_$i6, out_$i49, out_$i48;
    goto $bb30;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    out_$i49 := $add.i32(out_$i5, 1);
    call {:si_unique_call 499} {:cexpr "controllers"} boogie_si_record_i32(out_$i49);
    goto corral_source_split_2329;

  SeqInstr_249:
    call {:si_unique_call 498} {:cexpr "devices"} boogie_si_record_i32(out_$i48);
    goto corral_source_split_2328;

  SeqInstr_248:
    assume assertsPassed;
    goto SeqInstr_249;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} out_$i48 := ftdi_elan_found_controller(in_$p0, out_$i47, 0);
    goto SeqInstr_248;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    out_$i47 := $zext.i8.i32(out_$i3);
    goto corral_source_split_2327;

  $bb28:
    assume out_$i46 == 1;
    goto corral_source_split_2326;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    out_$i46 := $eq.i32(out_$i17, 22530);
    goto corral_source_split_2322;

  $bb25:
    assume out_$i45 == 1;
    goto corral_source_split_2321;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i45 := $eq.i32(out_$i15, 4545);
    goto corral_source_split_2314;

  $bb20:
    assume {:verifier.code 0} true;
    assume !(out_$i36 == 1);
    goto $bb21;

  $bb23:
    assume {:verifier.code 0} true;
    assume !(out_$i37 == 1);
    goto $bb21;

  $bb42:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$i59, out_$i60, out_$i61, out_$i62 := out_$i3, out_$i68, out_$i69, out_$i70;
    goto $bb36;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    out_$i59, out_$i60, out_$i61, out_$i62 := out_$i3, out_$i6, out_$i58, out_$i57;
    goto $bb36;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    out_$i58 := $add.i32(out_$i5, 1);
    call {:si_unique_call 502} {:cexpr "controllers"} boogie_si_record_i32(out_$i58);
    goto corral_source_split_2339;

  SeqInstr_252:
    call {:si_unique_call 501} {:cexpr "devices"} boogie_si_record_i32(out_$i57);
    goto corral_source_split_2338;

  SeqInstr_251:
    assume assertsPassed;
    goto SeqInstr_252;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} out_$i57 := ftdi_elan_found_controller(in_$p0, out_$i56, 1);
    goto SeqInstr_251;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    out_$i56 := $zext.i8.i32(out_$i3);
    goto corral_source_split_2337;

  $bb34:
    assume out_$i55 == 1;
    goto corral_source_split_2336;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    out_$i55 := $eq.i32(out_$i17, 29708);
    goto corral_source_split_2332;

  $bb31:
    assume out_$i54 == 1;
    goto corral_source_split_2331;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb27:
    assume {:verifier.code 0} true;
    out_$i54 := $eq.i32(out_$i15, 4130);
    goto corral_source_split_2324;

  $bb26:
    assume {:verifier.code 0} true;
    assume !(out_$i45 == 1);
    goto $bb27;

  $bb29:
    assume {:verifier.code 0} true;
    assume !(out_$i46 == 1);
    goto $bb27;

  $bb45:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$i68, out_$i69, out_$i70 := out_$i73, out_$i5, 0;
    goto $bb42;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    out_$i68, out_$i69, out_$i70 := out_$i6, out_$i67, out_$i66;
    goto $bb42;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    out_$i67 := $add.i32(out_$i5, 1);
    call {:si_unique_call 505} {:cexpr "controllers"} boogie_si_record_i32(out_$i67);
    goto corral_source_split_2350;

  SeqInstr_255:
    call {:si_unique_call 504} {:cexpr "devices"} boogie_si_record_i32(out_$i66);
    goto corral_source_split_2349;

  SeqInstr_254:
    assume assertsPassed;
    goto SeqInstr_255;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} out_$i66 := ftdi_elan_found_controller(in_$p0, out_$i65, 32);
    goto SeqInstr_254;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    out_$i65 := $zext.i8.i32(out_$i3);
    goto corral_source_split_2348;

  $bb40:
    assume out_$i64 == 1;
    goto corral_source_split_2347;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    out_$i64 := $eq.i32(out_$i17, 41208);
    goto corral_source_split_2342;

  $bb37:
    assume out_$i63 == 1;
    goto corral_source_split_2341;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb33:
    assume {:verifier.code 0} true;
    out_$i63 := $eq.i32(out_$i15, 3601);
    goto corral_source_split_2334;

  $bb32:
    assume {:verifier.code 0} true;
    assume !(out_$i54 == 1);
    goto $bb33;

  $bb35:
    assume {:verifier.code 0} true;
    assume !(out_$i55 == 1);
    goto $bb33;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    out_$i74 := $add.i32(out_$i6, 1);
    call {:si_unique_call 506} {:cexpr "unrecognized"} boogie_si_record_i32(out_$i74);
    assume {:verifier.code 0} true;
    out_$i73 := out_$i74;
    goto $bb45;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    out_$i73 := out_$i6;
    goto $bb45;

  $bb43:
    assume out_$i72 == 1;
    goto corral_source_split_2352;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    out_$i72 := $eq.i32(out_$i71, 0);
    goto corral_source_split_2345;

  $bb39:
    assume {:verifier.code 0} true;
    out_$i71 := $load.i32($M.0, in_$p1);
    goto corral_source_split_2344;

  $bb38:
    assume {:verifier.code 0} true;
    assume !(out_$i63 == 1);
    goto $bb39;

  $bb41:
    assume {:verifier.code 0} true;
    assume !(out_$i64 == 1);
    goto $bb39;

  $bb44:
    assume !(out_$i72 == 1);
    goto corral_source_split_2354;

  $bb49_dummy:
    call {:si_unique_call 1} out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i71, out_$i72, out_$i74, out_$i73, out_$i68, out_$i69, out_$i70, out_$i59, out_$i60, out_$i61, out_$i62, out_$i50, out_$i51, out_$i52, out_$i53, out_$i41, out_$i42, out_$i43, out_$i44, out_$i32, out_$i33, out_$i34, out_$i35, out_$i23, out_$i24, out_$i25, out_$i26, out_$i75, out_$i76, out_$i77, out_$p78, out_$i79, out_$p81, out_$i82, out_$p84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i3, out_$i4, out_$i5, out_$i6, out_$i91, out_$i92 := ftdi_elan_setupOHCI_loop_$bb1(in_$p0, in_$p1, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i71, out_$i72, out_$i74, out_$i73, out_$i68, out_$i69, out_$i70, out_$i59, out_$i60, out_$i61, out_$i62, out_$i50, out_$i51, out_$i52, out_$i53, out_$i41, out_$i42, out_$i43, out_$i44, out_$i32, out_$i33, out_$i34, out_$i35, out_$i23, out_$i24, out_$i25, out_$i26, out_$i75, out_$i76, out_$i77, out_$p78, out_$i79, out_$p81, out_$i82, out_$p84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i3, out_$i4, out_$i5, out_$i6, out_$i91, out_$i92);
    return;

  exit:
    return;
}



procedure ftdi_elan_setupOHCI_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$i7: i32, in_$i8: i32, in_$i9: i32, in_$i10: i32, in_$i11: i1, in_$i12: i32, in_$i14: i32, in_$i15: i32, in_$i16: i32, in_$i17: i32, in_$i18: i1, in_$i19: i1, in_$i20: i32, in_$i21: i32, in_$i22: i32, in_$i27: i1, in_$i28: i1, in_$i29: i32, in_$i30: i32, in_$i31: i32, in_$i36: i1, in_$i37: i1, in_$i38: i32, in_$i39: i32, in_$i40: i32, in_$i45: i1, in_$i46: i1, in_$i47: i32, in_$i48: i32, in_$i49: i32, in_$i54: i1, in_$i55: i1, in_$i56: i32, in_$i57: i32, in_$i58: i32, in_$i63: i1, in_$i64: i1, in_$i65: i32, in_$i66: i32, in_$i67: i32, in_$i71: i32, in_$i72: i1, in_$i74: i32, in_$i73: i32, in_$i68: i32, in_$i69: i32, in_$i70: i32, in_$i59: i8, in_$i60: i32, in_$i61: i32, in_$i62: i32, in_$i50: i8, in_$i51: i32, in_$i52: i32, in_$i53: i32, in_$i41: i8, in_$i42: i32, in_$i43: i32, in_$i44: i32, in_$i32: i8, in_$i33: i32, in_$i34: i32, in_$i35: i32, in_$i23: i8, in_$i24: i32, in_$i25: i32, in_$i26: i32, in_$i75: i1, in_$i76: i32, in_$i77: i32, in_$p78: ref, in_$i79: i16, in_$p81: ref, in_$i82: i16, in_$p84: ref, in_$i85: i32, in_$i86: i32, in_$i87: i32, in_$i88: i8, in_$i89: i32, in_$i90: i1, in_$i3: i8, in_$i4: i32, in_$i5: i32, in_$i6: i32, in_$i91: i32, in_$i92: i32) returns (out_$i7: i32, out_$i8: i32, out_$i9: i32, out_$i10: i32, out_$i11: i1, out_$i12: i32, out_$i14: i32, out_$i15: i32, out_$i16: i32, out_$i17: i32, out_$i18: i1, out_$i19: i1, out_$i20: i32, out_$i21: i32, out_$i22: i32, out_$i27: i1, out_$i28: i1, out_$i29: i32, out_$i30: i32, out_$i31: i32, out_$i36: i1, out_$i37: i1, out_$i38: i32, out_$i39: i32, out_$i40: i32, out_$i45: i1, out_$i46: i1, out_$i47: i32, out_$i48: i32, out_$i49: i32, out_$i54: i1, out_$i55: i1, out_$i56: i32, out_$i57: i32, out_$i58: i32, out_$i63: i1, out_$i64: i1, out_$i65: i32, out_$i66: i32, out_$i67: i32, out_$i71: i32, out_$i72: i1, out_$i74: i32, out_$i73: i32, out_$i68: i32, out_$i69: i32, out_$i70: i32, out_$i59: i8, out_$i60: i32, out_$i61: i32, out_$i62: i32, out_$i50: i8, out_$i51: i32, out_$i52: i32, out_$i53: i32, out_$i41: i8, out_$i42: i32, out_$i43: i32, out_$i44: i32, out_$i32: i8, out_$i33: i32, out_$i34: i32, out_$i35: i32, out_$i23: i8, out_$i24: i32, out_$i25: i32, out_$i26: i32, out_$i75: i1, out_$i76: i32, out_$i77: i32, out_$p78: ref, out_$i79: i16, out_$p81: ref, out_$i82: i16, out_$p84: ref, out_$i85: i32, out_$i86: i32, out_$i87: i32, out_$i88: i8, out_$i89: i32, out_$i90: i1, out_$i3: i8, out_$i4: i32, out_$i5: i32, out_$i6: i32, out_$i91: i32, out_$i92: i32);
  modifies $M.0, $M.4, $CurrAddr, assertsPassed, $M.7, $M.6, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12;



implementation ftdi_elan_flush_targets_loop_$bb16(in_$p0: ref, in_$p46: ref, in_$p49: ref, in_$i50: i32, in_$p51: ref, in_$i52: i32, in_$i53: i32, in_$i54: i1, in_$p80: ref, in_$p81: ref, in_$i82: i32, in_$i83: i1) returns (out_$p49: ref, out_$i50: i32, out_$p51: ref, out_$i52: i32, out_$i53: i32, out_$i54: i1, out_$p80: ref, out_$p81: ref, out_$i82: i32, out_$i83: i1)
{

  entry:
    out_$p49, out_$i50, out_$p51, out_$i52, out_$i53, out_$i54, out_$p80, out_$p81, out_$i82, out_$i83 := in_$p49, in_$i50, in_$p51, in_$i52, in_$i53, in_$i54, in_$p80, in_$p81, in_$i82, in_$i83;
    goto $bb16, exit;

  $bb16:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(176, 1));
    goto corral_source_split_2616;

  $bb20:
    assume {:verifier.code 0} true;
    assume out_$i83 == 1;
    goto $bb20_dummy;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    out_$i83 := $eq.i32(out_$i82, 1);
    goto corral_source_split_2666;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    out_$i82 := $load.i32($M.0, in_$p46);
    goto corral_source_split_2665;

  SeqInstr_279:
    goto corral_source_split_2664;

  SeqInstr_278:
    assume assertsPassed;
    goto SeqInstr_279;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} ldv_mutex_lock_32(out_$p81);
    goto SeqInstr_278;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(16, 1));
    goto corral_source_split_2663;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} msleep(100);
    goto corral_source_split_2662;

  SeqInstr_276:
    goto corral_source_split_2661;

  SeqInstr_275:
    assume assertsPassed;
    goto SeqInstr_276;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} ldv_mutex_unlock_31(out_$p80);
    goto SeqInstr_275;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(16, 1));
    goto corral_source_split_2660;

  $bb18:
    assume !(out_$i54 == 1);
    goto corral_source_split_2659;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    out_$i54 := $sle.i32(out_$i53, 31);
    goto corral_source_split_2621;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    out_$i53 := $sub.i32(out_$i50, out_$i52);
    call {:si_unique_call 534} {:cexpr "command_size___0"} boogie_si_record_i32(out_$i53);
    goto corral_source_split_2620;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    out_$i52 := $load.i32($M.0, out_$p51);
    goto corral_source_split_2619;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(180, 1));
    goto corral_source_split_2618;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    out_$i50 := $load.i32($M.0, out_$p49);
    goto corral_source_split_2617;

  $bb20_dummy:
    call {:si_unique_call 1} out_$p49, out_$i50, out_$p51, out_$i52, out_$i53, out_$i54, out_$p80, out_$p81, out_$i82, out_$i83 := ftdi_elan_flush_targets_loop_$bb16(in_$p0, in_$p46, out_$p49, out_$i50, out_$p51, out_$i52, out_$i53, out_$i54, out_$p80, out_$p81, out_$i82, out_$i83);
    return;

  exit:
    return;
}



procedure ftdi_elan_flush_targets_loop_$bb16(in_$p0: ref, in_$p46: ref, in_$p49: ref, in_$i50: i32, in_$p51: ref, in_$i52: i32, in_$i53: i32, in_$i54: i1, in_$p80: ref, in_$p81: ref, in_$i82: i32, in_$i83: i1) returns (out_$p49: ref, out_$i50: i32, out_$p51: ref, out_$i52: i32, out_$i53: i32, out_$i54: i1, out_$p80: ref, out_$p81: ref, out_$i82: i32, out_$i83: i1);
  modifies $M.4, assertsPassed;



implementation ftdi_elan_flush_targets_loop_$bb6(in_$p0: ref, in_$p8: ref, in_$p11: ref, in_$i12: i32, in_$p13: ref, in_$i14: i32, in_$i15: i32, in_$i16: i1, in_$p42: ref, in_$p43: ref, in_$i44: i32, in_$i45: i1) returns (out_$p11: ref, out_$i12: i32, out_$p13: ref, out_$i14: i32, out_$i15: i32, out_$i16: i1, out_$p42: ref, out_$p43: ref, out_$i44: i32, out_$i45: i1)
{

  entry:
    out_$p11, out_$i12, out_$p13, out_$i14, out_$i15, out_$i16, out_$p42, out_$p43, out_$i44, out_$i45 := in_$p11, in_$i12, in_$p13, in_$i14, in_$i15, in_$i16, in_$p42, in_$p43, in_$i44, in_$i45;
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(176, 1));
    goto corral_source_split_2556;

  $bb10:
    assume {:verifier.code 0} true;
    assume out_$i45 == 1;
    goto $bb10_dummy;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    out_$i45 := $eq.i32(out_$i44, 1);
    goto corral_source_split_2606;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    out_$i44 := $load.i32($M.0, in_$p8);
    goto corral_source_split_2605;

  SeqInstr_273:
    goto corral_source_split_2604;

  SeqInstr_272:
    assume assertsPassed;
    goto SeqInstr_273;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} ldv_mutex_lock_30(out_$p43);
    goto SeqInstr_272;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(16, 1));
    goto corral_source_split_2603;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} msleep(100);
    goto corral_source_split_2602;

  SeqInstr_270:
    goto corral_source_split_2601;

  SeqInstr_269:
    assume assertsPassed;
    goto SeqInstr_270;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} ldv_mutex_unlock_29(out_$p42);
    goto SeqInstr_269;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(16, 1));
    goto corral_source_split_2600;

  $bb8:
    assume !(out_$i16 == 1);
    goto corral_source_split_2599;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    out_$i16 := $sle.i32(out_$i15, 31);
    goto corral_source_split_2561;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    out_$i15 := $sub.i32(out_$i12, out_$i14);
    call {:si_unique_call 529} {:cexpr "command_size"} boogie_si_record_i32(out_$i15);
    goto corral_source_split_2560;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    out_$i14 := $load.i32($M.0, out_$p13);
    goto corral_source_split_2559;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(180, 1));
    goto corral_source_split_2558;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    out_$i12 := $load.i32($M.0, out_$p11);
    goto corral_source_split_2557;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p11, out_$i12, out_$p13, out_$i14, out_$i15, out_$i16, out_$p42, out_$p43, out_$i44, out_$i45 := ftdi_elan_flush_targets_loop_$bb6(in_$p0, in_$p8, out_$p11, out_$i12, out_$p13, out_$i14, out_$i15, out_$i16, out_$p42, out_$p43, out_$i44, out_$i45);
    return;

  exit:
    return;
}



procedure ftdi_elan_flush_targets_loop_$bb6(in_$p0: ref, in_$p8: ref, in_$p11: ref, in_$i12: i32, in_$p13: ref, in_$i14: i32, in_$i15: i32, in_$i16: i1, in_$p42: ref, in_$p43: ref, in_$i44: i32, in_$i45: i1) returns (out_$p11: ref, out_$i12: i32, out_$p13: ref, out_$i14: i32, out_$i15: i32, out_$i16: i1, out_$p42: ref, out_$p43: ref, out_$i44: i32, out_$i45: i1);
  modifies $M.4, assertsPassed;



implementation {:SIextraRecBound 4} ftdi_elan_flush_targets_loop_$bb1(in_$p0: ref, in_$p3: ref, in_$p4: ref, in_$i5: i64, in_$p7: ref, in_$p8: ref, in_$i9: i32, in_$i10: i1, in_$p11: ref, in_$i12: i32, in_$p13: ref, in_$i14: i32, in_$i15: i32, in_$i16: i1, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$i20: i32, in_$i21: i64, in_$i22: i64, in_$i24: i32, in_$i25: i8, in_$i26: i32, in_$i27: i32, in_$i28: i8, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p37: ref, in_$p38: ref, in_$i39: i32, in_$i40: i32, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$i44: i32, in_$i45: i1, in_$p46: ref, in_$i47: i32, in_$i48: i1, in_$p49: ref, in_$i50: i32, in_$p51: ref, in_$i52: i32, in_$i53: i32, in_$i54: i1, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$i58: i32, in_$i59: i64, in_$i60: i64, in_$i62: i32, in_$i63: i8, in_$i64: i32, in_$i65: i32, in_$i66: i8, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$p75: ref, in_$p76: ref, in_$i77: i32, in_$i78: i32, in_$p79: ref, in_$p80: ref, in_$p81: ref, in_$i82: i32, in_$i83: i1, in_$i84: i32, in_$i85: i1, in_$i2: i32) returns (out_$p3: ref, out_$p4: ref, out_$i5: i64, out_$p7: ref, out_$p8: ref, out_$i9: i32, out_$i10: i1, out_$p11: ref, out_$i12: i32, out_$p13: ref, out_$i14: i32, out_$i15: i32, out_$i16: i1, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$i20: i32, out_$i21: i64, out_$i22: i64, out_$i24: i32, out_$i25: i8, out_$i26: i32, out_$i27: i32, out_$i28: i8, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p37: ref, out_$p38: ref, out_$i39: i32, out_$i40: i32, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$i44: i32, out_$i45: i1, out_$p46: ref, out_$i47: i32, out_$i48: i1, out_$p49: ref, out_$i50: i32, out_$p51: ref, out_$i52: i32, out_$i53: i32, out_$i54: i1, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$i58: i32, out_$i59: i64, out_$i60: i64, out_$i62: i32, out_$i63: i8, out_$i64: i32, out_$i65: i32, out_$i66: i8, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$p72: ref, out_$p73: ref, out_$p75: ref, out_$p76: ref, out_$i77: i32, out_$i78: i32, out_$p79: ref, out_$p80: ref, out_$p81: ref, out_$i82: i32, out_$i83: i1, out_$i84: i32, out_$i85: i1, out_$i2: i32)
{

  entry:
    out_$p3, out_$p4, out_$i5, out_$p7, out_$p8, out_$i9, out_$i10, out_$p11, out_$i12, out_$p13, out_$i14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p29, out_$p30, out_$p31, out_$p32, out_$p33, out_$p34, out_$p35, out_$p37, out_$p38, out_$i39, out_$i40, out_$p41, out_$p42, out_$p43, out_$i44, out_$i45, out_$p46, out_$i47, out_$i48, out_$p49, out_$i50, out_$p51, out_$i52, out_$i53, out_$i54, out_$p55, out_$p56, out_$p57, out_$i58, out_$i59, out_$i60, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$p67, out_$p68, out_$p69, out_$p70, out_$p71, out_$p72, out_$p73, out_$p75, out_$p76, out_$i77, out_$i78, out_$p79, out_$p80, out_$p81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i2 := in_$p3, in_$p4, in_$i5, in_$p7, in_$p8, in_$i9, in_$i10, in_$p11, in_$i12, in_$p13, in_$i14, in_$i15, in_$i16, in_$p17, in_$p18, in_$p19, in_$i20, in_$i21, in_$i22, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$p29, in_$p30, in_$p31, in_$p32, in_$p33, in_$p34, in_$p35, in_$p37, in_$p38, in_$i39, in_$i40, in_$p41, in_$p42, in_$p43, in_$i44, in_$i45, in_$p46, in_$i47, in_$i48, in_$p49, in_$i50, in_$p51, in_$i52, in_$i53, in_$i54, in_$p55, in_$p56, in_$p57, in_$i58, in_$i59, in_$i60, in_$i62, in_$i63, in_$i64, in_$i65, in_$i66, in_$p67, in_$p68, in_$p69, in_$p70, in_$p71, in_$p72, in_$p73, in_$p75, in_$p76, in_$i77, in_$i78, in_$p79, in_$p80, in_$p81, in_$i82, in_$i83, in_$i84, in_$i85, in_$i2;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_2542;

  $bb23:
    assume out_$i85 == 1;
    assume {:verifier.code 0} true;
    out_$i2 := out_$i84;
    goto $bb23_dummy;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    out_$i85 := $sgt.i32(out_$i2, 0);
    goto corral_source_split_2671;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i84 := $sub.i32(out_$i2, 1);
    call {:si_unique_call 539} {:cexpr "ed_number"} boogie_si_record_i32(out_$i84);
    goto corral_source_split_2670;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} ftdi_elan_kick_command_queue(in_$p0);
    goto corral_source_split_2657;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p79, out_$i78);
    goto corral_source_split_2656;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(176, 1));
    goto corral_source_split_2655;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    out_$i78 := $add.i32(out_$i77, 1);
    goto corral_source_split_2654;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    out_$i77 := $load.i32($M.0, out_$p76);
    goto corral_source_split_2653;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(176, 1));
    goto corral_source_split_2652;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p75, out_$p73);
    goto corral_source_split_2651;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref(out_$p56, $mul.ref(out_$i60, 24)), $mul.ref(16, 1));
    goto corral_source_split_2650;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    goto corral_source_split_2649;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref(out_$p56, $mul.ref(out_$i60, 24)), $mul.ref(8, 1));
    goto corral_source_split_2648;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p72, 0);
    goto corral_source_split_2647;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref(out_$p56, $mul.ref(out_$i60, 24)), $mul.ref(8, 1));
    goto corral_source_split_2646;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p71, 0);
    goto corral_source_split_2645;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(out_$p56, $mul.ref(out_$i60, 24)), $mul.ref(12, 1));
    goto corral_source_split_2644;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p70, 0);
    goto corral_source_split_2643;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref(out_$p56, $mul.ref(out_$i60, 24)), $mul.ref(5, 1));
    goto corral_source_split_2642;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p69, 0);
    goto corral_source_split_2641;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref(out_$p56, $mul.ref(out_$i60, 24)), $mul.ref(4, 1));
    goto corral_source_split_2640;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p68, 0);
    goto corral_source_split_2639;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(out_$p56, $mul.ref(out_$i60, 24)), $mul.ref(2, 1));
    goto corral_source_split_2638;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p67, out_$i66);
    goto corral_source_split_2637;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref(out_$p56, $mul.ref(out_$i60, 24)), $mul.ref(0, 1));
    goto corral_source_split_2636;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    out_$i66 := $trunc.i32.i8(out_$i65);
    goto corral_source_split_2635;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    out_$i65 := $or.i32(out_$i64, $sub.i32(0, 112));
    goto corral_source_split_2634;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    out_$i64 := $sext.i8.i32(out_$i63);
    goto corral_source_split_2633;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    out_$i63 := $trunc.i32.i8(out_$i62);
    goto corral_source_split_2632;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    out_$i62 := $shl.i32(out_$i2, 5);
    goto corral_source_split_2631;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    goto corral_source_split_2630;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    out_$i60 := $and.i64(out_$i59, 31);
    goto corral_source_split_2629;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    out_$i59 := $sext.i32.i64(out_$i58);
    goto corral_source_split_2628;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    out_$i58 := $load.i32($M.0, out_$p57);
    goto corral_source_split_2627;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(176, 1));
    goto corral_source_split_2626;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    out_$p56 := $bitcast.ref.ref(out_$p55);
    goto corral_source_split_2625;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(184, 1));
    goto corral_source_split_2624;

  $bb17:
    assume out_$i54 == 1;
    goto corral_source_split_2623;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    out_$i54 := $sle.i32(out_$i53, 31);
    goto corral_source_split_2621;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    out_$i53 := $sub.i32(out_$i50, out_$i52);
    call {:si_unique_call 534} {:cexpr "command_size___0"} boogie_si_record_i32(out_$i53);
    goto corral_source_split_2620;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    out_$i52 := $load.i32($M.0, out_$p51);
    goto corral_source_split_2619;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(180, 1));
    goto corral_source_split_2618;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    out_$i50 := $load.i32($M.0, out_$p49);
    goto corral_source_split_2617;

  $bb16:
    call out_$p49, out_$i50, out_$p51, out_$i52, out_$i53, out_$i54, out_$p80, out_$p81, out_$i82, out_$i83 := ftdi_elan_flush_targets_loop_$bb16(in_$p0, out_$p46, out_$p49, out_$i50, out_$p51, out_$i52, out_$i53, out_$i54, out_$p80, out_$p81, out_$i82, out_$i83);
    goto $bb16_last;

  $bb16_last:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(176, 1));
    goto corral_source_split_2616;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb20:
    assume {:verifier.code 0} true;
    assume out_$i83 == 1;
    assume false;
    return;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    out_$i83 := $eq.i32(out_$i82, 1);
    goto corral_source_split_2666;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    out_$i82 := $load.i32($M.0, out_$p46);
    goto corral_source_split_2665;

  SeqInstr_279:
    goto corral_source_split_2664;

  SeqInstr_278:
    assume assertsPassed;
    goto SeqInstr_279;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} ldv_mutex_lock_32(out_$p81);
    goto SeqInstr_278;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(16, 1));
    goto corral_source_split_2663;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} msleep(100);
    goto corral_source_split_2662;

  SeqInstr_276:
    goto corral_source_split_2661;

  SeqInstr_275:
    assume assertsPassed;
    goto SeqInstr_276;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} ldv_mutex_unlock_31(out_$p80);
    goto SeqInstr_275;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(16, 1));
    goto corral_source_split_2660;

  $bb18:
    assume !(out_$i54 == 1);
    goto corral_source_split_2659;

  $bb13:
    assume out_$i48 == 1;
    goto corral_source_split_2614;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    out_$i48 := $eq.i32(out_$i47, 1);
    goto corral_source_split_2612;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    out_$i47 := $load.i32($M.0, out_$p46);
    goto corral_source_split_2611;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(out_$p4, $mul.ref(out_$i5, 64)), $mul.ref(48, 1));
    goto corral_source_split_2610;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} ftdi_elan_kick_command_queue(in_$p0);
    goto corral_source_split_2597;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p41, out_$i40);
    goto corral_source_split_2596;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(176, 1));
    goto corral_source_split_2595;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    out_$i40 := $add.i32(out_$i39, 1);
    goto corral_source_split_2594;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i32($M.0, out_$p38);
    goto corral_source_split_2593;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(176, 1));
    goto corral_source_split_2592;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p37, out_$p35);
    goto corral_source_split_2591;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(out_$p18, $mul.ref(out_$i22, 24)), $mul.ref(16, 1));
    goto corral_source_split_2590;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    goto corral_source_split_2589;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(out_$p18, $mul.ref(out_$i22, 24)), $mul.ref(8, 1));
    goto corral_source_split_2588;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p34, 0);
    goto corral_source_split_2587;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(out_$p18, $mul.ref(out_$i22, 24)), $mul.ref(8, 1));
    goto corral_source_split_2586;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p33, 0);
    goto corral_source_split_2585;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(out_$p18, $mul.ref(out_$i22, 24)), $mul.ref(12, 1));
    goto corral_source_split_2584;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p32, 0);
    goto corral_source_split_2583;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p18, $mul.ref(out_$i22, 24)), $mul.ref(5, 1));
    goto corral_source_split_2582;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p31, 0);
    goto corral_source_split_2581;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(out_$p18, $mul.ref(out_$i22, 24)), $mul.ref(4, 1));
    goto corral_source_split_2580;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p30, 0);
    goto corral_source_split_2579;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(out_$p18, $mul.ref(out_$i22, 24)), $mul.ref(2, 1));
    goto corral_source_split_2578;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p29, out_$i28);
    goto corral_source_split_2577;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p18, $mul.ref(out_$i22, 24)), $mul.ref(0, 1));
    goto corral_source_split_2576;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    out_$i28 := $trunc.i32.i8(out_$i27);
    goto corral_source_split_2575;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    out_$i27 := $or.i32(out_$i26, $sub.i32(0, 124));
    goto corral_source_split_2574;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    out_$i26 := $sext.i8.i32(out_$i25);
    goto corral_source_split_2573;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    out_$i25 := $trunc.i32.i8(out_$i24);
    goto corral_source_split_2572;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    out_$i24 := $shl.i32(out_$i2, 5);
    goto corral_source_split_2571;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    goto corral_source_split_2570;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    out_$i22 := $and.i64(out_$i21, 31);
    goto corral_source_split_2569;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    out_$i21 := $sext.i32.i64(out_$i20);
    goto corral_source_split_2568;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i32($M.0, out_$p19);
    goto corral_source_split_2567;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(176, 1));
    goto corral_source_split_2566;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    out_$p18 := $bitcast.ref.ref(out_$p17);
    goto corral_source_split_2565;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(184, 1));
    goto corral_source_split_2564;

  $bb7:
    assume out_$i16 == 1;
    goto corral_source_split_2563;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    out_$i16 := $sle.i32(out_$i15, 31);
    goto corral_source_split_2561;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    out_$i15 := $sub.i32(out_$i12, out_$i14);
    call {:si_unique_call 529} {:cexpr "command_size"} boogie_si_record_i32(out_$i15);
    goto corral_source_split_2560;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    out_$i14 := $load.i32($M.0, out_$p13);
    goto corral_source_split_2559;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(180, 1));
    goto corral_source_split_2558;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    out_$i12 := $load.i32($M.0, out_$p11);
    goto corral_source_split_2557;

  $bb6:
    call out_$p11, out_$i12, out_$p13, out_$i14, out_$i15, out_$i16, out_$p42, out_$p43, out_$i44, out_$i45 := ftdi_elan_flush_targets_loop_$bb6(in_$p0, out_$p8, out_$p11, out_$i12, out_$p13, out_$i14, out_$i15, out_$i16, out_$p42, out_$p43, out_$i44, out_$i45);
    goto $bb6_last;

  $bb6_last:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(176, 1));
    goto corral_source_split_2556;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb10:
    assume {:verifier.code 0} true;
    assume out_$i45 == 1;
    assume false;
    return;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    out_$i45 := $eq.i32(out_$i44, 1);
    goto corral_source_split_2606;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    out_$i44 := $load.i32($M.0, out_$p8);
    goto corral_source_split_2605;

  SeqInstr_273:
    goto corral_source_split_2604;

  SeqInstr_272:
    assume assertsPassed;
    goto SeqInstr_273;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} ldv_mutex_lock_30(out_$p43);
    goto SeqInstr_272;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(16, 1));
    goto corral_source_split_2603;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} msleep(100);
    goto corral_source_split_2602;

  SeqInstr_270:
    goto corral_source_split_2601;

  SeqInstr_269:
    assume assertsPassed;
    goto SeqInstr_270;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} ldv_mutex_unlock_29(out_$p42);
    goto SeqInstr_269;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(16, 1));
    goto corral_source_split_2600;

  $bb8:
    assume !(out_$i16 == 1);
    goto corral_source_split_2599;

  $bb3:
    assume out_$i10 == 1;
    goto corral_source_split_2554;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    out_$i10 := $eq.i32(out_$i9, 1);
    goto corral_source_split_2552;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    out_$i9 := $load.i32($M.0, out_$p8);
    goto corral_source_split_2551;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref(out_$p4, $mul.ref(out_$i5, 64)), $mul.ref(48, 1));
    goto corral_source_split_2550;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p7, 1);
    goto corral_source_split_2549;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref($add.ref(out_$p4, $mul.ref(out_$i5, 64)), $mul.ref(52, 1));
    goto corral_source_split_2548;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    goto corral_source_split_2547;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    out_$i5 := $sext.i32.i64(out_$i2);
    goto corral_source_split_2546;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    out_$p4 := $bitcast.ref.ref(out_$p3);
    goto corral_source_split_2545;

  $bb2:
    assume {:verifier.code 0} true;
    out_$p3 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(4800, 1));
    goto corral_source_split_2544;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb4:
    assume {:verifier.code 0} true;
    assume !(out_$i10 == 1);
    goto $bb5;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb11:
    assume !(out_$i45 == 1);
    goto corral_source_split_2608;

  $bb14:
    assume {:verifier.code 0} true;
    assume !(out_$i48 == 1);
    goto $bb15;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb21:
    assume !(out_$i83 == 1);
    goto corral_source_split_2668;

  $bb23_dummy:
    call {:si_unique_call 1} out_$p3, out_$p4, out_$i5, out_$p7, out_$p8, out_$i9, out_$i10, out_$p11, out_$i12, out_$p13, out_$i14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p29, out_$p30, out_$p31, out_$p32, out_$p33, out_$p34, out_$p35, out_$p37, out_$p38, out_$i39, out_$i40, out_$p41, out_$p42, out_$p43, out_$i44, out_$i45, out_$p46, out_$i47, out_$i48, out_$p49, out_$i50, out_$p51, out_$i52, out_$i53, out_$i54, out_$p55, out_$p56, out_$p57, out_$i58, out_$i59, out_$i60, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$p67, out_$p68, out_$p69, out_$p70, out_$p71, out_$p72, out_$p73, out_$p75, out_$p76, out_$i77, out_$i78, out_$p79, out_$p80, out_$p81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i2 := ftdi_elan_flush_targets_loop_$bb1(in_$p0, out_$p3, out_$p4, out_$i5, out_$p7, out_$p8, out_$i9, out_$i10, out_$p11, out_$i12, out_$p13, out_$i14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p29, out_$p30, out_$p31, out_$p32, out_$p33, out_$p34, out_$p35, out_$p37, out_$p38, out_$i39, out_$i40, out_$p41, out_$p42, out_$p43, out_$i44, out_$i45, out_$p46, out_$i47, out_$i48, out_$p49, out_$i50, out_$p51, out_$i52, out_$i53, out_$i54, out_$p55, out_$p56, out_$p57, out_$i58, out_$i59, out_$i60, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$p67, out_$p68, out_$p69, out_$p70, out_$p71, out_$p72, out_$p73, out_$p75, out_$p76, out_$i77, out_$i78, out_$p79, out_$p80, out_$p81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i2);
    return;

  exit:
    return;
}



procedure ftdi_elan_flush_targets_loop_$bb1(in_$p0: ref, in_$p3: ref, in_$p4: ref, in_$i5: i64, in_$p7: ref, in_$p8: ref, in_$i9: i32, in_$i10: i1, in_$p11: ref, in_$i12: i32, in_$p13: ref, in_$i14: i32, in_$i15: i32, in_$i16: i1, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$i20: i32, in_$i21: i64, in_$i22: i64, in_$i24: i32, in_$i25: i8, in_$i26: i32, in_$i27: i32, in_$i28: i8, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p37: ref, in_$p38: ref, in_$i39: i32, in_$i40: i32, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$i44: i32, in_$i45: i1, in_$p46: ref, in_$i47: i32, in_$i48: i1, in_$p49: ref, in_$i50: i32, in_$p51: ref, in_$i52: i32, in_$i53: i32, in_$i54: i1, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$i58: i32, in_$i59: i64, in_$i60: i64, in_$i62: i32, in_$i63: i8, in_$i64: i32, in_$i65: i32, in_$i66: i8, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$p75: ref, in_$p76: ref, in_$i77: i32, in_$i78: i32, in_$p79: ref, in_$p80: ref, in_$p81: ref, in_$i82: i32, in_$i83: i1, in_$i84: i32, in_$i85: i1, in_$i2: i32) returns (out_$p3: ref, out_$p4: ref, out_$i5: i64, out_$p7: ref, out_$p8: ref, out_$i9: i32, out_$i10: i1, out_$p11: ref, out_$i12: i32, out_$p13: ref, out_$i14: i32, out_$i15: i32, out_$i16: i1, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$i20: i32, out_$i21: i64, out_$i22: i64, out_$i24: i32, out_$i25: i8, out_$i26: i32, out_$i27: i32, out_$i28: i8, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p37: ref, out_$p38: ref, out_$i39: i32, out_$i40: i32, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$i44: i32, out_$i45: i1, out_$p46: ref, out_$i47: i32, out_$i48: i1, out_$p49: ref, out_$i50: i32, out_$p51: ref, out_$i52: i32, out_$i53: i32, out_$i54: i1, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$i58: i32, out_$i59: i64, out_$i60: i64, out_$i62: i32, out_$i63: i8, out_$i64: i32, out_$i65: i32, out_$i66: i8, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$p72: ref, out_$p73: ref, out_$p75: ref, out_$p76: ref, out_$i77: i32, out_$i78: i32, out_$p79: ref, out_$p80: ref, out_$p81: ref, out_$i82: i32, out_$i83: i1, out_$i84: i32, out_$i85: i1, out_$i2: i32);
  modifies $M.7, $M.6, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12, $M.0, $M.4, assertsPassed;



implementation ftdi_elan_cancel_targets_loop_$bb6(in_$p0: ref, in_$p8: ref, in_$p11: ref, in_$i12: i32, in_$p13: ref, in_$i14: i32, in_$i15: i32, in_$i16: i1, in_$p42: ref, in_$p43: ref, in_$i44: i32, in_$i45: i1) returns (out_$p11: ref, out_$i12: i32, out_$p13: ref, out_$i14: i32, out_$i15: i32, out_$i16: i1, out_$p42: ref, out_$p43: ref, out_$i44: i32, out_$i45: i1)
{

  entry:
    out_$p11, out_$i12, out_$p13, out_$i14, out_$i15, out_$i16, out_$p42, out_$p43, out_$i44, out_$i45 := in_$p11, in_$i12, in_$p13, in_$i14, in_$i15, in_$i16, in_$p42, in_$p43, in_$i44, in_$i45;
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(176, 1));
    goto corral_source_split_2700;

  $bb10:
    assume {:verifier.code 0} true;
    assume out_$i45 == 1;
    goto $bb10_dummy;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    out_$i45 := $eq.i32(out_$i44, 1);
    goto corral_source_split_2750;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    out_$i44 := $load.i32($M.0, in_$p8);
    goto corral_source_split_2749;

  SeqInstr_291:
    goto corral_source_split_2748;

  SeqInstr_290:
    assume assertsPassed;
    goto SeqInstr_291;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} ldv_mutex_lock_36(out_$p43);
    goto SeqInstr_290;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(16, 1));
    goto corral_source_split_2747;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} msleep(100);
    goto corral_source_split_2746;

  SeqInstr_288:
    goto corral_source_split_2745;

  SeqInstr_287:
    assume assertsPassed;
    goto SeqInstr_288;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} ldv_mutex_unlock_35(out_$p42);
    goto SeqInstr_287;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(16, 1));
    goto corral_source_split_2744;

  $bb8:
    assume !(out_$i16 == 1);
    goto corral_source_split_2743;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    out_$i16 := $sle.i32(out_$i15, 31);
    goto corral_source_split_2705;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    out_$i15 := $sub.i32(out_$i12, out_$i14);
    call {:si_unique_call 542} {:cexpr "command_size"} boogie_si_record_i32(out_$i15);
    goto corral_source_split_2704;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    out_$i14 := $load.i32($M.0, out_$p13);
    goto corral_source_split_2703;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(180, 1));
    goto corral_source_split_2702;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    out_$i12 := $load.i32($M.0, out_$p11);
    goto corral_source_split_2701;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p11, out_$i12, out_$p13, out_$i14, out_$i15, out_$i16, out_$p42, out_$p43, out_$i44, out_$i45 := ftdi_elan_cancel_targets_loop_$bb6(in_$p0, in_$p8, out_$p11, out_$i12, out_$p13, out_$i14, out_$i15, out_$i16, out_$p42, out_$p43, out_$i44, out_$i45);
    return;

  exit:
    return;
}



procedure ftdi_elan_cancel_targets_loop_$bb6(in_$p0: ref, in_$p8: ref, in_$p11: ref, in_$i12: i32, in_$p13: ref, in_$i14: i32, in_$i15: i32, in_$i16: i1, in_$p42: ref, in_$p43: ref, in_$i44: i32, in_$i45: i1) returns (out_$p11: ref, out_$i12: i32, out_$p13: ref, out_$i14: i32, out_$i15: i32, out_$i16: i1, out_$p42: ref, out_$p43: ref, out_$i44: i32, out_$i45: i1);
  modifies $M.4, assertsPassed;



implementation {:SIextraRecBound 4} ftdi_elan_cancel_targets_loop_$bb1(in_$p0: ref, in_$p3: ref, in_$p4: ref, in_$i5: i64, in_$p7: ref, in_$p8: ref, in_$i9: i32, in_$i10: i1, in_$p11: ref, in_$i12: i32, in_$p13: ref, in_$i14: i32, in_$i15: i32, in_$i16: i1, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$i20: i32, in_$i21: i64, in_$i22: i64, in_$i24: i32, in_$i25: i8, in_$i26: i32, in_$i27: i32, in_$i28: i8, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p37: ref, in_$p38: ref, in_$i39: i32, in_$i40: i32, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$i44: i32, in_$i45: i1, in_$i46: i32, in_$i47: i1, in_$i2: i32) returns (out_$p3: ref, out_$p4: ref, out_$i5: i64, out_$p7: ref, out_$p8: ref, out_$i9: i32, out_$i10: i1, out_$p11: ref, out_$i12: i32, out_$p13: ref, out_$i14: i32, out_$i15: i32, out_$i16: i1, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$i20: i32, out_$i21: i64, out_$i22: i64, out_$i24: i32, out_$i25: i8, out_$i26: i32, out_$i27: i32, out_$i28: i8, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p37: ref, out_$p38: ref, out_$i39: i32, out_$i40: i32, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$i44: i32, out_$i45: i1, out_$i46: i32, out_$i47: i1, out_$i2: i32)
{

  entry:
    out_$p3, out_$p4, out_$i5, out_$p7, out_$p8, out_$i9, out_$i10, out_$p11, out_$i12, out_$p13, out_$i14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p29, out_$p30, out_$p31, out_$p32, out_$p33, out_$p34, out_$p35, out_$p37, out_$p38, out_$i39, out_$i40, out_$p41, out_$p42, out_$p43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i2 := in_$p3, in_$p4, in_$i5, in_$p7, in_$p8, in_$i9, in_$i10, in_$p11, in_$i12, in_$p13, in_$i14, in_$i15, in_$i16, in_$p17, in_$p18, in_$p19, in_$i20, in_$i21, in_$i22, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$p29, in_$p30, in_$p31, in_$p32, in_$p33, in_$p34, in_$p35, in_$p37, in_$p38, in_$i39, in_$i40, in_$p41, in_$p42, in_$p43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i2;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_2686;

  $bb13:
    assume out_$i47 == 1;
    assume {:verifier.code 0} true;
    out_$i2 := out_$i46;
    goto $bb13_dummy;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    out_$i47 := $sgt.i32(out_$i2, 0);
    goto corral_source_split_2755;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i46 := $sub.i32(out_$i2, 1);
    call {:si_unique_call 547} {:cexpr "ed_number"} boogie_si_record_i32(out_$i46);
    goto corral_source_split_2754;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} ftdi_elan_kick_command_queue(in_$p0);
    goto corral_source_split_2741;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p41, out_$i40);
    goto corral_source_split_2740;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(176, 1));
    goto corral_source_split_2739;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    out_$i40 := $add.i32(out_$i39, 1);
    goto corral_source_split_2738;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i32($M.0, out_$p38);
    goto corral_source_split_2737;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(176, 1));
    goto corral_source_split_2736;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p37, out_$p35);
    goto corral_source_split_2735;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(out_$p18, $mul.ref(out_$i22, 24)), $mul.ref(16, 1));
    goto corral_source_split_2734;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    goto corral_source_split_2733;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(out_$p18, $mul.ref(out_$i22, 24)), $mul.ref(8, 1));
    goto corral_source_split_2732;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p34, 0);
    goto corral_source_split_2731;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(out_$p18, $mul.ref(out_$i22, 24)), $mul.ref(8, 1));
    goto corral_source_split_2730;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p33, 0);
    goto corral_source_split_2729;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(out_$p18, $mul.ref(out_$i22, 24)), $mul.ref(12, 1));
    goto corral_source_split_2728;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p32, 0);
    goto corral_source_split_2727;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p18, $mul.ref(out_$i22, 24)), $mul.ref(5, 1));
    goto corral_source_split_2726;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p31, 0);
    goto corral_source_split_2725;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(out_$p18, $mul.ref(out_$i22, 24)), $mul.ref(4, 1));
    goto corral_source_split_2724;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p30, 0);
    goto corral_source_split_2723;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(out_$p18, $mul.ref(out_$i22, 24)), $mul.ref(2, 1));
    goto corral_source_split_2722;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p29, out_$i28);
    goto corral_source_split_2721;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p18, $mul.ref(out_$i22, 24)), $mul.ref(0, 1));
    goto corral_source_split_2720;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    out_$i28 := $trunc.i32.i8(out_$i27);
    goto corral_source_split_2719;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    out_$i27 := $or.i32(out_$i26, $sub.i32(0, 124));
    goto corral_source_split_2718;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    out_$i26 := $sext.i8.i32(out_$i25);
    goto corral_source_split_2717;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    out_$i25 := $trunc.i32.i8(out_$i24);
    goto corral_source_split_2716;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    out_$i24 := $shl.i32(out_$i2, 5);
    goto corral_source_split_2715;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    goto corral_source_split_2714;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    out_$i22 := $and.i64(out_$i21, 31);
    goto corral_source_split_2713;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    out_$i21 := $sext.i32.i64(out_$i20);
    goto corral_source_split_2712;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i32($M.0, out_$p19);
    goto corral_source_split_2711;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(176, 1));
    goto corral_source_split_2710;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    out_$p18 := $bitcast.ref.ref(out_$p17);
    goto corral_source_split_2709;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(184, 1));
    goto corral_source_split_2708;

  $bb7:
    assume out_$i16 == 1;
    goto corral_source_split_2707;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    out_$i16 := $sle.i32(out_$i15, 31);
    goto corral_source_split_2705;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    out_$i15 := $sub.i32(out_$i12, out_$i14);
    call {:si_unique_call 542} {:cexpr "command_size"} boogie_si_record_i32(out_$i15);
    goto corral_source_split_2704;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    out_$i14 := $load.i32($M.0, out_$p13);
    goto corral_source_split_2703;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(180, 1));
    goto corral_source_split_2702;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    out_$i12 := $load.i32($M.0, out_$p11);
    goto corral_source_split_2701;

  $bb6:
    call out_$p11, out_$i12, out_$p13, out_$i14, out_$i15, out_$i16, out_$p42, out_$p43, out_$i44, out_$i45 := ftdi_elan_cancel_targets_loop_$bb6(in_$p0, out_$p8, out_$p11, out_$i12, out_$p13, out_$i14, out_$i15, out_$i16, out_$p42, out_$p43, out_$i44, out_$i45);
    goto $bb6_last;

  $bb6_last:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(176, 1));
    goto corral_source_split_2700;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb10:
    assume {:verifier.code 0} true;
    assume out_$i45 == 1;
    assume false;
    return;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    out_$i45 := $eq.i32(out_$i44, 1);
    goto corral_source_split_2750;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    out_$i44 := $load.i32($M.0, out_$p8);
    goto corral_source_split_2749;

  SeqInstr_291:
    goto corral_source_split_2748;

  SeqInstr_290:
    assume assertsPassed;
    goto SeqInstr_291;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} ldv_mutex_lock_36(out_$p43);
    goto SeqInstr_290;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(16, 1));
    goto corral_source_split_2747;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} msleep(100);
    goto corral_source_split_2746;

  SeqInstr_288:
    goto corral_source_split_2745;

  SeqInstr_287:
    assume assertsPassed;
    goto SeqInstr_288;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} ldv_mutex_unlock_35(out_$p42);
    goto SeqInstr_287;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(16, 1));
    goto corral_source_split_2744;

  $bb8:
    assume !(out_$i16 == 1);
    goto corral_source_split_2743;

  $bb3:
    assume out_$i10 == 1;
    goto corral_source_split_2698;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    out_$i10 := $eq.i32(out_$i9, 1);
    goto corral_source_split_2696;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    out_$i9 := $load.i32($M.0, out_$p8);
    goto corral_source_split_2695;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref(out_$p4, $mul.ref(out_$i5, 64)), $mul.ref(48, 1));
    goto corral_source_split_2694;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p7, 1);
    goto corral_source_split_2693;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref($add.ref(out_$p4, $mul.ref(out_$i5, 64)), $mul.ref(52, 1));
    goto corral_source_split_2692;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    goto corral_source_split_2691;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    out_$i5 := $sext.i32.i64(out_$i2);
    goto corral_source_split_2690;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    out_$p4 := $bitcast.ref.ref(out_$p3);
    goto corral_source_split_2689;

  $bb2:
    assume {:verifier.code 0} true;
    out_$p3 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(4800, 1));
    goto corral_source_split_2688;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb4:
    assume {:verifier.code 0} true;
    assume !(out_$i10 == 1);
    goto $bb5;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb11:
    assume !(out_$i45 == 1);
    goto corral_source_split_2752;

  $bb13_dummy:
    call {:si_unique_call 1} out_$p3, out_$p4, out_$i5, out_$p7, out_$p8, out_$i9, out_$i10, out_$p11, out_$i12, out_$p13, out_$i14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p29, out_$p30, out_$p31, out_$p32, out_$p33, out_$p34, out_$p35, out_$p37, out_$p38, out_$i39, out_$i40, out_$p41, out_$p42, out_$p43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i2 := ftdi_elan_cancel_targets_loop_$bb1(in_$p0, out_$p3, out_$p4, out_$i5, out_$p7, out_$p8, out_$i9, out_$i10, out_$p11, out_$i12, out_$p13, out_$i14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p29, out_$p30, out_$p31, out_$p32, out_$p33, out_$p34, out_$p35, out_$p37, out_$p38, out_$i39, out_$i40, out_$p41, out_$p42, out_$p43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i2);
    return;

  exit:
    return;
}



procedure ftdi_elan_cancel_targets_loop_$bb1(in_$p0: ref, in_$p3: ref, in_$p4: ref, in_$i5: i64, in_$p7: ref, in_$p8: ref, in_$i9: i32, in_$i10: i1, in_$p11: ref, in_$i12: i32, in_$p13: ref, in_$i14: i32, in_$i15: i32, in_$i16: i1, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$i20: i32, in_$i21: i64, in_$i22: i64, in_$i24: i32, in_$i25: i8, in_$i26: i32, in_$i27: i32, in_$i28: i8, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p37: ref, in_$p38: ref, in_$i39: i32, in_$i40: i32, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$i44: i32, in_$i45: i1, in_$i46: i32, in_$i47: i1, in_$i2: i32) returns (out_$p3: ref, out_$p4: ref, out_$i5: i64, out_$p7: ref, out_$p8: ref, out_$i9: i32, out_$i10: i1, out_$p11: ref, out_$i12: i32, out_$p13: ref, out_$i14: i32, out_$i15: i32, out_$i16: i1, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$i20: i32, out_$i21: i64, out_$i22: i64, out_$i24: i32, out_$i25: i8, out_$i26: i32, out_$i27: i32, out_$i28: i8, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p37: ref, out_$p38: ref, out_$i39: i32, out_$i40: i32, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$i44: i32, out_$i45: i1, out_$i46: i32, out_$i47: i1, out_$i2: i32);
  modifies $M.7, $M.6, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12, $M.0, $M.4, assertsPassed;



implementation ftdi_elan_read_reg_loop_$bb4(in_$p0: ref, in_$p3: ref, in_$p7: ref, in_$p8: ref, in_$i9: i32, in_$p10: ref, in_$i11: i32, in_$i12: i32, in_$p13: ref, in_$i14: i32, in_$p15: ref, in_$i16: i32, in_$i17: i32, in_$i18: i1, in_$i19: i1, in_$p57: ref, in_$i58: i32, in_$i59: i1) returns (out_$p7: ref, out_$p8: ref, out_$i9: i32, out_$p10: ref, out_$i11: i32, out_$i12: i32, out_$p13: ref, out_$i14: i32, out_$p15: ref, out_$i16: i32, out_$i17: i32, out_$i18: i1, out_$i19: i1, out_$p57: ref, out_$i58: i32, out_$i59: i1)
{

  entry:
    out_$p7, out_$p8, out_$i9, out_$p10, out_$i11, out_$i12, out_$p13, out_$i14, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$p57, out_$i58, out_$i59 := in_$p7, in_$p8, in_$i9, in_$p10, in_$i11, in_$i12, in_$p13, in_$i14, in_$p15, in_$i16, in_$i17, in_$i18, in_$i19, in_$p57, in_$i58, in_$i59;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(16, 1));
    goto corral_source_split_2836;

  $bb12:
    assume {:verifier.code 0} true;
    assume !(out_$i59 == 1);
    goto $bb12_dummy;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    out_$i59 := $sgt.i32(out_$i58, 0);
    goto corral_source_split_2861;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    out_$i58 := $load.i32($M.0, in_$p3);
    goto corral_source_split_2860;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 584} msleep(100);
    goto corral_source_split_2859;

  SeqInstr_333:
    goto corral_source_split_2858;

  SeqInstr_332:
    assume assertsPassed;
    goto SeqInstr_333;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} ldv_mutex_unlock_58(out_$p57);
    goto SeqInstr_332;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(16, 1));
    goto corral_source_split_2857;

  $bb8:
    assume {:verifier.code 0} true;
    assume !(out_$i18 == 1);
    goto $bb9;

  $bb11:
    assume {:verifier.code 0} true;
    assume !(out_$i19 == 1);
    goto $bb9;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    out_$i19 := $sle.i32(out_$i17, 31);
    goto corral_source_split_2855;

  $bb7:
    assume out_$i18 == 1;
    goto corral_source_split_2854;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    out_$i18 := $sle.i32(out_$i12, 31);
    goto corral_source_split_2848;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    out_$i17 := $sub.i32(out_$i14, out_$i16);
    call {:si_unique_call 582} {:cexpr "respond_size"} boogie_si_record_i32(out_$i17);
    goto corral_source_split_2847;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    out_$i16 := $load.i32($M.0, out_$p15);
    goto corral_source_split_2846;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(956, 1));
    goto corral_source_split_2845;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    out_$i14 := $load.i32($M.0, out_$p13);
    goto corral_source_split_2844;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(952, 1));
    goto corral_source_split_2843;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    out_$i12 := $sub.i32(out_$i9, out_$i11);
    call {:si_unique_call 581} {:cexpr "command_size"} boogie_si_record_i32(out_$i12);
    goto corral_source_split_2842;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    out_$i11 := $load.i32($M.0, out_$p10);
    goto corral_source_split_2841;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(180, 1));
    goto corral_source_split_2840;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    out_$i9 := $load.i32($M.0, out_$p8);
    goto corral_source_split_2839;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(176, 1));
    goto corral_source_split_2838;

  SeqInstr_330:
    goto corral_source_split_2837;

  SeqInstr_329:
    assume assertsPassed;
    goto SeqInstr_330;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 580} ldv_mutex_lock_56(out_$p7);
    goto SeqInstr_329;

  $bb12_dummy:
    call {:si_unique_call 1} out_$p7, out_$p8, out_$i9, out_$p10, out_$i11, out_$i12, out_$p13, out_$i14, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$p57, out_$i58, out_$i59 := ftdi_elan_read_reg_loop_$bb4(in_$p0, in_$p3, out_$p7, out_$p8, out_$i9, out_$p10, out_$i11, out_$i12, out_$p13, out_$i14, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$p57, out_$i58, out_$i59);
    return;

  exit:
    return;
}



procedure ftdi_elan_read_reg_loop_$bb4(in_$p0: ref, in_$p3: ref, in_$p7: ref, in_$p8: ref, in_$i9: i32, in_$p10: ref, in_$i11: i32, in_$i12: i32, in_$p13: ref, in_$i14: i32, in_$p15: ref, in_$i16: i32, in_$i17: i32, in_$i18: i1, in_$i19: i1, in_$p57: ref, in_$i58: i32, in_$i59: i1) returns (out_$p7: ref, out_$p8: ref, out_$i9: i32, out_$p10: ref, out_$i11: i32, out_$i12: i32, out_$p13: ref, out_$i14: i32, out_$p15: ref, out_$i16: i32, out_$i17: i32, out_$i18: i1, out_$i19: i1, out_$p57: ref, out_$i58: i32, out_$i59: i1);
  modifies $M.4, assertsPassed;



implementation ftdi_elan_read_config_loop_$bb4(in_$p0: ref, in_$p7: ref, in_$p11: ref, in_$p12: ref, in_$i13: i32, in_$p14: ref, in_$i15: i32, in_$i16: i32, in_$p17: ref, in_$i18: i32, in_$p19: ref, in_$i20: i32, in_$i21: i32, in_$i22: i1, in_$i23: i1, in_$p64: ref, in_$i65: i32, in_$i66: i1) returns (out_$p11: ref, out_$p12: ref, out_$i13: i32, out_$p14: ref, out_$i15: i32, out_$i16: i32, out_$p17: ref, out_$i18: i32, out_$p19: ref, out_$i20: i32, out_$i21: i32, out_$i22: i1, out_$i23: i1, out_$p64: ref, out_$i65: i32, out_$i66: i1)
{

  entry:
    out_$p11, out_$p12, out_$i13, out_$p14, out_$i15, out_$i16, out_$p17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i23, out_$p64, out_$i65, out_$i66 := in_$p11, in_$p12, in_$i13, in_$p14, in_$i15, in_$i16, in_$p17, in_$i18, in_$p19, in_$i20, in_$i21, in_$i22, in_$i23, in_$p64, in_$i65, in_$i66;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(16, 1));
    goto corral_source_split_2929;

  $bb12:
    assume {:verifier.code 0} true;
    assume !(out_$i66 == 1);
    goto $bb12_dummy;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    out_$i66 := $sgt.i32(out_$i65, 0);
    goto corral_source_split_2954;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    out_$i65 := $load.i32($M.0, in_$p7);
    goto corral_source_split_2953;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} msleep(100);
    goto corral_source_split_2952;

  SeqInstr_342:
    goto corral_source_split_2951;

  SeqInstr_341:
    assume assertsPassed;
    goto SeqInstr_342;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 596} ldv_mutex_unlock_61(out_$p64);
    goto SeqInstr_341;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(16, 1));
    goto corral_source_split_2950;

  $bb8:
    assume {:verifier.code 0} true;
    assume !(out_$i22 == 1);
    goto $bb9;

  $bb11:
    assume {:verifier.code 0} true;
    assume !(out_$i23 == 1);
    goto $bb9;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    out_$i23 := $sle.i32(out_$i21, 31);
    goto corral_source_split_2948;

  $bb7:
    assume out_$i22 == 1;
    goto corral_source_split_2947;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    out_$i22 := $sle.i32(out_$i16, 31);
    goto corral_source_split_2941;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    out_$i21 := $sub.i32(out_$i18, out_$i20);
    call {:si_unique_call 595} {:cexpr "respond_size"} boogie_si_record_i32(out_$i21);
    goto corral_source_split_2940;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i32($M.0, out_$p19);
    goto corral_source_split_2939;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(956, 1));
    goto corral_source_split_2938;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    out_$i18 := $load.i32($M.0, out_$p17);
    goto corral_source_split_2937;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(952, 1));
    goto corral_source_split_2936;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    out_$i16 := $sub.i32(out_$i13, out_$i15);
    call {:si_unique_call 594} {:cexpr "command_size"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_2935;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    out_$i15 := $load.i32($M.0, out_$p14);
    goto corral_source_split_2934;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(180, 1));
    goto corral_source_split_2933;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    out_$i13 := $load.i32($M.0, out_$p12);
    goto corral_source_split_2932;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(176, 1));
    goto corral_source_split_2931;

  SeqInstr_339:
    goto corral_source_split_2930;

  SeqInstr_338:
    assume assertsPassed;
    goto SeqInstr_339;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} ldv_mutex_lock_59(out_$p11);
    goto SeqInstr_338;

  $bb12_dummy:
    call {:si_unique_call 1} out_$p11, out_$p12, out_$i13, out_$p14, out_$i15, out_$i16, out_$p17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i23, out_$p64, out_$i65, out_$i66 := ftdi_elan_read_config_loop_$bb4(in_$p0, in_$p7, out_$p11, out_$p12, out_$i13, out_$p14, out_$i15, out_$i16, out_$p17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i23, out_$p64, out_$i65, out_$i66);
    return;

  exit:
    return;
}



procedure ftdi_elan_read_config_loop_$bb4(in_$p0: ref, in_$p7: ref, in_$p11: ref, in_$p12: ref, in_$i13: i32, in_$p14: ref, in_$i15: i32, in_$i16: i32, in_$p17: ref, in_$i18: i32, in_$p19: ref, in_$i20: i32, in_$i21: i32, in_$i22: i1, in_$i23: i1, in_$p64: ref, in_$i65: i32, in_$i66: i1) returns (out_$p11: ref, out_$p12: ref, out_$i13: i32, out_$p14: ref, out_$i15: i32, out_$i16: i32, out_$p17: ref, out_$i18: i32, out_$p19: ref, out_$i20: i32, out_$i21: i32, out_$i22: i1, out_$i23: i1, out_$p64: ref, out_$i65: i32, out_$i66: i1);
  modifies $M.4, assertsPassed;



implementation ftdi_elan_write_reg_loop_$bb4(in_$p0: ref, in_$p2: ref, in_$p6: ref, in_$p7: ref, in_$i8: i32, in_$p9: ref, in_$i10: i32, in_$i11: i32, in_$i12: i1, in_$p34: ref, in_$i35: i32, in_$i36: i1) returns (out_$p6: ref, out_$p7: ref, out_$i8: i32, out_$p9: ref, out_$i10: i32, out_$i11: i32, out_$i12: i1, out_$p34: ref, out_$i35: i32, out_$i36: i1)
{

  entry:
    out_$p6, out_$p7, out_$i8, out_$p9, out_$i10, out_$i11, out_$i12, out_$p34, out_$i35, out_$i36 := in_$p6, in_$p7, in_$i8, in_$p9, in_$i10, in_$i11, in_$i12, in_$p34, in_$i35, in_$i36;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(16, 1));
    goto corral_source_split_3209;

  $bb9:
    assume {:verifier.code 0} true;
    assume !(out_$i36 == 1);
    goto $bb9_dummy;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    out_$i36 := $sgt.i32(out_$i35, 0);
    goto corral_source_split_3260;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i32($M.0, in_$p2);
    goto corral_source_split_3259;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 680} msleep(100);
    goto corral_source_split_3258;

  SeqInstr_477:
    goto corral_source_split_3257;

  SeqInstr_476:
    assume assertsPassed;
    goto SeqInstr_477;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} ldv_mutex_unlock_49(out_$p34);
    goto SeqInstr_476;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(16, 1));
    goto corral_source_split_3256;

  $bb8:
    assume !(out_$i12 == 1);
    goto corral_source_split_3255;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    out_$i12 := $sle.i32(out_$i11, 31);
    goto corral_source_split_3216;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    out_$i11 := $sub.i32(out_$i8, out_$i10);
    call {:si_unique_call 676} {:cexpr "command_size"} boogie_si_record_i32(out_$i11);
    goto corral_source_split_3215;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    out_$i10 := $load.i32($M.0, out_$p9);
    goto corral_source_split_3214;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(180, 1));
    goto corral_source_split_3213;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    out_$i8 := $load.i32($M.0, out_$p7);
    goto corral_source_split_3212;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(176, 1));
    goto corral_source_split_3211;

  SeqInstr_471:
    goto corral_source_split_3210;

  SeqInstr_470:
    assume assertsPassed;
    goto SeqInstr_471;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} ldv_mutex_lock_47(out_$p6);
    goto SeqInstr_470;

  $bb9_dummy:
    call {:si_unique_call 1} out_$p6, out_$p7, out_$i8, out_$p9, out_$i10, out_$i11, out_$i12, out_$p34, out_$i35, out_$i36 := ftdi_elan_write_reg_loop_$bb4(in_$p0, in_$p2, out_$p6, out_$p7, out_$i8, out_$p9, out_$i10, out_$i11, out_$i12, out_$p34, out_$i35, out_$i36);
    return;

  exit:
    return;
}



procedure ftdi_elan_write_reg_loop_$bb4(in_$p0: ref, in_$p2: ref, in_$p6: ref, in_$p7: ref, in_$i8: i32, in_$p9: ref, in_$i10: i32, in_$i11: i32, in_$i12: i1, in_$p34: ref, in_$i35: i32, in_$i36: i1) returns (out_$p6: ref, out_$p7: ref, out_$i8: i32, out_$p9: ref, out_$i10: i32, out_$i11: i32, out_$i12: i1, out_$p34: ref, out_$i35: i32, out_$i36: i1);
  modifies $M.4, assertsPassed;



implementation ftdi_elan_write_config_loop_$bb4(in_$p0: ref, in_$p6: ref, in_$p10: ref, in_$p11: ref, in_$i12: i32, in_$p13: ref, in_$i14: i32, in_$i15: i32, in_$i16: i1, in_$p41: ref, in_$i42: i32, in_$i43: i1) returns (out_$p10: ref, out_$p11: ref, out_$i12: i32, out_$p13: ref, out_$i14: i32, out_$i15: i32, out_$i16: i1, out_$p41: ref, out_$i42: i32, out_$i43: i1)
{

  entry:
    out_$p10, out_$p11, out_$i12, out_$p13, out_$i14, out_$i15, out_$i16, out_$p41, out_$i42, out_$i43 := in_$p10, in_$p11, in_$i12, in_$p13, in_$i14, in_$i15, in_$i16, in_$p41, in_$i42, in_$i43;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(16, 1));
    goto corral_source_split_3271;

  $bb9:
    assume {:verifier.code 0} true;
    assume !(out_$i43 == 1);
    goto $bb9_dummy;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    out_$i43 := $sgt.i32(out_$i42, 0);
    goto corral_source_split_3325;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i32($M.0, in_$p6);
    goto corral_source_split_3324;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 690} msleep(100);
    goto corral_source_split_3323;

  SeqInstr_486:
    goto corral_source_split_3322;

  SeqInstr_485:
    assume assertsPassed;
    goto SeqInstr_486;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} ldv_mutex_unlock_52(out_$p41);
    goto SeqInstr_485;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(16, 1));
    goto corral_source_split_3321;

  $bb8:
    assume !(out_$i16 == 1);
    goto corral_source_split_3320;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    out_$i16 := $sle.i32(out_$i15, 31);
    goto corral_source_split_3278;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    out_$i15 := $sub.i32(out_$i12, out_$i14);
    call {:si_unique_call 686} {:cexpr "command_size"} boogie_si_record_i32(out_$i15);
    goto corral_source_split_3277;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    out_$i14 := $load.i32($M.0, out_$p13);
    goto corral_source_split_3276;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(180, 1));
    goto corral_source_split_3275;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    out_$i12 := $load.i32($M.0, out_$p11);
    goto corral_source_split_3274;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(176, 1));
    goto corral_source_split_3273;

  SeqInstr_480:
    goto corral_source_split_3272;

  SeqInstr_479:
    assume assertsPassed;
    goto SeqInstr_480;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 685} ldv_mutex_lock_50(out_$p10);
    goto SeqInstr_479;

  $bb9_dummy:
    call {:si_unique_call 1} out_$p10, out_$p11, out_$i12, out_$p13, out_$i14, out_$i15, out_$i16, out_$p41, out_$i42, out_$i43 := ftdi_elan_write_config_loop_$bb4(in_$p0, in_$p6, out_$p10, out_$p11, out_$i12, out_$p13, out_$i14, out_$i15, out_$i16, out_$p41, out_$i42, out_$i43);
    return;

  exit:
    return;
}



procedure ftdi_elan_write_config_loop_$bb4(in_$p0: ref, in_$p6: ref, in_$p10: ref, in_$p11: ref, in_$i12: i32, in_$p13: ref, in_$i14: i32, in_$i15: i32, in_$i16: i1, in_$p41: ref, in_$i42: i32, in_$i43: i1) returns (out_$p10: ref, out_$p11: ref, out_$i12: i32, out_$p13: ref, out_$i14: i32, out_$i15: i32, out_$i16: i1, out_$p41: ref, out_$i42: i32, out_$i43: i1);
  modifies $M.4, assertsPassed;



implementation ftdi_elan_check_controller_loop_$bb181(in_$p0: ref, in_$p11: ref, in_$i20: i32, in_$i223: i64, in_$i224: i64, in_$i225: i32, in_$i226: i32, in_$i227: i32, in_$i228: i1, in_$i229: i32, in_$i230: i32, in_$i231: i32, in_$i232: i1, in_$i233: i32, in_$i234: i32, in_$i235: i32, in_$i236: i1, in_$i221: i32, in_$i222: i32, in_$i237: i32) returns (out_$i223: i64, out_$i224: i64, out_$i225: i32, out_$i226: i32, out_$i227: i32, out_$i228: i1, out_$i229: i32, out_$i230: i32, out_$i231: i32, out_$i232: i1, out_$i233: i32, out_$i234: i32, out_$i235: i32, out_$i236: i1, out_$i221: i32, out_$i222: i32, out_$i237: i32)
{

  entry:
    out_$i223, out_$i224, out_$i225, out_$i226, out_$i227, out_$i228, out_$i229, out_$i230, out_$i231, out_$i232, out_$i233, out_$i234, out_$i235, out_$i236, out_$i221, out_$i222, out_$i237 := in_$i223, in_$i224, in_$i225, in_$i226, in_$i227, in_$i228, in_$i229, in_$i230, in_$i231, in_$i232, in_$i233, in_$i234, in_$i235, in_$i236, in_$i221, in_$i222, in_$i237;
    goto $bb181, exit;

  $bb181:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3716;

  $bb189:
    assume out_$i236 == 1;
    assume {:verifier.code 0} true;
    out_$i221, out_$i222 := out_$i234, out_$i235;
    goto $bb189_dummy;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    out_$i237 := out_$i234;
    assume true;
    goto $bb189;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    out_$i236 := $slt.i32(out_$i235, in_$i20);
    goto corral_source_split_3736;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    out_$i235 := $add.i32(out_$i222, 1);
    call {:si_unique_call 805} {:cexpr "temp"} boogie_si_record_i32(out_$i235);
    goto corral_source_split_3735;

  $bb188:
    assume {:verifier.code 0} true;
    goto corral_source_split_3734;

  $bb187:
    assume !(out_$i232 == 1);
    assume {:verifier.code 0} true;
    out_$i234 := out_$i221;
    goto $bb188;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    out_$i234 := out_$i233;
    goto $bb188;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    out_$i233 := $add.i32(out_$i221, 1);
    call {:si_unique_call 804} {:cexpr "devices"} boogie_si_record_i32(out_$i233);
    goto corral_source_split_3732;

  $bb186:
    assume out_$i232 == 1;
    goto corral_source_split_3731;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb186, $bb187;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    out_$i232 := $ne.i32(out_$i231, 0);
    goto corral_source_split_3729;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    out_$i231 := $and.i32(out_$i230, 1);
    goto corral_source_split_3728;

  $bb185:
    assume {:verifier.code 0} true;
    out_$i230 := $load.i32($M.0, in_$p11);
    goto corral_source_split_3727;

  $bb184:
    assume !(out_$i228 == 1);
    assume {:verifier.code 0} true;
    goto $bb185;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    out_$i229 := out_$i227;
    assume true;
    goto $bb184;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    out_$i228 := $ne.i32(out_$i227, 0);
    goto corral_source_split_3723;

  SeqInstr_621:
    call {:si_unique_call 803} {:cexpr "retval"} boogie_si_record_i32(out_$i227);
    goto corral_source_split_3722;

  SeqInstr_620:
    assume assertsPassed;
    goto SeqInstr_621;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} out_$i227 := ftdi_elan_read_pcimem(in_$p0, out_$i226, 0, in_$p11);
    goto SeqInstr_620;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    out_$i226 := $mul.i32(out_$i225, 4);
    goto corral_source_split_3721;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    out_$i225 := $trunc.i64.i32(out_$i224);
    goto corral_source_split_3720;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    out_$i224 := $add.i64(out_$i223, 21);
    goto corral_source_split_3719;

  $bb182:
    assume {:verifier.code 0} true;
    out_$i223 := $sext.i32.i64(out_$i222);
    goto corral_source_split_3718;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb189_dummy:
    call {:si_unique_call 1} out_$i223, out_$i224, out_$i225, out_$i226, out_$i227, out_$i228, out_$i229, out_$i230, out_$i231, out_$i232, out_$i233, out_$i234, out_$i235, out_$i236, out_$i221, out_$i222, out_$i237 := ftdi_elan_check_controller_loop_$bb181(in_$p0, in_$p11, in_$i20, out_$i223, out_$i224, out_$i225, out_$i226, out_$i227, out_$i228, out_$i229, out_$i230, out_$i231, out_$i232, out_$i233, out_$i234, out_$i235, out_$i236, out_$i221, out_$i222, out_$i237);
    return;

  exit:
    return;
}



procedure ftdi_elan_check_controller_loop_$bb181(in_$p0: ref, in_$p11: ref, in_$i20: i32, in_$i223: i64, in_$i224: i64, in_$i225: i32, in_$i226: i32, in_$i227: i32, in_$i228: i1, in_$i229: i32, in_$i230: i32, in_$i231: i32, in_$i232: i1, in_$i233: i32, in_$i234: i32, in_$i235: i32, in_$i236: i1, in_$i221: i32, in_$i222: i32, in_$i237: i32) returns (out_$i223: i64, out_$i224: i64, out_$i225: i32, out_$i226: i32, out_$i227: i32, out_$i228: i1, out_$i229: i32, out_$i230: i32, out_$i231: i32, out_$i232: i1, out_$i233: i32, out_$i234: i32, out_$i235: i32, out_$i236: i1, out_$i221: i32, out_$i222: i32, out_$i237: i32);
  modifies $M.0, $M.4, $CurrAddr, assertsPassed, $M.7, $M.6, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12;



implementation ftdi_elan_check_controller_loop_$bb173(in_$i217: i64, in_$i218: i1, in_$i216: i64) returns (out_$i217: i64, out_$i218: i1, out_$i216: i64)
{

  entry:
    out_$i217, out_$i218, out_$i216 := in_$i217, in_$i218, in_$i216;
    goto $bb173, exit;

  $bb173:
    assume {:verifier.code 0} true;
    goto corral_source_split_3704;

  $bb175:
    assume out_$i218 == 1;
    assume {:verifier.code 0} true;
    out_$i216 := out_$i217;
    goto $bb175_dummy;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb175;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    out_$i218 := $ne.i64(out_$i216, 0);
    goto corral_source_split_3708;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    out_$i217 := $sub.i64(out_$i216, 1);
    call {:si_unique_call 801} {:cexpr "__ms"} boogie_si_record_i64(out_$i217);
    goto corral_source_split_3707;

  $bb174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} __const_udelay(4295000);
    goto corral_source_split_3706;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb175_dummy:
    call {:si_unique_call 1} out_$i217, out_$i218, out_$i216 := ftdi_elan_check_controller_loop_$bb173(out_$i217, out_$i218, out_$i216);
    return;

  exit:
    return;
}



procedure ftdi_elan_check_controller_loop_$bb173(in_$i217: i64, in_$i218: i1, in_$i216: i64) returns (out_$i217: i64, out_$i218: i1, out_$i216: i64);



implementation ftdi_elan_check_controller_loop_$bb69(in_$p0: ref, in_$p5: ref, in_$i87: i32, in_$i85: i32, in_$i88: i32, in_$i89: i32, in_$i90: i1, in_$i92: i32, in_$i93: i1, in_$i97: i32, in_$i98: i1, in_$i91: i32) returns (out_$i87: i32, out_$i85: i32, out_$i88: i32, out_$i89: i32, out_$i90: i1, out_$i92: i32, out_$i93: i1, out_$i97: i32, out_$i98: i1, out_$i91: i32)
{

  entry:
    out_$i87, out_$i85, out_$i88, out_$i89, out_$i90, out_$i92, out_$i93, out_$i97, out_$i98, out_$i91 := in_$i87, in_$i85, in_$i88, in_$i89, in_$i90, in_$i92, in_$i93, in_$i97, in_$i98, in_$i91;
    goto $bb69, exit;

  $bb69:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb77:
    assume !(out_$i98 == 1);
    assume {:verifier.code 0} true;
    out_$i85 := out_$i92;
    goto $bb77_dummy;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    out_$i87 := out_$i97;
    assume true;
    goto $bb77;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    out_$i98 := $ne.i32(out_$i97, 0);
    goto corral_source_split_3503;

  SeqInstr_546:
    call {:si_unique_call 747} {:cexpr "retval"} boogie_si_record_i32(out_$i97);
    goto corral_source_split_3502;

  SeqInstr_545:
    assume assertsPassed;
    goto SeqInstr_546;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} out_$i97 := ftdi_elan_read_pcimem(in_$p0, 8, 0, in_$p5);
    goto SeqInstr_545;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} msleep(5);
    goto corral_source_split_3501;

  $bb76:
    assume !(out_$i93 == 1);
    goto corral_source_split_3500;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    out_$i93 := $eq.i32(out_$i92, 0);
    goto corral_source_split_3492;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    out_$i92 := $sub.i32(out_$i85, 1);
    call {:si_unique_call 743} {:cexpr "reset_timeout"} boogie_si_record_i32(out_$i92);
    goto corral_source_split_3491;

  $bb73:
    assume out_$i90 == 1;
    goto corral_source_split_3490;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    out_$i91 := out_$i85;
    assume true;
    goto $bb73;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    out_$i90 := $ne.i32(out_$i89, 0);
    goto corral_source_split_3488;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    out_$i89 := $and.i32(out_$i88, 1);
    goto corral_source_split_3487;

  $bb72:
    assume {:verifier.code 0} true;
    out_$i88 := $load.i32($M.0, in_$p5);
    goto corral_source_split_3486;

  $bb77_dummy:
    call {:si_unique_call 1} out_$i87, out_$i85, out_$i88, out_$i89, out_$i90, out_$i92, out_$i93, out_$i97, out_$i98, out_$i91 := ftdi_elan_check_controller_loop_$bb69(in_$p0, in_$p5, out_$i87, out_$i85, out_$i88, out_$i89, out_$i90, out_$i92, out_$i93, out_$i97, out_$i98, out_$i91);
    return;

  exit:
    return;
}



procedure ftdi_elan_check_controller_loop_$bb69(in_$p0: ref, in_$p5: ref, in_$i87: i32, in_$i85: i32, in_$i88: i32, in_$i89: i32, in_$i90: i1, in_$i92: i32, in_$i93: i1, in_$i97: i32, in_$i98: i1, in_$i91: i32) returns (out_$i87: i32, out_$i85: i32, out_$i88: i32, out_$i89: i32, out_$i90: i1, out_$i92: i32, out_$i93: i1, out_$i97: i32, out_$i98: i1, out_$i91: i32);
  modifies $M.0, $M.4, $CurrAddr, assertsPassed, $M.7, $M.6, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12;



implementation ftdi_elan_check_controller_loop_$bb61(in_$p0: ref, in_$p2: ref, in_$p3: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$i78: i32, in_$i76: i32, in_$i77: i32, in_$i79: i32, in_$i80: i1, in_$i81: i32, in_$i82: i32, in_$i83: i1, in_$i84: i32, in_$i87: i32, in_$i85: i32, in_$i88: i32, in_$i89: i32, in_$i90: i1, in_$i92: i32, in_$i93: i1, in_$i97: i32, in_$i98: i1, in_$i91: i32, in_$i99: i32, in_$i100: i1, in_$i101: i32, in_$i102: i32, in_$i103: i1, in_$i104: i32, in_$i105: i32, in_$i106: i1, in_$i107: i32, in_$i108: i32, in_$i109: i1, in_$i110: i32, in_$i111: i32, in_$i112: i1, in_$i113: i32, in_$i114: i32, in_$i115: i1, in_$i116: i32, in_$i117: i32, in_$i118: i1, in_$i119: i32, in_$i120: i32, in_$i121: i32, in_$i122: i32, in_$i123: i32, in_$i124: i32, in_$i125: i32, in_$i126: i1, in_$i127: i32, in_$i128: i32, in_$i129: i32, in_$i130: i32, in_$i131: i32, in_$i132: i32, in_$i133: i1, in_$i134: i32, in_$i135: i32, in_$i136: i1, in_$i137: i32, in_$i138: i32, in_$i139: i1, in_$i140: i32, in_$i141: i32, in_$i142: i32, in_$i143: i1, in_$i144: i32, in_$i145: i1, in_$i147: i32, in_$i148: i1, in_$i150: i32, in_$i151: i32, in_$i152: i1, in_$i149: i32, in_$i146: i32) returns (out_$i78: i32, out_$i76: i32, out_$i77: i32, out_$i79: i32, out_$i80: i1, out_$i81: i32, out_$i82: i32, out_$i83: i1, out_$i84: i32, out_$i87: i32, out_$i85: i32, out_$i88: i32, out_$i89: i32, out_$i90: i1, out_$i92: i32, out_$i93: i1, out_$i97: i32, out_$i98: i1, out_$i91: i32, out_$i99: i32, out_$i100: i1, out_$i101: i32, out_$i102: i32, out_$i103: i1, out_$i104: i32, out_$i105: i32, out_$i106: i1, out_$i107: i32, out_$i108: i32, out_$i109: i1, out_$i110: i32, out_$i111: i32, out_$i112: i1, out_$i113: i32, out_$i114: i32, out_$i115: i1, out_$i116: i32, out_$i117: i32, out_$i118: i1, out_$i119: i32, out_$i120: i32, out_$i121: i32, out_$i122: i32, out_$i123: i32, out_$i124: i32, out_$i125: i32, out_$i126: i1, out_$i127: i32, out_$i128: i32, out_$i129: i32, out_$i130: i32, out_$i131: i32, out_$i132: i32, out_$i133: i1, out_$i134: i32, out_$i135: i32, out_$i136: i1, out_$i137: i32, out_$i138: i32, out_$i139: i1, out_$i140: i32, out_$i141: i32, out_$i142: i32, out_$i143: i1, out_$i144: i32, out_$i145: i1, out_$i147: i32, out_$i148: i1, out_$i150: i32, out_$i151: i32, out_$i152: i1, out_$i149: i32, out_$i146: i32)
{

  entry:
    out_$i78, out_$i76, out_$i77, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i87, out_$i85, out_$i88, out_$i89, out_$i90, out_$i92, out_$i93, out_$i97, out_$i98, out_$i91, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i147, out_$i148, out_$i150, out_$i151, out_$i152, out_$i149, out_$i146 := in_$i78, in_$i76, in_$i77, in_$i79, in_$i80, in_$i81, in_$i82, in_$i83, in_$i84, in_$i87, in_$i85, in_$i88, in_$i89, in_$i90, in_$i92, in_$i93, in_$i97, in_$i98, in_$i91, in_$i99, in_$i100, in_$i101, in_$i102, in_$i103, in_$i104, in_$i105, in_$i106, in_$i107, in_$i108, in_$i109, in_$i110, in_$i111, in_$i112, in_$i113, in_$i114, in_$i115, in_$i116, in_$i117, in_$i118, in_$i119, in_$i120, in_$i121, in_$i122, in_$i123, in_$i124, in_$i125, in_$i126, in_$i127, in_$i128, in_$i129, in_$i130, in_$i131, in_$i132, in_$i133, in_$i134, in_$i135, in_$i136, in_$i137, in_$i138, in_$i139, in_$i140, in_$i141, in_$i142, in_$i143, in_$i144, in_$i145, in_$i147, in_$i148, in_$i150, in_$i151, in_$i152, in_$i149, in_$i146;
    goto $bb61, exit;

  $bb61:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb119:
    assume !(out_$i152 == 1);
    assume {:verifier.code 0} true;
    out_$i76, out_$i77 := out_$i150, out_$i91;
    goto $bb119_dummy;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    out_$i78 := out_$i151;
    assume true;
    goto $bb119;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    out_$i152 := $ne.i32(out_$i151, 0);
    goto corral_source_split_3583;

  SeqInstr_579:
    call {:si_unique_call 770} {:cexpr "retval"} boogie_si_record_i32(out_$i151);
    goto corral_source_split_3582;

  SeqInstr_578:
    assume assertsPassed;
    goto SeqInstr_579;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} out_$i151 := ftdi_elan_read_pcimem(in_$p0, 8, 0, in_$p5);
    goto SeqInstr_578;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    out_$i150 := $or.i32(out_$i76, 4);
    call {:si_unique_call 768} {:cexpr "quirk"} boogie_si_record_i32(out_$i150);
    goto corral_source_split_3581;

  $bb117:
    assume out_$i148 == 1;
    goto corral_source_split_3580;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    out_$i149 := out_$i76;
    assume true;
    goto $bb117;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    out_$i148 := $eq.i32(out_$i147, 0);
    goto corral_source_split_3574;

  $bb113:
    assume {:verifier.code 0} true;
    out_$i147 := $and.i32(out_$i76, 4);
    goto corral_source_split_3573;

  $bb115:
    assume {:verifier.code 0} true;
    assume out_$i145 == 1;
    goto $bb113;

  $bb112:
    assume {:verifier.code 0} true;
    assume out_$i143 == 1;
    goto $bb113;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb114;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    out_$i143 := $eq.i32(out_$i142, 0);
    goto corral_source_split_3571;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    out_$i142 := $and.i32(out_$i141, 1073676288);
    goto corral_source_split_3570;

  $bb111:
    assume {:verifier.code 0} true;
    out_$i141 := $load.i32($M.0, in_$p6);
    goto corral_source_split_3569;

  $bb110:
    assume !(out_$i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb111;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    out_$i140 := out_$i138;
    assume true;
    goto $bb110;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    out_$i139 := $ne.i32(out_$i138, 0);
    goto corral_source_split_3565;

  SeqInstr_576:
    call {:si_unique_call 767} {:cexpr "retval"} boogie_si_record_i32(out_$i138);
    goto corral_source_split_3564;

  SeqInstr_575:
    assume assertsPassed;
    goto SeqInstr_576;

  $bb108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} out_$i138 := ftdi_elan_read_pcimem(in_$p0, 64, 0, in_$p8);
    goto SeqInstr_575;

  $bb107:
    assume !(out_$i136 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    out_$i137 := out_$i135;
    assume true;
    goto $bb107;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    out_$i136 := $ne.i32(out_$i135, 0);
    goto corral_source_split_3560;

  SeqInstr_573:
    call {:si_unique_call 765} {:cexpr "retval"} boogie_si_record_i32(out_$i135);
    goto corral_source_split_3559;

  SeqInstr_572:
    assume assertsPassed;
    goto SeqInstr_573;

  $bb105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} out_$i135 := ftdi_elan_read_pcimem(in_$p0, 52, 0, in_$p6);
    goto SeqInstr_572;

  $bb104:
    assume !(out_$i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    out_$i134 := out_$i132;
    assume true;
    goto $bb104;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    out_$i133 := $ne.i32(out_$i132, 0);
    goto corral_source_split_3555;

  SeqInstr_570:
    call {:si_unique_call 763} {:cexpr "retval"} boogie_si_record_i32(out_$i132);
    goto corral_source_split_3554;

  SeqInstr_569:
    assume assertsPassed;
    goto SeqInstr_570;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} out_$i132 := ftdi_elan_write_pcimem(in_$p0, 64, 0, out_$i131);
    goto SeqInstr_569;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    out_$i131 := $and.i32(out_$i130, 16383);
    goto corral_source_split_3553;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    out_$i130 := $udiv.i32(out_$i129, 10);
    goto corral_source_split_3552;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    out_$i129 := $mul.i32(out_$i128, 9);
    goto corral_source_split_3551;

  $bb102:
    assume {:verifier.code 0} true;
    out_$i128 := $load.i32($M.0, in_$p7);
    goto corral_source_split_3550;

  $bb101:
    assume !(out_$i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    out_$i127 := out_$i125;
    assume true;
    goto $bb101;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    out_$i126 := $ne.i32(out_$i125, 0);
    goto corral_source_split_3546;

  SeqInstr_567:
    call {:si_unique_call 761} {:cexpr "retval"} boogie_si_record_i32(out_$i125);
    goto corral_source_split_3545;

  SeqInstr_566:
    assume assertsPassed;
    goto SeqInstr_567;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} out_$i125 := ftdi_elan_write_pcimem(in_$p0, 52, 0, out_$i124);
    goto SeqInstr_566;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    out_$i124 := $or.i32(out_$i122, out_$i123);
    goto corral_source_split_3544;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    out_$i123 := $load.i32($M.0, in_$p7);
    goto corral_source_split_3543;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    out_$i122 := $and.i32(out_$i121, $sub.i32(0, 2147483648));
    goto corral_source_split_3542;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    out_$i121 := $xor.i32(out_$i120, $sub.i32(0, 1));
    goto corral_source_split_3541;

  $bb99:
    assume {:verifier.code 0} true;
    out_$i120 := $load.i32($M.0, in_$p6);
    goto corral_source_split_3540;

  $bb98:
    assume !(out_$i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    out_$i119 := out_$i117;
    assume true;
    goto $bb98;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    out_$i118 := $ne.i32(out_$i117, 0);
    goto corral_source_split_3536;

  SeqInstr_564:
    call {:si_unique_call 759} {:cexpr "retval"} boogie_si_record_i32(out_$i117);
    goto corral_source_split_3535;

  SeqInstr_563:
    assume assertsPassed;
    goto SeqInstr_564;

  $bb96:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} out_$i117 := ftdi_elan_read_pcimem(in_$p0, 52, 0, in_$p6);
    goto SeqInstr_563;

  $bb95:
    assume !(out_$i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    out_$i116 := out_$i114;
    assume true;
    goto $bb95;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    out_$i115 := $ne.i32(out_$i114, 0);
    goto corral_source_split_3531;

  SeqInstr_561:
    call {:si_unique_call 757} {:cexpr "retval"} boogie_si_record_i32(out_$i114);
    goto corral_source_split_3530;

  SeqInstr_560:
    assume assertsPassed;
    goto SeqInstr_561;

  $bb93:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} out_$i114 := ftdi_elan_write_pcimem(in_$p0, 24, 0, 0);
    goto SeqInstr_560;

  $bb92:
    assume !(out_$i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    out_$i113 := out_$i111;
    assume true;
    goto $bb92;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    out_$i112 := $ne.i32(out_$i111, 0);
    goto corral_source_split_3526;

  SeqInstr_558:
    call {:si_unique_call 755} {:cexpr "retval"} boogie_si_record_i32(out_$i111);
    goto corral_source_split_3525;

  SeqInstr_557:
    assume assertsPassed;
    goto SeqInstr_558;

  $bb90:
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} out_$i111 := ftdi_elan_write_pcimem(in_$p0, 40, 0, 285212672);
    goto SeqInstr_557;

  $bb89:
    assume !(out_$i109 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    out_$i110 := out_$i108;
    assume true;
    goto $bb89;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    out_$i109 := $ne.i32(out_$i108, 0);
    goto corral_source_split_3521;

  SeqInstr_555:
    call {:si_unique_call 753} {:cexpr "retval"} boogie_si_record_i32(out_$i108);
    goto corral_source_split_3520;

  SeqInstr_554:
    assume assertsPassed;
    goto SeqInstr_555;

  $bb87:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} out_$i108 := ftdi_elan_write_pcimem(in_$p0, 32, 0, 0);
    goto SeqInstr_554;

  $bb80:
    assume !(out_$i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb86:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb85:
    assume !(out_$i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    out_$i107 := out_$i105;
    assume true;
    goto $bb85;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    out_$i106 := $ne.i32(out_$i105, 0);
    goto corral_source_split_3516;

  SeqInstr_552:
    call {:si_unique_call 751} {:cexpr "retval"} boogie_si_record_i32(out_$i105);
    goto corral_source_split_3515;

  SeqInstr_551:
    assume assertsPassed;
    goto SeqInstr_552;

  $bb83:
    assume {:verifier.code 0} true;
    call {:si_unique_call 750} out_$i105 := ftdi_elan_read_pcimem(in_$p0, 4, 0, in_$p3);
    goto SeqInstr_551;

  $bb82:
    assume !(out_$i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    out_$i104 := out_$i102;
    assume true;
    goto $bb82;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    out_$i103 := $ne.i32(out_$i102, 0);
    goto corral_source_split_3511;

  SeqInstr_549:
    call {:si_unique_call 749} {:cexpr "retval"} boogie_si_record_i32(out_$i102);
    goto corral_source_split_3510;

  SeqInstr_548:
    assume assertsPassed;
    goto SeqInstr_549;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} out_$i102 := ftdi_elan_write_pcimem(in_$p0, 4, 0, out_$i101);
    goto SeqInstr_548;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    out_$i101 := $load.i32($M.0, in_$p2);
    goto corral_source_split_3509;

  $bb79:
    assume out_$i100 == 1;
    goto corral_source_split_3508;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    out_$i100 := $ne.i32(out_$i99, 0);
    goto corral_source_split_3506;

  $bb78:
    assume {:verifier.code 0} true;
    out_$i99 := $and.i32(out_$i76, 4);
    goto corral_source_split_3505;

  $bb74:
    assume !(out_$i90 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb78;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    out_$i91 := out_$i85;
    assume true;
    goto $bb73, $bb74;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    out_$i90 := $ne.i32(out_$i89, 0);
    goto corral_source_split_3488;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    out_$i89 := $and.i32(out_$i88, 1);
    goto corral_source_split_3487;

  $bb72:
    assume {:verifier.code 0} true;
    out_$i88 := $load.i32($M.0, in_$p5);
    goto corral_source_split_3486;

  $bb69:
    call out_$i87, out_$i85, out_$i88, out_$i89, out_$i90, out_$i92, out_$i93, out_$i97, out_$i98, out_$i91 := ftdi_elan_check_controller_loop_$bb69(in_$p0, in_$p5, out_$i87, out_$i85, out_$i88, out_$i89, out_$i90, out_$i92, out_$i93, out_$i97, out_$i98, out_$i91);
    goto $bb69_last;

  $bb69_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb72;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    out_$i85 := out_$i77;
    goto $bb69;

  $bb77:
    assume !(out_$i98 == 1);
    assume {:verifier.code 0} true;
    out_$i85 := out_$i92;
    assume false;
    return;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    out_$i87 := out_$i97;
    assume true;
    goto $bb77;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    out_$i98 := $ne.i32(out_$i97, 0);
    goto corral_source_split_3503;

  SeqInstr_546:
    call {:si_unique_call 747} {:cexpr "retval"} boogie_si_record_i32(out_$i97);
    goto corral_source_split_3502;

  SeqInstr_545:
    assume assertsPassed;
    goto SeqInstr_546;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} out_$i97 := ftdi_elan_read_pcimem(in_$p0, 8, 0, in_$p5);
    goto SeqInstr_545;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} msleep(5);
    goto corral_source_split_3501;

  $bb76:
    assume !(out_$i93 == 1);
    goto corral_source_split_3500;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    out_$i93 := $eq.i32(out_$i92, 0);
    goto corral_source_split_3492;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    out_$i92 := $sub.i32(out_$i85, 1);
    call {:si_unique_call 743} {:cexpr "reset_timeout"} boogie_si_record_i32(out_$i92);
    goto corral_source_split_3491;

  $bb73:
    assume out_$i90 == 1;
    goto corral_source_split_3490;

  $bb68:
    assume !(out_$i83 == 1);
    goto corral_source_split_3480;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    out_$i84 := out_$i82;
    assume true;
    goto $bb68;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    out_$i83 := $ne.i32(out_$i82, 0);
    goto corral_source_split_3476;

  SeqInstr_543:
    call {:si_unique_call 742} {:cexpr "retval"} boogie_si_record_i32(out_$i82);
    goto corral_source_split_3475;

  SeqInstr_542:
    assume assertsPassed;
    goto SeqInstr_543;

  $bb66:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} out_$i82 := ftdi_elan_read_pcimem(in_$p0, 8, 0, in_$p5);
    goto SeqInstr_542;

  $bb65:
    assume !(out_$i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    out_$i81 := out_$i79;
    assume true;
    goto $bb65;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    out_$i80 := $ne.i32(out_$i79, 0);
    goto corral_source_split_3471;

  SeqInstr_540:
    call {:si_unique_call 740} {:cexpr "retval"} boogie_si_record_i32(out_$i79);
    goto corral_source_split_3470;

  SeqInstr_539:
    assume assertsPassed;
    goto SeqInstr_540;

  $bb63:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} out_$i79 := ftdi_elan_write_pcimem(in_$p0, 8, 0, 1);
    goto SeqInstr_539;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    out_$i146 := out_$i76;
    assume true;
    goto $bb115;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    out_$i145 := $eq.i32(out_$i144, 0);
    goto corral_source_split_3578;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    out_$i144 := $load.i32($M.0, in_$p8);
    goto corral_source_split_3577;

  $bb114:
    assume !(out_$i143 == 1);
    goto corral_source_split_3576;

  $bb119_dummy:
    call {:si_unique_call 1} out_$i78, out_$i76, out_$i77, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i87, out_$i85, out_$i88, out_$i89, out_$i90, out_$i92, out_$i93, out_$i97, out_$i98, out_$i91, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i147, out_$i148, out_$i150, out_$i151, out_$i152, out_$i149, out_$i146 := ftdi_elan_check_controller_loop_$bb61(in_$p0, in_$p2, in_$p3, in_$p5, in_$p6, in_$p7, in_$p8, out_$i78, out_$i76, out_$i77, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i87, out_$i85, out_$i88, out_$i89, out_$i90, out_$i92, out_$i93, out_$i97, out_$i98, out_$i91, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i147, out_$i148, out_$i150, out_$i151, out_$i152, out_$i149, out_$i146);
    return;

  exit:
    return;
}



procedure ftdi_elan_check_controller_loop_$bb61(in_$p0: ref, in_$p2: ref, in_$p3: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$i78: i32, in_$i76: i32, in_$i77: i32, in_$i79: i32, in_$i80: i1, in_$i81: i32, in_$i82: i32, in_$i83: i1, in_$i84: i32, in_$i87: i32, in_$i85: i32, in_$i88: i32, in_$i89: i32, in_$i90: i1, in_$i92: i32, in_$i93: i1, in_$i97: i32, in_$i98: i1, in_$i91: i32, in_$i99: i32, in_$i100: i1, in_$i101: i32, in_$i102: i32, in_$i103: i1, in_$i104: i32, in_$i105: i32, in_$i106: i1, in_$i107: i32, in_$i108: i32, in_$i109: i1, in_$i110: i32, in_$i111: i32, in_$i112: i1, in_$i113: i32, in_$i114: i32, in_$i115: i1, in_$i116: i32, in_$i117: i32, in_$i118: i1, in_$i119: i32, in_$i120: i32, in_$i121: i32, in_$i122: i32, in_$i123: i32, in_$i124: i32, in_$i125: i32, in_$i126: i1, in_$i127: i32, in_$i128: i32, in_$i129: i32, in_$i130: i32, in_$i131: i32, in_$i132: i32, in_$i133: i1, in_$i134: i32, in_$i135: i32, in_$i136: i1, in_$i137: i32, in_$i138: i32, in_$i139: i1, in_$i140: i32, in_$i141: i32, in_$i142: i32, in_$i143: i1, in_$i144: i32, in_$i145: i1, in_$i147: i32, in_$i148: i1, in_$i150: i32, in_$i151: i32, in_$i152: i1, in_$i149: i32, in_$i146: i32) returns (out_$i78: i32, out_$i76: i32, out_$i77: i32, out_$i79: i32, out_$i80: i1, out_$i81: i32, out_$i82: i32, out_$i83: i1, out_$i84: i32, out_$i87: i32, out_$i85: i32, out_$i88: i32, out_$i89: i32, out_$i90: i1, out_$i92: i32, out_$i93: i1, out_$i97: i32, out_$i98: i1, out_$i91: i32, out_$i99: i32, out_$i100: i1, out_$i101: i32, out_$i102: i32, out_$i103: i1, out_$i104: i32, out_$i105: i32, out_$i106: i1, out_$i107: i32, out_$i108: i32, out_$i109: i1, out_$i110: i32, out_$i111: i32, out_$i112: i1, out_$i113: i32, out_$i114: i32, out_$i115: i1, out_$i116: i32, out_$i117: i32, out_$i118: i1, out_$i119: i32, out_$i120: i32, out_$i121: i32, out_$i122: i32, out_$i123: i32, out_$i124: i32, out_$i125: i32, out_$i126: i1, out_$i127: i32, out_$i128: i32, out_$i129: i32, out_$i130: i32, out_$i131: i32, out_$i132: i32, out_$i133: i1, out_$i134: i32, out_$i135: i32, out_$i136: i1, out_$i137: i32, out_$i138: i32, out_$i139: i1, out_$i140: i32, out_$i141: i32, out_$i142: i32, out_$i143: i1, out_$i144: i32, out_$i145: i1, out_$i147: i32, out_$i148: i1, out_$i150: i32, out_$i151: i32, out_$i152: i1, out_$i149: i32, out_$i146: i32);
  modifies $M.0, $M.4, $CurrAddr, assertsPassed, $M.7, $M.6, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12;



implementation ftdi_elan_check_controller_loop_$bb46(in_$p0: ref, in_$i20: i32, in_$i62: i64, in_$i63: i64, in_$i64: i32, in_$i65: i32, in_$i66: i32, in_$i67: i1, in_$i68: i32, in_$i69: i32, in_$i70: i1, in_$i61: i32) returns (out_$i62: i64, out_$i63: i64, out_$i64: i32, out_$i65: i32, out_$i66: i32, out_$i67: i1, out_$i68: i32, out_$i69: i32, out_$i70: i1, out_$i61: i32)
{

  entry:
    out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i61 := in_$i62, in_$i63, in_$i64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i61;
    goto $bb46, exit;

  $bb46:
    assume {:verifier.code 0} true;
    goto corral_source_split_3440;

  $bb51:
    assume out_$i70 == 1;
    assume {:verifier.code 0} true;
    out_$i61 := out_$i69;
    goto $bb51_dummy;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    out_$i70 := $slt.i32(out_$i69, in_$i20);
    goto corral_source_split_3452;

  $bb50:
    assume {:verifier.code 0} true;
    out_$i69 := $add.i32(out_$i61, 1);
    call {:si_unique_call 734} {:cexpr "temp"} boogie_si_record_i32(out_$i69);
    goto corral_source_split_3451;

  $bb49:
    assume !(out_$i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    out_$i68 := out_$i66;
    assume true;
    goto $bb49;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    out_$i67 := $ne.i32(out_$i66, 0);
    goto corral_source_split_3447;

  SeqInstr_531:
    call {:si_unique_call 733} {:cexpr "retval"} boogie_si_record_i32(out_$i66);
    goto corral_source_split_3446;

  SeqInstr_530:
    assume assertsPassed;
    goto SeqInstr_531;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} out_$i66 := ftdi_elan_write_pcimem(in_$p0, out_$i65, 0, 512);
    goto SeqInstr_530;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    out_$i65 := $mul.i32(out_$i64, 4);
    goto corral_source_split_3445;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    out_$i64 := $trunc.i64.i32(out_$i63);
    goto corral_source_split_3444;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    out_$i63 := $add.i64(out_$i62, 21);
    goto corral_source_split_3443;

  $bb47:
    assume {:verifier.code 0} true;
    out_$i62 := $sext.i32.i64(out_$i61);
    goto corral_source_split_3442;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb51_dummy:
    call {:si_unique_call 1} out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i61 := ftdi_elan_check_controller_loop_$bb46(in_$p0, in_$i20, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i61);
    return;

  exit:
    return;
}



procedure ftdi_elan_check_controller_loop_$bb46(in_$p0: ref, in_$i20: i32, in_$i62: i64, in_$i63: i64, in_$i64: i32, in_$i65: i32, in_$i66: i32, in_$i67: i1, in_$i68: i32, in_$i69: i32, in_$i70: i1, in_$i61: i32) returns (out_$i62: i64, out_$i63: i64, out_$i64: i32, out_$i65: i32, out_$i66: i32, out_$i67: i1, out_$i68: i32, out_$i69: i32, out_$i70: i1, out_$i61: i32);
  modifies $M.0, $M.4, assertsPassed, $M.7, $M.6, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12;



implementation ftdi_elan_flush_input_fifo_loop_$bb10(in_$p1: ref, in_$p38: ref, in_$i39: i8, in_$i40: i1, in_$i41: i32, in_$i42: i32, in_$i43: i32, in_$i44: i64, in_$p45: ref, in_$i47: i1, in_$i49: i32, in_$i50: i64, in_$p51: ref, in_$p48: ref, in_$p46: ref, in_$i52: i32, in_$i53: i32, in_$i54: i32, in_$i55: i32, in_$i56: i1, in_$i35: i32, in_$p36: ref, in_$p37: ref) returns (out_$p38: ref, out_$i39: i8, out_$i40: i1, out_$i41: i32, out_$i42: i32, out_$i43: i32, out_$i44: i64, out_$p45: ref, out_$i47: i1, out_$i49: i32, out_$i50: i64, out_$p51: ref, out_$p48: ref, out_$p46: ref, out_$i52: i32, out_$i53: i32, out_$i54: i32, out_$i55: i32, out_$i56: i1, out_$i35: i32, out_$p36: ref, out_$p37: ref)
{

  entry:
    out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i47, out_$i49, out_$i50, out_$p51, out_$p48, out_$p46, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i35, out_$p36, out_$p37 := in_$p38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$p45, in_$i47, in_$i49, in_$i50, in_$p51, in_$p48, in_$p46, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i35, in_$p36, in_$p37;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3857;

  $bb18:
    assume out_$i56 == 1;
    assume {:verifier.code 0} true;
    out_$i35, out_$p36, out_$p37 := out_$i52, out_$p38, out_$p46;
    goto $bb18_dummy;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    out_$i56 := $sgt.i32(out_$i53, 0);
    goto corral_source_split_3879;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    $M.16 := $store.i32($M.16, in_$p1, out_$i55);
    goto corral_source_split_3878;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    out_$i55 := $sub.i32(out_$i54, 1);
    goto corral_source_split_3877;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    out_$i54 := $load.i32($M.16, in_$p1);
    goto corral_source_split_3876;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    out_$i53 := $load.i32($M.16, in_$p1);
    call {:si_unique_call 842} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i53);
    goto corral_source_split_3875;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    out_$i52 := $add.i32(out_$i35, 1);
    call {:si_unique_call 841} {:cexpr "bytes_read"} boogie_si_record_i32(out_$i52);
    goto corral_source_split_3874;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_3873;

  $bb17:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$p46 := out_$p48;
    goto $bb14;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    out_$p46 := out_$p45;
    goto $bb14;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref(out_$p37, $mul.ref(out_$i44, 1));
    goto corral_source_split_3868;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    out_$i44 := $sext.i32.i64(out_$i43);
    goto corral_source_split_3867;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 839} out_$i43 := sprintf.ref.ref.i32(out_$p37, .str.4, out_$i42);
    call {:si_unique_call 840} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i43);
    goto corral_source_split_3866;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    out_$i42 := $and.i32(out_$i41, 255);
    goto corral_source_split_3865;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    out_$i41 := $sext.i8.i32(out_$i39);
    goto corral_source_split_3864;

  $bb12:
    assume out_$i40 == 1;
    goto corral_source_split_3863;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    out_$i40 := $slt.i32(out_$i35, 31);
    goto corral_source_split_3861;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i8($M.0, out_$p36);
    call {:si_unique_call 838} {:cexpr "c"} boogie_si_record_i8(out_$i39);
    goto corral_source_split_3860;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref(out_$p36, $mul.ref(1, 1));
    goto corral_source_split_3859;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref(out_$p37, $mul.ref(out_$i50, 1));
    assume {:verifier.code 0} true;
    out_$p48 := out_$p51;
    goto $bb17;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    out_$p48 := out_$p37;
    goto $bb17;

  $bb15:
    assume out_$i47 == 1;
    goto corral_source_split_3881;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    out_$i47 := $sgt.i32(out_$i35, 31);
    goto corral_source_split_3871;

  $bb13:
    assume !(out_$i40 == 1);
    goto corral_source_split_3870;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    out_$i50 := $sext.i32.i64(out_$i49);
    goto corral_source_split_3885;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} out_$i49 := sprintf.ref.ref(out_$p37, .str.5);
    call {:si_unique_call 844} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i49);
    goto corral_source_split_3884;

  $bb16:
    assume !(out_$i47 == 1);
    goto corral_source_split_3883;

  $bb18_dummy:
    call {:si_unique_call 1} out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i47, out_$i49, out_$i50, out_$p51, out_$p48, out_$p46, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i35, out_$p36, out_$p37 := ftdi_elan_flush_input_fifo_loop_$bb10(in_$p1, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i47, out_$i49, out_$i50, out_$p51, out_$p48, out_$p46, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i35, out_$p36, out_$p37);
    return;

  exit:
    return;
}



procedure ftdi_elan_flush_input_fifo_loop_$bb10(in_$p1: ref, in_$p38: ref, in_$i39: i8, in_$i40: i1, in_$i41: i32, in_$i42: i32, in_$i43: i32, in_$i44: i64, in_$p45: ref, in_$i47: i1, in_$i49: i32, in_$i50: i64, in_$p51: ref, in_$p48: ref, in_$p46: ref, in_$i52: i32, in_$i53: i32, in_$i54: i32, in_$i55: i32, in_$i56: i1, in_$i35: i32, in_$p36: ref, in_$p37: ref) returns (out_$p38: ref, out_$i39: i8, out_$i40: i1, out_$i41: i32, out_$i42: i32, out_$i43: i32, out_$i44: i64, out_$p45: ref, out_$i47: i1, out_$i49: i32, out_$i50: i64, out_$p51: ref, out_$p48: ref, out_$p46: ref, out_$i52: i32, out_$i53: i32, out_$i54: i32, out_$i55: i32, out_$i56: i1, out_$i35: i32, out_$p36: ref, out_$p37: ref);
  modifies $M.16;



implementation ftdi_elan_flush_input_fifo_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$i12: i8, in_$i13: i32, in_$i14: i32, in_$p15: ref, in_$p16: ref, in_$i17: i32, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i32, in_$i23: i32, in_$i24: i32, in_$i25: i1, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i32, in_$i32: i32, in_$i33: i32, in_$i34: i1, in_$p38: ref, in_$i39: i8, in_$i40: i1, in_$i41: i32, in_$i42: i32, in_$i43: i32, in_$i44: i64, in_$p45: ref, in_$i47: i1, in_$i49: i32, in_$i50: i64, in_$p51: ref, in_$p48: ref, in_$p46: ref, in_$i52: i32, in_$i53: i32, in_$i54: i32, in_$i55: i32, in_$i56: i1, in_$i35: i32, in_$p36: ref, in_$p37: ref, in_$i26: i32) returns (out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$i12: i8, out_$i13: i32, out_$i14: i32, out_$p15: ref, out_$p16: ref, out_$i17: i32, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i32, out_$i23: i32, out_$i24: i32, out_$i25: i1, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: i32, out_$i32: i32, out_$i33: i32, out_$i34: i1, out_$p38: ref, out_$i39: i8, out_$i40: i1, out_$i41: i32, out_$i42: i32, out_$i43: i32, out_$i44: i64, out_$p45: ref, out_$i47: i1, out_$i49: i32, out_$i50: i64, out_$p51: ref, out_$p48: ref, out_$p46: ref, out_$i52: i32, out_$i53: i32, out_$i54: i32, out_$i55: i32, out_$i56: i1, out_$i35: i32, out_$p36: ref, out_$p37: ref, out_$i26: i32)
{

  entry:
    out_$p9, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p15, out_$p16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i47, out_$i49, out_$i50, out_$p51, out_$p48, out_$p46, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i35, out_$p36, out_$p37, out_$i26 := in_$p9, in_$p10, in_$p11, in_$i12, in_$i13, in_$i14, in_$p15, in_$p16, in_$i17, in_$p18, in_$p19, in_$p20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$p28, in_$p29, in_$p30, in_$i31, in_$i32, in_$i33, in_$i34, in_$p38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$p45, in_$i47, in_$i49, in_$i50, in_$p51, in_$p48, in_$p46, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i35, in_$p36, in_$p37, in_$i26;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    $M.16 := $store.i32($M.16, in_$p1, 0);
    goto corral_source_split_3820;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb20_dummy;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb8:
    assume {:verifier.code 0} true;
    assume !(out_$i34 == 1);
    goto $bb9;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb19:
    assume !(out_$i56 == 1);
    goto corral_source_split_3887;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    out_$i56 := $sgt.i32(out_$i53, 0);
    goto corral_source_split_3879;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    $M.16 := $store.i32($M.16, in_$p1, out_$i55);
    goto corral_source_split_3878;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    out_$i55 := $sub.i32(out_$i54, 1);
    goto corral_source_split_3877;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    out_$i54 := $load.i32($M.16, in_$p1);
    goto corral_source_split_3876;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    out_$i53 := $load.i32($M.16, in_$p1);
    call {:si_unique_call 842} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i53);
    goto corral_source_split_3875;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    out_$i52 := $add.i32(out_$i35, 1);
    call {:si_unique_call 841} {:cexpr "bytes_read"} boogie_si_record_i32(out_$i52);
    goto corral_source_split_3874;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_3873;

  $bb17:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$p46 := out_$p48;
    goto $bb14;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    out_$p46 := out_$p45;
    goto $bb14;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref(out_$p37, $mul.ref(out_$i44, 1));
    goto corral_source_split_3868;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    out_$i44 := $sext.i32.i64(out_$i43);
    goto corral_source_split_3867;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 839} out_$i43 := sprintf.ref.ref.i32(out_$p37, .str.4, out_$i42);
    call {:si_unique_call 840} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i43);
    goto corral_source_split_3866;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    out_$i42 := $and.i32(out_$i41, 255);
    goto corral_source_split_3865;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    out_$i41 := $sext.i8.i32(out_$i39);
    goto corral_source_split_3864;

  $bb12:
    assume out_$i40 == 1;
    goto corral_source_split_3863;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    out_$i40 := $slt.i32(out_$i35, 31);
    goto corral_source_split_3861;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i8($M.0, out_$p36);
    call {:si_unique_call 838} {:cexpr "c"} boogie_si_record_i8(out_$i39);
    goto corral_source_split_3860;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref(out_$p36, $mul.ref(1, 1));
    goto corral_source_split_3859;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb10:
    call out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i47, out_$i49, out_$i50, out_$p51, out_$p48, out_$p46, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i35, out_$p36, out_$p37 := ftdi_elan_flush_input_fifo_loop_$bb10(in_$p1, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i47, out_$i49, out_$i50, out_$p51, out_$p48, out_$p46, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i35, out_$p36, out_$p37);
    goto $bb10_last;

  $bb10_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3857;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    out_$i35, out_$p36, out_$p37 := 0, out_$p29, in_$p2;
    goto $bb10;

  $bb18:
    assume out_$i56 == 1;
    assume {:verifier.code 0} true;
    out_$i35, out_$p36, out_$p37 := out_$i52, out_$p38, out_$p46;
    assume false;
    return;

  $bb7:
    assume out_$i34 == 1;
    goto corral_source_split_3855;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    out_$i34 := $sgt.i32(out_$i31, 0);
    goto corral_source_split_3849;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    $M.16 := $store.i32($M.16, in_$p1, out_$i33);
    goto corral_source_split_3848;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    out_$i33 := $sub.i32(out_$i32, 1);
    goto corral_source_split_3847;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i32($M.16, in_$p1);
    goto corral_source_split_3846;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i32($M.16, in_$p1);
    call {:si_unique_call 837} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i31);
    goto corral_source_split_3845;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    $M.22 := $store.i8($M.22, out_$p30, 0);
    goto corral_source_split_3844;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(in_$p2, $mul.ref(0, 94)), $mul.ref(0, 1));
    goto corral_source_split_3843;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    out_$p29 := $load.ref($M.0, out_$p28);
    goto corral_source_split_3842;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7400, 1));
    goto corral_source_split_3841;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    goto corral_source_split_3840;

  $bb5:
    assume out_$i25 == 1;
    goto corral_source_split_3839;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    out_$i26 := out_$i23;
    assume true;
    goto $bb5;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    out_$i25 := $sgt.i32(out_$i24, 2);
    goto corral_source_split_3837;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i32($M.16, in_$p1);
    goto corral_source_split_3836;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} out_$i23 := usb_bulk_msg(out_$p16, out_$i17, out_$p19, out_$i22, in_$p1, 100);
    call {:si_unique_call 836} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i23);
    goto corral_source_split_3835;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    out_$i22 := $trunc.i64.i32(out_$i21);
    goto corral_source_split_3834;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    out_$i21 := $load.i64($M.0, out_$p20);
    goto corral_source_split_3833;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7408, 1));
    goto corral_source_split_3832;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.0, out_$p18);
    goto corral_source_split_3831;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7400, 1));
    goto corral_source_split_3830;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    out_$i17 := $or.i32(out_$i14, $sub.i32(0, 1073741696));
    goto corral_source_split_3829;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    out_$p16 := $load.ref($M.0, out_$p15);
    goto corral_source_split_3828;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_3827;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} out_$i14 := __create_pipe(out_$p10, out_$i13);
    call {:si_unique_call 834} {:cexpr "tmp"} boogie_si_record_i32(out_$i14);
    goto corral_source_split_3826;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    out_$i13 := $zext.i8.i32(out_$i12);
    goto corral_source_split_3825;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    out_$i12 := $load.i8($M.0, out_$p11);
    goto corral_source_split_3824;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7432, 1));
    goto corral_source_split_3823;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    out_$p10 := $load.ref($M.0, out_$p9);
    goto corral_source_split_3822;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_3821;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref(out_$p37, $mul.ref(out_$i50, 1));
    assume {:verifier.code 0} true;
    out_$p48 := out_$p51;
    goto $bb17;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    out_$p48 := out_$p37;
    goto $bb17;

  $bb15:
    assume out_$i47 == 1;
    goto corral_source_split_3881;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    out_$i47 := $sgt.i32(out_$i35, 31);
    goto corral_source_split_3871;

  $bb13:
    assume !(out_$i40 == 1);
    goto corral_source_split_3870;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    out_$i50 := $sext.i32.i64(out_$i49);
    goto corral_source_split_3885;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} out_$i49 := sprintf.ref.ref(out_$p37, .str.5);
    call {:si_unique_call 844} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i49);
    goto corral_source_split_3884;

  $bb16:
    assume !(out_$i47 == 1);
    goto corral_source_split_3883;

  $bb20_dummy:
    call {:si_unique_call 1} out_$p9, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p15, out_$p16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i47, out_$i49, out_$i50, out_$p51, out_$p48, out_$p46, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i35, out_$p36, out_$p37, out_$i26 := ftdi_elan_flush_input_fifo_loop_$bb4(in_$p0, in_$p1, in_$p2, out_$p9, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p15, out_$p16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i47, out_$i49, out_$i50, out_$p51, out_$p48, out_$p46, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i35, out_$p36, out_$p37, out_$i26);
    return;

  exit:
    return;
}



procedure ftdi_elan_flush_input_fifo_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$i12: i8, in_$i13: i32, in_$i14: i32, in_$p15: ref, in_$p16: ref, in_$i17: i32, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i32, in_$i23: i32, in_$i24: i32, in_$i25: i1, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i32, in_$i32: i32, in_$i33: i32, in_$i34: i1, in_$p38: ref, in_$i39: i8, in_$i40: i1, in_$i41: i32, in_$i42: i32, in_$i43: i32, in_$i44: i64, in_$p45: ref, in_$i47: i1, in_$i49: i32, in_$i50: i64, in_$p51: ref, in_$p48: ref, in_$p46: ref, in_$i52: i32, in_$i53: i32, in_$i54: i32, in_$i55: i32, in_$i56: i1, in_$i35: i32, in_$p36: ref, in_$p37: ref, in_$i26: i32) returns (out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$i12: i8, out_$i13: i32, out_$i14: i32, out_$p15: ref, out_$p16: ref, out_$i17: i32, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i32, out_$i23: i32, out_$i24: i32, out_$i25: i1, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: i32, out_$i32: i32, out_$i33: i32, out_$i34: i1, out_$p38: ref, out_$i39: i8, out_$i40: i1, out_$i41: i32, out_$i42: i32, out_$i43: i32, out_$i44: i64, out_$p45: ref, out_$i47: i1, out_$i49: i32, out_$i50: i64, out_$p51: ref, out_$p48: ref, out_$p46: ref, out_$i52: i32, out_$i53: i32, out_$i54: i32, out_$i55: i32, out_$i56: i1, out_$i35: i32, out_$p36: ref, out_$p37: ref, out_$i26: i32);
  modifies $M.16, $M.22;



implementation ftdi_elan_flush_input_fifo_loop_$bb3(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i6: i32, in_$i8: i32, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$i12: i8, in_$i13: i32, in_$i14: i32, in_$p15: ref, in_$p16: ref, in_$i17: i32, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i32, in_$i23: i32, in_$i24: i32, in_$i25: i1, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i32, in_$i32: i32, in_$i33: i32, in_$i34: i1, in_$p38: ref, in_$i39: i8, in_$i40: i1, in_$i41: i32, in_$i42: i32, in_$i43: i32, in_$i44: i64, in_$p45: ref, in_$i47: i1, in_$i49: i32, in_$i50: i64, in_$p51: ref, in_$p48: ref, in_$p46: ref, in_$i52: i32, in_$i53: i32, in_$i54: i32, in_$i55: i32, in_$i56: i1, in_$i35: i32, in_$p36: ref, in_$p37: ref, in_$i26: i32, in_$i57: i32, in_$i58: i1, in_$i59: i32, in_$i60: i32, in_$i81: i32, in_$i82: i1, in_$i83: i32, in_$i84: i32, in_$i97: i1, in_$i98: i32, in_$i104: i1, in_$i106: i32, in_$i107: i1, in_$i105: i32) returns (out_$i8: i32, out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$i12: i8, out_$i13: i32, out_$i14: i32, out_$p15: ref, out_$p16: ref, out_$i17: i32, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i32, out_$i23: i32, out_$i24: i32, out_$i25: i1, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: i32, out_$i32: i32, out_$i33: i32, out_$i34: i1, out_$p38: ref, out_$i39: i8, out_$i40: i1, out_$i41: i32, out_$i42: i32, out_$i43: i32, out_$i44: i64, out_$p45: ref, out_$i47: i1, out_$i49: i32, out_$i50: i64, out_$p51: ref, out_$p48: ref, out_$p46: ref, out_$i52: i32, out_$i53: i32, out_$i54: i32, out_$i55: i32, out_$i56: i1, out_$i35: i32, out_$p36: ref, out_$p37: ref, out_$i26: i32, out_$i57: i32, out_$i58: i1, out_$i59: i32, out_$i60: i32, out_$i81: i32, out_$i82: i1, out_$i83: i32, out_$i84: i32, out_$i97: i1, out_$i98: i32, out_$i104: i1, out_$i106: i32, out_$i107: i1, out_$i105: i32)
{

  entry:
    out_$i8, out_$p9, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p15, out_$p16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i47, out_$i49, out_$i50, out_$p51, out_$p48, out_$p46, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i35, out_$p36, out_$p37, out_$i26, out_$i57, out_$i58, out_$i59, out_$i60, out_$i81, out_$i82, out_$i83, out_$i84, out_$i97, out_$i98, out_$i104, out_$i106, out_$i107, out_$i105 := in_$i8, in_$p9, in_$p10, in_$p11, in_$i12, in_$i13, in_$i14, in_$p15, in_$p16, in_$i17, in_$p18, in_$p19, in_$p20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$p28, in_$p29, in_$p30, in_$i31, in_$i32, in_$i33, in_$i34, in_$p38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$p45, in_$i47, in_$i49, in_$i50, in_$p51, in_$p48, in_$p46, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i35, in_$p36, in_$p37, in_$i26, in_$i57, in_$i58, in_$i59, in_$i60, in_$i81, in_$i82, in_$i83, in_$i84, in_$i97, in_$i98, in_$i104, in_$i106, in_$i107, in_$i105;
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3818;

  $bb42:
    assume out_$i107 == 1;
    assume {:verifier.code 0} true;
    out_$i8 := out_$i106;
    goto $bb42_dummy;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    out_$i107 := $sgt.i32(out_$i8, 0);
    goto corral_source_split_3963;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    out_$i106 := $sub.i32(out_$i8, 1);
    call {:si_unique_call 855} {:cexpr "retry_on_empty"} boogie_si_record_i32(out_$i106);
    goto corral_source_split_3962;

  $bb40:
    assume out_$i104 == 1;
    goto corral_source_split_3961;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    out_$i105 := out_$i26;
    assume true;
    goto $bb40;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    out_$i104 := $eq.i32(out_$i26, 0);
    goto corral_source_split_3953;

  $bb37:
    assume !(out_$i97 == 1);
    goto corral_source_split_3952;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    out_$i98 := out_$i8;
    assume true;
    goto $bb37;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    out_$i97 := $eq.i32(out_$i26, $sub.i32(0, 110));
    goto corral_source_split_3938;

  $bb33:
    assume !(out_$i82 == 1);
    goto corral_source_split_3937;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    out_$i83, out_$i84 := in_$i6, out_$i8;
    assume true;
    goto $bb33;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    out_$i82 := $sgt.i32(out_$i81, 0);
    goto corral_source_split_3902;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    out_$i81 := $load.i32($M.16, in_$p1);
    goto corral_source_split_3901;

  $bb22:
    assume !(out_$i58 == 1);
    goto corral_source_split_3900;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    out_$i59, out_$i60 := in_$i6, out_$i8;
    assume true;
    goto $bb22;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    out_$i58 := $sgt.i32(out_$i57, 1);
    goto corral_source_split_3853;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    out_$i57 := $load.i32($M.16, in_$p1);
    goto corral_source_split_3852;

  $bb6:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3851;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    out_$i26 := out_$i23;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    out_$i25 := $sgt.i32(out_$i24, 2);
    goto corral_source_split_3837;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i32($M.16, in_$p1);
    goto corral_source_split_3836;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} out_$i23 := usb_bulk_msg(out_$p16, out_$i17, out_$p19, out_$i22, in_$p1, 100);
    call {:si_unique_call 836} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i23);
    goto corral_source_split_3835;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    out_$i22 := $trunc.i64.i32(out_$i21);
    goto corral_source_split_3834;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    out_$i21 := $load.i64($M.0, out_$p20);
    goto corral_source_split_3833;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7408, 1));
    goto corral_source_split_3832;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.0, out_$p18);
    goto corral_source_split_3831;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7400, 1));
    goto corral_source_split_3830;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    out_$i17 := $or.i32(out_$i14, $sub.i32(0, 1073741696));
    goto corral_source_split_3829;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    out_$p16 := $load.ref($M.0, out_$p15);
    goto corral_source_split_3828;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_3827;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} out_$i14 := __create_pipe(out_$p10, out_$i13);
    call {:si_unique_call 834} {:cexpr "tmp"} boogie_si_record_i32(out_$i14);
    goto corral_source_split_3826;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    out_$i13 := $zext.i8.i32(out_$i12);
    goto corral_source_split_3825;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    out_$i12 := $load.i8($M.0, out_$p11);
    goto corral_source_split_3824;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7432, 1));
    goto corral_source_split_3823;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    out_$p10 := $load.ref($M.0, out_$p9);
    goto corral_source_split_3822;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_3821;

  $bb4:
    call out_$p9, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p15, out_$p16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i47, out_$i49, out_$i50, out_$p51, out_$p48, out_$p46, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i35, out_$p36, out_$p37, out_$i26 := ftdi_elan_flush_input_fifo_loop_$bb4(in_$p0, in_$p1, in_$p2, out_$p9, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p15, out_$p16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i47, out_$i49, out_$i50, out_$p51, out_$p48, out_$p46, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i35, out_$p36, out_$p37, out_$i26);
    goto $bb4_last;

  $bb4_last:
    assume {:verifier.code 0} true;
    $M.16 := $store.i32($M.16, in_$p1, 0);
    goto corral_source_split_3820;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb20:
    assume {:verifier.code 0} true;
    assume false;
    return;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb8:
    assume {:verifier.code 0} true;
    assume !(out_$i34 == 1);
    goto $bb9;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb19:
    assume !(out_$i56 == 1);
    goto corral_source_split_3887;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    out_$i56 := $sgt.i32(out_$i53, 0);
    goto corral_source_split_3879;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    $M.16 := $store.i32($M.16, in_$p1, out_$i55);
    goto corral_source_split_3878;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    out_$i55 := $sub.i32(out_$i54, 1);
    goto corral_source_split_3877;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    out_$i54 := $load.i32($M.16, in_$p1);
    goto corral_source_split_3876;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    out_$i53 := $load.i32($M.16, in_$p1);
    call {:si_unique_call 842} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i53);
    goto corral_source_split_3875;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    out_$i52 := $add.i32(out_$i35, 1);
    call {:si_unique_call 841} {:cexpr "bytes_read"} boogie_si_record_i32(out_$i52);
    goto corral_source_split_3874;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_3873;

  $bb17:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$p46 := out_$p48;
    goto $bb14;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    out_$p46 := out_$p45;
    goto $bb14;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref(out_$p37, $mul.ref(out_$i44, 1));
    goto corral_source_split_3868;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    out_$i44 := $sext.i32.i64(out_$i43);
    goto corral_source_split_3867;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 839} out_$i43 := sprintf.ref.ref.i32(out_$p37, .str.4, out_$i42);
    call {:si_unique_call 840} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i43);
    goto corral_source_split_3866;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    out_$i42 := $and.i32(out_$i41, 255);
    goto corral_source_split_3865;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    out_$i41 := $sext.i8.i32(out_$i39);
    goto corral_source_split_3864;

  $bb12:
    assume out_$i40 == 1;
    goto corral_source_split_3863;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    out_$i40 := $slt.i32(out_$i35, 31);
    goto corral_source_split_3861;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i8($M.0, out_$p36);
    call {:si_unique_call 838} {:cexpr "c"} boogie_si_record_i8(out_$i39);
    goto corral_source_split_3860;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref(out_$p36, $mul.ref(1, 1));
    goto corral_source_split_3859;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb10:
    call out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i47, out_$i49, out_$i50, out_$p51, out_$p48, out_$p46, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i35, out_$p36, out_$p37 := ftdi_elan_flush_input_fifo_loop_$bb10(in_$p1, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i47, out_$i49, out_$i50, out_$p51, out_$p48, out_$p46, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i35, out_$p36, out_$p37);
    goto $bb10_last;

  $bb10_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3857;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    out_$i35, out_$p36, out_$p37 := 0, out_$p29, in_$p2;
    goto $bb10;

  $bb18:
    assume out_$i56 == 1;
    assume {:verifier.code 0} true;
    out_$i35, out_$p36, out_$p37 := out_$i52, out_$p38, out_$p46;
    assume false;
    return;

  $bb7:
    assume out_$i34 == 1;
    goto corral_source_split_3855;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    out_$i34 := $sgt.i32(out_$i31, 0);
    goto corral_source_split_3849;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    $M.16 := $store.i32($M.16, in_$p1, out_$i33);
    goto corral_source_split_3848;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    out_$i33 := $sub.i32(out_$i32, 1);
    goto corral_source_split_3847;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i32($M.16, in_$p1);
    goto corral_source_split_3846;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i32($M.16, in_$p1);
    call {:si_unique_call 837} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i31);
    goto corral_source_split_3845;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    $M.22 := $store.i8($M.22, out_$p30, 0);
    goto corral_source_split_3844;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(in_$p2, $mul.ref(0, 94)), $mul.ref(0, 1));
    goto corral_source_split_3843;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    out_$p29 := $load.ref($M.0, out_$p28);
    goto corral_source_split_3842;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7400, 1));
    goto corral_source_split_3841;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    goto corral_source_split_3840;

  $bb5:
    assume out_$i25 == 1;
    goto corral_source_split_3839;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref(out_$p37, $mul.ref(out_$i50, 1));
    assume {:verifier.code 0} true;
    out_$p48 := out_$p51;
    goto $bb17;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    out_$p48 := out_$p37;
    goto $bb17;

  $bb15:
    assume out_$i47 == 1;
    goto corral_source_split_3881;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    out_$i47 := $sgt.i32(out_$i35, 31);
    goto corral_source_split_3871;

  $bb13:
    assume !(out_$i40 == 1);
    goto corral_source_split_3870;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    out_$i50 := $sext.i32.i64(out_$i49);
    goto corral_source_split_3885;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} out_$i49 := sprintf.ref.ref(out_$p37, .str.5);
    call {:si_unique_call 844} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i49);
    goto corral_source_split_3884;

  $bb16:
    assume !(out_$i47 == 1);
    goto corral_source_split_3883;

  $bb42_dummy:
    call {:si_unique_call 1} out_$i8, out_$p9, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p15, out_$p16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i47, out_$i49, out_$i50, out_$p51, out_$p48, out_$p46, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i35, out_$p36, out_$p37, out_$i26, out_$i57, out_$i58, out_$i59, out_$i60, out_$i81, out_$i82, out_$i83, out_$i84, out_$i97, out_$i98, out_$i104, out_$i106, out_$i107, out_$i105 := ftdi_elan_flush_input_fifo_loop_$bb3(in_$p0, in_$p1, in_$p2, in_$i6, out_$i8, out_$p9, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p15, out_$p16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i47, out_$i49, out_$i50, out_$p51, out_$p48, out_$p46, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i35, out_$p36, out_$p37, out_$i26, out_$i57, out_$i58, out_$i59, out_$i60, out_$i81, out_$i82, out_$i83, out_$i84, out_$i97, out_$i98, out_$i104, out_$i106, out_$i107, out_$i105);
    return;

  exit:
    return;
}



procedure ftdi_elan_flush_input_fifo_loop_$bb3(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i6: i32, in_$i8: i32, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$i12: i8, in_$i13: i32, in_$i14: i32, in_$p15: ref, in_$p16: ref, in_$i17: i32, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i32, in_$i23: i32, in_$i24: i32, in_$i25: i1, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i32, in_$i32: i32, in_$i33: i32, in_$i34: i1, in_$p38: ref, in_$i39: i8, in_$i40: i1, in_$i41: i32, in_$i42: i32, in_$i43: i32, in_$i44: i64, in_$p45: ref, in_$i47: i1, in_$i49: i32, in_$i50: i64, in_$p51: ref, in_$p48: ref, in_$p46: ref, in_$i52: i32, in_$i53: i32, in_$i54: i32, in_$i55: i32, in_$i56: i1, in_$i35: i32, in_$p36: ref, in_$p37: ref, in_$i26: i32, in_$i57: i32, in_$i58: i1, in_$i59: i32, in_$i60: i32, in_$i81: i32, in_$i82: i1, in_$i83: i32, in_$i84: i32, in_$i97: i1, in_$i98: i32, in_$i104: i1, in_$i106: i32, in_$i107: i1, in_$i105: i32) returns (out_$i8: i32, out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$i12: i8, out_$i13: i32, out_$i14: i32, out_$p15: ref, out_$p16: ref, out_$i17: i32, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i32, out_$i23: i32, out_$i24: i32, out_$i25: i1, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: i32, out_$i32: i32, out_$i33: i32, out_$i34: i1, out_$p38: ref, out_$i39: i8, out_$i40: i1, out_$i41: i32, out_$i42: i32, out_$i43: i32, out_$i44: i64, out_$p45: ref, out_$i47: i1, out_$i49: i32, out_$i50: i64, out_$p51: ref, out_$p48: ref, out_$p46: ref, out_$i52: i32, out_$i53: i32, out_$i54: i32, out_$i55: i32, out_$i56: i1, out_$i35: i32, out_$p36: ref, out_$p37: ref, out_$i26: i32, out_$i57: i32, out_$i58: i1, out_$i59: i32, out_$i60: i32, out_$i81: i32, out_$i82: i1, out_$i83: i32, out_$i84: i32, out_$i97: i1, out_$i98: i32, out_$i104: i1, out_$i106: i32, out_$i107: i1, out_$i105: i32);
  modifies $M.16, $M.22;



implementation ftdi_elan_flush_input_fifo_loop_$bb2(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i6: i32, in_$i7: i32, in_$i8: i32, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$i12: i8, in_$i13: i32, in_$i14: i32, in_$p15: ref, in_$p16: ref, in_$i17: i32, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i32, in_$i23: i32, in_$i24: i32, in_$i25: i1, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i32, in_$i32: i32, in_$i33: i32, in_$i34: i1, in_$p38: ref, in_$i39: i8, in_$i40: i1, in_$i41: i32, in_$i42: i32, in_$i43: i32, in_$i44: i64, in_$p45: ref, in_$i47: i1, in_$i49: i32, in_$i50: i64, in_$p51: ref, in_$p48: ref, in_$p46: ref, in_$i52: i32, in_$i53: i32, in_$i54: i32, in_$i55: i32, in_$i56: i1, in_$i35: i32, in_$p36: ref, in_$p37: ref, in_$i26: i32, in_$i57: i32, in_$i58: i1, in_$i59: i32, in_$i60: i32, in_$i81: i32, in_$i82: i1, in_$i83: i32, in_$i84: i32, in_$i97: i1, in_$i98: i32, in_$i99: i32, in_$i100: i1, in_$i104: i1, in_$i106: i32, in_$i107: i1, in_$i105: i32) returns (out_$i6: i32, out_$i7: i32, out_$i8: i32, out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$i12: i8, out_$i13: i32, out_$i14: i32, out_$p15: ref, out_$p16: ref, out_$i17: i32, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i32, out_$i23: i32, out_$i24: i32, out_$i25: i1, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: i32, out_$i32: i32, out_$i33: i32, out_$i34: i1, out_$p38: ref, out_$i39: i8, out_$i40: i1, out_$i41: i32, out_$i42: i32, out_$i43: i32, out_$i44: i64, out_$p45: ref, out_$i47: i1, out_$i49: i32, out_$i50: i64, out_$p51: ref, out_$p48: ref, out_$p46: ref, out_$i52: i32, out_$i53: i32, out_$i54: i32, out_$i55: i32, out_$i56: i1, out_$i35: i32, out_$p36: ref, out_$p37: ref, out_$i26: i32, out_$i57: i32, out_$i58: i1, out_$i59: i32, out_$i60: i32, out_$i81: i32, out_$i82: i1, out_$i83: i32, out_$i84: i32, out_$i97: i1, out_$i98: i32, out_$i99: i32, out_$i100: i1, out_$i104: i1, out_$i106: i32, out_$i107: i1, out_$i105: i32)
{

  entry:
    out_$i6, out_$i7, out_$i8, out_$p9, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p15, out_$p16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i47, out_$i49, out_$i50, out_$p51, out_$p48, out_$p46, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i35, out_$p36, out_$p37, out_$i26, out_$i57, out_$i58, out_$i59, out_$i60, out_$i81, out_$i82, out_$i83, out_$i84, out_$i97, out_$i98, out_$i99, out_$i100, out_$i104, out_$i106, out_$i107, out_$i105 := in_$i6, in_$i7, in_$i8, in_$p9, in_$p10, in_$p11, in_$i12, in_$i13, in_$i14, in_$p15, in_$p16, in_$i17, in_$p18, in_$p19, in_$p20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$p28, in_$p29, in_$p30, in_$i31, in_$i32, in_$i33, in_$i34, in_$p38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$p45, in_$i47, in_$i49, in_$i50, in_$p51, in_$p48, in_$p46, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i35, in_$p36, in_$p37, in_$i26, in_$i57, in_$i58, in_$i59, in_$i60, in_$i81, in_$i82, in_$i83, in_$i84, in_$i97, in_$i98, in_$i99, in_$i100, in_$i104, in_$i106, in_$i107, in_$i105;
    goto $bb2, exit;

  $bb2:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3816;

  $bb38:
    assume out_$i100 == 1;
    assume {:verifier.code 0} true;
    out_$i6, out_$i7 := out_$i99, out_$i98;
    goto $bb38_dummy;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    out_$i100 := $sgt.i32(out_$i6, 0);
    goto corral_source_split_3950;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    out_$i99 := $sub.i32(out_$i6, 1);
    call {:si_unique_call 853} {:cexpr "retry_on_timeout"} boogie_si_record_i32(out_$i99);
    goto corral_source_split_3949;

  $bb36:
    assume out_$i97 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3948;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    out_$i98 := out_$i8;
    assume true;
    goto $bb36, $bb37;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    out_$i97 := $eq.i32(out_$i26, $sub.i32(0, 110));
    goto corral_source_split_3938;

  $bb33:
    assume !(out_$i82 == 1);
    goto corral_source_split_3937;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    out_$i83, out_$i84 := out_$i6, out_$i8;
    assume true;
    goto $bb33;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    out_$i82 := $sgt.i32(out_$i81, 0);
    goto corral_source_split_3902;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    out_$i81 := $load.i32($M.16, in_$p1);
    goto corral_source_split_3901;

  $bb22:
    assume !(out_$i58 == 1);
    goto corral_source_split_3900;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    out_$i59, out_$i60 := out_$i6, out_$i8;
    assume true;
    goto $bb22;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    out_$i58 := $sgt.i32(out_$i57, 1);
    goto corral_source_split_3853;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    out_$i57 := $load.i32($M.16, in_$p1);
    goto corral_source_split_3852;

  $bb6:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3851;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    out_$i26 := out_$i23;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    out_$i25 := $sgt.i32(out_$i24, 2);
    goto corral_source_split_3837;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i32($M.16, in_$p1);
    goto corral_source_split_3836;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} out_$i23 := usb_bulk_msg(out_$p16, out_$i17, out_$p19, out_$i22, in_$p1, 100);
    call {:si_unique_call 836} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i23);
    goto corral_source_split_3835;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    out_$i22 := $trunc.i64.i32(out_$i21);
    goto corral_source_split_3834;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    out_$i21 := $load.i64($M.0, out_$p20);
    goto corral_source_split_3833;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7408, 1));
    goto corral_source_split_3832;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.0, out_$p18);
    goto corral_source_split_3831;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7400, 1));
    goto corral_source_split_3830;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    out_$i17 := $or.i32(out_$i14, $sub.i32(0, 1073741696));
    goto corral_source_split_3829;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    out_$p16 := $load.ref($M.0, out_$p15);
    goto corral_source_split_3828;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_3827;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} out_$i14 := __create_pipe(out_$p10, out_$i13);
    call {:si_unique_call 834} {:cexpr "tmp"} boogie_si_record_i32(out_$i14);
    goto corral_source_split_3826;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    out_$i13 := $zext.i8.i32(out_$i12);
    goto corral_source_split_3825;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    out_$i12 := $load.i8($M.0, out_$p11);
    goto corral_source_split_3824;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7432, 1));
    goto corral_source_split_3823;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    out_$p10 := $load.ref($M.0, out_$p9);
    goto corral_source_split_3822;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_3821;

  $bb4:
    call out_$p9, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p15, out_$p16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i47, out_$i49, out_$i50, out_$p51, out_$p48, out_$p46, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i35, out_$p36, out_$p37, out_$i26 := ftdi_elan_flush_input_fifo_loop_$bb4(in_$p0, in_$p1, in_$p2, out_$p9, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p15, out_$p16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i47, out_$i49, out_$i50, out_$p51, out_$p48, out_$p46, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i35, out_$p36, out_$p37, out_$i26);
    goto $bb4_last;

  $bb4_last:
    assume {:verifier.code 0} true;
    $M.16 := $store.i32($M.16, in_$p1, 0);
    goto corral_source_split_3820;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb20:
    assume {:verifier.code 0} true;
    assume false;
    return;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb8:
    assume {:verifier.code 0} true;
    assume !(out_$i34 == 1);
    goto $bb9;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb19:
    assume !(out_$i56 == 1);
    goto corral_source_split_3887;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    out_$i56 := $sgt.i32(out_$i53, 0);
    goto corral_source_split_3879;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    $M.16 := $store.i32($M.16, in_$p1, out_$i55);
    goto corral_source_split_3878;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    out_$i55 := $sub.i32(out_$i54, 1);
    goto corral_source_split_3877;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    out_$i54 := $load.i32($M.16, in_$p1);
    goto corral_source_split_3876;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    out_$i53 := $load.i32($M.16, in_$p1);
    call {:si_unique_call 842} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i53);
    goto corral_source_split_3875;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    out_$i52 := $add.i32(out_$i35, 1);
    call {:si_unique_call 841} {:cexpr "bytes_read"} boogie_si_record_i32(out_$i52);
    goto corral_source_split_3874;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_3873;

  $bb17:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$p46 := out_$p48;
    goto $bb14;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    out_$p46 := out_$p45;
    goto $bb14;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref(out_$p37, $mul.ref(out_$i44, 1));
    goto corral_source_split_3868;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    out_$i44 := $sext.i32.i64(out_$i43);
    goto corral_source_split_3867;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 839} out_$i43 := sprintf.ref.ref.i32(out_$p37, .str.4, out_$i42);
    call {:si_unique_call 840} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i43);
    goto corral_source_split_3866;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    out_$i42 := $and.i32(out_$i41, 255);
    goto corral_source_split_3865;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    out_$i41 := $sext.i8.i32(out_$i39);
    goto corral_source_split_3864;

  $bb12:
    assume out_$i40 == 1;
    goto corral_source_split_3863;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    out_$i40 := $slt.i32(out_$i35, 31);
    goto corral_source_split_3861;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i8($M.0, out_$p36);
    call {:si_unique_call 838} {:cexpr "c"} boogie_si_record_i8(out_$i39);
    goto corral_source_split_3860;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref(out_$p36, $mul.ref(1, 1));
    goto corral_source_split_3859;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb10:
    call out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i47, out_$i49, out_$i50, out_$p51, out_$p48, out_$p46, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i35, out_$p36, out_$p37 := ftdi_elan_flush_input_fifo_loop_$bb10(in_$p1, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i47, out_$i49, out_$i50, out_$p51, out_$p48, out_$p46, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i35, out_$p36, out_$p37);
    goto $bb10_last;

  $bb10_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3857;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    out_$i35, out_$p36, out_$p37 := 0, out_$p29, in_$p2;
    goto $bb10;

  $bb18:
    assume out_$i56 == 1;
    assume {:verifier.code 0} true;
    out_$i35, out_$p36, out_$p37 := out_$i52, out_$p38, out_$p46;
    assume false;
    return;

  $bb7:
    assume out_$i34 == 1;
    goto corral_source_split_3855;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    out_$i34 := $sgt.i32(out_$i31, 0);
    goto corral_source_split_3849;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    $M.16 := $store.i32($M.16, in_$p1, out_$i33);
    goto corral_source_split_3848;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    out_$i33 := $sub.i32(out_$i32, 1);
    goto corral_source_split_3847;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i32($M.16, in_$p1);
    goto corral_source_split_3846;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i32($M.16, in_$p1);
    call {:si_unique_call 837} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i31);
    goto corral_source_split_3845;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    $M.22 := $store.i8($M.22, out_$p30, 0);
    goto corral_source_split_3844;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(in_$p2, $mul.ref(0, 94)), $mul.ref(0, 1));
    goto corral_source_split_3843;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    out_$p29 := $load.ref($M.0, out_$p28);
    goto corral_source_split_3842;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7400, 1));
    goto corral_source_split_3841;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    goto corral_source_split_3840;

  $bb5:
    assume out_$i25 == 1;
    goto corral_source_split_3839;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref(out_$p37, $mul.ref(out_$i50, 1));
    assume {:verifier.code 0} true;
    out_$p48 := out_$p51;
    goto $bb17;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    out_$p48 := out_$p37;
    goto $bb17;

  $bb15:
    assume out_$i47 == 1;
    goto corral_source_split_3881;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    out_$i47 := $sgt.i32(out_$i35, 31);
    goto corral_source_split_3871;

  $bb13:
    assume !(out_$i40 == 1);
    goto corral_source_split_3870;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    out_$i50 := $sext.i32.i64(out_$i49);
    goto corral_source_split_3885;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} out_$i49 := sprintf.ref.ref(out_$p37, .str.5);
    call {:si_unique_call 844} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i49);
    goto corral_source_split_3884;

  $bb16:
    assume !(out_$i47 == 1);
    goto corral_source_split_3883;

  $bb3:
    call out_$i8, out_$p9, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p15, out_$p16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i47, out_$i49, out_$i50, out_$p51, out_$p48, out_$p46, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i35, out_$p36, out_$p37, out_$i26, out_$i57, out_$i58, out_$i59, out_$i60, out_$i81, out_$i82, out_$i83, out_$i84, out_$i97, out_$i98, out_$i104, out_$i106, out_$i107, out_$i105 := ftdi_elan_flush_input_fifo_loop_$bb3(in_$p0, in_$p1, in_$p2, out_$i6, out_$i8, out_$p9, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p15, out_$p16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i47, out_$i49, out_$i50, out_$p51, out_$p48, out_$p46, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i35, out_$p36, out_$p37, out_$i26, out_$i57, out_$i58, out_$i59, out_$i60, out_$i81, out_$i82, out_$i83, out_$i84, out_$i97, out_$i98, out_$i104, out_$i106, out_$i107, out_$i105);
    goto $bb3_last;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3818;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    out_$i8 := out_$i7;
    goto $bb3;

  $bb42:
    assume out_$i107 == 1;
    assume {:verifier.code 0} true;
    out_$i8 := out_$i106;
    assume false;
    return;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    out_$i107 := $sgt.i32(out_$i8, 0);
    goto corral_source_split_3963;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    out_$i106 := $sub.i32(out_$i8, 1);
    call {:si_unique_call 855} {:cexpr "retry_on_empty"} boogie_si_record_i32(out_$i106);
    goto corral_source_split_3962;

  $bb40:
    assume out_$i104 == 1;
    goto corral_source_split_3961;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    out_$i105 := out_$i26;
    assume true;
    goto $bb40;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    out_$i104 := $eq.i32(out_$i26, 0);
    goto corral_source_split_3953;

  $bb37:
    assume !(out_$i97 == 1);
    goto corral_source_split_3952;

  $bb38_dummy:
    call {:si_unique_call 1} out_$i6, out_$i7, out_$i8, out_$p9, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p15, out_$p16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i47, out_$i49, out_$i50, out_$p51, out_$p48, out_$p46, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i35, out_$p36, out_$p37, out_$i26, out_$i57, out_$i58, out_$i59, out_$i60, out_$i81, out_$i82, out_$i83, out_$i84, out_$i97, out_$i98, out_$i99, out_$i100, out_$i104, out_$i106, out_$i107, out_$i105 := ftdi_elan_flush_input_fifo_loop_$bb2(in_$p0, in_$p1, in_$p2, out_$i6, out_$i7, out_$i8, out_$p9, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p15, out_$p16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i47, out_$i49, out_$i50, out_$p51, out_$p48, out_$p46, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i35, out_$p36, out_$p37, out_$i26, out_$i57, out_$i58, out_$i59, out_$i60, out_$i81, out_$i82, out_$i83, out_$i84, out_$i97, out_$i98, out_$i99, out_$i100, out_$i104, out_$i106, out_$i107, out_$i105);
    return;

  exit:
    return;
}



procedure ftdi_elan_flush_input_fifo_loop_$bb2(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i6: i32, in_$i7: i32, in_$i8: i32, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$i12: i8, in_$i13: i32, in_$i14: i32, in_$p15: ref, in_$p16: ref, in_$i17: i32, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i32, in_$i23: i32, in_$i24: i32, in_$i25: i1, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i32, in_$i32: i32, in_$i33: i32, in_$i34: i1, in_$p38: ref, in_$i39: i8, in_$i40: i1, in_$i41: i32, in_$i42: i32, in_$i43: i32, in_$i44: i64, in_$p45: ref, in_$i47: i1, in_$i49: i32, in_$i50: i64, in_$p51: ref, in_$p48: ref, in_$p46: ref, in_$i52: i32, in_$i53: i32, in_$i54: i32, in_$i55: i32, in_$i56: i1, in_$i35: i32, in_$p36: ref, in_$p37: ref, in_$i26: i32, in_$i57: i32, in_$i58: i1, in_$i59: i32, in_$i60: i32, in_$i81: i32, in_$i82: i1, in_$i83: i32, in_$i84: i32, in_$i97: i1, in_$i98: i32, in_$i99: i32, in_$i100: i1, in_$i104: i1, in_$i106: i32, in_$i107: i1, in_$i105: i32) returns (out_$i6: i32, out_$i7: i32, out_$i8: i32, out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$i12: i8, out_$i13: i32, out_$i14: i32, out_$p15: ref, out_$p16: ref, out_$i17: i32, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i32, out_$i23: i32, out_$i24: i32, out_$i25: i1, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: i32, out_$i32: i32, out_$i33: i32, out_$i34: i1, out_$p38: ref, out_$i39: i8, out_$i40: i1, out_$i41: i32, out_$i42: i32, out_$i43: i32, out_$i44: i64, out_$p45: ref, out_$i47: i1, out_$i49: i32, out_$i50: i64, out_$p51: ref, out_$p48: ref, out_$p46: ref, out_$i52: i32, out_$i53: i32, out_$i54: i32, out_$i55: i32, out_$i56: i1, out_$i35: i32, out_$p36: ref, out_$p37: ref, out_$i26: i32, out_$i57: i32, out_$i58: i1, out_$i59: i32, out_$i60: i32, out_$i81: i32, out_$i82: i1, out_$i83: i32, out_$i84: i32, out_$i97: i1, out_$i98: i32, out_$i99: i32, out_$i100: i1, out_$i104: i1, out_$i106: i32, out_$i107: i1, out_$i105: i32);
  modifies $M.16, $M.22;



implementation ftdi_elan_flush_input_fifo_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i3: i32, in_$i4: i32, in_$i5: i32, in_$i6: i32, in_$i7: i32, in_$i8: i32, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$i12: i8, in_$i13: i32, in_$i14: i32, in_$p15: ref, in_$p16: ref, in_$i17: i32, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i32, in_$i23: i32, in_$i24: i32, in_$i25: i1, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i32, in_$i32: i32, in_$i33: i32, in_$i34: i1, in_$p38: ref, in_$i39: i8, in_$i40: i1, in_$i41: i32, in_$i42: i32, in_$i43: i32, in_$i44: i64, in_$p45: ref, in_$i47: i1, in_$i49: i32, in_$i50: i64, in_$p51: ref, in_$p48: ref, in_$p46: ref, in_$i52: i32, in_$i53: i32, in_$i54: i32, in_$i55: i32, in_$i56: i1, in_$i35: i32, in_$p36: ref, in_$p37: ref, in_$i26: i32, in_$i57: i32, in_$i58: i1, in_$i59: i32, in_$i60: i32, in_$p61: ref, in_$p62: ref, in_$i63: i8, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$i67: i8, in_$i68: i32, in_$i69: i1, in_$i70: i32, in_$i71: i1, in_$i73: i32, in_$i74: i1, in_$i75: i32, in_$i76: i32, in_$i77: i32, in_$i81: i32, in_$i82: i1, in_$i83: i32, in_$i84: i32, in_$p85: ref, in_$p86: ref, in_$i87: i8, in_$p88: ref, in_$p89: ref, in_$p90: ref, in_$i91: i32, in_$i92: i32, in_$i93: i1, in_$i97: i1, in_$i98: i32, in_$i99: i32, in_$i100: i1, in_$i104: i1, in_$i106: i32, in_$i107: i1, in_$i105: i32) returns (out_$i3: i32, out_$i4: i32, out_$i5: i32, out_$i6: i32, out_$i7: i32, out_$i8: i32, out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$i12: i8, out_$i13: i32, out_$i14: i32, out_$p15: ref, out_$p16: ref, out_$i17: i32, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i32, out_$i23: i32, out_$i24: i32, out_$i25: i1, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: i32, out_$i32: i32, out_$i33: i32, out_$i34: i1, out_$p38: ref, out_$i39: i8, out_$i40: i1, out_$i41: i32, out_$i42: i32, out_$i43: i32, out_$i44: i64, out_$p45: ref, out_$i47: i1, out_$i49: i32, out_$i50: i64, out_$p51: ref, out_$p48: ref, out_$p46: ref, out_$i52: i32, out_$i53: i32, out_$i54: i32, out_$i55: i32, out_$i56: i1, out_$i35: i32, out_$p36: ref, out_$p37: ref, out_$i26: i32, out_$i57: i32, out_$i58: i1, out_$i59: i32, out_$i60: i32, out_$p61: ref, out_$p62: ref, out_$i63: i8, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$i67: i8, out_$i68: i32, out_$i69: i1, out_$i70: i32, out_$i71: i1, out_$i73: i32, out_$i74: i1, out_$i75: i32, out_$i76: i32, out_$i77: i32, out_$i81: i32, out_$i82: i1, out_$i83: i32, out_$i84: i32, out_$p85: ref, out_$p86: ref, out_$i87: i8, out_$p88: ref, out_$p89: ref, out_$p90: ref, out_$i91: i32, out_$i92: i32, out_$i93: i1, out_$i97: i1, out_$i98: i32, out_$i99: i32, out_$i100: i1, out_$i104: i1, out_$i106: i32, out_$i107: i1, out_$i105: i32)
{

  entry:
    out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$p9, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p15, out_$p16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i47, out_$i49, out_$i50, out_$p51, out_$p48, out_$p46, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i35, out_$p36, out_$p37, out_$i26, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$p62, out_$i63, out_$p64, out_$p65, out_$p66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i81, out_$i82, out_$i83, out_$i84, out_$p85, out_$p86, out_$i87, out_$p88, out_$p89, out_$p90, out_$i91, out_$i92, out_$i93, out_$i97, out_$i98, out_$i99, out_$i100, out_$i104, out_$i106, out_$i107, out_$i105 := in_$i3, in_$i4, in_$i5, in_$i6, in_$i7, in_$i8, in_$p9, in_$p10, in_$p11, in_$i12, in_$i13, in_$i14, in_$p15, in_$p16, in_$i17, in_$p18, in_$p19, in_$p20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$p28, in_$p29, in_$p30, in_$i31, in_$i32, in_$i33, in_$i34, in_$p38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$p45, in_$i47, in_$i49, in_$i50, in_$p51, in_$p48, in_$p46, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i35, in_$p36, in_$p37, in_$i26, in_$i57, in_$i58, in_$i59, in_$i60, in_$p61, in_$p62, in_$i63, in_$p64, in_$p65, in_$p66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$i81, in_$i82, in_$i83, in_$i84, in_$p85, in_$p86, in_$i87, in_$p88, in_$p89, in_$p90, in_$i91, in_$i92, in_$i93, in_$i97, in_$i98, in_$i99, in_$i100, in_$i104, in_$i106, in_$i107, in_$i105;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3814;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    out_$i3, out_$i4, out_$i5 := out_$i77, out_$i75, out_$i76;
    goto corral_source_split_3923_dummy;

  $bb31:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3923;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    out_$i75, out_$i76, out_$i77 := out_$i83, out_$i84, out_$i92;
    goto $bb31;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    out_$i75, out_$i76, out_$i77 := out_$i59, out_$i60, out_$i73;
    goto $bb31;

  $bb29:
    assume out_$i74 == 1;
    goto corral_source_split_3915;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    out_$i74 := $sgt.i32(out_$i3, 0);
    goto corral_source_split_3909;

  $bb25:
    assume {:verifier.code 0} true;
    out_$i73 := $sub.i32(out_$i3, 1);
    call {:si_unique_call 847} {:cexpr "retry_on_status"} boogie_si_record_i32(out_$i73);
    goto corral_source_split_3908;

  $bb24:
    assume {:verifier.code 0} true;
    assume !(out_$i69 == 1);
    goto $bb25;

  $bb27:
    assume {:verifier.code 0} true;
    assume !(out_$i71 == 1);
    goto $bb25;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    out_$i71 := $eq.i32(out_$i70, 96);
    goto corral_source_split_3906;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    out_$i70 := $sext.i8.i32(out_$i67);
    goto corral_source_split_3905;

  $bb23:
    assume out_$i69 == 1;
    goto corral_source_split_3904;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    out_$i69 := $eq.i32(out_$i68, 49);
    goto corral_source_split_3898;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    out_$i68 := $sext.i8.i32(out_$i63);
    goto corral_source_split_3897;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    out_$i67 := $load.i8($M.0, out_$p66);
    call {:si_unique_call 846} {:cexpr "s2"} boogie_si_record_i8(out_$i67);
    goto corral_source_split_3896;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref(out_$p65, $mul.ref(1, 1));
    goto corral_source_split_3895;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    out_$p65 := $load.ref($M.0, out_$p64);
    goto corral_source_split_3894;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7400, 1));
    goto corral_source_split_3893;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    out_$i63 := $load.i8($M.0, out_$p62);
    call {:si_unique_call 845} {:cexpr "s1"} boogie_si_record_i8(out_$i63);
    goto corral_source_split_3892;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    out_$p62 := $load.ref($M.0, out_$p61);
    goto corral_source_split_3891;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7400, 1));
    goto corral_source_split_3890;

  $bb21:
    assume out_$i58 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3889;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    out_$i59, out_$i60 := out_$i6, out_$i8;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    out_$i58 := $sgt.i32(out_$i57, 1);
    goto corral_source_split_3853;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    out_$i57 := $load.i32($M.16, in_$p1);
    goto corral_source_split_3852;

  $bb6:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3851;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    out_$i26 := out_$i23;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    out_$i25 := $sgt.i32(out_$i24, 2);
    goto corral_source_split_3837;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i32($M.16, in_$p1);
    goto corral_source_split_3836;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} out_$i23 := usb_bulk_msg(out_$p16, out_$i17, out_$p19, out_$i22, in_$p1, 100);
    call {:si_unique_call 836} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i23);
    goto corral_source_split_3835;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    out_$i22 := $trunc.i64.i32(out_$i21);
    goto corral_source_split_3834;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    out_$i21 := $load.i64($M.0, out_$p20);
    goto corral_source_split_3833;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7408, 1));
    goto corral_source_split_3832;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.0, out_$p18);
    goto corral_source_split_3831;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7400, 1));
    goto corral_source_split_3830;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    out_$i17 := $or.i32(out_$i14, $sub.i32(0, 1073741696));
    goto corral_source_split_3829;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    out_$p16 := $load.ref($M.0, out_$p15);
    goto corral_source_split_3828;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_3827;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} out_$i14 := __create_pipe(out_$p10, out_$i13);
    call {:si_unique_call 834} {:cexpr "tmp"} boogie_si_record_i32(out_$i14);
    goto corral_source_split_3826;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    out_$i13 := $zext.i8.i32(out_$i12);
    goto corral_source_split_3825;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    out_$i12 := $load.i8($M.0, out_$p11);
    goto corral_source_split_3824;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7432, 1));
    goto corral_source_split_3823;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    out_$p10 := $load.ref($M.0, out_$p9);
    goto corral_source_split_3822;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_3821;

  $bb4:
    call out_$p9, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p15, out_$p16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i47, out_$i49, out_$i50, out_$p51, out_$p48, out_$p46, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i35, out_$p36, out_$p37, out_$i26 := ftdi_elan_flush_input_fifo_loop_$bb4(in_$p0, in_$p1, in_$p2, out_$p9, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p15, out_$p16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i47, out_$i49, out_$i50, out_$p51, out_$p48, out_$p46, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i35, out_$p36, out_$p37, out_$i26);
    goto $bb4_last;

  $bb4_last:
    assume {:verifier.code 0} true;
    $M.16 := $store.i32($M.16, in_$p1, 0);
    goto corral_source_split_3820;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb20:
    assume {:verifier.code 0} true;
    assume false;
    return;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb8:
    assume {:verifier.code 0} true;
    assume !(out_$i34 == 1);
    goto $bb9;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb19:
    assume !(out_$i56 == 1);
    goto corral_source_split_3887;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    out_$i56 := $sgt.i32(out_$i53, 0);
    goto corral_source_split_3879;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    $M.16 := $store.i32($M.16, in_$p1, out_$i55);
    goto corral_source_split_3878;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    out_$i55 := $sub.i32(out_$i54, 1);
    goto corral_source_split_3877;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    out_$i54 := $load.i32($M.16, in_$p1);
    goto corral_source_split_3876;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    out_$i53 := $load.i32($M.16, in_$p1);
    call {:si_unique_call 842} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i53);
    goto corral_source_split_3875;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    out_$i52 := $add.i32(out_$i35, 1);
    call {:si_unique_call 841} {:cexpr "bytes_read"} boogie_si_record_i32(out_$i52);
    goto corral_source_split_3874;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_3873;

  $bb17:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$p46 := out_$p48;
    goto $bb14;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    out_$p46 := out_$p45;
    goto $bb14;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref(out_$p37, $mul.ref(out_$i44, 1));
    goto corral_source_split_3868;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    out_$i44 := $sext.i32.i64(out_$i43);
    goto corral_source_split_3867;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 839} out_$i43 := sprintf.ref.ref.i32(out_$p37, .str.4, out_$i42);
    call {:si_unique_call 840} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i43);
    goto corral_source_split_3866;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    out_$i42 := $and.i32(out_$i41, 255);
    goto corral_source_split_3865;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    out_$i41 := $sext.i8.i32(out_$i39);
    goto corral_source_split_3864;

  $bb12:
    assume out_$i40 == 1;
    goto corral_source_split_3863;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    out_$i40 := $slt.i32(out_$i35, 31);
    goto corral_source_split_3861;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i8($M.0, out_$p36);
    call {:si_unique_call 838} {:cexpr "c"} boogie_si_record_i8(out_$i39);
    goto corral_source_split_3860;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref(out_$p36, $mul.ref(1, 1));
    goto corral_source_split_3859;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb10:
    call out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i47, out_$i49, out_$i50, out_$p51, out_$p48, out_$p46, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i35, out_$p36, out_$p37 := ftdi_elan_flush_input_fifo_loop_$bb10(in_$p1, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i47, out_$i49, out_$i50, out_$p51, out_$p48, out_$p46, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i35, out_$p36, out_$p37);
    goto $bb10_last;

  $bb10_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3857;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    out_$i35, out_$p36, out_$p37 := 0, out_$p29, in_$p2;
    goto $bb10;

  $bb18:
    assume out_$i56 == 1;
    assume {:verifier.code 0} true;
    out_$i35, out_$p36, out_$p37 := out_$i52, out_$p38, out_$p46;
    assume false;
    return;

  $bb7:
    assume out_$i34 == 1;
    goto corral_source_split_3855;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    out_$i34 := $sgt.i32(out_$i31, 0);
    goto corral_source_split_3849;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    $M.16 := $store.i32($M.16, in_$p1, out_$i33);
    goto corral_source_split_3848;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    out_$i33 := $sub.i32(out_$i32, 1);
    goto corral_source_split_3847;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i32($M.16, in_$p1);
    goto corral_source_split_3846;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i32($M.16, in_$p1);
    call {:si_unique_call 837} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i31);
    goto corral_source_split_3845;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    $M.22 := $store.i8($M.22, out_$p30, 0);
    goto corral_source_split_3844;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(in_$p2, $mul.ref(0, 94)), $mul.ref(0, 1));
    goto corral_source_split_3843;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    out_$p29 := $load.ref($M.0, out_$p28);
    goto corral_source_split_3842;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7400, 1));
    goto corral_source_split_3841;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    goto corral_source_split_3840;

  $bb5:
    assume out_$i25 == 1;
    goto corral_source_split_3839;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref(out_$p37, $mul.ref(out_$i50, 1));
    assume {:verifier.code 0} true;
    out_$p48 := out_$p51;
    goto $bb17;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    out_$p48 := out_$p37;
    goto $bb17;

  $bb15:
    assume out_$i47 == 1;
    goto corral_source_split_3881;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    out_$i47 := $sgt.i32(out_$i35, 31);
    goto corral_source_split_3871;

  $bb13:
    assume !(out_$i40 == 1);
    goto corral_source_split_3870;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    out_$i50 := $sext.i32.i64(out_$i49);
    goto corral_source_split_3885;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} out_$i49 := sprintf.ref.ref(out_$p37, .str.5);
    call {:si_unique_call 844} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i49);
    goto corral_source_split_3884;

  $bb16:
    assume !(out_$i47 == 1);
    goto corral_source_split_3883;

  $bb3:
    call out_$i8, out_$p9, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p15, out_$p16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i47, out_$i49, out_$i50, out_$p51, out_$p48, out_$p46, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i35, out_$p36, out_$p37, out_$i26, out_$i57, out_$i58, out_$i59, out_$i60, out_$i81, out_$i82, out_$i83, out_$i84, out_$i97, out_$i98, out_$i104, out_$i106, out_$i107, out_$i105 := ftdi_elan_flush_input_fifo_loop_$bb3(in_$p0, in_$p1, in_$p2, out_$i6, out_$i8, out_$p9, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p15, out_$p16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i47, out_$i49, out_$i50, out_$p51, out_$p48, out_$p46, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i35, out_$p36, out_$p37, out_$i26, out_$i57, out_$i58, out_$i59, out_$i60, out_$i81, out_$i82, out_$i83, out_$i84, out_$i97, out_$i98, out_$i104, out_$i106, out_$i107, out_$i105);
    goto $bb3_last;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3818;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    out_$i8 := out_$i7;
    goto $bb3;

  $bb42:
    assume out_$i107 == 1;
    assume {:verifier.code 0} true;
    out_$i8 := out_$i106;
    assume false;
    return;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    out_$i107 := $sgt.i32(out_$i8, 0);
    goto corral_source_split_3963;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    out_$i106 := $sub.i32(out_$i8, 1);
    call {:si_unique_call 855} {:cexpr "retry_on_empty"} boogie_si_record_i32(out_$i106);
    goto corral_source_split_3962;

  $bb40:
    assume out_$i104 == 1;
    goto corral_source_split_3961;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    out_$i105 := out_$i26;
    assume true;
    goto $bb40;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    out_$i104 := $eq.i32(out_$i26, 0);
    goto corral_source_split_3953;

  $bb37:
    assume !(out_$i97 == 1);
    goto corral_source_split_3952;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    out_$i98 := out_$i8;
    assume true;
    goto $bb36, $bb37;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    out_$i97 := $eq.i32(out_$i26, $sub.i32(0, 110));
    goto corral_source_split_3938;

  $bb33:
    assume !(out_$i82 == 1);
    goto corral_source_split_3937;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    out_$i83, out_$i84 := out_$i6, out_$i8;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    out_$i82 := $sgt.i32(out_$i81, 0);
    goto corral_source_split_3902;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    out_$i81 := $load.i32($M.16, in_$p1);
    goto corral_source_split_3901;

  $bb22:
    assume !(out_$i58 == 1);
    goto corral_source_split_3900;

  $bb2:
    call out_$i6, out_$i7, out_$i8, out_$p9, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p15, out_$p16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i47, out_$i49, out_$i50, out_$p51, out_$p48, out_$p46, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i35, out_$p36, out_$p37, out_$i26, out_$i57, out_$i58, out_$i59, out_$i60, out_$i81, out_$i82, out_$i83, out_$i84, out_$i97, out_$i98, out_$i99, out_$i100, out_$i104, out_$i106, out_$i107, out_$i105 := ftdi_elan_flush_input_fifo_loop_$bb2(in_$p0, in_$p1, in_$p2, out_$i6, out_$i7, out_$i8, out_$p9, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p15, out_$p16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i47, out_$i49, out_$i50, out_$p51, out_$p48, out_$p46, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i35, out_$p36, out_$p37, out_$i26, out_$i57, out_$i58, out_$i59, out_$i60, out_$i81, out_$i82, out_$i83, out_$i84, out_$i97, out_$i98, out_$i99, out_$i100, out_$i104, out_$i106, out_$i107, out_$i105);
    goto $bb2_last;

  $bb2_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3816;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    out_$i6, out_$i7 := out_$i4, out_$i5;
    goto $bb2;

  $bb38:
    assume out_$i100 == 1;
    assume {:verifier.code 0} true;
    out_$i6, out_$i7 := out_$i99, out_$i98;
    assume false;
    return;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    out_$i100 := $sgt.i32(out_$i6, 0);
    goto corral_source_split_3950;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    out_$i99 := $sub.i32(out_$i6, 1);
    call {:si_unique_call 853} {:cexpr "retry_on_timeout"} boogie_si_record_i32(out_$i99);
    goto corral_source_split_3949;

  $bb36:
    assume out_$i97 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3948;

  $bb34:
    assume out_$i93 == 1;
    goto corral_source_split_3940;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    out_$i93 := $sgt.i32(out_$i3, 0);
    goto corral_source_split_3935;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    out_$i92 := $sub.i32(out_$i3, 1);
    call {:si_unique_call 851} {:cexpr "retry_on_status"} boogie_si_record_i32(out_$i92);
    goto corral_source_split_3934;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 850} dev_err.ref.ref.i32(out_$p90, .str.24, out_$i91);
    goto corral_source_split_3933;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    out_$i91 := $sext.i8.i32(out_$i87);
    goto corral_source_split_3932;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    out_$p90 := $add.ref($add.ref(out_$p89, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_3931;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    out_$p89 := $load.ref($M.0, out_$p88);
    goto corral_source_split_3930;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_3929;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    out_$i87 := $load.i8($M.0, out_$p86);
    call {:si_unique_call 849} {:cexpr "b1"} boogie_si_record_i8(out_$i87);
    goto corral_source_split_3928;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    out_$p86 := $load.ref($M.0, out_$p85);
    goto corral_source_split_3927;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7400, 1));
    goto corral_source_split_3926;

  $bb32:
    assume out_$i82 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3925;

  corral_source_split_3923_dummy:
    call {:si_unique_call 1} out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$p9, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p15, out_$p16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i47, out_$i49, out_$i50, out_$p51, out_$p48, out_$p46, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i35, out_$p36, out_$p37, out_$i26, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$p62, out_$i63, out_$p64, out_$p65, out_$p66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i81, out_$i82, out_$i83, out_$i84, out_$p85, out_$p86, out_$i87, out_$p88, out_$p89, out_$p90, out_$i91, out_$i92, out_$i93, out_$i97, out_$i98, out_$i99, out_$i100, out_$i104, out_$i106, out_$i107, out_$i105 := ftdi_elan_flush_input_fifo_loop_$bb1(in_$p0, in_$p1, in_$p2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$p9, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p15, out_$p16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i47, out_$i49, out_$i50, out_$p51, out_$p48, out_$p46, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i35, out_$p36, out_$p37, out_$i26, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$p62, out_$i63, out_$p64, out_$p65, out_$p66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i81, out_$i82, out_$i83, out_$i84, out_$p85, out_$p86, out_$i87, out_$p88, out_$p89, out_$p90, out_$i91, out_$i92, out_$i93, out_$i97, out_$i98, out_$i99, out_$i100, out_$i104, out_$i106, out_$i107, out_$i105);
    return;

  exit:
    return;
}



procedure ftdi_elan_flush_input_fifo_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i3: i32, in_$i4: i32, in_$i5: i32, in_$i6: i32, in_$i7: i32, in_$i8: i32, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$i12: i8, in_$i13: i32, in_$i14: i32, in_$p15: ref, in_$p16: ref, in_$i17: i32, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i32, in_$i23: i32, in_$i24: i32, in_$i25: i1, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i32, in_$i32: i32, in_$i33: i32, in_$i34: i1, in_$p38: ref, in_$i39: i8, in_$i40: i1, in_$i41: i32, in_$i42: i32, in_$i43: i32, in_$i44: i64, in_$p45: ref, in_$i47: i1, in_$i49: i32, in_$i50: i64, in_$p51: ref, in_$p48: ref, in_$p46: ref, in_$i52: i32, in_$i53: i32, in_$i54: i32, in_$i55: i32, in_$i56: i1, in_$i35: i32, in_$p36: ref, in_$p37: ref, in_$i26: i32, in_$i57: i32, in_$i58: i1, in_$i59: i32, in_$i60: i32, in_$p61: ref, in_$p62: ref, in_$i63: i8, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$i67: i8, in_$i68: i32, in_$i69: i1, in_$i70: i32, in_$i71: i1, in_$i73: i32, in_$i74: i1, in_$i75: i32, in_$i76: i32, in_$i77: i32, in_$i81: i32, in_$i82: i1, in_$i83: i32, in_$i84: i32, in_$p85: ref, in_$p86: ref, in_$i87: i8, in_$p88: ref, in_$p89: ref, in_$p90: ref, in_$i91: i32, in_$i92: i32, in_$i93: i1, in_$i97: i1, in_$i98: i32, in_$i99: i32, in_$i100: i1, in_$i104: i1, in_$i106: i32, in_$i107: i1, in_$i105: i32) returns (out_$i3: i32, out_$i4: i32, out_$i5: i32, out_$i6: i32, out_$i7: i32, out_$i8: i32, out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$i12: i8, out_$i13: i32, out_$i14: i32, out_$p15: ref, out_$p16: ref, out_$i17: i32, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i32, out_$i23: i32, out_$i24: i32, out_$i25: i1, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: i32, out_$i32: i32, out_$i33: i32, out_$i34: i1, out_$p38: ref, out_$i39: i8, out_$i40: i1, out_$i41: i32, out_$i42: i32, out_$i43: i32, out_$i44: i64, out_$p45: ref, out_$i47: i1, out_$i49: i32, out_$i50: i64, out_$p51: ref, out_$p48: ref, out_$p46: ref, out_$i52: i32, out_$i53: i32, out_$i54: i32, out_$i55: i32, out_$i56: i1, out_$i35: i32, out_$p36: ref, out_$p37: ref, out_$i26: i32, out_$i57: i32, out_$i58: i1, out_$i59: i32, out_$i60: i32, out_$p61: ref, out_$p62: ref, out_$i63: i8, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$i67: i8, out_$i68: i32, out_$i69: i1, out_$i70: i32, out_$i71: i1, out_$i73: i32, out_$i74: i1, out_$i75: i32, out_$i76: i32, out_$i77: i32, out_$i81: i32, out_$i82: i1, out_$i83: i32, out_$i84: i32, out_$p85: ref, out_$p86: ref, out_$i87: i8, out_$p88: ref, out_$p89: ref, out_$p90: ref, out_$i91: i32, out_$i92: i32, out_$i93: i1, out_$i97: i1, out_$i98: i32, out_$i99: i32, out_$i100: i1, out_$i104: i1, out_$i106: i32, out_$i107: i1, out_$i105: i32);
  modifies $M.16, $M.22;



implementation ftdi_elan_respond_engine_loop_$bb62(in_$p0: ref, in_$p58: ref, in_$i136: i32, in_$i137: i64, in_$i138: i1, in_$i141: i32, in_$p142: ref, in_$i143: i64, in_$i144: i64, in_$p145: ref, in_$p146: ref, in_$p147: ref, in_$p148: ref, in_$i149: i64, in_$p150: ref, in_$i151: i8, in_$i152: i32, in_$p153: ref, in_$i154: i64, in_$i155: i64, in_$p156: ref, in_$p157: ref, in_$i158: i32, in_$i159: i1, in_$i162: i32, in_$i163: i1, in_$i160: i8, in_$i161: i32, in_$p63: ref, in_$p139: ref, in_$i140: i32) returns (out_$i136: i32, out_$i137: i64, out_$i138: i1, out_$i141: i32, out_$p142: ref, out_$i143: i64, out_$i144: i64, out_$p145: ref, out_$p146: ref, out_$p147: ref, out_$p148: ref, out_$i149: i64, out_$p150: ref, out_$i151: i8, out_$i152: i32, out_$p153: ref, out_$i154: i64, out_$i155: i64, out_$p156: ref, out_$p157: ref, out_$i158: i32, out_$i159: i1, out_$i162: i32, out_$i163: i1, out_$i160: i8, out_$i161: i32, out_$p139: ref, out_$i140: i32)
{

  entry:
    out_$i136, out_$i137, out_$i138, out_$i141, out_$p142, out_$i143, out_$i144, out_$p145, out_$p146, out_$p147, out_$p148, out_$i149, out_$p150, out_$i151, out_$i152, out_$p153, out_$i154, out_$i155, out_$p156, out_$p157, out_$i158, out_$i159, out_$i162, out_$i163, out_$i160, out_$i161, out_$p139, out_$i140 := in_$i136, in_$i137, in_$i138, in_$i141, in_$p142, in_$i143, in_$i144, in_$p145, in_$p146, in_$p147, in_$p148, in_$i149, in_$p150, in_$i151, in_$i152, in_$p153, in_$i154, in_$i155, in_$p156, in_$p157, in_$i158, in_$i159, in_$i162, in_$i163, in_$i160, in_$i161, in_$p139, in_$i140;
    goto $bb62, exit;

  $bb62:
    assume {:verifier.code 0} true;
    goto corral_source_split_5483;

  $bb60:
    assume out_$i138 == 1;
    assume {:verifier.code 0} true;
    out_$i141 := out_$i136;
    goto $bb60_dummy;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    out_$p139, out_$i140 := in_$p63, out_$i136;
    assume true;
    goto $bb60;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    out_$i138 := $ne.i64(out_$i137, 0);
    goto corral_source_split_5479;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    out_$i137 := $load.i64($M.0, in_$p58);
    goto corral_source_split_5478;

  $bb59:
    assume out_$i163 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_5477;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    out_$i136, out_$i160, out_$i161 := out_$i152, out_$i151, out_$i152;
    assume true;
    goto $bb59;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    out_$i163 := $eq.i32(out_$i162, 255);
    goto corral_source_split_5507;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    out_$i162 := $zext.i8.i32(out_$i151);
    goto corral_source_split_5506;

  $bb63:
    assume out_$i159 == 1;
    goto corral_source_split_5505;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    out_$i160, out_$i161 := out_$i151, out_$i152;
    assume true;
    goto $bb63;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    out_$i159 := $eq.i32(out_$i158, 0);
    goto corral_source_split_5503;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    out_$i158 := $load.i32($M.0, out_$p157);
    goto corral_source_split_5502;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    out_$p157 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(8476, 1));
    goto corral_source_split_5501;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p156, out_$i155);
    goto corral_source_split_5500;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    out_$p156 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7424, 1));
    goto corral_source_split_5499;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    out_$i155 := $sub.i64(out_$i154, 1);
    goto corral_source_split_5498;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    out_$i154 := $load.i64($M.0, out_$p153);
    goto corral_source_split_5497;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    out_$p153 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7424, 1));
    goto corral_source_split_5496;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    out_$i152 := $add.i32(out_$i141, 1);
    call {:si_unique_call 1009} {:cexpr "bytes_read"} boogie_si_record_i32(out_$i152);
    goto corral_source_split_5495;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    out_$i151 := $load.i8($M.0, out_$p150);
    call {:si_unique_call 1008} {:cexpr "c___0"} boogie_si_record_i8(out_$i151);
    goto corral_source_split_5494;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    out_$p150 := $add.ref(out_$p147, $mul.ref(out_$i149, 1));
    goto corral_source_split_5493;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    out_$i149 := $load.i64($M.0, out_$p148);
    goto corral_source_split_5492;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    out_$p148 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7416, 1));
    goto corral_source_split_5491;

  corral_source_split_5489:
    assume {:verifier.code 0} true;
    out_$p147 := $load.ref($M.0, out_$p146);
    goto corral_source_split_5490;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    out_$p146 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7400, 1));
    goto corral_source_split_5489;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p145, out_$i144);
    goto corral_source_split_5488;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    out_$p145 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7416, 1));
    goto corral_source_split_5487;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    out_$i144 := $add.i64(out_$i143, 1);
    goto corral_source_split_5486;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    out_$i143 := $load.i64($M.0, out_$p142);
    goto corral_source_split_5485;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    out_$p142 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7416, 1));
    goto corral_source_split_5484;

  $bb60_dummy:
    call {:si_unique_call 1} out_$i136, out_$i137, out_$i138, out_$i141, out_$p142, out_$i143, out_$i144, out_$p145, out_$p146, out_$p147, out_$p148, out_$i149, out_$p150, out_$i151, out_$i152, out_$p153, out_$i154, out_$i155, out_$p156, out_$p157, out_$i158, out_$i159, out_$i162, out_$i163, out_$i160, out_$i161, out_$p139, out_$i140 := ftdi_elan_respond_engine_loop_$bb62(in_$p0, in_$p58, out_$i136, out_$i137, out_$i138, out_$i141, out_$p142, out_$i143, out_$i144, out_$p145, out_$p146, out_$p147, out_$p148, out_$i149, out_$p150, out_$i151, out_$i152, out_$p153, out_$i154, out_$i155, out_$p156, out_$p157, out_$i158, out_$i159, out_$i162, out_$i163, out_$i160, out_$i161, in_$p63, out_$p139, out_$i140);
    return;

  exit:
    return;
}



procedure ftdi_elan_respond_engine_loop_$bb62(in_$p0: ref, in_$p58: ref, in_$i136: i32, in_$i137: i64, in_$i138: i1, in_$i141: i32, in_$p142: ref, in_$i143: i64, in_$i144: i64, in_$p145: ref, in_$p146: ref, in_$p147: ref, in_$p148: ref, in_$i149: i64, in_$p150: ref, in_$i151: i8, in_$i152: i32, in_$p153: ref, in_$i154: i64, in_$i155: i64, in_$p156: ref, in_$p157: ref, in_$i158: i32, in_$i159: i1, in_$i162: i32, in_$i163: i1, in_$i160: i8, in_$i161: i32, in_$p63: ref, in_$p139: ref, in_$i140: i32) returns (out_$i136: i32, out_$i137: i64, out_$i138: i1, out_$i141: i32, out_$p142: ref, out_$i143: i64, out_$i144: i64, out_$p145: ref, out_$p146: ref, out_$p147: ref, out_$p148: ref, out_$i149: i64, out_$p150: ref, out_$i151: i8, out_$i152: i32, out_$p153: ref, out_$i154: i64, out_$i155: i64, out_$p156: ref, out_$p157: ref, out_$i158: i32, out_$i159: i1, out_$i162: i32, out_$i163: i1, out_$i160: i8, out_$i161: i32, out_$p139: ref, out_$i140: i32);
  modifies $M.0;



implementation ftdi_elan_respond_engine_loop_$bb22(in_$p0: ref, in_$p3: ref, in_$p58: ref, in_$i136: i32, in_$i137: i64, in_$i138: i1, in_$i141: i32, in_$p142: ref, in_$i143: i64, in_$i144: i64, in_$p145: ref, in_$p146: ref, in_$p147: ref, in_$p148: ref, in_$i149: i64, in_$p150: ref, in_$i151: i8, in_$i152: i32, in_$p153: ref, in_$i154: i64, in_$i155: i64, in_$p156: ref, in_$p157: ref, in_$i158: i32, in_$i159: i1, in_$i162: i32, in_$i163: i1, in_$i160: i8, in_$i161: i32, in_$p164: ref, in_$p165: ref, in_$i166: i32, in_$i167: i32, in_$p168: ref, in_$p169: ref, in_$i170: i32, in_$p171: ref, in_$i172: i32, in_$i173: i1, in_$p174: ref, in_$i175: i64, in_$i176: i1, in_$p63: ref, in_$i64: i32, in_$p179: ref, in_$i180: i32, in_$i181: i1, in_$p183: ref, in_$i184: i8, in_$i185: i32, in_$i186: i32, in_$i187: i32, in_$p189: ref, in_$i190: i8, in_$i191: i32, in_$i192: i32, in_$i193: i16, in_$i194: i32, in_$p196: ref, in_$i197: i8, in_$i198: i16, in_$i199: i32, in_$i200: i32, in_$i201: i16, in_$p202: ref, in_$p203: ref, in_$i204: i64, in_$p205: ref, in_$i206: i32, in_$i207: i32, in_$p208: ref, in_$p209: ref, in_$p210: ref, in_$p211: ref, in_$p212: ref, in_$i213: i1, in_$i215: i64, in_$p216: ref, in_$i217: i8, in_$i218: i32, in_$i219: i32, in_$i220: i64, in_$p221: ref, in_$i224: i32, in_$i225: i64, in_$p226: ref, in_$p222: ref, in_$p223: ref, in_$i227: i32, in_$i228: i1, in_$i214: i32, in_$i229: i1, in_$p230: ref, in_$p231: ref, in_$p232: ref, in_$p233: ref, in_$p234: ref, in_$p235: ref, in_$p236: ref, in_$p238: ref, in_$i239: i32, in_$i240: i1, in_$p241: ref, in_$i242: i32, in_$p243: ref, in_$i244: i32, in_$i245: i32, in_$p246: ref, in_$p247: ref, in_$p248: ref, in_$i249: i64, in_$i250: i64, in_$p253: ref, in_$i254: i8, in_$i255: i32, in_$i256: i32, in_$p258: ref, in_$i259: i8, in_$i260: i32, in_$i261: i32, in_$i262: i32, in_$p264: ref, in_$i265: i8, in_$i266: i32, in_$i267: i32, in_$i268: i32, in_$p270: ref, in_$i271: i8, in_$i272: i32, in_$i273: i32, in_$p274: ref, in_$p275: ref, in_$p276: ref, in_$p277: ref, in_$p278: ref, in_$p279: ref, in_$p280: ref, in_$p281: ref, in_$p282: ref, in_$p285: ref, in_$i286: i8, in_$i287: i32, in_$i288: i32, in_$i289: i8, in_$i290: i32, in_$i291: i1, in_$i292: i32, in_$i293: i1, in_$i294: i32, in_$i295: i1, in_$i296: i32, in_$i297: i1, in_$p298: ref, in_$p299: ref, in_$p300: ref, in_$i301: i32, in_$p303: ref, in_$i304: i8, in_$i305: i32, in_$i306: i1, in_$p307: ref, in_$p309: ref, in_$i310: i8, in_$i311: i32, in_$i312: i32, in_$i313: i32, in_$p315: ref, in_$i316: i8, in_$i317: i32, in_$i318: i32, in_$p320: ref, in_$i321: i8, in_$i322: i32, in_$i323: i32, in_$i324: i16, in_$i325: i32, in_$p327: ref, in_$i328: i8, in_$i329: i16, in_$i330: i32, in_$i331: i32, in_$i332: i16, in_$p333: ref, in_$p334: ref, in_$i335: i64, in_$p336: ref, in_$p338: ref, in_$i339: i8, in_$i340: i32, in_$i341: i32, in_$i342: i32, in_$p343: ref, in_$p345: ref, in_$i346: i8, in_$i347: i32, in_$i348: i32, in_$i349: i32, in_$p350: ref, in_$p352: ref, in_$i353: i8, in_$i354: i32, in_$i355: i32, in_$i356: i32, in_$p357: ref, in_$p359: ref, in_$i360: i8, in_$i361: i32, in_$i362: i32, in_$i363: i32, in_$p364: ref, in_$p366: ref, in_$i367: i8, in_$i368: i32, in_$i369: i32, in_$p370: ref, in_$p372: ref, in_$i373: i8, in_$i374: i32, in_$i375: i32, in_$i376: i1, in_$i377: i32, in_$i378: i16, in_$p379: ref, in_$i380: i32, in_$i381: i16, in_$p382: ref, in_$p177: ref, in_$i178: i32, in_$p139: ref, in_$i140: i32, in_$i796: i1, in_$i797: i32, in_$i798: i64, in_$p799: ref, in_$p802: ref, in_$i803: i8, in_$i804: i32, in_$i805: i32, in_$i806: i64, in_$p807: ref, in_$p800: ref, in_$p801: ref, in_$i808: i32, in_$i809: i1, in_$i810: i1, in_$i811: i32, in_$i812: i64, in_$p813: ref, in_$p816: ref, in_$i817: i8, in_$i818: i32, in_$i819: i32, in_$i820: i64, in_$p821: ref, in_$p814: ref, in_$p815: ref, in_$i822: i32, in_$i823: i1, in_$i824: i1, in_$i825: i32, in_$i826: i64, in_$p827: ref, in_$p830: ref, in_$i831: i8, in_$i832: i32, in_$i833: i32, in_$i834: i64, in_$p835: ref, in_$p828: ref, in_$p829: ref, in_$i836: i32, in_$i837: i1, in_$i838: i1, in_$i839: i32, in_$i840: i64, in_$p841: ref, in_$p844: ref, in_$i845: i8, in_$i846: i32, in_$i847: i32, in_$i848: i64, in_$p849: ref, in_$p842: ref, in_$p843: ref, in_$i850: i32, in_$i851: i1, in_$i852: i1, in_$i853: i32, in_$i854: i64, in_$p855: ref, in_$p858: ref, in_$i859: i8, in_$i860: i32, in_$i861: i32, in_$i862: i64, in_$p863: ref, in_$p856: ref, in_$p857: ref, in_$i864: i32, in_$i865: i1, in_$i866: i1, in_$i867: i32, in_$i868: i64, in_$p869: ref, in_$p872: ref, in_$i873: i8, in_$i874: i32, in_$i875: i32, in_$i876: i64, in_$p877: ref, in_$p870: ref, in_$p871: ref, in_$i878: i32, in_$i879: i1, in_$i880: i1, in_$i881: i32, in_$i882: i64, in_$p883: ref, in_$p886: ref, in_$i887: i8, in_$i888: i32, in_$i889: i32, in_$i890: i64, in_$p891: ref, in_$p884: ref, in_$p885: ref, in_$i892: i32, in_$i893: i1, in_$i894: i1, in_$i895: i32, in_$i896: i64, in_$p897: ref, in_$p900: ref, in_$i901: i8, in_$i902: i32, in_$i903: i32, in_$i904: i64, in_$p905: ref, in_$p898: ref, in_$p899: ref, in_$i906: i32, in_$i907: i1, in_$i908: i1, in_$i909: i32, in_$i910: i64, in_$p911: ref, in_$p914: ref, in_$i915: i8, in_$i916: i32, in_$i917: i32, in_$i918: i64, in_$p919: ref, in_$p912: ref, in_$p913: ref, in_$i920: i32, in_$i921: i1, in_$i922: i1, in_$i923: i32, in_$i924: i64, in_$p925: ref, in_$p928: ref, in_$i929: i8, in_$i930: i32, in_$i931: i32, in_$i932: i64, in_$p933: ref, in_$p926: ref, in_$p927: ref, in_$i934: i32, in_$i935: i1, in_$i936: i1, in_$i937: i32, in_$i938: i64, in_$p939: ref, in_$p942: ref, in_$i943: i8, in_$i944: i32, in_$i945: i32, in_$i946: i64, in_$p947: ref, in_$p940: ref, in_$p941: ref, in_$i948: i32, in_$i949: i1, in_$i950: i1, in_$i951: i32, in_$i952: i64, in_$p953: ref, in_$p956: ref, in_$i957: i8, in_$i958: i32, in_$i959: i32, in_$i960: i64, in_$p961: ref, in_$p954: ref, in_$p955: ref, in_$i962: i32, in_$i963: i1, in_$i964: i1, in_$i965: i32, in_$i966: i64, in_$p967: ref, in_$p970: ref, in_$i971: i8, in_$i972: i32, in_$i973: i32, in_$i974: i64, in_$p975: ref, in_$p968: ref, in_$p969: ref, in_$i976: i32, in_$i977: i1, in_$i978: i1, in_$i979: i32, in_$i980: i64, in_$p981: ref, in_$p984: ref, in_$i985: i8, in_$i986: i32, in_$i987: i32, in_$i988: i64, in_$p989: ref, in_$p982: ref, in_$p983: ref, in_$i990: i32, in_$i991: i1, in_$i992: i1, in_$i993: i32, in_$i994: i64, in_$p995: ref, in_$p998: ref, in_$i999: i8, in_$i1000: i32, in_$i1001: i32, in_$i1002: i64, in_$p1003: ref, in_$p996: ref, in_$p997: ref, in_$i1004: i32, in_$i1005: i1, in_$i1006: i1, in_$i1007: i32, in_$i1008: i64, in_$p1009: ref, in_$p1012: ref, in_$i1013: i8, in_$i1014: i32, in_$i1015: i32, in_$i1016: i64, in_$p1017: ref, in_$p1010: ref, in_$p1011: ref, in_$i1018: i32, in_$i1019: i1, in_$i1020: i1, in_$i1021: i32, in_$i1022: i64, in_$p1023: ref, in_$p1026: ref, in_$i1027: i8, in_$i1028: i32, in_$i1029: i32, in_$i1030: i64, in_$p1031: ref, in_$p1024: ref, in_$p1025: ref, in_$i1032: i32, in_$i1033: i1, in_$i1034: i1, in_$i1035: i32, in_$i1036: i64, in_$p1037: ref, in_$p1040: ref, in_$i1041: i8, in_$i1042: i32, in_$i1043: i32, in_$i1044: i64, in_$p1045: ref, in_$p1038: ref, in_$p1039: ref, in_$i1046: i32, in_$i1047: i1, in_$i1048: i1, in_$i1049: i32, in_$i1050: i64, in_$p1051: ref, in_$p1054: ref, in_$i1055: i8, in_$i1056: i32, in_$i1057: i32, in_$i1058: i64, in_$p1059: ref, in_$p1052: ref, in_$p1053: ref, in_$i1060: i32, in_$i1061: i1, in_$i1062: i1, in_$i1063: i32, in_$i1064: i64, in_$p1065: ref, in_$p1068: ref, in_$i1069: i8, in_$i1070: i32, in_$i1071: i32, in_$i1072: i64, in_$p1073: ref, in_$p1066: ref, in_$p1067: ref, in_$i1074: i32, in_$i1075: i1, in_$i1076: i1, in_$i1077: i32, in_$i1078: i64, in_$p1079: ref, in_$p1082: ref, in_$i1083: i8, in_$i1084: i32, in_$i1085: i32, in_$i1086: i64, in_$p1087: ref, in_$p1080: ref, in_$p1081: ref, in_$i1088: i32, in_$i1089: i1, in_$i1090: i1, in_$i1091: i32, in_$i1092: i64, in_$p1093: ref, in_$p1096: ref, in_$i1097: i8, in_$i1098: i32, in_$i1099: i32, in_$i1100: i64, in_$p1101: ref, in_$p1094: ref, in_$p1095: ref, in_$i1102: i32, in_$i1103: i1, in_$i1104: i1, in_$i1105: i32, in_$i1106: i64, in_$p1107: ref, in_$p1110: ref, in_$i1111: i8, in_$i1112: i32, in_$i1113: i32, in_$i1114: i64, in_$p1115: ref, in_$p1108: ref, in_$p1109: ref, in_$i1116: i32, in_$i1117: i1, in_$i1118: i1, in_$i1119: i32, in_$i1120: i64, in_$p1121: ref, in_$p1124: ref, in_$i1125: i8, in_$i1126: i32, in_$i1127: i32, in_$i1128: i64, in_$p1129: ref, in_$p1122: ref, in_$p1123: ref, in_$i1130: i32, in_$i1131: i1, in_$i1132: i1, in_$i1133: i32, in_$i1134: i64, in_$p1135: ref, in_$p1138: ref, in_$i1139: i8, in_$i1140: i32, in_$i1141: i32, in_$i1142: i64, in_$p1143: ref, in_$p1136: ref, in_$p1137: ref, in_$i1144: i32, in_$i1145: i1, in_$i1146: i1, in_$i1147: i32, in_$i1148: i64, in_$p1149: ref, in_$p1152: ref, in_$i1153: i8, in_$i1154: i32, in_$i1155: i32, in_$i1156: i64, in_$p1157: ref, in_$p1150: ref, in_$p1151: ref, in_$i1158: i32, in_$i1159: i1, in_$i1160: i1, in_$i1161: i32, in_$i1162: i64, in_$p1163: ref, in_$p1166: ref, in_$i1167: i8, in_$i1168: i32, in_$i1169: i32, in_$i1170: i64, in_$p1171: ref, in_$p1164: ref, in_$p1165: ref, in_$i1172: i32, in_$i1173: i1, in_$i1174: i1, in_$i1175: i32, in_$i1176: i64, in_$p1177: ref, in_$p1180: ref, in_$i1181: i8, in_$i1182: i32, in_$i1183: i32, in_$i1184: i64, in_$p1185: ref, in_$p1178: ref, in_$p1179: ref, in_$i1186: i32, in_$i1187: i1, in_$i1188: i1, in_$i1189: i32, in_$i1190: i64, in_$p1191: ref, in_$p1194: ref, in_$i1195: i8, in_$i1196: i32, in_$i1197: i32, in_$i1198: i64, in_$p1199: ref, in_$p1192: ref, in_$p1193: ref, in_$i1200: i32, in_$i1201: i1, in_$i1202: i1, in_$i1204: i8, in_$i1205: i32, in_vslice_dummy_var_28: i32, in_vslice_dummy_var_29: i32) returns (out_$i136: i32, out_$i137: i64, out_$i138: i1, out_$i141: i32, out_$p142: ref, out_$i143: i64, out_$i144: i64, out_$p145: ref, out_$p146: ref, out_$p147: ref, out_$p148: ref, out_$i149: i64, out_$p150: ref, out_$i151: i8, out_$i152: i32, out_$p153: ref, out_$i154: i64, out_$i155: i64, out_$p156: ref, out_$p157: ref, out_$i158: i32, out_$i159: i1, out_$i162: i32, out_$i163: i1, out_$i160: i8, out_$i161: i32, out_$p164: ref, out_$p165: ref, out_$i166: i32, out_$i167: i32, out_$p168: ref, out_$p169: ref, out_$i170: i32, out_$p171: ref, out_$i172: i32, out_$i173: i1, out_$p174: ref, out_$i175: i64, out_$i176: i1, out_$p63: ref, out_$i64: i32, out_$p179: ref, out_$i180: i32, out_$i181: i1, out_$p183: ref, out_$i184: i8, out_$i185: i32, out_$i186: i32, out_$i187: i32, out_$p189: ref, out_$i190: i8, out_$i191: i32, out_$i192: i32, out_$i193: i16, out_$i194: i32, out_$p196: ref, out_$i197: i8, out_$i198: i16, out_$i199: i32, out_$i200: i32, out_$i201: i16, out_$p202: ref, out_$p203: ref, out_$i204: i64, out_$p205: ref, out_$i206: i32, out_$i207: i32, out_$p208: ref, out_$p209: ref, out_$p210: ref, out_$p211: ref, out_$p212: ref, out_$i213: i1, out_$i215: i64, out_$p216: ref, out_$i217: i8, out_$i218: i32, out_$i219: i32, out_$i220: i64, out_$p221: ref, out_$i224: i32, out_$i225: i64, out_$p226: ref, out_$p222: ref, out_$p223: ref, out_$i227: i32, out_$i228: i1, out_$i214: i32, out_$i229: i1, out_$p230: ref, out_$p231: ref, out_$p232: ref, out_$p233: ref, out_$p234: ref, out_$p235: ref, out_$p236: ref, out_$p238: ref, out_$i239: i32, out_$i240: i1, out_$p241: ref, out_$i242: i32, out_$p243: ref, out_$i244: i32, out_$i245: i32, out_$p246: ref, out_$p247: ref, out_$p248: ref, out_$i249: i64, out_$i250: i64, out_$p253: ref, out_$i254: i8, out_$i255: i32, out_$i256: i32, out_$p258: ref, out_$i259: i8, out_$i260: i32, out_$i261: i32, out_$i262: i32, out_$p264: ref, out_$i265: i8, out_$i266: i32, out_$i267: i32, out_$i268: i32, out_$p270: ref, out_$i271: i8, out_$i272: i32, out_$i273: i32, out_$p274: ref, out_$p275: ref, out_$p276: ref, out_$p277: ref, out_$p278: ref, out_$p279: ref, out_$p280: ref, out_$p281: ref, out_$p282: ref, out_$p285: ref, out_$i286: i8, out_$i287: i32, out_$i288: i32, out_$i289: i8, out_$i290: i32, out_$i291: i1, out_$i292: i32, out_$i293: i1, out_$i294: i32, out_$i295: i1, out_$i296: i32, out_$i297: i1, out_$p298: ref, out_$p299: ref, out_$p300: ref, out_$i301: i32, out_$p303: ref, out_$i304: i8, out_$i305: i32, out_$i306: i1, out_$p307: ref, out_$p309: ref, out_$i310: i8, out_$i311: i32, out_$i312: i32, out_$i313: i32, out_$p315: ref, out_$i316: i8, out_$i317: i32, out_$i318: i32, out_$p320: ref, out_$i321: i8, out_$i322: i32, out_$i323: i32, out_$i324: i16, out_$i325: i32, out_$p327: ref, out_$i328: i8, out_$i329: i16, out_$i330: i32, out_$i331: i32, out_$i332: i16, out_$p333: ref, out_$p334: ref, out_$i335: i64, out_$p336: ref, out_$p338: ref, out_$i339: i8, out_$i340: i32, out_$i341: i32, out_$i342: i32, out_$p343: ref, out_$p345: ref, out_$i346: i8, out_$i347: i32, out_$i348: i32, out_$i349: i32, out_$p350: ref, out_$p352: ref, out_$i353: i8, out_$i354: i32, out_$i355: i32, out_$i356: i32, out_$p357: ref, out_$p359: ref, out_$i360: i8, out_$i361: i32, out_$i362: i32, out_$i363: i32, out_$p364: ref, out_$p366: ref, out_$i367: i8, out_$i368: i32, out_$i369: i32, out_$p370: ref, out_$p372: ref, out_$i373: i8, out_$i374: i32, out_$i375: i32, out_$i376: i1, out_$i377: i32, out_$i378: i16, out_$p379: ref, out_$i380: i32, out_$i381: i16, out_$p382: ref, out_$p177: ref, out_$i178: i32, out_$p139: ref, out_$i140: i32, out_$i796: i1, out_$i797: i32, out_$i798: i64, out_$p799: ref, out_$p802: ref, out_$i803: i8, out_$i804: i32, out_$i805: i32, out_$i806: i64, out_$p807: ref, out_$p800: ref, out_$p801: ref, out_$i808: i32, out_$i809: i1, out_$i810: i1, out_$i811: i32, out_$i812: i64, out_$p813: ref, out_$p816: ref, out_$i817: i8, out_$i818: i32, out_$i819: i32, out_$i820: i64, out_$p821: ref, out_$p814: ref, out_$p815: ref, out_$i822: i32, out_$i823: i1, out_$i824: i1, out_$i825: i32, out_$i826: i64, out_$p827: ref, out_$p830: ref, out_$i831: i8, out_$i832: i32, out_$i833: i32, out_$i834: i64, out_$p835: ref, out_$p828: ref, out_$p829: ref, out_$i836: i32, out_$i837: i1, out_$i838: i1, out_$i839: i32, out_$i840: i64, out_$p841: ref, out_$p844: ref, out_$i845: i8, out_$i846: i32, out_$i847: i32, out_$i848: i64, out_$p849: ref, out_$p842: ref, out_$p843: ref, out_$i850: i32, out_$i851: i1, out_$i852: i1, out_$i853: i32, out_$i854: i64, out_$p855: ref, out_$p858: ref, out_$i859: i8, out_$i860: i32, out_$i861: i32, out_$i862: i64, out_$p863: ref, out_$p856: ref, out_$p857: ref, out_$i864: i32, out_$i865: i1, out_$i866: i1, out_$i867: i32, out_$i868: i64, out_$p869: ref, out_$p872: ref, out_$i873: i8, out_$i874: i32, out_$i875: i32, out_$i876: i64, out_$p877: ref, out_$p870: ref, out_$p871: ref, out_$i878: i32, out_$i879: i1, out_$i880: i1, out_$i881: i32, out_$i882: i64, out_$p883: ref, out_$p886: ref, out_$i887: i8, out_$i888: i32, out_$i889: i32, out_$i890: i64, out_$p891: ref, out_$p884: ref, out_$p885: ref, out_$i892: i32, out_$i893: i1, out_$i894: i1, out_$i895: i32, out_$i896: i64, out_$p897: ref, out_$p900: ref, out_$i901: i8, out_$i902: i32, out_$i903: i32, out_$i904: i64, out_$p905: ref, out_$p898: ref, out_$p899: ref, out_$i906: i32, out_$i907: i1, out_$i908: i1, out_$i909: i32, out_$i910: i64, out_$p911: ref, out_$p914: ref, out_$i915: i8, out_$i916: i32, out_$i917: i32, out_$i918: i64, out_$p919: ref, out_$p912: ref, out_$p913: ref, out_$i920: i32, out_$i921: i1, out_$i922: i1, out_$i923: i32, out_$i924: i64, out_$p925: ref, out_$p928: ref, out_$i929: i8, out_$i930: i32, out_$i931: i32, out_$i932: i64, out_$p933: ref, out_$p926: ref, out_$p927: ref, out_$i934: i32, out_$i935: i1, out_$i936: i1, out_$i937: i32, out_$i938: i64, out_$p939: ref, out_$p942: ref, out_$i943: i8, out_$i944: i32, out_$i945: i32, out_$i946: i64, out_$p947: ref, out_$p940: ref, out_$p941: ref, out_$i948: i32, out_$i949: i1, out_$i950: i1, out_$i951: i32, out_$i952: i64, out_$p953: ref, out_$p956: ref, out_$i957: i8, out_$i958: i32, out_$i959: i32, out_$i960: i64, out_$p961: ref, out_$p954: ref, out_$p955: ref, out_$i962: i32, out_$i963: i1, out_$i964: i1, out_$i965: i32, out_$i966: i64, out_$p967: ref, out_$p970: ref, out_$i971: i8, out_$i972: i32, out_$i973: i32, out_$i974: i64, out_$p975: ref, out_$p968: ref, out_$p969: ref, out_$i976: i32, out_$i977: i1, out_$i978: i1, out_$i979: i32, out_$i980: i64, out_$p981: ref, out_$p984: ref, out_$i985: i8, out_$i986: i32, out_$i987: i32, out_$i988: i64, out_$p989: ref, out_$p982: ref, out_$p983: ref, out_$i990: i32, out_$i991: i1, out_$i992: i1, out_$i993: i32, out_$i994: i64, out_$p995: ref, out_$p998: ref, out_$i999: i8, out_$i1000: i32, out_$i1001: i32, out_$i1002: i64, out_$p1003: ref, out_$p996: ref, out_$p997: ref, out_$i1004: i32, out_$i1005: i1, out_$i1006: i1, out_$i1007: i32, out_$i1008: i64, out_$p1009: ref, out_$p1012: ref, out_$i1013: i8, out_$i1014: i32, out_$i1015: i32, out_$i1016: i64, out_$p1017: ref, out_$p1010: ref, out_$p1011: ref, out_$i1018: i32, out_$i1019: i1, out_$i1020: i1, out_$i1021: i32, out_$i1022: i64, out_$p1023: ref, out_$p1026: ref, out_$i1027: i8, out_$i1028: i32, out_$i1029: i32, out_$i1030: i64, out_$p1031: ref, out_$p1024: ref, out_$p1025: ref, out_$i1032: i32, out_$i1033: i1, out_$i1034: i1, out_$i1035: i32, out_$i1036: i64, out_$p1037: ref, out_$p1040: ref, out_$i1041: i8, out_$i1042: i32, out_$i1043: i32, out_$i1044: i64, out_$p1045: ref, out_$p1038: ref, out_$p1039: ref, out_$i1046: i32, out_$i1047: i1, out_$i1048: i1, out_$i1049: i32, out_$i1050: i64, out_$p1051: ref, out_$p1054: ref, out_$i1055: i8, out_$i1056: i32, out_$i1057: i32, out_$i1058: i64, out_$p1059: ref, out_$p1052: ref, out_$p1053: ref, out_$i1060: i32, out_$i1061: i1, out_$i1062: i1, out_$i1063: i32, out_$i1064: i64, out_$p1065: ref, out_$p1068: ref, out_$i1069: i8, out_$i1070: i32, out_$i1071: i32, out_$i1072: i64, out_$p1073: ref, out_$p1066: ref, out_$p1067: ref, out_$i1074: i32, out_$i1075: i1, out_$i1076: i1, out_$i1077: i32, out_$i1078: i64, out_$p1079: ref, out_$p1082: ref, out_$i1083: i8, out_$i1084: i32, out_$i1085: i32, out_$i1086: i64, out_$p1087: ref, out_$p1080: ref, out_$p1081: ref, out_$i1088: i32, out_$i1089: i1, out_$i1090: i1, out_$i1091: i32, out_$i1092: i64, out_$p1093: ref, out_$p1096: ref, out_$i1097: i8, out_$i1098: i32, out_$i1099: i32, out_$i1100: i64, out_$p1101: ref, out_$p1094: ref, out_$p1095: ref, out_$i1102: i32, out_$i1103: i1, out_$i1104: i1, out_$i1105: i32, out_$i1106: i64, out_$p1107: ref, out_$p1110: ref, out_$i1111: i8, out_$i1112: i32, out_$i1113: i32, out_$i1114: i64, out_$p1115: ref, out_$p1108: ref, out_$p1109: ref, out_$i1116: i32, out_$i1117: i1, out_$i1118: i1, out_$i1119: i32, out_$i1120: i64, out_$p1121: ref, out_$p1124: ref, out_$i1125: i8, out_$i1126: i32, out_$i1127: i32, out_$i1128: i64, out_$p1129: ref, out_$p1122: ref, out_$p1123: ref, out_$i1130: i32, out_$i1131: i1, out_$i1132: i1, out_$i1133: i32, out_$i1134: i64, out_$p1135: ref, out_$p1138: ref, out_$i1139: i8, out_$i1140: i32, out_$i1141: i32, out_$i1142: i64, out_$p1143: ref, out_$p1136: ref, out_$p1137: ref, out_$i1144: i32, out_$i1145: i1, out_$i1146: i1, out_$i1147: i32, out_$i1148: i64, out_$p1149: ref, out_$p1152: ref, out_$i1153: i8, out_$i1154: i32, out_$i1155: i32, out_$i1156: i64, out_$p1157: ref, out_$p1150: ref, out_$p1151: ref, out_$i1158: i32, out_$i1159: i1, out_$i1160: i1, out_$i1161: i32, out_$i1162: i64, out_$p1163: ref, out_$p1166: ref, out_$i1167: i8, out_$i1168: i32, out_$i1169: i32, out_$i1170: i64, out_$p1171: ref, out_$p1164: ref, out_$p1165: ref, out_$i1172: i32, out_$i1173: i1, out_$i1174: i1, out_$i1175: i32, out_$i1176: i64, out_$p1177: ref, out_$p1180: ref, out_$i1181: i8, out_$i1182: i32, out_$i1183: i32, out_$i1184: i64, out_$p1185: ref, out_$p1178: ref, out_$p1179: ref, out_$i1186: i32, out_$i1187: i1, out_$i1188: i1, out_$i1189: i32, out_$i1190: i64, out_$p1191: ref, out_$p1194: ref, out_$i1195: i8, out_$i1196: i32, out_$i1197: i32, out_$i1198: i64, out_$p1199: ref, out_$p1192: ref, out_$p1193: ref, out_$i1200: i32, out_$i1201: i1, out_$i1202: i1, out_$i1204: i8, out_$i1205: i32, out_vslice_dummy_var_28: i32, out_vslice_dummy_var_29: i32)
{

  entry:
    out_$i136, out_$i137, out_$i138, out_$i141, out_$p142, out_$i143, out_$i144, out_$p145, out_$p146, out_$p147, out_$p148, out_$i149, out_$p150, out_$i151, out_$i152, out_$p153, out_$i154, out_$i155, out_$p156, out_$p157, out_$i158, out_$i159, out_$i162, out_$i163, out_$i160, out_$i161, out_$p164, out_$p165, out_$i166, out_$i167, out_$p168, out_$p169, out_$i170, out_$p171, out_$i172, out_$i173, out_$p174, out_$i175, out_$i176, out_$p63, out_$i64, out_$p179, out_$i180, out_$i181, out_$p183, out_$i184, out_$i185, out_$i186, out_$i187, out_$p189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$p196, out_$i197, out_$i198, out_$i199, out_$i200, out_$i201, out_$p202, out_$p203, out_$i204, out_$p205, out_$i206, out_$i207, out_$p208, out_$p209, out_$p210, out_$p211, out_$p212, out_$i213, out_$i215, out_$p216, out_$i217, out_$i218, out_$i219, out_$i220, out_$p221, out_$i224, out_$i225, out_$p226, out_$p222, out_$p223, out_$i227, out_$i228, out_$i214, out_$i229, out_$p230, out_$p231, out_$p232, out_$p233, out_$p234, out_$p235, out_$p236, out_$p238, out_$i239, out_$i240, out_$p241, out_$i242, out_$p243, out_$i244, out_$i245, out_$p246, out_$p247, out_$p248, out_$i249, out_$i250, out_$p253, out_$i254, out_$i255, out_$i256, out_$p258, out_$i259, out_$i260, out_$i261, out_$i262, out_$p264, out_$i265, out_$i266, out_$i267, out_$i268, out_$p270, out_$i271, out_$i272, out_$i273, out_$p274, out_$p275, out_$p276, out_$p277, out_$p278, out_$p279, out_$p280, out_$p281, out_$p282, out_$p285, out_$i286, out_$i287, out_$i288, out_$i289, out_$i290, out_$i291, out_$i292, out_$i293, out_$i294, out_$i295, out_$i296, out_$i297, out_$p298, out_$p299, out_$p300, out_$i301, out_$p303, out_$i304, out_$i305, out_$i306, out_$p307, out_$p309, out_$i310, out_$i311, out_$i312, out_$i313, out_$p315, out_$i316, out_$i317, out_$i318, out_$p320, out_$i321, out_$i322, out_$i323, out_$i324, out_$i325, out_$p327, out_$i328, out_$i329, out_$i330, out_$i331, out_$i332, out_$p333, out_$p334, out_$i335, out_$p336, out_$p338, out_$i339, out_$i340, out_$i341, out_$i342, out_$p343, out_$p345, out_$i346, out_$i347, out_$i348, out_$i349, out_$p350, out_$p352, out_$i353, out_$i354, out_$i355, out_$i356, out_$p357, out_$p359, out_$i360, out_$i361, out_$i362, out_$i363, out_$p364, out_$p366, out_$i367, out_$i368, out_$i369, out_$p370, out_$p372, out_$i373, out_$i374, out_$i375, out_$i376, out_$i377, out_$i378, out_$p379, out_$i380, out_$i381, out_$p382, out_$p177, out_$i178, out_$p139, out_$i140, out_$i796, out_$i797, out_$i798, out_$p799, out_$p802, out_$i803, out_$i804, out_$i805, out_$i806, out_$p807, out_$p800, out_$p801, out_$i808, out_$i809, out_$i810, out_$i811, out_$i812, out_$p813, out_$p816, out_$i817, out_$i818, out_$i819, out_$i820, out_$p821, out_$p814, out_$p815, out_$i822, out_$i823, out_$i824, out_$i825, out_$i826, out_$p827, out_$p830, out_$i831, out_$i832, out_$i833, out_$i834, out_$p835, out_$p828, out_$p829, out_$i836, out_$i837, out_$i838, out_$i839, out_$i840, out_$p841, out_$p844, out_$i845, out_$i846, out_$i847, out_$i848, out_$p849, out_$p842, out_$p843, out_$i850, out_$i851, out_$i852, out_$i853, out_$i854, out_$p855, out_$p858, out_$i859, out_$i860, out_$i861, out_$i862, out_$p863, out_$p856, out_$p857, out_$i864, out_$i865, out_$i866, out_$i867, out_$i868, out_$p869, out_$p872, out_$i873, out_$i874, out_$i875, out_$i876, out_$p877, out_$p870, out_$p871, out_$i878, out_$i879, out_$i880, out_$i881, out_$i882, out_$p883, out_$p886, out_$i887, out_$i888, out_$i889, out_$i890, out_$p891, out_$p884, out_$p885, out_$i892, out_$i893, out_$i894, out_$i895, out_$i896, out_$p897, out_$p900, out_$i901, out_$i902, out_$i903, out_$i904, out_$p905, out_$p898, out_$p899, out_$i906, out_$i907, out_$i908, out_$i909, out_$i910, out_$p911, out_$p914, out_$i915, out_$i916, out_$i917, out_$i918, out_$p919, out_$p912, out_$p913, out_$i920, out_$i921, out_$i922, out_$i923, out_$i924, out_$p925, out_$p928, out_$i929, out_$i930, out_$i931, out_$i932, out_$p933, out_$p926, out_$p927, out_$i934, out_$i935, out_$i936, out_$i937, out_$i938, out_$p939, out_$p942, out_$i943, out_$i944, out_$i945, out_$i946, out_$p947, out_$p940, out_$p941, out_$i948, out_$i949, out_$i950, out_$i951, out_$i952, out_$p953, out_$p956, out_$i957, out_$i958, out_$i959, out_$i960, out_$p961, out_$p954, out_$p955, out_$i962, out_$i963, out_$i964, out_$i965, out_$i966, out_$p967, out_$p970, out_$i971, out_$i972, out_$i973, out_$i974, out_$p975, out_$p968, out_$p969, out_$i976, out_$i977, out_$i978, out_$i979, out_$i980, out_$p981, out_$p984, out_$i985, out_$i986, out_$i987, out_$i988, out_$p989, out_$p982, out_$p983, out_$i990, out_$i991, out_$i992, out_$i993, out_$i994, out_$p995, out_$p998, out_$i999, out_$i1000, out_$i1001, out_$i1002, out_$p1003, out_$p996, out_$p997, out_$i1004, out_$i1005, out_$i1006, out_$i1007, out_$i1008, out_$p1009, out_$p1012, out_$i1013, out_$i1014, out_$i1015, out_$i1016, out_$p1017, out_$p1010, out_$p1011, out_$i1018, out_$i1019, out_$i1020, out_$i1021, out_$i1022, out_$p1023, out_$p1026, out_$i1027, out_$i1028, out_$i1029, out_$i1030, out_$p1031, out_$p1024, out_$p1025, out_$i1032, out_$i1033, out_$i1034, out_$i1035, out_$i1036, out_$p1037, out_$p1040, out_$i1041, out_$i1042, out_$i1043, out_$i1044, out_$p1045, out_$p1038, out_$p1039, out_$i1046, out_$i1047, out_$i1048, out_$i1049, out_$i1050, out_$p1051, out_$p1054, out_$i1055, out_$i1056, out_$i1057, out_$i1058, out_$p1059, out_$p1052, out_$p1053, out_$i1060, out_$i1061, out_$i1062, out_$i1063, out_$i1064, out_$p1065, out_$p1068, out_$i1069, out_$i1070, out_$i1071, out_$i1072, out_$p1073, out_$p1066, out_$p1067, out_$i1074, out_$i1075, out_$i1076, out_$i1077, out_$i1078, out_$p1079, out_$p1082, out_$i1083, out_$i1084, out_$i1085, out_$i1086, out_$p1087, out_$p1080, out_$p1081, out_$i1088, out_$i1089, out_$i1090, out_$i1091, out_$i1092, out_$p1093, out_$p1096, out_$i1097, out_$i1098, out_$i1099, out_$i1100, out_$p1101, out_$p1094, out_$p1095, out_$i1102, out_$i1103, out_$i1104, out_$i1105, out_$i1106, out_$p1107, out_$p1110, out_$i1111, out_$i1112, out_$i1113, out_$i1114, out_$p1115, out_$p1108, out_$p1109, out_$i1116, out_$i1117, out_$i1118, out_$i1119, out_$i1120, out_$p1121, out_$p1124, out_$i1125, out_$i1126, out_$i1127, out_$i1128, out_$p1129, out_$p1122, out_$p1123, out_$i1130, out_$i1131, out_$i1132, out_$i1133, out_$i1134, out_$p1135, out_$p1138, out_$i1139, out_$i1140, out_$i1141, out_$i1142, out_$p1143, out_$p1136, out_$p1137, out_$i1144, out_$i1145, out_$i1146, out_$i1147, out_$i1148, out_$p1149, out_$p1152, out_$i1153, out_$i1154, out_$i1155, out_$i1156, out_$p1157, out_$p1150, out_$p1151, out_$i1158, out_$i1159, out_$i1160, out_$i1161, out_$i1162, out_$p1163, out_$p1166, out_$i1167, out_$i1168, out_$i1169, out_$i1170, out_$p1171, out_$p1164, out_$p1165, out_$i1172, out_$i1173, out_$i1174, out_$i1175, out_$i1176, out_$p1177, out_$p1180, out_$i1181, out_$i1182, out_$i1183, out_$i1184, out_$p1185, out_$p1178, out_$p1179, out_$i1186, out_$i1187, out_$i1188, out_$i1189, out_$i1190, out_$p1191, out_$p1194, out_$i1195, out_$i1196, out_$i1197, out_$i1198, out_$p1199, out_$p1192, out_$p1193, out_$i1200, out_$i1201, out_$i1202, out_$i1204, out_$i1205, out_vslice_dummy_var_28, out_vslice_dummy_var_29 := in_$i136, in_$i137, in_$i138, in_$i141, in_$p142, in_$i143, in_$i144, in_$p145, in_$p146, in_$p147, in_$p148, in_$i149, in_$p150, in_$i151, in_$i152, in_$p153, in_$i154, in_$i155, in_$p156, in_$p157, in_$i158, in_$i159, in_$i162, in_$i163, in_$i160, in_$i161, in_$p164, in_$p165, in_$i166, in_$i167, in_$p168, in_$p169, in_$i170, in_$p171, in_$i172, in_$i173, in_$p174, in_$i175, in_$i176, in_$p63, in_$i64, in_$p179, in_$i180, in_$i181, in_$p183, in_$i184, in_$i185, in_$i186, in_$i187, in_$p189, in_$i190, in_$i191, in_$i192, in_$i193, in_$i194, in_$p196, in_$i197, in_$i198, in_$i199, in_$i200, in_$i201, in_$p202, in_$p203, in_$i204, in_$p205, in_$i206, in_$i207, in_$p208, in_$p209, in_$p210, in_$p211, in_$p212, in_$i213, in_$i215, in_$p216, in_$i217, in_$i218, in_$i219, in_$i220, in_$p221, in_$i224, in_$i225, in_$p226, in_$p222, in_$p223, in_$i227, in_$i228, in_$i214, in_$i229, in_$p230, in_$p231, in_$p232, in_$p233, in_$p234, in_$p235, in_$p236, in_$p238, in_$i239, in_$i240, in_$p241, in_$i242, in_$p243, in_$i244, in_$i245, in_$p246, in_$p247, in_$p248, in_$i249, in_$i250, in_$p253, in_$i254, in_$i255, in_$i256, in_$p258, in_$i259, in_$i260, in_$i261, in_$i262, in_$p264, in_$i265, in_$i266, in_$i267, in_$i268, in_$p270, in_$i271, in_$i272, in_$i273, in_$p274, in_$p275, in_$p276, in_$p277, in_$p278, in_$p279, in_$p280, in_$p281, in_$p282, in_$p285, in_$i286, in_$i287, in_$i288, in_$i289, in_$i290, in_$i291, in_$i292, in_$i293, in_$i294, in_$i295, in_$i296, in_$i297, in_$p298, in_$p299, in_$p300, in_$i301, in_$p303, in_$i304, in_$i305, in_$i306, in_$p307, in_$p309, in_$i310, in_$i311, in_$i312, in_$i313, in_$p315, in_$i316, in_$i317, in_$i318, in_$p320, in_$i321, in_$i322, in_$i323, in_$i324, in_$i325, in_$p327, in_$i328, in_$i329, in_$i330, in_$i331, in_$i332, in_$p333, in_$p334, in_$i335, in_$p336, in_$p338, in_$i339, in_$i340, in_$i341, in_$i342, in_$p343, in_$p345, in_$i346, in_$i347, in_$i348, in_$i349, in_$p350, in_$p352, in_$i353, in_$i354, in_$i355, in_$i356, in_$p357, in_$p359, in_$i360, in_$i361, in_$i362, in_$i363, in_$p364, in_$p366, in_$i367, in_$i368, in_$i369, in_$p370, in_$p372, in_$i373, in_$i374, in_$i375, in_$i376, in_$i377, in_$i378, in_$p379, in_$i380, in_$i381, in_$p382, in_$p177, in_$i178, in_$p139, in_$i140, in_$i796, in_$i797, in_$i798, in_$p799, in_$p802, in_$i803, in_$i804, in_$i805, in_$i806, in_$p807, in_$p800, in_$p801, in_$i808, in_$i809, in_$i810, in_$i811, in_$i812, in_$p813, in_$p816, in_$i817, in_$i818, in_$i819, in_$i820, in_$p821, in_$p814, in_$p815, in_$i822, in_$i823, in_$i824, in_$i825, in_$i826, in_$p827, in_$p830, in_$i831, in_$i832, in_$i833, in_$i834, in_$p835, in_$p828, in_$p829, in_$i836, in_$i837, in_$i838, in_$i839, in_$i840, in_$p841, in_$p844, in_$i845, in_$i846, in_$i847, in_$i848, in_$p849, in_$p842, in_$p843, in_$i850, in_$i851, in_$i852, in_$i853, in_$i854, in_$p855, in_$p858, in_$i859, in_$i860, in_$i861, in_$i862, in_$p863, in_$p856, in_$p857, in_$i864, in_$i865, in_$i866, in_$i867, in_$i868, in_$p869, in_$p872, in_$i873, in_$i874, in_$i875, in_$i876, in_$p877, in_$p870, in_$p871, in_$i878, in_$i879, in_$i880, in_$i881, in_$i882, in_$p883, in_$p886, in_$i887, in_$i888, in_$i889, in_$i890, in_$p891, in_$p884, in_$p885, in_$i892, in_$i893, in_$i894, in_$i895, in_$i896, in_$p897, in_$p900, in_$i901, in_$i902, in_$i903, in_$i904, in_$p905, in_$p898, in_$p899, in_$i906, in_$i907, in_$i908, in_$i909, in_$i910, in_$p911, in_$p914, in_$i915, in_$i916, in_$i917, in_$i918, in_$p919, in_$p912, in_$p913, in_$i920, in_$i921, in_$i922, in_$i923, in_$i924, in_$p925, in_$p928, in_$i929, in_$i930, in_$i931, in_$i932, in_$p933, in_$p926, in_$p927, in_$i934, in_$i935, in_$i936, in_$i937, in_$i938, in_$p939, in_$p942, in_$i943, in_$i944, in_$i945, in_$i946, in_$p947, in_$p940, in_$p941, in_$i948, in_$i949, in_$i950, in_$i951, in_$i952, in_$p953, in_$p956, in_$i957, in_$i958, in_$i959, in_$i960, in_$p961, in_$p954, in_$p955, in_$i962, in_$i963, in_$i964, in_$i965, in_$i966, in_$p967, in_$p970, in_$i971, in_$i972, in_$i973, in_$i974, in_$p975, in_$p968, in_$p969, in_$i976, in_$i977, in_$i978, in_$i979, in_$i980, in_$p981, in_$p984, in_$i985, in_$i986, in_$i987, in_$i988, in_$p989, in_$p982, in_$p983, in_$i990, in_$i991, in_$i992, in_$i993, in_$i994, in_$p995, in_$p998, in_$i999, in_$i1000, in_$i1001, in_$i1002, in_$p1003, in_$p996, in_$p997, in_$i1004, in_$i1005, in_$i1006, in_$i1007, in_$i1008, in_$p1009, in_$p1012, in_$i1013, in_$i1014, in_$i1015, in_$i1016, in_$p1017, in_$p1010, in_$p1011, in_$i1018, in_$i1019, in_$i1020, in_$i1021, in_$i1022, in_$p1023, in_$p1026, in_$i1027, in_$i1028, in_$i1029, in_$i1030, in_$p1031, in_$p1024, in_$p1025, in_$i1032, in_$i1033, in_$i1034, in_$i1035, in_$i1036, in_$p1037, in_$p1040, in_$i1041, in_$i1042, in_$i1043, in_$i1044, in_$p1045, in_$p1038, in_$p1039, in_$i1046, in_$i1047, in_$i1048, in_$i1049, in_$i1050, in_$p1051, in_$p1054, in_$i1055, in_$i1056, in_$i1057, in_$i1058, in_$p1059, in_$p1052, in_$p1053, in_$i1060, in_$i1061, in_$i1062, in_$i1063, in_$i1064, in_$p1065, in_$p1068, in_$i1069, in_$i1070, in_$i1071, in_$i1072, in_$p1073, in_$p1066, in_$p1067, in_$i1074, in_$i1075, in_$i1076, in_$i1077, in_$i1078, in_$p1079, in_$p1082, in_$i1083, in_$i1084, in_$i1085, in_$i1086, in_$p1087, in_$p1080, in_$p1081, in_$i1088, in_$i1089, in_$i1090, in_$i1091, in_$i1092, in_$p1093, in_$p1096, in_$i1097, in_$i1098, in_$i1099, in_$i1100, in_$p1101, in_$p1094, in_$p1095, in_$i1102, in_$i1103, in_$i1104, in_$i1105, in_$i1106, in_$p1107, in_$p1110, in_$i1111, in_$i1112, in_$i1113, in_$i1114, in_$p1115, in_$p1108, in_$p1109, in_$i1116, in_$i1117, in_$i1118, in_$i1119, in_$i1120, in_$p1121, in_$p1124, in_$i1125, in_$i1126, in_$i1127, in_$i1128, in_$p1129, in_$p1122, in_$p1123, in_$i1130, in_$i1131, in_$i1132, in_$i1133, in_$i1134, in_$p1135, in_$p1138, in_$i1139, in_$i1140, in_$i1141, in_$i1142, in_$p1143, in_$p1136, in_$p1137, in_$i1144, in_$i1145, in_$i1146, in_$i1147, in_$i1148, in_$p1149, in_$p1152, in_$i1153, in_$i1154, in_$i1155, in_$i1156, in_$p1157, in_$p1150, in_$p1151, in_$i1158, in_$i1159, in_$i1160, in_$i1161, in_$i1162, in_$p1163, in_$p1166, in_$i1167, in_$i1168, in_$i1169, in_$i1170, in_$p1171, in_$p1164, in_$p1165, in_$i1172, in_$i1173, in_$i1174, in_$i1175, in_$i1176, in_$p1177, in_$p1180, in_$i1181, in_$i1182, in_$i1183, in_$i1184, in_$p1185, in_$p1178, in_$p1179, in_$i1186, in_$i1187, in_$i1188, in_$i1189, in_$i1190, in_$p1191, in_$p1194, in_$i1195, in_$i1196, in_$i1197, in_$i1198, in_$p1199, in_$p1192, in_$p1193, in_$i1200, in_$i1201, in_$i1202, in_$i1204, in_$i1205, in_vslice_dummy_var_28, in_vslice_dummy_var_29;
    goto $bb22, exit;

  $bb22:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5349;

  $bb71:
    assume out_$i176 == 1;
    assume {:verifier.code 0} true;
    out_$p63, out_$i64 := out_$p174, out_$i161;
    goto $bb71_dummy;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    out_$p177, out_$i178 := out_$p174, out_$i161;
    assume true;
    goto $bb71;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    out_$i176 := $ne.i64(out_$i175, 0);
    goto corral_source_split_5532;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    out_$i175 := $load.i64($M.0, in_$p58);
    goto corral_source_split_5531;

  $bb70:
    assume {:verifier.code 0} true;
    goto corral_source_split_5530;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    out_$p174 := out_$p382;
    goto $bb70;

  corral_source_split_5771:
    assume {:verifier.code 0} true;
    out_$p174 := out_$p379;
    goto $bb70;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    out_$p174 := out_$p164;
    goto $bb70;

  $bb94:
    assume {:verifier.code 0} true;
    out_$p174 := out_$p282;
    goto $bb70;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    out_$p174 := out_$p236;
    goto $bb70;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    out_$p174 := out_$p164;
    goto $bb70;

  $bb68:
    assume out_$i173 == 1;
    goto corral_source_split_5523;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    out_$i173 := $slt.i32(out_$i170, out_$i172);
    goto corral_source_split_5521;

  corral_source_split_5519:
    assume {:verifier.code 0} true;
    out_$i172 := $load.i32($M.0, out_$p171);
    goto corral_source_split_5520;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    out_$p171 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(8472, 1));
    goto corral_source_split_5519;

  corral_source_split_5517:
    assume {:verifier.code 0} true;
    out_$i170 := $load.i32($M.0, out_$p169);
    goto corral_source_split_5518;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    out_$p169 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(8476, 1));
    goto corral_source_split_5517;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p168, out_$i167);
    goto corral_source_split_5516;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    out_$p168 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(8476, 1));
    goto corral_source_split_5515;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    out_$i167 := $add.i32(out_$i166, 1);
    goto corral_source_split_5514;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    out_$i166 := $load.i32($M.0, out_$p165);
    goto corral_source_split_5513;

  $bb67:
    assume {:verifier.code 0} true;
    out_$p165 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(8476, 1));
    goto corral_source_split_5512;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p63, out_$i160);
    assume {:verifier.code 0} true;
    goto $bb67;

  corral_source_split_5509:
    assume {:verifier.code 0} true;
    out_$p164 := $add.ref(out_$p63, $mul.ref(1, 1));
    goto corral_source_split_5510;

  $bb65:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5509;

  $bb64:
    assume {:verifier.code 0} true;
    assume !(out_$i159 == 1);
    goto $bb65;

  $bb66:
    assume {:verifier.code 0} true;
    assume !(out_$i163 == 1);
    goto $bb65;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    out_$i136, out_$i160, out_$i161 := out_$i152, out_$i151, out_$i152;
    assume true;
    goto $bb59, $bb66;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    out_$i163 := $eq.i32(out_$i162, 255);
    goto corral_source_split_5507;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    out_$i162 := $zext.i8.i32(out_$i151);
    goto corral_source_split_5506;

  $bb63:
    assume out_$i159 == 1;
    goto corral_source_split_5505;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    out_$i160, out_$i161 := out_$i151, out_$i152;
    assume true;
    goto $bb63, $bb64;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    out_$i159 := $eq.i32(out_$i158, 0);
    goto corral_source_split_5503;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    out_$i158 := $load.i32($M.0, out_$p157);
    goto corral_source_split_5502;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    out_$p157 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(8476, 1));
    goto corral_source_split_5501;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p156, out_$i155);
    goto corral_source_split_5500;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    out_$p156 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7424, 1));
    goto corral_source_split_5499;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    out_$i155 := $sub.i64(out_$i154, 1);
    goto corral_source_split_5498;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    out_$i154 := $load.i64($M.0, out_$p153);
    goto corral_source_split_5497;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    out_$p153 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7424, 1));
    goto corral_source_split_5496;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    out_$i152 := $add.i32(out_$i141, 1);
    call {:si_unique_call 1009} {:cexpr "bytes_read"} boogie_si_record_i32(out_$i152);
    goto corral_source_split_5495;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    out_$i151 := $load.i8($M.0, out_$p150);
    call {:si_unique_call 1008} {:cexpr "c___0"} boogie_si_record_i8(out_$i151);
    goto corral_source_split_5494;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    out_$p150 := $add.ref(out_$p147, $mul.ref(out_$i149, 1));
    goto corral_source_split_5493;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    out_$i149 := $load.i64($M.0, out_$p148);
    goto corral_source_split_5492;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    out_$p148 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7416, 1));
    goto corral_source_split_5491;

  corral_source_split_5489:
    assume {:verifier.code 0} true;
    out_$p147 := $load.ref($M.0, out_$p146);
    goto corral_source_split_5490;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    out_$p146 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7400, 1));
    goto corral_source_split_5489;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p145, out_$i144);
    goto corral_source_split_5488;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    out_$p145 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7416, 1));
    goto corral_source_split_5487;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    out_$i144 := $add.i64(out_$i143, 1);
    goto corral_source_split_5486;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    out_$i143 := $load.i64($M.0, out_$p142);
    goto corral_source_split_5485;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    out_$p142 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7416, 1));
    goto corral_source_split_5484;

  $bb62:
    call out_$i136, out_$i137, out_$i138, out_$i141, out_$p142, out_$i143, out_$i144, out_$p145, out_$p146, out_$p147, out_$p148, out_$i149, out_$p150, out_$i151, out_$i152, out_$p153, out_$i154, out_$i155, out_$p156, out_$p157, out_$i158, out_$i159, out_$i162, out_$i163, out_$i160, out_$i161, out_$p139, out_$i140 := ftdi_elan_respond_engine_loop_$bb62(in_$p0, in_$p58, out_$i136, out_$i137, out_$i138, out_$i141, out_$p142, out_$i143, out_$i144, out_$p145, out_$p146, out_$p147, out_$p148, out_$i149, out_$p150, out_$i151, out_$i152, out_$p153, out_$i154, out_$i155, out_$p156, out_$p157, out_$i158, out_$i159, out_$i162, out_$i163, out_$i160, out_$i161, out_$p63, out_$p139, out_$i140);
    goto $bb62_last;

  $bb62_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5483;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    out_$i141 := out_$i64;
    goto $bb62;

  $bb60:
    assume out_$i138 == 1;
    assume {:verifier.code 0} true;
    out_$i141 := out_$i136;
    assume false;
    return;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    out_$p139, out_$i140 := out_$p63, out_$i136;
    assume true;
    goto $bb60;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    out_$i138 := $ne.i64(out_$i137, 0);
    goto corral_source_split_5479;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    out_$i137 := $load.i64($M.0, in_$p58);
    goto corral_source_split_5478;

  $bb59:
    assume out_$i163 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_5477;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    goto corral_source_split_5609;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    out_$p236 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7444, 1));
    goto corral_source_split_5608;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p235, 0);
    goto corral_source_split_5607;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    out_$p235 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(8480, 1));
    goto corral_source_split_5606;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p234, 4);
    goto corral_source_split_5605;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    out_$p234 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(8472, 1));
    goto corral_source_split_5604;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p233, 0);
    goto corral_source_split_5603;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    out_$p233 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(8476, 1));
    goto corral_source_split_5602;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1018} ftdi_elan_do_callback(in_$p0, out_$p205, out_$p232, out_$i207);
    goto corral_source_split_5601;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    out_$p232 := $add.ref(out_$p231, $mul.ref(4, 1));
    goto corral_source_split_5600;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    out_$p231 := $bitcast.ref.ref(out_$p230);
    goto corral_source_split_5599;

  $bb88:
    assume {:verifier.code 0} true;
    out_$p230 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7444, 1));
    goto corral_source_split_5598;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb644:
    assume {:verifier.code 0} true;
    goto $bb89;

  corral_source_split_6956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1154} out_vslice_dummy_var_29 := sprintf.ref.ref(out_$p1192, .str.5);
    assume {:verifier.code 0} true;
    goto $bb644;

  corral_source_split_6951:
    assume {:verifier.code 0} true;
    goto $bb644;

  corral_source_split_6950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1153} out_vslice_dummy_var_28 := sprintf.ref.ref.i32(out_$p1192, .str.4, out_$i1205);
    goto corral_source_split_6951;

  corral_source_split_6949:
    assume {:verifier.code 0} true;
    out_$i1205 := $zext.i8.i32(out_$i1204);
    goto corral_source_split_6950;

  $bb640:
    assume {:verifier.code 0} true;
    out_$i1204 := $load.i8($M.0, out_$p1193);
    goto corral_source_split_6949;

  $bb642:
    assume {:verifier.code 0} true;
    assume out_$i1202 == 1;
    goto $bb640;

  $bb639:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb640;

  $bb638:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb639, $bb641;

  corral_source_split_6947:
    assume {:verifier.code 0} true;
    goto $bb638;

  $bb636:
    assume out_$i1201 == 1;
    goto corral_source_split_6947;

  corral_source_split_6945:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb636, $bb637;

  corral_source_split_6944:
    assume {:verifier.code 0} true;
    out_$i1201 := $sgt.i32(out_$i1186, 0);
    goto corral_source_split_6945;

  corral_source_split_6943:
    assume {:verifier.code 0} true;
    out_$i1200 := $sub.i32(out_$i1186, 1);
    goto corral_source_split_6944;

  $bb635:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6943;

  corral_source_split_6941:
    assume {:verifier.code 0} true;
    out_$p1191 := $add.ref(out_$p1178, $mul.ref(out_$i1190, 1));
    assume {:verifier.code 0} true;
    out_$p1192, out_$p1193 := out_$p1191, out_$p1179;
    goto $bb635;

  corral_source_split_6934:
    assume {:verifier.code 0} true;
    out_$p1192, out_$p1193 := out_$p1199, out_$p1194;
    goto $bb635;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    out_$p1199 := $add.ref(out_$p1178, $mul.ref(out_$i1198, 1));
    goto corral_source_split_6934;

  corral_source_split_6932:
    assume {:verifier.code 0} true;
    out_$i1198 := $sext.i32.i64(out_$i1197);
    goto corral_source_split_6933;

  corral_source_split_6931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1151} out_$i1197 := sprintf.ref.ref.i32(out_$p1178, .str.4, out_$i1196);
    goto corral_source_split_6932;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    out_$i1196 := $zext.i8.i32(out_$i1195);
    goto corral_source_split_6931;

  corral_source_split_6929:
    assume {:verifier.code 0} true;
    out_$i1195 := $load.i8($M.0, out_$p1179);
    goto corral_source_split_6930;

  $bb631:
    assume {:verifier.code 0} true;
    out_$p1194 := $add.ref(out_$p1179, $mul.ref(1, 1));
    goto corral_source_split_6929;

  $bb633:
    assume {:verifier.code 0} true;
    assume out_$i1188 == 1;
    goto $bb631;

  $bb630:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb631;

  $bb629:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb630, $bb632;

  corral_source_split_6927:
    assume {:verifier.code 0} true;
    goto $bb629;

  $bb627:
    assume out_$i1187 == 1;
    goto corral_source_split_6927;

  corral_source_split_6925:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb627, $bb628;

  corral_source_split_6924:
    assume {:verifier.code 0} true;
    out_$i1187 := $sgt.i32(out_$i1172, 0);
    goto corral_source_split_6925;

  corral_source_split_6923:
    assume {:verifier.code 0} true;
    out_$i1186 := $sub.i32(out_$i1172, 1);
    goto corral_source_split_6924;

  $bb626:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6923;

  corral_source_split_6921:
    assume {:verifier.code 0} true;
    out_$p1177 := $add.ref(out_$p1164, $mul.ref(out_$i1176, 1));
    assume {:verifier.code 0} true;
    out_$p1178, out_$p1179 := out_$p1177, out_$p1165;
    goto $bb626;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    out_$p1178, out_$p1179 := out_$p1185, out_$p1180;
    goto $bb626;

  corral_source_split_6913:
    assume {:verifier.code 0} true;
    out_$p1185 := $add.ref(out_$p1164, $mul.ref(out_$i1184, 1));
    goto corral_source_split_6914;

  corral_source_split_6912:
    assume {:verifier.code 0} true;
    out_$i1184 := $sext.i32.i64(out_$i1183);
    goto corral_source_split_6913;

  corral_source_split_6911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1149} out_$i1183 := sprintf.ref.ref.i32(out_$p1164, .str.4, out_$i1182);
    goto corral_source_split_6912;

  corral_source_split_6910:
    assume {:verifier.code 0} true;
    out_$i1182 := $zext.i8.i32(out_$i1181);
    goto corral_source_split_6911;

  corral_source_split_6909:
    assume {:verifier.code 0} true;
    out_$i1181 := $load.i8($M.0, out_$p1165);
    goto corral_source_split_6910;

  $bb622:
    assume {:verifier.code 0} true;
    out_$p1180 := $add.ref(out_$p1165, $mul.ref(1, 1));
    goto corral_source_split_6909;

  $bb624:
    assume {:verifier.code 0} true;
    assume out_$i1174 == 1;
    goto $bb622;

  $bb621:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb622;

  $bb620:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb621, $bb623;

  corral_source_split_6907:
    assume {:verifier.code 0} true;
    goto $bb620;

  $bb618:
    assume out_$i1173 == 1;
    goto corral_source_split_6907;

  corral_source_split_6905:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb618, $bb619;

  corral_source_split_6904:
    assume {:verifier.code 0} true;
    out_$i1173 := $sgt.i32(out_$i1158, 0);
    goto corral_source_split_6905;

  corral_source_split_6903:
    assume {:verifier.code 0} true;
    out_$i1172 := $sub.i32(out_$i1158, 1);
    goto corral_source_split_6904;

  $bb617:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6903;

  corral_source_split_6901:
    assume {:verifier.code 0} true;
    out_$p1163 := $add.ref(out_$p1150, $mul.ref(out_$i1162, 1));
    assume {:verifier.code 0} true;
    out_$p1164, out_$p1165 := out_$p1163, out_$p1151;
    goto $bb617;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    out_$p1164, out_$p1165 := out_$p1171, out_$p1166;
    goto $bb617;

  corral_source_split_6893:
    assume {:verifier.code 0} true;
    out_$p1171 := $add.ref(out_$p1150, $mul.ref(out_$i1170, 1));
    goto corral_source_split_6894;

  corral_source_split_6892:
    assume {:verifier.code 0} true;
    out_$i1170 := $sext.i32.i64(out_$i1169);
    goto corral_source_split_6893;

  corral_source_split_6891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1147} out_$i1169 := sprintf.ref.ref.i32(out_$p1150, .str.4, out_$i1168);
    goto corral_source_split_6892;

  corral_source_split_6890:
    assume {:verifier.code 0} true;
    out_$i1168 := $zext.i8.i32(out_$i1167);
    goto corral_source_split_6891;

  corral_source_split_6889:
    assume {:verifier.code 0} true;
    out_$i1167 := $load.i8($M.0, out_$p1151);
    goto corral_source_split_6890;

  $bb613:
    assume {:verifier.code 0} true;
    out_$p1166 := $add.ref(out_$p1151, $mul.ref(1, 1));
    goto corral_source_split_6889;

  $bb615:
    assume {:verifier.code 0} true;
    assume out_$i1160 == 1;
    goto $bb613;

  $bb612:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb613;

  $bb611:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb612, $bb614;

  corral_source_split_6887:
    assume {:verifier.code 0} true;
    goto $bb611;

  $bb609:
    assume out_$i1159 == 1;
    goto corral_source_split_6887;

  corral_source_split_6885:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb609, $bb610;

  corral_source_split_6884:
    assume {:verifier.code 0} true;
    out_$i1159 := $sgt.i32(out_$i1144, 0);
    goto corral_source_split_6885;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    out_$i1158 := $sub.i32(out_$i1144, 1);
    goto corral_source_split_6884;

  $bb608:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6883;

  corral_source_split_6881:
    assume {:verifier.code 0} true;
    out_$p1149 := $add.ref(out_$p1136, $mul.ref(out_$i1148, 1));
    assume {:verifier.code 0} true;
    out_$p1150, out_$p1151 := out_$p1149, out_$p1137;
    goto $bb608;

  corral_source_split_6874:
    assume {:verifier.code 0} true;
    out_$p1150, out_$p1151 := out_$p1157, out_$p1152;
    goto $bb608;

  corral_source_split_6873:
    assume {:verifier.code 0} true;
    out_$p1157 := $add.ref(out_$p1136, $mul.ref(out_$i1156, 1));
    goto corral_source_split_6874;

  corral_source_split_6872:
    assume {:verifier.code 0} true;
    out_$i1156 := $sext.i32.i64(out_$i1155);
    goto corral_source_split_6873;

  corral_source_split_6871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1145} out_$i1155 := sprintf.ref.ref.i32(out_$p1136, .str.4, out_$i1154);
    goto corral_source_split_6872;

  corral_source_split_6870:
    assume {:verifier.code 0} true;
    out_$i1154 := $zext.i8.i32(out_$i1153);
    goto corral_source_split_6871;

  corral_source_split_6869:
    assume {:verifier.code 0} true;
    out_$i1153 := $load.i8($M.0, out_$p1137);
    goto corral_source_split_6870;

  $bb604:
    assume {:verifier.code 0} true;
    out_$p1152 := $add.ref(out_$p1137, $mul.ref(1, 1));
    goto corral_source_split_6869;

  $bb606:
    assume {:verifier.code 0} true;
    assume out_$i1146 == 1;
    goto $bb604;

  $bb603:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb604;

  $bb602:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb603, $bb605;

  corral_source_split_6867:
    assume {:verifier.code 0} true;
    goto $bb602;

  $bb600:
    assume out_$i1145 == 1;
    goto corral_source_split_6867;

  corral_source_split_6865:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb600, $bb601;

  corral_source_split_6864:
    assume {:verifier.code 0} true;
    out_$i1145 := $sgt.i32(out_$i1130, 0);
    goto corral_source_split_6865;

  corral_source_split_6863:
    assume {:verifier.code 0} true;
    out_$i1144 := $sub.i32(out_$i1130, 1);
    goto corral_source_split_6864;

  $bb599:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6863;

  corral_source_split_6861:
    assume {:verifier.code 0} true;
    out_$p1135 := $add.ref(out_$p1122, $mul.ref(out_$i1134, 1));
    assume {:verifier.code 0} true;
    out_$p1136, out_$p1137 := out_$p1135, out_$p1123;
    goto $bb599;

  corral_source_split_6854:
    assume {:verifier.code 0} true;
    out_$p1136, out_$p1137 := out_$p1143, out_$p1138;
    goto $bb599;

  corral_source_split_6853:
    assume {:verifier.code 0} true;
    out_$p1143 := $add.ref(out_$p1122, $mul.ref(out_$i1142, 1));
    goto corral_source_split_6854;

  corral_source_split_6852:
    assume {:verifier.code 0} true;
    out_$i1142 := $sext.i32.i64(out_$i1141);
    goto corral_source_split_6853;

  corral_source_split_6851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1143} out_$i1141 := sprintf.ref.ref.i32(out_$p1122, .str.4, out_$i1140);
    goto corral_source_split_6852;

  corral_source_split_6850:
    assume {:verifier.code 0} true;
    out_$i1140 := $zext.i8.i32(out_$i1139);
    goto corral_source_split_6851;

  corral_source_split_6849:
    assume {:verifier.code 0} true;
    out_$i1139 := $load.i8($M.0, out_$p1123);
    goto corral_source_split_6850;

  $bb595:
    assume {:verifier.code 0} true;
    out_$p1138 := $add.ref(out_$p1123, $mul.ref(1, 1));
    goto corral_source_split_6849;

  $bb597:
    assume {:verifier.code 0} true;
    assume out_$i1132 == 1;
    goto $bb595;

  $bb594:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb595;

  $bb593:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb594, $bb596;

  corral_source_split_6847:
    assume {:verifier.code 0} true;
    goto $bb593;

  $bb591:
    assume out_$i1131 == 1;
    goto corral_source_split_6847;

  corral_source_split_6845:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb591, $bb592;

  corral_source_split_6844:
    assume {:verifier.code 0} true;
    out_$i1131 := $sgt.i32(out_$i1116, 0);
    goto corral_source_split_6845;

  corral_source_split_6843:
    assume {:verifier.code 0} true;
    out_$i1130 := $sub.i32(out_$i1116, 1);
    goto corral_source_split_6844;

  $bb590:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6843;

  corral_source_split_6841:
    assume {:verifier.code 0} true;
    out_$p1121 := $add.ref(out_$p1108, $mul.ref(out_$i1120, 1));
    assume {:verifier.code 0} true;
    out_$p1122, out_$p1123 := out_$p1121, out_$p1109;
    goto $bb590;

  corral_source_split_6834:
    assume {:verifier.code 0} true;
    out_$p1122, out_$p1123 := out_$p1129, out_$p1124;
    goto $bb590;

  corral_source_split_6833:
    assume {:verifier.code 0} true;
    out_$p1129 := $add.ref(out_$p1108, $mul.ref(out_$i1128, 1));
    goto corral_source_split_6834;

  corral_source_split_6832:
    assume {:verifier.code 0} true;
    out_$i1128 := $sext.i32.i64(out_$i1127);
    goto corral_source_split_6833;

  corral_source_split_6831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1141} out_$i1127 := sprintf.ref.ref.i32(out_$p1108, .str.4, out_$i1126);
    goto corral_source_split_6832;

  corral_source_split_6830:
    assume {:verifier.code 0} true;
    out_$i1126 := $zext.i8.i32(out_$i1125);
    goto corral_source_split_6831;

  corral_source_split_6829:
    assume {:verifier.code 0} true;
    out_$i1125 := $load.i8($M.0, out_$p1109);
    goto corral_source_split_6830;

  $bb586:
    assume {:verifier.code 0} true;
    out_$p1124 := $add.ref(out_$p1109, $mul.ref(1, 1));
    goto corral_source_split_6829;

  $bb588:
    assume {:verifier.code 0} true;
    assume out_$i1118 == 1;
    goto $bb586;

  $bb585:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb586;

  $bb584:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb585, $bb587;

  corral_source_split_6827:
    assume {:verifier.code 0} true;
    goto $bb584;

  $bb582:
    assume out_$i1117 == 1;
    goto corral_source_split_6827;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb582, $bb583;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    out_$i1117 := $sgt.i32(out_$i1102, 0);
    goto corral_source_split_6825;

  corral_source_split_6823:
    assume {:verifier.code 0} true;
    out_$i1116 := $sub.i32(out_$i1102, 1);
    goto corral_source_split_6824;

  $bb581:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6823;

  corral_source_split_6821:
    assume {:verifier.code 0} true;
    out_$p1107 := $add.ref(out_$p1094, $mul.ref(out_$i1106, 1));
    assume {:verifier.code 0} true;
    out_$p1108, out_$p1109 := out_$p1107, out_$p1095;
    goto $bb581;

  corral_source_split_6814:
    assume {:verifier.code 0} true;
    out_$p1108, out_$p1109 := out_$p1115, out_$p1110;
    goto $bb581;

  corral_source_split_6813:
    assume {:verifier.code 0} true;
    out_$p1115 := $add.ref(out_$p1094, $mul.ref(out_$i1114, 1));
    goto corral_source_split_6814;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    out_$i1114 := $sext.i32.i64(out_$i1113);
    goto corral_source_split_6813;

  corral_source_split_6811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1139} out_$i1113 := sprintf.ref.ref.i32(out_$p1094, .str.4, out_$i1112);
    goto corral_source_split_6812;

  corral_source_split_6810:
    assume {:verifier.code 0} true;
    out_$i1112 := $zext.i8.i32(out_$i1111);
    goto corral_source_split_6811;

  corral_source_split_6809:
    assume {:verifier.code 0} true;
    out_$i1111 := $load.i8($M.0, out_$p1095);
    goto corral_source_split_6810;

  $bb577:
    assume {:verifier.code 0} true;
    out_$p1110 := $add.ref(out_$p1095, $mul.ref(1, 1));
    goto corral_source_split_6809;

  $bb579:
    assume {:verifier.code 0} true;
    assume out_$i1104 == 1;
    goto $bb577;

  $bb576:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb577;

  $bb575:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb576, $bb578;

  corral_source_split_6807:
    assume {:verifier.code 0} true;
    goto $bb575;

  $bb573:
    assume out_$i1103 == 1;
    goto corral_source_split_6807;

  corral_source_split_6805:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb573, $bb574;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    out_$i1103 := $sgt.i32(out_$i1088, 0);
    goto corral_source_split_6805;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    out_$i1102 := $sub.i32(out_$i1088, 1);
    goto corral_source_split_6804;

  $bb572:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6803;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    out_$p1093 := $add.ref(out_$p1080, $mul.ref(out_$i1092, 1));
    assume {:verifier.code 0} true;
    out_$p1094, out_$p1095 := out_$p1093, out_$p1081;
    goto $bb572;

  corral_source_split_6794:
    assume {:verifier.code 0} true;
    out_$p1094, out_$p1095 := out_$p1101, out_$p1096;
    goto $bb572;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    out_$p1101 := $add.ref(out_$p1080, $mul.ref(out_$i1100, 1));
    goto corral_source_split_6794;

  corral_source_split_6792:
    assume {:verifier.code 0} true;
    out_$i1100 := $sext.i32.i64(out_$i1099);
    goto corral_source_split_6793;

  corral_source_split_6791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1137} out_$i1099 := sprintf.ref.ref.i32(out_$p1080, .str.4, out_$i1098);
    goto corral_source_split_6792;

  corral_source_split_6790:
    assume {:verifier.code 0} true;
    out_$i1098 := $zext.i8.i32(out_$i1097);
    goto corral_source_split_6791;

  corral_source_split_6789:
    assume {:verifier.code 0} true;
    out_$i1097 := $load.i8($M.0, out_$p1081);
    goto corral_source_split_6790;

  $bb568:
    assume {:verifier.code 0} true;
    out_$p1096 := $add.ref(out_$p1081, $mul.ref(1, 1));
    goto corral_source_split_6789;

  $bb570:
    assume {:verifier.code 0} true;
    assume out_$i1090 == 1;
    goto $bb568;

  $bb567:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb568;

  $bb566:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb567, $bb569;

  corral_source_split_6787:
    assume {:verifier.code 0} true;
    goto $bb566;

  $bb564:
    assume out_$i1089 == 1;
    goto corral_source_split_6787;

  corral_source_split_6785:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb564, $bb565;

  corral_source_split_6784:
    assume {:verifier.code 0} true;
    out_$i1089 := $sgt.i32(out_$i1074, 0);
    goto corral_source_split_6785;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    out_$i1088 := $sub.i32(out_$i1074, 1);
    goto corral_source_split_6784;

  $bb563:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6783;

  corral_source_split_6781:
    assume {:verifier.code 0} true;
    out_$p1079 := $add.ref(out_$p1066, $mul.ref(out_$i1078, 1));
    assume {:verifier.code 0} true;
    out_$p1080, out_$p1081 := out_$p1079, out_$p1067;
    goto $bb563;

  corral_source_split_6774:
    assume {:verifier.code 0} true;
    out_$p1080, out_$p1081 := out_$p1087, out_$p1082;
    goto $bb563;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    out_$p1087 := $add.ref(out_$p1066, $mul.ref(out_$i1086, 1));
    goto corral_source_split_6774;

  corral_source_split_6772:
    assume {:verifier.code 0} true;
    out_$i1086 := $sext.i32.i64(out_$i1085);
    goto corral_source_split_6773;

  corral_source_split_6771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1135} out_$i1085 := sprintf.ref.ref.i32(out_$p1066, .str.4, out_$i1084);
    goto corral_source_split_6772;

  corral_source_split_6770:
    assume {:verifier.code 0} true;
    out_$i1084 := $zext.i8.i32(out_$i1083);
    goto corral_source_split_6771;

  corral_source_split_6769:
    assume {:verifier.code 0} true;
    out_$i1083 := $load.i8($M.0, out_$p1067);
    goto corral_source_split_6770;

  $bb559:
    assume {:verifier.code 0} true;
    out_$p1082 := $add.ref(out_$p1067, $mul.ref(1, 1));
    goto corral_source_split_6769;

  $bb561:
    assume {:verifier.code 0} true;
    assume out_$i1076 == 1;
    goto $bb559;

  $bb558:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb559;

  $bb557:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb558, $bb560;

  corral_source_split_6767:
    assume {:verifier.code 0} true;
    goto $bb557;

  $bb555:
    assume out_$i1075 == 1;
    goto corral_source_split_6767;

  corral_source_split_6765:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb555, $bb556;

  corral_source_split_6764:
    assume {:verifier.code 0} true;
    out_$i1075 := $sgt.i32(out_$i1060, 0);
    goto corral_source_split_6765;

  corral_source_split_6763:
    assume {:verifier.code 0} true;
    out_$i1074 := $sub.i32(out_$i1060, 1);
    goto corral_source_split_6764;

  $bb554:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6763;

  corral_source_split_6761:
    assume {:verifier.code 0} true;
    out_$p1065 := $add.ref(out_$p1052, $mul.ref(out_$i1064, 1));
    assume {:verifier.code 0} true;
    out_$p1066, out_$p1067 := out_$p1065, out_$p1053;
    goto $bb554;

  corral_source_split_6754:
    assume {:verifier.code 0} true;
    out_$p1066, out_$p1067 := out_$p1073, out_$p1068;
    goto $bb554;

  corral_source_split_6753:
    assume {:verifier.code 0} true;
    out_$p1073 := $add.ref(out_$p1052, $mul.ref(out_$i1072, 1));
    goto corral_source_split_6754;

  corral_source_split_6752:
    assume {:verifier.code 0} true;
    out_$i1072 := $sext.i32.i64(out_$i1071);
    goto corral_source_split_6753;

  corral_source_split_6751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1133} out_$i1071 := sprintf.ref.ref.i32(out_$p1052, .str.4, out_$i1070);
    goto corral_source_split_6752;

  corral_source_split_6750:
    assume {:verifier.code 0} true;
    out_$i1070 := $zext.i8.i32(out_$i1069);
    goto corral_source_split_6751;

  corral_source_split_6749:
    assume {:verifier.code 0} true;
    out_$i1069 := $load.i8($M.0, out_$p1053);
    goto corral_source_split_6750;

  $bb550:
    assume {:verifier.code 0} true;
    out_$p1068 := $add.ref(out_$p1053, $mul.ref(1, 1));
    goto corral_source_split_6749;

  $bb552:
    assume {:verifier.code 0} true;
    assume out_$i1062 == 1;
    goto $bb550;

  $bb549:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb550;

  $bb548:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb549, $bb551;

  corral_source_split_6747:
    assume {:verifier.code 0} true;
    goto $bb548;

  $bb546:
    assume out_$i1061 == 1;
    goto corral_source_split_6747;

  corral_source_split_6745:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb546, $bb547;

  corral_source_split_6744:
    assume {:verifier.code 0} true;
    out_$i1061 := $sgt.i32(out_$i1046, 0);
    goto corral_source_split_6745;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    out_$i1060 := $sub.i32(out_$i1046, 1);
    goto corral_source_split_6744;

  $bb545:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6743;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    out_$p1051 := $add.ref(out_$p1038, $mul.ref(out_$i1050, 1));
    assume {:verifier.code 0} true;
    out_$p1052, out_$p1053 := out_$p1051, out_$p1039;
    goto $bb545;

  corral_source_split_6734:
    assume {:verifier.code 0} true;
    out_$p1052, out_$p1053 := out_$p1059, out_$p1054;
    goto $bb545;

  corral_source_split_6733:
    assume {:verifier.code 0} true;
    out_$p1059 := $add.ref(out_$p1038, $mul.ref(out_$i1058, 1));
    goto corral_source_split_6734;

  corral_source_split_6732:
    assume {:verifier.code 0} true;
    out_$i1058 := $sext.i32.i64(out_$i1057);
    goto corral_source_split_6733;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1131} out_$i1057 := sprintf.ref.ref.i32(out_$p1038, .str.4, out_$i1056);
    goto corral_source_split_6732;

  corral_source_split_6730:
    assume {:verifier.code 0} true;
    out_$i1056 := $zext.i8.i32(out_$i1055);
    goto corral_source_split_6731;

  corral_source_split_6729:
    assume {:verifier.code 0} true;
    out_$i1055 := $load.i8($M.0, out_$p1039);
    goto corral_source_split_6730;

  $bb541:
    assume {:verifier.code 0} true;
    out_$p1054 := $add.ref(out_$p1039, $mul.ref(1, 1));
    goto corral_source_split_6729;

  $bb543:
    assume {:verifier.code 0} true;
    assume out_$i1048 == 1;
    goto $bb541;

  $bb540:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb541;

  $bb539:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb540, $bb542;

  corral_source_split_6727:
    assume {:verifier.code 0} true;
    goto $bb539;

  $bb537:
    assume out_$i1047 == 1;
    goto corral_source_split_6727;

  corral_source_split_6725:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb537, $bb538;

  corral_source_split_6724:
    assume {:verifier.code 0} true;
    out_$i1047 := $sgt.i32(out_$i1032, 0);
    goto corral_source_split_6725;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    out_$i1046 := $sub.i32(out_$i1032, 1);
    goto corral_source_split_6724;

  $bb536:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6723;

  corral_source_split_6721:
    assume {:verifier.code 0} true;
    out_$p1037 := $add.ref(out_$p1024, $mul.ref(out_$i1036, 1));
    assume {:verifier.code 0} true;
    out_$p1038, out_$p1039 := out_$p1037, out_$p1025;
    goto $bb536;

  corral_source_split_6714:
    assume {:verifier.code 0} true;
    out_$p1038, out_$p1039 := out_$p1045, out_$p1040;
    goto $bb536;

  corral_source_split_6713:
    assume {:verifier.code 0} true;
    out_$p1045 := $add.ref(out_$p1024, $mul.ref(out_$i1044, 1));
    goto corral_source_split_6714;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    out_$i1044 := $sext.i32.i64(out_$i1043);
    goto corral_source_split_6713;

  corral_source_split_6711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1129} out_$i1043 := sprintf.ref.ref.i32(out_$p1024, .str.4, out_$i1042);
    goto corral_source_split_6712;

  corral_source_split_6710:
    assume {:verifier.code 0} true;
    out_$i1042 := $zext.i8.i32(out_$i1041);
    goto corral_source_split_6711;

  corral_source_split_6709:
    assume {:verifier.code 0} true;
    out_$i1041 := $load.i8($M.0, out_$p1025);
    goto corral_source_split_6710;

  $bb532:
    assume {:verifier.code 0} true;
    out_$p1040 := $add.ref(out_$p1025, $mul.ref(1, 1));
    goto corral_source_split_6709;

  $bb534:
    assume {:verifier.code 0} true;
    assume out_$i1034 == 1;
    goto $bb532;

  $bb531:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb532;

  $bb530:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb531, $bb533;

  corral_source_split_6707:
    assume {:verifier.code 0} true;
    goto $bb530;

  $bb528:
    assume out_$i1033 == 1;
    goto corral_source_split_6707;

  corral_source_split_6705:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb528, $bb529;

  corral_source_split_6704:
    assume {:verifier.code 0} true;
    out_$i1033 := $sgt.i32(out_$i1018, 0);
    goto corral_source_split_6705;

  corral_source_split_6703:
    assume {:verifier.code 0} true;
    out_$i1032 := $sub.i32(out_$i1018, 1);
    goto corral_source_split_6704;

  $bb527:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6703;

  corral_source_split_6701:
    assume {:verifier.code 0} true;
    out_$p1023 := $add.ref(out_$p1010, $mul.ref(out_$i1022, 1));
    assume {:verifier.code 0} true;
    out_$p1024, out_$p1025 := out_$p1023, out_$p1011;
    goto $bb527;

  corral_source_split_6694:
    assume {:verifier.code 0} true;
    out_$p1024, out_$p1025 := out_$p1031, out_$p1026;
    goto $bb527;

  corral_source_split_6693:
    assume {:verifier.code 0} true;
    out_$p1031 := $add.ref(out_$p1010, $mul.ref(out_$i1030, 1));
    goto corral_source_split_6694;

  corral_source_split_6692:
    assume {:verifier.code 0} true;
    out_$i1030 := $sext.i32.i64(out_$i1029);
    goto corral_source_split_6693;

  corral_source_split_6691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1127} out_$i1029 := sprintf.ref.ref.i32(out_$p1010, .str.4, out_$i1028);
    goto corral_source_split_6692;

  corral_source_split_6690:
    assume {:verifier.code 0} true;
    out_$i1028 := $zext.i8.i32(out_$i1027);
    goto corral_source_split_6691;

  corral_source_split_6689:
    assume {:verifier.code 0} true;
    out_$i1027 := $load.i8($M.0, out_$p1011);
    goto corral_source_split_6690;

  $bb523:
    assume {:verifier.code 0} true;
    out_$p1026 := $add.ref(out_$p1011, $mul.ref(1, 1));
    goto corral_source_split_6689;

  $bb525:
    assume {:verifier.code 0} true;
    assume out_$i1020 == 1;
    goto $bb523;

  $bb522:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb523;

  $bb521:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb522, $bb524;

  corral_source_split_6687:
    assume {:verifier.code 0} true;
    goto $bb521;

  $bb519:
    assume out_$i1019 == 1;
    goto corral_source_split_6687;

  corral_source_split_6685:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb519, $bb520;

  corral_source_split_6684:
    assume {:verifier.code 0} true;
    out_$i1019 := $sgt.i32(out_$i1004, 0);
    goto corral_source_split_6685;

  corral_source_split_6683:
    assume {:verifier.code 0} true;
    out_$i1018 := $sub.i32(out_$i1004, 1);
    goto corral_source_split_6684;

  $bb518:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6683;

  corral_source_split_6681:
    assume {:verifier.code 0} true;
    out_$p1009 := $add.ref(out_$p996, $mul.ref(out_$i1008, 1));
    assume {:verifier.code 0} true;
    out_$p1010, out_$p1011 := out_$p1009, out_$p997;
    goto $bb518;

  corral_source_split_6674:
    assume {:verifier.code 0} true;
    out_$p1010, out_$p1011 := out_$p1017, out_$p1012;
    goto $bb518;

  corral_source_split_6673:
    assume {:verifier.code 0} true;
    out_$p1017 := $add.ref(out_$p996, $mul.ref(out_$i1016, 1));
    goto corral_source_split_6674;

  corral_source_split_6672:
    assume {:verifier.code 0} true;
    out_$i1016 := $sext.i32.i64(out_$i1015);
    goto corral_source_split_6673;

  corral_source_split_6671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1125} out_$i1015 := sprintf.ref.ref.i32(out_$p996, .str.4, out_$i1014);
    goto corral_source_split_6672;

  corral_source_split_6670:
    assume {:verifier.code 0} true;
    out_$i1014 := $zext.i8.i32(out_$i1013);
    goto corral_source_split_6671;

  corral_source_split_6669:
    assume {:verifier.code 0} true;
    out_$i1013 := $load.i8($M.0, out_$p997);
    goto corral_source_split_6670;

  $bb514:
    assume {:verifier.code 0} true;
    out_$p1012 := $add.ref(out_$p997, $mul.ref(1, 1));
    goto corral_source_split_6669;

  $bb516:
    assume {:verifier.code 0} true;
    assume out_$i1006 == 1;
    goto $bb514;

  $bb513:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb514;

  $bb512:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb513, $bb515;

  corral_source_split_6667:
    assume {:verifier.code 0} true;
    goto $bb512;

  $bb510:
    assume out_$i1005 == 1;
    goto corral_source_split_6667;

  corral_source_split_6665:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb510, $bb511;

  corral_source_split_6664:
    assume {:verifier.code 0} true;
    out_$i1005 := $sgt.i32(out_$i990, 0);
    goto corral_source_split_6665;

  corral_source_split_6663:
    assume {:verifier.code 0} true;
    out_$i1004 := $sub.i32(out_$i990, 1);
    goto corral_source_split_6664;

  $bb509:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6663;

  corral_source_split_6661:
    assume {:verifier.code 0} true;
    out_$p995 := $add.ref(out_$p982, $mul.ref(out_$i994, 1));
    assume {:verifier.code 0} true;
    out_$p996, out_$p997 := out_$p995, out_$p983;
    goto $bb509;

  corral_source_split_6654:
    assume {:verifier.code 0} true;
    out_$p996, out_$p997 := out_$p1003, out_$p998;
    goto $bb509;

  corral_source_split_6653:
    assume {:verifier.code 0} true;
    out_$p1003 := $add.ref(out_$p982, $mul.ref(out_$i1002, 1));
    goto corral_source_split_6654;

  corral_source_split_6652:
    assume {:verifier.code 0} true;
    out_$i1002 := $sext.i32.i64(out_$i1001);
    goto corral_source_split_6653;

  corral_source_split_6651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1123} out_$i1001 := sprintf.ref.ref.i32(out_$p982, .str.4, out_$i1000);
    goto corral_source_split_6652;

  corral_source_split_6650:
    assume {:verifier.code 0} true;
    out_$i1000 := $zext.i8.i32(out_$i999);
    goto corral_source_split_6651;

  corral_source_split_6649:
    assume {:verifier.code 0} true;
    out_$i999 := $load.i8($M.0, out_$p983);
    goto corral_source_split_6650;

  $bb505:
    assume {:verifier.code 0} true;
    out_$p998 := $add.ref(out_$p983, $mul.ref(1, 1));
    goto corral_source_split_6649;

  $bb507:
    assume {:verifier.code 0} true;
    assume out_$i992 == 1;
    goto $bb505;

  $bb504:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb505;

  $bb503:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb504, $bb506;

  corral_source_split_6647:
    assume {:verifier.code 0} true;
    goto $bb503;

  $bb501:
    assume out_$i991 == 1;
    goto corral_source_split_6647;

  corral_source_split_6645:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb501, $bb502;

  corral_source_split_6644:
    assume {:verifier.code 0} true;
    out_$i991 := $sgt.i32(out_$i976, 0);
    goto corral_source_split_6645;

  corral_source_split_6643:
    assume {:verifier.code 0} true;
    out_$i990 := $sub.i32(out_$i976, 1);
    goto corral_source_split_6644;

  $bb500:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6643;

  corral_source_split_6641:
    assume {:verifier.code 0} true;
    out_$p981 := $add.ref(out_$p968, $mul.ref(out_$i980, 1));
    assume {:verifier.code 0} true;
    out_$p982, out_$p983 := out_$p981, out_$p969;
    goto $bb500;

  corral_source_split_6634:
    assume {:verifier.code 0} true;
    out_$p982, out_$p983 := out_$p989, out_$p984;
    goto $bb500;

  corral_source_split_6633:
    assume {:verifier.code 0} true;
    out_$p989 := $add.ref(out_$p968, $mul.ref(out_$i988, 1));
    goto corral_source_split_6634;

  corral_source_split_6632:
    assume {:verifier.code 0} true;
    out_$i988 := $sext.i32.i64(out_$i987);
    goto corral_source_split_6633;

  corral_source_split_6631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1121} out_$i987 := sprintf.ref.ref.i32(out_$p968, .str.4, out_$i986);
    goto corral_source_split_6632;

  corral_source_split_6630:
    assume {:verifier.code 0} true;
    out_$i986 := $zext.i8.i32(out_$i985);
    goto corral_source_split_6631;

  corral_source_split_6629:
    assume {:verifier.code 0} true;
    out_$i985 := $load.i8($M.0, out_$p969);
    goto corral_source_split_6630;

  $bb496:
    assume {:verifier.code 0} true;
    out_$p984 := $add.ref(out_$p969, $mul.ref(1, 1));
    goto corral_source_split_6629;

  $bb498:
    assume {:verifier.code 0} true;
    assume out_$i978 == 1;
    goto $bb496;

  $bb495:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb496;

  $bb494:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb495, $bb497;

  corral_source_split_6627:
    assume {:verifier.code 0} true;
    goto $bb494;

  $bb492:
    assume out_$i977 == 1;
    goto corral_source_split_6627;

  corral_source_split_6625:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb492, $bb493;

  corral_source_split_6624:
    assume {:verifier.code 0} true;
    out_$i977 := $sgt.i32(out_$i962, 0);
    goto corral_source_split_6625;

  corral_source_split_6623:
    assume {:verifier.code 0} true;
    out_$i976 := $sub.i32(out_$i962, 1);
    goto corral_source_split_6624;

  $bb491:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6623;

  corral_source_split_6621:
    assume {:verifier.code 0} true;
    out_$p967 := $add.ref(out_$p954, $mul.ref(out_$i966, 1));
    assume {:verifier.code 0} true;
    out_$p968, out_$p969 := out_$p967, out_$p955;
    goto $bb491;

  corral_source_split_6614:
    assume {:verifier.code 0} true;
    out_$p968, out_$p969 := out_$p975, out_$p970;
    goto $bb491;

  corral_source_split_6613:
    assume {:verifier.code 0} true;
    out_$p975 := $add.ref(out_$p954, $mul.ref(out_$i974, 1));
    goto corral_source_split_6614;

  corral_source_split_6612:
    assume {:verifier.code 0} true;
    out_$i974 := $sext.i32.i64(out_$i973);
    goto corral_source_split_6613;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1119} out_$i973 := sprintf.ref.ref.i32(out_$p954, .str.4, out_$i972);
    goto corral_source_split_6612;

  corral_source_split_6610:
    assume {:verifier.code 0} true;
    out_$i972 := $zext.i8.i32(out_$i971);
    goto corral_source_split_6611;

  corral_source_split_6609:
    assume {:verifier.code 0} true;
    out_$i971 := $load.i8($M.0, out_$p955);
    goto corral_source_split_6610;

  $bb487:
    assume {:verifier.code 0} true;
    out_$p970 := $add.ref(out_$p955, $mul.ref(1, 1));
    goto corral_source_split_6609;

  $bb489:
    assume {:verifier.code 0} true;
    assume out_$i964 == 1;
    goto $bb487;

  $bb486:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb487;

  $bb485:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb486, $bb488;

  corral_source_split_6607:
    assume {:verifier.code 0} true;
    goto $bb485;

  $bb483:
    assume out_$i963 == 1;
    goto corral_source_split_6607;

  corral_source_split_6605:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb483, $bb484;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    out_$i963 := $sgt.i32(out_$i948, 0);
    goto corral_source_split_6605;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    out_$i962 := $sub.i32(out_$i948, 1);
    goto corral_source_split_6604;

  $bb482:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6603;

  corral_source_split_6601:
    assume {:verifier.code 0} true;
    out_$p953 := $add.ref(out_$p940, $mul.ref(out_$i952, 1));
    assume {:verifier.code 0} true;
    out_$p954, out_$p955 := out_$p953, out_$p941;
    goto $bb482;

  corral_source_split_6594:
    assume {:verifier.code 0} true;
    out_$p954, out_$p955 := out_$p961, out_$p956;
    goto $bb482;

  corral_source_split_6593:
    assume {:verifier.code 0} true;
    out_$p961 := $add.ref(out_$p940, $mul.ref(out_$i960, 1));
    goto corral_source_split_6594;

  corral_source_split_6592:
    assume {:verifier.code 0} true;
    out_$i960 := $sext.i32.i64(out_$i959);
    goto corral_source_split_6593;

  corral_source_split_6591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1117} out_$i959 := sprintf.ref.ref.i32(out_$p940, .str.4, out_$i958);
    goto corral_source_split_6592;

  corral_source_split_6590:
    assume {:verifier.code 0} true;
    out_$i958 := $zext.i8.i32(out_$i957);
    goto corral_source_split_6591;

  corral_source_split_6589:
    assume {:verifier.code 0} true;
    out_$i957 := $load.i8($M.0, out_$p941);
    goto corral_source_split_6590;

  $bb478:
    assume {:verifier.code 0} true;
    out_$p956 := $add.ref(out_$p941, $mul.ref(1, 1));
    goto corral_source_split_6589;

  $bb480:
    assume {:verifier.code 0} true;
    assume out_$i950 == 1;
    goto $bb478;

  $bb477:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb478;

  $bb476:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb477, $bb479;

  corral_source_split_6587:
    assume {:verifier.code 0} true;
    goto $bb476;

  $bb474:
    assume out_$i949 == 1;
    goto corral_source_split_6587;

  corral_source_split_6585:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb474, $bb475;

  corral_source_split_6584:
    assume {:verifier.code 0} true;
    out_$i949 := $sgt.i32(out_$i934, 0);
    goto corral_source_split_6585;

  corral_source_split_6583:
    assume {:verifier.code 0} true;
    out_$i948 := $sub.i32(out_$i934, 1);
    goto corral_source_split_6584;

  $bb473:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6583;

  corral_source_split_6581:
    assume {:verifier.code 0} true;
    out_$p939 := $add.ref(out_$p926, $mul.ref(out_$i938, 1));
    assume {:verifier.code 0} true;
    out_$p940, out_$p941 := out_$p939, out_$p927;
    goto $bb473;

  corral_source_split_6574:
    assume {:verifier.code 0} true;
    out_$p940, out_$p941 := out_$p947, out_$p942;
    goto $bb473;

  corral_source_split_6573:
    assume {:verifier.code 0} true;
    out_$p947 := $add.ref(out_$p926, $mul.ref(out_$i946, 1));
    goto corral_source_split_6574;

  corral_source_split_6572:
    assume {:verifier.code 0} true;
    out_$i946 := $sext.i32.i64(out_$i945);
    goto corral_source_split_6573;

  corral_source_split_6571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1115} out_$i945 := sprintf.ref.ref.i32(out_$p926, .str.4, out_$i944);
    goto corral_source_split_6572;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    out_$i944 := $zext.i8.i32(out_$i943);
    goto corral_source_split_6571;

  corral_source_split_6569:
    assume {:verifier.code 0} true;
    out_$i943 := $load.i8($M.0, out_$p927);
    goto corral_source_split_6570;

  $bb469:
    assume {:verifier.code 0} true;
    out_$p942 := $add.ref(out_$p927, $mul.ref(1, 1));
    goto corral_source_split_6569;

  $bb471:
    assume {:verifier.code 0} true;
    assume out_$i936 == 1;
    goto $bb469;

  $bb468:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb469;

  $bb467:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb468, $bb470;

  corral_source_split_6567:
    assume {:verifier.code 0} true;
    goto $bb467;

  $bb465:
    assume out_$i935 == 1;
    goto corral_source_split_6567;

  corral_source_split_6565:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb465, $bb466;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    out_$i935 := $sgt.i32(out_$i920, 0);
    goto corral_source_split_6565;

  corral_source_split_6563:
    assume {:verifier.code 0} true;
    out_$i934 := $sub.i32(out_$i920, 1);
    goto corral_source_split_6564;

  $bb464:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6563;

  corral_source_split_6561:
    assume {:verifier.code 0} true;
    out_$p925 := $add.ref(out_$p912, $mul.ref(out_$i924, 1));
    assume {:verifier.code 0} true;
    out_$p926, out_$p927 := out_$p925, out_$p913;
    goto $bb464;

  corral_source_split_6554:
    assume {:verifier.code 0} true;
    out_$p926, out_$p927 := out_$p933, out_$p928;
    goto $bb464;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    out_$p933 := $add.ref(out_$p912, $mul.ref(out_$i932, 1));
    goto corral_source_split_6554;

  corral_source_split_6552:
    assume {:verifier.code 0} true;
    out_$i932 := $sext.i32.i64(out_$i931);
    goto corral_source_split_6553;

  corral_source_split_6551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1113} out_$i931 := sprintf.ref.ref.i32(out_$p912, .str.4, out_$i930);
    goto corral_source_split_6552;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    out_$i930 := $zext.i8.i32(out_$i929);
    goto corral_source_split_6551;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    out_$i929 := $load.i8($M.0, out_$p913);
    goto corral_source_split_6550;

  $bb460:
    assume {:verifier.code 0} true;
    out_$p928 := $add.ref(out_$p913, $mul.ref(1, 1));
    goto corral_source_split_6549;

  $bb462:
    assume {:verifier.code 0} true;
    assume out_$i922 == 1;
    goto $bb460;

  $bb459:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb460;

  $bb458:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb459, $bb461;

  corral_source_split_6547:
    assume {:verifier.code 0} true;
    goto $bb458;

  $bb456:
    assume out_$i921 == 1;
    goto corral_source_split_6547;

  corral_source_split_6545:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb456, $bb457;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    out_$i921 := $sgt.i32(out_$i906, 0);
    goto corral_source_split_6545;

  corral_source_split_6543:
    assume {:verifier.code 0} true;
    out_$i920 := $sub.i32(out_$i906, 1);
    goto corral_source_split_6544;

  $bb455:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6543;

  corral_source_split_6541:
    assume {:verifier.code 0} true;
    out_$p911 := $add.ref(out_$p898, $mul.ref(out_$i910, 1));
    assume {:verifier.code 0} true;
    out_$p912, out_$p913 := out_$p911, out_$p899;
    goto $bb455;

  corral_source_split_6534:
    assume {:verifier.code 0} true;
    out_$p912, out_$p913 := out_$p919, out_$p914;
    goto $bb455;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    out_$p919 := $add.ref(out_$p898, $mul.ref(out_$i918, 1));
    goto corral_source_split_6534;

  corral_source_split_6532:
    assume {:verifier.code 0} true;
    out_$i918 := $sext.i32.i64(out_$i917);
    goto corral_source_split_6533;

  corral_source_split_6531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1111} out_$i917 := sprintf.ref.ref.i32(out_$p898, .str.4, out_$i916);
    goto corral_source_split_6532;

  corral_source_split_6530:
    assume {:verifier.code 0} true;
    out_$i916 := $zext.i8.i32(out_$i915);
    goto corral_source_split_6531;

  corral_source_split_6529:
    assume {:verifier.code 0} true;
    out_$i915 := $load.i8($M.0, out_$p899);
    goto corral_source_split_6530;

  $bb451:
    assume {:verifier.code 0} true;
    out_$p914 := $add.ref(out_$p899, $mul.ref(1, 1));
    goto corral_source_split_6529;

  $bb453:
    assume {:verifier.code 0} true;
    assume out_$i908 == 1;
    goto $bb451;

  $bb450:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb451;

  $bb449:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb450, $bb452;

  corral_source_split_6527:
    assume {:verifier.code 0} true;
    goto $bb449;

  $bb447:
    assume out_$i907 == 1;
    goto corral_source_split_6527;

  corral_source_split_6525:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb447, $bb448;

  corral_source_split_6524:
    assume {:verifier.code 0} true;
    out_$i907 := $sgt.i32(out_$i892, 0);
    goto corral_source_split_6525;

  corral_source_split_6523:
    assume {:verifier.code 0} true;
    out_$i906 := $sub.i32(out_$i892, 1);
    goto corral_source_split_6524;

  $bb446:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6523;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    out_$p897 := $add.ref(out_$p884, $mul.ref(out_$i896, 1));
    assume {:verifier.code 0} true;
    out_$p898, out_$p899 := out_$p897, out_$p885;
    goto $bb446;

  corral_source_split_6514:
    assume {:verifier.code 0} true;
    out_$p898, out_$p899 := out_$p905, out_$p900;
    goto $bb446;

  corral_source_split_6513:
    assume {:verifier.code 0} true;
    out_$p905 := $add.ref(out_$p884, $mul.ref(out_$i904, 1));
    goto corral_source_split_6514;

  corral_source_split_6512:
    assume {:verifier.code 0} true;
    out_$i904 := $sext.i32.i64(out_$i903);
    goto corral_source_split_6513;

  corral_source_split_6511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1109} out_$i903 := sprintf.ref.ref.i32(out_$p884, .str.4, out_$i902);
    goto corral_source_split_6512;

  corral_source_split_6510:
    assume {:verifier.code 0} true;
    out_$i902 := $zext.i8.i32(out_$i901);
    goto corral_source_split_6511;

  corral_source_split_6509:
    assume {:verifier.code 0} true;
    out_$i901 := $load.i8($M.0, out_$p885);
    goto corral_source_split_6510;

  $bb442:
    assume {:verifier.code 0} true;
    out_$p900 := $add.ref(out_$p885, $mul.ref(1, 1));
    goto corral_source_split_6509;

  $bb444:
    assume {:verifier.code 0} true;
    assume out_$i894 == 1;
    goto $bb442;

  $bb441:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb442;

  $bb440:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb441, $bb443;

  corral_source_split_6507:
    assume {:verifier.code 0} true;
    goto $bb440;

  $bb438:
    assume out_$i893 == 1;
    goto corral_source_split_6507;

  corral_source_split_6505:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb438, $bb439;

  corral_source_split_6504:
    assume {:verifier.code 0} true;
    out_$i893 := $sgt.i32(out_$i878, 0);
    goto corral_source_split_6505;

  corral_source_split_6503:
    assume {:verifier.code 0} true;
    out_$i892 := $sub.i32(out_$i878, 1);
    goto corral_source_split_6504;

  $bb437:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6503;

  corral_source_split_6501:
    assume {:verifier.code 0} true;
    out_$p883 := $add.ref(out_$p870, $mul.ref(out_$i882, 1));
    assume {:verifier.code 0} true;
    out_$p884, out_$p885 := out_$p883, out_$p871;
    goto $bb437;

  corral_source_split_6494:
    assume {:verifier.code 0} true;
    out_$p884, out_$p885 := out_$p891, out_$p886;
    goto $bb437;

  corral_source_split_6493:
    assume {:verifier.code 0} true;
    out_$p891 := $add.ref(out_$p870, $mul.ref(out_$i890, 1));
    goto corral_source_split_6494;

  corral_source_split_6492:
    assume {:verifier.code 0} true;
    out_$i890 := $sext.i32.i64(out_$i889);
    goto corral_source_split_6493;

  corral_source_split_6491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1107} out_$i889 := sprintf.ref.ref.i32(out_$p870, .str.4, out_$i888);
    goto corral_source_split_6492;

  corral_source_split_6490:
    assume {:verifier.code 0} true;
    out_$i888 := $zext.i8.i32(out_$i887);
    goto corral_source_split_6491;

  corral_source_split_6489:
    assume {:verifier.code 0} true;
    out_$i887 := $load.i8($M.0, out_$p871);
    goto corral_source_split_6490;

  $bb433:
    assume {:verifier.code 0} true;
    out_$p886 := $add.ref(out_$p871, $mul.ref(1, 1));
    goto corral_source_split_6489;

  $bb435:
    assume {:verifier.code 0} true;
    assume out_$i880 == 1;
    goto $bb433;

  $bb432:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb433;

  $bb431:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb432, $bb434;

  corral_source_split_6487:
    assume {:verifier.code 0} true;
    goto $bb431;

  $bb429:
    assume out_$i879 == 1;
    goto corral_source_split_6487;

  corral_source_split_6485:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb429, $bb430;

  corral_source_split_6484:
    assume {:verifier.code 0} true;
    out_$i879 := $sgt.i32(out_$i864, 0);
    goto corral_source_split_6485;

  corral_source_split_6483:
    assume {:verifier.code 0} true;
    out_$i878 := $sub.i32(out_$i864, 1);
    goto corral_source_split_6484;

  $bb428:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6483;

  corral_source_split_6481:
    assume {:verifier.code 0} true;
    out_$p869 := $add.ref(out_$p856, $mul.ref(out_$i868, 1));
    assume {:verifier.code 0} true;
    out_$p870, out_$p871 := out_$p869, out_$p857;
    goto $bb428;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    out_$p870, out_$p871 := out_$p877, out_$p872;
    goto $bb428;

  corral_source_split_6473:
    assume {:verifier.code 0} true;
    out_$p877 := $add.ref(out_$p856, $mul.ref(out_$i876, 1));
    goto corral_source_split_6474;

  corral_source_split_6472:
    assume {:verifier.code 0} true;
    out_$i876 := $sext.i32.i64(out_$i875);
    goto corral_source_split_6473;

  corral_source_split_6471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1105} out_$i875 := sprintf.ref.ref.i32(out_$p856, .str.4, out_$i874);
    goto corral_source_split_6472;

  corral_source_split_6470:
    assume {:verifier.code 0} true;
    out_$i874 := $zext.i8.i32(out_$i873);
    goto corral_source_split_6471;

  corral_source_split_6469:
    assume {:verifier.code 0} true;
    out_$i873 := $load.i8($M.0, out_$p857);
    goto corral_source_split_6470;

  $bb424:
    assume {:verifier.code 0} true;
    out_$p872 := $add.ref(out_$p857, $mul.ref(1, 1));
    goto corral_source_split_6469;

  $bb426:
    assume {:verifier.code 0} true;
    assume out_$i866 == 1;
    goto $bb424;

  $bb423:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb424;

  $bb422:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb423, $bb425;

  corral_source_split_6467:
    assume {:verifier.code 0} true;
    goto $bb422;

  $bb420:
    assume out_$i865 == 1;
    goto corral_source_split_6467;

  corral_source_split_6465:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb420, $bb421;

  corral_source_split_6464:
    assume {:verifier.code 0} true;
    out_$i865 := $sgt.i32(out_$i850, 0);
    goto corral_source_split_6465;

  corral_source_split_6463:
    assume {:verifier.code 0} true;
    out_$i864 := $sub.i32(out_$i850, 1);
    goto corral_source_split_6464;

  $bb419:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6463;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    out_$p855 := $add.ref(out_$p842, $mul.ref(out_$i854, 1));
    assume {:verifier.code 0} true;
    out_$p856, out_$p857 := out_$p855, out_$p843;
    goto $bb419;

  corral_source_split_6454:
    assume {:verifier.code 0} true;
    out_$p856, out_$p857 := out_$p863, out_$p858;
    goto $bb419;

  corral_source_split_6453:
    assume {:verifier.code 0} true;
    out_$p863 := $add.ref(out_$p842, $mul.ref(out_$i862, 1));
    goto corral_source_split_6454;

  corral_source_split_6452:
    assume {:verifier.code 0} true;
    out_$i862 := $sext.i32.i64(out_$i861);
    goto corral_source_split_6453;

  corral_source_split_6451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1103} out_$i861 := sprintf.ref.ref.i32(out_$p842, .str.4, out_$i860);
    goto corral_source_split_6452;

  corral_source_split_6450:
    assume {:verifier.code 0} true;
    out_$i860 := $zext.i8.i32(out_$i859);
    goto corral_source_split_6451;

  corral_source_split_6449:
    assume {:verifier.code 0} true;
    out_$i859 := $load.i8($M.0, out_$p843);
    goto corral_source_split_6450;

  $bb415:
    assume {:verifier.code 0} true;
    out_$p858 := $add.ref(out_$p843, $mul.ref(1, 1));
    goto corral_source_split_6449;

  $bb417:
    assume {:verifier.code 0} true;
    assume out_$i852 == 1;
    goto $bb415;

  $bb414:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb415;

  $bb413:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb414, $bb416;

  corral_source_split_6447:
    assume {:verifier.code 0} true;
    goto $bb413;

  $bb411:
    assume out_$i851 == 1;
    goto corral_source_split_6447;

  corral_source_split_6445:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb411, $bb412;

  corral_source_split_6444:
    assume {:verifier.code 0} true;
    out_$i851 := $sgt.i32(out_$i836, 0);
    goto corral_source_split_6445;

  corral_source_split_6443:
    assume {:verifier.code 0} true;
    out_$i850 := $sub.i32(out_$i836, 1);
    goto corral_source_split_6444;

  $bb410:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6443;

  corral_source_split_6441:
    assume {:verifier.code 0} true;
    out_$p841 := $add.ref(out_$p828, $mul.ref(out_$i840, 1));
    assume {:verifier.code 0} true;
    out_$p842, out_$p843 := out_$p841, out_$p829;
    goto $bb410;

  corral_source_split_6434:
    assume {:verifier.code 0} true;
    out_$p842, out_$p843 := out_$p849, out_$p844;
    goto $bb410;

  corral_source_split_6433:
    assume {:verifier.code 0} true;
    out_$p849 := $add.ref(out_$p828, $mul.ref(out_$i848, 1));
    goto corral_source_split_6434;

  corral_source_split_6432:
    assume {:verifier.code 0} true;
    out_$i848 := $sext.i32.i64(out_$i847);
    goto corral_source_split_6433;

  corral_source_split_6431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1101} out_$i847 := sprintf.ref.ref.i32(out_$p828, .str.4, out_$i846);
    goto corral_source_split_6432;

  corral_source_split_6430:
    assume {:verifier.code 0} true;
    out_$i846 := $zext.i8.i32(out_$i845);
    goto corral_source_split_6431;

  corral_source_split_6429:
    assume {:verifier.code 0} true;
    out_$i845 := $load.i8($M.0, out_$p829);
    goto corral_source_split_6430;

  $bb406:
    assume {:verifier.code 0} true;
    out_$p844 := $add.ref(out_$p829, $mul.ref(1, 1));
    goto corral_source_split_6429;

  $bb408:
    assume {:verifier.code 0} true;
    assume out_$i838 == 1;
    goto $bb406;

  $bb405:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb406;

  $bb404:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb405, $bb407;

  corral_source_split_6427:
    assume {:verifier.code 0} true;
    goto $bb404;

  $bb402:
    assume out_$i837 == 1;
    goto corral_source_split_6427;

  corral_source_split_6425:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb402, $bb403;

  corral_source_split_6424:
    assume {:verifier.code 0} true;
    out_$i837 := $sgt.i32(out_$i822, 0);
    goto corral_source_split_6425;

  corral_source_split_6423:
    assume {:verifier.code 0} true;
    out_$i836 := $sub.i32(out_$i822, 1);
    goto corral_source_split_6424;

  $bb401:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6423;

  corral_source_split_6421:
    assume {:verifier.code 0} true;
    out_$p827 := $add.ref(out_$p814, $mul.ref(out_$i826, 1));
    assume {:verifier.code 0} true;
    out_$p828, out_$p829 := out_$p827, out_$p815;
    goto $bb401;

  corral_source_split_6414:
    assume {:verifier.code 0} true;
    out_$p828, out_$p829 := out_$p835, out_$p830;
    goto $bb401;

  corral_source_split_6413:
    assume {:verifier.code 0} true;
    out_$p835 := $add.ref(out_$p814, $mul.ref(out_$i834, 1));
    goto corral_source_split_6414;

  corral_source_split_6412:
    assume {:verifier.code 0} true;
    out_$i834 := $sext.i32.i64(out_$i833);
    goto corral_source_split_6413;

  corral_source_split_6411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1099} out_$i833 := sprintf.ref.ref.i32(out_$p814, .str.4, out_$i832);
    goto corral_source_split_6412;

  corral_source_split_6410:
    assume {:verifier.code 0} true;
    out_$i832 := $zext.i8.i32(out_$i831);
    goto corral_source_split_6411;

  corral_source_split_6409:
    assume {:verifier.code 0} true;
    out_$i831 := $load.i8($M.0, out_$p815);
    goto corral_source_split_6410;

  $bb397:
    assume {:verifier.code 0} true;
    out_$p830 := $add.ref(out_$p815, $mul.ref(1, 1));
    goto corral_source_split_6409;

  $bb399:
    assume {:verifier.code 0} true;
    assume out_$i824 == 1;
    goto $bb397;

  $bb396:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb397;

  $bb395:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb396, $bb398;

  corral_source_split_6407:
    assume {:verifier.code 0} true;
    goto $bb395;

  $bb393:
    assume out_$i823 == 1;
    goto corral_source_split_6407;

  corral_source_split_6405:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb393, $bb394;

  corral_source_split_6404:
    assume {:verifier.code 0} true;
    out_$i823 := $sgt.i32(out_$i808, 0);
    goto corral_source_split_6405;

  corral_source_split_6403:
    assume {:verifier.code 0} true;
    out_$i822 := $sub.i32(out_$i808, 1);
    goto corral_source_split_6404;

  $bb392:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6403;

  corral_source_split_6401:
    assume {:verifier.code 0} true;
    out_$p813 := $add.ref(out_$p800, $mul.ref(out_$i812, 1));
    assume {:verifier.code 0} true;
    out_$p814, out_$p815 := out_$p813, out_$p801;
    goto $bb392;

  corral_source_split_6394:
    assume {:verifier.code 0} true;
    out_$p814, out_$p815 := out_$p821, out_$p816;
    goto $bb392;

  corral_source_split_6393:
    assume {:verifier.code 0} true;
    out_$p821 := $add.ref(out_$p800, $mul.ref(out_$i820, 1));
    goto corral_source_split_6394;

  corral_source_split_6392:
    assume {:verifier.code 0} true;
    out_$i820 := $sext.i32.i64(out_$i819);
    goto corral_source_split_6393;

  corral_source_split_6391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1097} out_$i819 := sprintf.ref.ref.i32(out_$p800, .str.4, out_$i818);
    goto corral_source_split_6392;

  corral_source_split_6390:
    assume {:verifier.code 0} true;
    out_$i818 := $zext.i8.i32(out_$i817);
    goto corral_source_split_6391;

  corral_source_split_6389:
    assume {:verifier.code 0} true;
    out_$i817 := $load.i8($M.0, out_$p801);
    goto corral_source_split_6390;

  $bb388:
    assume {:verifier.code 0} true;
    out_$p816 := $add.ref(out_$p801, $mul.ref(1, 1));
    goto corral_source_split_6389;

  $bb390:
    assume {:verifier.code 0} true;
    assume out_$i810 == 1;
    goto $bb388;

  $bb387:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb388;

  $bb386:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb387, $bb389;

  corral_source_split_6387:
    assume {:verifier.code 0} true;
    goto $bb386;

  $bb384:
    assume out_$i809 == 1;
    goto corral_source_split_6387;

  corral_source_split_6385:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb384, $bb385;

  corral_source_split_6384:
    assume {:verifier.code 0} true;
    out_$i809 := $sgt.i32(out_$i227, 0);
    goto corral_source_split_6385;

  corral_source_split_6383:
    assume {:verifier.code 0} true;
    out_$i808 := $sub.i32(out_$i227, 1);
    goto corral_source_split_6384;

  $bb383:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6383;

  corral_source_split_6381:
    assume {:verifier.code 0} true;
    out_$p799 := $add.ref(out_$p222, $mul.ref(out_$i798, 1));
    assume {:verifier.code 0} true;
    out_$p800, out_$p801 := out_$p799, out_$p223;
    goto $bb383;

  corral_source_split_6374:
    assume {:verifier.code 0} true;
    out_$p800, out_$p801 := out_$p807, out_$p802;
    goto $bb383;

  corral_source_split_6373:
    assume {:verifier.code 0} true;
    out_$p807 := $add.ref(out_$p222, $mul.ref(out_$i806, 1));
    goto corral_source_split_6374;

  corral_source_split_6372:
    assume {:verifier.code 0} true;
    out_$i806 := $sext.i32.i64(out_$i805);
    goto corral_source_split_6373;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1095} out_$i805 := sprintf.ref.ref.i32(out_$p222, .str.4, out_$i804);
    goto corral_source_split_6372;

  corral_source_split_6370:
    assume {:verifier.code 0} true;
    out_$i804 := $zext.i8.i32(out_$i803);
    goto corral_source_split_6371;

  corral_source_split_6369:
    assume {:verifier.code 0} true;
    out_$i803 := $load.i8($M.0, out_$p223);
    goto corral_source_split_6370;

  $bb379:
    assume {:verifier.code 0} true;
    out_$p802 := $add.ref(out_$p223, $mul.ref(1, 1));
    goto corral_source_split_6369;

  $bb381:
    assume {:verifier.code 0} true;
    assume out_$i796 == 1;
    goto $bb379;

  $bb378:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb379;

  $bb377:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb378, $bb380;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    goto $bb377;

  $bb83:
    assume out_$i228 == 1;
    goto corral_source_split_5594;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    out_$i228 := $sgt.i32(out_$i214, 0);
    goto corral_source_split_5592;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    out_$i227 := $sub.i32(out_$i214, 1);
    goto corral_source_split_5591;

  $bb82:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5590;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    out_$p226 := $add.ref(out_$p208, $mul.ref(out_$i225, 1));
    assume {:verifier.code 0} true;
    out_$p222, out_$p223 := out_$p226, out_$p211;
    goto $bb82;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    out_$p222, out_$p223 := out_$p221, out_$p216;
    goto $bb82;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    out_$p221 := $add.ref(out_$p208, $mul.ref(out_$i220, 1));
    goto corral_source_split_5581;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    out_$i220 := $sext.i32.i64(out_$i219);
    goto corral_source_split_5580;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1014} out_$i219 := sprintf.ref.ref.i32(out_$p208, .str.4, out_$i218);
    call {:si_unique_call 1015} {:cexpr "tmp___14"} boogie_si_record_i32(out_$i219);
    goto corral_source_split_5579;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    out_$i218 := $zext.i8.i32(out_$i217);
    goto corral_source_split_5578;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    out_$i217 := $load.i8($M.0, out_$p211);
    goto corral_source_split_5577;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    out_$p216 := $add.ref(out_$p210, $mul.ref(out_$i215, 1));
    goto corral_source_split_5576;

  $bb78:
    out_$i215 := $add.i64(4, 1);
    goto corral_source_split_5575;

  $bb80:
    assume {:verifier.code 0} true;
    assume out_$i213 == 1;
    goto $bb78;

  $bb77:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb78;

  $bb76:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb77, $bb79;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb86:
    assume out_$i229 == 1;
    goto corral_source_split_5596;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    out_$i229 := $sgt.i32(out_$i207, 0);
    goto corral_source_split_5573;

  $bb75:
    assume {:verifier.code 0} true;
    out_$i214 := $sub.i32(out_$i207, 1);
    call {:si_unique_call 1013} {:cexpr "m___0"} boogie_si_record_i32(out_$i214);
    goto corral_source_split_5572;

  corral_source_split_5565:
    assume {:verifier.code 0} true;
    goto $bb75;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    $M.24 := $store.i8($M.24, out_$p212, 0);
    goto corral_source_split_5565;

  corral_source_split_5563:
    assume {:verifier.code 0} true;
    out_$p212 := $add.ref($add.ref(in_$p3, $mul.ref(0, 94)), $mul.ref(0, 1));
    goto corral_source_split_5564;

  corral_source_split_5562:
    assume {:verifier.code 0} true;
    out_$p211 := $add.ref(out_$p210, $mul.ref(4, 1));
    goto corral_source_split_5563;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    out_$p210 := $bitcast.ref.ref(out_$p209);
    goto corral_source_split_5562;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    out_$p209 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7444, 1));
    goto corral_source_split_5561;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    out_$p208 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_5560;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    out_$i207 := $and.i32(out_$i206, 2047);
    call {:si_unique_call 1012} {:cexpr "payload"} boogie_si_record_i32(out_$i207);
    goto corral_source_split_5559;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    out_$i206 := $zext.i16.i32(out_$i201);
    goto corral_source_split_5558;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    out_$p205 := $add.ref(out_$p203, $mul.ref(out_$i204, 64));
    goto corral_source_split_5557;

  corral_source_split_5555:
    assume {:verifier.code 0} true;
    out_$i204 := $sext.i32.i64(out_$i187);
    goto corral_source_split_5556;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    out_$p203 := $bitcast.ref.ref(out_$p202);
    goto corral_source_split_5555;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    out_$p202 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(4800, 1));
    goto corral_source_split_5554;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    out_$i201 := $trunc.i32.i16(out_$i200);
    call {:si_unique_call 1011} {:cexpr "ed_length"} boogie_si_record_i16(out_$i201);
    goto corral_source_split_5553;

  corral_source_split_5551:
    assume {:verifier.code 0} true;
    out_$i200 := $or.i32(out_$i194, out_$i199);
    goto corral_source_split_5552;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    out_$i199 := $sext.i16.i32(out_$i198);
    goto corral_source_split_5551;

  corral_source_split_5549:
    assume {:verifier.code 0} true;
    out_$i198 := $zext.i8.i16(out_$i197);
    goto corral_source_split_5550;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    out_$i197 := $load.i8($M.0, out_$p196);
    goto corral_source_split_5549;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    out_$p196 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7444, 1)), $mul.ref(1, 1));
    goto corral_source_split_5548;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    out_$i194 := $sext.i16.i32(out_$i193);
    goto corral_source_split_5547;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    out_$i193 := $trunc.i32.i16(out_$i192);
    goto corral_source_split_5546;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    out_$i192 := $shl.i32(out_$i191, 8);
    goto corral_source_split_5545;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    out_$i191 := $zext.i8.i32(out_$i190);
    goto corral_source_split_5544;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    out_$i190 := $load.i8($M.0, out_$p189);
    goto corral_source_split_5543;

  corral_source_split_5541:
    assume {:verifier.code 0} true;
    out_$p189 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7444, 1)), $mul.ref(2, 1));
    goto corral_source_split_5542;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    out_$i187 := $and.i32(out_$i186, 3);
    call {:si_unique_call 1010} {:cexpr "ed_number"} boogie_si_record_i32(out_$i187);
    goto corral_source_split_5541;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    out_$i186 := $ashr.i32(out_$i185, 5);
    goto corral_source_split_5540;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    out_$i185 := $zext.i8.i32(out_$i184);
    goto corral_source_split_5539;

  corral_source_split_5537:
    assume {:verifier.code 0} true;
    out_$i184 := $load.i8($M.0, out_$p183);
    goto corral_source_split_5538;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    out_$p183 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7444, 1)), $mul.ref(0, 1));
    goto corral_source_split_5537;

  $bb73:
    assume out_$i181 == 1;
    goto corral_source_split_5536;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    out_$i181 := $ne.i32(out_$i180, 0);
    goto corral_source_split_5528;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    out_$i180 := $load.i32($M.0, out_$p179);
    goto corral_source_split_5527;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    out_$p179 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(8480, 1));
    goto corral_source_split_5526;

  $bb69:
    assume !(out_$i173 == 1);
    goto corral_source_split_5525;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    out_$i213 := $eq.i32(out_$i214, 0);
    goto corral_source_split_5584;

  $bb79:
    assume !(1 == 1);
    goto corral_source_split_5583;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    out_$i225 := $sext.i32.i64(out_$i224);
    goto corral_source_split_5588;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1016} out_$i224 := sprintf.ref.ref(out_$p208, .str.5);
    call {:si_unique_call 1017} {:cexpr "tmp___15"} boogie_si_record_i32(out_$i224);
    goto corral_source_split_5587;

  $bb81:
    assume !(out_$i213 == 1);
    goto corral_source_split_5586;

  corral_source_split_6377:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb381, $bb382;

  corral_source_split_6376:
    assume {:verifier.code 0} true;
    out_$i796 := $eq.i32(out_$i227, 0);
    goto corral_source_split_6377;

  $bb380:
    assume !(1 == 1);
    goto corral_source_split_6376;

  corral_source_split_6380:
    assume {:verifier.code 0} true;
    out_$i798 := $sext.i32.i64(out_$i797);
    goto corral_source_split_6381;

  corral_source_split_6379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1096} out_$i797 := sprintf.ref.ref(out_$p222, .str.5);
    goto corral_source_split_6380;

  $bb382:
    assume !(out_$i796 == 1);
    goto corral_source_split_6379;

  corral_source_split_6397:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb390, $bb391;

  corral_source_split_6396:
    assume {:verifier.code 0} true;
    out_$i810 := $eq.i32(out_$i808, 0);
    goto corral_source_split_6397;

  $bb389:
    assume !(1 == 1);
    goto corral_source_split_6396;

  corral_source_split_6400:
    assume {:verifier.code 0} true;
    out_$i812 := $sext.i32.i64(out_$i811);
    goto corral_source_split_6401;

  corral_source_split_6399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1098} out_$i811 := sprintf.ref.ref(out_$p800, .str.5);
    goto corral_source_split_6400;

  $bb391:
    assume !(out_$i810 == 1);
    goto corral_source_split_6399;

  corral_source_split_6417:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb399, $bb400;

  corral_source_split_6416:
    assume {:verifier.code 0} true;
    out_$i824 := $eq.i32(out_$i822, 0);
    goto corral_source_split_6417;

  $bb398:
    assume !(1 == 1);
    goto corral_source_split_6416;

  corral_source_split_6420:
    assume {:verifier.code 0} true;
    out_$i826 := $sext.i32.i64(out_$i825);
    goto corral_source_split_6421;

  corral_source_split_6419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1100} out_$i825 := sprintf.ref.ref(out_$p814, .str.5);
    goto corral_source_split_6420;

  $bb400:
    assume !(out_$i824 == 1);
    goto corral_source_split_6419;

  corral_source_split_6437:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb408, $bb409;

  corral_source_split_6436:
    assume {:verifier.code 0} true;
    out_$i838 := $eq.i32(out_$i836, 0);
    goto corral_source_split_6437;

  $bb407:
    assume !(1 == 1);
    goto corral_source_split_6436;

  corral_source_split_6440:
    assume {:verifier.code 0} true;
    out_$i840 := $sext.i32.i64(out_$i839);
    goto corral_source_split_6441;

  corral_source_split_6439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1102} out_$i839 := sprintf.ref.ref(out_$p828, .str.5);
    goto corral_source_split_6440;

  $bb409:
    assume !(out_$i838 == 1);
    goto corral_source_split_6439;

  corral_source_split_6457:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb417, $bb418;

  corral_source_split_6456:
    assume {:verifier.code 0} true;
    out_$i852 := $eq.i32(out_$i850, 0);
    goto corral_source_split_6457;

  $bb416:
    assume !(1 == 1);
    goto corral_source_split_6456;

  corral_source_split_6460:
    assume {:verifier.code 0} true;
    out_$i854 := $sext.i32.i64(out_$i853);
    goto corral_source_split_6461;

  corral_source_split_6459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1104} out_$i853 := sprintf.ref.ref(out_$p842, .str.5);
    goto corral_source_split_6460;

  $bb418:
    assume !(out_$i852 == 1);
    goto corral_source_split_6459;

  corral_source_split_6477:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb426, $bb427;

  corral_source_split_6476:
    assume {:verifier.code 0} true;
    out_$i866 := $eq.i32(out_$i864, 0);
    goto corral_source_split_6477;

  $bb425:
    assume !(1 == 1);
    goto corral_source_split_6476;

  corral_source_split_6480:
    assume {:verifier.code 0} true;
    out_$i868 := $sext.i32.i64(out_$i867);
    goto corral_source_split_6481;

  corral_source_split_6479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1106} out_$i867 := sprintf.ref.ref(out_$p856, .str.5);
    goto corral_source_split_6480;

  $bb427:
    assume !(out_$i866 == 1);
    goto corral_source_split_6479;

  corral_source_split_6497:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb435, $bb436;

  corral_source_split_6496:
    assume {:verifier.code 0} true;
    out_$i880 := $eq.i32(out_$i878, 0);
    goto corral_source_split_6497;

  $bb434:
    assume !(1 == 1);
    goto corral_source_split_6496;

  corral_source_split_6500:
    assume {:verifier.code 0} true;
    out_$i882 := $sext.i32.i64(out_$i881);
    goto corral_source_split_6501;

  corral_source_split_6499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1108} out_$i881 := sprintf.ref.ref(out_$p870, .str.5);
    goto corral_source_split_6500;

  $bb436:
    assume !(out_$i880 == 1);
    goto corral_source_split_6499;

  corral_source_split_6517:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb444, $bb445;

  corral_source_split_6516:
    assume {:verifier.code 0} true;
    out_$i894 := $eq.i32(out_$i892, 0);
    goto corral_source_split_6517;

  $bb443:
    assume !(1 == 1);
    goto corral_source_split_6516;

  corral_source_split_6520:
    assume {:verifier.code 0} true;
    out_$i896 := $sext.i32.i64(out_$i895);
    goto corral_source_split_6521;

  corral_source_split_6519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1110} out_$i895 := sprintf.ref.ref(out_$p884, .str.5);
    goto corral_source_split_6520;

  $bb445:
    assume !(out_$i894 == 1);
    goto corral_source_split_6519;

  corral_source_split_6537:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb453, $bb454;

  corral_source_split_6536:
    assume {:verifier.code 0} true;
    out_$i908 := $eq.i32(out_$i906, 0);
    goto corral_source_split_6537;

  $bb452:
    assume !(1 == 1);
    goto corral_source_split_6536;

  corral_source_split_6540:
    assume {:verifier.code 0} true;
    out_$i910 := $sext.i32.i64(out_$i909);
    goto corral_source_split_6541;

  corral_source_split_6539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1112} out_$i909 := sprintf.ref.ref(out_$p898, .str.5);
    goto corral_source_split_6540;

  $bb454:
    assume !(out_$i908 == 1);
    goto corral_source_split_6539;

  corral_source_split_6557:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb462, $bb463;

  corral_source_split_6556:
    assume {:verifier.code 0} true;
    out_$i922 := $eq.i32(out_$i920, 0);
    goto corral_source_split_6557;

  $bb461:
    assume !(1 == 1);
    goto corral_source_split_6556;

  corral_source_split_6560:
    assume {:verifier.code 0} true;
    out_$i924 := $sext.i32.i64(out_$i923);
    goto corral_source_split_6561;

  corral_source_split_6559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1114} out_$i923 := sprintf.ref.ref(out_$p912, .str.5);
    goto corral_source_split_6560;

  $bb463:
    assume !(out_$i922 == 1);
    goto corral_source_split_6559;

  corral_source_split_6577:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb471, $bb472;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    out_$i936 := $eq.i32(out_$i934, 0);
    goto corral_source_split_6577;

  $bb470:
    assume !(1 == 1);
    goto corral_source_split_6576;

  corral_source_split_6580:
    assume {:verifier.code 0} true;
    out_$i938 := $sext.i32.i64(out_$i937);
    goto corral_source_split_6581;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1116} out_$i937 := sprintf.ref.ref(out_$p926, .str.5);
    goto corral_source_split_6580;

  $bb472:
    assume !(out_$i936 == 1);
    goto corral_source_split_6579;

  corral_source_split_6597:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb480, $bb481;

  corral_source_split_6596:
    assume {:verifier.code 0} true;
    out_$i950 := $eq.i32(out_$i948, 0);
    goto corral_source_split_6597;

  $bb479:
    assume !(1 == 1);
    goto corral_source_split_6596;

  corral_source_split_6600:
    assume {:verifier.code 0} true;
    out_$i952 := $sext.i32.i64(out_$i951);
    goto corral_source_split_6601;

  corral_source_split_6599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1118} out_$i951 := sprintf.ref.ref(out_$p940, .str.5);
    goto corral_source_split_6600;

  $bb481:
    assume !(out_$i950 == 1);
    goto corral_source_split_6599;

  corral_source_split_6617:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb489, $bb490;

  corral_source_split_6616:
    assume {:verifier.code 0} true;
    out_$i964 := $eq.i32(out_$i962, 0);
    goto corral_source_split_6617;

  $bb488:
    assume !(1 == 1);
    goto corral_source_split_6616;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    out_$i966 := $sext.i32.i64(out_$i965);
    goto corral_source_split_6621;

  corral_source_split_6619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1120} out_$i965 := sprintf.ref.ref(out_$p954, .str.5);
    goto corral_source_split_6620;

  $bb490:
    assume !(out_$i964 == 1);
    goto corral_source_split_6619;

  corral_source_split_6637:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb498, $bb499;

  corral_source_split_6636:
    assume {:verifier.code 0} true;
    out_$i978 := $eq.i32(out_$i976, 0);
    goto corral_source_split_6637;

  $bb497:
    assume !(1 == 1);
    goto corral_source_split_6636;

  corral_source_split_6640:
    assume {:verifier.code 0} true;
    out_$i980 := $sext.i32.i64(out_$i979);
    goto corral_source_split_6641;

  corral_source_split_6639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1122} out_$i979 := sprintf.ref.ref(out_$p968, .str.5);
    goto corral_source_split_6640;

  $bb499:
    assume !(out_$i978 == 1);
    goto corral_source_split_6639;

  corral_source_split_6657:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb507, $bb508;

  corral_source_split_6656:
    assume {:verifier.code 0} true;
    out_$i992 := $eq.i32(out_$i990, 0);
    goto corral_source_split_6657;

  $bb506:
    assume !(1 == 1);
    goto corral_source_split_6656;

  corral_source_split_6660:
    assume {:verifier.code 0} true;
    out_$i994 := $sext.i32.i64(out_$i993);
    goto corral_source_split_6661;

  corral_source_split_6659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1124} out_$i993 := sprintf.ref.ref(out_$p982, .str.5);
    goto corral_source_split_6660;

  $bb508:
    assume !(out_$i992 == 1);
    goto corral_source_split_6659;

  corral_source_split_6677:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb516, $bb517;

  corral_source_split_6676:
    assume {:verifier.code 0} true;
    out_$i1006 := $eq.i32(out_$i1004, 0);
    goto corral_source_split_6677;

  $bb515:
    assume !(1 == 1);
    goto corral_source_split_6676;

  corral_source_split_6680:
    assume {:verifier.code 0} true;
    out_$i1008 := $sext.i32.i64(out_$i1007);
    goto corral_source_split_6681;

  corral_source_split_6679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1126} out_$i1007 := sprintf.ref.ref(out_$p996, .str.5);
    goto corral_source_split_6680;

  $bb517:
    assume !(out_$i1006 == 1);
    goto corral_source_split_6679;

  corral_source_split_6697:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb525, $bb526;

  corral_source_split_6696:
    assume {:verifier.code 0} true;
    out_$i1020 := $eq.i32(out_$i1018, 0);
    goto corral_source_split_6697;

  $bb524:
    assume !(1 == 1);
    goto corral_source_split_6696;

  corral_source_split_6700:
    assume {:verifier.code 0} true;
    out_$i1022 := $sext.i32.i64(out_$i1021);
    goto corral_source_split_6701;

  corral_source_split_6699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1128} out_$i1021 := sprintf.ref.ref(out_$p1010, .str.5);
    goto corral_source_split_6700;

  $bb526:
    assume !(out_$i1020 == 1);
    goto corral_source_split_6699;

  corral_source_split_6717:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb534, $bb535;

  corral_source_split_6716:
    assume {:verifier.code 0} true;
    out_$i1034 := $eq.i32(out_$i1032, 0);
    goto corral_source_split_6717;

  $bb533:
    assume !(1 == 1);
    goto corral_source_split_6716;

  corral_source_split_6720:
    assume {:verifier.code 0} true;
    out_$i1036 := $sext.i32.i64(out_$i1035);
    goto corral_source_split_6721;

  corral_source_split_6719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1130} out_$i1035 := sprintf.ref.ref(out_$p1024, .str.5);
    goto corral_source_split_6720;

  $bb535:
    assume !(out_$i1034 == 1);
    goto corral_source_split_6719;

  corral_source_split_6737:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb543, $bb544;

  corral_source_split_6736:
    assume {:verifier.code 0} true;
    out_$i1048 := $eq.i32(out_$i1046, 0);
    goto corral_source_split_6737;

  $bb542:
    assume !(1 == 1);
    goto corral_source_split_6736;

  corral_source_split_6740:
    assume {:verifier.code 0} true;
    out_$i1050 := $sext.i32.i64(out_$i1049);
    goto corral_source_split_6741;

  corral_source_split_6739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1132} out_$i1049 := sprintf.ref.ref(out_$p1038, .str.5);
    goto corral_source_split_6740;

  $bb544:
    assume !(out_$i1048 == 1);
    goto corral_source_split_6739;

  corral_source_split_6757:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb552, $bb553;

  corral_source_split_6756:
    assume {:verifier.code 0} true;
    out_$i1062 := $eq.i32(out_$i1060, 0);
    goto corral_source_split_6757;

  $bb551:
    assume !(1 == 1);
    goto corral_source_split_6756;

  corral_source_split_6760:
    assume {:verifier.code 0} true;
    out_$i1064 := $sext.i32.i64(out_$i1063);
    goto corral_source_split_6761;

  corral_source_split_6759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1134} out_$i1063 := sprintf.ref.ref(out_$p1052, .str.5);
    goto corral_source_split_6760;

  $bb553:
    assume !(out_$i1062 == 1);
    goto corral_source_split_6759;

  corral_source_split_6777:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb561, $bb562;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    out_$i1076 := $eq.i32(out_$i1074, 0);
    goto corral_source_split_6777;

  $bb560:
    assume !(1 == 1);
    goto corral_source_split_6776;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    out_$i1078 := $sext.i32.i64(out_$i1077);
    goto corral_source_split_6781;

  corral_source_split_6779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1136} out_$i1077 := sprintf.ref.ref(out_$p1066, .str.5);
    goto corral_source_split_6780;

  $bb562:
    assume !(out_$i1076 == 1);
    goto corral_source_split_6779;

  corral_source_split_6797:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb570, $bb571;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    out_$i1090 := $eq.i32(out_$i1088, 0);
    goto corral_source_split_6797;

  $bb569:
    assume !(1 == 1);
    goto corral_source_split_6796;

  corral_source_split_6800:
    assume {:verifier.code 0} true;
    out_$i1092 := $sext.i32.i64(out_$i1091);
    goto corral_source_split_6801;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1138} out_$i1091 := sprintf.ref.ref(out_$p1080, .str.5);
    goto corral_source_split_6800;

  $bb571:
    assume !(out_$i1090 == 1);
    goto corral_source_split_6799;

  corral_source_split_6817:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb579, $bb580;

  corral_source_split_6816:
    assume {:verifier.code 0} true;
    out_$i1104 := $eq.i32(out_$i1102, 0);
    goto corral_source_split_6817;

  $bb578:
    assume !(1 == 1);
    goto corral_source_split_6816;

  corral_source_split_6820:
    assume {:verifier.code 0} true;
    out_$i1106 := $sext.i32.i64(out_$i1105);
    goto corral_source_split_6821;

  corral_source_split_6819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1140} out_$i1105 := sprintf.ref.ref(out_$p1094, .str.5);
    goto corral_source_split_6820;

  $bb580:
    assume !(out_$i1104 == 1);
    goto corral_source_split_6819;

  corral_source_split_6837:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb588, $bb589;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    out_$i1118 := $eq.i32(out_$i1116, 0);
    goto corral_source_split_6837;

  $bb587:
    assume !(1 == 1);
    goto corral_source_split_6836;

  corral_source_split_6840:
    assume {:verifier.code 0} true;
    out_$i1120 := $sext.i32.i64(out_$i1119);
    goto corral_source_split_6841;

  corral_source_split_6839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1142} out_$i1119 := sprintf.ref.ref(out_$p1108, .str.5);
    goto corral_source_split_6840;

  $bb589:
    assume !(out_$i1118 == 1);
    goto corral_source_split_6839;

  corral_source_split_6857:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb597, $bb598;

  corral_source_split_6856:
    assume {:verifier.code 0} true;
    out_$i1132 := $eq.i32(out_$i1130, 0);
    goto corral_source_split_6857;

  $bb596:
    assume !(1 == 1);
    goto corral_source_split_6856;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    out_$i1134 := $sext.i32.i64(out_$i1133);
    goto corral_source_split_6861;

  corral_source_split_6859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1144} out_$i1133 := sprintf.ref.ref(out_$p1122, .str.5);
    goto corral_source_split_6860;

  $bb598:
    assume !(out_$i1132 == 1);
    goto corral_source_split_6859;

  corral_source_split_6877:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb606, $bb607;

  corral_source_split_6876:
    assume {:verifier.code 0} true;
    out_$i1146 := $eq.i32(out_$i1144, 0);
    goto corral_source_split_6877;

  $bb605:
    assume !(1 == 1);
    goto corral_source_split_6876;

  corral_source_split_6880:
    assume {:verifier.code 0} true;
    out_$i1148 := $sext.i32.i64(out_$i1147);
    goto corral_source_split_6881;

  corral_source_split_6879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1146} out_$i1147 := sprintf.ref.ref(out_$p1136, .str.5);
    goto corral_source_split_6880;

  $bb607:
    assume !(out_$i1146 == 1);
    goto corral_source_split_6879;

  corral_source_split_6897:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb615, $bb616;

  corral_source_split_6896:
    assume {:verifier.code 0} true;
    out_$i1160 := $eq.i32(out_$i1158, 0);
    goto corral_source_split_6897;

  $bb614:
    assume !(1 == 1);
    goto corral_source_split_6896;

  corral_source_split_6900:
    assume {:verifier.code 0} true;
    out_$i1162 := $sext.i32.i64(out_$i1161);
    goto corral_source_split_6901;

  corral_source_split_6899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1148} out_$i1161 := sprintf.ref.ref(out_$p1150, .str.5);
    goto corral_source_split_6900;

  $bb616:
    assume !(out_$i1160 == 1);
    goto corral_source_split_6899;

  corral_source_split_6917:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb624, $bb625;

  corral_source_split_6916:
    assume {:verifier.code 0} true;
    out_$i1174 := $eq.i32(out_$i1172, 0);
    goto corral_source_split_6917;

  $bb623:
    assume !(1 == 1);
    goto corral_source_split_6916;

  corral_source_split_6920:
    assume {:verifier.code 0} true;
    out_$i1176 := $sext.i32.i64(out_$i1175);
    goto corral_source_split_6921;

  corral_source_split_6919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1150} out_$i1175 := sprintf.ref.ref(out_$p1164, .str.5);
    goto corral_source_split_6920;

  $bb625:
    assume !(out_$i1174 == 1);
    goto corral_source_split_6919;

  corral_source_split_6937:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb633, $bb634;

  corral_source_split_6936:
    assume {:verifier.code 0} true;
    out_$i1188 := $eq.i32(out_$i1186, 0);
    goto corral_source_split_6937;

  $bb632:
    assume !(1 == 1);
    goto corral_source_split_6936;

  corral_source_split_6940:
    assume {:verifier.code 0} true;
    out_$i1190 := $sext.i32.i64(out_$i1189);
    goto corral_source_split_6941;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1152} out_$i1189 := sprintf.ref.ref(out_$p1178, .str.5);
    goto corral_source_split_6940;

  $bb634:
    assume !(out_$i1188 == 1);
    goto corral_source_split_6939;

  corral_source_split_6954:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb642, $bb643;

  corral_source_split_6953:
    assume {:verifier.code 0} true;
    out_$i1202 := $eq.i32(out_$i1200, 0);
    goto corral_source_split_6954;

  $bb641:
    assume !(0 == 1);
    goto corral_source_split_6953;

  $bb643:
    assume !(out_$i1202 == 1);
    goto corral_source_split_6956;

  $bb87:
    assume {:verifier.code 0} true;
    assume !(out_$i229 == 1);
    goto $bb85;

  $bb84:
    assume {:verifier.code 0} true;
    assume !(out_$i228 == 1);
    goto $bb85;

  $bb385:
    assume {:verifier.code 0} true;
    assume !(out_$i809 == 1);
    goto $bb85;

  $bb394:
    assume {:verifier.code 0} true;
    assume !(out_$i823 == 1);
    goto $bb85;

  $bb403:
    assume {:verifier.code 0} true;
    assume !(out_$i837 == 1);
    goto $bb85;

  $bb412:
    assume {:verifier.code 0} true;
    assume !(out_$i851 == 1);
    goto $bb85;

  $bb421:
    assume {:verifier.code 0} true;
    assume !(out_$i865 == 1);
    goto $bb85;

  $bb430:
    assume {:verifier.code 0} true;
    assume !(out_$i879 == 1);
    goto $bb85;

  $bb439:
    assume {:verifier.code 0} true;
    assume !(out_$i893 == 1);
    goto $bb85;

  $bb448:
    assume {:verifier.code 0} true;
    assume !(out_$i907 == 1);
    goto $bb85;

  $bb457:
    assume {:verifier.code 0} true;
    assume !(out_$i921 == 1);
    goto $bb85;

  $bb466:
    assume {:verifier.code 0} true;
    assume !(out_$i935 == 1);
    goto $bb85;

  $bb475:
    assume {:verifier.code 0} true;
    assume !(out_$i949 == 1);
    goto $bb85;

  $bb484:
    assume {:verifier.code 0} true;
    assume !(out_$i963 == 1);
    goto $bb85;

  $bb493:
    assume {:verifier.code 0} true;
    assume !(out_$i977 == 1);
    goto $bb85;

  $bb502:
    assume {:verifier.code 0} true;
    assume !(out_$i991 == 1);
    goto $bb85;

  $bb511:
    assume {:verifier.code 0} true;
    assume !(out_$i1005 == 1);
    goto $bb85;

  $bb520:
    assume {:verifier.code 0} true;
    assume !(out_$i1019 == 1);
    goto $bb85;

  $bb529:
    assume {:verifier.code 0} true;
    assume !(out_$i1033 == 1);
    goto $bb85;

  $bb538:
    assume {:verifier.code 0} true;
    assume !(out_$i1047 == 1);
    goto $bb85;

  $bb547:
    assume {:verifier.code 0} true;
    assume !(out_$i1061 == 1);
    goto $bb85;

  $bb556:
    assume {:verifier.code 0} true;
    assume !(out_$i1075 == 1);
    goto $bb85;

  $bb565:
    assume {:verifier.code 0} true;
    assume !(out_$i1089 == 1);
    goto $bb85;

  $bb574:
    assume {:verifier.code 0} true;
    assume !(out_$i1103 == 1);
    goto $bb85;

  $bb583:
    assume {:verifier.code 0} true;
    assume !(out_$i1117 == 1);
    goto $bb85;

  $bb592:
    assume {:verifier.code 0} true;
    assume !(out_$i1131 == 1);
    goto $bb85;

  $bb601:
    assume {:verifier.code 0} true;
    assume !(out_$i1145 == 1);
    goto $bb85;

  $bb610:
    assume {:verifier.code 0} true;
    assume !(out_$i1159 == 1);
    goto $bb85;

  $bb619:
    assume {:verifier.code 0} true;
    assume !(out_$i1173 == 1);
    goto $bb85;

  $bb628:
    assume {:verifier.code 0} true;
    assume !(out_$i1187 == 1);
    goto $bb85;

  $bb637:
    assume {:verifier.code 0} true;
    assume !(out_$i1201 == 1);
    goto $bb85;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb94;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb92:
    assume out_$i291 == 1;
    goto corral_source_split_5672;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  corral_source_split_5663:
    assume {:verifier.code 0} true;
    out_$i291 := $eq.i32(out_$i290, 0);
    goto corral_source_split_5664;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    out_$i290 := $zext.i8.i32(out_$i289);
    goto corral_source_split_5663;

  corral_source_split_5661:
    assume {:verifier.code 0} true;
    out_$i289 := $trunc.i32.i8(out_$i288);
    call {:si_unique_call 1028} {:cexpr "buscmd"} boogie_si_record_i8(out_$i289);
    goto corral_source_split_5662;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    out_$i288 := $and.i32(out_$i287, 15);
    goto corral_source_split_5661;

  corral_source_split_5659:
    assume {:verifier.code 0} true;
    out_$i287 := $zext.i8.i32(out_$i286);
    goto corral_source_split_5660;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    out_$i286 := $load.i8($M.0, out_$p285);
    goto corral_source_split_5659;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    out_$p285 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7444, 1)), $mul.ref(0, 1));
    goto corral_source_split_5658;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    goto corral_source_split_5657;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    out_$p282 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7444, 1));
    goto corral_source_split_5656;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p281, 0);
    goto corral_source_split_5655;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    out_$p281 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(8480, 1));
    goto corral_source_split_5654;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p280, 4);
    goto corral_source_split_5653;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    out_$p280 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(8472, 1));
    goto corral_source_split_5652;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p279, 0);
    goto corral_source_split_5651;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    out_$p279 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(8476, 1));
    goto corral_source_split_5650;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1027} complete_(out_$p278);
    goto corral_source_split_5649;

  corral_source_split_5647:
    assume {:verifier.code 0} true;
    out_$p278 := $add.ref($add.ref(out_$p248, $mul.ref(out_$i250, 120)), $mul.ref(24, 1));
    goto corral_source_split_5648;

  corral_source_split_5646:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p277, 0);
    goto corral_source_split_5647;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    out_$p277 := $load.ref($M.0, out_$p276);
    goto corral_source_split_5646;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    out_$p276 := $add.ref($add.ref(out_$p248, $mul.ref(out_$i250, 120)), $mul.ref(16, 1));
    goto corral_source_split_5645;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p275, out_$i273);
    goto corral_source_split_5644;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    out_$p275 := $load.ref($M.0, out_$p274);
    goto corral_source_split_5643;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    out_$p274 := $add.ref($add.ref(out_$p248, $mul.ref(out_$i250, 120)), $mul.ref(8, 1));
    goto corral_source_split_5642;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    out_$i273 := $or.i32(out_$i272, out_$i268);
    call {:si_unique_call 1026} {:cexpr "data"} boogie_si_record_i32(out_$i273);
    goto corral_source_split_5641;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    out_$i272 := $zext.i8.i32(out_$i271);
    goto corral_source_split_5640;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    out_$i271 := $load.i8($M.0, out_$p270);
    goto corral_source_split_5639;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    out_$p270 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7444, 1)), $mul.ref(4, 1));
    goto corral_source_split_5638;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    out_$i268 := $shl.i32(out_$i267, 8);
    call {:si_unique_call 1025} {:cexpr "data"} boogie_si_record_i32(out_$i268);
    goto corral_source_split_5637;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    out_$i267 := $or.i32(out_$i266, out_$i262);
    call {:si_unique_call 1024} {:cexpr "data"} boogie_si_record_i32(out_$i267);
    goto corral_source_split_5636;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    out_$i266 := $zext.i8.i32(out_$i265);
    goto corral_source_split_5635;

  corral_source_split_5633:
    assume {:verifier.code 0} true;
    out_$i265 := $load.i8($M.0, out_$p264);
    goto corral_source_split_5634;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    out_$p264 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7444, 1)), $mul.ref(5, 1));
    goto corral_source_split_5633;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    out_$i262 := $shl.i32(out_$i261, 8);
    call {:si_unique_call 1023} {:cexpr "data"} boogie_si_record_i32(out_$i262);
    goto corral_source_split_5632;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    out_$i261 := $or.i32(out_$i260, out_$i256);
    call {:si_unique_call 1022} {:cexpr "data"} boogie_si_record_i32(out_$i261);
    goto corral_source_split_5631;

  corral_source_split_5629:
    assume {:verifier.code 0} true;
    out_$i260 := $zext.i8.i32(out_$i259);
    goto corral_source_split_5630;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    out_$i259 := $load.i8($M.0, out_$p258);
    goto corral_source_split_5629;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    out_$p258 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7444, 1)), $mul.ref(6, 1));
    goto corral_source_split_5628;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    out_$i256 := $shl.i32(out_$i255, 8);
    call {:si_unique_call 1021} {:cexpr "data"} boogie_si_record_i32(out_$i256);
    goto corral_source_split_5627;

  corral_source_split_5625:
    assume {:verifier.code 0} true;
    out_$i255 := $zext.i8.i32(out_$i254);
    call {:si_unique_call 1020} {:cexpr "data"} boogie_si_record_i32(out_$i255);
    goto corral_source_split_5626;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    out_$i254 := $load.i8($M.0, out_$p253);
    goto corral_source_split_5625;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    out_$p253 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7444, 1)), $mul.ref(7, 1));
    goto corral_source_split_5624;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    goto corral_source_split_5623;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    out_$i250 := $and.i64(out_$i249, 31);
    goto corral_source_split_5622;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    out_$i249 := $sext.i32.i64(out_$i242);
    goto corral_source_split_5621;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    out_$p248 := $bitcast.ref.ref(out_$p247);
    goto corral_source_split_5620;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    out_$p247 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(960, 1));
    goto corral_source_split_5619;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p246, out_$i245);
    goto corral_source_split_5618;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    out_$p246 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(956, 1));
    goto corral_source_split_5617;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    out_$i245 := $add.i32(out_$i244, 1);
    goto corral_source_split_5616;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    out_$i244 := $load.i32($M.0, out_$p243);
    goto corral_source_split_5615;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    out_$p243 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(956, 1));
    goto corral_source_split_5614;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    out_$i242 := $load.i32($M.0, out_$p241);
    call {:si_unique_call 1019} {:cexpr "tmp___18"} boogie_si_record_i32(out_$i242);
    goto corral_source_split_5613;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    out_$p241 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(956, 1));
    goto corral_source_split_5612;

  $bb90:
    assume out_$i240 == 1;
    goto corral_source_split_5611;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  corral_source_split_5569:
    assume {:verifier.code 0} true;
    out_$i240 := $eq.i32(out_$i239, 8);
    goto corral_source_split_5570;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    out_$i239 := $load.i32($M.0, out_$p238);
    goto corral_source_split_5569;

  corral_source_split_5567:
    assume {:verifier.code 0} true;
    out_$p238 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(8472, 1));
    goto corral_source_split_5568;

  $bb74:
    assume !(out_$i181 == 1);
    goto corral_source_split_5567;

  $bb100:
    assume {:verifier.code 0} true;
    goto $bb97;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb95:
    assume out_$i293 == 1;
    goto corral_source_split_5678;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    out_$i293 := $eq.i32(out_$i292, 2);
    goto corral_source_split_5676;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    out_$i292 := $zext.i8.i32(out_$i289);
    goto corral_source_split_5675;

  $bb93:
    assume !(out_$i291 == 1);
    goto corral_source_split_5674;

  $bb103:
    assume {:verifier.code 0} true;
    goto $bb100;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb98:
    assume out_$i295 == 1;
    goto corral_source_split_5684;

  corral_source_split_5682:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    out_$i295 := $eq.i32(out_$i294, 6);
    goto corral_source_split_5682;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    out_$i294 := $zext.i8.i32(out_$i289);
    goto corral_source_split_5681;

  $bb96:
    assume !(out_$i293 == 1);
    goto corral_source_split_5680;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1029} dev_err.ref.ref.i32.i32(out_$p300, .str.10, out_$i301, out_$i273);
    assume {:verifier.code 0} true;
    goto $bb103;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb101:
    assume out_$i297 == 1;
    goto corral_source_split_5690;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    out_$i297 := $eq.i32(out_$i296, 10);
    goto corral_source_split_5688;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    out_$i296 := $zext.i8.i32(out_$i289);
    goto corral_source_split_5687;

  $bb99:
    assume !(out_$i295 == 1);
    goto corral_source_split_5686;

  corral_source_split_5695:
    assume {:verifier.code 0} true;
    out_$i301 := $zext.i8.i32(out_$i289);
    goto corral_source_split_5696;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    out_$p300 := $add.ref($add.ref(out_$p299, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_5695;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    out_$p299 := $load.ref($M.0, out_$p298);
    goto corral_source_split_5694;

  corral_source_split_5692:
    assume {:verifier.code 0} true;
    out_$p298 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_5693;

  $bb102:
    assume !(out_$i297 == 1);
    goto corral_source_split_5692;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p307, 8);
    goto corral_source_split_5700;

  corral_source_split_5698:
    assume {:verifier.code 0} true;
    out_$p307 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(8472, 1));
    goto corral_source_split_5699;

  $bb104:
    assume out_$i306 == 1;
    goto corral_source_split_5698;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb104, $bb105;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    out_$i306 := $sge.i32(out_$i305, 0);
    goto corral_source_split_5670;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    out_$i305 := $sext.i8.i32(out_$i304);
    goto corral_source_split_5669;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    out_$i304 := $load.i8($M.0, out_$p303);
    goto corral_source_split_5668;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    out_$p303 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7444, 1)), $mul.ref(0, 1));
    goto corral_source_split_5667;

  $bb91:
    assume !(out_$i240 == 1);
    goto corral_source_split_5666;

  SeqInstr_699:
    goto corral_source_split_5771;

  SeqInstr_698:
    assume assertsPassed;
    goto SeqInstr_699;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1033} out_$p379 := have_ed_set_response(in_$p0, out_$p336, out_$i378, out_$i313, out_$i318, out_$p164);
    goto SeqInstr_698;

  corral_source_split_5769:
    assume {:verifier.code 0} true;
    out_$i378 := $trunc.i32.i16(out_$i377);
    goto corral_source_split_5770;

  corral_source_split_5768:
    assume {:verifier.code 0} true;
    out_$i377 := $zext.i16.i32(out_$i332);
    goto corral_source_split_5769;

  $bb106:
    assume out_$i376 == 1;
    goto corral_source_split_5768;

  corral_source_split_5766:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    out_$i376 := $eq.i32(out_$i375, 0);
    goto corral_source_split_5766;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    out_$i375 := $and.i32(out_$i374, 16);
    goto corral_source_split_5765;

  corral_source_split_5763:
    assume {:verifier.code 0} true;
    out_$i374 := $zext.i8.i32(out_$i373);
    goto corral_source_split_5764;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    out_$i373 := $load.i8($M.0, out_$p372);
    goto corral_source_split_5763;

  corral_source_split_5761:
    assume {:verifier.code 0} true;
    out_$p372 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7444, 1)), $mul.ref(0, 1));
    goto corral_source_split_5762;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p370, out_$i369);
    goto corral_source_split_5761;

  corral_source_split_5759:
    assume {:verifier.code 0} true;
    out_$p370 := $add.ref($add.ref(out_$p334, $mul.ref(out_$i335, 64)), $mul.ref(24, 1));
    goto corral_source_split_5760;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    out_$i369 := $and.i32(out_$i368, 15);
    goto corral_source_split_5759;

  corral_source_split_5757:
    assume {:verifier.code 0} true;
    out_$i368 := $zext.i8.i32(out_$i367);
    goto corral_source_split_5758;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    out_$i367 := $load.i8($M.0, out_$p366);
    goto corral_source_split_5757;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    out_$p366 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7444, 1)), $mul.ref(3, 1));
    goto corral_source_split_5756;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p364, out_$i363);
    goto corral_source_split_5755;

  corral_source_split_5753:
    assume {:verifier.code 0} true;
    out_$p364 := $add.ref($add.ref(out_$p334, $mul.ref(out_$i335, 64)), $mul.ref(20, 1));
    goto corral_source_split_5754;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    out_$i363 := $and.i32(out_$i362, 3);
    goto corral_source_split_5753;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    out_$i362 := $ashr.i32(out_$i361, 4);
    goto corral_source_split_5752;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    out_$i361 := $zext.i8.i32(out_$i360);
    goto corral_source_split_5751;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    out_$i360 := $load.i8($M.0, out_$p359);
    goto corral_source_split_5750;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    out_$p359 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7444, 1)), $mul.ref(3, 1));
    goto corral_source_split_5749;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p357, out_$i356);
    goto corral_source_split_5748;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    out_$p357 := $add.ref($add.ref(out_$p334, $mul.ref(out_$i335, 64)), $mul.ref(16, 1));
    goto corral_source_split_5747;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    out_$i356 := $and.i32(out_$i355, 3);
    goto corral_source_split_5746;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    out_$i355 := $ashr.i32(out_$i354, 6);
    goto corral_source_split_5745;

  corral_source_split_5743:
    assume {:verifier.code 0} true;
    out_$i354 := $zext.i8.i32(out_$i353);
    goto corral_source_split_5744;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    out_$i353 := $load.i8($M.0, out_$p352);
    goto corral_source_split_5743;

  corral_source_split_5741:
    assume {:verifier.code 0} true;
    out_$p352 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7444, 1)), $mul.ref(3, 1));
    goto corral_source_split_5742;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p350, out_$i349);
    goto corral_source_split_5741;

  corral_source_split_5739:
    assume {:verifier.code 0} true;
    out_$p350 := $add.ref($add.ref(out_$p334, $mul.ref(out_$i335, 64)), $mul.ref(36, 1));
    goto corral_source_split_5740;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    out_$i349 := $and.i32(out_$i348, 1);
    goto corral_source_split_5739;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    out_$i348 := $ashr.i32(out_$i347, 2);
    goto corral_source_split_5738;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    out_$i347 := $zext.i8.i32(out_$i346);
    goto corral_source_split_5737;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    out_$i346 := $load.i8($M.0, out_$p345);
    goto corral_source_split_5736;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    out_$p345 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7444, 1)), $mul.ref(0, 1));
    goto corral_source_split_5735;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p343, out_$i342);
    goto corral_source_split_5734;

  corral_source_split_5732:
    assume {:verifier.code 0} true;
    out_$p343 := $add.ref($add.ref(out_$p334, $mul.ref(out_$i335, 64)), $mul.ref(32, 1));
    goto corral_source_split_5733;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    out_$i342 := $and.i32(out_$i341, 1);
    goto corral_source_split_5732;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    out_$i341 := $ashr.i32(out_$i340, 3);
    goto corral_source_split_5731;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    out_$i340 := $zext.i8.i32(out_$i339);
    goto corral_source_split_5730;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    out_$i339 := $load.i8($M.0, out_$p338);
    goto corral_source_split_5729;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    out_$p338 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7444, 1)), $mul.ref(0, 1));
    goto corral_source_split_5728;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    out_$p336 := $add.ref(out_$p334, $mul.ref(out_$i335, 64));
    goto corral_source_split_5727;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    out_$i335 := $sext.i32.i64(out_$i313);
    goto corral_source_split_5726;

  corral_source_split_5724:
    assume {:verifier.code 0} true;
    out_$p334 := $bitcast.ref.ref(out_$p333);
    goto corral_source_split_5725;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    out_$p333 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(4800, 1));
    goto corral_source_split_5724;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    out_$i332 := $trunc.i32.i16(out_$i331);
    call {:si_unique_call 1032} {:cexpr "ed_length___0"} boogie_si_record_i16(out_$i332);
    goto corral_source_split_5723;

  corral_source_split_5721:
    assume {:verifier.code 0} true;
    out_$i331 := $or.i32(out_$i325, out_$i330);
    goto corral_source_split_5722;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    out_$i330 := $sext.i16.i32(out_$i329);
    goto corral_source_split_5721;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    out_$i329 := $zext.i8.i16(out_$i328);
    goto corral_source_split_5720;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    out_$i328 := $load.i8($M.0, out_$p327);
    goto corral_source_split_5719;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    out_$p327 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7444, 1)), $mul.ref(1, 1));
    goto corral_source_split_5718;

  corral_source_split_5716:
    assume {:verifier.code 0} true;
    out_$i325 := $sext.i16.i32(out_$i324);
    goto corral_source_split_5717;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    out_$i324 := $trunc.i32.i16(out_$i323);
    goto corral_source_split_5716;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    out_$i323 := $shl.i32(out_$i322, 8);
    goto corral_source_split_5715;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    out_$i322 := $zext.i8.i32(out_$i321);
    goto corral_source_split_5714;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    out_$i321 := $load.i8($M.0, out_$p320);
    goto corral_source_split_5713;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    out_$p320 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7444, 1)), $mul.ref(2, 1));
    goto corral_source_split_5712;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    out_$i318 := $and.i32(out_$i317, 3);
    call {:si_unique_call 1031} {:cexpr "ed_type"} boogie_si_record_i32(out_$i318);
    goto corral_source_split_5711;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    out_$i317 := $zext.i8.i32(out_$i316);
    goto corral_source_split_5710;

  corral_source_split_5708:
    assume {:verifier.code 0} true;
    out_$i316 := $load.i8($M.0, out_$p315);
    goto corral_source_split_5709;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    out_$p315 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7444, 1)), $mul.ref(0, 1));
    goto corral_source_split_5708;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    out_$i313 := $and.i32(out_$i312, 3);
    call {:si_unique_call 1030} {:cexpr "ed_number___0"} boogie_si_record_i32(out_$i313);
    goto corral_source_split_5707;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    out_$i312 := $ashr.i32(out_$i311, 5);
    goto corral_source_split_5706;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    out_$i311 := $zext.i8.i32(out_$i310);
    goto corral_source_split_5705;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    out_$i310 := $load.i8($M.0, out_$p309);
    goto corral_source_split_5704;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    out_$p309 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7444, 1)), $mul.ref(0, 1));
    goto corral_source_split_5703;

  $bb105:
    assume !(out_$i306 == 1);
    goto corral_source_split_5702;

  SeqInstr_702:
    goto corral_source_split_5776;

  SeqInstr_701:
    assume assertsPassed;
    goto SeqInstr_702;

  corral_source_split_5775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1034} out_$p382 := have_ed_get_response(in_$p0, out_$p336, out_$i381, out_$i313, out_$i318, out_$p164);
    goto SeqInstr_701;

  corral_source_split_5774:
    assume {:verifier.code 0} true;
    out_$i381 := $trunc.i32.i16(out_$i380);
    goto corral_source_split_5775;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    out_$i380 := $zext.i16.i32(out_$i332);
    goto corral_source_split_5774;

  $bb107:
    assume !(out_$i376 == 1);
    goto corral_source_split_5773;

  $bb71_dummy:
    call {:si_unique_call 1} out_$i136, out_$i137, out_$i138, out_$i141, out_$p142, out_$i143, out_$i144, out_$p145, out_$p146, out_$p147, out_$p148, out_$i149, out_$p150, out_$i151, out_$i152, out_$p153, out_$i154, out_$i155, out_$p156, out_$p157, out_$i158, out_$i159, out_$i162, out_$i163, out_$i160, out_$i161, out_$p164, out_$p165, out_$i166, out_$i167, out_$p168, out_$p169, out_$i170, out_$p171, out_$i172, out_$i173, out_$p174, out_$i175, out_$i176, out_$p63, out_$i64, out_$p179, out_$i180, out_$i181, out_$p183, out_$i184, out_$i185, out_$i186, out_$i187, out_$p189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$p196, out_$i197, out_$i198, out_$i199, out_$i200, out_$i201, out_$p202, out_$p203, out_$i204, out_$p205, out_$i206, out_$i207, out_$p208, out_$p209, out_$p210, out_$p211, out_$p212, out_$i213, out_$i215, out_$p216, out_$i217, out_$i218, out_$i219, out_$i220, out_$p221, out_$i224, out_$i225, out_$p226, out_$p222, out_$p223, out_$i227, out_$i228, out_$i214, out_$i229, out_$p230, out_$p231, out_$p232, out_$p233, out_$p234, out_$p235, out_$p236, out_$p238, out_$i239, out_$i240, out_$p241, out_$i242, out_$p243, out_$i244, out_$i245, out_$p246, out_$p247, out_$p248, out_$i249, out_$i250, out_$p253, out_$i254, out_$i255, out_$i256, out_$p258, out_$i259, out_$i260, out_$i261, out_$i262, out_$p264, out_$i265, out_$i266, out_$i267, out_$i268, out_$p270, out_$i271, out_$i272, out_$i273, out_$p274, out_$p275, out_$p276, out_$p277, out_$p278, out_$p279, out_$p280, out_$p281, out_$p282, out_$p285, out_$i286, out_$i287, out_$i288, out_$i289, out_$i290, out_$i291, out_$i292, out_$i293, out_$i294, out_$i295, out_$i296, out_$i297, out_$p298, out_$p299, out_$p300, out_$i301, out_$p303, out_$i304, out_$i305, out_$i306, out_$p307, out_$p309, out_$i310, out_$i311, out_$i312, out_$i313, out_$p315, out_$i316, out_$i317, out_$i318, out_$p320, out_$i321, out_$i322, out_$i323, out_$i324, out_$i325, out_$p327, out_$i328, out_$i329, out_$i330, out_$i331, out_$i332, out_$p333, out_$p334, out_$i335, out_$p336, out_$p338, out_$i339, out_$i340, out_$i341, out_$i342, out_$p343, out_$p345, out_$i346, out_$i347, out_$i348, out_$i349, out_$p350, out_$p352, out_$i353, out_$i354, out_$i355, out_$i356, out_$p357, out_$p359, out_$i360, out_$i361, out_$i362, out_$i363, out_$p364, out_$p366, out_$i367, out_$i368, out_$i369, out_$p370, out_$p372, out_$i373, out_$i374, out_$i375, out_$i376, out_$i377, out_$i378, out_$p379, out_$i380, out_$i381, out_$p382, out_$p177, out_$i178, out_$p139, out_$i140, out_$i796, out_$i797, out_$i798, out_$p799, out_$p802, out_$i803, out_$i804, out_$i805, out_$i806, out_$p807, out_$p800, out_$p801, out_$i808, out_$i809, out_$i810, out_$i811, out_$i812, out_$p813, out_$p816, out_$i817, out_$i818, out_$i819, out_$i820, out_$p821, out_$p814, out_$p815, out_$i822, out_$i823, out_$i824, out_$i825, out_$i826, out_$p827, out_$p830, out_$i831, out_$i832, out_$i833, out_$i834, out_$p835, out_$p828, out_$p829, out_$i836, out_$i837, out_$i838, out_$i839, out_$i840, out_$p841, out_$p844, out_$i845, out_$i846, out_$i847, out_$i848, out_$p849, out_$p842, out_$p843, out_$i850, out_$i851, out_$i852, out_$i853, out_$i854, out_$p855, out_$p858, out_$i859, out_$i860, out_$i861, out_$i862, out_$p863, out_$p856, out_$p857, out_$i864, out_$i865, out_$i866, out_$i867, out_$i868, out_$p869, out_$p872, out_$i873, out_$i874, out_$i875, out_$i876, out_$p877, out_$p870, out_$p871, out_$i878, out_$i879, out_$i880, out_$i881, out_$i882, out_$p883, out_$p886, out_$i887, out_$i888, out_$i889, out_$i890, out_$p891, out_$p884, out_$p885, out_$i892, out_$i893, out_$i894, out_$i895, out_$i896, out_$p897, out_$p900, out_$i901, out_$i902, out_$i903, out_$i904, out_$p905, out_$p898, out_$p899, out_$i906, out_$i907, out_$i908, out_$i909, out_$i910, out_$p911, out_$p914, out_$i915, out_$i916, out_$i917, out_$i918, out_$p919, out_$p912, out_$p913, out_$i920, out_$i921, out_$i922, out_$i923, out_$i924, out_$p925, out_$p928, out_$i929, out_$i930, out_$i931, out_$i932, out_$p933, out_$p926, out_$p927, out_$i934, out_$i935, out_$i936, out_$i937, out_$i938, out_$p939, out_$p942, out_$i943, out_$i944, out_$i945, out_$i946, out_$p947, out_$p940, out_$p941, out_$i948, out_$i949, out_$i950, out_$i951, out_$i952, out_$p953, out_$p956, out_$i957, out_$i958, out_$i959, out_$i960, out_$p961, out_$p954, out_$p955, out_$i962, out_$i963, out_$i964, out_$i965, out_$i966, out_$p967, out_$p970, out_$i971, out_$i972, out_$i973, out_$i974, out_$p975, out_$p968, out_$p969, out_$i976, out_$i977, out_$i978, out_$i979, out_$i980, out_$p981, out_$p984, out_$i985, out_$i986, out_$i987, out_$i988, out_$p989, out_$p982, out_$p983, out_$i990, out_$i991, out_$i992, out_$i993, out_$i994, out_$p995, out_$p998, out_$i999, out_$i1000, out_$i1001, out_$i1002, out_$p1003, out_$p996, out_$p997, out_$i1004, out_$i1005, out_$i1006, out_$i1007, out_$i1008, out_$p1009, out_$p1012, out_$i1013, out_$i1014, out_$i1015, out_$i1016, out_$p1017, out_$p1010, out_$p1011, out_$i1018, out_$i1019, out_$i1020, out_$i1021, out_$i1022, out_$p1023, out_$p1026, out_$i1027, out_$i1028, out_$i1029, out_$i1030, out_$p1031, out_$p1024, out_$p1025, out_$i1032, out_$i1033, out_$i1034, out_$i1035, out_$i1036, out_$p1037, out_$p1040, out_$i1041, out_$i1042, out_$i1043, out_$i1044, out_$p1045, out_$p1038, out_$p1039, out_$i1046, out_$i1047, out_$i1048, out_$i1049, out_$i1050, out_$p1051, out_$p1054, out_$i1055, out_$i1056, out_$i1057, out_$i1058, out_$p1059, out_$p1052, out_$p1053, out_$i1060, out_$i1061, out_$i1062, out_$i1063, out_$i1064, out_$p1065, out_$p1068, out_$i1069, out_$i1070, out_$i1071, out_$i1072, out_$p1073, out_$p1066, out_$p1067, out_$i1074, out_$i1075, out_$i1076, out_$i1077, out_$i1078, out_$p1079, out_$p1082, out_$i1083, out_$i1084, out_$i1085, out_$i1086, out_$p1087, out_$p1080, out_$p1081, out_$i1088, out_$i1089, out_$i1090, out_$i1091, out_$i1092, out_$p1093, out_$p1096, out_$i1097, out_$i1098, out_$i1099, out_$i1100, out_$p1101, out_$p1094, out_$p1095, out_$i1102, out_$i1103, out_$i1104, out_$i1105, out_$i1106, out_$p1107, out_$p1110, out_$i1111, out_$i1112, out_$i1113, out_$i1114, out_$p1115, out_$p1108, out_$p1109, out_$i1116, out_$i1117, out_$i1118, out_$i1119, out_$i1120, out_$p1121, out_$p1124, out_$i1125, out_$i1126, out_$i1127, out_$i1128, out_$p1129, out_$p1122, out_$p1123, out_$i1130, out_$i1131, out_$i1132, out_$i1133, out_$i1134, out_$p1135, out_$p1138, out_$i1139, out_$i1140, out_$i1141, out_$i1142, out_$p1143, out_$p1136, out_$p1137, out_$i1144, out_$i1145, out_$i1146, out_$i1147, out_$i1148, out_$p1149, out_$p1152, out_$i1153, out_$i1154, out_$i1155, out_$i1156, out_$p1157, out_$p1150, out_$p1151, out_$i1158, out_$i1159, out_$i1160, out_$i1161, out_$i1162, out_$p1163, out_$p1166, out_$i1167, out_$i1168, out_$i1169, out_$i1170, out_$p1171, out_$p1164, out_$p1165, out_$i1172, out_$i1173, out_$i1174, out_$i1175, out_$i1176, out_$p1177, out_$p1180, out_$i1181, out_$i1182, out_$i1183, out_$i1184, out_$p1185, out_$p1178, out_$p1179, out_$i1186, out_$i1187, out_$i1188, out_$i1189, out_$i1190, out_$p1191, out_$p1194, out_$i1195, out_$i1196, out_$i1197, out_$i1198, out_$p1199, out_$p1192, out_$p1193, out_$i1200, out_$i1201, out_$i1202, out_$i1204, out_$i1205, out_vslice_dummy_var_28, out_vslice_dummy_var_29 := ftdi_elan_respond_engine_loop_$bb22(in_$p0, in_$p3, in_$p58, out_$i136, out_$i137, out_$i138, out_$i141, out_$p142, out_$i143, out_$i144, out_$p145, out_$p146, out_$p147, out_$p148, out_$i149, out_$p150, out_$i151, out_$i152, out_$p153, out_$i154, out_$i155, out_$p156, out_$p157, out_$i158, out_$i159, out_$i162, out_$i163, out_$i160, out_$i161, out_$p164, out_$p165, out_$i166, out_$i167, out_$p168, out_$p169, out_$i170, out_$p171, out_$i172, out_$i173, out_$p174, out_$i175, out_$i176, out_$p63, out_$i64, out_$p179, out_$i180, out_$i181, out_$p183, out_$i184, out_$i185, out_$i186, out_$i187, out_$p189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$p196, out_$i197, out_$i198, out_$i199, out_$i200, out_$i201, out_$p202, out_$p203, out_$i204, out_$p205, out_$i206, out_$i207, out_$p208, out_$p209, out_$p210, out_$p211, out_$p212, out_$i213, out_$i215, out_$p216, out_$i217, out_$i218, out_$i219, out_$i220, out_$p221, out_$i224, out_$i225, out_$p226, out_$p222, out_$p223, out_$i227, out_$i228, out_$i214, out_$i229, out_$p230, out_$p231, out_$p232, out_$p233, out_$p234, out_$p235, out_$p236, out_$p238, out_$i239, out_$i240, out_$p241, out_$i242, out_$p243, out_$i244, out_$i245, out_$p246, out_$p247, out_$p248, out_$i249, out_$i250, out_$p253, out_$i254, out_$i255, out_$i256, out_$p258, out_$i259, out_$i260, out_$i261, out_$i262, out_$p264, out_$i265, out_$i266, out_$i267, out_$i268, out_$p270, out_$i271, out_$i272, out_$i273, out_$p274, out_$p275, out_$p276, out_$p277, out_$p278, out_$p279, out_$p280, out_$p281, out_$p282, out_$p285, out_$i286, out_$i287, out_$i288, out_$i289, out_$i290, out_$i291, out_$i292, out_$i293, out_$i294, out_$i295, out_$i296, out_$i297, out_$p298, out_$p299, out_$p300, out_$i301, out_$p303, out_$i304, out_$i305, out_$i306, out_$p307, out_$p309, out_$i310, out_$i311, out_$i312, out_$i313, out_$p315, out_$i316, out_$i317, out_$i318, out_$p320, out_$i321, out_$i322, out_$i323, out_$i324, out_$i325, out_$p327, out_$i328, out_$i329, out_$i330, out_$i331, out_$i332, out_$p333, out_$p334, out_$i335, out_$p336, out_$p338, out_$i339, out_$i340, out_$i341, out_$i342, out_$p343, out_$p345, out_$i346, out_$i347, out_$i348, out_$i349, out_$p350, out_$p352, out_$i353, out_$i354, out_$i355, out_$i356, out_$p357, out_$p359, out_$i360, out_$i361, out_$i362, out_$i363, out_$p364, out_$p366, out_$i367, out_$i368, out_$i369, out_$p370, out_$p372, out_$i373, out_$i374, out_$i375, out_$i376, out_$i377, out_$i378, out_$p379, out_$i380, out_$i381, out_$p382, out_$p177, out_$i178, out_$p139, out_$i140, out_$i796, out_$i797, out_$i798, out_$p799, out_$p802, out_$i803, out_$i804, out_$i805, out_$i806, out_$p807, out_$p800, out_$p801, out_$i808, out_$i809, out_$i810, out_$i811, out_$i812, out_$p813, out_$p816, out_$i817, out_$i818, out_$i819, out_$i820, out_$p821, out_$p814, out_$p815, out_$i822, out_$i823, out_$i824, out_$i825, out_$i826, out_$p827, out_$p830, out_$i831, out_$i832, out_$i833, out_$i834, out_$p835, out_$p828, out_$p829, out_$i836, out_$i837, out_$i838, out_$i839, out_$i840, out_$p841, out_$p844, out_$i845, out_$i846, out_$i847, out_$i848, out_$p849, out_$p842, out_$p843, out_$i850, out_$i851, out_$i852, out_$i853, out_$i854, out_$p855, out_$p858, out_$i859, out_$i860, out_$i861, out_$i862, out_$p863, out_$p856, out_$p857, out_$i864, out_$i865, out_$i866, out_$i867, out_$i868, out_$p869, out_$p872, out_$i873, out_$i874, out_$i875, out_$i876, out_$p877, out_$p870, out_$p871, out_$i878, out_$i879, out_$i880, out_$i881, out_$i882, out_$p883, out_$p886, out_$i887, out_$i888, out_$i889, out_$i890, out_$p891, out_$p884, out_$p885, out_$i892, out_$i893, out_$i894, out_$i895, out_$i896, out_$p897, out_$p900, out_$i901, out_$i902, out_$i903, out_$i904, out_$p905, out_$p898, out_$p899, out_$i906, out_$i907, out_$i908, out_$i909, out_$i910, out_$p911, out_$p914, out_$i915, out_$i916, out_$i917, out_$i918, out_$p919, out_$p912, out_$p913, out_$i920, out_$i921, out_$i922, out_$i923, out_$i924, out_$p925, out_$p928, out_$i929, out_$i930, out_$i931, out_$i932, out_$p933, out_$p926, out_$p927, out_$i934, out_$i935, out_$i936, out_$i937, out_$i938, out_$p939, out_$p942, out_$i943, out_$i944, out_$i945, out_$i946, out_$p947, out_$p940, out_$p941, out_$i948, out_$i949, out_$i950, out_$i951, out_$i952, out_$p953, out_$p956, out_$i957, out_$i958, out_$i959, out_$i960, out_$p961, out_$p954, out_$p955, out_$i962, out_$i963, out_$i964, out_$i965, out_$i966, out_$p967, out_$p970, out_$i971, out_$i972, out_$i973, out_$i974, out_$p975, out_$p968, out_$p969, out_$i976, out_$i977, out_$i978, out_$i979, out_$i980, out_$p981, out_$p984, out_$i985, out_$i986, out_$i987, out_$i988, out_$p989, out_$p982, out_$p983, out_$i990, out_$i991, out_$i992, out_$i993, out_$i994, out_$p995, out_$p998, out_$i999, out_$i1000, out_$i1001, out_$i1002, out_$p1003, out_$p996, out_$p997, out_$i1004, out_$i1005, out_$i1006, out_$i1007, out_$i1008, out_$p1009, out_$p1012, out_$i1013, out_$i1014, out_$i1015, out_$i1016, out_$p1017, out_$p1010, out_$p1011, out_$i1018, out_$i1019, out_$i1020, out_$i1021, out_$i1022, out_$p1023, out_$p1026, out_$i1027, out_$i1028, out_$i1029, out_$i1030, out_$p1031, out_$p1024, out_$p1025, out_$i1032, out_$i1033, out_$i1034, out_$i1035, out_$i1036, out_$p1037, out_$p1040, out_$i1041, out_$i1042, out_$i1043, out_$i1044, out_$p1045, out_$p1038, out_$p1039, out_$i1046, out_$i1047, out_$i1048, out_$i1049, out_$i1050, out_$p1051, out_$p1054, out_$i1055, out_$i1056, out_$i1057, out_$i1058, out_$p1059, out_$p1052, out_$p1053, out_$i1060, out_$i1061, out_$i1062, out_$i1063, out_$i1064, out_$p1065, out_$p1068, out_$i1069, out_$i1070, out_$i1071, out_$i1072, out_$p1073, out_$p1066, out_$p1067, out_$i1074, out_$i1075, out_$i1076, out_$i1077, out_$i1078, out_$p1079, out_$p1082, out_$i1083, out_$i1084, out_$i1085, out_$i1086, out_$p1087, out_$p1080, out_$p1081, out_$i1088, out_$i1089, out_$i1090, out_$i1091, out_$i1092, out_$p1093, out_$p1096, out_$i1097, out_$i1098, out_$i1099, out_$i1100, out_$p1101, out_$p1094, out_$p1095, out_$i1102, out_$i1103, out_$i1104, out_$i1105, out_$i1106, out_$p1107, out_$p1110, out_$i1111, out_$i1112, out_$i1113, out_$i1114, out_$p1115, out_$p1108, out_$p1109, out_$i1116, out_$i1117, out_$i1118, out_$i1119, out_$i1120, out_$p1121, out_$p1124, out_$i1125, out_$i1126, out_$i1127, out_$i1128, out_$p1129, out_$p1122, out_$p1123, out_$i1130, out_$i1131, out_$i1132, out_$i1133, out_$i1134, out_$p1135, out_$p1138, out_$i1139, out_$i1140, out_$i1141, out_$i1142, out_$p1143, out_$p1136, out_$p1137, out_$i1144, out_$i1145, out_$i1146, out_$i1147, out_$i1148, out_$p1149, out_$p1152, out_$i1153, out_$i1154, out_$i1155, out_$i1156, out_$p1157, out_$p1150, out_$p1151, out_$i1158, out_$i1159, out_$i1160, out_$i1161, out_$i1162, out_$p1163, out_$p1166, out_$i1167, out_$i1168, out_$i1169, out_$i1170, out_$p1171, out_$p1164, out_$p1165, out_$i1172, out_$i1173, out_$i1174, out_$i1175, out_$i1176, out_$p1177, out_$p1180, out_$i1181, out_$i1182, out_$i1183, out_$i1184, out_$p1185, out_$p1178, out_$p1179, out_$i1186, out_$i1187, out_$i1188, out_$i1189, out_$i1190, out_$p1191, out_$p1194, out_$i1195, out_$i1196, out_$i1197, out_$i1198, out_$p1199, out_$p1192, out_$p1193, out_$i1200, out_$i1201, out_$i1202, out_$i1204, out_$i1205, out_vslice_dummy_var_28, out_vslice_dummy_var_29);
    return;

  exit:
    return;
}



procedure ftdi_elan_respond_engine_loop_$bb22(in_$p0: ref, in_$p3: ref, in_$p58: ref, in_$i136: i32, in_$i137: i64, in_$i138: i1, in_$i141: i32, in_$p142: ref, in_$i143: i64, in_$i144: i64, in_$p145: ref, in_$p146: ref, in_$p147: ref, in_$p148: ref, in_$i149: i64, in_$p150: ref, in_$i151: i8, in_$i152: i32, in_$p153: ref, in_$i154: i64, in_$i155: i64, in_$p156: ref, in_$p157: ref, in_$i158: i32, in_$i159: i1, in_$i162: i32, in_$i163: i1, in_$i160: i8, in_$i161: i32, in_$p164: ref, in_$p165: ref, in_$i166: i32, in_$i167: i32, in_$p168: ref, in_$p169: ref, in_$i170: i32, in_$p171: ref, in_$i172: i32, in_$i173: i1, in_$p174: ref, in_$i175: i64, in_$i176: i1, in_$p63: ref, in_$i64: i32, in_$p179: ref, in_$i180: i32, in_$i181: i1, in_$p183: ref, in_$i184: i8, in_$i185: i32, in_$i186: i32, in_$i187: i32, in_$p189: ref, in_$i190: i8, in_$i191: i32, in_$i192: i32, in_$i193: i16, in_$i194: i32, in_$p196: ref, in_$i197: i8, in_$i198: i16, in_$i199: i32, in_$i200: i32, in_$i201: i16, in_$p202: ref, in_$p203: ref, in_$i204: i64, in_$p205: ref, in_$i206: i32, in_$i207: i32, in_$p208: ref, in_$p209: ref, in_$p210: ref, in_$p211: ref, in_$p212: ref, in_$i213: i1, in_$i215: i64, in_$p216: ref, in_$i217: i8, in_$i218: i32, in_$i219: i32, in_$i220: i64, in_$p221: ref, in_$i224: i32, in_$i225: i64, in_$p226: ref, in_$p222: ref, in_$p223: ref, in_$i227: i32, in_$i228: i1, in_$i214: i32, in_$i229: i1, in_$p230: ref, in_$p231: ref, in_$p232: ref, in_$p233: ref, in_$p234: ref, in_$p235: ref, in_$p236: ref, in_$p238: ref, in_$i239: i32, in_$i240: i1, in_$p241: ref, in_$i242: i32, in_$p243: ref, in_$i244: i32, in_$i245: i32, in_$p246: ref, in_$p247: ref, in_$p248: ref, in_$i249: i64, in_$i250: i64, in_$p253: ref, in_$i254: i8, in_$i255: i32, in_$i256: i32, in_$p258: ref, in_$i259: i8, in_$i260: i32, in_$i261: i32, in_$i262: i32, in_$p264: ref, in_$i265: i8, in_$i266: i32, in_$i267: i32, in_$i268: i32, in_$p270: ref, in_$i271: i8, in_$i272: i32, in_$i273: i32, in_$p274: ref, in_$p275: ref, in_$p276: ref, in_$p277: ref, in_$p278: ref, in_$p279: ref, in_$p280: ref, in_$p281: ref, in_$p282: ref, in_$p285: ref, in_$i286: i8, in_$i287: i32, in_$i288: i32, in_$i289: i8, in_$i290: i32, in_$i291: i1, in_$i292: i32, in_$i293: i1, in_$i294: i32, in_$i295: i1, in_$i296: i32, in_$i297: i1, in_$p298: ref, in_$p299: ref, in_$p300: ref, in_$i301: i32, in_$p303: ref, in_$i304: i8, in_$i305: i32, in_$i306: i1, in_$p307: ref, in_$p309: ref, in_$i310: i8, in_$i311: i32, in_$i312: i32, in_$i313: i32, in_$p315: ref, in_$i316: i8, in_$i317: i32, in_$i318: i32, in_$p320: ref, in_$i321: i8, in_$i322: i32, in_$i323: i32, in_$i324: i16, in_$i325: i32, in_$p327: ref, in_$i328: i8, in_$i329: i16, in_$i330: i32, in_$i331: i32, in_$i332: i16, in_$p333: ref, in_$p334: ref, in_$i335: i64, in_$p336: ref, in_$p338: ref, in_$i339: i8, in_$i340: i32, in_$i341: i32, in_$i342: i32, in_$p343: ref, in_$p345: ref, in_$i346: i8, in_$i347: i32, in_$i348: i32, in_$i349: i32, in_$p350: ref, in_$p352: ref, in_$i353: i8, in_$i354: i32, in_$i355: i32, in_$i356: i32, in_$p357: ref, in_$p359: ref, in_$i360: i8, in_$i361: i32, in_$i362: i32, in_$i363: i32, in_$p364: ref, in_$p366: ref, in_$i367: i8, in_$i368: i32, in_$i369: i32, in_$p370: ref, in_$p372: ref, in_$i373: i8, in_$i374: i32, in_$i375: i32, in_$i376: i1, in_$i377: i32, in_$i378: i16, in_$p379: ref, in_$i380: i32, in_$i381: i16, in_$p382: ref, in_$p177: ref, in_$i178: i32, in_$p139: ref, in_$i140: i32, in_$i796: i1, in_$i797: i32, in_$i798: i64, in_$p799: ref, in_$p802: ref, in_$i803: i8, in_$i804: i32, in_$i805: i32, in_$i806: i64, in_$p807: ref, in_$p800: ref, in_$p801: ref, in_$i808: i32, in_$i809: i1, in_$i810: i1, in_$i811: i32, in_$i812: i64, in_$p813: ref, in_$p816: ref, in_$i817: i8, in_$i818: i32, in_$i819: i32, in_$i820: i64, in_$p821: ref, in_$p814: ref, in_$p815: ref, in_$i822: i32, in_$i823: i1, in_$i824: i1, in_$i825: i32, in_$i826: i64, in_$p827: ref, in_$p830: ref, in_$i831: i8, in_$i832: i32, in_$i833: i32, in_$i834: i64, in_$p835: ref, in_$p828: ref, in_$p829: ref, in_$i836: i32, in_$i837: i1, in_$i838: i1, in_$i839: i32, in_$i840: i64, in_$p841: ref, in_$p844: ref, in_$i845: i8, in_$i846: i32, in_$i847: i32, in_$i848: i64, in_$p849: ref, in_$p842: ref, in_$p843: ref, in_$i850: i32, in_$i851: i1, in_$i852: i1, in_$i853: i32, in_$i854: i64, in_$p855: ref, in_$p858: ref, in_$i859: i8, in_$i860: i32, in_$i861: i32, in_$i862: i64, in_$p863: ref, in_$p856: ref, in_$p857: ref, in_$i864: i32, in_$i865: i1, in_$i866: i1, in_$i867: i32, in_$i868: i64, in_$p869: ref, in_$p872: ref, in_$i873: i8, in_$i874: i32, in_$i875: i32, in_$i876: i64, in_$p877: ref, in_$p870: ref, in_$p871: ref, in_$i878: i32, in_$i879: i1, in_$i880: i1, in_$i881: i32, in_$i882: i64, in_$p883: ref, in_$p886: ref, in_$i887: i8, in_$i888: i32, in_$i889: i32, in_$i890: i64, in_$p891: ref, in_$p884: ref, in_$p885: ref, in_$i892: i32, in_$i893: i1, in_$i894: i1, in_$i895: i32, in_$i896: i64, in_$p897: ref, in_$p900: ref, in_$i901: i8, in_$i902: i32, in_$i903: i32, in_$i904: i64, in_$p905: ref, in_$p898: ref, in_$p899: ref, in_$i906: i32, in_$i907: i1, in_$i908: i1, in_$i909: i32, in_$i910: i64, in_$p911: ref, in_$p914: ref, in_$i915: i8, in_$i916: i32, in_$i917: i32, in_$i918: i64, in_$p919: ref, in_$p912: ref, in_$p913: ref, in_$i920: i32, in_$i921: i1, in_$i922: i1, in_$i923: i32, in_$i924: i64, in_$p925: ref, in_$p928: ref, in_$i929: i8, in_$i930: i32, in_$i931: i32, in_$i932: i64, in_$p933: ref, in_$p926: ref, in_$p927: ref, in_$i934: i32, in_$i935: i1, in_$i936: i1, in_$i937: i32, in_$i938: i64, in_$p939: ref, in_$p942: ref, in_$i943: i8, in_$i944: i32, in_$i945: i32, in_$i946: i64, in_$p947: ref, in_$p940: ref, in_$p941: ref, in_$i948: i32, in_$i949: i1, in_$i950: i1, in_$i951: i32, in_$i952: i64, in_$p953: ref, in_$p956: ref, in_$i957: i8, in_$i958: i32, in_$i959: i32, in_$i960: i64, in_$p961: ref, in_$p954: ref, in_$p955: ref, in_$i962: i32, in_$i963: i1, in_$i964: i1, in_$i965: i32, in_$i966: i64, in_$p967: ref, in_$p970: ref, in_$i971: i8, in_$i972: i32, in_$i973: i32, in_$i974: i64, in_$p975: ref, in_$p968: ref, in_$p969: ref, in_$i976: i32, in_$i977: i1, in_$i978: i1, in_$i979: i32, in_$i980: i64, in_$p981: ref, in_$p984: ref, in_$i985: i8, in_$i986: i32, in_$i987: i32, in_$i988: i64, in_$p989: ref, in_$p982: ref, in_$p983: ref, in_$i990: i32, in_$i991: i1, in_$i992: i1, in_$i993: i32, in_$i994: i64, in_$p995: ref, in_$p998: ref, in_$i999: i8, in_$i1000: i32, in_$i1001: i32, in_$i1002: i64, in_$p1003: ref, in_$p996: ref, in_$p997: ref, in_$i1004: i32, in_$i1005: i1, in_$i1006: i1, in_$i1007: i32, in_$i1008: i64, in_$p1009: ref, in_$p1012: ref, in_$i1013: i8, in_$i1014: i32, in_$i1015: i32, in_$i1016: i64, in_$p1017: ref, in_$p1010: ref, in_$p1011: ref, in_$i1018: i32, in_$i1019: i1, in_$i1020: i1, in_$i1021: i32, in_$i1022: i64, in_$p1023: ref, in_$p1026: ref, in_$i1027: i8, in_$i1028: i32, in_$i1029: i32, in_$i1030: i64, in_$p1031: ref, in_$p1024: ref, in_$p1025: ref, in_$i1032: i32, in_$i1033: i1, in_$i1034: i1, in_$i1035: i32, in_$i1036: i64, in_$p1037: ref, in_$p1040: ref, in_$i1041: i8, in_$i1042: i32, in_$i1043: i32, in_$i1044: i64, in_$p1045: ref, in_$p1038: ref, in_$p1039: ref, in_$i1046: i32, in_$i1047: i1, in_$i1048: i1, in_$i1049: i32, in_$i1050: i64, in_$p1051: ref, in_$p1054: ref, in_$i1055: i8, in_$i1056: i32, in_$i1057: i32, in_$i1058: i64, in_$p1059: ref, in_$p1052: ref, in_$p1053: ref, in_$i1060: i32, in_$i1061: i1, in_$i1062: i1, in_$i1063: i32, in_$i1064: i64, in_$p1065: ref, in_$p1068: ref, in_$i1069: i8, in_$i1070: i32, in_$i1071: i32, in_$i1072: i64, in_$p1073: ref, in_$p1066: ref, in_$p1067: ref, in_$i1074: i32, in_$i1075: i1, in_$i1076: i1, in_$i1077: i32, in_$i1078: i64, in_$p1079: ref, in_$p1082: ref, in_$i1083: i8, in_$i1084: i32, in_$i1085: i32, in_$i1086: i64, in_$p1087: ref, in_$p1080: ref, in_$p1081: ref, in_$i1088: i32, in_$i1089: i1, in_$i1090: i1, in_$i1091: i32, in_$i1092: i64, in_$p1093: ref, in_$p1096: ref, in_$i1097: i8, in_$i1098: i32, in_$i1099: i32, in_$i1100: i64, in_$p1101: ref, in_$p1094: ref, in_$p1095: ref, in_$i1102: i32, in_$i1103: i1, in_$i1104: i1, in_$i1105: i32, in_$i1106: i64, in_$p1107: ref, in_$p1110: ref, in_$i1111: i8, in_$i1112: i32, in_$i1113: i32, in_$i1114: i64, in_$p1115: ref, in_$p1108: ref, in_$p1109: ref, in_$i1116: i32, in_$i1117: i1, in_$i1118: i1, in_$i1119: i32, in_$i1120: i64, in_$p1121: ref, in_$p1124: ref, in_$i1125: i8, in_$i1126: i32, in_$i1127: i32, in_$i1128: i64, in_$p1129: ref, in_$p1122: ref, in_$p1123: ref, in_$i1130: i32, in_$i1131: i1, in_$i1132: i1, in_$i1133: i32, in_$i1134: i64, in_$p1135: ref, in_$p1138: ref, in_$i1139: i8, in_$i1140: i32, in_$i1141: i32, in_$i1142: i64, in_$p1143: ref, in_$p1136: ref, in_$p1137: ref, in_$i1144: i32, in_$i1145: i1, in_$i1146: i1, in_$i1147: i32, in_$i1148: i64, in_$p1149: ref, in_$p1152: ref, in_$i1153: i8, in_$i1154: i32, in_$i1155: i32, in_$i1156: i64, in_$p1157: ref, in_$p1150: ref, in_$p1151: ref, in_$i1158: i32, in_$i1159: i1, in_$i1160: i1, in_$i1161: i32, in_$i1162: i64, in_$p1163: ref, in_$p1166: ref, in_$i1167: i8, in_$i1168: i32, in_$i1169: i32, in_$i1170: i64, in_$p1171: ref, in_$p1164: ref, in_$p1165: ref, in_$i1172: i32, in_$i1173: i1, in_$i1174: i1, in_$i1175: i32, in_$i1176: i64, in_$p1177: ref, in_$p1180: ref, in_$i1181: i8, in_$i1182: i32, in_$i1183: i32, in_$i1184: i64, in_$p1185: ref, in_$p1178: ref, in_$p1179: ref, in_$i1186: i32, in_$i1187: i1, in_$i1188: i1, in_$i1189: i32, in_$i1190: i64, in_$p1191: ref, in_$p1194: ref, in_$i1195: i8, in_$i1196: i32, in_$i1197: i32, in_$i1198: i64, in_$p1199: ref, in_$p1192: ref, in_$p1193: ref, in_$i1200: i32, in_$i1201: i1, in_$i1202: i1, in_$i1204: i8, in_$i1205: i32, in_vslice_dummy_var_28: i32, in_vslice_dummy_var_29: i32) returns (out_$i136: i32, out_$i137: i64, out_$i138: i1, out_$i141: i32, out_$p142: ref, out_$i143: i64, out_$i144: i64, out_$p145: ref, out_$p146: ref, out_$p147: ref, out_$p148: ref, out_$i149: i64, out_$p150: ref, out_$i151: i8, out_$i152: i32, out_$p153: ref, out_$i154: i64, out_$i155: i64, out_$p156: ref, out_$p157: ref, out_$i158: i32, out_$i159: i1, out_$i162: i32, out_$i163: i1, out_$i160: i8, out_$i161: i32, out_$p164: ref, out_$p165: ref, out_$i166: i32, out_$i167: i32, out_$p168: ref, out_$p169: ref, out_$i170: i32, out_$p171: ref, out_$i172: i32, out_$i173: i1, out_$p174: ref, out_$i175: i64, out_$i176: i1, out_$p63: ref, out_$i64: i32, out_$p179: ref, out_$i180: i32, out_$i181: i1, out_$p183: ref, out_$i184: i8, out_$i185: i32, out_$i186: i32, out_$i187: i32, out_$p189: ref, out_$i190: i8, out_$i191: i32, out_$i192: i32, out_$i193: i16, out_$i194: i32, out_$p196: ref, out_$i197: i8, out_$i198: i16, out_$i199: i32, out_$i200: i32, out_$i201: i16, out_$p202: ref, out_$p203: ref, out_$i204: i64, out_$p205: ref, out_$i206: i32, out_$i207: i32, out_$p208: ref, out_$p209: ref, out_$p210: ref, out_$p211: ref, out_$p212: ref, out_$i213: i1, out_$i215: i64, out_$p216: ref, out_$i217: i8, out_$i218: i32, out_$i219: i32, out_$i220: i64, out_$p221: ref, out_$i224: i32, out_$i225: i64, out_$p226: ref, out_$p222: ref, out_$p223: ref, out_$i227: i32, out_$i228: i1, out_$i214: i32, out_$i229: i1, out_$p230: ref, out_$p231: ref, out_$p232: ref, out_$p233: ref, out_$p234: ref, out_$p235: ref, out_$p236: ref, out_$p238: ref, out_$i239: i32, out_$i240: i1, out_$p241: ref, out_$i242: i32, out_$p243: ref, out_$i244: i32, out_$i245: i32, out_$p246: ref, out_$p247: ref, out_$p248: ref, out_$i249: i64, out_$i250: i64, out_$p253: ref, out_$i254: i8, out_$i255: i32, out_$i256: i32, out_$p258: ref, out_$i259: i8, out_$i260: i32, out_$i261: i32, out_$i262: i32, out_$p264: ref, out_$i265: i8, out_$i266: i32, out_$i267: i32, out_$i268: i32, out_$p270: ref, out_$i271: i8, out_$i272: i32, out_$i273: i32, out_$p274: ref, out_$p275: ref, out_$p276: ref, out_$p277: ref, out_$p278: ref, out_$p279: ref, out_$p280: ref, out_$p281: ref, out_$p282: ref, out_$p285: ref, out_$i286: i8, out_$i287: i32, out_$i288: i32, out_$i289: i8, out_$i290: i32, out_$i291: i1, out_$i292: i32, out_$i293: i1, out_$i294: i32, out_$i295: i1, out_$i296: i32, out_$i297: i1, out_$p298: ref, out_$p299: ref, out_$p300: ref, out_$i301: i32, out_$p303: ref, out_$i304: i8, out_$i305: i32, out_$i306: i1, out_$p307: ref, out_$p309: ref, out_$i310: i8, out_$i311: i32, out_$i312: i32, out_$i313: i32, out_$p315: ref, out_$i316: i8, out_$i317: i32, out_$i318: i32, out_$p320: ref, out_$i321: i8, out_$i322: i32, out_$i323: i32, out_$i324: i16, out_$i325: i32, out_$p327: ref, out_$i328: i8, out_$i329: i16, out_$i330: i32, out_$i331: i32, out_$i332: i16, out_$p333: ref, out_$p334: ref, out_$i335: i64, out_$p336: ref, out_$p338: ref, out_$i339: i8, out_$i340: i32, out_$i341: i32, out_$i342: i32, out_$p343: ref, out_$p345: ref, out_$i346: i8, out_$i347: i32, out_$i348: i32, out_$i349: i32, out_$p350: ref, out_$p352: ref, out_$i353: i8, out_$i354: i32, out_$i355: i32, out_$i356: i32, out_$p357: ref, out_$p359: ref, out_$i360: i8, out_$i361: i32, out_$i362: i32, out_$i363: i32, out_$p364: ref, out_$p366: ref, out_$i367: i8, out_$i368: i32, out_$i369: i32, out_$p370: ref, out_$p372: ref, out_$i373: i8, out_$i374: i32, out_$i375: i32, out_$i376: i1, out_$i377: i32, out_$i378: i16, out_$p379: ref, out_$i380: i32, out_$i381: i16, out_$p382: ref, out_$p177: ref, out_$i178: i32, out_$p139: ref, out_$i140: i32, out_$i796: i1, out_$i797: i32, out_$i798: i64, out_$p799: ref, out_$p802: ref, out_$i803: i8, out_$i804: i32, out_$i805: i32, out_$i806: i64, out_$p807: ref, out_$p800: ref, out_$p801: ref, out_$i808: i32, out_$i809: i1, out_$i810: i1, out_$i811: i32, out_$i812: i64, out_$p813: ref, out_$p816: ref, out_$i817: i8, out_$i818: i32, out_$i819: i32, out_$i820: i64, out_$p821: ref, out_$p814: ref, out_$p815: ref, out_$i822: i32, out_$i823: i1, out_$i824: i1, out_$i825: i32, out_$i826: i64, out_$p827: ref, out_$p830: ref, out_$i831: i8, out_$i832: i32, out_$i833: i32, out_$i834: i64, out_$p835: ref, out_$p828: ref, out_$p829: ref, out_$i836: i32, out_$i837: i1, out_$i838: i1, out_$i839: i32, out_$i840: i64, out_$p841: ref, out_$p844: ref, out_$i845: i8, out_$i846: i32, out_$i847: i32, out_$i848: i64, out_$p849: ref, out_$p842: ref, out_$p843: ref, out_$i850: i32, out_$i851: i1, out_$i852: i1, out_$i853: i32, out_$i854: i64, out_$p855: ref, out_$p858: ref, out_$i859: i8, out_$i860: i32, out_$i861: i32, out_$i862: i64, out_$p863: ref, out_$p856: ref, out_$p857: ref, out_$i864: i32, out_$i865: i1, out_$i866: i1, out_$i867: i32, out_$i868: i64, out_$p869: ref, out_$p872: ref, out_$i873: i8, out_$i874: i32, out_$i875: i32, out_$i876: i64, out_$p877: ref, out_$p870: ref, out_$p871: ref, out_$i878: i32, out_$i879: i1, out_$i880: i1, out_$i881: i32, out_$i882: i64, out_$p883: ref, out_$p886: ref, out_$i887: i8, out_$i888: i32, out_$i889: i32, out_$i890: i64, out_$p891: ref, out_$p884: ref, out_$p885: ref, out_$i892: i32, out_$i893: i1, out_$i894: i1, out_$i895: i32, out_$i896: i64, out_$p897: ref, out_$p900: ref, out_$i901: i8, out_$i902: i32, out_$i903: i32, out_$i904: i64, out_$p905: ref, out_$p898: ref, out_$p899: ref, out_$i906: i32, out_$i907: i1, out_$i908: i1, out_$i909: i32, out_$i910: i64, out_$p911: ref, out_$p914: ref, out_$i915: i8, out_$i916: i32, out_$i917: i32, out_$i918: i64, out_$p919: ref, out_$p912: ref, out_$p913: ref, out_$i920: i32, out_$i921: i1, out_$i922: i1, out_$i923: i32, out_$i924: i64, out_$p925: ref, out_$p928: ref, out_$i929: i8, out_$i930: i32, out_$i931: i32, out_$i932: i64, out_$p933: ref, out_$p926: ref, out_$p927: ref, out_$i934: i32, out_$i935: i1, out_$i936: i1, out_$i937: i32, out_$i938: i64, out_$p939: ref, out_$p942: ref, out_$i943: i8, out_$i944: i32, out_$i945: i32, out_$i946: i64, out_$p947: ref, out_$p940: ref, out_$p941: ref, out_$i948: i32, out_$i949: i1, out_$i950: i1, out_$i951: i32, out_$i952: i64, out_$p953: ref, out_$p956: ref, out_$i957: i8, out_$i958: i32, out_$i959: i32, out_$i960: i64, out_$p961: ref, out_$p954: ref, out_$p955: ref, out_$i962: i32, out_$i963: i1, out_$i964: i1, out_$i965: i32, out_$i966: i64, out_$p967: ref, out_$p970: ref, out_$i971: i8, out_$i972: i32, out_$i973: i32, out_$i974: i64, out_$p975: ref, out_$p968: ref, out_$p969: ref, out_$i976: i32, out_$i977: i1, out_$i978: i1, out_$i979: i32, out_$i980: i64, out_$p981: ref, out_$p984: ref, out_$i985: i8, out_$i986: i32, out_$i987: i32, out_$i988: i64, out_$p989: ref, out_$p982: ref, out_$p983: ref, out_$i990: i32, out_$i991: i1, out_$i992: i1, out_$i993: i32, out_$i994: i64, out_$p995: ref, out_$p998: ref, out_$i999: i8, out_$i1000: i32, out_$i1001: i32, out_$i1002: i64, out_$p1003: ref, out_$p996: ref, out_$p997: ref, out_$i1004: i32, out_$i1005: i1, out_$i1006: i1, out_$i1007: i32, out_$i1008: i64, out_$p1009: ref, out_$p1012: ref, out_$i1013: i8, out_$i1014: i32, out_$i1015: i32, out_$i1016: i64, out_$p1017: ref, out_$p1010: ref, out_$p1011: ref, out_$i1018: i32, out_$i1019: i1, out_$i1020: i1, out_$i1021: i32, out_$i1022: i64, out_$p1023: ref, out_$p1026: ref, out_$i1027: i8, out_$i1028: i32, out_$i1029: i32, out_$i1030: i64, out_$p1031: ref, out_$p1024: ref, out_$p1025: ref, out_$i1032: i32, out_$i1033: i1, out_$i1034: i1, out_$i1035: i32, out_$i1036: i64, out_$p1037: ref, out_$p1040: ref, out_$i1041: i8, out_$i1042: i32, out_$i1043: i32, out_$i1044: i64, out_$p1045: ref, out_$p1038: ref, out_$p1039: ref, out_$i1046: i32, out_$i1047: i1, out_$i1048: i1, out_$i1049: i32, out_$i1050: i64, out_$p1051: ref, out_$p1054: ref, out_$i1055: i8, out_$i1056: i32, out_$i1057: i32, out_$i1058: i64, out_$p1059: ref, out_$p1052: ref, out_$p1053: ref, out_$i1060: i32, out_$i1061: i1, out_$i1062: i1, out_$i1063: i32, out_$i1064: i64, out_$p1065: ref, out_$p1068: ref, out_$i1069: i8, out_$i1070: i32, out_$i1071: i32, out_$i1072: i64, out_$p1073: ref, out_$p1066: ref, out_$p1067: ref, out_$i1074: i32, out_$i1075: i1, out_$i1076: i1, out_$i1077: i32, out_$i1078: i64, out_$p1079: ref, out_$p1082: ref, out_$i1083: i8, out_$i1084: i32, out_$i1085: i32, out_$i1086: i64, out_$p1087: ref, out_$p1080: ref, out_$p1081: ref, out_$i1088: i32, out_$i1089: i1, out_$i1090: i1, out_$i1091: i32, out_$i1092: i64, out_$p1093: ref, out_$p1096: ref, out_$i1097: i8, out_$i1098: i32, out_$i1099: i32, out_$i1100: i64, out_$p1101: ref, out_$p1094: ref, out_$p1095: ref, out_$i1102: i32, out_$i1103: i1, out_$i1104: i1, out_$i1105: i32, out_$i1106: i64, out_$p1107: ref, out_$p1110: ref, out_$i1111: i8, out_$i1112: i32, out_$i1113: i32, out_$i1114: i64, out_$p1115: ref, out_$p1108: ref, out_$p1109: ref, out_$i1116: i32, out_$i1117: i1, out_$i1118: i1, out_$i1119: i32, out_$i1120: i64, out_$p1121: ref, out_$p1124: ref, out_$i1125: i8, out_$i1126: i32, out_$i1127: i32, out_$i1128: i64, out_$p1129: ref, out_$p1122: ref, out_$p1123: ref, out_$i1130: i32, out_$i1131: i1, out_$i1132: i1, out_$i1133: i32, out_$i1134: i64, out_$p1135: ref, out_$p1138: ref, out_$i1139: i8, out_$i1140: i32, out_$i1141: i32, out_$i1142: i64, out_$p1143: ref, out_$p1136: ref, out_$p1137: ref, out_$i1144: i32, out_$i1145: i1, out_$i1146: i1, out_$i1147: i32, out_$i1148: i64, out_$p1149: ref, out_$p1152: ref, out_$i1153: i8, out_$i1154: i32, out_$i1155: i32, out_$i1156: i64, out_$p1157: ref, out_$p1150: ref, out_$p1151: ref, out_$i1158: i32, out_$i1159: i1, out_$i1160: i1, out_$i1161: i32, out_$i1162: i64, out_$p1163: ref, out_$p1166: ref, out_$i1167: i8, out_$i1168: i32, out_$i1169: i32, out_$i1170: i64, out_$p1171: ref, out_$p1164: ref, out_$p1165: ref, out_$i1172: i32, out_$i1173: i1, out_$i1174: i1, out_$i1175: i32, out_$i1176: i64, out_$p1177: ref, out_$p1180: ref, out_$i1181: i8, out_$i1182: i32, out_$i1183: i32, out_$i1184: i64, out_$p1185: ref, out_$p1178: ref, out_$p1179: ref, out_$i1186: i32, out_$i1187: i1, out_$i1188: i1, out_$i1189: i32, out_$i1190: i64, out_$p1191: ref, out_$p1194: ref, out_$i1195: i8, out_$i1196: i32, out_$i1197: i32, out_$i1198: i64, out_$p1199: ref, out_$p1192: ref, out_$p1193: ref, out_$i1200: i32, out_$i1201: i1, out_$i1202: i1, out_$i1204: i8, out_$i1205: i32, out_vslice_dummy_var_28: i32, out_vslice_dummy_var_29: i32);
  modifies $M.0, $M.24, $M.4, assertsPassed;



implementation ftdi_elan_respond_engine_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$i10: i32, in_$i11: i32, in_$i12: i32, in_$i13: i32, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$i18: i8, in_$i19: i32, in_$i20: i32, in_$p21: ref, in_$p22: ref, in_$i23: i32, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$i28: i32, in_$i29: i32, in_$p30: ref, in_$i31: i32, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$i35: i1, in_$p37: ref, in_$i38: i8, in_$i39: i32, in_$i40: i32, in_$i41: i64, in_$p42: ref, in_$i45: i32, in_$i46: i64, in_$p47: ref, in_$p43: ref, in_$p44: ref, in_$i48: i32, in_$i49: i1, in_$i36: i32, in_$i50: i1, in_$i51: i32, in_$i52: i1, in_$i53: i32, in_$i54: i32, in_$i55: i64, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$i59: i64, in_$i60: i1, in_$i65: i1, in_$i66: i32, in_$i67: i1, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$i72: i32, in_$p73: ref, in_$i68: i32, in_$i90: i1, in_$i91: i32, in_$i92: i32, in_$i98: i1, in_$i99: i32, in_$i100: i32, in_$i106: i32, in_$i107: i1, in_$p108: ref, in_$p109: ref, in_$i110: i8, in_$p111: ref, in_$p112: ref, in_$p113: ref, in_$i114: i8, in_$i115: i32, in_$i116: i32, in_$i117: i1, in_$i118: i32, in_$i119: i1, in_$i120: i32, in_$i121: i1, in_$i122: i32, in_$i123: i1, in_$i124: i32, in_$i125: i1, in_$i126: i32, in_$i127: i1, in_$i128: i32, in_$i129: i1, in_$i130: i32, in_$i131: i1, in_$i132: i32, in_$i133: i1, in_$i134: i32, in_$i135: i1, in_$i74: i32, in_$i75: i32, in_$i76: i32, in_$i77: i32, in_$p78: ref, in_$i136: i32, in_$i137: i64, in_$i138: i1, in_$i141: i32, in_$p142: ref, in_$i143: i64, in_$i144: i64, in_$p145: ref, in_$p146: ref, in_$p147: ref, in_$p148: ref, in_$i149: i64, in_$p150: ref, in_$i151: i8, in_$i152: i32, in_$p153: ref, in_$i154: i64, in_$i155: i64, in_$p156: ref, in_$p157: ref, in_$i158: i32, in_$i159: i1, in_$i162: i32, in_$i163: i1, in_$i160: i8, in_$i161: i32, in_$p164: ref, in_$p165: ref, in_$i166: i32, in_$i167: i32, in_$p168: ref, in_$p169: ref, in_$i170: i32, in_$p171: ref, in_$i172: i32, in_$i173: i1, in_$p174: ref, in_$i175: i64, in_$i176: i1, in_$p63: ref, in_$i64: i32, in_$p179: ref, in_$i180: i32, in_$i181: i1, in_$p183: ref, in_$i184: i8, in_$i185: i32, in_$i186: i32, in_$i187: i32, in_$p189: ref, in_$i190: i8, in_$i191: i32, in_$i192: i32, in_$i193: i16, in_$i194: i32, in_$p196: ref, in_$i197: i8, in_$i198: i16, in_$i199: i32, in_$i200: i32, in_$i201: i16, in_$p202: ref, in_$p203: ref, in_$i204: i64, in_$p205: ref, in_$i206: i32, in_$i207: i32, in_$p208: ref, in_$p209: ref, in_$p210: ref, in_$p211: ref, in_$p212: ref, in_$i213: i1, in_$i215: i64, in_$p216: ref, in_$i217: i8, in_$i218: i32, in_$i219: i32, in_$i220: i64, in_$p221: ref, in_$i224: i32, in_$i225: i64, in_$p226: ref, in_$p222: ref, in_$p223: ref, in_$i227: i32, in_$i228: i1, in_$i214: i32, in_$i229: i1, in_$p230: ref, in_$p231: ref, in_$p232: ref, in_$p233: ref, in_$p234: ref, in_$p235: ref, in_$p236: ref, in_$p238: ref, in_$i239: i32, in_$i240: i1, in_$p241: ref, in_$i242: i32, in_$p243: ref, in_$i244: i32, in_$i245: i32, in_$p246: ref, in_$p247: ref, in_$p248: ref, in_$i249: i64, in_$i250: i64, in_$p253: ref, in_$i254: i8, in_$i255: i32, in_$i256: i32, in_$p258: ref, in_$i259: i8, in_$i260: i32, in_$i261: i32, in_$i262: i32, in_$p264: ref, in_$i265: i8, in_$i266: i32, in_$i267: i32, in_$i268: i32, in_$p270: ref, in_$i271: i8, in_$i272: i32, in_$i273: i32, in_$p274: ref, in_$p275: ref, in_$p276: ref, in_$p277: ref, in_$p278: ref, in_$p279: ref, in_$p280: ref, in_$p281: ref, in_$p282: ref, in_$p285: ref, in_$i286: i8, in_$i287: i32, in_$i288: i32, in_$i289: i8, in_$i290: i32, in_$i291: i1, in_$i292: i32, in_$i293: i1, in_$i294: i32, in_$i295: i1, in_$i296: i32, in_$i297: i1, in_$p298: ref, in_$p299: ref, in_$p300: ref, in_$i301: i32, in_$p303: ref, in_$i304: i8, in_$i305: i32, in_$i306: i1, in_$p307: ref, in_$p309: ref, in_$i310: i8, in_$i311: i32, in_$i312: i32, in_$i313: i32, in_$p315: ref, in_$i316: i8, in_$i317: i32, in_$i318: i32, in_$p320: ref, in_$i321: i8, in_$i322: i32, in_$i323: i32, in_$i324: i16, in_$i325: i32, in_$p327: ref, in_$i328: i8, in_$i329: i16, in_$i330: i32, in_$i331: i32, in_$i332: i16, in_$p333: ref, in_$p334: ref, in_$i335: i64, in_$p336: ref, in_$p338: ref, in_$i339: i8, in_$i340: i32, in_$i341: i32, in_$i342: i32, in_$p343: ref, in_$p345: ref, in_$i346: i8, in_$i347: i32, in_$i348: i32, in_$i349: i32, in_$p350: ref, in_$p352: ref, in_$i353: i8, in_$i354: i32, in_$i355: i32, in_$i356: i32, in_$p357: ref, in_$p359: ref, in_$i360: i8, in_$i361: i32, in_$i362: i32, in_$i363: i32, in_$p364: ref, in_$p366: ref, in_$i367: i8, in_$i368: i32, in_$i369: i32, in_$p370: ref, in_$p372: ref, in_$i373: i8, in_$i374: i32, in_$i375: i32, in_$i376: i1, in_$i377: i32, in_$i378: i16, in_$p379: ref, in_$i380: i32, in_$i381: i16, in_$p382: ref, in_$p177: ref, in_$i178: i32, in_$p61: ref, in_$i62: i32, in_$p139: ref, in_$i140: i32, in_$p383: ref, in_$i384: i32, in_$i385: i1, in_$i386: i32, in_$i387: i64, in_$p388: ref, in_$p391: ref, in_$i392: i8, in_$i393: i32, in_$i394: i32, in_$i395: i64, in_$p396: ref, in_$p389: ref, in_$p390: ref, in_$i397: i32, in_$i398: i1, in_$i399: i1, in_$i400: i32, in_$i401: i64, in_$p402: ref, in_$p405: ref, in_$i406: i8, in_$i407: i32, in_$i408: i32, in_$i409: i64, in_$p410: ref, in_$p403: ref, in_$p404: ref, in_$i411: i32, in_$i412: i1, in_$i413: i1, in_$i414: i32, in_$i415: i64, in_$p416: ref, in_$p419: ref, in_$i420: i8, in_$i421: i32, in_$i422: i32, in_$i423: i64, in_$p424: ref, in_$p417: ref, in_$p418: ref, in_$i425: i32, in_$i426: i1, in_$i427: i1, in_$i428: i32, in_$i429: i64, in_$p430: ref, in_$p433: ref, in_$i434: i8, in_$i435: i32, in_$i436: i32, in_$i437: i64, in_$p438: ref, in_$p431: ref, in_$p432: ref, in_$i439: i32, in_$i440: i1, in_$i441: i1, in_$i442: i32, in_$i443: i64, in_$p444: ref, in_$p447: ref, in_$i448: i8, in_$i449: i32, in_$i450: i32, in_$i451: i64, in_$p452: ref, in_$p445: ref, in_$p446: ref, in_$i453: i32, in_$i454: i1, in_$i455: i1, in_$i456: i32, in_$i457: i64, in_$p458: ref, in_$p461: ref, in_$i462: i8, in_$i463: i32, in_$i464: i32, in_$i465: i64, in_$p466: ref, in_$p459: ref, in_$p460: ref, in_$i467: i32, in_$i468: i1, in_$i469: i1, in_$i470: i32, in_$i471: i64, in_$p472: ref, in_$p475: ref, in_$i476: i8, in_$i477: i32, in_$i478: i32, in_$i479: i64, in_$p480: ref, in_$p473: ref, in_$p474: ref, in_$i481: i32, in_$i482: i1, in_$i483: i1, in_$i484: i32, in_$i485: i64, in_$p486: ref, in_$p489: ref, in_$i490: i8, in_$i491: i32, in_$i492: i32, in_$i493: i64, in_$p494: ref, in_$p487: ref, in_$p488: ref, in_$i495: i32, in_$i496: i1, in_$i497: i1, in_$i498: i32, in_$i499: i64, in_$p500: ref, in_$p503: ref, in_$i504: i8, in_$i505: i32, in_$i506: i32, in_$i507: i64, in_$p508: ref, in_$p501: ref, in_$p502: ref, in_$i509: i32, in_$i510: i1, in_$i511: i1, in_$i512: i32, in_$i513: i64, in_$p514: ref, in_$p517: ref, in_$i518: i8, in_$i519: i32, in_$i520: i32, in_$i521: i64, in_$p522: ref, in_$p515: ref, in_$p516: ref, in_$i523: i32, in_$i524: i1, in_$i525: i1, in_$i526: i32, in_$i527: i64, in_$p528: ref, in_$p531: ref, in_$i532: i8, in_$i533: i32, in_$i534: i32, in_$i535: i64, in_$p536: ref, in_$p529: ref, in_$p530: ref, in_$i537: i32, in_$i538: i1, in_$i539: i1, in_$i540: i32, in_$i541: i64, in_$p542: ref, in_$p545: ref, in_$i546: i8, in_$i547: i32, in_$i548: i32, in_$i549: i64, in_$p550: ref, in_$p543: ref, in_$p544: ref, in_$i551: i32, in_$i552: i1, in_$i553: i1, in_$i554: i32, in_$i555: i64, in_$p556: ref, in_$p559: ref, in_$i560: i8, in_$i561: i32, in_$i562: i32, in_$i563: i64, in_$p564: ref, in_$p557: ref, in_$p558: ref, in_$i565: i32, in_$i566: i1, in_$i567: i1, in_$i568: i32, in_$i569: i64, in_$p570: ref, in_$p573: ref, in_$i574: i8, in_$i575: i32, in_$i576: i32, in_$i577: i64, in_$p578: ref, in_$p571: ref, in_$p572: ref, in_$i579: i32, in_$i580: i1, in_$i581: i1, in_$i582: i32, in_$i583: i64, in_$p584: ref, in_$p587: ref, in_$i588: i8, in_$i589: i32, in_$i590: i32, in_$i591: i64, in_$p592: ref, in_$p585: ref, in_$p586: ref, in_$i593: i32, in_$i594: i1, in_$i595: i1, in_$i596: i32, in_$i597: i64, in_$p598: ref, in_$p601: ref, in_$i602: i8, in_$i603: i32, in_$i604: i32, in_$i605: i64, in_$p606: ref, in_$p599: ref, in_$p600: ref, in_$i607: i32, in_$i608: i1, in_$i609: i1, in_$i610: i32, in_$i611: i64, in_$p612: ref, in_$p615: ref, in_$i616: i8, in_$i617: i32, in_$i618: i32, in_$i619: i64, in_$p620: ref, in_$p613: ref, in_$p614: ref, in_$i621: i32, in_$i622: i1, in_$i623: i1, in_$i624: i32, in_$i625: i64, in_$p626: ref, in_$p629: ref, in_$i630: i8, in_$i631: i32, in_$i632: i32, in_$i633: i64, in_$p634: ref, in_$p627: ref, in_$p628: ref, in_$i635: i32, in_$i636: i1, in_$i637: i1, in_$i638: i32, in_$i639: i64, in_$p640: ref, in_$p643: ref, in_$i644: i8, in_$i645: i32, in_$i646: i32, in_$i647: i64, in_$p648: ref, in_$p641: ref, in_$p642: ref, in_$i649: i32, in_$i650: i1, in_$i651: i1, in_$i652: i32, in_$i653: i64, in_$p654: ref, in_$p657: ref, in_$i658: i8, in_$i659: i32, in_$i660: i32, in_$i661: i64, in_$p662: ref, in_$p655: ref, in_$p656: ref, in_$i663: i32, in_$i664: i1, in_$i665: i1, in_$i666: i32, in_$i667: i64, in_$p668: ref, in_$p671: ref, in_$i672: i8, in_$i673: i32, in_$i674: i32, in_$i675: i64, in_$p676: ref, in_$p669: ref, in_$p670: ref, in_$i677: i32, in_$i678: i1, in_$i679: i1, in_$i680: i32, in_$i681: i64, in_$p682: ref, in_$p685: ref, in_$i686: i8, in_$i687: i32, in_$i688: i32, in_$i689: i64, in_$p690: ref, in_$p683: ref, in_$p684: ref, in_$i691: i32, in_$i692: i1, in_$i693: i1, in_$i694: i32, in_$i695: i64, in_$p696: ref, in_$p699: ref, in_$i700: i8, in_$i701: i32, in_$i702: i32, in_$i703: i64, in_$p704: ref, in_$p697: ref, in_$p698: ref, in_$i705: i32, in_$i706: i1, in_$i707: i1, in_$i708: i32, in_$i709: i64, in_$p710: ref, in_$p713: ref, in_$i714: i8, in_$i715: i32, in_$i716: i32, in_$i717: i64, in_$p718: ref, in_$p711: ref, in_$p712: ref, in_$i719: i32, in_$i720: i1, in_$i721: i1, in_$i722: i32, in_$i723: i64, in_$p724: ref, in_$p727: ref, in_$i728: i8, in_$i729: i32, in_$i730: i32, in_$i731: i64, in_$p732: ref, in_$p725: ref, in_$p726: ref, in_$i733: i32, in_$i734: i1, in_$i735: i1, in_$i736: i32, in_$i737: i64, in_$p738: ref, in_$p741: ref, in_$i742: i8, in_$i743: i32, in_$i744: i32, in_$i745: i64, in_$p746: ref, in_$p739: ref, in_$p740: ref, in_$i747: i32, in_$i748: i1, in_$i749: i1, in_$i750: i32, in_$i751: i64, in_$p752: ref, in_$p755: ref, in_$i756: i8, in_$i757: i32, in_$i758: i32, in_$i759: i64, in_$p760: ref, in_$p753: ref, in_$p754: ref, in_$i761: i32, in_$i762: i1, in_$i763: i1, in_$i764: i32, in_$i765: i64, in_$p766: ref, in_$p769: ref, in_$i770: i8, in_$i771: i32, in_$i772: i32, in_$i773: i64, in_$p774: ref, in_$p767: ref, in_$p768: ref, in_$i775: i32, in_$i776: i1, in_$i777: i1, in_$i778: i32, in_$i779: i64, in_$p780: ref, in_$p783: ref, in_$i784: i8, in_$i785: i32, in_$i786: i32, in_$i787: i64, in_$p788: ref, in_$p781: ref, in_$p782: ref, in_$i789: i32, in_$i790: i1, in_$i791: i1, in_$i793: i8, in_$i794: i32, in_$i796: i1, in_$i797: i32, in_$i798: i64, in_$p799: ref, in_$p802: ref, in_$i803: i8, in_$i804: i32, in_$i805: i32, in_$i806: i64, in_$p807: ref, in_$p800: ref, in_$p801: ref, in_$i808: i32, in_$i809: i1, in_$i810: i1, in_$i811: i32, in_$i812: i64, in_$p813: ref, in_$p816: ref, in_$i817: i8, in_$i818: i32, in_$i819: i32, in_$i820: i64, in_$p821: ref, in_$p814: ref, in_$p815: ref, in_$i822: i32, in_$i823: i1, in_$i824: i1, in_$i825: i32, in_$i826: i64, in_$p827: ref, in_$p830: ref, in_$i831: i8, in_$i832: i32, in_$i833: i32, in_$i834: i64, in_$p835: ref, in_$p828: ref, in_$p829: ref, in_$i836: i32, in_$i837: i1, in_$i838: i1, in_$i839: i32, in_$i840: i64, in_$p841: ref, in_$p844: ref, in_$i845: i8, in_$i846: i32, in_$i847: i32, in_$i848: i64, in_$p849: ref, in_$p842: ref, in_$p843: ref, in_$i850: i32, in_$i851: i1, in_$i852: i1, in_$i853: i32, in_$i854: i64, in_$p855: ref, in_$p858: ref, in_$i859: i8, in_$i860: i32, in_$i861: i32, in_$i862: i64, in_$p863: ref, in_$p856: ref, in_$p857: ref, in_$i864: i32, in_$i865: i1, in_$i866: i1, in_$i867: i32, in_$i868: i64, in_$p869: ref, in_$p872: ref, in_$i873: i8, in_$i874: i32, in_$i875: i32, in_$i876: i64, in_$p877: ref, in_$p870: ref, in_$p871: ref, in_$i878: i32, in_$i879: i1, in_$i880: i1, in_$i881: i32, in_$i882: i64, in_$p883: ref, in_$p886: ref, in_$i887: i8, in_$i888: i32, in_$i889: i32, in_$i890: i64, in_$p891: ref, in_$p884: ref, in_$p885: ref, in_$i892: i32, in_$i893: i1, in_$i894: i1, in_$i895: i32, in_$i896: i64, in_$p897: ref, in_$p900: ref, in_$i901: i8, in_$i902: i32, in_$i903: i32, in_$i904: i64, in_$p905: ref, in_$p898: ref, in_$p899: ref, in_$i906: i32, in_$i907: i1, in_$i908: i1, in_$i909: i32, in_$i910: i64, in_$p911: ref, in_$p914: ref, in_$i915: i8, in_$i916: i32, in_$i917: i32, in_$i918: i64, in_$p919: ref, in_$p912: ref, in_$p913: ref, in_$i920: i32, in_$i921: i1, in_$i922: i1, in_$i923: i32, in_$i924: i64, in_$p925: ref, in_$p928: ref, in_$i929: i8, in_$i930: i32, in_$i931: i32, in_$i932: i64, in_$p933: ref, in_$p926: ref, in_$p927: ref, in_$i934: i32, in_$i935: i1, in_$i936: i1, in_$i937: i32, in_$i938: i64, in_$p939: ref, in_$p942: ref, in_$i943: i8, in_$i944: i32, in_$i945: i32, in_$i946: i64, in_$p947: ref, in_$p940: ref, in_$p941: ref, in_$i948: i32, in_$i949: i1, in_$i950: i1, in_$i951: i32, in_$i952: i64, in_$p953: ref, in_$p956: ref, in_$i957: i8, in_$i958: i32, in_$i959: i32, in_$i960: i64, in_$p961: ref, in_$p954: ref, in_$p955: ref, in_$i962: i32, in_$i963: i1, in_$i964: i1, in_$i965: i32, in_$i966: i64, in_$p967: ref, in_$p970: ref, in_$i971: i8, in_$i972: i32, in_$i973: i32, in_$i974: i64, in_$p975: ref, in_$p968: ref, in_$p969: ref, in_$i976: i32, in_$i977: i1, in_$i978: i1, in_$i979: i32, in_$i980: i64, in_$p981: ref, in_$p984: ref, in_$i985: i8, in_$i986: i32, in_$i987: i32, in_$i988: i64, in_$p989: ref, in_$p982: ref, in_$p983: ref, in_$i990: i32, in_$i991: i1, in_$i992: i1, in_$i993: i32, in_$i994: i64, in_$p995: ref, in_$p998: ref, in_$i999: i8, in_$i1000: i32, in_$i1001: i32, in_$i1002: i64, in_$p1003: ref, in_$p996: ref, in_$p997: ref, in_$i1004: i32, in_$i1005: i1, in_$i1006: i1, in_$i1007: i32, in_$i1008: i64, in_$p1009: ref, in_$p1012: ref, in_$i1013: i8, in_$i1014: i32, in_$i1015: i32, in_$i1016: i64, in_$p1017: ref, in_$p1010: ref, in_$p1011: ref, in_$i1018: i32, in_$i1019: i1, in_$i1020: i1, in_$i1021: i32, in_$i1022: i64, in_$p1023: ref, in_$p1026: ref, in_$i1027: i8, in_$i1028: i32, in_$i1029: i32, in_$i1030: i64, in_$p1031: ref, in_$p1024: ref, in_$p1025: ref, in_$i1032: i32, in_$i1033: i1, in_$i1034: i1, in_$i1035: i32, in_$i1036: i64, in_$p1037: ref, in_$p1040: ref, in_$i1041: i8, in_$i1042: i32, in_$i1043: i32, in_$i1044: i64, in_$p1045: ref, in_$p1038: ref, in_$p1039: ref, in_$i1046: i32, in_$i1047: i1, in_$i1048: i1, in_$i1049: i32, in_$i1050: i64, in_$p1051: ref, in_$p1054: ref, in_$i1055: i8, in_$i1056: i32, in_$i1057: i32, in_$i1058: i64, in_$p1059: ref, in_$p1052: ref, in_$p1053: ref, in_$i1060: i32, in_$i1061: i1, in_$i1062: i1, in_$i1063: i32, in_$i1064: i64, in_$p1065: ref, in_$p1068: ref, in_$i1069: i8, in_$i1070: i32, in_$i1071: i32, in_$i1072: i64, in_$p1073: ref, in_$p1066: ref, in_$p1067: ref, in_$i1074: i32, in_$i1075: i1, in_$i1076: i1, in_$i1077: i32, in_$i1078: i64, in_$p1079: ref, in_$p1082: ref, in_$i1083: i8, in_$i1084: i32, in_$i1085: i32, in_$i1086: i64, in_$p1087: ref, in_$p1080: ref, in_$p1081: ref, in_$i1088: i32, in_$i1089: i1, in_$i1090: i1, in_$i1091: i32, in_$i1092: i64, in_$p1093: ref, in_$p1096: ref, in_$i1097: i8, in_$i1098: i32, in_$i1099: i32, in_$i1100: i64, in_$p1101: ref, in_$p1094: ref, in_$p1095: ref, in_$i1102: i32, in_$i1103: i1, in_$i1104: i1, in_$i1105: i32, in_$i1106: i64, in_$p1107: ref, in_$p1110: ref, in_$i1111: i8, in_$i1112: i32, in_$i1113: i32, in_$i1114: i64, in_$p1115: ref, in_$p1108: ref, in_$p1109: ref, in_$i1116: i32, in_$i1117: i1, in_$i1118: i1, in_$i1119: i32, in_$i1120: i64, in_$p1121: ref, in_$p1124: ref, in_$i1125: i8, in_$i1126: i32, in_$i1127: i32, in_$i1128: i64, in_$p1129: ref, in_$p1122: ref, in_$p1123: ref, in_$i1130: i32, in_$i1131: i1, in_$i1132: i1, in_$i1133: i32, in_$i1134: i64, in_$p1135: ref, in_$p1138: ref, in_$i1139: i8, in_$i1140: i32, in_$i1141: i32, in_$i1142: i64, in_$p1143: ref, in_$p1136: ref, in_$p1137: ref, in_$i1144: i32, in_$i1145: i1, in_$i1146: i1, in_$i1147: i32, in_$i1148: i64, in_$p1149: ref, in_$p1152: ref, in_$i1153: i8, in_$i1154: i32, in_$i1155: i32, in_$i1156: i64, in_$p1157: ref, in_$p1150: ref, in_$p1151: ref, in_$i1158: i32, in_$i1159: i1, in_$i1160: i1, in_$i1161: i32, in_$i1162: i64, in_$p1163: ref, in_$p1166: ref, in_$i1167: i8, in_$i1168: i32, in_$i1169: i32, in_$i1170: i64, in_$p1171: ref, in_$p1164: ref, in_$p1165: ref, in_$i1172: i32, in_$i1173: i1, in_$i1174: i1, in_$i1175: i32, in_$i1176: i64, in_$p1177: ref, in_$p1180: ref, in_$i1181: i8, in_$i1182: i32, in_$i1183: i32, in_$i1184: i64, in_$p1185: ref, in_$p1178: ref, in_$p1179: ref, in_$i1186: i32, in_$i1187: i1, in_$i1188: i1, in_$i1189: i32, in_$i1190: i64, in_$p1191: ref, in_$p1194: ref, in_$i1195: i8, in_$i1196: i32, in_$i1197: i32, in_$i1198: i64, in_$p1199: ref, in_$p1192: ref, in_$p1193: ref, in_$i1200: i32, in_$i1201: i1, in_$i1202: i1, in_$i1204: i8, in_$i1205: i32, in_vslice_dummy_var_26: i32, in_vslice_dummy_var_27: i32, in_vslice_dummy_var_28: i32, in_vslice_dummy_var_29: i32) returns (out_$i10: i32, out_$i11: i32, out_$i12: i32, out_$i13: i32, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$i18: i8, out_$i19: i32, out_$i20: i32, out_$p21: ref, out_$p22: ref, out_$i23: i32, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$i28: i32, out_$i29: i32, out_$p30: ref, out_$i31: i32, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$i35: i1, out_$p37: ref, out_$i38: i8, out_$i39: i32, out_$i40: i32, out_$i41: i64, out_$p42: ref, out_$i45: i32, out_$i46: i64, out_$p47: ref, out_$p43: ref, out_$p44: ref, out_$i48: i32, out_$i49: i1, out_$i36: i32, out_$i50: i1, out_$i51: i32, out_$i52: i1, out_$i53: i32, out_$i54: i32, out_$i55: i64, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$i59: i64, out_$i60: i1, out_$i65: i1, out_$i66: i32, out_$i67: i1, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$i72: i32, out_$p73: ref, out_$i68: i32, out_$i90: i1, out_$i91: i32, out_$i92: i32, out_$i98: i1, out_$i99: i32, out_$i100: i32, out_$i106: i32, out_$i107: i1, out_$p108: ref, out_$p109: ref, out_$i110: i8, out_$p111: ref, out_$p112: ref, out_$p113: ref, out_$i114: i8, out_$i115: i32, out_$i116: i32, out_$i117: i1, out_$i118: i32, out_$i119: i1, out_$i120: i32, out_$i121: i1, out_$i122: i32, out_$i123: i1, out_$i124: i32, out_$i125: i1, out_$i126: i32, out_$i127: i1, out_$i128: i32, out_$i129: i1, out_$i130: i32, out_$i131: i1, out_$i132: i32, out_$i133: i1, out_$i134: i32, out_$i135: i1, out_$i74: i32, out_$i75: i32, out_$i76: i32, out_$i77: i32, out_$p78: ref, out_$i136: i32, out_$i137: i64, out_$i138: i1, out_$i141: i32, out_$p142: ref, out_$i143: i64, out_$i144: i64, out_$p145: ref, out_$p146: ref, out_$p147: ref, out_$p148: ref, out_$i149: i64, out_$p150: ref, out_$i151: i8, out_$i152: i32, out_$p153: ref, out_$i154: i64, out_$i155: i64, out_$p156: ref, out_$p157: ref, out_$i158: i32, out_$i159: i1, out_$i162: i32, out_$i163: i1, out_$i160: i8, out_$i161: i32, out_$p164: ref, out_$p165: ref, out_$i166: i32, out_$i167: i32, out_$p168: ref, out_$p169: ref, out_$i170: i32, out_$p171: ref, out_$i172: i32, out_$i173: i1, out_$p174: ref, out_$i175: i64, out_$i176: i1, out_$p63: ref, out_$i64: i32, out_$p179: ref, out_$i180: i32, out_$i181: i1, out_$p183: ref, out_$i184: i8, out_$i185: i32, out_$i186: i32, out_$i187: i32, out_$p189: ref, out_$i190: i8, out_$i191: i32, out_$i192: i32, out_$i193: i16, out_$i194: i32, out_$p196: ref, out_$i197: i8, out_$i198: i16, out_$i199: i32, out_$i200: i32, out_$i201: i16, out_$p202: ref, out_$p203: ref, out_$i204: i64, out_$p205: ref, out_$i206: i32, out_$i207: i32, out_$p208: ref, out_$p209: ref, out_$p210: ref, out_$p211: ref, out_$p212: ref, out_$i213: i1, out_$i215: i64, out_$p216: ref, out_$i217: i8, out_$i218: i32, out_$i219: i32, out_$i220: i64, out_$p221: ref, out_$i224: i32, out_$i225: i64, out_$p226: ref, out_$p222: ref, out_$p223: ref, out_$i227: i32, out_$i228: i1, out_$i214: i32, out_$i229: i1, out_$p230: ref, out_$p231: ref, out_$p232: ref, out_$p233: ref, out_$p234: ref, out_$p235: ref, out_$p236: ref, out_$p238: ref, out_$i239: i32, out_$i240: i1, out_$p241: ref, out_$i242: i32, out_$p243: ref, out_$i244: i32, out_$i245: i32, out_$p246: ref, out_$p247: ref, out_$p248: ref, out_$i249: i64, out_$i250: i64, out_$p253: ref, out_$i254: i8, out_$i255: i32, out_$i256: i32, out_$p258: ref, out_$i259: i8, out_$i260: i32, out_$i261: i32, out_$i262: i32, out_$p264: ref, out_$i265: i8, out_$i266: i32, out_$i267: i32, out_$i268: i32, out_$p270: ref, out_$i271: i8, out_$i272: i32, out_$i273: i32, out_$p274: ref, out_$p275: ref, out_$p276: ref, out_$p277: ref, out_$p278: ref, out_$p279: ref, out_$p280: ref, out_$p281: ref, out_$p282: ref, out_$p285: ref, out_$i286: i8, out_$i287: i32, out_$i288: i32, out_$i289: i8, out_$i290: i32, out_$i291: i1, out_$i292: i32, out_$i293: i1, out_$i294: i32, out_$i295: i1, out_$i296: i32, out_$i297: i1, out_$p298: ref, out_$p299: ref, out_$p300: ref, out_$i301: i32, out_$p303: ref, out_$i304: i8, out_$i305: i32, out_$i306: i1, out_$p307: ref, out_$p309: ref, out_$i310: i8, out_$i311: i32, out_$i312: i32, out_$i313: i32, out_$p315: ref, out_$i316: i8, out_$i317: i32, out_$i318: i32, out_$p320: ref, out_$i321: i8, out_$i322: i32, out_$i323: i32, out_$i324: i16, out_$i325: i32, out_$p327: ref, out_$i328: i8, out_$i329: i16, out_$i330: i32, out_$i331: i32, out_$i332: i16, out_$p333: ref, out_$p334: ref, out_$i335: i64, out_$p336: ref, out_$p338: ref, out_$i339: i8, out_$i340: i32, out_$i341: i32, out_$i342: i32, out_$p343: ref, out_$p345: ref, out_$i346: i8, out_$i347: i32, out_$i348: i32, out_$i349: i32, out_$p350: ref, out_$p352: ref, out_$i353: i8, out_$i354: i32, out_$i355: i32, out_$i356: i32, out_$p357: ref, out_$p359: ref, out_$i360: i8, out_$i361: i32, out_$i362: i32, out_$i363: i32, out_$p364: ref, out_$p366: ref, out_$i367: i8, out_$i368: i32, out_$i369: i32, out_$p370: ref, out_$p372: ref, out_$i373: i8, out_$i374: i32, out_$i375: i32, out_$i376: i1, out_$i377: i32, out_$i378: i16, out_$p379: ref, out_$i380: i32, out_$i381: i16, out_$p382: ref, out_$p177: ref, out_$i178: i32, out_$p61: ref, out_$i62: i32, out_$p139: ref, out_$i140: i32, out_$p383: ref, out_$i384: i32, out_$i385: i1, out_$i386: i32, out_$i387: i64, out_$p388: ref, out_$p391: ref, out_$i392: i8, out_$i393: i32, out_$i394: i32, out_$i395: i64, out_$p396: ref, out_$p389: ref, out_$p390: ref, out_$i397: i32, out_$i398: i1, out_$i399: i1, out_$i400: i32, out_$i401: i64, out_$p402: ref, out_$p405: ref, out_$i406: i8, out_$i407: i32, out_$i408: i32, out_$i409: i64, out_$p410: ref, out_$p403: ref, out_$p404: ref, out_$i411: i32, out_$i412: i1, out_$i413: i1, out_$i414: i32, out_$i415: i64, out_$p416: ref, out_$p419: ref, out_$i420: i8, out_$i421: i32, out_$i422: i32, out_$i423: i64, out_$p424: ref, out_$p417: ref, out_$p418: ref, out_$i425: i32, out_$i426: i1, out_$i427: i1, out_$i428: i32, out_$i429: i64, out_$p430: ref, out_$p433: ref, out_$i434: i8, out_$i435: i32, out_$i436: i32, out_$i437: i64, out_$p438: ref, out_$p431: ref, out_$p432: ref, out_$i439: i32, out_$i440: i1, out_$i441: i1, out_$i442: i32, out_$i443: i64, out_$p444: ref, out_$p447: ref, out_$i448: i8, out_$i449: i32, out_$i450: i32, out_$i451: i64, out_$p452: ref, out_$p445: ref, out_$p446: ref, out_$i453: i32, out_$i454: i1, out_$i455: i1, out_$i456: i32, out_$i457: i64, out_$p458: ref, out_$p461: ref, out_$i462: i8, out_$i463: i32, out_$i464: i32, out_$i465: i64, out_$p466: ref, out_$p459: ref, out_$p460: ref, out_$i467: i32, out_$i468: i1, out_$i469: i1, out_$i470: i32, out_$i471: i64, out_$p472: ref, out_$p475: ref, out_$i476: i8, out_$i477: i32, out_$i478: i32, out_$i479: i64, out_$p480: ref, out_$p473: ref, out_$p474: ref, out_$i481: i32, out_$i482: i1, out_$i483: i1, out_$i484: i32, out_$i485: i64, out_$p486: ref, out_$p489: ref, out_$i490: i8, out_$i491: i32, out_$i492: i32, out_$i493: i64, out_$p494: ref, out_$p487: ref, out_$p488: ref, out_$i495: i32, out_$i496: i1, out_$i497: i1, out_$i498: i32, out_$i499: i64, out_$p500: ref, out_$p503: ref, out_$i504: i8, out_$i505: i32, out_$i506: i32, out_$i507: i64, out_$p508: ref, out_$p501: ref, out_$p502: ref, out_$i509: i32, out_$i510: i1, out_$i511: i1, out_$i512: i32, out_$i513: i64, out_$p514: ref, out_$p517: ref, out_$i518: i8, out_$i519: i32, out_$i520: i32, out_$i521: i64, out_$p522: ref, out_$p515: ref, out_$p516: ref, out_$i523: i32, out_$i524: i1, out_$i525: i1, out_$i526: i32, out_$i527: i64, out_$p528: ref, out_$p531: ref, out_$i532: i8, out_$i533: i32, out_$i534: i32, out_$i535: i64, out_$p536: ref, out_$p529: ref, out_$p530: ref, out_$i537: i32, out_$i538: i1, out_$i539: i1, out_$i540: i32, out_$i541: i64, out_$p542: ref, out_$p545: ref, out_$i546: i8, out_$i547: i32, out_$i548: i32, out_$i549: i64, out_$p550: ref, out_$p543: ref, out_$p544: ref, out_$i551: i32, out_$i552: i1, out_$i553: i1, out_$i554: i32, out_$i555: i64, out_$p556: ref, out_$p559: ref, out_$i560: i8, out_$i561: i32, out_$i562: i32, out_$i563: i64, out_$p564: ref, out_$p557: ref, out_$p558: ref, out_$i565: i32, out_$i566: i1, out_$i567: i1, out_$i568: i32, out_$i569: i64, out_$p570: ref, out_$p573: ref, out_$i574: i8, out_$i575: i32, out_$i576: i32, out_$i577: i64, out_$p578: ref, out_$p571: ref, out_$p572: ref, out_$i579: i32, out_$i580: i1, out_$i581: i1, out_$i582: i32, out_$i583: i64, out_$p584: ref, out_$p587: ref, out_$i588: i8, out_$i589: i32, out_$i590: i32, out_$i591: i64, out_$p592: ref, out_$p585: ref, out_$p586: ref, out_$i593: i32, out_$i594: i1, out_$i595: i1, out_$i596: i32, out_$i597: i64, out_$p598: ref, out_$p601: ref, out_$i602: i8, out_$i603: i32, out_$i604: i32, out_$i605: i64, out_$p606: ref, out_$p599: ref, out_$p600: ref, out_$i607: i32, out_$i608: i1, out_$i609: i1, out_$i610: i32, out_$i611: i64, out_$p612: ref, out_$p615: ref, out_$i616: i8, out_$i617: i32, out_$i618: i32, out_$i619: i64, out_$p620: ref, out_$p613: ref, out_$p614: ref, out_$i621: i32, out_$i622: i1, out_$i623: i1, out_$i624: i32, out_$i625: i64, out_$p626: ref, out_$p629: ref, out_$i630: i8, out_$i631: i32, out_$i632: i32, out_$i633: i64, out_$p634: ref, out_$p627: ref, out_$p628: ref, out_$i635: i32, out_$i636: i1, out_$i637: i1, out_$i638: i32, out_$i639: i64, out_$p640: ref, out_$p643: ref, out_$i644: i8, out_$i645: i32, out_$i646: i32, out_$i647: i64, out_$p648: ref, out_$p641: ref, out_$p642: ref, out_$i649: i32, out_$i650: i1, out_$i651: i1, out_$i652: i32, out_$i653: i64, out_$p654: ref, out_$p657: ref, out_$i658: i8, out_$i659: i32, out_$i660: i32, out_$i661: i64, out_$p662: ref, out_$p655: ref, out_$p656: ref, out_$i663: i32, out_$i664: i1, out_$i665: i1, out_$i666: i32, out_$i667: i64, out_$p668: ref, out_$p671: ref, out_$i672: i8, out_$i673: i32, out_$i674: i32, out_$i675: i64, out_$p676: ref, out_$p669: ref, out_$p670: ref, out_$i677: i32, out_$i678: i1, out_$i679: i1, out_$i680: i32, out_$i681: i64, out_$p682: ref, out_$p685: ref, out_$i686: i8, out_$i687: i32, out_$i688: i32, out_$i689: i64, out_$p690: ref, out_$p683: ref, out_$p684: ref, out_$i691: i32, out_$i692: i1, out_$i693: i1, out_$i694: i32, out_$i695: i64, out_$p696: ref, out_$p699: ref, out_$i700: i8, out_$i701: i32, out_$i702: i32, out_$i703: i64, out_$p704: ref, out_$p697: ref, out_$p698: ref, out_$i705: i32, out_$i706: i1, out_$i707: i1, out_$i708: i32, out_$i709: i64, out_$p710: ref, out_$p713: ref, out_$i714: i8, out_$i715: i32, out_$i716: i32, out_$i717: i64, out_$p718: ref, out_$p711: ref, out_$p712: ref, out_$i719: i32, out_$i720: i1, out_$i721: i1, out_$i722: i32, out_$i723: i64, out_$p724: ref, out_$p727: ref, out_$i728: i8, out_$i729: i32, out_$i730: i32, out_$i731: i64, out_$p732: ref, out_$p725: ref, out_$p726: ref, out_$i733: i32, out_$i734: i1, out_$i735: i1, out_$i736: i32, out_$i737: i64, out_$p738: ref, out_$p741: ref, out_$i742: i8, out_$i743: i32, out_$i744: i32, out_$i745: i64, out_$p746: ref, out_$p739: ref, out_$p740: ref, out_$i747: i32, out_$i748: i1, out_$i749: i1, out_$i750: i32, out_$i751: i64, out_$p752: ref, out_$p755: ref, out_$i756: i8, out_$i757: i32, out_$i758: i32, out_$i759: i64, out_$p760: ref, out_$p753: ref, out_$p754: ref, out_$i761: i32, out_$i762: i1, out_$i763: i1, out_$i764: i32, out_$i765: i64, out_$p766: ref, out_$p769: ref, out_$i770: i8, out_$i771: i32, out_$i772: i32, out_$i773: i64, out_$p774: ref, out_$p767: ref, out_$p768: ref, out_$i775: i32, out_$i776: i1, out_$i777: i1, out_$i778: i32, out_$i779: i64, out_$p780: ref, out_$p783: ref, out_$i784: i8, out_$i785: i32, out_$i786: i32, out_$i787: i64, out_$p788: ref, out_$p781: ref, out_$p782: ref, out_$i789: i32, out_$i790: i1, out_$i791: i1, out_$i793: i8, out_$i794: i32, out_$i796: i1, out_$i797: i32, out_$i798: i64, out_$p799: ref, out_$p802: ref, out_$i803: i8, out_$i804: i32, out_$i805: i32, out_$i806: i64, out_$p807: ref, out_$p800: ref, out_$p801: ref, out_$i808: i32, out_$i809: i1, out_$i810: i1, out_$i811: i32, out_$i812: i64, out_$p813: ref, out_$p816: ref, out_$i817: i8, out_$i818: i32, out_$i819: i32, out_$i820: i64, out_$p821: ref, out_$p814: ref, out_$p815: ref, out_$i822: i32, out_$i823: i1, out_$i824: i1, out_$i825: i32, out_$i826: i64, out_$p827: ref, out_$p830: ref, out_$i831: i8, out_$i832: i32, out_$i833: i32, out_$i834: i64, out_$p835: ref, out_$p828: ref, out_$p829: ref, out_$i836: i32, out_$i837: i1, out_$i838: i1, out_$i839: i32, out_$i840: i64, out_$p841: ref, out_$p844: ref, out_$i845: i8, out_$i846: i32, out_$i847: i32, out_$i848: i64, out_$p849: ref, out_$p842: ref, out_$p843: ref, out_$i850: i32, out_$i851: i1, out_$i852: i1, out_$i853: i32, out_$i854: i64, out_$p855: ref, out_$p858: ref, out_$i859: i8, out_$i860: i32, out_$i861: i32, out_$i862: i64, out_$p863: ref, out_$p856: ref, out_$p857: ref, out_$i864: i32, out_$i865: i1, out_$i866: i1, out_$i867: i32, out_$i868: i64, out_$p869: ref, out_$p872: ref, out_$i873: i8, out_$i874: i32, out_$i875: i32, out_$i876: i64, out_$p877: ref, out_$p870: ref, out_$p871: ref, out_$i878: i32, out_$i879: i1, out_$i880: i1, out_$i881: i32, out_$i882: i64, out_$p883: ref, out_$p886: ref, out_$i887: i8, out_$i888: i32, out_$i889: i32, out_$i890: i64, out_$p891: ref, out_$p884: ref, out_$p885: ref, out_$i892: i32, out_$i893: i1, out_$i894: i1, out_$i895: i32, out_$i896: i64, out_$p897: ref, out_$p900: ref, out_$i901: i8, out_$i902: i32, out_$i903: i32, out_$i904: i64, out_$p905: ref, out_$p898: ref, out_$p899: ref, out_$i906: i32, out_$i907: i1, out_$i908: i1, out_$i909: i32, out_$i910: i64, out_$p911: ref, out_$p914: ref, out_$i915: i8, out_$i916: i32, out_$i917: i32, out_$i918: i64, out_$p919: ref, out_$p912: ref, out_$p913: ref, out_$i920: i32, out_$i921: i1, out_$i922: i1, out_$i923: i32, out_$i924: i64, out_$p925: ref, out_$p928: ref, out_$i929: i8, out_$i930: i32, out_$i931: i32, out_$i932: i64, out_$p933: ref, out_$p926: ref, out_$p927: ref, out_$i934: i32, out_$i935: i1, out_$i936: i1, out_$i937: i32, out_$i938: i64, out_$p939: ref, out_$p942: ref, out_$i943: i8, out_$i944: i32, out_$i945: i32, out_$i946: i64, out_$p947: ref, out_$p940: ref, out_$p941: ref, out_$i948: i32, out_$i949: i1, out_$i950: i1, out_$i951: i32, out_$i952: i64, out_$p953: ref, out_$p956: ref, out_$i957: i8, out_$i958: i32, out_$i959: i32, out_$i960: i64, out_$p961: ref, out_$p954: ref, out_$p955: ref, out_$i962: i32, out_$i963: i1, out_$i964: i1, out_$i965: i32, out_$i966: i64, out_$p967: ref, out_$p970: ref, out_$i971: i8, out_$i972: i32, out_$i973: i32, out_$i974: i64, out_$p975: ref, out_$p968: ref, out_$p969: ref, out_$i976: i32, out_$i977: i1, out_$i978: i1, out_$i979: i32, out_$i980: i64, out_$p981: ref, out_$p984: ref, out_$i985: i8, out_$i986: i32, out_$i987: i32, out_$i988: i64, out_$p989: ref, out_$p982: ref, out_$p983: ref, out_$i990: i32, out_$i991: i1, out_$i992: i1, out_$i993: i32, out_$i994: i64, out_$p995: ref, out_$p998: ref, out_$i999: i8, out_$i1000: i32, out_$i1001: i32, out_$i1002: i64, out_$p1003: ref, out_$p996: ref, out_$p997: ref, out_$i1004: i32, out_$i1005: i1, out_$i1006: i1, out_$i1007: i32, out_$i1008: i64, out_$p1009: ref, out_$p1012: ref, out_$i1013: i8, out_$i1014: i32, out_$i1015: i32, out_$i1016: i64, out_$p1017: ref, out_$p1010: ref, out_$p1011: ref, out_$i1018: i32, out_$i1019: i1, out_$i1020: i1, out_$i1021: i32, out_$i1022: i64, out_$p1023: ref, out_$p1026: ref, out_$i1027: i8, out_$i1028: i32, out_$i1029: i32, out_$i1030: i64, out_$p1031: ref, out_$p1024: ref, out_$p1025: ref, out_$i1032: i32, out_$i1033: i1, out_$i1034: i1, out_$i1035: i32, out_$i1036: i64, out_$p1037: ref, out_$p1040: ref, out_$i1041: i8, out_$i1042: i32, out_$i1043: i32, out_$i1044: i64, out_$p1045: ref, out_$p1038: ref, out_$p1039: ref, out_$i1046: i32, out_$i1047: i1, out_$i1048: i1, out_$i1049: i32, out_$i1050: i64, out_$p1051: ref, out_$p1054: ref, out_$i1055: i8, out_$i1056: i32, out_$i1057: i32, out_$i1058: i64, out_$p1059: ref, out_$p1052: ref, out_$p1053: ref, out_$i1060: i32, out_$i1061: i1, out_$i1062: i1, out_$i1063: i32, out_$i1064: i64, out_$p1065: ref, out_$p1068: ref, out_$i1069: i8, out_$i1070: i32, out_$i1071: i32, out_$i1072: i64, out_$p1073: ref, out_$p1066: ref, out_$p1067: ref, out_$i1074: i32, out_$i1075: i1, out_$i1076: i1, out_$i1077: i32, out_$i1078: i64, out_$p1079: ref, out_$p1082: ref, out_$i1083: i8, out_$i1084: i32, out_$i1085: i32, out_$i1086: i64, out_$p1087: ref, out_$p1080: ref, out_$p1081: ref, out_$i1088: i32, out_$i1089: i1, out_$i1090: i1, out_$i1091: i32, out_$i1092: i64, out_$p1093: ref, out_$p1096: ref, out_$i1097: i8, out_$i1098: i32, out_$i1099: i32, out_$i1100: i64, out_$p1101: ref, out_$p1094: ref, out_$p1095: ref, out_$i1102: i32, out_$i1103: i1, out_$i1104: i1, out_$i1105: i32, out_$i1106: i64, out_$p1107: ref, out_$p1110: ref, out_$i1111: i8, out_$i1112: i32, out_$i1113: i32, out_$i1114: i64, out_$p1115: ref, out_$p1108: ref, out_$p1109: ref, out_$i1116: i32, out_$i1117: i1, out_$i1118: i1, out_$i1119: i32, out_$i1120: i64, out_$p1121: ref, out_$p1124: ref, out_$i1125: i8, out_$i1126: i32, out_$i1127: i32, out_$i1128: i64, out_$p1129: ref, out_$p1122: ref, out_$p1123: ref, out_$i1130: i32, out_$i1131: i1, out_$i1132: i1, out_$i1133: i32, out_$i1134: i64, out_$p1135: ref, out_$p1138: ref, out_$i1139: i8, out_$i1140: i32, out_$i1141: i32, out_$i1142: i64, out_$p1143: ref, out_$p1136: ref, out_$p1137: ref, out_$i1144: i32, out_$i1145: i1, out_$i1146: i1, out_$i1147: i32, out_$i1148: i64, out_$p1149: ref, out_$p1152: ref, out_$i1153: i8, out_$i1154: i32, out_$i1155: i32, out_$i1156: i64, out_$p1157: ref, out_$p1150: ref, out_$p1151: ref, out_$i1158: i32, out_$i1159: i1, out_$i1160: i1, out_$i1161: i32, out_$i1162: i64, out_$p1163: ref, out_$p1166: ref, out_$i1167: i8, out_$i1168: i32, out_$i1169: i32, out_$i1170: i64, out_$p1171: ref, out_$p1164: ref, out_$p1165: ref, out_$i1172: i32, out_$i1173: i1, out_$i1174: i1, out_$i1175: i32, out_$i1176: i64, out_$p1177: ref, out_$p1180: ref, out_$i1181: i8, out_$i1182: i32, out_$i1183: i32, out_$i1184: i64, out_$p1185: ref, out_$p1178: ref, out_$p1179: ref, out_$i1186: i32, out_$i1187: i1, out_$i1188: i1, out_$i1189: i32, out_$i1190: i64, out_$p1191: ref, out_$p1194: ref, out_$i1195: i8, out_$i1196: i32, out_$i1197: i32, out_$i1198: i64, out_$p1199: ref, out_$p1192: ref, out_$p1193: ref, out_$i1200: i32, out_$i1201: i1, out_$i1202: i1, out_$i1204: i8, out_$i1205: i32, out_vslice_dummy_var_26: i32, out_vslice_dummy_var_27: i32, out_vslice_dummy_var_28: i32, out_vslice_dummy_var_29: i32)
{

  entry:
    out_$i10, out_$i11, out_$i12, out_$i13, out_$p14, out_$p15, out_$p16, out_$p17, out_$i18, out_$i19, out_$i20, out_$p21, out_$p22, out_$i23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$i29, out_$p30, out_$i31, out_$p32, out_$p33, out_$p34, out_$i35, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$p42, out_$i45, out_$i46, out_$p47, out_$p43, out_$p44, out_$i48, out_$i49, out_$i36, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p56, out_$p57, out_$p58, out_$i59, out_$i60, out_$i65, out_$i66, out_$i67, out_$p69, out_$p70, out_$p71, out_$i72, out_$p73, out_$i68, out_$i90, out_$i91, out_$i92, out_$i98, out_$i99, out_$i100, out_$i106, out_$i107, out_$p108, out_$p109, out_$i110, out_$p111, out_$p112, out_$p113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i74, out_$i75, out_$i76, out_$i77, out_$p78, out_$i136, out_$i137, out_$i138, out_$i141, out_$p142, out_$i143, out_$i144, out_$p145, out_$p146, out_$p147, out_$p148, out_$i149, out_$p150, out_$i151, out_$i152, out_$p153, out_$i154, out_$i155, out_$p156, out_$p157, out_$i158, out_$i159, out_$i162, out_$i163, out_$i160, out_$i161, out_$p164, out_$p165, out_$i166, out_$i167, out_$p168, out_$p169, out_$i170, out_$p171, out_$i172, out_$i173, out_$p174, out_$i175, out_$i176, out_$p63, out_$i64, out_$p179, out_$i180, out_$i181, out_$p183, out_$i184, out_$i185, out_$i186, out_$i187, out_$p189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$p196, out_$i197, out_$i198, out_$i199, out_$i200, out_$i201, out_$p202, out_$p203, out_$i204, out_$p205, out_$i206, out_$i207, out_$p208, out_$p209, out_$p210, out_$p211, out_$p212, out_$i213, out_$i215, out_$p216, out_$i217, out_$i218, out_$i219, out_$i220, out_$p221, out_$i224, out_$i225, out_$p226, out_$p222, out_$p223, out_$i227, out_$i228, out_$i214, out_$i229, out_$p230, out_$p231, out_$p232, out_$p233, out_$p234, out_$p235, out_$p236, out_$p238, out_$i239, out_$i240, out_$p241, out_$i242, out_$p243, out_$i244, out_$i245, out_$p246, out_$p247, out_$p248, out_$i249, out_$i250, out_$p253, out_$i254, out_$i255, out_$i256, out_$p258, out_$i259, out_$i260, out_$i261, out_$i262, out_$p264, out_$i265, out_$i266, out_$i267, out_$i268, out_$p270, out_$i271, out_$i272, out_$i273, out_$p274, out_$p275, out_$p276, out_$p277, out_$p278, out_$p279, out_$p280, out_$p281, out_$p282, out_$p285, out_$i286, out_$i287, out_$i288, out_$i289, out_$i290, out_$i291, out_$i292, out_$i293, out_$i294, out_$i295, out_$i296, out_$i297, out_$p298, out_$p299, out_$p300, out_$i301, out_$p303, out_$i304, out_$i305, out_$i306, out_$p307, out_$p309, out_$i310, out_$i311, out_$i312, out_$i313, out_$p315, out_$i316, out_$i317, out_$i318, out_$p320, out_$i321, out_$i322, out_$i323, out_$i324, out_$i325, out_$p327, out_$i328, out_$i329, out_$i330, out_$i331, out_$i332, out_$p333, out_$p334, out_$i335, out_$p336, out_$p338, out_$i339, out_$i340, out_$i341, out_$i342, out_$p343, out_$p345, out_$i346, out_$i347, out_$i348, out_$i349, out_$p350, out_$p352, out_$i353, out_$i354, out_$i355, out_$i356, out_$p357, out_$p359, out_$i360, out_$i361, out_$i362, out_$i363, out_$p364, out_$p366, out_$i367, out_$i368, out_$i369, out_$p370, out_$p372, out_$i373, out_$i374, out_$i375, out_$i376, out_$i377, out_$i378, out_$p379, out_$i380, out_$i381, out_$p382, out_$p177, out_$i178, out_$p61, out_$i62, out_$p139, out_$i140, out_$p383, out_$i384, out_$i385, out_$i386, out_$i387, out_$p388, out_$p391, out_$i392, out_$i393, out_$i394, out_$i395, out_$p396, out_$p389, out_$p390, out_$i397, out_$i398, out_$i399, out_$i400, out_$i401, out_$p402, out_$p405, out_$i406, out_$i407, out_$i408, out_$i409, out_$p410, out_$p403, out_$p404, out_$i411, out_$i412, out_$i413, out_$i414, out_$i415, out_$p416, out_$p419, out_$i420, out_$i421, out_$i422, out_$i423, out_$p424, out_$p417, out_$p418, out_$i425, out_$i426, out_$i427, out_$i428, out_$i429, out_$p430, out_$p433, out_$i434, out_$i435, out_$i436, out_$i437, out_$p438, out_$p431, out_$p432, out_$i439, out_$i440, out_$i441, out_$i442, out_$i443, out_$p444, out_$p447, out_$i448, out_$i449, out_$i450, out_$i451, out_$p452, out_$p445, out_$p446, out_$i453, out_$i454, out_$i455, out_$i456, out_$i457, out_$p458, out_$p461, out_$i462, out_$i463, out_$i464, out_$i465, out_$p466, out_$p459, out_$p460, out_$i467, out_$i468, out_$i469, out_$i470, out_$i471, out_$p472, out_$p475, out_$i476, out_$i477, out_$i478, out_$i479, out_$p480, out_$p473, out_$p474, out_$i481, out_$i482, out_$i483, out_$i484, out_$i485, out_$p486, out_$p489, out_$i490, out_$i491, out_$i492, out_$i493, out_$p494, out_$p487, out_$p488, out_$i495, out_$i496, out_$i497, out_$i498, out_$i499, out_$p500, out_$p503, out_$i504, out_$i505, out_$i506, out_$i507, out_$p508, out_$p501, out_$p502, out_$i509, out_$i510, out_$i511, out_$i512, out_$i513, out_$p514, out_$p517, out_$i518, out_$i519, out_$i520, out_$i521, out_$p522, out_$p515, out_$p516, out_$i523, out_$i524, out_$i525, out_$i526, out_$i527, out_$p528, out_$p531, out_$i532, out_$i533, out_$i534, out_$i535, out_$p536, out_$p529, out_$p530, out_$i537, out_$i538, out_$i539, out_$i540, out_$i541, out_$p542, out_$p545, out_$i546, out_$i547, out_$i548, out_$i549, out_$p550, out_$p543, out_$p544, out_$i551, out_$i552, out_$i553, out_$i554, out_$i555, out_$p556, out_$p559, out_$i560, out_$i561, out_$i562, out_$i563, out_$p564, out_$p557, out_$p558, out_$i565, out_$i566, out_$i567, out_$i568, out_$i569, out_$p570, out_$p573, out_$i574, out_$i575, out_$i576, out_$i577, out_$p578, out_$p571, out_$p572, out_$i579, out_$i580, out_$i581, out_$i582, out_$i583, out_$p584, out_$p587, out_$i588, out_$i589, out_$i590, out_$i591, out_$p592, out_$p585, out_$p586, out_$i593, out_$i594, out_$i595, out_$i596, out_$i597, out_$p598, out_$p601, out_$i602, out_$i603, out_$i604, out_$i605, out_$p606, out_$p599, out_$p600, out_$i607, out_$i608, out_$i609, out_$i610, out_$i611, out_$p612, out_$p615, out_$i616, out_$i617, out_$i618, out_$i619, out_$p620, out_$p613, out_$p614, out_$i621, out_$i622, out_$i623, out_$i624, out_$i625, out_$p626, out_$p629, out_$i630, out_$i631, out_$i632, out_$i633, out_$p634, out_$p627, out_$p628, out_$i635, out_$i636, out_$i637, out_$i638, out_$i639, out_$p640, out_$p643, out_$i644, out_$i645, out_$i646, out_$i647, out_$p648, out_$p641, out_$p642, out_$i649, out_$i650, out_$i651, out_$i652, out_$i653, out_$p654, out_$p657, out_$i658, out_$i659, out_$i660, out_$i661, out_$p662, out_$p655, out_$p656, out_$i663, out_$i664, out_$i665, out_$i666, out_$i667, out_$p668, out_$p671, out_$i672, out_$i673, out_$i674, out_$i675, out_$p676, out_$p669, out_$p670, out_$i677, out_$i678, out_$i679, out_$i680, out_$i681, out_$p682, out_$p685, out_$i686, out_$i687, out_$i688, out_$i689, out_$p690, out_$p683, out_$p684, out_$i691, out_$i692, out_$i693, out_$i694, out_$i695, out_$p696, out_$p699, out_$i700, out_$i701, out_$i702, out_$i703, out_$p704, out_$p697, out_$p698, out_$i705, out_$i706, out_$i707, out_$i708, out_$i709, out_$p710, out_$p713, out_$i714, out_$i715, out_$i716, out_$i717, out_$p718, out_$p711, out_$p712, out_$i719, out_$i720, out_$i721, out_$i722, out_$i723, out_$p724, out_$p727, out_$i728, out_$i729, out_$i730, out_$i731, out_$p732, out_$p725, out_$p726, out_$i733, out_$i734, out_$i735, out_$i736, out_$i737, out_$p738, out_$p741, out_$i742, out_$i743, out_$i744, out_$i745, out_$p746, out_$p739, out_$p740, out_$i747, out_$i748, out_$i749, out_$i750, out_$i751, out_$p752, out_$p755, out_$i756, out_$i757, out_$i758, out_$i759, out_$p760, out_$p753, out_$p754, out_$i761, out_$i762, out_$i763, out_$i764, out_$i765, out_$p766, out_$p769, out_$i770, out_$i771, out_$i772, out_$i773, out_$p774, out_$p767, out_$p768, out_$i775, out_$i776, out_$i777, out_$i778, out_$i779, out_$p780, out_$p783, out_$i784, out_$i785, out_$i786, out_$i787, out_$p788, out_$p781, out_$p782, out_$i789, out_$i790, out_$i791, out_$i793, out_$i794, out_$i796, out_$i797, out_$i798, out_$p799, out_$p802, out_$i803, out_$i804, out_$i805, out_$i806, out_$p807, out_$p800, out_$p801, out_$i808, out_$i809, out_$i810, out_$i811, out_$i812, out_$p813, out_$p816, out_$i817, out_$i818, out_$i819, out_$i820, out_$p821, out_$p814, out_$p815, out_$i822, out_$i823, out_$i824, out_$i825, out_$i826, out_$p827, out_$p830, out_$i831, out_$i832, out_$i833, out_$i834, out_$p835, out_$p828, out_$p829, out_$i836, out_$i837, out_$i838, out_$i839, out_$i840, out_$p841, out_$p844, out_$i845, out_$i846, out_$i847, out_$i848, out_$p849, out_$p842, out_$p843, out_$i850, out_$i851, out_$i852, out_$i853, out_$i854, out_$p855, out_$p858, out_$i859, out_$i860, out_$i861, out_$i862, out_$p863, out_$p856, out_$p857, out_$i864, out_$i865, out_$i866, out_$i867, out_$i868, out_$p869, out_$p872, out_$i873, out_$i874, out_$i875, out_$i876, out_$p877, out_$p870, out_$p871, out_$i878, out_$i879, out_$i880, out_$i881, out_$i882, out_$p883, out_$p886, out_$i887, out_$i888, out_$i889, out_$i890, out_$p891, out_$p884, out_$p885, out_$i892, out_$i893, out_$i894, out_$i895, out_$i896, out_$p897, out_$p900, out_$i901, out_$i902, out_$i903, out_$i904, out_$p905, out_$p898, out_$p899, out_$i906, out_$i907, out_$i908, out_$i909, out_$i910, out_$p911, out_$p914, out_$i915, out_$i916, out_$i917, out_$i918, out_$p919, out_$p912, out_$p913, out_$i920, out_$i921, out_$i922, out_$i923, out_$i924, out_$p925, out_$p928, out_$i929, out_$i930, out_$i931, out_$i932, out_$p933, out_$p926, out_$p927, out_$i934, out_$i935, out_$i936, out_$i937, out_$i938, out_$p939, out_$p942, out_$i943, out_$i944, out_$i945, out_$i946, out_$p947, out_$p940, out_$p941, out_$i948, out_$i949, out_$i950, out_$i951, out_$i952, out_$p953, out_$p956, out_$i957, out_$i958, out_$i959, out_$i960, out_$p961, out_$p954, out_$p955, out_$i962, out_$i963, out_$i964, out_$i965, out_$i966, out_$p967, out_$p970, out_$i971, out_$i972, out_$i973, out_$i974, out_$p975, out_$p968, out_$p969, out_$i976, out_$i977, out_$i978, out_$i979, out_$i980, out_$p981, out_$p984, out_$i985, out_$i986, out_$i987, out_$i988, out_$p989, out_$p982, out_$p983, out_$i990, out_$i991, out_$i992, out_$i993, out_$i994, out_$p995, out_$p998, out_$i999, out_$i1000, out_$i1001, out_$i1002, out_$p1003, out_$p996, out_$p997, out_$i1004, out_$i1005, out_$i1006, out_$i1007, out_$i1008, out_$p1009, out_$p1012, out_$i1013, out_$i1014, out_$i1015, out_$i1016, out_$p1017, out_$p1010, out_$p1011, out_$i1018, out_$i1019, out_$i1020, out_$i1021, out_$i1022, out_$p1023, out_$p1026, out_$i1027, out_$i1028, out_$i1029, out_$i1030, out_$p1031, out_$p1024, out_$p1025, out_$i1032, out_$i1033, out_$i1034, out_$i1035, out_$i1036, out_$p1037, out_$p1040, out_$i1041, out_$i1042, out_$i1043, out_$i1044, out_$p1045, out_$p1038, out_$p1039, out_$i1046, out_$i1047, out_$i1048, out_$i1049, out_$i1050, out_$p1051, out_$p1054, out_$i1055, out_$i1056, out_$i1057, out_$i1058, out_$p1059, out_$p1052, out_$p1053, out_$i1060, out_$i1061, out_$i1062, out_$i1063, out_$i1064, out_$p1065, out_$p1068, out_$i1069, out_$i1070, out_$i1071, out_$i1072, out_$p1073, out_$p1066, out_$p1067, out_$i1074, out_$i1075, out_$i1076, out_$i1077, out_$i1078, out_$p1079, out_$p1082, out_$i1083, out_$i1084, out_$i1085, out_$i1086, out_$p1087, out_$p1080, out_$p1081, out_$i1088, out_$i1089, out_$i1090, out_$i1091, out_$i1092, out_$p1093, out_$p1096, out_$i1097, out_$i1098, out_$i1099, out_$i1100, out_$p1101, out_$p1094, out_$p1095, out_$i1102, out_$i1103, out_$i1104, out_$i1105, out_$i1106, out_$p1107, out_$p1110, out_$i1111, out_$i1112, out_$i1113, out_$i1114, out_$p1115, out_$p1108, out_$p1109, out_$i1116, out_$i1117, out_$i1118, out_$i1119, out_$i1120, out_$p1121, out_$p1124, out_$i1125, out_$i1126, out_$i1127, out_$i1128, out_$p1129, out_$p1122, out_$p1123, out_$i1130, out_$i1131, out_$i1132, out_$i1133, out_$i1134, out_$p1135, out_$p1138, out_$i1139, out_$i1140, out_$i1141, out_$i1142, out_$p1143, out_$p1136, out_$p1137, out_$i1144, out_$i1145, out_$i1146, out_$i1147, out_$i1148, out_$p1149, out_$p1152, out_$i1153, out_$i1154, out_$i1155, out_$i1156, out_$p1157, out_$p1150, out_$p1151, out_$i1158, out_$i1159, out_$i1160, out_$i1161, out_$i1162, out_$p1163, out_$p1166, out_$i1167, out_$i1168, out_$i1169, out_$i1170, out_$p1171, out_$p1164, out_$p1165, out_$i1172, out_$i1173, out_$i1174, out_$i1175, out_$i1176, out_$p1177, out_$p1180, out_$i1181, out_$i1182, out_$i1183, out_$i1184, out_$p1185, out_$p1178, out_$p1179, out_$i1186, out_$i1187, out_$i1188, out_$i1189, out_$i1190, out_$p1191, out_$p1194, out_$i1195, out_$i1196, out_$i1197, out_$i1198, out_$p1199, out_$p1192, out_$p1193, out_$i1200, out_$i1201, out_$i1202, out_$i1204, out_$i1205, out_vslice_dummy_var_26, out_vslice_dummy_var_27, out_vslice_dummy_var_28, out_vslice_dummy_var_29 := in_$i10, in_$i11, in_$i12, in_$i13, in_$p14, in_$p15, in_$p16, in_$p17, in_$i18, in_$i19, in_$i20, in_$p21, in_$p22, in_$i23, in_$p24, in_$p25, in_$p26, in_$i27, in_$i28, in_$i29, in_$p30, in_$i31, in_$p32, in_$p33, in_$p34, in_$i35, in_$p37, in_$i38, in_$i39, in_$i40, in_$i41, in_$p42, in_$i45, in_$i46, in_$p47, in_$p43, in_$p44, in_$i48, in_$i49, in_$i36, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$p56, in_$p57, in_$p58, in_$i59, in_$i60, in_$i65, in_$i66, in_$i67, in_$p69, in_$p70, in_$p71, in_$i72, in_$p73, in_$i68, in_$i90, in_$i91, in_$i92, in_$i98, in_$i99, in_$i100, in_$i106, in_$i107, in_$p108, in_$p109, in_$i110, in_$p111, in_$p112, in_$p113, in_$i114, in_$i115, in_$i116, in_$i117, in_$i118, in_$i119, in_$i120, in_$i121, in_$i122, in_$i123, in_$i124, in_$i125, in_$i126, in_$i127, in_$i128, in_$i129, in_$i130, in_$i131, in_$i132, in_$i133, in_$i134, in_$i135, in_$i74, in_$i75, in_$i76, in_$i77, in_$p78, in_$i136, in_$i137, in_$i138, in_$i141, in_$p142, in_$i143, in_$i144, in_$p145, in_$p146, in_$p147, in_$p148, in_$i149, in_$p150, in_$i151, in_$i152, in_$p153, in_$i154, in_$i155, in_$p156, in_$p157, in_$i158, in_$i159, in_$i162, in_$i163, in_$i160, in_$i161, in_$p164, in_$p165, in_$i166, in_$i167, in_$p168, in_$p169, in_$i170, in_$p171, in_$i172, in_$i173, in_$p174, in_$i175, in_$i176, in_$p63, in_$i64, in_$p179, in_$i180, in_$i181, in_$p183, in_$i184, in_$i185, in_$i186, in_$i187, in_$p189, in_$i190, in_$i191, in_$i192, in_$i193, in_$i194, in_$p196, in_$i197, in_$i198, in_$i199, in_$i200, in_$i201, in_$p202, in_$p203, in_$i204, in_$p205, in_$i206, in_$i207, in_$p208, in_$p209, in_$p210, in_$p211, in_$p212, in_$i213, in_$i215, in_$p216, in_$i217, in_$i218, in_$i219, in_$i220, in_$p221, in_$i224, in_$i225, in_$p226, in_$p222, in_$p223, in_$i227, in_$i228, in_$i214, in_$i229, in_$p230, in_$p231, in_$p232, in_$p233, in_$p234, in_$p235, in_$p236, in_$p238, in_$i239, in_$i240, in_$p241, in_$i242, in_$p243, in_$i244, in_$i245, in_$p246, in_$p247, in_$p248, in_$i249, in_$i250, in_$p253, in_$i254, in_$i255, in_$i256, in_$p258, in_$i259, in_$i260, in_$i261, in_$i262, in_$p264, in_$i265, in_$i266, in_$i267, in_$i268, in_$p270, in_$i271, in_$i272, in_$i273, in_$p274, in_$p275, in_$p276, in_$p277, in_$p278, in_$p279, in_$p280, in_$p281, in_$p282, in_$p285, in_$i286, in_$i287, in_$i288, in_$i289, in_$i290, in_$i291, in_$i292, in_$i293, in_$i294, in_$i295, in_$i296, in_$i297, in_$p298, in_$p299, in_$p300, in_$i301, in_$p303, in_$i304, in_$i305, in_$i306, in_$p307, in_$p309, in_$i310, in_$i311, in_$i312, in_$i313, in_$p315, in_$i316, in_$i317, in_$i318, in_$p320, in_$i321, in_$i322, in_$i323, in_$i324, in_$i325, in_$p327, in_$i328, in_$i329, in_$i330, in_$i331, in_$i332, in_$p333, in_$p334, in_$i335, in_$p336, in_$p338, in_$i339, in_$i340, in_$i341, in_$i342, in_$p343, in_$p345, in_$i346, in_$i347, in_$i348, in_$i349, in_$p350, in_$p352, in_$i353, in_$i354, in_$i355, in_$i356, in_$p357, in_$p359, in_$i360, in_$i361, in_$i362, in_$i363, in_$p364, in_$p366, in_$i367, in_$i368, in_$i369, in_$p370, in_$p372, in_$i373, in_$i374, in_$i375, in_$i376, in_$i377, in_$i378, in_$p379, in_$i380, in_$i381, in_$p382, in_$p177, in_$i178, in_$p61, in_$i62, in_$p139, in_$i140, in_$p383, in_$i384, in_$i385, in_$i386, in_$i387, in_$p388, in_$p391, in_$i392, in_$i393, in_$i394, in_$i395, in_$p396, in_$p389, in_$p390, in_$i397, in_$i398, in_$i399, in_$i400, in_$i401, in_$p402, in_$p405, in_$i406, in_$i407, in_$i408, in_$i409, in_$p410, in_$p403, in_$p404, in_$i411, in_$i412, in_$i413, in_$i414, in_$i415, in_$p416, in_$p419, in_$i420, in_$i421, in_$i422, in_$i423, in_$p424, in_$p417, in_$p418, in_$i425, in_$i426, in_$i427, in_$i428, in_$i429, in_$p430, in_$p433, in_$i434, in_$i435, in_$i436, in_$i437, in_$p438, in_$p431, in_$p432, in_$i439, in_$i440, in_$i441, in_$i442, in_$i443, in_$p444, in_$p447, in_$i448, in_$i449, in_$i450, in_$i451, in_$p452, in_$p445, in_$p446, in_$i453, in_$i454, in_$i455, in_$i456, in_$i457, in_$p458, in_$p461, in_$i462, in_$i463, in_$i464, in_$i465, in_$p466, in_$p459, in_$p460, in_$i467, in_$i468, in_$i469, in_$i470, in_$i471, in_$p472, in_$p475, in_$i476, in_$i477, in_$i478, in_$i479, in_$p480, in_$p473, in_$p474, in_$i481, in_$i482, in_$i483, in_$i484, in_$i485, in_$p486, in_$p489, in_$i490, in_$i491, in_$i492, in_$i493, in_$p494, in_$p487, in_$p488, in_$i495, in_$i496, in_$i497, in_$i498, in_$i499, in_$p500, in_$p503, in_$i504, in_$i505, in_$i506, in_$i507, in_$p508, in_$p501, in_$p502, in_$i509, in_$i510, in_$i511, in_$i512, in_$i513, in_$p514, in_$p517, in_$i518, in_$i519, in_$i520, in_$i521, in_$p522, in_$p515, in_$p516, in_$i523, in_$i524, in_$i525, in_$i526, in_$i527, in_$p528, in_$p531, in_$i532, in_$i533, in_$i534, in_$i535, in_$p536, in_$p529, in_$p530, in_$i537, in_$i538, in_$i539, in_$i540, in_$i541, in_$p542, in_$p545, in_$i546, in_$i547, in_$i548, in_$i549, in_$p550, in_$p543, in_$p544, in_$i551, in_$i552, in_$i553, in_$i554, in_$i555, in_$p556, in_$p559, in_$i560, in_$i561, in_$i562, in_$i563, in_$p564, in_$p557, in_$p558, in_$i565, in_$i566, in_$i567, in_$i568, in_$i569, in_$p570, in_$p573, in_$i574, in_$i575, in_$i576, in_$i577, in_$p578, in_$p571, in_$p572, in_$i579, in_$i580, in_$i581, in_$i582, in_$i583, in_$p584, in_$p587, in_$i588, in_$i589, in_$i590, in_$i591, in_$p592, in_$p585, in_$p586, in_$i593, in_$i594, in_$i595, in_$i596, in_$i597, in_$p598, in_$p601, in_$i602, in_$i603, in_$i604, in_$i605, in_$p606, in_$p599, in_$p600, in_$i607, in_$i608, in_$i609, in_$i610, in_$i611, in_$p612, in_$p615, in_$i616, in_$i617, in_$i618, in_$i619, in_$p620, in_$p613, in_$p614, in_$i621, in_$i622, in_$i623, in_$i624, in_$i625, in_$p626, in_$p629, in_$i630, in_$i631, in_$i632, in_$i633, in_$p634, in_$p627, in_$p628, in_$i635, in_$i636, in_$i637, in_$i638, in_$i639, in_$p640, in_$p643, in_$i644, in_$i645, in_$i646, in_$i647, in_$p648, in_$p641, in_$p642, in_$i649, in_$i650, in_$i651, in_$i652, in_$i653, in_$p654, in_$p657, in_$i658, in_$i659, in_$i660, in_$i661, in_$p662, in_$p655, in_$p656, in_$i663, in_$i664, in_$i665, in_$i666, in_$i667, in_$p668, in_$p671, in_$i672, in_$i673, in_$i674, in_$i675, in_$p676, in_$p669, in_$p670, in_$i677, in_$i678, in_$i679, in_$i680, in_$i681, in_$p682, in_$p685, in_$i686, in_$i687, in_$i688, in_$i689, in_$p690, in_$p683, in_$p684, in_$i691, in_$i692, in_$i693, in_$i694, in_$i695, in_$p696, in_$p699, in_$i700, in_$i701, in_$i702, in_$i703, in_$p704, in_$p697, in_$p698, in_$i705, in_$i706, in_$i707, in_$i708, in_$i709, in_$p710, in_$p713, in_$i714, in_$i715, in_$i716, in_$i717, in_$p718, in_$p711, in_$p712, in_$i719, in_$i720, in_$i721, in_$i722, in_$i723, in_$p724, in_$p727, in_$i728, in_$i729, in_$i730, in_$i731, in_$p732, in_$p725, in_$p726, in_$i733, in_$i734, in_$i735, in_$i736, in_$i737, in_$p738, in_$p741, in_$i742, in_$i743, in_$i744, in_$i745, in_$p746, in_$p739, in_$p740, in_$i747, in_$i748, in_$i749, in_$i750, in_$i751, in_$p752, in_$p755, in_$i756, in_$i757, in_$i758, in_$i759, in_$p760, in_$p753, in_$p754, in_$i761, in_$i762, in_$i763, in_$i764, in_$i765, in_$p766, in_$p769, in_$i770, in_$i771, in_$i772, in_$i773, in_$p774, in_$p767, in_$p768, in_$i775, in_$i776, in_$i777, in_$i778, in_$i779, in_$p780, in_$p783, in_$i784, in_$i785, in_$i786, in_$i787, in_$p788, in_$p781, in_$p782, in_$i789, in_$i790, in_$i791, in_$i793, in_$i794, in_$i796, in_$i797, in_$i798, in_$p799, in_$p802, in_$i803, in_$i804, in_$i805, in_$i806, in_$p807, in_$p800, in_$p801, in_$i808, in_$i809, in_$i810, in_$i811, in_$i812, in_$p813, in_$p816, in_$i817, in_$i818, in_$i819, in_$i820, in_$p821, in_$p814, in_$p815, in_$i822, in_$i823, in_$i824, in_$i825, in_$i826, in_$p827, in_$p830, in_$i831, in_$i832, in_$i833, in_$i834, in_$p835, in_$p828, in_$p829, in_$i836, in_$i837, in_$i838, in_$i839, in_$i840, in_$p841, in_$p844, in_$i845, in_$i846, in_$i847, in_$i848, in_$p849, in_$p842, in_$p843, in_$i850, in_$i851, in_$i852, in_$i853, in_$i854, in_$p855, in_$p858, in_$i859, in_$i860, in_$i861, in_$i862, in_$p863, in_$p856, in_$p857, in_$i864, in_$i865, in_$i866, in_$i867, in_$i868, in_$p869, in_$p872, in_$i873, in_$i874, in_$i875, in_$i876, in_$p877, in_$p870, in_$p871, in_$i878, in_$i879, in_$i880, in_$i881, in_$i882, in_$p883, in_$p886, in_$i887, in_$i888, in_$i889, in_$i890, in_$p891, in_$p884, in_$p885, in_$i892, in_$i893, in_$i894, in_$i895, in_$i896, in_$p897, in_$p900, in_$i901, in_$i902, in_$i903, in_$i904, in_$p905, in_$p898, in_$p899, in_$i906, in_$i907, in_$i908, in_$i909, in_$i910, in_$p911, in_$p914, in_$i915, in_$i916, in_$i917, in_$i918, in_$p919, in_$p912, in_$p913, in_$i920, in_$i921, in_$i922, in_$i923, in_$i924, in_$p925, in_$p928, in_$i929, in_$i930, in_$i931, in_$i932, in_$p933, in_$p926, in_$p927, in_$i934, in_$i935, in_$i936, in_$i937, in_$i938, in_$p939, in_$p942, in_$i943, in_$i944, in_$i945, in_$i946, in_$p947, in_$p940, in_$p941, in_$i948, in_$i949, in_$i950, in_$i951, in_$i952, in_$p953, in_$p956, in_$i957, in_$i958, in_$i959, in_$i960, in_$p961, in_$p954, in_$p955, in_$i962, in_$i963, in_$i964, in_$i965, in_$i966, in_$p967, in_$p970, in_$i971, in_$i972, in_$i973, in_$i974, in_$p975, in_$p968, in_$p969, in_$i976, in_$i977, in_$i978, in_$i979, in_$i980, in_$p981, in_$p984, in_$i985, in_$i986, in_$i987, in_$i988, in_$p989, in_$p982, in_$p983, in_$i990, in_$i991, in_$i992, in_$i993, in_$i994, in_$p995, in_$p998, in_$i999, in_$i1000, in_$i1001, in_$i1002, in_$p1003, in_$p996, in_$p997, in_$i1004, in_$i1005, in_$i1006, in_$i1007, in_$i1008, in_$p1009, in_$p1012, in_$i1013, in_$i1014, in_$i1015, in_$i1016, in_$p1017, in_$p1010, in_$p1011, in_$i1018, in_$i1019, in_$i1020, in_$i1021, in_$i1022, in_$p1023, in_$p1026, in_$i1027, in_$i1028, in_$i1029, in_$i1030, in_$p1031, in_$p1024, in_$p1025, in_$i1032, in_$i1033, in_$i1034, in_$i1035, in_$i1036, in_$p1037, in_$p1040, in_$i1041, in_$i1042, in_$i1043, in_$i1044, in_$p1045, in_$p1038, in_$p1039, in_$i1046, in_$i1047, in_$i1048, in_$i1049, in_$i1050, in_$p1051, in_$p1054, in_$i1055, in_$i1056, in_$i1057, in_$i1058, in_$p1059, in_$p1052, in_$p1053, in_$i1060, in_$i1061, in_$i1062, in_$i1063, in_$i1064, in_$p1065, in_$p1068, in_$i1069, in_$i1070, in_$i1071, in_$i1072, in_$p1073, in_$p1066, in_$p1067, in_$i1074, in_$i1075, in_$i1076, in_$i1077, in_$i1078, in_$p1079, in_$p1082, in_$i1083, in_$i1084, in_$i1085, in_$i1086, in_$p1087, in_$p1080, in_$p1081, in_$i1088, in_$i1089, in_$i1090, in_$i1091, in_$i1092, in_$p1093, in_$p1096, in_$i1097, in_$i1098, in_$i1099, in_$i1100, in_$p1101, in_$p1094, in_$p1095, in_$i1102, in_$i1103, in_$i1104, in_$i1105, in_$i1106, in_$p1107, in_$p1110, in_$i1111, in_$i1112, in_$i1113, in_$i1114, in_$p1115, in_$p1108, in_$p1109, in_$i1116, in_$i1117, in_$i1118, in_$i1119, in_$i1120, in_$p1121, in_$p1124, in_$i1125, in_$i1126, in_$i1127, in_$i1128, in_$p1129, in_$p1122, in_$p1123, in_$i1130, in_$i1131, in_$i1132, in_$i1133, in_$i1134, in_$p1135, in_$p1138, in_$i1139, in_$i1140, in_$i1141, in_$i1142, in_$p1143, in_$p1136, in_$p1137, in_$i1144, in_$i1145, in_$i1146, in_$i1147, in_$i1148, in_$p1149, in_$p1152, in_$i1153, in_$i1154, in_$i1155, in_$i1156, in_$p1157, in_$p1150, in_$p1151, in_$i1158, in_$i1159, in_$i1160, in_$i1161, in_$i1162, in_$p1163, in_$p1166, in_$i1167, in_$i1168, in_$i1169, in_$i1170, in_$p1171, in_$p1164, in_$p1165, in_$i1172, in_$i1173, in_$i1174, in_$i1175, in_$i1176, in_$p1177, in_$p1180, in_$i1181, in_$i1182, in_$i1183, in_$i1184, in_$p1185, in_$p1178, in_$p1179, in_$i1186, in_$i1187, in_$i1188, in_$i1189, in_$i1190, in_$p1191, in_$p1194, in_$i1195, in_$i1196, in_$i1197, in_$i1198, in_$p1199, in_$p1192, in_$p1193, in_$i1200, in_$i1201, in_$i1202, in_$i1204, in_$i1205, in_vslice_dummy_var_26, in_vslice_dummy_var_27, in_vslice_dummy_var_28, in_vslice_dummy_var_29;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5278;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    out_$i10, out_$i11, out_$i12, out_$i13, out_$p14 := out_$i74, out_$i75, out_$i76, out_$i77, out_$p78;
    goto corral_source_split_5369_dummy;

  $bb27:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5369;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    out_$i74, out_$i75, out_$i76, out_$i77, out_$p78 := out_$i10, out_$i11, out_$i134, out_$i13, out_$p14;
    goto $bb27;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    out_$i74, out_$i75, out_$i76, out_$i77, out_$p78 := out_$i10, out_$i11, out_$i132, out_$i13, out_$p14;
    goto $bb27;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    out_$i74, out_$i75, out_$i76, out_$i77, out_$p78 := out_$i115, out_$i11, out_$i128, out_$i13, out_$p14;
    goto $bb27;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    out_$i74, out_$i75, out_$i76, out_$i77, out_$p78 := out_$i115, out_$i11, out_$i126, out_$i13, out_$p14;
    goto $bb27;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    out_$i74, out_$i75, out_$i76, out_$i77, out_$p78 := out_$i115, out_$i11, out_$i120, out_$i13, out_$p14;
    goto $bb27;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    out_$i74, out_$i75, out_$i76, out_$i77, out_$p78 := out_$i10, out_$i66, out_$i12, out_$i13, out_$p14;
    goto $bb27;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    out_$i74, out_$i75, out_$i76, out_$i77, out_$p78 := out_$i10, out_$i11, out_$i12, out_$i384, out_$p383;
    goto $bb27;

  $bb108:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5778;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    out_$p383, out_$i384 := out_$p61, out_$i62;
    goto $bb108;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    out_$p383, out_$i384 := out_$p139, out_$i140;
    goto $bb108;

  $bb61:
    assume !(out_$i138 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5481;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    out_$p139, out_$i140 := out_$p63, out_$i136;
    assume true;
    goto $bb60, $bb61;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    out_$i138 := $ne.i64(out_$i137, 0);
    goto corral_source_split_5479;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    out_$i137 := $load.i64($M.0, out_$p58);
    goto corral_source_split_5478;

  $bb59:
    assume out_$i163 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_5477;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    out_$i136, out_$i160, out_$i161 := out_$i152, out_$i151, out_$i152;
    assume true;
    goto $bb59, $bb66;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    out_$i163 := $eq.i32(out_$i162, 255);
    goto corral_source_split_5507;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    out_$i162 := $zext.i8.i32(out_$i151);
    goto corral_source_split_5506;

  $bb63:
    assume out_$i159 == 1;
    goto corral_source_split_5505;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    out_$i160, out_$i161 := out_$i151, out_$i152;
    assume true;
    goto $bb63, $bb64;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    out_$i159 := $eq.i32(out_$i158, 0);
    goto corral_source_split_5503;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    out_$i158 := $load.i32($M.0, out_$p157);
    goto corral_source_split_5502;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    out_$p157 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(8476, 1));
    goto corral_source_split_5501;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p156, out_$i155);
    goto corral_source_split_5500;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    out_$p156 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7424, 1));
    goto corral_source_split_5499;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    out_$i155 := $sub.i64(out_$i154, 1);
    goto corral_source_split_5498;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    out_$i154 := $load.i64($M.0, out_$p153);
    goto corral_source_split_5497;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    out_$p153 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7424, 1));
    goto corral_source_split_5496;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    out_$i152 := $add.i32(out_$i141, 1);
    call {:si_unique_call 1009} {:cexpr "bytes_read"} boogie_si_record_i32(out_$i152);
    goto corral_source_split_5495;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    out_$i151 := $load.i8($M.0, out_$p150);
    call {:si_unique_call 1008} {:cexpr "c___0"} boogie_si_record_i8(out_$i151);
    goto corral_source_split_5494;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    out_$p150 := $add.ref(out_$p147, $mul.ref(out_$i149, 1));
    goto corral_source_split_5493;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    out_$i149 := $load.i64($M.0, out_$p148);
    goto corral_source_split_5492;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    out_$p148 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7416, 1));
    goto corral_source_split_5491;

  corral_source_split_5489:
    assume {:verifier.code 0} true;
    out_$p147 := $load.ref($M.0, out_$p146);
    goto corral_source_split_5490;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    out_$p146 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7400, 1));
    goto corral_source_split_5489;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p145, out_$i144);
    goto corral_source_split_5488;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    out_$p145 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7416, 1));
    goto corral_source_split_5487;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    out_$i144 := $add.i64(out_$i143, 1);
    goto corral_source_split_5486;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    out_$i143 := $load.i64($M.0, out_$p142);
    goto corral_source_split_5485;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    out_$p142 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7416, 1));
    goto corral_source_split_5484;

  $bb62:
    call out_$i136, out_$i137, out_$i138, out_$i141, out_$p142, out_$i143, out_$i144, out_$p145, out_$p146, out_$p147, out_$p148, out_$i149, out_$p150, out_$i151, out_$i152, out_$p153, out_$i154, out_$i155, out_$p156, out_$p157, out_$i158, out_$i159, out_$i162, out_$i163, out_$i160, out_$i161, out_$p139, out_$i140 := ftdi_elan_respond_engine_loop_$bb62(in_$p0, out_$p58, out_$i136, out_$i137, out_$i138, out_$i141, out_$p142, out_$i143, out_$i144, out_$p145, out_$p146, out_$p147, out_$p148, out_$i149, out_$p150, out_$i151, out_$i152, out_$p153, out_$i154, out_$i155, out_$p156, out_$p157, out_$i158, out_$i159, out_$i162, out_$i163, out_$i160, out_$i161, out_$p63, out_$p139, out_$i140);
    goto $bb62_last;

  $bb62_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5483;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    out_$i141 := out_$i64;
    goto $bb62;

  $bb60:
    assume out_$i138 == 1;
    assume {:verifier.code 0} true;
    out_$i141 := out_$i136;
    assume false;
    return;

  $bb22:
    call out_$i136, out_$i137, out_$i138, out_$i141, out_$p142, out_$i143, out_$i144, out_$p145, out_$p146, out_$p147, out_$p148, out_$i149, out_$p150, out_$i151, out_$i152, out_$p153, out_$i154, out_$i155, out_$p156, out_$p157, out_$i158, out_$i159, out_$i162, out_$i163, out_$i160, out_$i161, out_$p164, out_$p165, out_$i166, out_$i167, out_$p168, out_$p169, out_$i170, out_$p171, out_$i172, out_$i173, out_$p174, out_$i175, out_$i176, out_$p63, out_$i64, out_$p179, out_$i180, out_$i181, out_$p183, out_$i184, out_$i185, out_$i186, out_$i187, out_$p189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$p196, out_$i197, out_$i198, out_$i199, out_$i200, out_$i201, out_$p202, out_$p203, out_$i204, out_$p205, out_$i206, out_$i207, out_$p208, out_$p209, out_$p210, out_$p211, out_$p212, out_$i213, out_$i215, out_$p216, out_$i217, out_$i218, out_$i219, out_$i220, out_$p221, out_$i224, out_$i225, out_$p226, out_$p222, out_$p223, out_$i227, out_$i228, out_$i214, out_$i229, out_$p230, out_$p231, out_$p232, out_$p233, out_$p234, out_$p235, out_$p236, out_$p238, out_$i239, out_$i240, out_$p241, out_$i242, out_$p243, out_$i244, out_$i245, out_$p246, out_$p247, out_$p248, out_$i249, out_$i250, out_$p253, out_$i254, out_$i255, out_$i256, out_$p258, out_$i259, out_$i260, out_$i261, out_$i262, out_$p264, out_$i265, out_$i266, out_$i267, out_$i268, out_$p270, out_$i271, out_$i272, out_$i273, out_$p274, out_$p275, out_$p276, out_$p277, out_$p278, out_$p279, out_$p280, out_$p281, out_$p282, out_$p285, out_$i286, out_$i287, out_$i288, out_$i289, out_$i290, out_$i291, out_$i292, out_$i293, out_$i294, out_$i295, out_$i296, out_$i297, out_$p298, out_$p299, out_$p300, out_$i301, out_$p303, out_$i304, out_$i305, out_$i306, out_$p307, out_$p309, out_$i310, out_$i311, out_$i312, out_$i313, out_$p315, out_$i316, out_$i317, out_$i318, out_$p320, out_$i321, out_$i322, out_$i323, out_$i324, out_$i325, out_$p327, out_$i328, out_$i329, out_$i330, out_$i331, out_$i332, out_$p333, out_$p334, out_$i335, out_$p336, out_$p338, out_$i339, out_$i340, out_$i341, out_$i342, out_$p343, out_$p345, out_$i346, out_$i347, out_$i348, out_$i349, out_$p350, out_$p352, out_$i353, out_$i354, out_$i355, out_$i356, out_$p357, out_$p359, out_$i360, out_$i361, out_$i362, out_$i363, out_$p364, out_$p366, out_$i367, out_$i368, out_$i369, out_$p370, out_$p372, out_$i373, out_$i374, out_$i375, out_$i376, out_$i377, out_$i378, out_$p379, out_$i380, out_$i381, out_$p382, out_$p177, out_$i178, out_$p139, out_$i140, out_$i796, out_$i797, out_$i798, out_$p799, out_$p802, out_$i803, out_$i804, out_$i805, out_$i806, out_$p807, out_$p800, out_$p801, out_$i808, out_$i809, out_$i810, out_$i811, out_$i812, out_$p813, out_$p816, out_$i817, out_$i818, out_$i819, out_$i820, out_$p821, out_$p814, out_$p815, out_$i822, out_$i823, out_$i824, out_$i825, out_$i826, out_$p827, out_$p830, out_$i831, out_$i832, out_$i833, out_$i834, out_$p835, out_$p828, out_$p829, out_$i836, out_$i837, out_$i838, out_$i839, out_$i840, out_$p841, out_$p844, out_$i845, out_$i846, out_$i847, out_$i848, out_$p849, out_$p842, out_$p843, out_$i850, out_$i851, out_$i852, out_$i853, out_$i854, out_$p855, out_$p858, out_$i859, out_$i860, out_$i861, out_$i862, out_$p863, out_$p856, out_$p857, out_$i864, out_$i865, out_$i866, out_$i867, out_$i868, out_$p869, out_$p872, out_$i873, out_$i874, out_$i875, out_$i876, out_$p877, out_$p870, out_$p871, out_$i878, out_$i879, out_$i880, out_$i881, out_$i882, out_$p883, out_$p886, out_$i887, out_$i888, out_$i889, out_$i890, out_$p891, out_$p884, out_$p885, out_$i892, out_$i893, out_$i894, out_$i895, out_$i896, out_$p897, out_$p900, out_$i901, out_$i902, out_$i903, out_$i904, out_$p905, out_$p898, out_$p899, out_$i906, out_$i907, out_$i908, out_$i909, out_$i910, out_$p911, out_$p914, out_$i915, out_$i916, out_$i917, out_$i918, out_$p919, out_$p912, out_$p913, out_$i920, out_$i921, out_$i922, out_$i923, out_$i924, out_$p925, out_$p928, out_$i929, out_$i930, out_$i931, out_$i932, out_$p933, out_$p926, out_$p927, out_$i934, out_$i935, out_$i936, out_$i937, out_$i938, out_$p939, out_$p942, out_$i943, out_$i944, out_$i945, out_$i946, out_$p947, out_$p940, out_$p941, out_$i948, out_$i949, out_$i950, out_$i951, out_$i952, out_$p953, out_$p956, out_$i957, out_$i958, out_$i959, out_$i960, out_$p961, out_$p954, out_$p955, out_$i962, out_$i963, out_$i964, out_$i965, out_$i966, out_$p967, out_$p970, out_$i971, out_$i972, out_$i973, out_$i974, out_$p975, out_$p968, out_$p969, out_$i976, out_$i977, out_$i978, out_$i979, out_$i980, out_$p981, out_$p984, out_$i985, out_$i986, out_$i987, out_$i988, out_$p989, out_$p982, out_$p983, out_$i990, out_$i991, out_$i992, out_$i993, out_$i994, out_$p995, out_$p998, out_$i999, out_$i1000, out_$i1001, out_$i1002, out_$p1003, out_$p996, out_$p997, out_$i1004, out_$i1005, out_$i1006, out_$i1007, out_$i1008, out_$p1009, out_$p1012, out_$i1013, out_$i1014, out_$i1015, out_$i1016, out_$p1017, out_$p1010, out_$p1011, out_$i1018, out_$i1019, out_$i1020, out_$i1021, out_$i1022, out_$p1023, out_$p1026, out_$i1027, out_$i1028, out_$i1029, out_$i1030, out_$p1031, out_$p1024, out_$p1025, out_$i1032, out_$i1033, out_$i1034, out_$i1035, out_$i1036, out_$p1037, out_$p1040, out_$i1041, out_$i1042, out_$i1043, out_$i1044, out_$p1045, out_$p1038, out_$p1039, out_$i1046, out_$i1047, out_$i1048, out_$i1049, out_$i1050, out_$p1051, out_$p1054, out_$i1055, out_$i1056, out_$i1057, out_$i1058, out_$p1059, out_$p1052, out_$p1053, out_$i1060, out_$i1061, out_$i1062, out_$i1063, out_$i1064, out_$p1065, out_$p1068, out_$i1069, out_$i1070, out_$i1071, out_$i1072, out_$p1073, out_$p1066, out_$p1067, out_$i1074, out_$i1075, out_$i1076, out_$i1077, out_$i1078, out_$p1079, out_$p1082, out_$i1083, out_$i1084, out_$i1085, out_$i1086, out_$p1087, out_$p1080, out_$p1081, out_$i1088, out_$i1089, out_$i1090, out_$i1091, out_$i1092, out_$p1093, out_$p1096, out_$i1097, out_$i1098, out_$i1099, out_$i1100, out_$p1101, out_$p1094, out_$p1095, out_$i1102, out_$i1103, out_$i1104, out_$i1105, out_$i1106, out_$p1107, out_$p1110, out_$i1111, out_$i1112, out_$i1113, out_$i1114, out_$p1115, out_$p1108, out_$p1109, out_$i1116, out_$i1117, out_$i1118, out_$i1119, out_$i1120, out_$p1121, out_$p1124, out_$i1125, out_$i1126, out_$i1127, out_$i1128, out_$p1129, out_$p1122, out_$p1123, out_$i1130, out_$i1131, out_$i1132, out_$i1133, out_$i1134, out_$p1135, out_$p1138, out_$i1139, out_$i1140, out_$i1141, out_$i1142, out_$p1143, out_$p1136, out_$p1137, out_$i1144, out_$i1145, out_$i1146, out_$i1147, out_$i1148, out_$p1149, out_$p1152, out_$i1153, out_$i1154, out_$i1155, out_$i1156, out_$p1157, out_$p1150, out_$p1151, out_$i1158, out_$i1159, out_$i1160, out_$i1161, out_$i1162, out_$p1163, out_$p1166, out_$i1167, out_$i1168, out_$i1169, out_$i1170, out_$p1171, out_$p1164, out_$p1165, out_$i1172, out_$i1173, out_$i1174, out_$i1175, out_$i1176, out_$p1177, out_$p1180, out_$i1181, out_$i1182, out_$i1183, out_$i1184, out_$p1185, out_$p1178, out_$p1179, out_$i1186, out_$i1187, out_$i1188, out_$i1189, out_$i1190, out_$p1191, out_$p1194, out_$i1195, out_$i1196, out_$i1197, out_$i1198, out_$p1199, out_$p1192, out_$p1193, out_$i1200, out_$i1201, out_$i1202, out_$i1204, out_$i1205, out_vslice_dummy_var_28, out_vslice_dummy_var_29 := ftdi_elan_respond_engine_loop_$bb22(in_$p0, in_$p3, out_$p58, out_$i136, out_$i137, out_$i138, out_$i141, out_$p142, out_$i143, out_$i144, out_$p145, out_$p146, out_$p147, out_$p148, out_$i149, out_$p150, out_$i151, out_$i152, out_$p153, out_$i154, out_$i155, out_$p156, out_$p157, out_$i158, out_$i159, out_$i162, out_$i163, out_$i160, out_$i161, out_$p164, out_$p165, out_$i166, out_$i167, out_$p168, out_$p169, out_$i170, out_$p171, out_$i172, out_$i173, out_$p174, out_$i175, out_$i176, out_$p63, out_$i64, out_$p179, out_$i180, out_$i181, out_$p183, out_$i184, out_$i185, out_$i186, out_$i187, out_$p189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$p196, out_$i197, out_$i198, out_$i199, out_$i200, out_$i201, out_$p202, out_$p203, out_$i204, out_$p205, out_$i206, out_$i207, out_$p208, out_$p209, out_$p210, out_$p211, out_$p212, out_$i213, out_$i215, out_$p216, out_$i217, out_$i218, out_$i219, out_$i220, out_$p221, out_$i224, out_$i225, out_$p226, out_$p222, out_$p223, out_$i227, out_$i228, out_$i214, out_$i229, out_$p230, out_$p231, out_$p232, out_$p233, out_$p234, out_$p235, out_$p236, out_$p238, out_$i239, out_$i240, out_$p241, out_$i242, out_$p243, out_$i244, out_$i245, out_$p246, out_$p247, out_$p248, out_$i249, out_$i250, out_$p253, out_$i254, out_$i255, out_$i256, out_$p258, out_$i259, out_$i260, out_$i261, out_$i262, out_$p264, out_$i265, out_$i266, out_$i267, out_$i268, out_$p270, out_$i271, out_$i272, out_$i273, out_$p274, out_$p275, out_$p276, out_$p277, out_$p278, out_$p279, out_$p280, out_$p281, out_$p282, out_$p285, out_$i286, out_$i287, out_$i288, out_$i289, out_$i290, out_$i291, out_$i292, out_$i293, out_$i294, out_$i295, out_$i296, out_$i297, out_$p298, out_$p299, out_$p300, out_$i301, out_$p303, out_$i304, out_$i305, out_$i306, out_$p307, out_$p309, out_$i310, out_$i311, out_$i312, out_$i313, out_$p315, out_$i316, out_$i317, out_$i318, out_$p320, out_$i321, out_$i322, out_$i323, out_$i324, out_$i325, out_$p327, out_$i328, out_$i329, out_$i330, out_$i331, out_$i332, out_$p333, out_$p334, out_$i335, out_$p336, out_$p338, out_$i339, out_$i340, out_$i341, out_$i342, out_$p343, out_$p345, out_$i346, out_$i347, out_$i348, out_$i349, out_$p350, out_$p352, out_$i353, out_$i354, out_$i355, out_$i356, out_$p357, out_$p359, out_$i360, out_$i361, out_$i362, out_$i363, out_$p364, out_$p366, out_$i367, out_$i368, out_$i369, out_$p370, out_$p372, out_$i373, out_$i374, out_$i375, out_$i376, out_$i377, out_$i378, out_$p379, out_$i380, out_$i381, out_$p382, out_$p177, out_$i178, out_$p139, out_$i140, out_$i796, out_$i797, out_$i798, out_$p799, out_$p802, out_$i803, out_$i804, out_$i805, out_$i806, out_$p807, out_$p800, out_$p801, out_$i808, out_$i809, out_$i810, out_$i811, out_$i812, out_$p813, out_$p816, out_$i817, out_$i818, out_$i819, out_$i820, out_$p821, out_$p814, out_$p815, out_$i822, out_$i823, out_$i824, out_$i825, out_$i826, out_$p827, out_$p830, out_$i831, out_$i832, out_$i833, out_$i834, out_$p835, out_$p828, out_$p829, out_$i836, out_$i837, out_$i838, out_$i839, out_$i840, out_$p841, out_$p844, out_$i845, out_$i846, out_$i847, out_$i848, out_$p849, out_$p842, out_$p843, out_$i850, out_$i851, out_$i852, out_$i853, out_$i854, out_$p855, out_$p858, out_$i859, out_$i860, out_$i861, out_$i862, out_$p863, out_$p856, out_$p857, out_$i864, out_$i865, out_$i866, out_$i867, out_$i868, out_$p869, out_$p872, out_$i873, out_$i874, out_$i875, out_$i876, out_$p877, out_$p870, out_$p871, out_$i878, out_$i879, out_$i880, out_$i881, out_$i882, out_$p883, out_$p886, out_$i887, out_$i888, out_$i889, out_$i890, out_$p891, out_$p884, out_$p885, out_$i892, out_$i893, out_$i894, out_$i895, out_$i896, out_$p897, out_$p900, out_$i901, out_$i902, out_$i903, out_$i904, out_$p905, out_$p898, out_$p899, out_$i906, out_$i907, out_$i908, out_$i909, out_$i910, out_$p911, out_$p914, out_$i915, out_$i916, out_$i917, out_$i918, out_$p919, out_$p912, out_$p913, out_$i920, out_$i921, out_$i922, out_$i923, out_$i924, out_$p925, out_$p928, out_$i929, out_$i930, out_$i931, out_$i932, out_$p933, out_$p926, out_$p927, out_$i934, out_$i935, out_$i936, out_$i937, out_$i938, out_$p939, out_$p942, out_$i943, out_$i944, out_$i945, out_$i946, out_$p947, out_$p940, out_$p941, out_$i948, out_$i949, out_$i950, out_$i951, out_$i952, out_$p953, out_$p956, out_$i957, out_$i958, out_$i959, out_$i960, out_$p961, out_$p954, out_$p955, out_$i962, out_$i963, out_$i964, out_$i965, out_$i966, out_$p967, out_$p970, out_$i971, out_$i972, out_$i973, out_$i974, out_$p975, out_$p968, out_$p969, out_$i976, out_$i977, out_$i978, out_$i979, out_$i980, out_$p981, out_$p984, out_$i985, out_$i986, out_$i987, out_$i988, out_$p989, out_$p982, out_$p983, out_$i990, out_$i991, out_$i992, out_$i993, out_$i994, out_$p995, out_$p998, out_$i999, out_$i1000, out_$i1001, out_$i1002, out_$p1003, out_$p996, out_$p997, out_$i1004, out_$i1005, out_$i1006, out_$i1007, out_$i1008, out_$p1009, out_$p1012, out_$i1013, out_$i1014, out_$i1015, out_$i1016, out_$p1017, out_$p1010, out_$p1011, out_$i1018, out_$i1019, out_$i1020, out_$i1021, out_$i1022, out_$p1023, out_$p1026, out_$i1027, out_$i1028, out_$i1029, out_$i1030, out_$p1031, out_$p1024, out_$p1025, out_$i1032, out_$i1033, out_$i1034, out_$i1035, out_$i1036, out_$p1037, out_$p1040, out_$i1041, out_$i1042, out_$i1043, out_$i1044, out_$p1045, out_$p1038, out_$p1039, out_$i1046, out_$i1047, out_$i1048, out_$i1049, out_$i1050, out_$p1051, out_$p1054, out_$i1055, out_$i1056, out_$i1057, out_$i1058, out_$p1059, out_$p1052, out_$p1053, out_$i1060, out_$i1061, out_$i1062, out_$i1063, out_$i1064, out_$p1065, out_$p1068, out_$i1069, out_$i1070, out_$i1071, out_$i1072, out_$p1073, out_$p1066, out_$p1067, out_$i1074, out_$i1075, out_$i1076, out_$i1077, out_$i1078, out_$p1079, out_$p1082, out_$i1083, out_$i1084, out_$i1085, out_$i1086, out_$p1087, out_$p1080, out_$p1081, out_$i1088, out_$i1089, out_$i1090, out_$i1091, out_$i1092, out_$p1093, out_$p1096, out_$i1097, out_$i1098, out_$i1099, out_$i1100, out_$p1101, out_$p1094, out_$p1095, out_$i1102, out_$i1103, out_$i1104, out_$i1105, out_$i1106, out_$p1107, out_$p1110, out_$i1111, out_$i1112, out_$i1113, out_$i1114, out_$p1115, out_$p1108, out_$p1109, out_$i1116, out_$i1117, out_$i1118, out_$i1119, out_$i1120, out_$p1121, out_$p1124, out_$i1125, out_$i1126, out_$i1127, out_$i1128, out_$p1129, out_$p1122, out_$p1123, out_$i1130, out_$i1131, out_$i1132, out_$i1133, out_$i1134, out_$p1135, out_$p1138, out_$i1139, out_$i1140, out_$i1141, out_$i1142, out_$p1143, out_$p1136, out_$p1137, out_$i1144, out_$i1145, out_$i1146, out_$i1147, out_$i1148, out_$p1149, out_$p1152, out_$i1153, out_$i1154, out_$i1155, out_$i1156, out_$p1157, out_$p1150, out_$p1151, out_$i1158, out_$i1159, out_$i1160, out_$i1161, out_$i1162, out_$p1163, out_$p1166, out_$i1167, out_$i1168, out_$i1169, out_$i1170, out_$p1171, out_$p1164, out_$p1165, out_$i1172, out_$i1173, out_$i1174, out_$i1175, out_$i1176, out_$p1177, out_$p1180, out_$i1181, out_$i1182, out_$i1183, out_$i1184, out_$p1185, out_$p1178, out_$p1179, out_$i1186, out_$i1187, out_$i1188, out_$i1189, out_$i1190, out_$p1191, out_$p1194, out_$i1195, out_$i1196, out_$i1197, out_$i1198, out_$p1199, out_$p1192, out_$p1193, out_$i1200, out_$i1201, out_$i1202, out_$i1204, out_$i1205, out_vslice_dummy_var_28, out_vslice_dummy_var_29);
    goto $bb22_last;

  $bb22_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5349;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    out_$p63, out_$i64 := out_$p14, out_$i13;
    goto $bb22;

  $bb71:
    assume out_$i176 == 1;
    assume {:verifier.code 0} true;
    out_$p63, out_$i64 := out_$p174, out_$i161;
    assume false;
    return;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    out_$p177, out_$i178 := out_$p174, out_$i161;
    assume true;
    goto $bb71, $bb72;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    out_$i176 := $ne.i64(out_$i175, 0);
    goto corral_source_split_5532;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    out_$i175 := $load.i64($M.0, out_$p58);
    goto corral_source_split_5531;

  $bb70:
    assume {:verifier.code 0} true;
    goto corral_source_split_5530;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    out_$p174 := out_$p382;
    goto $bb70;

  corral_source_split_5771:
    assume {:verifier.code 0} true;
    out_$p174 := out_$p379;
    goto $bb70;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    out_$p174 := out_$p164;
    goto $bb70;

  $bb94:
    assume {:verifier.code 0} true;
    out_$p174 := out_$p282;
    goto $bb70;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    out_$p174 := out_$p236;
    goto $bb70;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    out_$p174 := out_$p164;
    goto $bb70;

  $bb68:
    assume out_$i173 == 1;
    goto corral_source_split_5523;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    out_$i173 := $slt.i32(out_$i170, out_$i172);
    goto corral_source_split_5521;

  corral_source_split_5519:
    assume {:verifier.code 0} true;
    out_$i172 := $load.i32($M.0, out_$p171);
    goto corral_source_split_5520;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    out_$p171 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(8472, 1));
    goto corral_source_split_5519;

  corral_source_split_5517:
    assume {:verifier.code 0} true;
    out_$i170 := $load.i32($M.0, out_$p169);
    goto corral_source_split_5518;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    out_$p169 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(8476, 1));
    goto corral_source_split_5517;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p168, out_$i167);
    goto corral_source_split_5516;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    out_$p168 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(8476, 1));
    goto corral_source_split_5515;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    out_$i167 := $add.i32(out_$i166, 1);
    goto corral_source_split_5514;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    out_$i166 := $load.i32($M.0, out_$p165);
    goto corral_source_split_5513;

  $bb67:
    assume {:verifier.code 0} true;
    out_$p165 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(8476, 1));
    goto corral_source_split_5512;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p63, out_$i160);
    assume {:verifier.code 0} true;
    goto $bb67;

  corral_source_split_5509:
    assume {:verifier.code 0} true;
    out_$p164 := $add.ref(out_$p63, $mul.ref(1, 1));
    goto corral_source_split_5510;

  $bb65:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5509;

  $bb64:
    assume {:verifier.code 0} true;
    assume !(out_$i159 == 1);
    goto $bb65;

  $bb66:
    assume {:verifier.code 0} true;
    assume !(out_$i163 == 1);
    goto $bb65;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    goto corral_source_split_5609;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    out_$p236 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7444, 1));
    goto corral_source_split_5608;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p235, 0);
    goto corral_source_split_5607;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    out_$p235 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(8480, 1));
    goto corral_source_split_5606;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p234, 4);
    goto corral_source_split_5605;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    out_$p234 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(8472, 1));
    goto corral_source_split_5604;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p233, 0);
    goto corral_source_split_5603;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    out_$p233 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(8476, 1));
    goto corral_source_split_5602;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1018} ftdi_elan_do_callback(in_$p0, out_$p205, out_$p232, out_$i207);
    goto corral_source_split_5601;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    out_$p232 := $add.ref(out_$p231, $mul.ref(4, 1));
    goto corral_source_split_5600;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    out_$p231 := $bitcast.ref.ref(out_$p230);
    goto corral_source_split_5599;

  $bb88:
    assume {:verifier.code 0} true;
    out_$p230 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7444, 1));
    goto corral_source_split_5598;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb644:
    assume {:verifier.code 0} true;
    goto $bb89;

  corral_source_split_6956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1154} out_vslice_dummy_var_29 := sprintf.ref.ref(out_$p1192, .str.5);
    assume {:verifier.code 0} true;
    goto $bb644;

  corral_source_split_6951:
    assume {:verifier.code 0} true;
    goto $bb644;

  corral_source_split_6950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1153} out_vslice_dummy_var_28 := sprintf.ref.ref.i32(out_$p1192, .str.4, out_$i1205);
    goto corral_source_split_6951;

  corral_source_split_6949:
    assume {:verifier.code 0} true;
    out_$i1205 := $zext.i8.i32(out_$i1204);
    goto corral_source_split_6950;

  $bb640:
    assume {:verifier.code 0} true;
    out_$i1204 := $load.i8($M.0, out_$p1193);
    goto corral_source_split_6949;

  $bb642:
    assume {:verifier.code 0} true;
    assume out_$i1202 == 1;
    goto $bb640;

  $bb639:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb640;

  $bb638:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb639, $bb641;

  corral_source_split_6947:
    assume {:verifier.code 0} true;
    goto $bb638;

  $bb636:
    assume out_$i1201 == 1;
    goto corral_source_split_6947;

  corral_source_split_6945:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb636, $bb637;

  corral_source_split_6944:
    assume {:verifier.code 0} true;
    out_$i1201 := $sgt.i32(out_$i1186, 0);
    goto corral_source_split_6945;

  corral_source_split_6943:
    assume {:verifier.code 0} true;
    out_$i1200 := $sub.i32(out_$i1186, 1);
    goto corral_source_split_6944;

  $bb635:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6943;

  corral_source_split_6941:
    assume {:verifier.code 0} true;
    out_$p1191 := $add.ref(out_$p1178, $mul.ref(out_$i1190, 1));
    assume {:verifier.code 0} true;
    out_$p1192, out_$p1193 := out_$p1191, out_$p1179;
    goto $bb635;

  corral_source_split_6934:
    assume {:verifier.code 0} true;
    out_$p1192, out_$p1193 := out_$p1199, out_$p1194;
    goto $bb635;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    out_$p1199 := $add.ref(out_$p1178, $mul.ref(out_$i1198, 1));
    goto corral_source_split_6934;

  corral_source_split_6932:
    assume {:verifier.code 0} true;
    out_$i1198 := $sext.i32.i64(out_$i1197);
    goto corral_source_split_6933;

  corral_source_split_6931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1151} out_$i1197 := sprintf.ref.ref.i32(out_$p1178, .str.4, out_$i1196);
    goto corral_source_split_6932;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    out_$i1196 := $zext.i8.i32(out_$i1195);
    goto corral_source_split_6931;

  corral_source_split_6929:
    assume {:verifier.code 0} true;
    out_$i1195 := $load.i8($M.0, out_$p1179);
    goto corral_source_split_6930;

  $bb631:
    assume {:verifier.code 0} true;
    out_$p1194 := $add.ref(out_$p1179, $mul.ref(1, 1));
    goto corral_source_split_6929;

  $bb633:
    assume {:verifier.code 0} true;
    assume out_$i1188 == 1;
    goto $bb631;

  $bb630:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb631;

  $bb629:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb630, $bb632;

  corral_source_split_6927:
    assume {:verifier.code 0} true;
    goto $bb629;

  $bb627:
    assume out_$i1187 == 1;
    goto corral_source_split_6927;

  corral_source_split_6925:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb627, $bb628;

  corral_source_split_6924:
    assume {:verifier.code 0} true;
    out_$i1187 := $sgt.i32(out_$i1172, 0);
    goto corral_source_split_6925;

  corral_source_split_6923:
    assume {:verifier.code 0} true;
    out_$i1186 := $sub.i32(out_$i1172, 1);
    goto corral_source_split_6924;

  $bb626:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6923;

  corral_source_split_6921:
    assume {:verifier.code 0} true;
    out_$p1177 := $add.ref(out_$p1164, $mul.ref(out_$i1176, 1));
    assume {:verifier.code 0} true;
    out_$p1178, out_$p1179 := out_$p1177, out_$p1165;
    goto $bb626;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    out_$p1178, out_$p1179 := out_$p1185, out_$p1180;
    goto $bb626;

  corral_source_split_6913:
    assume {:verifier.code 0} true;
    out_$p1185 := $add.ref(out_$p1164, $mul.ref(out_$i1184, 1));
    goto corral_source_split_6914;

  corral_source_split_6912:
    assume {:verifier.code 0} true;
    out_$i1184 := $sext.i32.i64(out_$i1183);
    goto corral_source_split_6913;

  corral_source_split_6911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1149} out_$i1183 := sprintf.ref.ref.i32(out_$p1164, .str.4, out_$i1182);
    goto corral_source_split_6912;

  corral_source_split_6910:
    assume {:verifier.code 0} true;
    out_$i1182 := $zext.i8.i32(out_$i1181);
    goto corral_source_split_6911;

  corral_source_split_6909:
    assume {:verifier.code 0} true;
    out_$i1181 := $load.i8($M.0, out_$p1165);
    goto corral_source_split_6910;

  $bb622:
    assume {:verifier.code 0} true;
    out_$p1180 := $add.ref(out_$p1165, $mul.ref(1, 1));
    goto corral_source_split_6909;

  $bb624:
    assume {:verifier.code 0} true;
    assume out_$i1174 == 1;
    goto $bb622;

  $bb621:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb622;

  $bb620:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb621, $bb623;

  corral_source_split_6907:
    assume {:verifier.code 0} true;
    goto $bb620;

  $bb618:
    assume out_$i1173 == 1;
    goto corral_source_split_6907;

  corral_source_split_6905:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb618, $bb619;

  corral_source_split_6904:
    assume {:verifier.code 0} true;
    out_$i1173 := $sgt.i32(out_$i1158, 0);
    goto corral_source_split_6905;

  corral_source_split_6903:
    assume {:verifier.code 0} true;
    out_$i1172 := $sub.i32(out_$i1158, 1);
    goto corral_source_split_6904;

  $bb617:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6903;

  corral_source_split_6901:
    assume {:verifier.code 0} true;
    out_$p1163 := $add.ref(out_$p1150, $mul.ref(out_$i1162, 1));
    assume {:verifier.code 0} true;
    out_$p1164, out_$p1165 := out_$p1163, out_$p1151;
    goto $bb617;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    out_$p1164, out_$p1165 := out_$p1171, out_$p1166;
    goto $bb617;

  corral_source_split_6893:
    assume {:verifier.code 0} true;
    out_$p1171 := $add.ref(out_$p1150, $mul.ref(out_$i1170, 1));
    goto corral_source_split_6894;

  corral_source_split_6892:
    assume {:verifier.code 0} true;
    out_$i1170 := $sext.i32.i64(out_$i1169);
    goto corral_source_split_6893;

  corral_source_split_6891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1147} out_$i1169 := sprintf.ref.ref.i32(out_$p1150, .str.4, out_$i1168);
    goto corral_source_split_6892;

  corral_source_split_6890:
    assume {:verifier.code 0} true;
    out_$i1168 := $zext.i8.i32(out_$i1167);
    goto corral_source_split_6891;

  corral_source_split_6889:
    assume {:verifier.code 0} true;
    out_$i1167 := $load.i8($M.0, out_$p1151);
    goto corral_source_split_6890;

  $bb613:
    assume {:verifier.code 0} true;
    out_$p1166 := $add.ref(out_$p1151, $mul.ref(1, 1));
    goto corral_source_split_6889;

  $bb615:
    assume {:verifier.code 0} true;
    assume out_$i1160 == 1;
    goto $bb613;

  $bb612:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb613;

  $bb611:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb612, $bb614;

  corral_source_split_6887:
    assume {:verifier.code 0} true;
    goto $bb611;

  $bb609:
    assume out_$i1159 == 1;
    goto corral_source_split_6887;

  corral_source_split_6885:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb609, $bb610;

  corral_source_split_6884:
    assume {:verifier.code 0} true;
    out_$i1159 := $sgt.i32(out_$i1144, 0);
    goto corral_source_split_6885;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    out_$i1158 := $sub.i32(out_$i1144, 1);
    goto corral_source_split_6884;

  $bb608:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6883;

  corral_source_split_6881:
    assume {:verifier.code 0} true;
    out_$p1149 := $add.ref(out_$p1136, $mul.ref(out_$i1148, 1));
    assume {:verifier.code 0} true;
    out_$p1150, out_$p1151 := out_$p1149, out_$p1137;
    goto $bb608;

  corral_source_split_6874:
    assume {:verifier.code 0} true;
    out_$p1150, out_$p1151 := out_$p1157, out_$p1152;
    goto $bb608;

  corral_source_split_6873:
    assume {:verifier.code 0} true;
    out_$p1157 := $add.ref(out_$p1136, $mul.ref(out_$i1156, 1));
    goto corral_source_split_6874;

  corral_source_split_6872:
    assume {:verifier.code 0} true;
    out_$i1156 := $sext.i32.i64(out_$i1155);
    goto corral_source_split_6873;

  corral_source_split_6871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1145} out_$i1155 := sprintf.ref.ref.i32(out_$p1136, .str.4, out_$i1154);
    goto corral_source_split_6872;

  corral_source_split_6870:
    assume {:verifier.code 0} true;
    out_$i1154 := $zext.i8.i32(out_$i1153);
    goto corral_source_split_6871;

  corral_source_split_6869:
    assume {:verifier.code 0} true;
    out_$i1153 := $load.i8($M.0, out_$p1137);
    goto corral_source_split_6870;

  $bb604:
    assume {:verifier.code 0} true;
    out_$p1152 := $add.ref(out_$p1137, $mul.ref(1, 1));
    goto corral_source_split_6869;

  $bb606:
    assume {:verifier.code 0} true;
    assume out_$i1146 == 1;
    goto $bb604;

  $bb603:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb604;

  $bb602:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb603, $bb605;

  corral_source_split_6867:
    assume {:verifier.code 0} true;
    goto $bb602;

  $bb600:
    assume out_$i1145 == 1;
    goto corral_source_split_6867;

  corral_source_split_6865:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb600, $bb601;

  corral_source_split_6864:
    assume {:verifier.code 0} true;
    out_$i1145 := $sgt.i32(out_$i1130, 0);
    goto corral_source_split_6865;

  corral_source_split_6863:
    assume {:verifier.code 0} true;
    out_$i1144 := $sub.i32(out_$i1130, 1);
    goto corral_source_split_6864;

  $bb599:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6863;

  corral_source_split_6861:
    assume {:verifier.code 0} true;
    out_$p1135 := $add.ref(out_$p1122, $mul.ref(out_$i1134, 1));
    assume {:verifier.code 0} true;
    out_$p1136, out_$p1137 := out_$p1135, out_$p1123;
    goto $bb599;

  corral_source_split_6854:
    assume {:verifier.code 0} true;
    out_$p1136, out_$p1137 := out_$p1143, out_$p1138;
    goto $bb599;

  corral_source_split_6853:
    assume {:verifier.code 0} true;
    out_$p1143 := $add.ref(out_$p1122, $mul.ref(out_$i1142, 1));
    goto corral_source_split_6854;

  corral_source_split_6852:
    assume {:verifier.code 0} true;
    out_$i1142 := $sext.i32.i64(out_$i1141);
    goto corral_source_split_6853;

  corral_source_split_6851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1143} out_$i1141 := sprintf.ref.ref.i32(out_$p1122, .str.4, out_$i1140);
    goto corral_source_split_6852;

  corral_source_split_6850:
    assume {:verifier.code 0} true;
    out_$i1140 := $zext.i8.i32(out_$i1139);
    goto corral_source_split_6851;

  corral_source_split_6849:
    assume {:verifier.code 0} true;
    out_$i1139 := $load.i8($M.0, out_$p1123);
    goto corral_source_split_6850;

  $bb595:
    assume {:verifier.code 0} true;
    out_$p1138 := $add.ref(out_$p1123, $mul.ref(1, 1));
    goto corral_source_split_6849;

  $bb597:
    assume {:verifier.code 0} true;
    assume out_$i1132 == 1;
    goto $bb595;

  $bb594:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb595;

  $bb593:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb594, $bb596;

  corral_source_split_6847:
    assume {:verifier.code 0} true;
    goto $bb593;

  $bb591:
    assume out_$i1131 == 1;
    goto corral_source_split_6847;

  corral_source_split_6845:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb591, $bb592;

  corral_source_split_6844:
    assume {:verifier.code 0} true;
    out_$i1131 := $sgt.i32(out_$i1116, 0);
    goto corral_source_split_6845;

  corral_source_split_6843:
    assume {:verifier.code 0} true;
    out_$i1130 := $sub.i32(out_$i1116, 1);
    goto corral_source_split_6844;

  $bb590:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6843;

  corral_source_split_6841:
    assume {:verifier.code 0} true;
    out_$p1121 := $add.ref(out_$p1108, $mul.ref(out_$i1120, 1));
    assume {:verifier.code 0} true;
    out_$p1122, out_$p1123 := out_$p1121, out_$p1109;
    goto $bb590;

  corral_source_split_6834:
    assume {:verifier.code 0} true;
    out_$p1122, out_$p1123 := out_$p1129, out_$p1124;
    goto $bb590;

  corral_source_split_6833:
    assume {:verifier.code 0} true;
    out_$p1129 := $add.ref(out_$p1108, $mul.ref(out_$i1128, 1));
    goto corral_source_split_6834;

  corral_source_split_6832:
    assume {:verifier.code 0} true;
    out_$i1128 := $sext.i32.i64(out_$i1127);
    goto corral_source_split_6833;

  corral_source_split_6831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1141} out_$i1127 := sprintf.ref.ref.i32(out_$p1108, .str.4, out_$i1126);
    goto corral_source_split_6832;

  corral_source_split_6830:
    assume {:verifier.code 0} true;
    out_$i1126 := $zext.i8.i32(out_$i1125);
    goto corral_source_split_6831;

  corral_source_split_6829:
    assume {:verifier.code 0} true;
    out_$i1125 := $load.i8($M.0, out_$p1109);
    goto corral_source_split_6830;

  $bb586:
    assume {:verifier.code 0} true;
    out_$p1124 := $add.ref(out_$p1109, $mul.ref(1, 1));
    goto corral_source_split_6829;

  $bb588:
    assume {:verifier.code 0} true;
    assume out_$i1118 == 1;
    goto $bb586;

  $bb585:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb586;

  $bb584:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb585, $bb587;

  corral_source_split_6827:
    assume {:verifier.code 0} true;
    goto $bb584;

  $bb582:
    assume out_$i1117 == 1;
    goto corral_source_split_6827;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb582, $bb583;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    out_$i1117 := $sgt.i32(out_$i1102, 0);
    goto corral_source_split_6825;

  corral_source_split_6823:
    assume {:verifier.code 0} true;
    out_$i1116 := $sub.i32(out_$i1102, 1);
    goto corral_source_split_6824;

  $bb581:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6823;

  corral_source_split_6821:
    assume {:verifier.code 0} true;
    out_$p1107 := $add.ref(out_$p1094, $mul.ref(out_$i1106, 1));
    assume {:verifier.code 0} true;
    out_$p1108, out_$p1109 := out_$p1107, out_$p1095;
    goto $bb581;

  corral_source_split_6814:
    assume {:verifier.code 0} true;
    out_$p1108, out_$p1109 := out_$p1115, out_$p1110;
    goto $bb581;

  corral_source_split_6813:
    assume {:verifier.code 0} true;
    out_$p1115 := $add.ref(out_$p1094, $mul.ref(out_$i1114, 1));
    goto corral_source_split_6814;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    out_$i1114 := $sext.i32.i64(out_$i1113);
    goto corral_source_split_6813;

  corral_source_split_6811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1139} out_$i1113 := sprintf.ref.ref.i32(out_$p1094, .str.4, out_$i1112);
    goto corral_source_split_6812;

  corral_source_split_6810:
    assume {:verifier.code 0} true;
    out_$i1112 := $zext.i8.i32(out_$i1111);
    goto corral_source_split_6811;

  corral_source_split_6809:
    assume {:verifier.code 0} true;
    out_$i1111 := $load.i8($M.0, out_$p1095);
    goto corral_source_split_6810;

  $bb577:
    assume {:verifier.code 0} true;
    out_$p1110 := $add.ref(out_$p1095, $mul.ref(1, 1));
    goto corral_source_split_6809;

  $bb579:
    assume {:verifier.code 0} true;
    assume out_$i1104 == 1;
    goto $bb577;

  $bb576:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb577;

  $bb575:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb576, $bb578;

  corral_source_split_6807:
    assume {:verifier.code 0} true;
    goto $bb575;

  $bb573:
    assume out_$i1103 == 1;
    goto corral_source_split_6807;

  corral_source_split_6805:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb573, $bb574;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    out_$i1103 := $sgt.i32(out_$i1088, 0);
    goto corral_source_split_6805;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    out_$i1102 := $sub.i32(out_$i1088, 1);
    goto corral_source_split_6804;

  $bb572:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6803;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    out_$p1093 := $add.ref(out_$p1080, $mul.ref(out_$i1092, 1));
    assume {:verifier.code 0} true;
    out_$p1094, out_$p1095 := out_$p1093, out_$p1081;
    goto $bb572;

  corral_source_split_6794:
    assume {:verifier.code 0} true;
    out_$p1094, out_$p1095 := out_$p1101, out_$p1096;
    goto $bb572;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    out_$p1101 := $add.ref(out_$p1080, $mul.ref(out_$i1100, 1));
    goto corral_source_split_6794;

  corral_source_split_6792:
    assume {:verifier.code 0} true;
    out_$i1100 := $sext.i32.i64(out_$i1099);
    goto corral_source_split_6793;

  corral_source_split_6791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1137} out_$i1099 := sprintf.ref.ref.i32(out_$p1080, .str.4, out_$i1098);
    goto corral_source_split_6792;

  corral_source_split_6790:
    assume {:verifier.code 0} true;
    out_$i1098 := $zext.i8.i32(out_$i1097);
    goto corral_source_split_6791;

  corral_source_split_6789:
    assume {:verifier.code 0} true;
    out_$i1097 := $load.i8($M.0, out_$p1081);
    goto corral_source_split_6790;

  $bb568:
    assume {:verifier.code 0} true;
    out_$p1096 := $add.ref(out_$p1081, $mul.ref(1, 1));
    goto corral_source_split_6789;

  $bb570:
    assume {:verifier.code 0} true;
    assume out_$i1090 == 1;
    goto $bb568;

  $bb567:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb568;

  $bb566:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb567, $bb569;

  corral_source_split_6787:
    assume {:verifier.code 0} true;
    goto $bb566;

  $bb564:
    assume out_$i1089 == 1;
    goto corral_source_split_6787;

  corral_source_split_6785:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb564, $bb565;

  corral_source_split_6784:
    assume {:verifier.code 0} true;
    out_$i1089 := $sgt.i32(out_$i1074, 0);
    goto corral_source_split_6785;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    out_$i1088 := $sub.i32(out_$i1074, 1);
    goto corral_source_split_6784;

  $bb563:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6783;

  corral_source_split_6781:
    assume {:verifier.code 0} true;
    out_$p1079 := $add.ref(out_$p1066, $mul.ref(out_$i1078, 1));
    assume {:verifier.code 0} true;
    out_$p1080, out_$p1081 := out_$p1079, out_$p1067;
    goto $bb563;

  corral_source_split_6774:
    assume {:verifier.code 0} true;
    out_$p1080, out_$p1081 := out_$p1087, out_$p1082;
    goto $bb563;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    out_$p1087 := $add.ref(out_$p1066, $mul.ref(out_$i1086, 1));
    goto corral_source_split_6774;

  corral_source_split_6772:
    assume {:verifier.code 0} true;
    out_$i1086 := $sext.i32.i64(out_$i1085);
    goto corral_source_split_6773;

  corral_source_split_6771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1135} out_$i1085 := sprintf.ref.ref.i32(out_$p1066, .str.4, out_$i1084);
    goto corral_source_split_6772;

  corral_source_split_6770:
    assume {:verifier.code 0} true;
    out_$i1084 := $zext.i8.i32(out_$i1083);
    goto corral_source_split_6771;

  corral_source_split_6769:
    assume {:verifier.code 0} true;
    out_$i1083 := $load.i8($M.0, out_$p1067);
    goto corral_source_split_6770;

  $bb559:
    assume {:verifier.code 0} true;
    out_$p1082 := $add.ref(out_$p1067, $mul.ref(1, 1));
    goto corral_source_split_6769;

  $bb561:
    assume {:verifier.code 0} true;
    assume out_$i1076 == 1;
    goto $bb559;

  $bb558:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb559;

  $bb557:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb558, $bb560;

  corral_source_split_6767:
    assume {:verifier.code 0} true;
    goto $bb557;

  $bb555:
    assume out_$i1075 == 1;
    goto corral_source_split_6767;

  corral_source_split_6765:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb555, $bb556;

  corral_source_split_6764:
    assume {:verifier.code 0} true;
    out_$i1075 := $sgt.i32(out_$i1060, 0);
    goto corral_source_split_6765;

  corral_source_split_6763:
    assume {:verifier.code 0} true;
    out_$i1074 := $sub.i32(out_$i1060, 1);
    goto corral_source_split_6764;

  $bb554:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6763;

  corral_source_split_6761:
    assume {:verifier.code 0} true;
    out_$p1065 := $add.ref(out_$p1052, $mul.ref(out_$i1064, 1));
    assume {:verifier.code 0} true;
    out_$p1066, out_$p1067 := out_$p1065, out_$p1053;
    goto $bb554;

  corral_source_split_6754:
    assume {:verifier.code 0} true;
    out_$p1066, out_$p1067 := out_$p1073, out_$p1068;
    goto $bb554;

  corral_source_split_6753:
    assume {:verifier.code 0} true;
    out_$p1073 := $add.ref(out_$p1052, $mul.ref(out_$i1072, 1));
    goto corral_source_split_6754;

  corral_source_split_6752:
    assume {:verifier.code 0} true;
    out_$i1072 := $sext.i32.i64(out_$i1071);
    goto corral_source_split_6753;

  corral_source_split_6751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1133} out_$i1071 := sprintf.ref.ref.i32(out_$p1052, .str.4, out_$i1070);
    goto corral_source_split_6752;

  corral_source_split_6750:
    assume {:verifier.code 0} true;
    out_$i1070 := $zext.i8.i32(out_$i1069);
    goto corral_source_split_6751;

  corral_source_split_6749:
    assume {:verifier.code 0} true;
    out_$i1069 := $load.i8($M.0, out_$p1053);
    goto corral_source_split_6750;

  $bb550:
    assume {:verifier.code 0} true;
    out_$p1068 := $add.ref(out_$p1053, $mul.ref(1, 1));
    goto corral_source_split_6749;

  $bb552:
    assume {:verifier.code 0} true;
    assume out_$i1062 == 1;
    goto $bb550;

  $bb549:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb550;

  $bb548:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb549, $bb551;

  corral_source_split_6747:
    assume {:verifier.code 0} true;
    goto $bb548;

  $bb546:
    assume out_$i1061 == 1;
    goto corral_source_split_6747;

  corral_source_split_6745:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb546, $bb547;

  corral_source_split_6744:
    assume {:verifier.code 0} true;
    out_$i1061 := $sgt.i32(out_$i1046, 0);
    goto corral_source_split_6745;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    out_$i1060 := $sub.i32(out_$i1046, 1);
    goto corral_source_split_6744;

  $bb545:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6743;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    out_$p1051 := $add.ref(out_$p1038, $mul.ref(out_$i1050, 1));
    assume {:verifier.code 0} true;
    out_$p1052, out_$p1053 := out_$p1051, out_$p1039;
    goto $bb545;

  corral_source_split_6734:
    assume {:verifier.code 0} true;
    out_$p1052, out_$p1053 := out_$p1059, out_$p1054;
    goto $bb545;

  corral_source_split_6733:
    assume {:verifier.code 0} true;
    out_$p1059 := $add.ref(out_$p1038, $mul.ref(out_$i1058, 1));
    goto corral_source_split_6734;

  corral_source_split_6732:
    assume {:verifier.code 0} true;
    out_$i1058 := $sext.i32.i64(out_$i1057);
    goto corral_source_split_6733;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1131} out_$i1057 := sprintf.ref.ref.i32(out_$p1038, .str.4, out_$i1056);
    goto corral_source_split_6732;

  corral_source_split_6730:
    assume {:verifier.code 0} true;
    out_$i1056 := $zext.i8.i32(out_$i1055);
    goto corral_source_split_6731;

  corral_source_split_6729:
    assume {:verifier.code 0} true;
    out_$i1055 := $load.i8($M.0, out_$p1039);
    goto corral_source_split_6730;

  $bb541:
    assume {:verifier.code 0} true;
    out_$p1054 := $add.ref(out_$p1039, $mul.ref(1, 1));
    goto corral_source_split_6729;

  $bb543:
    assume {:verifier.code 0} true;
    assume out_$i1048 == 1;
    goto $bb541;

  $bb540:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb541;

  $bb539:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb540, $bb542;

  corral_source_split_6727:
    assume {:verifier.code 0} true;
    goto $bb539;

  $bb537:
    assume out_$i1047 == 1;
    goto corral_source_split_6727;

  corral_source_split_6725:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb537, $bb538;

  corral_source_split_6724:
    assume {:verifier.code 0} true;
    out_$i1047 := $sgt.i32(out_$i1032, 0);
    goto corral_source_split_6725;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    out_$i1046 := $sub.i32(out_$i1032, 1);
    goto corral_source_split_6724;

  $bb536:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6723;

  corral_source_split_6721:
    assume {:verifier.code 0} true;
    out_$p1037 := $add.ref(out_$p1024, $mul.ref(out_$i1036, 1));
    assume {:verifier.code 0} true;
    out_$p1038, out_$p1039 := out_$p1037, out_$p1025;
    goto $bb536;

  corral_source_split_6714:
    assume {:verifier.code 0} true;
    out_$p1038, out_$p1039 := out_$p1045, out_$p1040;
    goto $bb536;

  corral_source_split_6713:
    assume {:verifier.code 0} true;
    out_$p1045 := $add.ref(out_$p1024, $mul.ref(out_$i1044, 1));
    goto corral_source_split_6714;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    out_$i1044 := $sext.i32.i64(out_$i1043);
    goto corral_source_split_6713;

  corral_source_split_6711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1129} out_$i1043 := sprintf.ref.ref.i32(out_$p1024, .str.4, out_$i1042);
    goto corral_source_split_6712;

  corral_source_split_6710:
    assume {:verifier.code 0} true;
    out_$i1042 := $zext.i8.i32(out_$i1041);
    goto corral_source_split_6711;

  corral_source_split_6709:
    assume {:verifier.code 0} true;
    out_$i1041 := $load.i8($M.0, out_$p1025);
    goto corral_source_split_6710;

  $bb532:
    assume {:verifier.code 0} true;
    out_$p1040 := $add.ref(out_$p1025, $mul.ref(1, 1));
    goto corral_source_split_6709;

  $bb534:
    assume {:verifier.code 0} true;
    assume out_$i1034 == 1;
    goto $bb532;

  $bb531:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb532;

  $bb530:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb531, $bb533;

  corral_source_split_6707:
    assume {:verifier.code 0} true;
    goto $bb530;

  $bb528:
    assume out_$i1033 == 1;
    goto corral_source_split_6707;

  corral_source_split_6705:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb528, $bb529;

  corral_source_split_6704:
    assume {:verifier.code 0} true;
    out_$i1033 := $sgt.i32(out_$i1018, 0);
    goto corral_source_split_6705;

  corral_source_split_6703:
    assume {:verifier.code 0} true;
    out_$i1032 := $sub.i32(out_$i1018, 1);
    goto corral_source_split_6704;

  $bb527:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6703;

  corral_source_split_6701:
    assume {:verifier.code 0} true;
    out_$p1023 := $add.ref(out_$p1010, $mul.ref(out_$i1022, 1));
    assume {:verifier.code 0} true;
    out_$p1024, out_$p1025 := out_$p1023, out_$p1011;
    goto $bb527;

  corral_source_split_6694:
    assume {:verifier.code 0} true;
    out_$p1024, out_$p1025 := out_$p1031, out_$p1026;
    goto $bb527;

  corral_source_split_6693:
    assume {:verifier.code 0} true;
    out_$p1031 := $add.ref(out_$p1010, $mul.ref(out_$i1030, 1));
    goto corral_source_split_6694;

  corral_source_split_6692:
    assume {:verifier.code 0} true;
    out_$i1030 := $sext.i32.i64(out_$i1029);
    goto corral_source_split_6693;

  corral_source_split_6691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1127} out_$i1029 := sprintf.ref.ref.i32(out_$p1010, .str.4, out_$i1028);
    goto corral_source_split_6692;

  corral_source_split_6690:
    assume {:verifier.code 0} true;
    out_$i1028 := $zext.i8.i32(out_$i1027);
    goto corral_source_split_6691;

  corral_source_split_6689:
    assume {:verifier.code 0} true;
    out_$i1027 := $load.i8($M.0, out_$p1011);
    goto corral_source_split_6690;

  $bb523:
    assume {:verifier.code 0} true;
    out_$p1026 := $add.ref(out_$p1011, $mul.ref(1, 1));
    goto corral_source_split_6689;

  $bb525:
    assume {:verifier.code 0} true;
    assume out_$i1020 == 1;
    goto $bb523;

  $bb522:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb523;

  $bb521:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb522, $bb524;

  corral_source_split_6687:
    assume {:verifier.code 0} true;
    goto $bb521;

  $bb519:
    assume out_$i1019 == 1;
    goto corral_source_split_6687;

  corral_source_split_6685:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb519, $bb520;

  corral_source_split_6684:
    assume {:verifier.code 0} true;
    out_$i1019 := $sgt.i32(out_$i1004, 0);
    goto corral_source_split_6685;

  corral_source_split_6683:
    assume {:verifier.code 0} true;
    out_$i1018 := $sub.i32(out_$i1004, 1);
    goto corral_source_split_6684;

  $bb518:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6683;

  corral_source_split_6681:
    assume {:verifier.code 0} true;
    out_$p1009 := $add.ref(out_$p996, $mul.ref(out_$i1008, 1));
    assume {:verifier.code 0} true;
    out_$p1010, out_$p1011 := out_$p1009, out_$p997;
    goto $bb518;

  corral_source_split_6674:
    assume {:verifier.code 0} true;
    out_$p1010, out_$p1011 := out_$p1017, out_$p1012;
    goto $bb518;

  corral_source_split_6673:
    assume {:verifier.code 0} true;
    out_$p1017 := $add.ref(out_$p996, $mul.ref(out_$i1016, 1));
    goto corral_source_split_6674;

  corral_source_split_6672:
    assume {:verifier.code 0} true;
    out_$i1016 := $sext.i32.i64(out_$i1015);
    goto corral_source_split_6673;

  corral_source_split_6671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1125} out_$i1015 := sprintf.ref.ref.i32(out_$p996, .str.4, out_$i1014);
    goto corral_source_split_6672;

  corral_source_split_6670:
    assume {:verifier.code 0} true;
    out_$i1014 := $zext.i8.i32(out_$i1013);
    goto corral_source_split_6671;

  corral_source_split_6669:
    assume {:verifier.code 0} true;
    out_$i1013 := $load.i8($M.0, out_$p997);
    goto corral_source_split_6670;

  $bb514:
    assume {:verifier.code 0} true;
    out_$p1012 := $add.ref(out_$p997, $mul.ref(1, 1));
    goto corral_source_split_6669;

  $bb516:
    assume {:verifier.code 0} true;
    assume out_$i1006 == 1;
    goto $bb514;

  $bb513:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb514;

  $bb512:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb513, $bb515;

  corral_source_split_6667:
    assume {:verifier.code 0} true;
    goto $bb512;

  $bb510:
    assume out_$i1005 == 1;
    goto corral_source_split_6667;

  corral_source_split_6665:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb510, $bb511;

  corral_source_split_6664:
    assume {:verifier.code 0} true;
    out_$i1005 := $sgt.i32(out_$i990, 0);
    goto corral_source_split_6665;

  corral_source_split_6663:
    assume {:verifier.code 0} true;
    out_$i1004 := $sub.i32(out_$i990, 1);
    goto corral_source_split_6664;

  $bb509:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6663;

  corral_source_split_6661:
    assume {:verifier.code 0} true;
    out_$p995 := $add.ref(out_$p982, $mul.ref(out_$i994, 1));
    assume {:verifier.code 0} true;
    out_$p996, out_$p997 := out_$p995, out_$p983;
    goto $bb509;

  corral_source_split_6654:
    assume {:verifier.code 0} true;
    out_$p996, out_$p997 := out_$p1003, out_$p998;
    goto $bb509;

  corral_source_split_6653:
    assume {:verifier.code 0} true;
    out_$p1003 := $add.ref(out_$p982, $mul.ref(out_$i1002, 1));
    goto corral_source_split_6654;

  corral_source_split_6652:
    assume {:verifier.code 0} true;
    out_$i1002 := $sext.i32.i64(out_$i1001);
    goto corral_source_split_6653;

  corral_source_split_6651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1123} out_$i1001 := sprintf.ref.ref.i32(out_$p982, .str.4, out_$i1000);
    goto corral_source_split_6652;

  corral_source_split_6650:
    assume {:verifier.code 0} true;
    out_$i1000 := $zext.i8.i32(out_$i999);
    goto corral_source_split_6651;

  corral_source_split_6649:
    assume {:verifier.code 0} true;
    out_$i999 := $load.i8($M.0, out_$p983);
    goto corral_source_split_6650;

  $bb505:
    assume {:verifier.code 0} true;
    out_$p998 := $add.ref(out_$p983, $mul.ref(1, 1));
    goto corral_source_split_6649;

  $bb507:
    assume {:verifier.code 0} true;
    assume out_$i992 == 1;
    goto $bb505;

  $bb504:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb505;

  $bb503:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb504, $bb506;

  corral_source_split_6647:
    assume {:verifier.code 0} true;
    goto $bb503;

  $bb501:
    assume out_$i991 == 1;
    goto corral_source_split_6647;

  corral_source_split_6645:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb501, $bb502;

  corral_source_split_6644:
    assume {:verifier.code 0} true;
    out_$i991 := $sgt.i32(out_$i976, 0);
    goto corral_source_split_6645;

  corral_source_split_6643:
    assume {:verifier.code 0} true;
    out_$i990 := $sub.i32(out_$i976, 1);
    goto corral_source_split_6644;

  $bb500:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6643;

  corral_source_split_6641:
    assume {:verifier.code 0} true;
    out_$p981 := $add.ref(out_$p968, $mul.ref(out_$i980, 1));
    assume {:verifier.code 0} true;
    out_$p982, out_$p983 := out_$p981, out_$p969;
    goto $bb500;

  corral_source_split_6634:
    assume {:verifier.code 0} true;
    out_$p982, out_$p983 := out_$p989, out_$p984;
    goto $bb500;

  corral_source_split_6633:
    assume {:verifier.code 0} true;
    out_$p989 := $add.ref(out_$p968, $mul.ref(out_$i988, 1));
    goto corral_source_split_6634;

  corral_source_split_6632:
    assume {:verifier.code 0} true;
    out_$i988 := $sext.i32.i64(out_$i987);
    goto corral_source_split_6633;

  corral_source_split_6631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1121} out_$i987 := sprintf.ref.ref.i32(out_$p968, .str.4, out_$i986);
    goto corral_source_split_6632;

  corral_source_split_6630:
    assume {:verifier.code 0} true;
    out_$i986 := $zext.i8.i32(out_$i985);
    goto corral_source_split_6631;

  corral_source_split_6629:
    assume {:verifier.code 0} true;
    out_$i985 := $load.i8($M.0, out_$p969);
    goto corral_source_split_6630;

  $bb496:
    assume {:verifier.code 0} true;
    out_$p984 := $add.ref(out_$p969, $mul.ref(1, 1));
    goto corral_source_split_6629;

  $bb498:
    assume {:verifier.code 0} true;
    assume out_$i978 == 1;
    goto $bb496;

  $bb495:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb496;

  $bb494:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb495, $bb497;

  corral_source_split_6627:
    assume {:verifier.code 0} true;
    goto $bb494;

  $bb492:
    assume out_$i977 == 1;
    goto corral_source_split_6627;

  corral_source_split_6625:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb492, $bb493;

  corral_source_split_6624:
    assume {:verifier.code 0} true;
    out_$i977 := $sgt.i32(out_$i962, 0);
    goto corral_source_split_6625;

  corral_source_split_6623:
    assume {:verifier.code 0} true;
    out_$i976 := $sub.i32(out_$i962, 1);
    goto corral_source_split_6624;

  $bb491:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6623;

  corral_source_split_6621:
    assume {:verifier.code 0} true;
    out_$p967 := $add.ref(out_$p954, $mul.ref(out_$i966, 1));
    assume {:verifier.code 0} true;
    out_$p968, out_$p969 := out_$p967, out_$p955;
    goto $bb491;

  corral_source_split_6614:
    assume {:verifier.code 0} true;
    out_$p968, out_$p969 := out_$p975, out_$p970;
    goto $bb491;

  corral_source_split_6613:
    assume {:verifier.code 0} true;
    out_$p975 := $add.ref(out_$p954, $mul.ref(out_$i974, 1));
    goto corral_source_split_6614;

  corral_source_split_6612:
    assume {:verifier.code 0} true;
    out_$i974 := $sext.i32.i64(out_$i973);
    goto corral_source_split_6613;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1119} out_$i973 := sprintf.ref.ref.i32(out_$p954, .str.4, out_$i972);
    goto corral_source_split_6612;

  corral_source_split_6610:
    assume {:verifier.code 0} true;
    out_$i972 := $zext.i8.i32(out_$i971);
    goto corral_source_split_6611;

  corral_source_split_6609:
    assume {:verifier.code 0} true;
    out_$i971 := $load.i8($M.0, out_$p955);
    goto corral_source_split_6610;

  $bb487:
    assume {:verifier.code 0} true;
    out_$p970 := $add.ref(out_$p955, $mul.ref(1, 1));
    goto corral_source_split_6609;

  $bb489:
    assume {:verifier.code 0} true;
    assume out_$i964 == 1;
    goto $bb487;

  $bb486:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb487;

  $bb485:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb486, $bb488;

  corral_source_split_6607:
    assume {:verifier.code 0} true;
    goto $bb485;

  $bb483:
    assume out_$i963 == 1;
    goto corral_source_split_6607;

  corral_source_split_6605:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb483, $bb484;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    out_$i963 := $sgt.i32(out_$i948, 0);
    goto corral_source_split_6605;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    out_$i962 := $sub.i32(out_$i948, 1);
    goto corral_source_split_6604;

  $bb482:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6603;

  corral_source_split_6601:
    assume {:verifier.code 0} true;
    out_$p953 := $add.ref(out_$p940, $mul.ref(out_$i952, 1));
    assume {:verifier.code 0} true;
    out_$p954, out_$p955 := out_$p953, out_$p941;
    goto $bb482;

  corral_source_split_6594:
    assume {:verifier.code 0} true;
    out_$p954, out_$p955 := out_$p961, out_$p956;
    goto $bb482;

  corral_source_split_6593:
    assume {:verifier.code 0} true;
    out_$p961 := $add.ref(out_$p940, $mul.ref(out_$i960, 1));
    goto corral_source_split_6594;

  corral_source_split_6592:
    assume {:verifier.code 0} true;
    out_$i960 := $sext.i32.i64(out_$i959);
    goto corral_source_split_6593;

  corral_source_split_6591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1117} out_$i959 := sprintf.ref.ref.i32(out_$p940, .str.4, out_$i958);
    goto corral_source_split_6592;

  corral_source_split_6590:
    assume {:verifier.code 0} true;
    out_$i958 := $zext.i8.i32(out_$i957);
    goto corral_source_split_6591;

  corral_source_split_6589:
    assume {:verifier.code 0} true;
    out_$i957 := $load.i8($M.0, out_$p941);
    goto corral_source_split_6590;

  $bb478:
    assume {:verifier.code 0} true;
    out_$p956 := $add.ref(out_$p941, $mul.ref(1, 1));
    goto corral_source_split_6589;

  $bb480:
    assume {:verifier.code 0} true;
    assume out_$i950 == 1;
    goto $bb478;

  $bb477:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb478;

  $bb476:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb477, $bb479;

  corral_source_split_6587:
    assume {:verifier.code 0} true;
    goto $bb476;

  $bb474:
    assume out_$i949 == 1;
    goto corral_source_split_6587;

  corral_source_split_6585:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb474, $bb475;

  corral_source_split_6584:
    assume {:verifier.code 0} true;
    out_$i949 := $sgt.i32(out_$i934, 0);
    goto corral_source_split_6585;

  corral_source_split_6583:
    assume {:verifier.code 0} true;
    out_$i948 := $sub.i32(out_$i934, 1);
    goto corral_source_split_6584;

  $bb473:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6583;

  corral_source_split_6581:
    assume {:verifier.code 0} true;
    out_$p939 := $add.ref(out_$p926, $mul.ref(out_$i938, 1));
    assume {:verifier.code 0} true;
    out_$p940, out_$p941 := out_$p939, out_$p927;
    goto $bb473;

  corral_source_split_6574:
    assume {:verifier.code 0} true;
    out_$p940, out_$p941 := out_$p947, out_$p942;
    goto $bb473;

  corral_source_split_6573:
    assume {:verifier.code 0} true;
    out_$p947 := $add.ref(out_$p926, $mul.ref(out_$i946, 1));
    goto corral_source_split_6574;

  corral_source_split_6572:
    assume {:verifier.code 0} true;
    out_$i946 := $sext.i32.i64(out_$i945);
    goto corral_source_split_6573;

  corral_source_split_6571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1115} out_$i945 := sprintf.ref.ref.i32(out_$p926, .str.4, out_$i944);
    goto corral_source_split_6572;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    out_$i944 := $zext.i8.i32(out_$i943);
    goto corral_source_split_6571;

  corral_source_split_6569:
    assume {:verifier.code 0} true;
    out_$i943 := $load.i8($M.0, out_$p927);
    goto corral_source_split_6570;

  $bb469:
    assume {:verifier.code 0} true;
    out_$p942 := $add.ref(out_$p927, $mul.ref(1, 1));
    goto corral_source_split_6569;

  $bb471:
    assume {:verifier.code 0} true;
    assume out_$i936 == 1;
    goto $bb469;

  $bb468:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb469;

  $bb467:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb468, $bb470;

  corral_source_split_6567:
    assume {:verifier.code 0} true;
    goto $bb467;

  $bb465:
    assume out_$i935 == 1;
    goto corral_source_split_6567;

  corral_source_split_6565:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb465, $bb466;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    out_$i935 := $sgt.i32(out_$i920, 0);
    goto corral_source_split_6565;

  corral_source_split_6563:
    assume {:verifier.code 0} true;
    out_$i934 := $sub.i32(out_$i920, 1);
    goto corral_source_split_6564;

  $bb464:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6563;

  corral_source_split_6561:
    assume {:verifier.code 0} true;
    out_$p925 := $add.ref(out_$p912, $mul.ref(out_$i924, 1));
    assume {:verifier.code 0} true;
    out_$p926, out_$p927 := out_$p925, out_$p913;
    goto $bb464;

  corral_source_split_6554:
    assume {:verifier.code 0} true;
    out_$p926, out_$p927 := out_$p933, out_$p928;
    goto $bb464;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    out_$p933 := $add.ref(out_$p912, $mul.ref(out_$i932, 1));
    goto corral_source_split_6554;

  corral_source_split_6552:
    assume {:verifier.code 0} true;
    out_$i932 := $sext.i32.i64(out_$i931);
    goto corral_source_split_6553;

  corral_source_split_6551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1113} out_$i931 := sprintf.ref.ref.i32(out_$p912, .str.4, out_$i930);
    goto corral_source_split_6552;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    out_$i930 := $zext.i8.i32(out_$i929);
    goto corral_source_split_6551;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    out_$i929 := $load.i8($M.0, out_$p913);
    goto corral_source_split_6550;

  $bb460:
    assume {:verifier.code 0} true;
    out_$p928 := $add.ref(out_$p913, $mul.ref(1, 1));
    goto corral_source_split_6549;

  $bb462:
    assume {:verifier.code 0} true;
    assume out_$i922 == 1;
    goto $bb460;

  $bb459:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb460;

  $bb458:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb459, $bb461;

  corral_source_split_6547:
    assume {:verifier.code 0} true;
    goto $bb458;

  $bb456:
    assume out_$i921 == 1;
    goto corral_source_split_6547;

  corral_source_split_6545:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb456, $bb457;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    out_$i921 := $sgt.i32(out_$i906, 0);
    goto corral_source_split_6545;

  corral_source_split_6543:
    assume {:verifier.code 0} true;
    out_$i920 := $sub.i32(out_$i906, 1);
    goto corral_source_split_6544;

  $bb455:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6543;

  corral_source_split_6541:
    assume {:verifier.code 0} true;
    out_$p911 := $add.ref(out_$p898, $mul.ref(out_$i910, 1));
    assume {:verifier.code 0} true;
    out_$p912, out_$p913 := out_$p911, out_$p899;
    goto $bb455;

  corral_source_split_6534:
    assume {:verifier.code 0} true;
    out_$p912, out_$p913 := out_$p919, out_$p914;
    goto $bb455;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    out_$p919 := $add.ref(out_$p898, $mul.ref(out_$i918, 1));
    goto corral_source_split_6534;

  corral_source_split_6532:
    assume {:verifier.code 0} true;
    out_$i918 := $sext.i32.i64(out_$i917);
    goto corral_source_split_6533;

  corral_source_split_6531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1111} out_$i917 := sprintf.ref.ref.i32(out_$p898, .str.4, out_$i916);
    goto corral_source_split_6532;

  corral_source_split_6530:
    assume {:verifier.code 0} true;
    out_$i916 := $zext.i8.i32(out_$i915);
    goto corral_source_split_6531;

  corral_source_split_6529:
    assume {:verifier.code 0} true;
    out_$i915 := $load.i8($M.0, out_$p899);
    goto corral_source_split_6530;

  $bb451:
    assume {:verifier.code 0} true;
    out_$p914 := $add.ref(out_$p899, $mul.ref(1, 1));
    goto corral_source_split_6529;

  $bb453:
    assume {:verifier.code 0} true;
    assume out_$i908 == 1;
    goto $bb451;

  $bb450:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb451;

  $bb449:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb450, $bb452;

  corral_source_split_6527:
    assume {:verifier.code 0} true;
    goto $bb449;

  $bb447:
    assume out_$i907 == 1;
    goto corral_source_split_6527;

  corral_source_split_6525:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb447, $bb448;

  corral_source_split_6524:
    assume {:verifier.code 0} true;
    out_$i907 := $sgt.i32(out_$i892, 0);
    goto corral_source_split_6525;

  corral_source_split_6523:
    assume {:verifier.code 0} true;
    out_$i906 := $sub.i32(out_$i892, 1);
    goto corral_source_split_6524;

  $bb446:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6523;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    out_$p897 := $add.ref(out_$p884, $mul.ref(out_$i896, 1));
    assume {:verifier.code 0} true;
    out_$p898, out_$p899 := out_$p897, out_$p885;
    goto $bb446;

  corral_source_split_6514:
    assume {:verifier.code 0} true;
    out_$p898, out_$p899 := out_$p905, out_$p900;
    goto $bb446;

  corral_source_split_6513:
    assume {:verifier.code 0} true;
    out_$p905 := $add.ref(out_$p884, $mul.ref(out_$i904, 1));
    goto corral_source_split_6514;

  corral_source_split_6512:
    assume {:verifier.code 0} true;
    out_$i904 := $sext.i32.i64(out_$i903);
    goto corral_source_split_6513;

  corral_source_split_6511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1109} out_$i903 := sprintf.ref.ref.i32(out_$p884, .str.4, out_$i902);
    goto corral_source_split_6512;

  corral_source_split_6510:
    assume {:verifier.code 0} true;
    out_$i902 := $zext.i8.i32(out_$i901);
    goto corral_source_split_6511;

  corral_source_split_6509:
    assume {:verifier.code 0} true;
    out_$i901 := $load.i8($M.0, out_$p885);
    goto corral_source_split_6510;

  $bb442:
    assume {:verifier.code 0} true;
    out_$p900 := $add.ref(out_$p885, $mul.ref(1, 1));
    goto corral_source_split_6509;

  $bb444:
    assume {:verifier.code 0} true;
    assume out_$i894 == 1;
    goto $bb442;

  $bb441:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb442;

  $bb440:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb441, $bb443;

  corral_source_split_6507:
    assume {:verifier.code 0} true;
    goto $bb440;

  $bb438:
    assume out_$i893 == 1;
    goto corral_source_split_6507;

  corral_source_split_6505:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb438, $bb439;

  corral_source_split_6504:
    assume {:verifier.code 0} true;
    out_$i893 := $sgt.i32(out_$i878, 0);
    goto corral_source_split_6505;

  corral_source_split_6503:
    assume {:verifier.code 0} true;
    out_$i892 := $sub.i32(out_$i878, 1);
    goto corral_source_split_6504;

  $bb437:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6503;

  corral_source_split_6501:
    assume {:verifier.code 0} true;
    out_$p883 := $add.ref(out_$p870, $mul.ref(out_$i882, 1));
    assume {:verifier.code 0} true;
    out_$p884, out_$p885 := out_$p883, out_$p871;
    goto $bb437;

  corral_source_split_6494:
    assume {:verifier.code 0} true;
    out_$p884, out_$p885 := out_$p891, out_$p886;
    goto $bb437;

  corral_source_split_6493:
    assume {:verifier.code 0} true;
    out_$p891 := $add.ref(out_$p870, $mul.ref(out_$i890, 1));
    goto corral_source_split_6494;

  corral_source_split_6492:
    assume {:verifier.code 0} true;
    out_$i890 := $sext.i32.i64(out_$i889);
    goto corral_source_split_6493;

  corral_source_split_6491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1107} out_$i889 := sprintf.ref.ref.i32(out_$p870, .str.4, out_$i888);
    goto corral_source_split_6492;

  corral_source_split_6490:
    assume {:verifier.code 0} true;
    out_$i888 := $zext.i8.i32(out_$i887);
    goto corral_source_split_6491;

  corral_source_split_6489:
    assume {:verifier.code 0} true;
    out_$i887 := $load.i8($M.0, out_$p871);
    goto corral_source_split_6490;

  $bb433:
    assume {:verifier.code 0} true;
    out_$p886 := $add.ref(out_$p871, $mul.ref(1, 1));
    goto corral_source_split_6489;

  $bb435:
    assume {:verifier.code 0} true;
    assume out_$i880 == 1;
    goto $bb433;

  $bb432:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb433;

  $bb431:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb432, $bb434;

  corral_source_split_6487:
    assume {:verifier.code 0} true;
    goto $bb431;

  $bb429:
    assume out_$i879 == 1;
    goto corral_source_split_6487;

  corral_source_split_6485:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb429, $bb430;

  corral_source_split_6484:
    assume {:verifier.code 0} true;
    out_$i879 := $sgt.i32(out_$i864, 0);
    goto corral_source_split_6485;

  corral_source_split_6483:
    assume {:verifier.code 0} true;
    out_$i878 := $sub.i32(out_$i864, 1);
    goto corral_source_split_6484;

  $bb428:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6483;

  corral_source_split_6481:
    assume {:verifier.code 0} true;
    out_$p869 := $add.ref(out_$p856, $mul.ref(out_$i868, 1));
    assume {:verifier.code 0} true;
    out_$p870, out_$p871 := out_$p869, out_$p857;
    goto $bb428;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    out_$p870, out_$p871 := out_$p877, out_$p872;
    goto $bb428;

  corral_source_split_6473:
    assume {:verifier.code 0} true;
    out_$p877 := $add.ref(out_$p856, $mul.ref(out_$i876, 1));
    goto corral_source_split_6474;

  corral_source_split_6472:
    assume {:verifier.code 0} true;
    out_$i876 := $sext.i32.i64(out_$i875);
    goto corral_source_split_6473;

  corral_source_split_6471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1105} out_$i875 := sprintf.ref.ref.i32(out_$p856, .str.4, out_$i874);
    goto corral_source_split_6472;

  corral_source_split_6470:
    assume {:verifier.code 0} true;
    out_$i874 := $zext.i8.i32(out_$i873);
    goto corral_source_split_6471;

  corral_source_split_6469:
    assume {:verifier.code 0} true;
    out_$i873 := $load.i8($M.0, out_$p857);
    goto corral_source_split_6470;

  $bb424:
    assume {:verifier.code 0} true;
    out_$p872 := $add.ref(out_$p857, $mul.ref(1, 1));
    goto corral_source_split_6469;

  $bb426:
    assume {:verifier.code 0} true;
    assume out_$i866 == 1;
    goto $bb424;

  $bb423:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb424;

  $bb422:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb423, $bb425;

  corral_source_split_6467:
    assume {:verifier.code 0} true;
    goto $bb422;

  $bb420:
    assume out_$i865 == 1;
    goto corral_source_split_6467;

  corral_source_split_6465:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb420, $bb421;

  corral_source_split_6464:
    assume {:verifier.code 0} true;
    out_$i865 := $sgt.i32(out_$i850, 0);
    goto corral_source_split_6465;

  corral_source_split_6463:
    assume {:verifier.code 0} true;
    out_$i864 := $sub.i32(out_$i850, 1);
    goto corral_source_split_6464;

  $bb419:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6463;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    out_$p855 := $add.ref(out_$p842, $mul.ref(out_$i854, 1));
    assume {:verifier.code 0} true;
    out_$p856, out_$p857 := out_$p855, out_$p843;
    goto $bb419;

  corral_source_split_6454:
    assume {:verifier.code 0} true;
    out_$p856, out_$p857 := out_$p863, out_$p858;
    goto $bb419;

  corral_source_split_6453:
    assume {:verifier.code 0} true;
    out_$p863 := $add.ref(out_$p842, $mul.ref(out_$i862, 1));
    goto corral_source_split_6454;

  corral_source_split_6452:
    assume {:verifier.code 0} true;
    out_$i862 := $sext.i32.i64(out_$i861);
    goto corral_source_split_6453;

  corral_source_split_6451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1103} out_$i861 := sprintf.ref.ref.i32(out_$p842, .str.4, out_$i860);
    goto corral_source_split_6452;

  corral_source_split_6450:
    assume {:verifier.code 0} true;
    out_$i860 := $zext.i8.i32(out_$i859);
    goto corral_source_split_6451;

  corral_source_split_6449:
    assume {:verifier.code 0} true;
    out_$i859 := $load.i8($M.0, out_$p843);
    goto corral_source_split_6450;

  $bb415:
    assume {:verifier.code 0} true;
    out_$p858 := $add.ref(out_$p843, $mul.ref(1, 1));
    goto corral_source_split_6449;

  $bb417:
    assume {:verifier.code 0} true;
    assume out_$i852 == 1;
    goto $bb415;

  $bb414:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb415;

  $bb413:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb414, $bb416;

  corral_source_split_6447:
    assume {:verifier.code 0} true;
    goto $bb413;

  $bb411:
    assume out_$i851 == 1;
    goto corral_source_split_6447;

  corral_source_split_6445:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb411, $bb412;

  corral_source_split_6444:
    assume {:verifier.code 0} true;
    out_$i851 := $sgt.i32(out_$i836, 0);
    goto corral_source_split_6445;

  corral_source_split_6443:
    assume {:verifier.code 0} true;
    out_$i850 := $sub.i32(out_$i836, 1);
    goto corral_source_split_6444;

  $bb410:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6443;

  corral_source_split_6441:
    assume {:verifier.code 0} true;
    out_$p841 := $add.ref(out_$p828, $mul.ref(out_$i840, 1));
    assume {:verifier.code 0} true;
    out_$p842, out_$p843 := out_$p841, out_$p829;
    goto $bb410;

  corral_source_split_6434:
    assume {:verifier.code 0} true;
    out_$p842, out_$p843 := out_$p849, out_$p844;
    goto $bb410;

  corral_source_split_6433:
    assume {:verifier.code 0} true;
    out_$p849 := $add.ref(out_$p828, $mul.ref(out_$i848, 1));
    goto corral_source_split_6434;

  corral_source_split_6432:
    assume {:verifier.code 0} true;
    out_$i848 := $sext.i32.i64(out_$i847);
    goto corral_source_split_6433;

  corral_source_split_6431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1101} out_$i847 := sprintf.ref.ref.i32(out_$p828, .str.4, out_$i846);
    goto corral_source_split_6432;

  corral_source_split_6430:
    assume {:verifier.code 0} true;
    out_$i846 := $zext.i8.i32(out_$i845);
    goto corral_source_split_6431;

  corral_source_split_6429:
    assume {:verifier.code 0} true;
    out_$i845 := $load.i8($M.0, out_$p829);
    goto corral_source_split_6430;

  $bb406:
    assume {:verifier.code 0} true;
    out_$p844 := $add.ref(out_$p829, $mul.ref(1, 1));
    goto corral_source_split_6429;

  $bb408:
    assume {:verifier.code 0} true;
    assume out_$i838 == 1;
    goto $bb406;

  $bb405:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb406;

  $bb404:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb405, $bb407;

  corral_source_split_6427:
    assume {:verifier.code 0} true;
    goto $bb404;

  $bb402:
    assume out_$i837 == 1;
    goto corral_source_split_6427;

  corral_source_split_6425:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb402, $bb403;

  corral_source_split_6424:
    assume {:verifier.code 0} true;
    out_$i837 := $sgt.i32(out_$i822, 0);
    goto corral_source_split_6425;

  corral_source_split_6423:
    assume {:verifier.code 0} true;
    out_$i836 := $sub.i32(out_$i822, 1);
    goto corral_source_split_6424;

  $bb401:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6423;

  corral_source_split_6421:
    assume {:verifier.code 0} true;
    out_$p827 := $add.ref(out_$p814, $mul.ref(out_$i826, 1));
    assume {:verifier.code 0} true;
    out_$p828, out_$p829 := out_$p827, out_$p815;
    goto $bb401;

  corral_source_split_6414:
    assume {:verifier.code 0} true;
    out_$p828, out_$p829 := out_$p835, out_$p830;
    goto $bb401;

  corral_source_split_6413:
    assume {:verifier.code 0} true;
    out_$p835 := $add.ref(out_$p814, $mul.ref(out_$i834, 1));
    goto corral_source_split_6414;

  corral_source_split_6412:
    assume {:verifier.code 0} true;
    out_$i834 := $sext.i32.i64(out_$i833);
    goto corral_source_split_6413;

  corral_source_split_6411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1099} out_$i833 := sprintf.ref.ref.i32(out_$p814, .str.4, out_$i832);
    goto corral_source_split_6412;

  corral_source_split_6410:
    assume {:verifier.code 0} true;
    out_$i832 := $zext.i8.i32(out_$i831);
    goto corral_source_split_6411;

  corral_source_split_6409:
    assume {:verifier.code 0} true;
    out_$i831 := $load.i8($M.0, out_$p815);
    goto corral_source_split_6410;

  $bb397:
    assume {:verifier.code 0} true;
    out_$p830 := $add.ref(out_$p815, $mul.ref(1, 1));
    goto corral_source_split_6409;

  $bb399:
    assume {:verifier.code 0} true;
    assume out_$i824 == 1;
    goto $bb397;

  $bb396:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb397;

  $bb395:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb396, $bb398;

  corral_source_split_6407:
    assume {:verifier.code 0} true;
    goto $bb395;

  $bb393:
    assume out_$i823 == 1;
    goto corral_source_split_6407;

  corral_source_split_6405:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb393, $bb394;

  corral_source_split_6404:
    assume {:verifier.code 0} true;
    out_$i823 := $sgt.i32(out_$i808, 0);
    goto corral_source_split_6405;

  corral_source_split_6403:
    assume {:verifier.code 0} true;
    out_$i822 := $sub.i32(out_$i808, 1);
    goto corral_source_split_6404;

  $bb392:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6403;

  corral_source_split_6401:
    assume {:verifier.code 0} true;
    out_$p813 := $add.ref(out_$p800, $mul.ref(out_$i812, 1));
    assume {:verifier.code 0} true;
    out_$p814, out_$p815 := out_$p813, out_$p801;
    goto $bb392;

  corral_source_split_6394:
    assume {:verifier.code 0} true;
    out_$p814, out_$p815 := out_$p821, out_$p816;
    goto $bb392;

  corral_source_split_6393:
    assume {:verifier.code 0} true;
    out_$p821 := $add.ref(out_$p800, $mul.ref(out_$i820, 1));
    goto corral_source_split_6394;

  corral_source_split_6392:
    assume {:verifier.code 0} true;
    out_$i820 := $sext.i32.i64(out_$i819);
    goto corral_source_split_6393;

  corral_source_split_6391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1097} out_$i819 := sprintf.ref.ref.i32(out_$p800, .str.4, out_$i818);
    goto corral_source_split_6392;

  corral_source_split_6390:
    assume {:verifier.code 0} true;
    out_$i818 := $zext.i8.i32(out_$i817);
    goto corral_source_split_6391;

  corral_source_split_6389:
    assume {:verifier.code 0} true;
    out_$i817 := $load.i8($M.0, out_$p801);
    goto corral_source_split_6390;

  $bb388:
    assume {:verifier.code 0} true;
    out_$p816 := $add.ref(out_$p801, $mul.ref(1, 1));
    goto corral_source_split_6389;

  $bb390:
    assume {:verifier.code 0} true;
    assume out_$i810 == 1;
    goto $bb388;

  $bb387:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb388;

  $bb386:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb387, $bb389;

  corral_source_split_6387:
    assume {:verifier.code 0} true;
    goto $bb386;

  $bb384:
    assume out_$i809 == 1;
    goto corral_source_split_6387;

  corral_source_split_6385:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb384, $bb385;

  corral_source_split_6384:
    assume {:verifier.code 0} true;
    out_$i809 := $sgt.i32(out_$i227, 0);
    goto corral_source_split_6385;

  corral_source_split_6383:
    assume {:verifier.code 0} true;
    out_$i808 := $sub.i32(out_$i227, 1);
    goto corral_source_split_6384;

  $bb383:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6383;

  corral_source_split_6381:
    assume {:verifier.code 0} true;
    out_$p799 := $add.ref(out_$p222, $mul.ref(out_$i798, 1));
    assume {:verifier.code 0} true;
    out_$p800, out_$p801 := out_$p799, out_$p223;
    goto $bb383;

  corral_source_split_6374:
    assume {:verifier.code 0} true;
    out_$p800, out_$p801 := out_$p807, out_$p802;
    goto $bb383;

  corral_source_split_6373:
    assume {:verifier.code 0} true;
    out_$p807 := $add.ref(out_$p222, $mul.ref(out_$i806, 1));
    goto corral_source_split_6374;

  corral_source_split_6372:
    assume {:verifier.code 0} true;
    out_$i806 := $sext.i32.i64(out_$i805);
    goto corral_source_split_6373;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1095} out_$i805 := sprintf.ref.ref.i32(out_$p222, .str.4, out_$i804);
    goto corral_source_split_6372;

  corral_source_split_6370:
    assume {:verifier.code 0} true;
    out_$i804 := $zext.i8.i32(out_$i803);
    goto corral_source_split_6371;

  corral_source_split_6369:
    assume {:verifier.code 0} true;
    out_$i803 := $load.i8($M.0, out_$p223);
    goto corral_source_split_6370;

  $bb379:
    assume {:verifier.code 0} true;
    out_$p802 := $add.ref(out_$p223, $mul.ref(1, 1));
    goto corral_source_split_6369;

  $bb381:
    assume {:verifier.code 0} true;
    assume out_$i796 == 1;
    goto $bb379;

  $bb378:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb379;

  $bb377:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb378, $bb380;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    goto $bb377;

  $bb83:
    assume out_$i228 == 1;
    goto corral_source_split_5594;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    out_$i228 := $sgt.i32(out_$i214, 0);
    goto corral_source_split_5592;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    out_$i227 := $sub.i32(out_$i214, 1);
    goto corral_source_split_5591;

  $bb82:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5590;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    out_$p226 := $add.ref(out_$p208, $mul.ref(out_$i225, 1));
    assume {:verifier.code 0} true;
    out_$p222, out_$p223 := out_$p226, out_$p211;
    goto $bb82;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    out_$p222, out_$p223 := out_$p221, out_$p216;
    goto $bb82;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    out_$p221 := $add.ref(out_$p208, $mul.ref(out_$i220, 1));
    goto corral_source_split_5581;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    out_$i220 := $sext.i32.i64(out_$i219);
    goto corral_source_split_5580;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1014} out_$i219 := sprintf.ref.ref.i32(out_$p208, .str.4, out_$i218);
    call {:si_unique_call 1015} {:cexpr "tmp___14"} boogie_si_record_i32(out_$i219);
    goto corral_source_split_5579;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    out_$i218 := $zext.i8.i32(out_$i217);
    goto corral_source_split_5578;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    out_$i217 := $load.i8($M.0, out_$p211);
    goto corral_source_split_5577;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    out_$p216 := $add.ref(out_$p210, $mul.ref(out_$i215, 1));
    goto corral_source_split_5576;

  $bb78:
    out_$i215 := $add.i64(4, 1);
    goto corral_source_split_5575;

  $bb80:
    assume {:verifier.code 0} true;
    assume out_$i213 == 1;
    goto $bb78;

  $bb77:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb78;

  $bb76:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb77, $bb79;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb86:
    assume out_$i229 == 1;
    goto corral_source_split_5596;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    out_$i229 := $sgt.i32(out_$i207, 0);
    goto corral_source_split_5573;

  $bb75:
    assume {:verifier.code 0} true;
    out_$i214 := $sub.i32(out_$i207, 1);
    call {:si_unique_call 1013} {:cexpr "m___0"} boogie_si_record_i32(out_$i214);
    goto corral_source_split_5572;

  corral_source_split_5565:
    assume {:verifier.code 0} true;
    goto $bb75;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    $M.24 := $store.i8($M.24, out_$p212, 0);
    goto corral_source_split_5565;

  corral_source_split_5563:
    assume {:verifier.code 0} true;
    out_$p212 := $add.ref($add.ref(in_$p3, $mul.ref(0, 94)), $mul.ref(0, 1));
    goto corral_source_split_5564;

  corral_source_split_5562:
    assume {:verifier.code 0} true;
    out_$p211 := $add.ref(out_$p210, $mul.ref(4, 1));
    goto corral_source_split_5563;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    out_$p210 := $bitcast.ref.ref(out_$p209);
    goto corral_source_split_5562;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    out_$p209 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7444, 1));
    goto corral_source_split_5561;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    out_$p208 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_5560;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    out_$i207 := $and.i32(out_$i206, 2047);
    call {:si_unique_call 1012} {:cexpr "payload"} boogie_si_record_i32(out_$i207);
    goto corral_source_split_5559;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    out_$i206 := $zext.i16.i32(out_$i201);
    goto corral_source_split_5558;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    out_$p205 := $add.ref(out_$p203, $mul.ref(out_$i204, 64));
    goto corral_source_split_5557;

  corral_source_split_5555:
    assume {:verifier.code 0} true;
    out_$i204 := $sext.i32.i64(out_$i187);
    goto corral_source_split_5556;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    out_$p203 := $bitcast.ref.ref(out_$p202);
    goto corral_source_split_5555;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    out_$p202 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(4800, 1));
    goto corral_source_split_5554;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    out_$i201 := $trunc.i32.i16(out_$i200);
    call {:si_unique_call 1011} {:cexpr "ed_length"} boogie_si_record_i16(out_$i201);
    goto corral_source_split_5553;

  corral_source_split_5551:
    assume {:verifier.code 0} true;
    out_$i200 := $or.i32(out_$i194, out_$i199);
    goto corral_source_split_5552;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    out_$i199 := $sext.i16.i32(out_$i198);
    goto corral_source_split_5551;

  corral_source_split_5549:
    assume {:verifier.code 0} true;
    out_$i198 := $zext.i8.i16(out_$i197);
    goto corral_source_split_5550;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    out_$i197 := $load.i8($M.0, out_$p196);
    goto corral_source_split_5549;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    out_$p196 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7444, 1)), $mul.ref(1, 1));
    goto corral_source_split_5548;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    out_$i194 := $sext.i16.i32(out_$i193);
    goto corral_source_split_5547;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    out_$i193 := $trunc.i32.i16(out_$i192);
    goto corral_source_split_5546;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    out_$i192 := $shl.i32(out_$i191, 8);
    goto corral_source_split_5545;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    out_$i191 := $zext.i8.i32(out_$i190);
    goto corral_source_split_5544;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    out_$i190 := $load.i8($M.0, out_$p189);
    goto corral_source_split_5543;

  corral_source_split_5541:
    assume {:verifier.code 0} true;
    out_$p189 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7444, 1)), $mul.ref(2, 1));
    goto corral_source_split_5542;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    out_$i187 := $and.i32(out_$i186, 3);
    call {:si_unique_call 1010} {:cexpr "ed_number"} boogie_si_record_i32(out_$i187);
    goto corral_source_split_5541;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    out_$i186 := $ashr.i32(out_$i185, 5);
    goto corral_source_split_5540;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    out_$i185 := $zext.i8.i32(out_$i184);
    goto corral_source_split_5539;

  corral_source_split_5537:
    assume {:verifier.code 0} true;
    out_$i184 := $load.i8($M.0, out_$p183);
    goto corral_source_split_5538;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    out_$p183 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7444, 1)), $mul.ref(0, 1));
    goto corral_source_split_5537;

  $bb73:
    assume out_$i181 == 1;
    goto corral_source_split_5536;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    out_$i181 := $ne.i32(out_$i180, 0);
    goto corral_source_split_5528;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    out_$i180 := $load.i32($M.0, out_$p179);
    goto corral_source_split_5527;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    out_$p179 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(8480, 1));
    goto corral_source_split_5526;

  $bb69:
    assume !(out_$i173 == 1);
    goto corral_source_split_5525;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    out_$i213 := $eq.i32(out_$i214, 0);
    goto corral_source_split_5584;

  $bb79:
    assume !(1 == 1);
    goto corral_source_split_5583;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    out_$i225 := $sext.i32.i64(out_$i224);
    goto corral_source_split_5588;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1016} out_$i224 := sprintf.ref.ref(out_$p208, .str.5);
    call {:si_unique_call 1017} {:cexpr "tmp___15"} boogie_si_record_i32(out_$i224);
    goto corral_source_split_5587;

  $bb81:
    assume !(out_$i213 == 1);
    goto corral_source_split_5586;

  corral_source_split_6377:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb381, $bb382;

  corral_source_split_6376:
    assume {:verifier.code 0} true;
    out_$i796 := $eq.i32(out_$i227, 0);
    goto corral_source_split_6377;

  $bb380:
    assume !(1 == 1);
    goto corral_source_split_6376;

  corral_source_split_6380:
    assume {:verifier.code 0} true;
    out_$i798 := $sext.i32.i64(out_$i797);
    goto corral_source_split_6381;

  corral_source_split_6379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1096} out_$i797 := sprintf.ref.ref(out_$p222, .str.5);
    goto corral_source_split_6380;

  $bb382:
    assume !(out_$i796 == 1);
    goto corral_source_split_6379;

  corral_source_split_6397:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb390, $bb391;

  corral_source_split_6396:
    assume {:verifier.code 0} true;
    out_$i810 := $eq.i32(out_$i808, 0);
    goto corral_source_split_6397;

  $bb389:
    assume !(1 == 1);
    goto corral_source_split_6396;

  corral_source_split_6400:
    assume {:verifier.code 0} true;
    out_$i812 := $sext.i32.i64(out_$i811);
    goto corral_source_split_6401;

  corral_source_split_6399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1098} out_$i811 := sprintf.ref.ref(out_$p800, .str.5);
    goto corral_source_split_6400;

  $bb391:
    assume !(out_$i810 == 1);
    goto corral_source_split_6399;

  corral_source_split_6417:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb399, $bb400;

  corral_source_split_6416:
    assume {:verifier.code 0} true;
    out_$i824 := $eq.i32(out_$i822, 0);
    goto corral_source_split_6417;

  $bb398:
    assume !(1 == 1);
    goto corral_source_split_6416;

  corral_source_split_6420:
    assume {:verifier.code 0} true;
    out_$i826 := $sext.i32.i64(out_$i825);
    goto corral_source_split_6421;

  corral_source_split_6419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1100} out_$i825 := sprintf.ref.ref(out_$p814, .str.5);
    goto corral_source_split_6420;

  $bb400:
    assume !(out_$i824 == 1);
    goto corral_source_split_6419;

  corral_source_split_6437:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb408, $bb409;

  corral_source_split_6436:
    assume {:verifier.code 0} true;
    out_$i838 := $eq.i32(out_$i836, 0);
    goto corral_source_split_6437;

  $bb407:
    assume !(1 == 1);
    goto corral_source_split_6436;

  corral_source_split_6440:
    assume {:verifier.code 0} true;
    out_$i840 := $sext.i32.i64(out_$i839);
    goto corral_source_split_6441;

  corral_source_split_6439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1102} out_$i839 := sprintf.ref.ref(out_$p828, .str.5);
    goto corral_source_split_6440;

  $bb409:
    assume !(out_$i838 == 1);
    goto corral_source_split_6439;

  corral_source_split_6457:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb417, $bb418;

  corral_source_split_6456:
    assume {:verifier.code 0} true;
    out_$i852 := $eq.i32(out_$i850, 0);
    goto corral_source_split_6457;

  $bb416:
    assume !(1 == 1);
    goto corral_source_split_6456;

  corral_source_split_6460:
    assume {:verifier.code 0} true;
    out_$i854 := $sext.i32.i64(out_$i853);
    goto corral_source_split_6461;

  corral_source_split_6459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1104} out_$i853 := sprintf.ref.ref(out_$p842, .str.5);
    goto corral_source_split_6460;

  $bb418:
    assume !(out_$i852 == 1);
    goto corral_source_split_6459;

  corral_source_split_6477:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb426, $bb427;

  corral_source_split_6476:
    assume {:verifier.code 0} true;
    out_$i866 := $eq.i32(out_$i864, 0);
    goto corral_source_split_6477;

  $bb425:
    assume !(1 == 1);
    goto corral_source_split_6476;

  corral_source_split_6480:
    assume {:verifier.code 0} true;
    out_$i868 := $sext.i32.i64(out_$i867);
    goto corral_source_split_6481;

  corral_source_split_6479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1106} out_$i867 := sprintf.ref.ref(out_$p856, .str.5);
    goto corral_source_split_6480;

  $bb427:
    assume !(out_$i866 == 1);
    goto corral_source_split_6479;

  corral_source_split_6497:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb435, $bb436;

  corral_source_split_6496:
    assume {:verifier.code 0} true;
    out_$i880 := $eq.i32(out_$i878, 0);
    goto corral_source_split_6497;

  $bb434:
    assume !(1 == 1);
    goto corral_source_split_6496;

  corral_source_split_6500:
    assume {:verifier.code 0} true;
    out_$i882 := $sext.i32.i64(out_$i881);
    goto corral_source_split_6501;

  corral_source_split_6499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1108} out_$i881 := sprintf.ref.ref(out_$p870, .str.5);
    goto corral_source_split_6500;

  $bb436:
    assume !(out_$i880 == 1);
    goto corral_source_split_6499;

  corral_source_split_6517:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb444, $bb445;

  corral_source_split_6516:
    assume {:verifier.code 0} true;
    out_$i894 := $eq.i32(out_$i892, 0);
    goto corral_source_split_6517;

  $bb443:
    assume !(1 == 1);
    goto corral_source_split_6516;

  corral_source_split_6520:
    assume {:verifier.code 0} true;
    out_$i896 := $sext.i32.i64(out_$i895);
    goto corral_source_split_6521;

  corral_source_split_6519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1110} out_$i895 := sprintf.ref.ref(out_$p884, .str.5);
    goto corral_source_split_6520;

  $bb445:
    assume !(out_$i894 == 1);
    goto corral_source_split_6519;

  corral_source_split_6537:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb453, $bb454;

  corral_source_split_6536:
    assume {:verifier.code 0} true;
    out_$i908 := $eq.i32(out_$i906, 0);
    goto corral_source_split_6537;

  $bb452:
    assume !(1 == 1);
    goto corral_source_split_6536;

  corral_source_split_6540:
    assume {:verifier.code 0} true;
    out_$i910 := $sext.i32.i64(out_$i909);
    goto corral_source_split_6541;

  corral_source_split_6539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1112} out_$i909 := sprintf.ref.ref(out_$p898, .str.5);
    goto corral_source_split_6540;

  $bb454:
    assume !(out_$i908 == 1);
    goto corral_source_split_6539;

  corral_source_split_6557:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb462, $bb463;

  corral_source_split_6556:
    assume {:verifier.code 0} true;
    out_$i922 := $eq.i32(out_$i920, 0);
    goto corral_source_split_6557;

  $bb461:
    assume !(1 == 1);
    goto corral_source_split_6556;

  corral_source_split_6560:
    assume {:verifier.code 0} true;
    out_$i924 := $sext.i32.i64(out_$i923);
    goto corral_source_split_6561;

  corral_source_split_6559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1114} out_$i923 := sprintf.ref.ref(out_$p912, .str.5);
    goto corral_source_split_6560;

  $bb463:
    assume !(out_$i922 == 1);
    goto corral_source_split_6559;

  corral_source_split_6577:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb471, $bb472;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    out_$i936 := $eq.i32(out_$i934, 0);
    goto corral_source_split_6577;

  $bb470:
    assume !(1 == 1);
    goto corral_source_split_6576;

  corral_source_split_6580:
    assume {:verifier.code 0} true;
    out_$i938 := $sext.i32.i64(out_$i937);
    goto corral_source_split_6581;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1116} out_$i937 := sprintf.ref.ref(out_$p926, .str.5);
    goto corral_source_split_6580;

  $bb472:
    assume !(out_$i936 == 1);
    goto corral_source_split_6579;

  corral_source_split_6597:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb480, $bb481;

  corral_source_split_6596:
    assume {:verifier.code 0} true;
    out_$i950 := $eq.i32(out_$i948, 0);
    goto corral_source_split_6597;

  $bb479:
    assume !(1 == 1);
    goto corral_source_split_6596;

  corral_source_split_6600:
    assume {:verifier.code 0} true;
    out_$i952 := $sext.i32.i64(out_$i951);
    goto corral_source_split_6601;

  corral_source_split_6599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1118} out_$i951 := sprintf.ref.ref(out_$p940, .str.5);
    goto corral_source_split_6600;

  $bb481:
    assume !(out_$i950 == 1);
    goto corral_source_split_6599;

  corral_source_split_6617:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb489, $bb490;

  corral_source_split_6616:
    assume {:verifier.code 0} true;
    out_$i964 := $eq.i32(out_$i962, 0);
    goto corral_source_split_6617;

  $bb488:
    assume !(1 == 1);
    goto corral_source_split_6616;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    out_$i966 := $sext.i32.i64(out_$i965);
    goto corral_source_split_6621;

  corral_source_split_6619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1120} out_$i965 := sprintf.ref.ref(out_$p954, .str.5);
    goto corral_source_split_6620;

  $bb490:
    assume !(out_$i964 == 1);
    goto corral_source_split_6619;

  corral_source_split_6637:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb498, $bb499;

  corral_source_split_6636:
    assume {:verifier.code 0} true;
    out_$i978 := $eq.i32(out_$i976, 0);
    goto corral_source_split_6637;

  $bb497:
    assume !(1 == 1);
    goto corral_source_split_6636;

  corral_source_split_6640:
    assume {:verifier.code 0} true;
    out_$i980 := $sext.i32.i64(out_$i979);
    goto corral_source_split_6641;

  corral_source_split_6639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1122} out_$i979 := sprintf.ref.ref(out_$p968, .str.5);
    goto corral_source_split_6640;

  $bb499:
    assume !(out_$i978 == 1);
    goto corral_source_split_6639;

  corral_source_split_6657:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb507, $bb508;

  corral_source_split_6656:
    assume {:verifier.code 0} true;
    out_$i992 := $eq.i32(out_$i990, 0);
    goto corral_source_split_6657;

  $bb506:
    assume !(1 == 1);
    goto corral_source_split_6656;

  corral_source_split_6660:
    assume {:verifier.code 0} true;
    out_$i994 := $sext.i32.i64(out_$i993);
    goto corral_source_split_6661;

  corral_source_split_6659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1124} out_$i993 := sprintf.ref.ref(out_$p982, .str.5);
    goto corral_source_split_6660;

  $bb508:
    assume !(out_$i992 == 1);
    goto corral_source_split_6659;

  corral_source_split_6677:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb516, $bb517;

  corral_source_split_6676:
    assume {:verifier.code 0} true;
    out_$i1006 := $eq.i32(out_$i1004, 0);
    goto corral_source_split_6677;

  $bb515:
    assume !(1 == 1);
    goto corral_source_split_6676;

  corral_source_split_6680:
    assume {:verifier.code 0} true;
    out_$i1008 := $sext.i32.i64(out_$i1007);
    goto corral_source_split_6681;

  corral_source_split_6679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1126} out_$i1007 := sprintf.ref.ref(out_$p996, .str.5);
    goto corral_source_split_6680;

  $bb517:
    assume !(out_$i1006 == 1);
    goto corral_source_split_6679;

  corral_source_split_6697:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb525, $bb526;

  corral_source_split_6696:
    assume {:verifier.code 0} true;
    out_$i1020 := $eq.i32(out_$i1018, 0);
    goto corral_source_split_6697;

  $bb524:
    assume !(1 == 1);
    goto corral_source_split_6696;

  corral_source_split_6700:
    assume {:verifier.code 0} true;
    out_$i1022 := $sext.i32.i64(out_$i1021);
    goto corral_source_split_6701;

  corral_source_split_6699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1128} out_$i1021 := sprintf.ref.ref(out_$p1010, .str.5);
    goto corral_source_split_6700;

  $bb526:
    assume !(out_$i1020 == 1);
    goto corral_source_split_6699;

  corral_source_split_6717:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb534, $bb535;

  corral_source_split_6716:
    assume {:verifier.code 0} true;
    out_$i1034 := $eq.i32(out_$i1032, 0);
    goto corral_source_split_6717;

  $bb533:
    assume !(1 == 1);
    goto corral_source_split_6716;

  corral_source_split_6720:
    assume {:verifier.code 0} true;
    out_$i1036 := $sext.i32.i64(out_$i1035);
    goto corral_source_split_6721;

  corral_source_split_6719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1130} out_$i1035 := sprintf.ref.ref(out_$p1024, .str.5);
    goto corral_source_split_6720;

  $bb535:
    assume !(out_$i1034 == 1);
    goto corral_source_split_6719;

  corral_source_split_6737:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb543, $bb544;

  corral_source_split_6736:
    assume {:verifier.code 0} true;
    out_$i1048 := $eq.i32(out_$i1046, 0);
    goto corral_source_split_6737;

  $bb542:
    assume !(1 == 1);
    goto corral_source_split_6736;

  corral_source_split_6740:
    assume {:verifier.code 0} true;
    out_$i1050 := $sext.i32.i64(out_$i1049);
    goto corral_source_split_6741;

  corral_source_split_6739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1132} out_$i1049 := sprintf.ref.ref(out_$p1038, .str.5);
    goto corral_source_split_6740;

  $bb544:
    assume !(out_$i1048 == 1);
    goto corral_source_split_6739;

  corral_source_split_6757:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb552, $bb553;

  corral_source_split_6756:
    assume {:verifier.code 0} true;
    out_$i1062 := $eq.i32(out_$i1060, 0);
    goto corral_source_split_6757;

  $bb551:
    assume !(1 == 1);
    goto corral_source_split_6756;

  corral_source_split_6760:
    assume {:verifier.code 0} true;
    out_$i1064 := $sext.i32.i64(out_$i1063);
    goto corral_source_split_6761;

  corral_source_split_6759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1134} out_$i1063 := sprintf.ref.ref(out_$p1052, .str.5);
    goto corral_source_split_6760;

  $bb553:
    assume !(out_$i1062 == 1);
    goto corral_source_split_6759;

  corral_source_split_6777:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb561, $bb562;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    out_$i1076 := $eq.i32(out_$i1074, 0);
    goto corral_source_split_6777;

  $bb560:
    assume !(1 == 1);
    goto corral_source_split_6776;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    out_$i1078 := $sext.i32.i64(out_$i1077);
    goto corral_source_split_6781;

  corral_source_split_6779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1136} out_$i1077 := sprintf.ref.ref(out_$p1066, .str.5);
    goto corral_source_split_6780;

  $bb562:
    assume !(out_$i1076 == 1);
    goto corral_source_split_6779;

  corral_source_split_6797:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb570, $bb571;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    out_$i1090 := $eq.i32(out_$i1088, 0);
    goto corral_source_split_6797;

  $bb569:
    assume !(1 == 1);
    goto corral_source_split_6796;

  corral_source_split_6800:
    assume {:verifier.code 0} true;
    out_$i1092 := $sext.i32.i64(out_$i1091);
    goto corral_source_split_6801;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1138} out_$i1091 := sprintf.ref.ref(out_$p1080, .str.5);
    goto corral_source_split_6800;

  $bb571:
    assume !(out_$i1090 == 1);
    goto corral_source_split_6799;

  corral_source_split_6817:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb579, $bb580;

  corral_source_split_6816:
    assume {:verifier.code 0} true;
    out_$i1104 := $eq.i32(out_$i1102, 0);
    goto corral_source_split_6817;

  $bb578:
    assume !(1 == 1);
    goto corral_source_split_6816;

  corral_source_split_6820:
    assume {:verifier.code 0} true;
    out_$i1106 := $sext.i32.i64(out_$i1105);
    goto corral_source_split_6821;

  corral_source_split_6819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1140} out_$i1105 := sprintf.ref.ref(out_$p1094, .str.5);
    goto corral_source_split_6820;

  $bb580:
    assume !(out_$i1104 == 1);
    goto corral_source_split_6819;

  corral_source_split_6837:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb588, $bb589;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    out_$i1118 := $eq.i32(out_$i1116, 0);
    goto corral_source_split_6837;

  $bb587:
    assume !(1 == 1);
    goto corral_source_split_6836;

  corral_source_split_6840:
    assume {:verifier.code 0} true;
    out_$i1120 := $sext.i32.i64(out_$i1119);
    goto corral_source_split_6841;

  corral_source_split_6839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1142} out_$i1119 := sprintf.ref.ref(out_$p1108, .str.5);
    goto corral_source_split_6840;

  $bb589:
    assume !(out_$i1118 == 1);
    goto corral_source_split_6839;

  corral_source_split_6857:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb597, $bb598;

  corral_source_split_6856:
    assume {:verifier.code 0} true;
    out_$i1132 := $eq.i32(out_$i1130, 0);
    goto corral_source_split_6857;

  $bb596:
    assume !(1 == 1);
    goto corral_source_split_6856;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    out_$i1134 := $sext.i32.i64(out_$i1133);
    goto corral_source_split_6861;

  corral_source_split_6859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1144} out_$i1133 := sprintf.ref.ref(out_$p1122, .str.5);
    goto corral_source_split_6860;

  $bb598:
    assume !(out_$i1132 == 1);
    goto corral_source_split_6859;

  corral_source_split_6877:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb606, $bb607;

  corral_source_split_6876:
    assume {:verifier.code 0} true;
    out_$i1146 := $eq.i32(out_$i1144, 0);
    goto corral_source_split_6877;

  $bb605:
    assume !(1 == 1);
    goto corral_source_split_6876;

  corral_source_split_6880:
    assume {:verifier.code 0} true;
    out_$i1148 := $sext.i32.i64(out_$i1147);
    goto corral_source_split_6881;

  corral_source_split_6879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1146} out_$i1147 := sprintf.ref.ref(out_$p1136, .str.5);
    goto corral_source_split_6880;

  $bb607:
    assume !(out_$i1146 == 1);
    goto corral_source_split_6879;

  corral_source_split_6897:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb615, $bb616;

  corral_source_split_6896:
    assume {:verifier.code 0} true;
    out_$i1160 := $eq.i32(out_$i1158, 0);
    goto corral_source_split_6897;

  $bb614:
    assume !(1 == 1);
    goto corral_source_split_6896;

  corral_source_split_6900:
    assume {:verifier.code 0} true;
    out_$i1162 := $sext.i32.i64(out_$i1161);
    goto corral_source_split_6901;

  corral_source_split_6899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1148} out_$i1161 := sprintf.ref.ref(out_$p1150, .str.5);
    goto corral_source_split_6900;

  $bb616:
    assume !(out_$i1160 == 1);
    goto corral_source_split_6899;

  corral_source_split_6917:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb624, $bb625;

  corral_source_split_6916:
    assume {:verifier.code 0} true;
    out_$i1174 := $eq.i32(out_$i1172, 0);
    goto corral_source_split_6917;

  $bb623:
    assume !(1 == 1);
    goto corral_source_split_6916;

  corral_source_split_6920:
    assume {:verifier.code 0} true;
    out_$i1176 := $sext.i32.i64(out_$i1175);
    goto corral_source_split_6921;

  corral_source_split_6919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1150} out_$i1175 := sprintf.ref.ref(out_$p1164, .str.5);
    goto corral_source_split_6920;

  $bb625:
    assume !(out_$i1174 == 1);
    goto corral_source_split_6919;

  corral_source_split_6937:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb633, $bb634;

  corral_source_split_6936:
    assume {:verifier.code 0} true;
    out_$i1188 := $eq.i32(out_$i1186, 0);
    goto corral_source_split_6937;

  $bb632:
    assume !(1 == 1);
    goto corral_source_split_6936;

  corral_source_split_6940:
    assume {:verifier.code 0} true;
    out_$i1190 := $sext.i32.i64(out_$i1189);
    goto corral_source_split_6941;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1152} out_$i1189 := sprintf.ref.ref(out_$p1178, .str.5);
    goto corral_source_split_6940;

  $bb634:
    assume !(out_$i1188 == 1);
    goto corral_source_split_6939;

  corral_source_split_6954:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb642, $bb643;

  corral_source_split_6953:
    assume {:verifier.code 0} true;
    out_$i1202 := $eq.i32(out_$i1200, 0);
    goto corral_source_split_6954;

  $bb641:
    assume !(0 == 1);
    goto corral_source_split_6953;

  $bb643:
    assume !(out_$i1202 == 1);
    goto corral_source_split_6956;

  $bb87:
    assume {:verifier.code 0} true;
    assume !(out_$i229 == 1);
    goto $bb85;

  $bb84:
    assume {:verifier.code 0} true;
    assume !(out_$i228 == 1);
    goto $bb85;

  $bb385:
    assume {:verifier.code 0} true;
    assume !(out_$i809 == 1);
    goto $bb85;

  $bb394:
    assume {:verifier.code 0} true;
    assume !(out_$i823 == 1);
    goto $bb85;

  $bb403:
    assume {:verifier.code 0} true;
    assume !(out_$i837 == 1);
    goto $bb85;

  $bb412:
    assume {:verifier.code 0} true;
    assume !(out_$i851 == 1);
    goto $bb85;

  $bb421:
    assume {:verifier.code 0} true;
    assume !(out_$i865 == 1);
    goto $bb85;

  $bb430:
    assume {:verifier.code 0} true;
    assume !(out_$i879 == 1);
    goto $bb85;

  $bb439:
    assume {:verifier.code 0} true;
    assume !(out_$i893 == 1);
    goto $bb85;

  $bb448:
    assume {:verifier.code 0} true;
    assume !(out_$i907 == 1);
    goto $bb85;

  $bb457:
    assume {:verifier.code 0} true;
    assume !(out_$i921 == 1);
    goto $bb85;

  $bb466:
    assume {:verifier.code 0} true;
    assume !(out_$i935 == 1);
    goto $bb85;

  $bb475:
    assume {:verifier.code 0} true;
    assume !(out_$i949 == 1);
    goto $bb85;

  $bb484:
    assume {:verifier.code 0} true;
    assume !(out_$i963 == 1);
    goto $bb85;

  $bb493:
    assume {:verifier.code 0} true;
    assume !(out_$i977 == 1);
    goto $bb85;

  $bb502:
    assume {:verifier.code 0} true;
    assume !(out_$i991 == 1);
    goto $bb85;

  $bb511:
    assume {:verifier.code 0} true;
    assume !(out_$i1005 == 1);
    goto $bb85;

  $bb520:
    assume {:verifier.code 0} true;
    assume !(out_$i1019 == 1);
    goto $bb85;

  $bb529:
    assume {:verifier.code 0} true;
    assume !(out_$i1033 == 1);
    goto $bb85;

  $bb538:
    assume {:verifier.code 0} true;
    assume !(out_$i1047 == 1);
    goto $bb85;

  $bb547:
    assume {:verifier.code 0} true;
    assume !(out_$i1061 == 1);
    goto $bb85;

  $bb556:
    assume {:verifier.code 0} true;
    assume !(out_$i1075 == 1);
    goto $bb85;

  $bb565:
    assume {:verifier.code 0} true;
    assume !(out_$i1089 == 1);
    goto $bb85;

  $bb574:
    assume {:verifier.code 0} true;
    assume !(out_$i1103 == 1);
    goto $bb85;

  $bb583:
    assume {:verifier.code 0} true;
    assume !(out_$i1117 == 1);
    goto $bb85;

  $bb592:
    assume {:verifier.code 0} true;
    assume !(out_$i1131 == 1);
    goto $bb85;

  $bb601:
    assume {:verifier.code 0} true;
    assume !(out_$i1145 == 1);
    goto $bb85;

  $bb610:
    assume {:verifier.code 0} true;
    assume !(out_$i1159 == 1);
    goto $bb85;

  $bb619:
    assume {:verifier.code 0} true;
    assume !(out_$i1173 == 1);
    goto $bb85;

  $bb628:
    assume {:verifier.code 0} true;
    assume !(out_$i1187 == 1);
    goto $bb85;

  $bb637:
    assume {:verifier.code 0} true;
    assume !(out_$i1201 == 1);
    goto $bb85;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb94;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb92:
    assume out_$i291 == 1;
    goto corral_source_split_5672;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  corral_source_split_5663:
    assume {:verifier.code 0} true;
    out_$i291 := $eq.i32(out_$i290, 0);
    goto corral_source_split_5664;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    out_$i290 := $zext.i8.i32(out_$i289);
    goto corral_source_split_5663;

  corral_source_split_5661:
    assume {:verifier.code 0} true;
    out_$i289 := $trunc.i32.i8(out_$i288);
    call {:si_unique_call 1028} {:cexpr "buscmd"} boogie_si_record_i8(out_$i289);
    goto corral_source_split_5662;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    out_$i288 := $and.i32(out_$i287, 15);
    goto corral_source_split_5661;

  corral_source_split_5659:
    assume {:verifier.code 0} true;
    out_$i287 := $zext.i8.i32(out_$i286);
    goto corral_source_split_5660;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    out_$i286 := $load.i8($M.0, out_$p285);
    goto corral_source_split_5659;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    out_$p285 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7444, 1)), $mul.ref(0, 1));
    goto corral_source_split_5658;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    goto corral_source_split_5657;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    out_$p282 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7444, 1));
    goto corral_source_split_5656;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p281, 0);
    goto corral_source_split_5655;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    out_$p281 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(8480, 1));
    goto corral_source_split_5654;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p280, 4);
    goto corral_source_split_5653;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    out_$p280 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(8472, 1));
    goto corral_source_split_5652;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p279, 0);
    goto corral_source_split_5651;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    out_$p279 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(8476, 1));
    goto corral_source_split_5650;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1027} complete_(out_$p278);
    goto corral_source_split_5649;

  corral_source_split_5647:
    assume {:verifier.code 0} true;
    out_$p278 := $add.ref($add.ref(out_$p248, $mul.ref(out_$i250, 120)), $mul.ref(24, 1));
    goto corral_source_split_5648;

  corral_source_split_5646:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p277, 0);
    goto corral_source_split_5647;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    out_$p277 := $load.ref($M.0, out_$p276);
    goto corral_source_split_5646;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    out_$p276 := $add.ref($add.ref(out_$p248, $mul.ref(out_$i250, 120)), $mul.ref(16, 1));
    goto corral_source_split_5645;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p275, out_$i273);
    goto corral_source_split_5644;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    out_$p275 := $load.ref($M.0, out_$p274);
    goto corral_source_split_5643;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    out_$p274 := $add.ref($add.ref(out_$p248, $mul.ref(out_$i250, 120)), $mul.ref(8, 1));
    goto corral_source_split_5642;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    out_$i273 := $or.i32(out_$i272, out_$i268);
    call {:si_unique_call 1026} {:cexpr "data"} boogie_si_record_i32(out_$i273);
    goto corral_source_split_5641;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    out_$i272 := $zext.i8.i32(out_$i271);
    goto corral_source_split_5640;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    out_$i271 := $load.i8($M.0, out_$p270);
    goto corral_source_split_5639;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    out_$p270 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7444, 1)), $mul.ref(4, 1));
    goto corral_source_split_5638;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    out_$i268 := $shl.i32(out_$i267, 8);
    call {:si_unique_call 1025} {:cexpr "data"} boogie_si_record_i32(out_$i268);
    goto corral_source_split_5637;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    out_$i267 := $or.i32(out_$i266, out_$i262);
    call {:si_unique_call 1024} {:cexpr "data"} boogie_si_record_i32(out_$i267);
    goto corral_source_split_5636;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    out_$i266 := $zext.i8.i32(out_$i265);
    goto corral_source_split_5635;

  corral_source_split_5633:
    assume {:verifier.code 0} true;
    out_$i265 := $load.i8($M.0, out_$p264);
    goto corral_source_split_5634;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    out_$p264 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7444, 1)), $mul.ref(5, 1));
    goto corral_source_split_5633;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    out_$i262 := $shl.i32(out_$i261, 8);
    call {:si_unique_call 1023} {:cexpr "data"} boogie_si_record_i32(out_$i262);
    goto corral_source_split_5632;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    out_$i261 := $or.i32(out_$i260, out_$i256);
    call {:si_unique_call 1022} {:cexpr "data"} boogie_si_record_i32(out_$i261);
    goto corral_source_split_5631;

  corral_source_split_5629:
    assume {:verifier.code 0} true;
    out_$i260 := $zext.i8.i32(out_$i259);
    goto corral_source_split_5630;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    out_$i259 := $load.i8($M.0, out_$p258);
    goto corral_source_split_5629;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    out_$p258 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7444, 1)), $mul.ref(6, 1));
    goto corral_source_split_5628;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    out_$i256 := $shl.i32(out_$i255, 8);
    call {:si_unique_call 1021} {:cexpr "data"} boogie_si_record_i32(out_$i256);
    goto corral_source_split_5627;

  corral_source_split_5625:
    assume {:verifier.code 0} true;
    out_$i255 := $zext.i8.i32(out_$i254);
    call {:si_unique_call 1020} {:cexpr "data"} boogie_si_record_i32(out_$i255);
    goto corral_source_split_5626;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    out_$i254 := $load.i8($M.0, out_$p253);
    goto corral_source_split_5625;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    out_$p253 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7444, 1)), $mul.ref(7, 1));
    goto corral_source_split_5624;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    goto corral_source_split_5623;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    out_$i250 := $and.i64(out_$i249, 31);
    goto corral_source_split_5622;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    out_$i249 := $sext.i32.i64(out_$i242);
    goto corral_source_split_5621;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    out_$p248 := $bitcast.ref.ref(out_$p247);
    goto corral_source_split_5620;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    out_$p247 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(960, 1));
    goto corral_source_split_5619;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p246, out_$i245);
    goto corral_source_split_5618;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    out_$p246 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(956, 1));
    goto corral_source_split_5617;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    out_$i245 := $add.i32(out_$i244, 1);
    goto corral_source_split_5616;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    out_$i244 := $load.i32($M.0, out_$p243);
    goto corral_source_split_5615;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    out_$p243 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(956, 1));
    goto corral_source_split_5614;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    out_$i242 := $load.i32($M.0, out_$p241);
    call {:si_unique_call 1019} {:cexpr "tmp___18"} boogie_si_record_i32(out_$i242);
    goto corral_source_split_5613;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    out_$p241 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(956, 1));
    goto corral_source_split_5612;

  $bb90:
    assume out_$i240 == 1;
    goto corral_source_split_5611;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  corral_source_split_5569:
    assume {:verifier.code 0} true;
    out_$i240 := $eq.i32(out_$i239, 8);
    goto corral_source_split_5570;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    out_$i239 := $load.i32($M.0, out_$p238);
    goto corral_source_split_5569;

  corral_source_split_5567:
    assume {:verifier.code 0} true;
    out_$p238 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(8472, 1));
    goto corral_source_split_5568;

  $bb74:
    assume !(out_$i181 == 1);
    goto corral_source_split_5567;

  $bb100:
    assume {:verifier.code 0} true;
    goto $bb97;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb95:
    assume out_$i293 == 1;
    goto corral_source_split_5678;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    out_$i293 := $eq.i32(out_$i292, 2);
    goto corral_source_split_5676;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    out_$i292 := $zext.i8.i32(out_$i289);
    goto corral_source_split_5675;

  $bb93:
    assume !(out_$i291 == 1);
    goto corral_source_split_5674;

  $bb103:
    assume {:verifier.code 0} true;
    goto $bb100;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb98:
    assume out_$i295 == 1;
    goto corral_source_split_5684;

  corral_source_split_5682:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    out_$i295 := $eq.i32(out_$i294, 6);
    goto corral_source_split_5682;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    out_$i294 := $zext.i8.i32(out_$i289);
    goto corral_source_split_5681;

  $bb96:
    assume !(out_$i293 == 1);
    goto corral_source_split_5680;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1029} dev_err.ref.ref.i32.i32(out_$p300, .str.10, out_$i301, out_$i273);
    assume {:verifier.code 0} true;
    goto $bb103;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb101:
    assume out_$i297 == 1;
    goto corral_source_split_5690;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    out_$i297 := $eq.i32(out_$i296, 10);
    goto corral_source_split_5688;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    out_$i296 := $zext.i8.i32(out_$i289);
    goto corral_source_split_5687;

  $bb99:
    assume !(out_$i295 == 1);
    goto corral_source_split_5686;

  corral_source_split_5695:
    assume {:verifier.code 0} true;
    out_$i301 := $zext.i8.i32(out_$i289);
    goto corral_source_split_5696;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    out_$p300 := $add.ref($add.ref(out_$p299, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_5695;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    out_$p299 := $load.ref($M.0, out_$p298);
    goto corral_source_split_5694;

  corral_source_split_5692:
    assume {:verifier.code 0} true;
    out_$p298 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_5693;

  $bb102:
    assume !(out_$i297 == 1);
    goto corral_source_split_5692;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p307, 8);
    goto corral_source_split_5700;

  corral_source_split_5698:
    assume {:verifier.code 0} true;
    out_$p307 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(8472, 1));
    goto corral_source_split_5699;

  $bb104:
    assume out_$i306 == 1;
    goto corral_source_split_5698;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb104, $bb105;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    out_$i306 := $sge.i32(out_$i305, 0);
    goto corral_source_split_5670;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    out_$i305 := $sext.i8.i32(out_$i304);
    goto corral_source_split_5669;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    out_$i304 := $load.i8($M.0, out_$p303);
    goto corral_source_split_5668;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    out_$p303 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7444, 1)), $mul.ref(0, 1));
    goto corral_source_split_5667;

  $bb91:
    assume !(out_$i240 == 1);
    goto corral_source_split_5666;

  SeqInstr_699:
    goto corral_source_split_5771;

  SeqInstr_698:
    assume assertsPassed;
    goto SeqInstr_699;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1033} out_$p379 := have_ed_set_response(in_$p0, out_$p336, out_$i378, out_$i313, out_$i318, out_$p164);
    goto SeqInstr_698;

  corral_source_split_5769:
    assume {:verifier.code 0} true;
    out_$i378 := $trunc.i32.i16(out_$i377);
    goto corral_source_split_5770;

  corral_source_split_5768:
    assume {:verifier.code 0} true;
    out_$i377 := $zext.i16.i32(out_$i332);
    goto corral_source_split_5769;

  $bb106:
    assume out_$i376 == 1;
    goto corral_source_split_5768;

  corral_source_split_5766:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    out_$i376 := $eq.i32(out_$i375, 0);
    goto corral_source_split_5766;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    out_$i375 := $and.i32(out_$i374, 16);
    goto corral_source_split_5765;

  corral_source_split_5763:
    assume {:verifier.code 0} true;
    out_$i374 := $zext.i8.i32(out_$i373);
    goto corral_source_split_5764;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    out_$i373 := $load.i8($M.0, out_$p372);
    goto corral_source_split_5763;

  corral_source_split_5761:
    assume {:verifier.code 0} true;
    out_$p372 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7444, 1)), $mul.ref(0, 1));
    goto corral_source_split_5762;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p370, out_$i369);
    goto corral_source_split_5761;

  corral_source_split_5759:
    assume {:verifier.code 0} true;
    out_$p370 := $add.ref($add.ref(out_$p334, $mul.ref(out_$i335, 64)), $mul.ref(24, 1));
    goto corral_source_split_5760;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    out_$i369 := $and.i32(out_$i368, 15);
    goto corral_source_split_5759;

  corral_source_split_5757:
    assume {:verifier.code 0} true;
    out_$i368 := $zext.i8.i32(out_$i367);
    goto corral_source_split_5758;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    out_$i367 := $load.i8($M.0, out_$p366);
    goto corral_source_split_5757;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    out_$p366 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7444, 1)), $mul.ref(3, 1));
    goto corral_source_split_5756;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p364, out_$i363);
    goto corral_source_split_5755;

  corral_source_split_5753:
    assume {:verifier.code 0} true;
    out_$p364 := $add.ref($add.ref(out_$p334, $mul.ref(out_$i335, 64)), $mul.ref(20, 1));
    goto corral_source_split_5754;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    out_$i363 := $and.i32(out_$i362, 3);
    goto corral_source_split_5753;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    out_$i362 := $ashr.i32(out_$i361, 4);
    goto corral_source_split_5752;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    out_$i361 := $zext.i8.i32(out_$i360);
    goto corral_source_split_5751;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    out_$i360 := $load.i8($M.0, out_$p359);
    goto corral_source_split_5750;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    out_$p359 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7444, 1)), $mul.ref(3, 1));
    goto corral_source_split_5749;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p357, out_$i356);
    goto corral_source_split_5748;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    out_$p357 := $add.ref($add.ref(out_$p334, $mul.ref(out_$i335, 64)), $mul.ref(16, 1));
    goto corral_source_split_5747;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    out_$i356 := $and.i32(out_$i355, 3);
    goto corral_source_split_5746;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    out_$i355 := $ashr.i32(out_$i354, 6);
    goto corral_source_split_5745;

  corral_source_split_5743:
    assume {:verifier.code 0} true;
    out_$i354 := $zext.i8.i32(out_$i353);
    goto corral_source_split_5744;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    out_$i353 := $load.i8($M.0, out_$p352);
    goto corral_source_split_5743;

  corral_source_split_5741:
    assume {:verifier.code 0} true;
    out_$p352 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7444, 1)), $mul.ref(3, 1));
    goto corral_source_split_5742;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p350, out_$i349);
    goto corral_source_split_5741;

  corral_source_split_5739:
    assume {:verifier.code 0} true;
    out_$p350 := $add.ref($add.ref(out_$p334, $mul.ref(out_$i335, 64)), $mul.ref(36, 1));
    goto corral_source_split_5740;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    out_$i349 := $and.i32(out_$i348, 1);
    goto corral_source_split_5739;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    out_$i348 := $ashr.i32(out_$i347, 2);
    goto corral_source_split_5738;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    out_$i347 := $zext.i8.i32(out_$i346);
    goto corral_source_split_5737;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    out_$i346 := $load.i8($M.0, out_$p345);
    goto corral_source_split_5736;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    out_$p345 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7444, 1)), $mul.ref(0, 1));
    goto corral_source_split_5735;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p343, out_$i342);
    goto corral_source_split_5734;

  corral_source_split_5732:
    assume {:verifier.code 0} true;
    out_$p343 := $add.ref($add.ref(out_$p334, $mul.ref(out_$i335, 64)), $mul.ref(32, 1));
    goto corral_source_split_5733;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    out_$i342 := $and.i32(out_$i341, 1);
    goto corral_source_split_5732;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    out_$i341 := $ashr.i32(out_$i340, 3);
    goto corral_source_split_5731;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    out_$i340 := $zext.i8.i32(out_$i339);
    goto corral_source_split_5730;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    out_$i339 := $load.i8($M.0, out_$p338);
    goto corral_source_split_5729;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    out_$p338 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7444, 1)), $mul.ref(0, 1));
    goto corral_source_split_5728;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    out_$p336 := $add.ref(out_$p334, $mul.ref(out_$i335, 64));
    goto corral_source_split_5727;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    out_$i335 := $sext.i32.i64(out_$i313);
    goto corral_source_split_5726;

  corral_source_split_5724:
    assume {:verifier.code 0} true;
    out_$p334 := $bitcast.ref.ref(out_$p333);
    goto corral_source_split_5725;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    out_$p333 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(4800, 1));
    goto corral_source_split_5724;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    out_$i332 := $trunc.i32.i16(out_$i331);
    call {:si_unique_call 1032} {:cexpr "ed_length___0"} boogie_si_record_i16(out_$i332);
    goto corral_source_split_5723;

  corral_source_split_5721:
    assume {:verifier.code 0} true;
    out_$i331 := $or.i32(out_$i325, out_$i330);
    goto corral_source_split_5722;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    out_$i330 := $sext.i16.i32(out_$i329);
    goto corral_source_split_5721;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    out_$i329 := $zext.i8.i16(out_$i328);
    goto corral_source_split_5720;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    out_$i328 := $load.i8($M.0, out_$p327);
    goto corral_source_split_5719;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    out_$p327 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7444, 1)), $mul.ref(1, 1));
    goto corral_source_split_5718;

  corral_source_split_5716:
    assume {:verifier.code 0} true;
    out_$i325 := $sext.i16.i32(out_$i324);
    goto corral_source_split_5717;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    out_$i324 := $trunc.i32.i16(out_$i323);
    goto corral_source_split_5716;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    out_$i323 := $shl.i32(out_$i322, 8);
    goto corral_source_split_5715;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    out_$i322 := $zext.i8.i32(out_$i321);
    goto corral_source_split_5714;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    out_$i321 := $load.i8($M.0, out_$p320);
    goto corral_source_split_5713;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    out_$p320 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7444, 1)), $mul.ref(2, 1));
    goto corral_source_split_5712;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    out_$i318 := $and.i32(out_$i317, 3);
    call {:si_unique_call 1031} {:cexpr "ed_type"} boogie_si_record_i32(out_$i318);
    goto corral_source_split_5711;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    out_$i317 := $zext.i8.i32(out_$i316);
    goto corral_source_split_5710;

  corral_source_split_5708:
    assume {:verifier.code 0} true;
    out_$i316 := $load.i8($M.0, out_$p315);
    goto corral_source_split_5709;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    out_$p315 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7444, 1)), $mul.ref(0, 1));
    goto corral_source_split_5708;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    out_$i313 := $and.i32(out_$i312, 3);
    call {:si_unique_call 1030} {:cexpr "ed_number___0"} boogie_si_record_i32(out_$i313);
    goto corral_source_split_5707;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    out_$i312 := $ashr.i32(out_$i311, 5);
    goto corral_source_split_5706;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    out_$i311 := $zext.i8.i32(out_$i310);
    goto corral_source_split_5705;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    out_$i310 := $load.i8($M.0, out_$p309);
    goto corral_source_split_5704;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    out_$p309 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7444, 1)), $mul.ref(0, 1));
    goto corral_source_split_5703;

  $bb105:
    assume !(out_$i306 == 1);
    goto corral_source_split_5702;

  SeqInstr_702:
    goto corral_source_split_5776;

  SeqInstr_701:
    assume assertsPassed;
    goto SeqInstr_702;

  corral_source_split_5775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1034} out_$p382 := have_ed_get_response(in_$p0, out_$p336, out_$i381, out_$i313, out_$i318, out_$p164);
    goto SeqInstr_701;

  corral_source_split_5774:
    assume {:verifier.code 0} true;
    out_$i381 := $trunc.i32.i16(out_$i380);
    goto corral_source_split_5775;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    out_$i380 := $zext.i16.i32(out_$i332);
    goto corral_source_split_5774;

  $bb107:
    assume !(out_$i376 == 1);
    goto corral_source_split_5773;

  $bb19:
    assume out_$i60 == 1;
    goto corral_source_split_5345;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    out_$p61, out_$i62 := out_$p14, out_$i13;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    out_$i60 := $ne.i64(out_$i59, 0);
    goto corral_source_split_5340;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    out_$i59 := $load.i64($M.0, out_$p58);
    goto corral_source_split_5339;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7424, 1));
    goto corral_source_split_5338;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p57, 1);
    goto corral_source_split_5337;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7416, 1));
    goto corral_source_split_5336;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p56, out_$i55);
    goto corral_source_split_5335;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7424, 1));
    goto corral_source_split_5334;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    out_$i55 := $sext.i32.i64(out_$i54);
    goto corral_source_split_5333;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    out_$i54 := $add.i32(out_$i53, $sub.i32(0, 2));
    goto corral_source_split_5332;

  corral_source_split_5330:
    assume {:verifier.code 0} true;
    out_$i53 := $load.i32($M.16, in_$p1);
    goto corral_source_split_5331;

  $bb17:
    assume out_$i52 == 1;
    goto corral_source_split_5330;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    out_$i52 := $sgt.i32(out_$i51, 2);
    goto corral_source_split_5328;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i51 := $load.i32($M.16, in_$p1);
    goto corral_source_split_5327;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb376:
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_6367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1094} out_vslice_dummy_var_27 := sprintf.ref.ref(out_$p782, .str.5);
    assume {:verifier.code 0} true;
    goto $bb376;

  corral_source_split_6362:
    assume {:verifier.code 0} true;
    goto $bb376;

  corral_source_split_6361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1093} out_vslice_dummy_var_26 := sprintf.ref.ref.i32(out_$p782, .str.4, out_$i794);
    goto corral_source_split_6362;

  corral_source_split_6360:
    assume {:verifier.code 0} true;
    out_$i794 := $zext.i8.i32(out_$i793);
    goto corral_source_split_6361;

  $bb372:
    assume {:verifier.code 0} true;
    out_$i793 := $load.i8($M.0, out_$p781);
    goto corral_source_split_6360;

  $bb374:
    assume {:verifier.code 0} true;
    assume out_$i791 == 1;
    goto $bb372;

  $bb371:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb372;

  $bb370:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb371, $bb373;

  corral_source_split_6358:
    assume {:verifier.code 0} true;
    goto $bb370;

  $bb368:
    assume out_$i790 == 1;
    goto corral_source_split_6358;

  corral_source_split_6356:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb368, $bb369;

  corral_source_split_6355:
    assume {:verifier.code 0} true;
    out_$i790 := $sgt.i32(out_$i775, 0);
    goto corral_source_split_6356;

  corral_source_split_6354:
    assume {:verifier.code 0} true;
    out_$i789 := $sub.i32(out_$i775, 1);
    goto corral_source_split_6355;

  $bb367:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6354;

  corral_source_split_6352:
    assume {:verifier.code 0} true;
    out_$p780 := $add.ref(out_$p768, $mul.ref(out_$i779, 1));
    assume {:verifier.code 0} true;
    out_$p781, out_$p782 := out_$p767, out_$p780;
    goto $bb367;

  corral_source_split_6345:
    assume {:verifier.code 0} true;
    out_$p781, out_$p782 := out_$p783, out_$p788;
    goto $bb367;

  corral_source_split_6344:
    assume {:verifier.code 0} true;
    out_$p788 := $add.ref(out_$p768, $mul.ref(out_$i787, 1));
    goto corral_source_split_6345;

  corral_source_split_6343:
    assume {:verifier.code 0} true;
    out_$i787 := $sext.i32.i64(out_$i786);
    goto corral_source_split_6344;

  corral_source_split_6342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1091} out_$i786 := sprintf.ref.ref.i32(out_$p768, .str.4, out_$i785);
    goto corral_source_split_6343;

  corral_source_split_6341:
    assume {:verifier.code 0} true;
    out_$i785 := $zext.i8.i32(out_$i784);
    goto corral_source_split_6342;

  corral_source_split_6340:
    assume {:verifier.code 0} true;
    out_$i784 := $load.i8($M.0, out_$p767);
    goto corral_source_split_6341;

  $bb363:
    assume {:verifier.code 0} true;
    out_$p783 := $add.ref(out_$p767, $mul.ref(1, 1));
    goto corral_source_split_6340;

  $bb365:
    assume {:verifier.code 0} true;
    assume out_$i777 == 1;
    goto $bb363;

  $bb362:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb363;

  $bb361:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb362, $bb364;

  corral_source_split_6338:
    assume {:verifier.code 0} true;
    goto $bb361;

  $bb359:
    assume out_$i776 == 1;
    goto corral_source_split_6338;

  corral_source_split_6336:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb359, $bb360;

  corral_source_split_6335:
    assume {:verifier.code 0} true;
    out_$i776 := $sgt.i32(out_$i761, 0);
    goto corral_source_split_6336;

  corral_source_split_6334:
    assume {:verifier.code 0} true;
    out_$i775 := $sub.i32(out_$i761, 1);
    goto corral_source_split_6335;

  $bb358:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6334;

  corral_source_split_6332:
    assume {:verifier.code 0} true;
    out_$p766 := $add.ref(out_$p754, $mul.ref(out_$i765, 1));
    assume {:verifier.code 0} true;
    out_$p767, out_$p768 := out_$p753, out_$p766;
    goto $bb358;

  corral_source_split_6325:
    assume {:verifier.code 0} true;
    out_$p767, out_$p768 := out_$p769, out_$p774;
    goto $bb358;

  corral_source_split_6324:
    assume {:verifier.code 0} true;
    out_$p774 := $add.ref(out_$p754, $mul.ref(out_$i773, 1));
    goto corral_source_split_6325;

  corral_source_split_6323:
    assume {:verifier.code 0} true;
    out_$i773 := $sext.i32.i64(out_$i772);
    goto corral_source_split_6324;

  corral_source_split_6322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1089} out_$i772 := sprintf.ref.ref.i32(out_$p754, .str.4, out_$i771);
    goto corral_source_split_6323;

  corral_source_split_6321:
    assume {:verifier.code 0} true;
    out_$i771 := $zext.i8.i32(out_$i770);
    goto corral_source_split_6322;

  corral_source_split_6320:
    assume {:verifier.code 0} true;
    out_$i770 := $load.i8($M.0, out_$p753);
    goto corral_source_split_6321;

  $bb354:
    assume {:verifier.code 0} true;
    out_$p769 := $add.ref(out_$p753, $mul.ref(1, 1));
    goto corral_source_split_6320;

  $bb356:
    assume {:verifier.code 0} true;
    assume out_$i763 == 1;
    goto $bb354;

  $bb353:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb354;

  $bb352:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb353, $bb355;

  corral_source_split_6318:
    assume {:verifier.code 0} true;
    goto $bb352;

  $bb350:
    assume out_$i762 == 1;
    goto corral_source_split_6318;

  corral_source_split_6316:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb350, $bb351;

  corral_source_split_6315:
    assume {:verifier.code 0} true;
    out_$i762 := $sgt.i32(out_$i747, 0);
    goto corral_source_split_6316;

  corral_source_split_6314:
    assume {:verifier.code 0} true;
    out_$i761 := $sub.i32(out_$i747, 1);
    goto corral_source_split_6315;

  $bb349:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6314;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    out_$p752 := $add.ref(out_$p740, $mul.ref(out_$i751, 1));
    assume {:verifier.code 0} true;
    out_$p753, out_$p754 := out_$p739, out_$p752;
    goto $bb349;

  corral_source_split_6305:
    assume {:verifier.code 0} true;
    out_$p753, out_$p754 := out_$p755, out_$p760;
    goto $bb349;

  corral_source_split_6304:
    assume {:verifier.code 0} true;
    out_$p760 := $add.ref(out_$p740, $mul.ref(out_$i759, 1));
    goto corral_source_split_6305;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    out_$i759 := $sext.i32.i64(out_$i758);
    goto corral_source_split_6304;

  corral_source_split_6302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1087} out_$i758 := sprintf.ref.ref.i32(out_$p740, .str.4, out_$i757);
    goto corral_source_split_6303;

  corral_source_split_6301:
    assume {:verifier.code 0} true;
    out_$i757 := $zext.i8.i32(out_$i756);
    goto corral_source_split_6302;

  corral_source_split_6300:
    assume {:verifier.code 0} true;
    out_$i756 := $load.i8($M.0, out_$p739);
    goto corral_source_split_6301;

  $bb345:
    assume {:verifier.code 0} true;
    out_$p755 := $add.ref(out_$p739, $mul.ref(1, 1));
    goto corral_source_split_6300;

  $bb347:
    assume {:verifier.code 0} true;
    assume out_$i749 == 1;
    goto $bb345;

  $bb344:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb345;

  $bb343:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb344, $bb346;

  corral_source_split_6298:
    assume {:verifier.code 0} true;
    goto $bb343;

  $bb341:
    assume out_$i748 == 1;
    goto corral_source_split_6298;

  corral_source_split_6296:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb341, $bb342;

  corral_source_split_6295:
    assume {:verifier.code 0} true;
    out_$i748 := $sgt.i32(out_$i733, 0);
    goto corral_source_split_6296;

  corral_source_split_6294:
    assume {:verifier.code 0} true;
    out_$i747 := $sub.i32(out_$i733, 1);
    goto corral_source_split_6295;

  $bb340:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6294;

  corral_source_split_6292:
    assume {:verifier.code 0} true;
    out_$p738 := $add.ref(out_$p726, $mul.ref(out_$i737, 1));
    assume {:verifier.code 0} true;
    out_$p739, out_$p740 := out_$p725, out_$p738;
    goto $bb340;

  corral_source_split_6285:
    assume {:verifier.code 0} true;
    out_$p739, out_$p740 := out_$p741, out_$p746;
    goto $bb340;

  corral_source_split_6284:
    assume {:verifier.code 0} true;
    out_$p746 := $add.ref(out_$p726, $mul.ref(out_$i745, 1));
    goto corral_source_split_6285;

  corral_source_split_6283:
    assume {:verifier.code 0} true;
    out_$i745 := $sext.i32.i64(out_$i744);
    goto corral_source_split_6284;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1085} out_$i744 := sprintf.ref.ref.i32(out_$p726, .str.4, out_$i743);
    goto corral_source_split_6283;

  corral_source_split_6281:
    assume {:verifier.code 0} true;
    out_$i743 := $zext.i8.i32(out_$i742);
    goto corral_source_split_6282;

  corral_source_split_6280:
    assume {:verifier.code 0} true;
    out_$i742 := $load.i8($M.0, out_$p725);
    goto corral_source_split_6281;

  $bb336:
    assume {:verifier.code 0} true;
    out_$p741 := $add.ref(out_$p725, $mul.ref(1, 1));
    goto corral_source_split_6280;

  $bb338:
    assume {:verifier.code 0} true;
    assume out_$i735 == 1;
    goto $bb336;

  $bb335:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb336;

  $bb334:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb335, $bb337;

  corral_source_split_6278:
    assume {:verifier.code 0} true;
    goto $bb334;

  $bb332:
    assume out_$i734 == 1;
    goto corral_source_split_6278;

  corral_source_split_6276:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb332, $bb333;

  corral_source_split_6275:
    assume {:verifier.code 0} true;
    out_$i734 := $sgt.i32(out_$i719, 0);
    goto corral_source_split_6276;

  corral_source_split_6274:
    assume {:verifier.code 0} true;
    out_$i733 := $sub.i32(out_$i719, 1);
    goto corral_source_split_6275;

  $bb331:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6274;

  corral_source_split_6272:
    assume {:verifier.code 0} true;
    out_$p724 := $add.ref(out_$p712, $mul.ref(out_$i723, 1));
    assume {:verifier.code 0} true;
    out_$p725, out_$p726 := out_$p711, out_$p724;
    goto $bb331;

  corral_source_split_6265:
    assume {:verifier.code 0} true;
    out_$p725, out_$p726 := out_$p727, out_$p732;
    goto $bb331;

  corral_source_split_6264:
    assume {:verifier.code 0} true;
    out_$p732 := $add.ref(out_$p712, $mul.ref(out_$i731, 1));
    goto corral_source_split_6265;

  corral_source_split_6263:
    assume {:verifier.code 0} true;
    out_$i731 := $sext.i32.i64(out_$i730);
    goto corral_source_split_6264;

  corral_source_split_6262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1083} out_$i730 := sprintf.ref.ref.i32(out_$p712, .str.4, out_$i729);
    goto corral_source_split_6263;

  corral_source_split_6261:
    assume {:verifier.code 0} true;
    out_$i729 := $zext.i8.i32(out_$i728);
    goto corral_source_split_6262;

  corral_source_split_6260:
    assume {:verifier.code 0} true;
    out_$i728 := $load.i8($M.0, out_$p711);
    goto corral_source_split_6261;

  $bb327:
    assume {:verifier.code 0} true;
    out_$p727 := $add.ref(out_$p711, $mul.ref(1, 1));
    goto corral_source_split_6260;

  $bb329:
    assume {:verifier.code 0} true;
    assume out_$i721 == 1;
    goto $bb327;

  $bb326:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb327;

  $bb325:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb326, $bb328;

  corral_source_split_6258:
    assume {:verifier.code 0} true;
    goto $bb325;

  $bb323:
    assume out_$i720 == 1;
    goto corral_source_split_6258;

  corral_source_split_6256:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb323, $bb324;

  corral_source_split_6255:
    assume {:verifier.code 0} true;
    out_$i720 := $sgt.i32(out_$i705, 0);
    goto corral_source_split_6256;

  corral_source_split_6254:
    assume {:verifier.code 0} true;
    out_$i719 := $sub.i32(out_$i705, 1);
    goto corral_source_split_6255;

  $bb322:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6254;

  corral_source_split_6252:
    assume {:verifier.code 0} true;
    out_$p710 := $add.ref(out_$p698, $mul.ref(out_$i709, 1));
    assume {:verifier.code 0} true;
    out_$p711, out_$p712 := out_$p697, out_$p710;
    goto $bb322;

  corral_source_split_6245:
    assume {:verifier.code 0} true;
    out_$p711, out_$p712 := out_$p713, out_$p718;
    goto $bb322;

  corral_source_split_6244:
    assume {:verifier.code 0} true;
    out_$p718 := $add.ref(out_$p698, $mul.ref(out_$i717, 1));
    goto corral_source_split_6245;

  corral_source_split_6243:
    assume {:verifier.code 0} true;
    out_$i717 := $sext.i32.i64(out_$i716);
    goto corral_source_split_6244;

  corral_source_split_6242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1081} out_$i716 := sprintf.ref.ref.i32(out_$p698, .str.4, out_$i715);
    goto corral_source_split_6243;

  corral_source_split_6241:
    assume {:verifier.code 0} true;
    out_$i715 := $zext.i8.i32(out_$i714);
    goto corral_source_split_6242;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    out_$i714 := $load.i8($M.0, out_$p697);
    goto corral_source_split_6241;

  $bb318:
    assume {:verifier.code 0} true;
    out_$p713 := $add.ref(out_$p697, $mul.ref(1, 1));
    goto corral_source_split_6240;

  $bb320:
    assume {:verifier.code 0} true;
    assume out_$i707 == 1;
    goto $bb318;

  $bb317:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb318;

  $bb316:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb317, $bb319;

  corral_source_split_6238:
    assume {:verifier.code 0} true;
    goto $bb316;

  $bb314:
    assume out_$i706 == 1;
    goto corral_source_split_6238;

  corral_source_split_6236:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb314, $bb315;

  corral_source_split_6235:
    assume {:verifier.code 0} true;
    out_$i706 := $sgt.i32(out_$i691, 0);
    goto corral_source_split_6236;

  corral_source_split_6234:
    assume {:verifier.code 0} true;
    out_$i705 := $sub.i32(out_$i691, 1);
    goto corral_source_split_6235;

  $bb313:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6234;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    out_$p696 := $add.ref(out_$p684, $mul.ref(out_$i695, 1));
    assume {:verifier.code 0} true;
    out_$p697, out_$p698 := out_$p683, out_$p696;
    goto $bb313;

  corral_source_split_6225:
    assume {:verifier.code 0} true;
    out_$p697, out_$p698 := out_$p699, out_$p704;
    goto $bb313;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    out_$p704 := $add.ref(out_$p684, $mul.ref(out_$i703, 1));
    goto corral_source_split_6225;

  corral_source_split_6223:
    assume {:verifier.code 0} true;
    out_$i703 := $sext.i32.i64(out_$i702);
    goto corral_source_split_6224;

  corral_source_split_6222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1079} out_$i702 := sprintf.ref.ref.i32(out_$p684, .str.4, out_$i701);
    goto corral_source_split_6223;

  corral_source_split_6221:
    assume {:verifier.code 0} true;
    out_$i701 := $zext.i8.i32(out_$i700);
    goto corral_source_split_6222;

  corral_source_split_6220:
    assume {:verifier.code 0} true;
    out_$i700 := $load.i8($M.0, out_$p683);
    goto corral_source_split_6221;

  $bb309:
    assume {:verifier.code 0} true;
    out_$p699 := $add.ref(out_$p683, $mul.ref(1, 1));
    goto corral_source_split_6220;

  $bb311:
    assume {:verifier.code 0} true;
    assume out_$i693 == 1;
    goto $bb309;

  $bb308:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb309;

  $bb307:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb308, $bb310;

  corral_source_split_6218:
    assume {:verifier.code 0} true;
    goto $bb307;

  $bb305:
    assume out_$i692 == 1;
    goto corral_source_split_6218;

  corral_source_split_6216:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb305, $bb306;

  corral_source_split_6215:
    assume {:verifier.code 0} true;
    out_$i692 := $sgt.i32(out_$i677, 0);
    goto corral_source_split_6216;

  corral_source_split_6214:
    assume {:verifier.code 0} true;
    out_$i691 := $sub.i32(out_$i677, 1);
    goto corral_source_split_6215;

  $bb304:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6214;

  corral_source_split_6212:
    assume {:verifier.code 0} true;
    out_$p682 := $add.ref(out_$p670, $mul.ref(out_$i681, 1));
    assume {:verifier.code 0} true;
    out_$p683, out_$p684 := out_$p669, out_$p682;
    goto $bb304;

  corral_source_split_6205:
    assume {:verifier.code 0} true;
    out_$p683, out_$p684 := out_$p685, out_$p690;
    goto $bb304;

  corral_source_split_6204:
    assume {:verifier.code 0} true;
    out_$p690 := $add.ref(out_$p670, $mul.ref(out_$i689, 1));
    goto corral_source_split_6205;

  corral_source_split_6203:
    assume {:verifier.code 0} true;
    out_$i689 := $sext.i32.i64(out_$i688);
    goto corral_source_split_6204;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1077} out_$i688 := sprintf.ref.ref.i32(out_$p670, .str.4, out_$i687);
    goto corral_source_split_6203;

  corral_source_split_6201:
    assume {:verifier.code 0} true;
    out_$i687 := $zext.i8.i32(out_$i686);
    goto corral_source_split_6202;

  corral_source_split_6200:
    assume {:verifier.code 0} true;
    out_$i686 := $load.i8($M.0, out_$p669);
    goto corral_source_split_6201;

  $bb300:
    assume {:verifier.code 0} true;
    out_$p685 := $add.ref(out_$p669, $mul.ref(1, 1));
    goto corral_source_split_6200;

  $bb302:
    assume {:verifier.code 0} true;
    assume out_$i679 == 1;
    goto $bb300;

  $bb299:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb300;

  $bb298:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb299, $bb301;

  corral_source_split_6198:
    assume {:verifier.code 0} true;
    goto $bb298;

  $bb296:
    assume out_$i678 == 1;
    goto corral_source_split_6198;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb296, $bb297;

  corral_source_split_6195:
    assume {:verifier.code 0} true;
    out_$i678 := $sgt.i32(out_$i663, 0);
    goto corral_source_split_6196;

  corral_source_split_6194:
    assume {:verifier.code 0} true;
    out_$i677 := $sub.i32(out_$i663, 1);
    goto corral_source_split_6195;

  $bb295:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6194;

  corral_source_split_6192:
    assume {:verifier.code 0} true;
    out_$p668 := $add.ref(out_$p656, $mul.ref(out_$i667, 1));
    assume {:verifier.code 0} true;
    out_$p669, out_$p670 := out_$p655, out_$p668;
    goto $bb295;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    out_$p669, out_$p670 := out_$p671, out_$p676;
    goto $bb295;

  corral_source_split_6184:
    assume {:verifier.code 0} true;
    out_$p676 := $add.ref(out_$p656, $mul.ref(out_$i675, 1));
    goto corral_source_split_6185;

  corral_source_split_6183:
    assume {:verifier.code 0} true;
    out_$i675 := $sext.i32.i64(out_$i674);
    goto corral_source_split_6184;

  corral_source_split_6182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1075} out_$i674 := sprintf.ref.ref.i32(out_$p656, .str.4, out_$i673);
    goto corral_source_split_6183;

  corral_source_split_6181:
    assume {:verifier.code 0} true;
    out_$i673 := $zext.i8.i32(out_$i672);
    goto corral_source_split_6182;

  corral_source_split_6180:
    assume {:verifier.code 0} true;
    out_$i672 := $load.i8($M.0, out_$p655);
    goto corral_source_split_6181;

  $bb291:
    assume {:verifier.code 0} true;
    out_$p671 := $add.ref(out_$p655, $mul.ref(1, 1));
    goto corral_source_split_6180;

  $bb293:
    assume {:verifier.code 0} true;
    assume out_$i665 == 1;
    goto $bb291;

  $bb290:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb291;

  $bb289:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb290, $bb292;

  corral_source_split_6178:
    assume {:verifier.code 0} true;
    goto $bb289;

  $bb287:
    assume out_$i664 == 1;
    goto corral_source_split_6178;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb287, $bb288;

  corral_source_split_6175:
    assume {:verifier.code 0} true;
    out_$i664 := $sgt.i32(out_$i649, 0);
    goto corral_source_split_6176;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    out_$i663 := $sub.i32(out_$i649, 1);
    goto corral_source_split_6175;

  $bb286:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6174;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    out_$p654 := $add.ref(out_$p642, $mul.ref(out_$i653, 1));
    assume {:verifier.code 0} true;
    out_$p655, out_$p656 := out_$p641, out_$p654;
    goto $bb286;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    out_$p655, out_$p656 := out_$p657, out_$p662;
    goto $bb286;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    out_$p662 := $add.ref(out_$p642, $mul.ref(out_$i661, 1));
    goto corral_source_split_6165;

  corral_source_split_6163:
    assume {:verifier.code 0} true;
    out_$i661 := $sext.i32.i64(out_$i660);
    goto corral_source_split_6164;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1073} out_$i660 := sprintf.ref.ref.i32(out_$p642, .str.4, out_$i659);
    goto corral_source_split_6163;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    out_$i659 := $zext.i8.i32(out_$i658);
    goto corral_source_split_6162;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    out_$i658 := $load.i8($M.0, out_$p641);
    goto corral_source_split_6161;

  $bb282:
    assume {:verifier.code 0} true;
    out_$p657 := $add.ref(out_$p641, $mul.ref(1, 1));
    goto corral_source_split_6160;

  $bb284:
    assume {:verifier.code 0} true;
    assume out_$i651 == 1;
    goto $bb282;

  $bb281:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb282;

  $bb280:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb281, $bb283;

  corral_source_split_6158:
    assume {:verifier.code 0} true;
    goto $bb280;

  $bb278:
    assume out_$i650 == 1;
    goto corral_source_split_6158;

  corral_source_split_6156:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb278, $bb279;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    out_$i650 := $sgt.i32(out_$i635, 0);
    goto corral_source_split_6156;

  corral_source_split_6154:
    assume {:verifier.code 0} true;
    out_$i649 := $sub.i32(out_$i635, 1);
    goto corral_source_split_6155;

  $bb277:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6154;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    out_$p640 := $add.ref(out_$p628, $mul.ref(out_$i639, 1));
    assume {:verifier.code 0} true;
    out_$p641, out_$p642 := out_$p627, out_$p640;
    goto $bb277;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    out_$p641, out_$p642 := out_$p643, out_$p648;
    goto $bb277;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    out_$p648 := $add.ref(out_$p628, $mul.ref(out_$i647, 1));
    goto corral_source_split_6145;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    out_$i647 := $sext.i32.i64(out_$i646);
    goto corral_source_split_6144;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1071} out_$i646 := sprintf.ref.ref.i32(out_$p628, .str.4, out_$i645);
    goto corral_source_split_6143;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    out_$i645 := $zext.i8.i32(out_$i644);
    goto corral_source_split_6142;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    out_$i644 := $load.i8($M.0, out_$p627);
    goto corral_source_split_6141;

  $bb273:
    assume {:verifier.code 0} true;
    out_$p643 := $add.ref(out_$p627, $mul.ref(1, 1));
    goto corral_source_split_6140;

  $bb275:
    assume {:verifier.code 0} true;
    assume out_$i637 == 1;
    goto $bb273;

  $bb272:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb273;

  $bb271:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb272, $bb274;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb269:
    assume out_$i636 == 1;
    goto corral_source_split_6138;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb269, $bb270;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    out_$i636 := $sgt.i32(out_$i621, 0);
    goto corral_source_split_6136;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    out_$i635 := $sub.i32(out_$i621, 1);
    goto corral_source_split_6135;

  $bb268:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6134;

  corral_source_split_6132:
    assume {:verifier.code 0} true;
    out_$p626 := $add.ref(out_$p614, $mul.ref(out_$i625, 1));
    assume {:verifier.code 0} true;
    out_$p627, out_$p628 := out_$p613, out_$p626;
    goto $bb268;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    out_$p627, out_$p628 := out_$p629, out_$p634;
    goto $bb268;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    out_$p634 := $add.ref(out_$p614, $mul.ref(out_$i633, 1));
    goto corral_source_split_6125;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    out_$i633 := $sext.i32.i64(out_$i632);
    goto corral_source_split_6124;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1069} out_$i632 := sprintf.ref.ref.i32(out_$p614, .str.4, out_$i631);
    goto corral_source_split_6123;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    out_$i631 := $zext.i8.i32(out_$i630);
    goto corral_source_split_6122;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    out_$i630 := $load.i8($M.0, out_$p613);
    goto corral_source_split_6121;

  $bb264:
    assume {:verifier.code 0} true;
    out_$p629 := $add.ref(out_$p613, $mul.ref(1, 1));
    goto corral_source_split_6120;

  $bb266:
    assume {:verifier.code 0} true;
    assume out_$i623 == 1;
    goto $bb264;

  $bb263:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb264;

  $bb262:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb263, $bb265;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb260:
    assume out_$i622 == 1;
    goto corral_source_split_6118;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb260, $bb261;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    out_$i622 := $sgt.i32(out_$i607, 0);
    goto corral_source_split_6116;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    out_$i621 := $sub.i32(out_$i607, 1);
    goto corral_source_split_6115;

  $bb259:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6114;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    out_$p612 := $add.ref(out_$p600, $mul.ref(out_$i611, 1));
    assume {:verifier.code 0} true;
    out_$p613, out_$p614 := out_$p599, out_$p612;
    goto $bb259;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    out_$p613, out_$p614 := out_$p615, out_$p620;
    goto $bb259;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    out_$p620 := $add.ref(out_$p600, $mul.ref(out_$i619, 1));
    goto corral_source_split_6105;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    out_$i619 := $sext.i32.i64(out_$i618);
    goto corral_source_split_6104;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1067} out_$i618 := sprintf.ref.ref.i32(out_$p600, .str.4, out_$i617);
    goto corral_source_split_6103;

  corral_source_split_6101:
    assume {:verifier.code 0} true;
    out_$i617 := $zext.i8.i32(out_$i616);
    goto corral_source_split_6102;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    out_$i616 := $load.i8($M.0, out_$p599);
    goto corral_source_split_6101;

  $bb255:
    assume {:verifier.code 0} true;
    out_$p615 := $add.ref(out_$p599, $mul.ref(1, 1));
    goto corral_source_split_6100;

  $bb257:
    assume {:verifier.code 0} true;
    assume out_$i609 == 1;
    goto $bb255;

  $bb254:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb255;

  $bb253:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb254, $bb256;

  corral_source_split_6098:
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb251:
    assume out_$i608 == 1;
    goto corral_source_split_6098;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb251, $bb252;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    out_$i608 := $sgt.i32(out_$i593, 0);
    goto corral_source_split_6096;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    out_$i607 := $sub.i32(out_$i593, 1);
    goto corral_source_split_6095;

  $bb250:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6094;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    out_$p598 := $add.ref(out_$p586, $mul.ref(out_$i597, 1));
    assume {:verifier.code 0} true;
    out_$p599, out_$p600 := out_$p585, out_$p598;
    goto $bb250;

  corral_source_split_6085:
    assume {:verifier.code 0} true;
    out_$p599, out_$p600 := out_$p601, out_$p606;
    goto $bb250;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    out_$p606 := $add.ref(out_$p586, $mul.ref(out_$i605, 1));
    goto corral_source_split_6085;

  corral_source_split_6083:
    assume {:verifier.code 0} true;
    out_$i605 := $sext.i32.i64(out_$i604);
    goto corral_source_split_6084;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1065} out_$i604 := sprintf.ref.ref.i32(out_$p586, .str.4, out_$i603);
    goto corral_source_split_6083;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    out_$i603 := $zext.i8.i32(out_$i602);
    goto corral_source_split_6082;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    out_$i602 := $load.i8($M.0, out_$p585);
    goto corral_source_split_6081;

  $bb246:
    assume {:verifier.code 0} true;
    out_$p601 := $add.ref(out_$p585, $mul.ref(1, 1));
    goto corral_source_split_6080;

  $bb248:
    assume {:verifier.code 0} true;
    assume out_$i595 == 1;
    goto $bb246;

  $bb245:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb246;

  $bb244:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb245, $bb247;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb242:
    assume out_$i594 == 1;
    goto corral_source_split_6078;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb242, $bb243;

  corral_source_split_6075:
    assume {:verifier.code 0} true;
    out_$i594 := $sgt.i32(out_$i579, 0);
    goto corral_source_split_6076;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    out_$i593 := $sub.i32(out_$i579, 1);
    goto corral_source_split_6075;

  $bb241:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6074;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    out_$p584 := $add.ref(out_$p572, $mul.ref(out_$i583, 1));
    assume {:verifier.code 0} true;
    out_$p585, out_$p586 := out_$p571, out_$p584;
    goto $bb241;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    out_$p585, out_$p586 := out_$p587, out_$p592;
    goto $bb241;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    out_$p592 := $add.ref(out_$p572, $mul.ref(out_$i591, 1));
    goto corral_source_split_6065;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    out_$i591 := $sext.i32.i64(out_$i590);
    goto corral_source_split_6064;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1063} out_$i590 := sprintf.ref.ref.i32(out_$p572, .str.4, out_$i589);
    goto corral_source_split_6063;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    out_$i589 := $zext.i8.i32(out_$i588);
    goto corral_source_split_6062;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    out_$i588 := $load.i8($M.0, out_$p571);
    goto corral_source_split_6061;

  $bb237:
    assume {:verifier.code 0} true;
    out_$p587 := $add.ref(out_$p571, $mul.ref(1, 1));
    goto corral_source_split_6060;

  $bb239:
    assume {:verifier.code 0} true;
    assume out_$i581 == 1;
    goto $bb237;

  $bb236:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb237;

  $bb235:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb236, $bb238;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb233:
    assume out_$i580 == 1;
    goto corral_source_split_6058;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb233, $bb234;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    out_$i580 := $sgt.i32(out_$i565, 0);
    goto corral_source_split_6056;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    out_$i579 := $sub.i32(out_$i565, 1);
    goto corral_source_split_6055;

  $bb232:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6054;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    out_$p570 := $add.ref(out_$p558, $mul.ref(out_$i569, 1));
    assume {:verifier.code 0} true;
    out_$p571, out_$p572 := out_$p557, out_$p570;
    goto $bb232;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    out_$p571, out_$p572 := out_$p573, out_$p578;
    goto $bb232;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    out_$p578 := $add.ref(out_$p558, $mul.ref(out_$i577, 1));
    goto corral_source_split_6045;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    out_$i577 := $sext.i32.i64(out_$i576);
    goto corral_source_split_6044;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1061} out_$i576 := sprintf.ref.ref.i32(out_$p558, .str.4, out_$i575);
    goto corral_source_split_6043;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    out_$i575 := $zext.i8.i32(out_$i574);
    goto corral_source_split_6042;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    out_$i574 := $load.i8($M.0, out_$p557);
    goto corral_source_split_6041;

  $bb228:
    assume {:verifier.code 0} true;
    out_$p573 := $add.ref(out_$p557, $mul.ref(1, 1));
    goto corral_source_split_6040;

  $bb230:
    assume {:verifier.code 0} true;
    assume out_$i567 == 1;
    goto $bb228;

  $bb227:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb228;

  $bb226:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb227, $bb229;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb224:
    assume out_$i566 == 1;
    goto corral_source_split_6038;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb224, $bb225;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    out_$i566 := $sgt.i32(out_$i551, 0);
    goto corral_source_split_6036;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    out_$i565 := $sub.i32(out_$i551, 1);
    goto corral_source_split_6035;

  $bb223:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6034;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    out_$p556 := $add.ref(out_$p544, $mul.ref(out_$i555, 1));
    assume {:verifier.code 0} true;
    out_$p557, out_$p558 := out_$p543, out_$p556;
    goto $bb223;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    out_$p557, out_$p558 := out_$p559, out_$p564;
    goto $bb223;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    out_$p564 := $add.ref(out_$p544, $mul.ref(out_$i563, 1));
    goto corral_source_split_6025;

  corral_source_split_6023:
    assume {:verifier.code 0} true;
    out_$i563 := $sext.i32.i64(out_$i562);
    goto corral_source_split_6024;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1059} out_$i562 := sprintf.ref.ref.i32(out_$p544, .str.4, out_$i561);
    goto corral_source_split_6023;

  corral_source_split_6021:
    assume {:verifier.code 0} true;
    out_$i561 := $zext.i8.i32(out_$i560);
    goto corral_source_split_6022;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    out_$i560 := $load.i8($M.0, out_$p543);
    goto corral_source_split_6021;

  $bb219:
    assume {:verifier.code 0} true;
    out_$p559 := $add.ref(out_$p543, $mul.ref(1, 1));
    goto corral_source_split_6020;

  $bb221:
    assume {:verifier.code 0} true;
    assume out_$i553 == 1;
    goto $bb219;

  $bb218:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb219;

  $bb217:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb218, $bb220;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb215:
    assume out_$i552 == 1;
    goto corral_source_split_6018;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb215, $bb216;

  corral_source_split_6015:
    assume {:verifier.code 0} true;
    out_$i552 := $sgt.i32(out_$i537, 0);
    goto corral_source_split_6016;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    out_$i551 := $sub.i32(out_$i537, 1);
    goto corral_source_split_6015;

  $bb214:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6014;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    out_$p542 := $add.ref(out_$p530, $mul.ref(out_$i541, 1));
    assume {:verifier.code 0} true;
    out_$p543, out_$p544 := out_$p529, out_$p542;
    goto $bb214;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    out_$p543, out_$p544 := out_$p545, out_$p550;
    goto $bb214;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    out_$p550 := $add.ref(out_$p530, $mul.ref(out_$i549, 1));
    goto corral_source_split_6005;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    out_$i549 := $sext.i32.i64(out_$i548);
    goto corral_source_split_6004;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1057} out_$i548 := sprintf.ref.ref.i32(out_$p530, .str.4, out_$i547);
    goto corral_source_split_6003;

  corral_source_split_6001:
    assume {:verifier.code 0} true;
    out_$i547 := $zext.i8.i32(out_$i546);
    goto corral_source_split_6002;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    out_$i546 := $load.i8($M.0, out_$p529);
    goto corral_source_split_6001;

  $bb210:
    assume {:verifier.code 0} true;
    out_$p545 := $add.ref(out_$p529, $mul.ref(1, 1));
    goto corral_source_split_6000;

  $bb212:
    assume {:verifier.code 0} true;
    assume out_$i539 == 1;
    goto $bb210;

  $bb209:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb210;

  $bb208:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb209, $bb211;

  corral_source_split_5998:
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb206:
    assume out_$i538 == 1;
    goto corral_source_split_5998;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb206, $bb207;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    out_$i538 := $sgt.i32(out_$i523, 0);
    goto corral_source_split_5996;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    out_$i537 := $sub.i32(out_$i523, 1);
    goto corral_source_split_5995;

  $bb205:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5994;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    out_$p528 := $add.ref(out_$p516, $mul.ref(out_$i527, 1));
    assume {:verifier.code 0} true;
    out_$p529, out_$p530 := out_$p515, out_$p528;
    goto $bb205;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    out_$p529, out_$p530 := out_$p531, out_$p536;
    goto $bb205;

  corral_source_split_5984:
    assume {:verifier.code 0} true;
    out_$p536 := $add.ref(out_$p516, $mul.ref(out_$i535, 1));
    goto corral_source_split_5985;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    out_$i535 := $sext.i32.i64(out_$i534);
    goto corral_source_split_5984;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1055} out_$i534 := sprintf.ref.ref.i32(out_$p516, .str.4, out_$i533);
    goto corral_source_split_5983;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    out_$i533 := $zext.i8.i32(out_$i532);
    goto corral_source_split_5982;

  corral_source_split_5980:
    assume {:verifier.code 0} true;
    out_$i532 := $load.i8($M.0, out_$p515);
    goto corral_source_split_5981;

  $bb201:
    assume {:verifier.code 0} true;
    out_$p531 := $add.ref(out_$p515, $mul.ref(1, 1));
    goto corral_source_split_5980;

  $bb203:
    assume {:verifier.code 0} true;
    assume out_$i525 == 1;
    goto $bb201;

  $bb200:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb201;

  $bb199:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb200, $bb202;

  corral_source_split_5978:
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb197:
    assume out_$i524 == 1;
    goto corral_source_split_5978;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb197, $bb198;

  corral_source_split_5975:
    assume {:verifier.code 0} true;
    out_$i524 := $sgt.i32(out_$i509, 0);
    goto corral_source_split_5976;

  corral_source_split_5974:
    assume {:verifier.code 0} true;
    out_$i523 := $sub.i32(out_$i509, 1);
    goto corral_source_split_5975;

  $bb196:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5974;

  corral_source_split_5972:
    assume {:verifier.code 0} true;
    out_$p514 := $add.ref(out_$p502, $mul.ref(out_$i513, 1));
    assume {:verifier.code 0} true;
    out_$p515, out_$p516 := out_$p501, out_$p514;
    goto $bb196;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    out_$p515, out_$p516 := out_$p517, out_$p522;
    goto $bb196;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    out_$p522 := $add.ref(out_$p502, $mul.ref(out_$i521, 1));
    goto corral_source_split_5965;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    out_$i521 := $sext.i32.i64(out_$i520);
    goto corral_source_split_5964;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1053} out_$i520 := sprintf.ref.ref.i32(out_$p502, .str.4, out_$i519);
    goto corral_source_split_5963;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    out_$i519 := $zext.i8.i32(out_$i518);
    goto corral_source_split_5962;

  corral_source_split_5960:
    assume {:verifier.code 0} true;
    out_$i518 := $load.i8($M.0, out_$p501);
    goto corral_source_split_5961;

  $bb192:
    assume {:verifier.code 0} true;
    out_$p517 := $add.ref(out_$p501, $mul.ref(1, 1));
    goto corral_source_split_5960;

  $bb194:
    assume {:verifier.code 0} true;
    assume out_$i511 == 1;
    goto $bb192;

  $bb191:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb192;

  $bb190:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb191, $bb193;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb188:
    assume out_$i510 == 1;
    goto corral_source_split_5958;

  corral_source_split_5956:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb188, $bb189;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    out_$i510 := $sgt.i32(out_$i495, 0);
    goto corral_source_split_5956;

  corral_source_split_5954:
    assume {:verifier.code 0} true;
    out_$i509 := $sub.i32(out_$i495, 1);
    goto corral_source_split_5955;

  $bb187:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5954;

  corral_source_split_5952:
    assume {:verifier.code 0} true;
    out_$p500 := $add.ref(out_$p488, $mul.ref(out_$i499, 1));
    assume {:verifier.code 0} true;
    out_$p501, out_$p502 := out_$p487, out_$p500;
    goto $bb187;

  corral_source_split_5945:
    assume {:verifier.code 0} true;
    out_$p501, out_$p502 := out_$p503, out_$p508;
    goto $bb187;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    out_$p508 := $add.ref(out_$p488, $mul.ref(out_$i507, 1));
    goto corral_source_split_5945;

  corral_source_split_5943:
    assume {:verifier.code 0} true;
    out_$i507 := $sext.i32.i64(out_$i506);
    goto corral_source_split_5944;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1051} out_$i506 := sprintf.ref.ref.i32(out_$p488, .str.4, out_$i505);
    goto corral_source_split_5943;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    out_$i505 := $zext.i8.i32(out_$i504);
    goto corral_source_split_5942;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    out_$i504 := $load.i8($M.0, out_$p487);
    goto corral_source_split_5941;

  $bb183:
    assume {:verifier.code 0} true;
    out_$p503 := $add.ref(out_$p487, $mul.ref(1, 1));
    goto corral_source_split_5940;

  $bb185:
    assume {:verifier.code 0} true;
    assume out_$i497 == 1;
    goto $bb183;

  $bb182:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb183;

  $bb181:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb182, $bb184;

  corral_source_split_5938:
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb179:
    assume out_$i496 == 1;
    goto corral_source_split_5938;

  corral_source_split_5936:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb179, $bb180;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    out_$i496 := $sgt.i32(out_$i481, 0);
    goto corral_source_split_5936;

  corral_source_split_5934:
    assume {:verifier.code 0} true;
    out_$i495 := $sub.i32(out_$i481, 1);
    goto corral_source_split_5935;

  $bb178:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5934;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    out_$p486 := $add.ref(out_$p474, $mul.ref(out_$i485, 1));
    assume {:verifier.code 0} true;
    out_$p487, out_$p488 := out_$p473, out_$p486;
    goto $bb178;

  corral_source_split_5925:
    assume {:verifier.code 0} true;
    out_$p487, out_$p488 := out_$p489, out_$p494;
    goto $bb178;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    out_$p494 := $add.ref(out_$p474, $mul.ref(out_$i493, 1));
    goto corral_source_split_5925;

  corral_source_split_5923:
    assume {:verifier.code 0} true;
    out_$i493 := $sext.i32.i64(out_$i492);
    goto corral_source_split_5924;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1049} out_$i492 := sprintf.ref.ref.i32(out_$p474, .str.4, out_$i491);
    goto corral_source_split_5923;

  corral_source_split_5921:
    assume {:verifier.code 0} true;
    out_$i491 := $zext.i8.i32(out_$i490);
    goto corral_source_split_5922;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    out_$i490 := $load.i8($M.0, out_$p473);
    goto corral_source_split_5921;

  $bb174:
    assume {:verifier.code 0} true;
    out_$p489 := $add.ref(out_$p473, $mul.ref(1, 1));
    goto corral_source_split_5920;

  $bb176:
    assume {:verifier.code 0} true;
    assume out_$i483 == 1;
    goto $bb174;

  $bb173:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb174;

  $bb172:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb173, $bb175;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb170:
    assume out_$i482 == 1;
    goto corral_source_split_5918;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb170, $bb171;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    out_$i482 := $sgt.i32(out_$i467, 0);
    goto corral_source_split_5916;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    out_$i481 := $sub.i32(out_$i467, 1);
    goto corral_source_split_5915;

  $bb169:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5914;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    out_$p472 := $add.ref(out_$p460, $mul.ref(out_$i471, 1));
    assume {:verifier.code 0} true;
    out_$p473, out_$p474 := out_$p459, out_$p472;
    goto $bb169;

  corral_source_split_5905:
    assume {:verifier.code 0} true;
    out_$p473, out_$p474 := out_$p475, out_$p480;
    goto $bb169;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    out_$p480 := $add.ref(out_$p460, $mul.ref(out_$i479, 1));
    goto corral_source_split_5905;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    out_$i479 := $sext.i32.i64(out_$i478);
    goto corral_source_split_5904;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1047} out_$i478 := sprintf.ref.ref.i32(out_$p460, .str.4, out_$i477);
    goto corral_source_split_5903;

  corral_source_split_5901:
    assume {:verifier.code 0} true;
    out_$i477 := $zext.i8.i32(out_$i476);
    goto corral_source_split_5902;

  corral_source_split_5900:
    assume {:verifier.code 0} true;
    out_$i476 := $load.i8($M.0, out_$p459);
    goto corral_source_split_5901;

  $bb165:
    assume {:verifier.code 0} true;
    out_$p475 := $add.ref(out_$p459, $mul.ref(1, 1));
    goto corral_source_split_5900;

  $bb167:
    assume {:verifier.code 0} true;
    assume out_$i469 == 1;
    goto $bb165;

  $bb164:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb165;

  $bb163:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb164, $bb166;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb161:
    assume out_$i468 == 1;
    goto corral_source_split_5898;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb161, $bb162;

  corral_source_split_5895:
    assume {:verifier.code 0} true;
    out_$i468 := $sgt.i32(out_$i453, 0);
    goto corral_source_split_5896;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    out_$i467 := $sub.i32(out_$i453, 1);
    goto corral_source_split_5895;

  $bb160:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5894;

  corral_source_split_5892:
    assume {:verifier.code 0} true;
    out_$p458 := $add.ref(out_$p446, $mul.ref(out_$i457, 1));
    assume {:verifier.code 0} true;
    out_$p459, out_$p460 := out_$p445, out_$p458;
    goto $bb160;

  corral_source_split_5885:
    assume {:verifier.code 0} true;
    out_$p459, out_$p460 := out_$p461, out_$p466;
    goto $bb160;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    out_$p466 := $add.ref(out_$p446, $mul.ref(out_$i465, 1));
    goto corral_source_split_5885;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    out_$i465 := $sext.i32.i64(out_$i464);
    goto corral_source_split_5884;

  corral_source_split_5882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1045} out_$i464 := sprintf.ref.ref.i32(out_$p446, .str.4, out_$i463);
    goto corral_source_split_5883;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    out_$i463 := $zext.i8.i32(out_$i462);
    goto corral_source_split_5882;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    out_$i462 := $load.i8($M.0, out_$p445);
    goto corral_source_split_5881;

  $bb156:
    assume {:verifier.code 0} true;
    out_$p461 := $add.ref(out_$p445, $mul.ref(1, 1));
    goto corral_source_split_5880;

  $bb158:
    assume {:verifier.code 0} true;
    assume out_$i455 == 1;
    goto $bb156;

  $bb155:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb156;

  $bb154:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb155, $bb157;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb152:
    assume out_$i454 == 1;
    goto corral_source_split_5878;

  corral_source_split_5876:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb152, $bb153;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    out_$i454 := $sgt.i32(out_$i439, 0);
    goto corral_source_split_5876;

  corral_source_split_5874:
    assume {:verifier.code 0} true;
    out_$i453 := $sub.i32(out_$i439, 1);
    goto corral_source_split_5875;

  $bb151:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5874;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    out_$p444 := $add.ref(out_$p432, $mul.ref(out_$i443, 1));
    assume {:verifier.code 0} true;
    out_$p445, out_$p446 := out_$p431, out_$p444;
    goto $bb151;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    out_$p445, out_$p446 := out_$p447, out_$p452;
    goto $bb151;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    out_$p452 := $add.ref(out_$p432, $mul.ref(out_$i451, 1));
    goto corral_source_split_5865;

  corral_source_split_5863:
    assume {:verifier.code 0} true;
    out_$i451 := $sext.i32.i64(out_$i450);
    goto corral_source_split_5864;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1043} out_$i450 := sprintf.ref.ref.i32(out_$p432, .str.4, out_$i449);
    goto corral_source_split_5863;

  corral_source_split_5861:
    assume {:verifier.code 0} true;
    out_$i449 := $zext.i8.i32(out_$i448);
    goto corral_source_split_5862;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    out_$i448 := $load.i8($M.0, out_$p431);
    goto corral_source_split_5861;

  $bb147:
    assume {:verifier.code 0} true;
    out_$p447 := $add.ref(out_$p431, $mul.ref(1, 1));
    goto corral_source_split_5860;

  $bb149:
    assume {:verifier.code 0} true;
    assume out_$i441 == 1;
    goto $bb147;

  $bb146:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb147;

  $bb145:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb146, $bb148;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb143:
    assume out_$i440 == 1;
    goto corral_source_split_5858;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb143, $bb144;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    out_$i440 := $sgt.i32(out_$i425, 0);
    goto corral_source_split_5856;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    out_$i439 := $sub.i32(out_$i425, 1);
    goto corral_source_split_5855;

  $bb142:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5854;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    out_$p430 := $add.ref(out_$p418, $mul.ref(out_$i429, 1));
    assume {:verifier.code 0} true;
    out_$p431, out_$p432 := out_$p417, out_$p430;
    goto $bb142;

  corral_source_split_5845:
    assume {:verifier.code 0} true;
    out_$p431, out_$p432 := out_$p433, out_$p438;
    goto $bb142;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    out_$p438 := $add.ref(out_$p418, $mul.ref(out_$i437, 1));
    goto corral_source_split_5845;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    out_$i437 := $sext.i32.i64(out_$i436);
    goto corral_source_split_5844;

  corral_source_split_5842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1041} out_$i436 := sprintf.ref.ref.i32(out_$p418, .str.4, out_$i435);
    goto corral_source_split_5843;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    out_$i435 := $zext.i8.i32(out_$i434);
    goto corral_source_split_5842;

  corral_source_split_5840:
    assume {:verifier.code 0} true;
    out_$i434 := $load.i8($M.0, out_$p417);
    goto corral_source_split_5841;

  $bb138:
    assume {:verifier.code 0} true;
    out_$p433 := $add.ref(out_$p417, $mul.ref(1, 1));
    goto corral_source_split_5840;

  $bb140:
    assume {:verifier.code 0} true;
    assume out_$i427 == 1;
    goto $bb138;

  $bb137:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb138;

  $bb136:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb137, $bb139;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb134:
    assume out_$i426 == 1;
    goto corral_source_split_5838;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb134, $bb135;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    out_$i426 := $sgt.i32(out_$i411, 0);
    goto corral_source_split_5836;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    out_$i425 := $sub.i32(out_$i411, 1);
    goto corral_source_split_5835;

  $bb133:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5834;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    out_$p416 := $add.ref(out_$p404, $mul.ref(out_$i415, 1));
    assume {:verifier.code 0} true;
    out_$p417, out_$p418 := out_$p403, out_$p416;
    goto $bb133;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    out_$p417, out_$p418 := out_$p419, out_$p424;
    goto $bb133;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    out_$p424 := $add.ref(out_$p404, $mul.ref(out_$i423, 1));
    goto corral_source_split_5825;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    out_$i423 := $sext.i32.i64(out_$i422);
    goto corral_source_split_5824;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1039} out_$i422 := sprintf.ref.ref.i32(out_$p404, .str.4, out_$i421);
    goto corral_source_split_5823;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    out_$i421 := $zext.i8.i32(out_$i420);
    goto corral_source_split_5822;

  corral_source_split_5820:
    assume {:verifier.code 0} true;
    out_$i420 := $load.i8($M.0, out_$p403);
    goto corral_source_split_5821;

  $bb129:
    assume {:verifier.code 0} true;
    out_$p419 := $add.ref(out_$p403, $mul.ref(1, 1));
    goto corral_source_split_5820;

  $bb131:
    assume {:verifier.code 0} true;
    assume out_$i413 == 1;
    goto $bb129;

  $bb128:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb129;

  $bb127:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb128, $bb130;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb125:
    assume out_$i412 == 1;
    goto corral_source_split_5818;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb125, $bb126;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    out_$i412 := $sgt.i32(out_$i397, 0);
    goto corral_source_split_5816;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    out_$i411 := $sub.i32(out_$i397, 1);
    goto corral_source_split_5815;

  $bb124:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5814;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    out_$p402 := $add.ref(out_$p390, $mul.ref(out_$i401, 1));
    assume {:verifier.code 0} true;
    out_$p403, out_$p404 := out_$p389, out_$p402;
    goto $bb124;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    out_$p403, out_$p404 := out_$p405, out_$p410;
    goto $bb124;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    out_$p410 := $add.ref(out_$p390, $mul.ref(out_$i409, 1));
    goto corral_source_split_5805;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    out_$i409 := $sext.i32.i64(out_$i408);
    goto corral_source_split_5804;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1037} out_$i408 := sprintf.ref.ref.i32(out_$p390, .str.4, out_$i407);
    goto corral_source_split_5803;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    out_$i407 := $zext.i8.i32(out_$i406);
    goto corral_source_split_5802;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    out_$i406 := $load.i8($M.0, out_$p389);
    goto corral_source_split_5801;

  $bb120:
    assume {:verifier.code 0} true;
    out_$p405 := $add.ref(out_$p389, $mul.ref(1, 1));
    goto corral_source_split_5800;

  $bb122:
    assume {:verifier.code 0} true;
    assume out_$i399 == 1;
    goto $bb120;

  $bb119:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb120;

  $bb118:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb119, $bb121;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb116:
    assume out_$i398 == 1;
    goto corral_source_split_5798;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  corral_source_split_5795:
    assume {:verifier.code 0} true;
    out_$i398 := $sgt.i32(out_$i48, 0);
    goto corral_source_split_5796;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    out_$i397 := $sub.i32(out_$i48, 1);
    goto corral_source_split_5795;

  $bb115:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5794;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    out_$p388 := $add.ref(out_$p44, $mul.ref(out_$i387, 1));
    assume {:verifier.code 0} true;
    out_$p389, out_$p390 := out_$p43, out_$p388;
    goto $bb115;

  corral_source_split_5785:
    assume {:verifier.code 0} true;
    out_$p389, out_$p390 := out_$p391, out_$p396;
    goto $bb115;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    out_$p396 := $add.ref(out_$p44, $mul.ref(out_$i395, 1));
    goto corral_source_split_5785;

  corral_source_split_5783:
    assume {:verifier.code 0} true;
    out_$i395 := $sext.i32.i64(out_$i394);
    goto corral_source_split_5784;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1035} out_$i394 := sprintf.ref.ref.i32(out_$p44, .str.4, out_$i393);
    goto corral_source_split_5783;

  corral_source_split_5781:
    assume {:verifier.code 0} true;
    out_$i393 := $zext.i8.i32(out_$i392);
    goto corral_source_split_5782;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    out_$i392 := $load.i8($M.0, out_$p43);
    goto corral_source_split_5781;

  $bb111:
    assume {:verifier.code 0} true;
    out_$p391 := $add.ref(out_$p43, $mul.ref(1, 1));
    goto corral_source_split_5780;

  $bb113:
    assume {:verifier.code 0} true;
    assume out_$i385 == 1;
    goto $bb111;

  $bb110:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb111;

  $bb109:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb110, $bb112;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb10:
    assume out_$i49 == 1;
    goto corral_source_split_5323;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    out_$i49 := $sgt.i32(out_$i36, 0);
    goto corral_source_split_5321;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    out_$i48 := $sub.i32(out_$i36, 1);
    goto corral_source_split_5320;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5319;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref(out_$p30, $mul.ref(out_$i46, 1));
    assume {:verifier.code 0} true;
    out_$p43, out_$p44 := out_$p33, out_$p47;
    goto $bb9;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    out_$p43, out_$p44 := out_$p37, out_$p42;
    goto $bb9;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref(out_$p30, $mul.ref(out_$i41, 1));
    goto corral_source_split_5310;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    out_$i41 := $sext.i32.i64(out_$i40);
    goto corral_source_split_5309;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 990} out_$i40 := sprintf.ref.ref.i32(out_$p30, .str.4, out_$i39);
    call {:si_unique_call 991} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i40);
    goto corral_source_split_5308;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    out_$i39 := $zext.i8.i32(out_$i38);
    goto corral_source_split_5307;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    out_$i38 := $load.i8($M.0, out_$p33);
    goto corral_source_split_5306;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref(out_$p33, $mul.ref(1, 1));
    goto corral_source_split_5305;

  $bb7:
    assume {:verifier.code 0} true;
    assume out_$i35 == 1;
    goto $bb5;

  $bb4:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb5;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb4, $bb6;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb13:
    assume out_$i50 == 1;
    goto corral_source_split_5325;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    out_$i50 := $sgt.i32(out_$i31, 0);
    goto corral_source_split_5303;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i36 := $sub.i32(out_$i31, 1);
    call {:si_unique_call 989} {:cexpr "m"} boogie_si_record_i32(out_$i36);
    goto corral_source_split_5302;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    goto $bb2;

  corral_source_split_5299:
    assume {:verifier.code 0} true;
    $M.23 := $store.i8($M.23, out_$p34, 0);
    goto corral_source_split_5300;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(in_$p2, $mul.ref(0, 94)), $mul.ref(0, 1));
    goto corral_source_split_5299;

  corral_source_split_5297:
    assume {:verifier.code 0} true;
    out_$p33 := $load.ref($M.0, out_$p32);
    goto corral_source_split_5298;

  corral_source_split_5296:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7400, 1));
    goto corral_source_split_5297;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i32($M.16, in_$p1);
    call {:si_unique_call 988} {:cexpr "m"} boogie_si_record_i32(out_$i31);
    goto corral_source_split_5296;

  corral_source_split_5294:
    assume {:verifier.code 0} true;
    out_$p30 := $bitcast.ref.ref(in_$p2);
    goto corral_source_split_5295;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 986} out_$i29 := usb_bulk_msg(out_$p22, out_$i23, out_$p25, out_$i28, in_$p1, 500);
    call {:si_unique_call 987} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i29);
    goto corral_source_split_5294;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    out_$i28 := $trunc.i64.i32(out_$i27);
    goto corral_source_split_5293;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i64($M.0, out_$p26);
    goto corral_source_split_5292;

  corral_source_split_5290:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7408, 1));
    goto corral_source_split_5291;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    out_$p25 := $load.ref($M.0, out_$p24);
    goto corral_source_split_5290;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7400, 1));
    goto corral_source_split_5289;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    out_$i23 := $or.i32(out_$i20, $sub.i32(0, 1073741696));
    goto corral_source_split_5288;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    out_$p22 := $load.ref($M.0, out_$p21);
    goto corral_source_split_5287;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_5286;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 984} out_$i20 := __create_pipe(out_$p16, out_$i19);
    call {:si_unique_call 985} {:cexpr "tmp"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_5285;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    out_$i19 := $zext.i8.i32(out_$i18);
    goto corral_source_split_5284;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    out_$i18 := $load.i8($M.0, out_$p17);
    goto corral_source_split_5283;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7432, 1));
    goto corral_source_split_5282;

  corral_source_split_5280:
    assume {:verifier.code 0} true;
    out_$p16 := $load.ref($M.0, out_$p15);
    goto corral_source_split_5281;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_5280;

  corral_source_split_5278:
    assume {:verifier.code 0} true;
    $M.16 := $store.i32($M.16, in_$p1, 0);
    goto corral_source_split_5279;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_5312:
    assume {:verifier.code 0} true;
    out_$i35 := $eq.i32(out_$i36, 0);
    goto corral_source_split_5313;

  $bb6:
    assume !(1 == 1);
    goto corral_source_split_5312;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    out_$i46 := $sext.i32.i64(out_$i45);
    goto corral_source_split_5317;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 992} out_$i45 := sprintf.ref.ref(out_$p30, .str.5);
    call {:si_unique_call 993} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i45);
    goto corral_source_split_5316;

  $bb8:
    assume !(out_$i35 == 1);
    goto corral_source_split_5315;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  corral_source_split_5787:
    assume {:verifier.code 0} true;
    out_$i385 := $eq.i32(out_$i48, 0);
    goto corral_source_split_5788;

  $bb112:
    assume !(1 == 1);
    goto corral_source_split_5787;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    out_$i387 := $sext.i32.i64(out_$i386);
    goto corral_source_split_5792;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1036} out_$i386 := sprintf.ref.ref(out_$p44, .str.5);
    goto corral_source_split_5791;

  $bb114:
    assume !(out_$i385 == 1);
    goto corral_source_split_5790;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb122, $bb123;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    out_$i399 := $eq.i32(out_$i397, 0);
    goto corral_source_split_5808;

  $bb121:
    assume !(1 == 1);
    goto corral_source_split_5807;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    out_$i401 := $sext.i32.i64(out_$i400);
    goto corral_source_split_5812;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1038} out_$i400 := sprintf.ref.ref(out_$p390, .str.5);
    goto corral_source_split_5811;

  $bb123:
    assume !(out_$i399 == 1);
    goto corral_source_split_5810;

  corral_source_split_5828:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb131, $bb132;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    out_$i413 := $eq.i32(out_$i411, 0);
    goto corral_source_split_5828;

  $bb130:
    assume !(1 == 1);
    goto corral_source_split_5827;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    out_$i415 := $sext.i32.i64(out_$i414);
    goto corral_source_split_5832;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1040} out_$i414 := sprintf.ref.ref(out_$p404, .str.5);
    goto corral_source_split_5831;

  $bb132:
    assume !(out_$i413 == 1);
    goto corral_source_split_5830;

  corral_source_split_5848:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb140, $bb141;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    out_$i427 := $eq.i32(out_$i425, 0);
    goto corral_source_split_5848;

  $bb139:
    assume !(1 == 1);
    goto corral_source_split_5847;

  corral_source_split_5851:
    assume {:verifier.code 0} true;
    out_$i429 := $sext.i32.i64(out_$i428);
    goto corral_source_split_5852;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1042} out_$i428 := sprintf.ref.ref(out_$p418, .str.5);
    goto corral_source_split_5851;

  $bb141:
    assume !(out_$i427 == 1);
    goto corral_source_split_5850;

  corral_source_split_5868:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb149, $bb150;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    out_$i441 := $eq.i32(out_$i439, 0);
    goto corral_source_split_5868;

  $bb148:
    assume !(1 == 1);
    goto corral_source_split_5867;

  corral_source_split_5871:
    assume {:verifier.code 0} true;
    out_$i443 := $sext.i32.i64(out_$i442);
    goto corral_source_split_5872;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1044} out_$i442 := sprintf.ref.ref(out_$p432, .str.5);
    goto corral_source_split_5871;

  $bb150:
    assume !(out_$i441 == 1);
    goto corral_source_split_5870;

  corral_source_split_5888:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb158, $bb159;

  corral_source_split_5887:
    assume {:verifier.code 0} true;
    out_$i455 := $eq.i32(out_$i453, 0);
    goto corral_source_split_5888;

  $bb157:
    assume !(1 == 1);
    goto corral_source_split_5887;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    out_$i457 := $sext.i32.i64(out_$i456);
    goto corral_source_split_5892;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1046} out_$i456 := sprintf.ref.ref(out_$p446, .str.5);
    goto corral_source_split_5891;

  $bb159:
    assume !(out_$i455 == 1);
    goto corral_source_split_5890;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb167, $bb168;

  corral_source_split_5907:
    assume {:verifier.code 0} true;
    out_$i469 := $eq.i32(out_$i467, 0);
    goto corral_source_split_5908;

  $bb166:
    assume !(1 == 1);
    goto corral_source_split_5907;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    out_$i471 := $sext.i32.i64(out_$i470);
    goto corral_source_split_5912;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1048} out_$i470 := sprintf.ref.ref(out_$p460, .str.5);
    goto corral_source_split_5911;

  $bb168:
    assume !(out_$i469 == 1);
    goto corral_source_split_5910;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb176, $bb177;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    out_$i483 := $eq.i32(out_$i481, 0);
    goto corral_source_split_5928;

  $bb175:
    assume !(1 == 1);
    goto corral_source_split_5927;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    out_$i485 := $sext.i32.i64(out_$i484);
    goto corral_source_split_5932;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1050} out_$i484 := sprintf.ref.ref(out_$p474, .str.5);
    goto corral_source_split_5931;

  $bb177:
    assume !(out_$i483 == 1);
    goto corral_source_split_5930;

  corral_source_split_5948:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb185, $bb186;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    out_$i497 := $eq.i32(out_$i495, 0);
    goto corral_source_split_5948;

  $bb184:
    assume !(1 == 1);
    goto corral_source_split_5947;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    out_$i499 := $sext.i32.i64(out_$i498);
    goto corral_source_split_5952;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1052} out_$i498 := sprintf.ref.ref(out_$p488, .str.5);
    goto corral_source_split_5951;

  $bb186:
    assume !(out_$i497 == 1);
    goto corral_source_split_5950;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb194, $bb195;

  corral_source_split_5967:
    assume {:verifier.code 0} true;
    out_$i511 := $eq.i32(out_$i509, 0);
    goto corral_source_split_5968;

  $bb193:
    assume !(1 == 1);
    goto corral_source_split_5967;

  corral_source_split_5971:
    assume {:verifier.code 0} true;
    out_$i513 := $sext.i32.i64(out_$i512);
    goto corral_source_split_5972;

  corral_source_split_5970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1054} out_$i512 := sprintf.ref.ref(out_$p502, .str.5);
    goto corral_source_split_5971;

  $bb195:
    assume !(out_$i511 == 1);
    goto corral_source_split_5970;

  corral_source_split_5988:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb203, $bb204;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    out_$i525 := $eq.i32(out_$i523, 0);
    goto corral_source_split_5988;

  $bb202:
    assume !(1 == 1);
    goto corral_source_split_5987;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    out_$i527 := $sext.i32.i64(out_$i526);
    goto corral_source_split_5992;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1056} out_$i526 := sprintf.ref.ref(out_$p516, .str.5);
    goto corral_source_split_5991;

  $bb204:
    assume !(out_$i525 == 1);
    goto corral_source_split_5990;

  corral_source_split_6008:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb212, $bb213;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    out_$i539 := $eq.i32(out_$i537, 0);
    goto corral_source_split_6008;

  $bb211:
    assume !(1 == 1);
    goto corral_source_split_6007;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    out_$i541 := $sext.i32.i64(out_$i540);
    goto corral_source_split_6012;

  corral_source_split_6010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1058} out_$i540 := sprintf.ref.ref(out_$p530, .str.5);
    goto corral_source_split_6011;

  $bb213:
    assume !(out_$i539 == 1);
    goto corral_source_split_6010;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb221, $bb222;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    out_$i553 := $eq.i32(out_$i551, 0);
    goto corral_source_split_6028;

  $bb220:
    assume !(1 == 1);
    goto corral_source_split_6027;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    out_$i555 := $sext.i32.i64(out_$i554);
    goto corral_source_split_6032;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1060} out_$i554 := sprintf.ref.ref(out_$p544, .str.5);
    goto corral_source_split_6031;

  $bb222:
    assume !(out_$i553 == 1);
    goto corral_source_split_6030;

  corral_source_split_6048:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb230, $bb231;

  corral_source_split_6047:
    assume {:verifier.code 0} true;
    out_$i567 := $eq.i32(out_$i565, 0);
    goto corral_source_split_6048;

  $bb229:
    assume !(1 == 1);
    goto corral_source_split_6047;

  corral_source_split_6051:
    assume {:verifier.code 0} true;
    out_$i569 := $sext.i32.i64(out_$i568);
    goto corral_source_split_6052;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1062} out_$i568 := sprintf.ref.ref(out_$p558, .str.5);
    goto corral_source_split_6051;

  $bb231:
    assume !(out_$i567 == 1);
    goto corral_source_split_6050;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb239, $bb240;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    out_$i581 := $eq.i32(out_$i579, 0);
    goto corral_source_split_6068;

  $bb238:
    assume !(1 == 1);
    goto corral_source_split_6067;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    out_$i583 := $sext.i32.i64(out_$i582);
    goto corral_source_split_6072;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1064} out_$i582 := sprintf.ref.ref(out_$p572, .str.5);
    goto corral_source_split_6071;

  $bb240:
    assume !(out_$i581 == 1);
    goto corral_source_split_6070;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb248, $bb249;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    out_$i595 := $eq.i32(out_$i593, 0);
    goto corral_source_split_6088;

  $bb247:
    assume !(1 == 1);
    goto corral_source_split_6087;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    out_$i597 := $sext.i32.i64(out_$i596);
    goto corral_source_split_6092;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1066} out_$i596 := sprintf.ref.ref(out_$p586, .str.5);
    goto corral_source_split_6091;

  $bb249:
    assume !(out_$i595 == 1);
    goto corral_source_split_6090;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb257, $bb258;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    out_$i609 := $eq.i32(out_$i607, 0);
    goto corral_source_split_6108;

  $bb256:
    assume !(1 == 1);
    goto corral_source_split_6107;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    out_$i611 := $sext.i32.i64(out_$i610);
    goto corral_source_split_6112;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1068} out_$i610 := sprintf.ref.ref(out_$p600, .str.5);
    goto corral_source_split_6111;

  $bb258:
    assume !(out_$i609 == 1);
    goto corral_source_split_6110;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb266, $bb267;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    out_$i623 := $eq.i32(out_$i621, 0);
    goto corral_source_split_6128;

  $bb265:
    assume !(1 == 1);
    goto corral_source_split_6127;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    out_$i625 := $sext.i32.i64(out_$i624);
    goto corral_source_split_6132;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1070} out_$i624 := sprintf.ref.ref(out_$p614, .str.5);
    goto corral_source_split_6131;

  $bb267:
    assume !(out_$i623 == 1);
    goto corral_source_split_6130;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb275, $bb276;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    out_$i637 := $eq.i32(out_$i635, 0);
    goto corral_source_split_6148;

  $bb274:
    assume !(1 == 1);
    goto corral_source_split_6147;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    out_$i639 := $sext.i32.i64(out_$i638);
    goto corral_source_split_6152;

  corral_source_split_6150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1072} out_$i638 := sprintf.ref.ref(out_$p628, .str.5);
    goto corral_source_split_6151;

  $bb276:
    assume !(out_$i637 == 1);
    goto corral_source_split_6150;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb284, $bb285;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    out_$i651 := $eq.i32(out_$i649, 0);
    goto corral_source_split_6168;

  $bb283:
    assume !(1 == 1);
    goto corral_source_split_6167;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    out_$i653 := $sext.i32.i64(out_$i652);
    goto corral_source_split_6172;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1074} out_$i652 := sprintf.ref.ref(out_$p642, .str.5);
    goto corral_source_split_6171;

  $bb285:
    assume !(out_$i651 == 1);
    goto corral_source_split_6170;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb293, $bb294;

  corral_source_split_6187:
    assume {:verifier.code 0} true;
    out_$i665 := $eq.i32(out_$i663, 0);
    goto corral_source_split_6188;

  $bb292:
    assume !(1 == 1);
    goto corral_source_split_6187;

  corral_source_split_6191:
    assume {:verifier.code 0} true;
    out_$i667 := $sext.i32.i64(out_$i666);
    goto corral_source_split_6192;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1076} out_$i666 := sprintf.ref.ref(out_$p656, .str.5);
    goto corral_source_split_6191;

  $bb294:
    assume !(out_$i665 == 1);
    goto corral_source_split_6190;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb302, $bb303;

  corral_source_split_6207:
    assume {:verifier.code 0} true;
    out_$i679 := $eq.i32(out_$i677, 0);
    goto corral_source_split_6208;

  $bb301:
    assume !(1 == 1);
    goto corral_source_split_6207;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    out_$i681 := $sext.i32.i64(out_$i680);
    goto corral_source_split_6212;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1078} out_$i680 := sprintf.ref.ref(out_$p670, .str.5);
    goto corral_source_split_6211;

  $bb303:
    assume !(out_$i679 == 1);
    goto corral_source_split_6210;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb311, $bb312;

  corral_source_split_6227:
    assume {:verifier.code 0} true;
    out_$i693 := $eq.i32(out_$i691, 0);
    goto corral_source_split_6228;

  $bb310:
    assume !(1 == 1);
    goto corral_source_split_6227;

  corral_source_split_6231:
    assume {:verifier.code 0} true;
    out_$i695 := $sext.i32.i64(out_$i694);
    goto corral_source_split_6232;

  corral_source_split_6230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1080} out_$i694 := sprintf.ref.ref(out_$p684, .str.5);
    goto corral_source_split_6231;

  $bb312:
    assume !(out_$i693 == 1);
    goto corral_source_split_6230;

  corral_source_split_6248:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb320, $bb321;

  corral_source_split_6247:
    assume {:verifier.code 0} true;
    out_$i707 := $eq.i32(out_$i705, 0);
    goto corral_source_split_6248;

  $bb319:
    assume !(1 == 1);
    goto corral_source_split_6247;

  corral_source_split_6251:
    assume {:verifier.code 0} true;
    out_$i709 := $sext.i32.i64(out_$i708);
    goto corral_source_split_6252;

  corral_source_split_6250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1082} out_$i708 := sprintf.ref.ref(out_$p698, .str.5);
    goto corral_source_split_6251;

  $bb321:
    assume !(out_$i707 == 1);
    goto corral_source_split_6250;

  corral_source_split_6268:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb329, $bb330;

  corral_source_split_6267:
    assume {:verifier.code 0} true;
    out_$i721 := $eq.i32(out_$i719, 0);
    goto corral_source_split_6268;

  $bb328:
    assume !(1 == 1);
    goto corral_source_split_6267;

  corral_source_split_6271:
    assume {:verifier.code 0} true;
    out_$i723 := $sext.i32.i64(out_$i722);
    goto corral_source_split_6272;

  corral_source_split_6270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1084} out_$i722 := sprintf.ref.ref(out_$p712, .str.5);
    goto corral_source_split_6271;

  $bb330:
    assume !(out_$i721 == 1);
    goto corral_source_split_6270;

  corral_source_split_6288:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb338, $bb339;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    out_$i735 := $eq.i32(out_$i733, 0);
    goto corral_source_split_6288;

  $bb337:
    assume !(1 == 1);
    goto corral_source_split_6287;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    out_$i737 := $sext.i32.i64(out_$i736);
    goto corral_source_split_6292;

  corral_source_split_6290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1086} out_$i736 := sprintf.ref.ref(out_$p726, .str.5);
    goto corral_source_split_6291;

  $bb339:
    assume !(out_$i735 == 1);
    goto corral_source_split_6290;

  corral_source_split_6308:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb347, $bb348;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    out_$i749 := $eq.i32(out_$i747, 0);
    goto corral_source_split_6308;

  $bb346:
    assume !(1 == 1);
    goto corral_source_split_6307;

  corral_source_split_6311:
    assume {:verifier.code 0} true;
    out_$i751 := $sext.i32.i64(out_$i750);
    goto corral_source_split_6312;

  corral_source_split_6310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1088} out_$i750 := sprintf.ref.ref(out_$p740, .str.5);
    goto corral_source_split_6311;

  $bb348:
    assume !(out_$i749 == 1);
    goto corral_source_split_6310;

  corral_source_split_6328:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb356, $bb357;

  corral_source_split_6327:
    assume {:verifier.code 0} true;
    out_$i763 := $eq.i32(out_$i761, 0);
    goto corral_source_split_6328;

  $bb355:
    assume !(1 == 1);
    goto corral_source_split_6327;

  corral_source_split_6331:
    assume {:verifier.code 0} true;
    out_$i765 := $sext.i32.i64(out_$i764);
    goto corral_source_split_6332;

  corral_source_split_6330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1090} out_$i764 := sprintf.ref.ref(out_$p754, .str.5);
    goto corral_source_split_6331;

  $bb357:
    assume !(out_$i763 == 1);
    goto corral_source_split_6330;

  corral_source_split_6348:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb365, $bb366;

  corral_source_split_6347:
    assume {:verifier.code 0} true;
    out_$i777 := $eq.i32(out_$i775, 0);
    goto corral_source_split_6348;

  $bb364:
    assume !(1 == 1);
    goto corral_source_split_6347;

  corral_source_split_6351:
    assume {:verifier.code 0} true;
    out_$i779 := $sext.i32.i64(out_$i778);
    goto corral_source_split_6352;

  corral_source_split_6350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1092} out_$i778 := sprintf.ref.ref(out_$p768, .str.5);
    goto corral_source_split_6351;

  $bb366:
    assume !(out_$i777 == 1);
    goto corral_source_split_6350;

  corral_source_split_6365:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb374, $bb375;

  corral_source_split_6364:
    assume {:verifier.code 0} true;
    out_$i791 := $eq.i32(out_$i789, 0);
    goto corral_source_split_6365;

  $bb373:
    assume !(0 == 1);
    goto corral_source_split_6364;

  $bb375:
    assume !(out_$i791 == 1);
    goto corral_source_split_6367;

  $bb14:
    assume {:verifier.code 0} true;
    assume !(out_$i50 == 1);
    goto $bb12;

  $bb11:
    assume {:verifier.code 0} true;
    assume !(out_$i49 == 1);
    goto $bb12;

  $bb117:
    assume {:verifier.code 0} true;
    assume !(out_$i398 == 1);
    goto $bb12;

  $bb126:
    assume {:verifier.code 0} true;
    assume !(out_$i412 == 1);
    goto $bb12;

  $bb135:
    assume {:verifier.code 0} true;
    assume !(out_$i426 == 1);
    goto $bb12;

  $bb144:
    assume {:verifier.code 0} true;
    assume !(out_$i440 == 1);
    goto $bb12;

  $bb153:
    assume {:verifier.code 0} true;
    assume !(out_$i454 == 1);
    goto $bb12;

  $bb162:
    assume {:verifier.code 0} true;
    assume !(out_$i468 == 1);
    goto $bb12;

  $bb171:
    assume {:verifier.code 0} true;
    assume !(out_$i482 == 1);
    goto $bb12;

  $bb180:
    assume {:verifier.code 0} true;
    assume !(out_$i496 == 1);
    goto $bb12;

  $bb189:
    assume {:verifier.code 0} true;
    assume !(out_$i510 == 1);
    goto $bb12;

  $bb198:
    assume {:verifier.code 0} true;
    assume !(out_$i524 == 1);
    goto $bb12;

  $bb207:
    assume {:verifier.code 0} true;
    assume !(out_$i538 == 1);
    goto $bb12;

  $bb216:
    assume {:verifier.code 0} true;
    assume !(out_$i552 == 1);
    goto $bb12;

  $bb225:
    assume {:verifier.code 0} true;
    assume !(out_$i566 == 1);
    goto $bb12;

  $bb234:
    assume {:verifier.code 0} true;
    assume !(out_$i580 == 1);
    goto $bb12;

  $bb243:
    assume {:verifier.code 0} true;
    assume !(out_$i594 == 1);
    goto $bb12;

  $bb252:
    assume {:verifier.code 0} true;
    assume !(out_$i608 == 1);
    goto $bb12;

  $bb261:
    assume {:verifier.code 0} true;
    assume !(out_$i622 == 1);
    goto $bb12;

  $bb270:
    assume {:verifier.code 0} true;
    assume !(out_$i636 == 1);
    goto $bb12;

  $bb279:
    assume {:verifier.code 0} true;
    assume !(out_$i650 == 1);
    goto $bb12;

  $bb288:
    assume {:verifier.code 0} true;
    assume !(out_$i664 == 1);
    goto $bb12;

  $bb297:
    assume {:verifier.code 0} true;
    assume !(out_$i678 == 1);
    goto $bb12;

  $bb306:
    assume {:verifier.code 0} true;
    assume !(out_$i692 == 1);
    goto $bb12;

  $bb315:
    assume {:verifier.code 0} true;
    assume !(out_$i706 == 1);
    goto $bb12;

  $bb324:
    assume {:verifier.code 0} true;
    assume !(out_$i720 == 1);
    goto $bb12;

  $bb333:
    assume {:verifier.code 0} true;
    assume !(out_$i734 == 1);
    goto $bb12;

  $bb342:
    assume {:verifier.code 0} true;
    assume !(out_$i748 == 1);
    goto $bb12;

  $bb351:
    assume {:verifier.code 0} true;
    assume !(out_$i762 == 1);
    goto $bb12;

  $bb360:
    assume {:verifier.code 0} true;
    assume !(out_$i776 == 1);
    goto $bb12;

  $bb369:
    assume {:verifier.code 0} true;
    assume !(out_$i790 == 1);
    goto $bb12;

  $bb21:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5347;

  $bb20:
    assume {:verifier.code 0} true;
    assume !(out_$i60 == 1);
    goto $bb21;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    out_$p61, out_$i62 := out_$p177, out_$i178;
    goto $bb21;

  $bb72:
    assume !(out_$i176 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5534;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} dev_err.ref.ref.i32.i32.ref(out_$p71, .str.7, out_$i72, out_$i13, out_$p73);
    goto corral_source_split_5364;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    out_$p73 := $bitcast.ref.ref(in_$p2);
    goto corral_source_split_5363;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    out_$i72 := $load.i32($M.16, in_$p1);
    goto corral_source_split_5362;

  corral_source_split_5360:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(out_$p70, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_5361;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    out_$p70 := $load.ref($M.0, out_$p69);
    goto corral_source_split_5360;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(5200, 1));
    goto corral_source_split_5359;

  $bb25:
    assume out_$i67 == 1;
    goto corral_source_split_5358;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    out_$i68 := out_$i13;
    assume true;
    goto $bb25;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    out_$i67 := $sgt.i32(out_$i11, 0);
    goto corral_source_split_5353;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    out_$i66 := $sub.i32(out_$i11, 1);
    call {:si_unique_call 994} {:cexpr "retry_on_timeout"} boogie_si_record_i32(out_$i66);
    goto corral_source_split_5352;

  $bb23:
    assume out_$i65 == 1;
    goto corral_source_split_5351;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    out_$i65 := $eq.i32(out_$i29, $sub.i32(0, 110));
    goto corral_source_split_5343;

  $bb18:
    assume !(out_$i52 == 1);
    goto corral_source_split_5342;

  $bb42:
    assume out_$i121 == 1;
    goto corral_source_split_5438;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    out_$i121 := $sgt.i32(out_$i12, 0);
    goto corral_source_split_5436;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    out_$i120 := $sub.i32(out_$i12, 1);
    call {:si_unique_call 1003} {:cexpr "retry_on_empty"} boogie_si_record_i32(out_$i120);
    goto corral_source_split_5435;

  $bb40:
    assume out_$i119 == 1;
    goto corral_source_split_5434;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    out_$i119 := $eq.i32(out_$i118, 96);
    goto corral_source_split_5429;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    out_$i118 := $zext.i8.i32(out_$i114);
    goto corral_source_split_5428;

  $bb37:
    assume out_$i117 == 1;
    goto corral_source_split_5427;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    out_$i117 := $eq.i32(out_$i116, 49);
    goto corral_source_split_5421;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    out_$i116 := $zext.i8.i32(out_$i110);
    goto corral_source_split_5420;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    out_$i115 := $add.i32(out_$i10, 1);
    call {:si_unique_call 1002} {:cexpr "empty_packets"} boogie_si_record_i32(out_$i115);
    goto corral_source_split_5419;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    out_$i114 := $load.i8($M.0, out_$p113);
    call {:si_unique_call 1001} {:cexpr "s1"} boogie_si_record_i8(out_$i114);
    goto corral_source_split_5418;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    out_$p113 := $add.ref(out_$p112, $mul.ref(1, 1));
    goto corral_source_split_5417;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    out_$p112 := $load.ref($M.0, out_$p111);
    goto corral_source_split_5416;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    out_$p111 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7400, 1));
    goto corral_source_split_5415;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    out_$i110 := $load.i8($M.0, out_$p109);
    call {:si_unique_call 1000} {:cexpr "s0"} boogie_si_record_i8(out_$i110);
    goto corral_source_split_5414;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    out_$p109 := $load.ref($M.0, out_$p108);
    goto corral_source_split_5413;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    out_$p108 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(7400, 1));
    goto corral_source_split_5412;

  $bb35:
    assume out_$i107 == 1;
    goto corral_source_split_5411;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    out_$i107 := $eq.i32(out_$i106, 2);
    goto corral_source_split_5409;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    out_$i106 := $load.i32($M.16, in_$p1);
    goto corral_source_split_5408;

  $bb34:
    assume !(out_$i98 == 1);
    goto corral_source_split_5407;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    out_$i99, out_$i100 := out_$i13, out_$i29;
    assume true;
    goto $bb34;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    out_$i98 := $ne.i32(out_$i29, 0);
    goto corral_source_split_5397;

  $bb32:
    assume !(out_$i90 == 1);
    goto corral_source_split_5396;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    out_$i91, out_$i92 := out_$i13, out_$i29;
    assume true;
    goto $bb32;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    out_$i90 := $eq.i32(out_$i29, $sub.i32(0, 84));
    goto corral_source_split_5356;

  $bb24:
    assume !(out_$i65 == 1);
    goto corral_source_split_5355;

  $bb49:
    assume out_$i127 == 1;
    goto corral_source_split_5453;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    out_$i127 := $sgt.i32(out_$i12, 0);
    goto corral_source_split_5451;

  corral_source_split_5449:
    assume {:verifier.code 0} true;
    out_$i126 := $sub.i32(out_$i12, 1);
    call {:si_unique_call 1005} {:cexpr "retry_on_empty"} boogie_si_record_i32(out_$i126);
    goto corral_source_split_5450;

  $bb47:
    assume out_$i125 == 1;
    goto corral_source_split_5449;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  corral_source_split_5443:
    assume {:verifier.code 0} true;
    out_$i125 := $eq.i32(out_$i124, 0);
    goto corral_source_split_5444;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    out_$i124 := $zext.i8.i32(out_$i114);
    goto corral_source_split_5443;

  $bb44:
    assume out_$i123 == 1;
    goto corral_source_split_5442;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    out_$i123 := $eq.i32(out_$i122, 49);
    goto corral_source_split_5432;

  $bb39:
    assume {:verifier.code 0} true;
    out_$i122 := $zext.i8.i32(out_$i110);
    goto corral_source_split_5431;

  $bb38:
    assume {:verifier.code 0} true;
    assume !(out_$i117 == 1);
    goto $bb39;

  $bb41:
    assume {:verifier.code 0} true;
    assume !(out_$i119 == 1);
    goto $bb39;

  $bb51:
    assume out_$i129 == 1;
    goto corral_source_split_5457;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    out_$i129 := $sgt.i32(out_$i12, 0);
    goto corral_source_split_5447;

  $bb46:
    assume {:verifier.code 0} true;
    out_$i128 := $sub.i32(out_$i12, 1);
    call {:si_unique_call 1004} {:cexpr "retry_on_empty"} boogie_si_record_i32(out_$i128);
    goto corral_source_split_5446;

  $bb45:
    assume {:verifier.code 0} true;
    assume !(out_$i123 == 1);
    goto $bb46;

  $bb48:
    assume {:verifier.code 0} true;
    assume !(out_$i125 == 1);
    goto $bb46;

  $bb55:
    assume out_$i133 == 1;
    goto corral_source_split_5469;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    out_$i133 := $sgt.i32(out_$i12, 0);
    goto corral_source_split_5463;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    out_$i132 := $sub.i32(out_$i12, 1);
    call {:si_unique_call 1006} {:cexpr "retry_on_empty"} boogie_si_record_i32(out_$i132);
    goto corral_source_split_5462;

  $bb53:
    assume out_$i131 == 1;
    goto corral_source_split_5461;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    out_$i131 := $eq.i32(out_$i130, 1);
    goto corral_source_split_5425;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    out_$i130 := $load.i32($M.16, in_$p1);
    goto corral_source_split_5424;

  $bb36:
    assume !(out_$i107 == 1);
    goto corral_source_split_5423;

  $bb57:
    assume out_$i135 == 1;
    goto corral_source_split_5473;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    out_$i135 := $sgt.i32(out_$i12, 0);
    goto corral_source_split_5467;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    out_$i134 := $sub.i32(out_$i12, 1);
    call {:si_unique_call 1007} {:cexpr "retry_on_empty"} boogie_si_record_i32(out_$i134);
    goto corral_source_split_5466;

  $bb54:
    assume !(out_$i131 == 1);
    goto corral_source_split_5465;

  corral_source_split_5369_dummy:
    call {:si_unique_call 1} out_$i10, out_$i11, out_$i12, out_$i13, out_$p14, out_$p15, out_$p16, out_$p17, out_$i18, out_$i19, out_$i20, out_$p21, out_$p22, out_$i23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$i29, out_$p30, out_$i31, out_$p32, out_$p33, out_$p34, out_$i35, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$p42, out_$i45, out_$i46, out_$p47, out_$p43, out_$p44, out_$i48, out_$i49, out_$i36, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p56, out_$p57, out_$p58, out_$i59, out_$i60, out_$i65, out_$i66, out_$i67, out_$p69, out_$p70, out_$p71, out_$i72, out_$p73, out_$i68, out_$i90, out_$i91, out_$i92, out_$i98, out_$i99, out_$i100, out_$i106, out_$i107, out_$p108, out_$p109, out_$i110, out_$p111, out_$p112, out_$p113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i74, out_$i75, out_$i76, out_$i77, out_$p78, out_$i136, out_$i137, out_$i138, out_$i141, out_$p142, out_$i143, out_$i144, out_$p145, out_$p146, out_$p147, out_$p148, out_$i149, out_$p150, out_$i151, out_$i152, out_$p153, out_$i154, out_$i155, out_$p156, out_$p157, out_$i158, out_$i159, out_$i162, out_$i163, out_$i160, out_$i161, out_$p164, out_$p165, out_$i166, out_$i167, out_$p168, out_$p169, out_$i170, out_$p171, out_$i172, out_$i173, out_$p174, out_$i175, out_$i176, out_$p63, out_$i64, out_$p179, out_$i180, out_$i181, out_$p183, out_$i184, out_$i185, out_$i186, out_$i187, out_$p189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$p196, out_$i197, out_$i198, out_$i199, out_$i200, out_$i201, out_$p202, out_$p203, out_$i204, out_$p205, out_$i206, out_$i207, out_$p208, out_$p209, out_$p210, out_$p211, out_$p212, out_$i213, out_$i215, out_$p216, out_$i217, out_$i218, out_$i219, out_$i220, out_$p221, out_$i224, out_$i225, out_$p226, out_$p222, out_$p223, out_$i227, out_$i228, out_$i214, out_$i229, out_$p230, out_$p231, out_$p232, out_$p233, out_$p234, out_$p235, out_$p236, out_$p238, out_$i239, out_$i240, out_$p241, out_$i242, out_$p243, out_$i244, out_$i245, out_$p246, out_$p247, out_$p248, out_$i249, out_$i250, out_$p253, out_$i254, out_$i255, out_$i256, out_$p258, out_$i259, out_$i260, out_$i261, out_$i262, out_$p264, out_$i265, out_$i266, out_$i267, out_$i268, out_$p270, out_$i271, out_$i272, out_$i273, out_$p274, out_$p275, out_$p276, out_$p277, out_$p278, out_$p279, out_$p280, out_$p281, out_$p282, out_$p285, out_$i286, out_$i287, out_$i288, out_$i289, out_$i290, out_$i291, out_$i292, out_$i293, out_$i294, out_$i295, out_$i296, out_$i297, out_$p298, out_$p299, out_$p300, out_$i301, out_$p303, out_$i304, out_$i305, out_$i306, out_$p307, out_$p309, out_$i310, out_$i311, out_$i312, out_$i313, out_$p315, out_$i316, out_$i317, out_$i318, out_$p320, out_$i321, out_$i322, out_$i323, out_$i324, out_$i325, out_$p327, out_$i328, out_$i329, out_$i330, out_$i331, out_$i332, out_$p333, out_$p334, out_$i335, out_$p336, out_$p338, out_$i339, out_$i340, out_$i341, out_$i342, out_$p343, out_$p345, out_$i346, out_$i347, out_$i348, out_$i349, out_$p350, out_$p352, out_$i353, out_$i354, out_$i355, out_$i356, out_$p357, out_$p359, out_$i360, out_$i361, out_$i362, out_$i363, out_$p364, out_$p366, out_$i367, out_$i368, out_$i369, out_$p370, out_$p372, out_$i373, out_$i374, out_$i375, out_$i376, out_$i377, out_$i378, out_$p379, out_$i380, out_$i381, out_$p382, out_$p177, out_$i178, out_$p61, out_$i62, out_$p139, out_$i140, out_$p383, out_$i384, out_$i385, out_$i386, out_$i387, out_$p388, out_$p391, out_$i392, out_$i393, out_$i394, out_$i395, out_$p396, out_$p389, out_$p390, out_$i397, out_$i398, out_$i399, out_$i400, out_$i401, out_$p402, out_$p405, out_$i406, out_$i407, out_$i408, out_$i409, out_$p410, out_$p403, out_$p404, out_$i411, out_$i412, out_$i413, out_$i414, out_$i415, out_$p416, out_$p419, out_$i420, out_$i421, out_$i422, out_$i423, out_$p424, out_$p417, out_$p418, out_$i425, out_$i426, out_$i427, out_$i428, out_$i429, out_$p430, out_$p433, out_$i434, out_$i435, out_$i436, out_$i437, out_$p438, out_$p431, out_$p432, out_$i439, out_$i440, out_$i441, out_$i442, out_$i443, out_$p444, out_$p447, out_$i448, out_$i449, out_$i450, out_$i451, out_$p452, out_$p445, out_$p446, out_$i453, out_$i454, out_$i455, out_$i456, out_$i457, out_$p458, out_$p461, out_$i462, out_$i463, out_$i464, out_$i465, out_$p466, out_$p459, out_$p460, out_$i467, out_$i468, out_$i469, out_$i470, out_$i471, out_$p472, out_$p475, out_$i476, out_$i477, out_$i478, out_$i479, out_$p480, out_$p473, out_$p474, out_$i481, out_$i482, out_$i483, out_$i484, out_$i485, out_$p486, out_$p489, out_$i490, out_$i491, out_$i492, out_$i493, out_$p494, out_$p487, out_$p488, out_$i495, out_$i496, out_$i497, out_$i498, out_$i499, out_$p500, out_$p503, out_$i504, out_$i505, out_$i506, out_$i507, out_$p508, out_$p501, out_$p502, out_$i509, out_$i510, out_$i511, out_$i512, out_$i513, out_$p514, out_$p517, out_$i518, out_$i519, out_$i520, out_$i521, out_$p522, out_$p515, out_$p516, out_$i523, out_$i524, out_$i525, out_$i526, out_$i527, out_$p528, out_$p531, out_$i532, out_$i533, out_$i534, out_$i535, out_$p536, out_$p529, out_$p530, out_$i537, out_$i538, out_$i539, out_$i540, out_$i541, out_$p542, out_$p545, out_$i546, out_$i547, out_$i548, out_$i549, out_$p550, out_$p543, out_$p544, out_$i551, out_$i552, out_$i553, out_$i554, out_$i555, out_$p556, out_$p559, out_$i560, out_$i561, out_$i562, out_$i563, out_$p564, out_$p557, out_$p558, out_$i565, out_$i566, out_$i567, out_$i568, out_$i569, out_$p570, out_$p573, out_$i574, out_$i575, out_$i576, out_$i577, out_$p578, out_$p571, out_$p572, out_$i579, out_$i580, out_$i581, out_$i582, out_$i583, out_$p584, out_$p587, out_$i588, out_$i589, out_$i590, out_$i591, out_$p592, out_$p585, out_$p586, out_$i593, out_$i594, out_$i595, out_$i596, out_$i597, out_$p598, out_$p601, out_$i602, out_$i603, out_$i604, out_$i605, out_$p606, out_$p599, out_$p600, out_$i607, out_$i608, out_$i609, out_$i610, out_$i611, out_$p612, out_$p615, out_$i616, out_$i617, out_$i618, out_$i619, out_$p620, out_$p613, out_$p614, out_$i621, out_$i622, out_$i623, out_$i624, out_$i625, out_$p626, out_$p629, out_$i630, out_$i631, out_$i632, out_$i633, out_$p634, out_$p627, out_$p628, out_$i635, out_$i636, out_$i637, out_$i638, out_$i639, out_$p640, out_$p643, out_$i644, out_$i645, out_$i646, out_$i647, out_$p648, out_$p641, out_$p642, out_$i649, out_$i650, out_$i651, out_$i652, out_$i653, out_$p654, out_$p657, out_$i658, out_$i659, out_$i660, out_$i661, out_$p662, out_$p655, out_$p656, out_$i663, out_$i664, out_$i665, out_$i666, out_$i667, out_$p668, out_$p671, out_$i672, out_$i673, out_$i674, out_$i675, out_$p676, out_$p669, out_$p670, out_$i677, out_$i678, out_$i679, out_$i680, out_$i681, out_$p682, out_$p685, out_$i686, out_$i687, out_$i688, out_$i689, out_$p690, out_$p683, out_$p684, out_$i691, out_$i692, out_$i693, out_$i694, out_$i695, out_$p696, out_$p699, out_$i700, out_$i701, out_$i702, out_$i703, out_$p704, out_$p697, out_$p698, out_$i705, out_$i706, out_$i707, out_$i708, out_$i709, out_$p710, out_$p713, out_$i714, out_$i715, out_$i716, out_$i717, out_$p718, out_$p711, out_$p712, out_$i719, out_$i720, out_$i721, out_$i722, out_$i723, out_$p724, out_$p727, out_$i728, out_$i729, out_$i730, out_$i731, out_$p732, out_$p725, out_$p726, out_$i733, out_$i734, out_$i735, out_$i736, out_$i737, out_$p738, out_$p741, out_$i742, out_$i743, out_$i744, out_$i745, out_$p746, out_$p739, out_$p740, out_$i747, out_$i748, out_$i749, out_$i750, out_$i751, out_$p752, out_$p755, out_$i756, out_$i757, out_$i758, out_$i759, out_$p760, out_$p753, out_$p754, out_$i761, out_$i762, out_$i763, out_$i764, out_$i765, out_$p766, out_$p769, out_$i770, out_$i771, out_$i772, out_$i773, out_$p774, out_$p767, out_$p768, out_$i775, out_$i776, out_$i777, out_$i778, out_$i779, out_$p780, out_$p783, out_$i784, out_$i785, out_$i786, out_$i787, out_$p788, out_$p781, out_$p782, out_$i789, out_$i790, out_$i791, out_$i793, out_$i794, out_$i796, out_$i797, out_$i798, out_$p799, out_$p802, out_$i803, out_$i804, out_$i805, out_$i806, out_$p807, out_$p800, out_$p801, out_$i808, out_$i809, out_$i810, out_$i811, out_$i812, out_$p813, out_$p816, out_$i817, out_$i818, out_$i819, out_$i820, out_$p821, out_$p814, out_$p815, out_$i822, out_$i823, out_$i824, out_$i825, out_$i826, out_$p827, out_$p830, out_$i831, out_$i832, out_$i833, out_$i834, out_$p835, out_$p828, out_$p829, out_$i836, out_$i837, out_$i838, out_$i839, out_$i840, out_$p841, out_$p844, out_$i845, out_$i846, out_$i847, out_$i848, out_$p849, out_$p842, out_$p843, out_$i850, out_$i851, out_$i852, out_$i853, out_$i854, out_$p855, out_$p858, out_$i859, out_$i860, out_$i861, out_$i862, out_$p863, out_$p856, out_$p857, out_$i864, out_$i865, out_$i866, out_$i867, out_$i868, out_$p869, out_$p872, out_$i873, out_$i874, out_$i875, out_$i876, out_$p877, out_$p870, out_$p871, out_$i878, out_$i879, out_$i880, out_$i881, out_$i882, out_$p883, out_$p886, out_$i887, out_$i888, out_$i889, out_$i890, out_$p891, out_$p884, out_$p885, out_$i892, out_$i893, out_$i894, out_$i895, out_$i896, out_$p897, out_$p900, out_$i901, out_$i902, out_$i903, out_$i904, out_$p905, out_$p898, out_$p899, out_$i906, out_$i907, out_$i908, out_$i909, out_$i910, out_$p911, out_$p914, out_$i915, out_$i916, out_$i917, out_$i918, out_$p919, out_$p912, out_$p913, out_$i920, out_$i921, out_$i922, out_$i923, out_$i924, out_$p925, out_$p928, out_$i929, out_$i930, out_$i931, out_$i932, out_$p933, out_$p926, out_$p927, out_$i934, out_$i935, out_$i936, out_$i937, out_$i938, out_$p939, out_$p942, out_$i943, out_$i944, out_$i945, out_$i946, out_$p947, out_$p940, out_$p941, out_$i948, out_$i949, out_$i950, out_$i951, out_$i952, out_$p953, out_$p956, out_$i957, out_$i958, out_$i959, out_$i960, out_$p961, out_$p954, out_$p955, out_$i962, out_$i963, out_$i964, out_$i965, out_$i966, out_$p967, out_$p970, out_$i971, out_$i972, out_$i973, out_$i974, out_$p975, out_$p968, out_$p969, out_$i976, out_$i977, out_$i978, out_$i979, out_$i980, out_$p981, out_$p984, out_$i985, out_$i986, out_$i987, out_$i988, out_$p989, out_$p982, out_$p983, out_$i990, out_$i991, out_$i992, out_$i993, out_$i994, out_$p995, out_$p998, out_$i999, out_$i1000, out_$i1001, out_$i1002, out_$p1003, out_$p996, out_$p997, out_$i1004, out_$i1005, out_$i1006, out_$i1007, out_$i1008, out_$p1009, out_$p1012, out_$i1013, out_$i1014, out_$i1015, out_$i1016, out_$p1017, out_$p1010, out_$p1011, out_$i1018, out_$i1019, out_$i1020, out_$i1021, out_$i1022, out_$p1023, out_$p1026, out_$i1027, out_$i1028, out_$i1029, out_$i1030, out_$p1031, out_$p1024, out_$p1025, out_$i1032, out_$i1033, out_$i1034, out_$i1035, out_$i1036, out_$p1037, out_$p1040, out_$i1041, out_$i1042, out_$i1043, out_$i1044, out_$p1045, out_$p1038, out_$p1039, out_$i1046, out_$i1047, out_$i1048, out_$i1049, out_$i1050, out_$p1051, out_$p1054, out_$i1055, out_$i1056, out_$i1057, out_$i1058, out_$p1059, out_$p1052, out_$p1053, out_$i1060, out_$i1061, out_$i1062, out_$i1063, out_$i1064, out_$p1065, out_$p1068, out_$i1069, out_$i1070, out_$i1071, out_$i1072, out_$p1073, out_$p1066, out_$p1067, out_$i1074, out_$i1075, out_$i1076, out_$i1077, out_$i1078, out_$p1079, out_$p1082, out_$i1083, out_$i1084, out_$i1085, out_$i1086, out_$p1087, out_$p1080, out_$p1081, out_$i1088, out_$i1089, out_$i1090, out_$i1091, out_$i1092, out_$p1093, out_$p1096, out_$i1097, out_$i1098, out_$i1099, out_$i1100, out_$p1101, out_$p1094, out_$p1095, out_$i1102, out_$i1103, out_$i1104, out_$i1105, out_$i1106, out_$p1107, out_$p1110, out_$i1111, out_$i1112, out_$i1113, out_$i1114, out_$p1115, out_$p1108, out_$p1109, out_$i1116, out_$i1117, out_$i1118, out_$i1119, out_$i1120, out_$p1121, out_$p1124, out_$i1125, out_$i1126, out_$i1127, out_$i1128, out_$p1129, out_$p1122, out_$p1123, out_$i1130, out_$i1131, out_$i1132, out_$i1133, out_$i1134, out_$p1135, out_$p1138, out_$i1139, out_$i1140, out_$i1141, out_$i1142, out_$p1143, out_$p1136, out_$p1137, out_$i1144, out_$i1145, out_$i1146, out_$i1147, out_$i1148, out_$p1149, out_$p1152, out_$i1153, out_$i1154, out_$i1155, out_$i1156, out_$p1157, out_$p1150, out_$p1151, out_$i1158, out_$i1159, out_$i1160, out_$i1161, out_$i1162, out_$p1163, out_$p1166, out_$i1167, out_$i1168, out_$i1169, out_$i1170, out_$p1171, out_$p1164, out_$p1165, out_$i1172, out_$i1173, out_$i1174, out_$i1175, out_$i1176, out_$p1177, out_$p1180, out_$i1181, out_$i1182, out_$i1183, out_$i1184, out_$p1185, out_$p1178, out_$p1179, out_$i1186, out_$i1187, out_$i1188, out_$i1189, out_$i1190, out_$p1191, out_$p1194, out_$i1195, out_$i1196, out_$i1197, out_$i1198, out_$p1199, out_$p1192, out_$p1193, out_$i1200, out_$i1201, out_$i1202, out_$i1204, out_$i1205, out_vslice_dummy_var_26, out_vslice_dummy_var_27, out_vslice_dummy_var_28, out_vslice_dummy_var_29 := ftdi_elan_respond_engine_loop_$bb1(in_$p0, in_$p1, in_$p2, in_$p3, out_$i10, out_$i11, out_$i12, out_$i13, out_$p14, out_$p15, out_$p16, out_$p17, out_$i18, out_$i19, out_$i20, out_$p21, out_$p22, out_$i23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$i29, out_$p30, out_$i31, out_$p32, out_$p33, out_$p34, out_$i35, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$p42, out_$i45, out_$i46, out_$p47, out_$p43, out_$p44, out_$i48, out_$i49, out_$i36, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p56, out_$p57, out_$p58, out_$i59, out_$i60, out_$i65, out_$i66, out_$i67, out_$p69, out_$p70, out_$p71, out_$i72, out_$p73, out_$i68, out_$i90, out_$i91, out_$i92, out_$i98, out_$i99, out_$i100, out_$i106, out_$i107, out_$p108, out_$p109, out_$i110, out_$p111, out_$p112, out_$p113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i74, out_$i75, out_$i76, out_$i77, out_$p78, out_$i136, out_$i137, out_$i138, out_$i141, out_$p142, out_$i143, out_$i144, out_$p145, out_$p146, out_$p147, out_$p148, out_$i149, out_$p150, out_$i151, out_$i152, out_$p153, out_$i154, out_$i155, out_$p156, out_$p157, out_$i158, out_$i159, out_$i162, out_$i163, out_$i160, out_$i161, out_$p164, out_$p165, out_$i166, out_$i167, out_$p168, out_$p169, out_$i170, out_$p171, out_$i172, out_$i173, out_$p174, out_$i175, out_$i176, out_$p63, out_$i64, out_$p179, out_$i180, out_$i181, out_$p183, out_$i184, out_$i185, out_$i186, out_$i187, out_$p189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$p196, out_$i197, out_$i198, out_$i199, out_$i200, out_$i201, out_$p202, out_$p203, out_$i204, out_$p205, out_$i206, out_$i207, out_$p208, out_$p209, out_$p210, out_$p211, out_$p212, out_$i213, out_$i215, out_$p216, out_$i217, out_$i218, out_$i219, out_$i220, out_$p221, out_$i224, out_$i225, out_$p226, out_$p222, out_$p223, out_$i227, out_$i228, out_$i214, out_$i229, out_$p230, out_$p231, out_$p232, out_$p233, out_$p234, out_$p235, out_$p236, out_$p238, out_$i239, out_$i240, out_$p241, out_$i242, out_$p243, out_$i244, out_$i245, out_$p246, out_$p247, out_$p248, out_$i249, out_$i250, out_$p253, out_$i254, out_$i255, out_$i256, out_$p258, out_$i259, out_$i260, out_$i261, out_$i262, out_$p264, out_$i265, out_$i266, out_$i267, out_$i268, out_$p270, out_$i271, out_$i272, out_$i273, out_$p274, out_$p275, out_$p276, out_$p277, out_$p278, out_$p279, out_$p280, out_$p281, out_$p282, out_$p285, out_$i286, out_$i287, out_$i288, out_$i289, out_$i290, out_$i291, out_$i292, out_$i293, out_$i294, out_$i295, out_$i296, out_$i297, out_$p298, out_$p299, out_$p300, out_$i301, out_$p303, out_$i304, out_$i305, out_$i306, out_$p307, out_$p309, out_$i310, out_$i311, out_$i312, out_$i313, out_$p315, out_$i316, out_$i317, out_$i318, out_$p320, out_$i321, out_$i322, out_$i323, out_$i324, out_$i325, out_$p327, out_$i328, out_$i329, out_$i330, out_$i331, out_$i332, out_$p333, out_$p334, out_$i335, out_$p336, out_$p338, out_$i339, out_$i340, out_$i341, out_$i342, out_$p343, out_$p345, out_$i346, out_$i347, out_$i348, out_$i349, out_$p350, out_$p352, out_$i353, out_$i354, out_$i355, out_$i356, out_$p357, out_$p359, out_$i360, out_$i361, out_$i362, out_$i363, out_$p364, out_$p366, out_$i367, out_$i368, out_$i369, out_$p370, out_$p372, out_$i373, out_$i374, out_$i375, out_$i376, out_$i377, out_$i378, out_$p379, out_$i380, out_$i381, out_$p382, out_$p177, out_$i178, out_$p61, out_$i62, out_$p139, out_$i140, out_$p383, out_$i384, out_$i385, out_$i386, out_$i387, out_$p388, out_$p391, out_$i392, out_$i393, out_$i394, out_$i395, out_$p396, out_$p389, out_$p390, out_$i397, out_$i398, out_$i399, out_$i400, out_$i401, out_$p402, out_$p405, out_$i406, out_$i407, out_$i408, out_$i409, out_$p410, out_$p403, out_$p404, out_$i411, out_$i412, out_$i413, out_$i414, out_$i415, out_$p416, out_$p419, out_$i420, out_$i421, out_$i422, out_$i423, out_$p424, out_$p417, out_$p418, out_$i425, out_$i426, out_$i427, out_$i428, out_$i429, out_$p430, out_$p433, out_$i434, out_$i435, out_$i436, out_$i437, out_$p438, out_$p431, out_$p432, out_$i439, out_$i440, out_$i441, out_$i442, out_$i443, out_$p444, out_$p447, out_$i448, out_$i449, out_$i450, out_$i451, out_$p452, out_$p445, out_$p446, out_$i453, out_$i454, out_$i455, out_$i456, out_$i457, out_$p458, out_$p461, out_$i462, out_$i463, out_$i464, out_$i465, out_$p466, out_$p459, out_$p460, out_$i467, out_$i468, out_$i469, out_$i470, out_$i471, out_$p472, out_$p475, out_$i476, out_$i477, out_$i478, out_$i479, out_$p480, out_$p473, out_$p474, out_$i481, out_$i482, out_$i483, out_$i484, out_$i485, out_$p486, out_$p489, out_$i490, out_$i491, out_$i492, out_$i493, out_$p494, out_$p487, out_$p488, out_$i495, out_$i496, out_$i497, out_$i498, out_$i499, out_$p500, out_$p503, out_$i504, out_$i505, out_$i506, out_$i507, out_$p508, out_$p501, out_$p502, out_$i509, out_$i510, out_$i511, out_$i512, out_$i513, out_$p514, out_$p517, out_$i518, out_$i519, out_$i520, out_$i521, out_$p522, out_$p515, out_$p516, out_$i523, out_$i524, out_$i525, out_$i526, out_$i527, out_$p528, out_$p531, out_$i532, out_$i533, out_$i534, out_$i535, out_$p536, out_$p529, out_$p530, out_$i537, out_$i538, out_$i539, out_$i540, out_$i541, out_$p542, out_$p545, out_$i546, out_$i547, out_$i548, out_$i549, out_$p550, out_$p543, out_$p544, out_$i551, out_$i552, out_$i553, out_$i554, out_$i555, out_$p556, out_$p559, out_$i560, out_$i561, out_$i562, out_$i563, out_$p564, out_$p557, out_$p558, out_$i565, out_$i566, out_$i567, out_$i568, out_$i569, out_$p570, out_$p573, out_$i574, out_$i575, out_$i576, out_$i577, out_$p578, out_$p571, out_$p572, out_$i579, out_$i580, out_$i581, out_$i582, out_$i583, out_$p584, out_$p587, out_$i588, out_$i589, out_$i590, out_$i591, out_$p592, out_$p585, out_$p586, out_$i593, out_$i594, out_$i595, out_$i596, out_$i597, out_$p598, out_$p601, out_$i602, out_$i603, out_$i604, out_$i605, out_$p606, out_$p599, out_$p600, out_$i607, out_$i608, out_$i609, out_$i610, out_$i611, out_$p612, out_$p615, out_$i616, out_$i617, out_$i618, out_$i619, out_$p620, out_$p613, out_$p614, out_$i621, out_$i622, out_$i623, out_$i624, out_$i625, out_$p626, out_$p629, out_$i630, out_$i631, out_$i632, out_$i633, out_$p634, out_$p627, out_$p628, out_$i635, out_$i636, out_$i637, out_$i638, out_$i639, out_$p640, out_$p643, out_$i644, out_$i645, out_$i646, out_$i647, out_$p648, out_$p641, out_$p642, out_$i649, out_$i650, out_$i651, out_$i652, out_$i653, out_$p654, out_$p657, out_$i658, out_$i659, out_$i660, out_$i661, out_$p662, out_$p655, out_$p656, out_$i663, out_$i664, out_$i665, out_$i666, out_$i667, out_$p668, out_$p671, out_$i672, out_$i673, out_$i674, out_$i675, out_$p676, out_$p669, out_$p670, out_$i677, out_$i678, out_$i679, out_$i680, out_$i681, out_$p682, out_$p685, out_$i686, out_$i687, out_$i688, out_$i689, out_$p690, out_$p683, out_$p684, out_$i691, out_$i692, out_$i693, out_$i694, out_$i695, out_$p696, out_$p699, out_$i700, out_$i701, out_$i702, out_$i703, out_$p704, out_$p697, out_$p698, out_$i705, out_$i706, out_$i707, out_$i708, out_$i709, out_$p710, out_$p713, out_$i714, out_$i715, out_$i716, out_$i717, out_$p718, out_$p711, out_$p712, out_$i719, out_$i720, out_$i721, out_$i722, out_$i723, out_$p724, out_$p727, out_$i728, out_$i729, out_$i730, out_$i731, out_$p732, out_$p725, out_$p726, out_$i733, out_$i734, out_$i735, out_$i736, out_$i737, out_$p738, out_$p741, out_$i742, out_$i743, out_$i744, out_$i745, out_$p746, out_$p739, out_$p740, out_$i747, out_$i748, out_$i749, out_$i750, out_$i751, out_$p752, out_$p755, out_$i756, out_$i757, out_$i758, out_$i759, out_$p760, out_$p753, out_$p754, out_$i761, out_$i762, out_$i763, out_$i764, out_$i765, out_$p766, out_$p769, out_$i770, out_$i771, out_$i772, out_$i773, out_$p774, out_$p767, out_$p768, out_$i775, out_$i776, out_$i777, out_$i778, out_$i779, out_$p780, out_$p783, out_$i784, out_$i785, out_$i786, out_$i787, out_$p788, out_$p781, out_$p782, out_$i789, out_$i790, out_$i791, out_$i793, out_$i794, out_$i796, out_$i797, out_$i798, out_$p799, out_$p802, out_$i803, out_$i804, out_$i805, out_$i806, out_$p807, out_$p800, out_$p801, out_$i808, out_$i809, out_$i810, out_$i811, out_$i812, out_$p813, out_$p816, out_$i817, out_$i818, out_$i819, out_$i820, out_$p821, out_$p814, out_$p815, out_$i822, out_$i823, out_$i824, out_$i825, out_$i826, out_$p827, out_$p830, out_$i831, out_$i832, out_$i833, out_$i834, out_$p835, out_$p828, out_$p829, out_$i836, out_$i837, out_$i838, out_$i839, out_$i840, out_$p841, out_$p844, out_$i845, out_$i846, out_$i847, out_$i848, out_$p849, out_$p842, out_$p843, out_$i850, out_$i851, out_$i852, out_$i853, out_$i854, out_$p855, out_$p858, out_$i859, out_$i860, out_$i861, out_$i862, out_$p863, out_$p856, out_$p857, out_$i864, out_$i865, out_$i866, out_$i867, out_$i868, out_$p869, out_$p872, out_$i873, out_$i874, out_$i875, out_$i876, out_$p877, out_$p870, out_$p871, out_$i878, out_$i879, out_$i880, out_$i881, out_$i882, out_$p883, out_$p886, out_$i887, out_$i888, out_$i889, out_$i890, out_$p891, out_$p884, out_$p885, out_$i892, out_$i893, out_$i894, out_$i895, out_$i896, out_$p897, out_$p900, out_$i901, out_$i902, out_$i903, out_$i904, out_$p905, out_$p898, out_$p899, out_$i906, out_$i907, out_$i908, out_$i909, out_$i910, out_$p911, out_$p914, out_$i915, out_$i916, out_$i917, out_$i918, out_$p919, out_$p912, out_$p913, out_$i920, out_$i921, out_$i922, out_$i923, out_$i924, out_$p925, out_$p928, out_$i929, out_$i930, out_$i931, out_$i932, out_$p933, out_$p926, out_$p927, out_$i934, out_$i935, out_$i936, out_$i937, out_$i938, out_$p939, out_$p942, out_$i943, out_$i944, out_$i945, out_$i946, out_$p947, out_$p940, out_$p941, out_$i948, out_$i949, out_$i950, out_$i951, out_$i952, out_$p953, out_$p956, out_$i957, out_$i958, out_$i959, out_$i960, out_$p961, out_$p954, out_$p955, out_$i962, out_$i963, out_$i964, out_$i965, out_$i966, out_$p967, out_$p970, out_$i971, out_$i972, out_$i973, out_$i974, out_$p975, out_$p968, out_$p969, out_$i976, out_$i977, out_$i978, out_$i979, out_$i980, out_$p981, out_$p984, out_$i985, out_$i986, out_$i987, out_$i988, out_$p989, out_$p982, out_$p983, out_$i990, out_$i991, out_$i992, out_$i993, out_$i994, out_$p995, out_$p998, out_$i999, out_$i1000, out_$i1001, out_$i1002, out_$p1003, out_$p996, out_$p997, out_$i1004, out_$i1005, out_$i1006, out_$i1007, out_$i1008, out_$p1009, out_$p1012, out_$i1013, out_$i1014, out_$i1015, out_$i1016, out_$p1017, out_$p1010, out_$p1011, out_$i1018, out_$i1019, out_$i1020, out_$i1021, out_$i1022, out_$p1023, out_$p1026, out_$i1027, out_$i1028, out_$i1029, out_$i1030, out_$p1031, out_$p1024, out_$p1025, out_$i1032, out_$i1033, out_$i1034, out_$i1035, out_$i1036, out_$p1037, out_$p1040, out_$i1041, out_$i1042, out_$i1043, out_$i1044, out_$p1045, out_$p1038, out_$p1039, out_$i1046, out_$i1047, out_$i1048, out_$i1049, out_$i1050, out_$p1051, out_$p1054, out_$i1055, out_$i1056, out_$i1057, out_$i1058, out_$p1059, out_$p1052, out_$p1053, out_$i1060, out_$i1061, out_$i1062, out_$i1063, out_$i1064, out_$p1065, out_$p1068, out_$i1069, out_$i1070, out_$i1071, out_$i1072, out_$p1073, out_$p1066, out_$p1067, out_$i1074, out_$i1075, out_$i1076, out_$i1077, out_$i1078, out_$p1079, out_$p1082, out_$i1083, out_$i1084, out_$i1085, out_$i1086, out_$p1087, out_$p1080, out_$p1081, out_$i1088, out_$i1089, out_$i1090, out_$i1091, out_$i1092, out_$p1093, out_$p1096, out_$i1097, out_$i1098, out_$i1099, out_$i1100, out_$p1101, out_$p1094, out_$p1095, out_$i1102, out_$i1103, out_$i1104, out_$i1105, out_$i1106, out_$p1107, out_$p1110, out_$i1111, out_$i1112, out_$i1113, out_$i1114, out_$p1115, out_$p1108, out_$p1109, out_$i1116, out_$i1117, out_$i1118, out_$i1119, out_$i1120, out_$p1121, out_$p1124, out_$i1125, out_$i1126, out_$i1127, out_$i1128, out_$p1129, out_$p1122, out_$p1123, out_$i1130, out_$i1131, out_$i1132, out_$i1133, out_$i1134, out_$p1135, out_$p1138, out_$i1139, out_$i1140, out_$i1141, out_$i1142, out_$p1143, out_$p1136, out_$p1137, out_$i1144, out_$i1145, out_$i1146, out_$i1147, out_$i1148, out_$p1149, out_$p1152, out_$i1153, out_$i1154, out_$i1155, out_$i1156, out_$p1157, out_$p1150, out_$p1151, out_$i1158, out_$i1159, out_$i1160, out_$i1161, out_$i1162, out_$p1163, out_$p1166, out_$i1167, out_$i1168, out_$i1169, out_$i1170, out_$p1171, out_$p1164, out_$p1165, out_$i1172, out_$i1173, out_$i1174, out_$i1175, out_$i1176, out_$p1177, out_$p1180, out_$i1181, out_$i1182, out_$i1183, out_$i1184, out_$p1185, out_$p1178, out_$p1179, out_$i1186, out_$i1187, out_$i1188, out_$i1189, out_$i1190, out_$p1191, out_$p1194, out_$i1195, out_$i1196, out_$i1197, out_$i1198, out_$p1199, out_$p1192, out_$p1193, out_$i1200, out_$i1201, out_$i1202, out_$i1204, out_$i1205, out_vslice_dummy_var_26, out_vslice_dummy_var_27, out_vslice_dummy_var_28, out_vslice_dummy_var_29);
    return;

  exit:
    return;
}



procedure ftdi_elan_respond_engine_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$i10: i32, in_$i11: i32, in_$i12: i32, in_$i13: i32, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$i18: i8, in_$i19: i32, in_$i20: i32, in_$p21: ref, in_$p22: ref, in_$i23: i32, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$i28: i32, in_$i29: i32, in_$p30: ref, in_$i31: i32, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$i35: i1, in_$p37: ref, in_$i38: i8, in_$i39: i32, in_$i40: i32, in_$i41: i64, in_$p42: ref, in_$i45: i32, in_$i46: i64, in_$p47: ref, in_$p43: ref, in_$p44: ref, in_$i48: i32, in_$i49: i1, in_$i36: i32, in_$i50: i1, in_$i51: i32, in_$i52: i1, in_$i53: i32, in_$i54: i32, in_$i55: i64, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$i59: i64, in_$i60: i1, in_$i65: i1, in_$i66: i32, in_$i67: i1, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$i72: i32, in_$p73: ref, in_$i68: i32, in_$i90: i1, in_$i91: i32, in_$i92: i32, in_$i98: i1, in_$i99: i32, in_$i100: i32, in_$i106: i32, in_$i107: i1, in_$p108: ref, in_$p109: ref, in_$i110: i8, in_$p111: ref, in_$p112: ref, in_$p113: ref, in_$i114: i8, in_$i115: i32, in_$i116: i32, in_$i117: i1, in_$i118: i32, in_$i119: i1, in_$i120: i32, in_$i121: i1, in_$i122: i32, in_$i123: i1, in_$i124: i32, in_$i125: i1, in_$i126: i32, in_$i127: i1, in_$i128: i32, in_$i129: i1, in_$i130: i32, in_$i131: i1, in_$i132: i32, in_$i133: i1, in_$i134: i32, in_$i135: i1, in_$i74: i32, in_$i75: i32, in_$i76: i32, in_$i77: i32, in_$p78: ref, in_$i136: i32, in_$i137: i64, in_$i138: i1, in_$i141: i32, in_$p142: ref, in_$i143: i64, in_$i144: i64, in_$p145: ref, in_$p146: ref, in_$p147: ref, in_$p148: ref, in_$i149: i64, in_$p150: ref, in_$i151: i8, in_$i152: i32, in_$p153: ref, in_$i154: i64, in_$i155: i64, in_$p156: ref, in_$p157: ref, in_$i158: i32, in_$i159: i1, in_$i162: i32, in_$i163: i1, in_$i160: i8, in_$i161: i32, in_$p164: ref, in_$p165: ref, in_$i166: i32, in_$i167: i32, in_$p168: ref, in_$p169: ref, in_$i170: i32, in_$p171: ref, in_$i172: i32, in_$i173: i1, in_$p174: ref, in_$i175: i64, in_$i176: i1, in_$p63: ref, in_$i64: i32, in_$p179: ref, in_$i180: i32, in_$i181: i1, in_$p183: ref, in_$i184: i8, in_$i185: i32, in_$i186: i32, in_$i187: i32, in_$p189: ref, in_$i190: i8, in_$i191: i32, in_$i192: i32, in_$i193: i16, in_$i194: i32, in_$p196: ref, in_$i197: i8, in_$i198: i16, in_$i199: i32, in_$i200: i32, in_$i201: i16, in_$p202: ref, in_$p203: ref, in_$i204: i64, in_$p205: ref, in_$i206: i32, in_$i207: i32, in_$p208: ref, in_$p209: ref, in_$p210: ref, in_$p211: ref, in_$p212: ref, in_$i213: i1, in_$i215: i64, in_$p216: ref, in_$i217: i8, in_$i218: i32, in_$i219: i32, in_$i220: i64, in_$p221: ref, in_$i224: i32, in_$i225: i64, in_$p226: ref, in_$p222: ref, in_$p223: ref, in_$i227: i32, in_$i228: i1, in_$i214: i32, in_$i229: i1, in_$p230: ref, in_$p231: ref, in_$p232: ref, in_$p233: ref, in_$p234: ref, in_$p235: ref, in_$p236: ref, in_$p238: ref, in_$i239: i32, in_$i240: i1, in_$p241: ref, in_$i242: i32, in_$p243: ref, in_$i244: i32, in_$i245: i32, in_$p246: ref, in_$p247: ref, in_$p248: ref, in_$i249: i64, in_$i250: i64, in_$p253: ref, in_$i254: i8, in_$i255: i32, in_$i256: i32, in_$p258: ref, in_$i259: i8, in_$i260: i32, in_$i261: i32, in_$i262: i32, in_$p264: ref, in_$i265: i8, in_$i266: i32, in_$i267: i32, in_$i268: i32, in_$p270: ref, in_$i271: i8, in_$i272: i32, in_$i273: i32, in_$p274: ref, in_$p275: ref, in_$p276: ref, in_$p277: ref, in_$p278: ref, in_$p279: ref, in_$p280: ref, in_$p281: ref, in_$p282: ref, in_$p285: ref, in_$i286: i8, in_$i287: i32, in_$i288: i32, in_$i289: i8, in_$i290: i32, in_$i291: i1, in_$i292: i32, in_$i293: i1, in_$i294: i32, in_$i295: i1, in_$i296: i32, in_$i297: i1, in_$p298: ref, in_$p299: ref, in_$p300: ref, in_$i301: i32, in_$p303: ref, in_$i304: i8, in_$i305: i32, in_$i306: i1, in_$p307: ref, in_$p309: ref, in_$i310: i8, in_$i311: i32, in_$i312: i32, in_$i313: i32, in_$p315: ref, in_$i316: i8, in_$i317: i32, in_$i318: i32, in_$p320: ref, in_$i321: i8, in_$i322: i32, in_$i323: i32, in_$i324: i16, in_$i325: i32, in_$p327: ref, in_$i328: i8, in_$i329: i16, in_$i330: i32, in_$i331: i32, in_$i332: i16, in_$p333: ref, in_$p334: ref, in_$i335: i64, in_$p336: ref, in_$p338: ref, in_$i339: i8, in_$i340: i32, in_$i341: i32, in_$i342: i32, in_$p343: ref, in_$p345: ref, in_$i346: i8, in_$i347: i32, in_$i348: i32, in_$i349: i32, in_$p350: ref, in_$p352: ref, in_$i353: i8, in_$i354: i32, in_$i355: i32, in_$i356: i32, in_$p357: ref, in_$p359: ref, in_$i360: i8, in_$i361: i32, in_$i362: i32, in_$i363: i32, in_$p364: ref, in_$p366: ref, in_$i367: i8, in_$i368: i32, in_$i369: i32, in_$p370: ref, in_$p372: ref, in_$i373: i8, in_$i374: i32, in_$i375: i32, in_$i376: i1, in_$i377: i32, in_$i378: i16, in_$p379: ref, in_$i380: i32, in_$i381: i16, in_$p382: ref, in_$p177: ref, in_$i178: i32, in_$p61: ref, in_$i62: i32, in_$p139: ref, in_$i140: i32, in_$p383: ref, in_$i384: i32, in_$i385: i1, in_$i386: i32, in_$i387: i64, in_$p388: ref, in_$p391: ref, in_$i392: i8, in_$i393: i32, in_$i394: i32, in_$i395: i64, in_$p396: ref, in_$p389: ref, in_$p390: ref, in_$i397: i32, in_$i398: i1, in_$i399: i1, in_$i400: i32, in_$i401: i64, in_$p402: ref, in_$p405: ref, in_$i406: i8, in_$i407: i32, in_$i408: i32, in_$i409: i64, in_$p410: ref, in_$p403: ref, in_$p404: ref, in_$i411: i32, in_$i412: i1, in_$i413: i1, in_$i414: i32, in_$i415: i64, in_$p416: ref, in_$p419: ref, in_$i420: i8, in_$i421: i32, in_$i422: i32, in_$i423: i64, in_$p424: ref, in_$p417: ref, in_$p418: ref, in_$i425: i32, in_$i426: i1, in_$i427: i1, in_$i428: i32, in_$i429: i64, in_$p430: ref, in_$p433: ref, in_$i434: i8, in_$i435: i32, in_$i436: i32, in_$i437: i64, in_$p438: ref, in_$p431: ref, in_$p432: ref, in_$i439: i32, in_$i440: i1, in_$i441: i1, in_$i442: i32, in_$i443: i64, in_$p444: ref, in_$p447: ref, in_$i448: i8, in_$i449: i32, in_$i450: i32, in_$i451: i64, in_$p452: ref, in_$p445: ref, in_$p446: ref, in_$i453: i32, in_$i454: i1, in_$i455: i1, in_$i456: i32, in_$i457: i64, in_$p458: ref, in_$p461: ref, in_$i462: i8, in_$i463: i32, in_$i464: i32, in_$i465: i64, in_$p466: ref, in_$p459: ref, in_$p460: ref, in_$i467: i32, in_$i468: i1, in_$i469: i1, in_$i470: i32, in_$i471: i64, in_$p472: ref, in_$p475: ref, in_$i476: i8, in_$i477: i32, in_$i478: i32, in_$i479: i64, in_$p480: ref, in_$p473: ref, in_$p474: ref, in_$i481: i32, in_$i482: i1, in_$i483: i1, in_$i484: i32, in_$i485: i64, in_$p486: ref, in_$p489: ref, in_$i490: i8, in_$i491: i32, in_$i492: i32, in_$i493: i64, in_$p494: ref, in_$p487: ref, in_$p488: ref, in_$i495: i32, in_$i496: i1, in_$i497: i1, in_$i498: i32, in_$i499: i64, in_$p500: ref, in_$p503: ref, in_$i504: i8, in_$i505: i32, in_$i506: i32, in_$i507: i64, in_$p508: ref, in_$p501: ref, in_$p502: ref, in_$i509: i32, in_$i510: i1, in_$i511: i1, in_$i512: i32, in_$i513: i64, in_$p514: ref, in_$p517: ref, in_$i518: i8, in_$i519: i32, in_$i520: i32, in_$i521: i64, in_$p522: ref, in_$p515: ref, in_$p516: ref, in_$i523: i32, in_$i524: i1, in_$i525: i1, in_$i526: i32, in_$i527: i64, in_$p528: ref, in_$p531: ref, in_$i532: i8, in_$i533: i32, in_$i534: i32, in_$i535: i64, in_$p536: ref, in_$p529: ref, in_$p530: ref, in_$i537: i32, in_$i538: i1, in_$i539: i1, in_$i540: i32, in_$i541: i64, in_$p542: ref, in_$p545: ref, in_$i546: i8, in_$i547: i32, in_$i548: i32, in_$i549: i64, in_$p550: ref, in_$p543: ref, in_$p544: ref, in_$i551: i32, in_$i552: i1, in_$i553: i1, in_$i554: i32, in_$i555: i64, in_$p556: ref, in_$p559: ref, in_$i560: i8, in_$i561: i32, in_$i562: i32, in_$i563: i64, in_$p564: ref, in_$p557: ref, in_$p558: ref, in_$i565: i32, in_$i566: i1, in_$i567: i1, in_$i568: i32, in_$i569: i64, in_$p570: ref, in_$p573: ref, in_$i574: i8, in_$i575: i32, in_$i576: i32, in_$i577: i64, in_$p578: ref, in_$p571: ref, in_$p572: ref, in_$i579: i32, in_$i580: i1, in_$i581: i1, in_$i582: i32, in_$i583: i64, in_$p584: ref, in_$p587: ref, in_$i588: i8, in_$i589: i32, in_$i590: i32, in_$i591: i64, in_$p592: ref, in_$p585: ref, in_$p586: ref, in_$i593: i32, in_$i594: i1, in_$i595: i1, in_$i596: i32, in_$i597: i64, in_$p598: ref, in_$p601: ref, in_$i602: i8, in_$i603: i32, in_$i604: i32, in_$i605: i64, in_$p606: ref, in_$p599: ref, in_$p600: ref, in_$i607: i32, in_$i608: i1, in_$i609: i1, in_$i610: i32, in_$i611: i64, in_$p612: ref, in_$p615: ref, in_$i616: i8, in_$i617: i32, in_$i618: i32, in_$i619: i64, in_$p620: ref, in_$p613: ref, in_$p614: ref, in_$i621: i32, in_$i622: i1, in_$i623: i1, in_$i624: i32, in_$i625: i64, in_$p626: ref, in_$p629: ref, in_$i630: i8, in_$i631: i32, in_$i632: i32, in_$i633: i64, in_$p634: ref, in_$p627: ref, in_$p628: ref, in_$i635: i32, in_$i636: i1, in_$i637: i1, in_$i638: i32, in_$i639: i64, in_$p640: ref, in_$p643: ref, in_$i644: i8, in_$i645: i32, in_$i646: i32, in_$i647: i64, in_$p648: ref, in_$p641: ref, in_$p642: ref, in_$i649: i32, in_$i650: i1, in_$i651: i1, in_$i652: i32, in_$i653: i64, in_$p654: ref, in_$p657: ref, in_$i658: i8, in_$i659: i32, in_$i660: i32, in_$i661: i64, in_$p662: ref, in_$p655: ref, in_$p656: ref, in_$i663: i32, in_$i664: i1, in_$i665: i1, in_$i666: i32, in_$i667: i64, in_$p668: ref, in_$p671: ref, in_$i672: i8, in_$i673: i32, in_$i674: i32, in_$i675: i64, in_$p676: ref, in_$p669: ref, in_$p670: ref, in_$i677: i32, in_$i678: i1, in_$i679: i1, in_$i680: i32, in_$i681: i64, in_$p682: ref, in_$p685: ref, in_$i686: i8, in_$i687: i32, in_$i688: i32, in_$i689: i64, in_$p690: ref, in_$p683: ref, in_$p684: ref, in_$i691: i32, in_$i692: i1, in_$i693: i1, in_$i694: i32, in_$i695: i64, in_$p696: ref, in_$p699: ref, in_$i700: i8, in_$i701: i32, in_$i702: i32, in_$i703: i64, in_$p704: ref, in_$p697: ref, in_$p698: ref, in_$i705: i32, in_$i706: i1, in_$i707: i1, in_$i708: i32, in_$i709: i64, in_$p710: ref, in_$p713: ref, in_$i714: i8, in_$i715: i32, in_$i716: i32, in_$i717: i64, in_$p718: ref, in_$p711: ref, in_$p712: ref, in_$i719: i32, in_$i720: i1, in_$i721: i1, in_$i722: i32, in_$i723: i64, in_$p724: ref, in_$p727: ref, in_$i728: i8, in_$i729: i32, in_$i730: i32, in_$i731: i64, in_$p732: ref, in_$p725: ref, in_$p726: ref, in_$i733: i32, in_$i734: i1, in_$i735: i1, in_$i736: i32, in_$i737: i64, in_$p738: ref, in_$p741: ref, in_$i742: i8, in_$i743: i32, in_$i744: i32, in_$i745: i64, in_$p746: ref, in_$p739: ref, in_$p740: ref, in_$i747: i32, in_$i748: i1, in_$i749: i1, in_$i750: i32, in_$i751: i64, in_$p752: ref, in_$p755: ref, in_$i756: i8, in_$i757: i32, in_$i758: i32, in_$i759: i64, in_$p760: ref, in_$p753: ref, in_$p754: ref, in_$i761: i32, in_$i762: i1, in_$i763: i1, in_$i764: i32, in_$i765: i64, in_$p766: ref, in_$p769: ref, in_$i770: i8, in_$i771: i32, in_$i772: i32, in_$i773: i64, in_$p774: ref, in_$p767: ref, in_$p768: ref, in_$i775: i32, in_$i776: i1, in_$i777: i1, in_$i778: i32, in_$i779: i64, in_$p780: ref, in_$p783: ref, in_$i784: i8, in_$i785: i32, in_$i786: i32, in_$i787: i64, in_$p788: ref, in_$p781: ref, in_$p782: ref, in_$i789: i32, in_$i790: i1, in_$i791: i1, in_$i793: i8, in_$i794: i32, in_$i796: i1, in_$i797: i32, in_$i798: i64, in_$p799: ref, in_$p802: ref, in_$i803: i8, in_$i804: i32, in_$i805: i32, in_$i806: i64, in_$p807: ref, in_$p800: ref, in_$p801: ref, in_$i808: i32, in_$i809: i1, in_$i810: i1, in_$i811: i32, in_$i812: i64, in_$p813: ref, in_$p816: ref, in_$i817: i8, in_$i818: i32, in_$i819: i32, in_$i820: i64, in_$p821: ref, in_$p814: ref, in_$p815: ref, in_$i822: i32, in_$i823: i1, in_$i824: i1, in_$i825: i32, in_$i826: i64, in_$p827: ref, in_$p830: ref, in_$i831: i8, in_$i832: i32, in_$i833: i32, in_$i834: i64, in_$p835: ref, in_$p828: ref, in_$p829: ref, in_$i836: i32, in_$i837: i1, in_$i838: i1, in_$i839: i32, in_$i840: i64, in_$p841: ref, in_$p844: ref, in_$i845: i8, in_$i846: i32, in_$i847: i32, in_$i848: i64, in_$p849: ref, in_$p842: ref, in_$p843: ref, in_$i850: i32, in_$i851: i1, in_$i852: i1, in_$i853: i32, in_$i854: i64, in_$p855: ref, in_$p858: ref, in_$i859: i8, in_$i860: i32, in_$i861: i32, in_$i862: i64, in_$p863: ref, in_$p856: ref, in_$p857: ref, in_$i864: i32, in_$i865: i1, in_$i866: i1, in_$i867: i32, in_$i868: i64, in_$p869: ref, in_$p872: ref, in_$i873: i8, in_$i874: i32, in_$i875: i32, in_$i876: i64, in_$p877: ref, in_$p870: ref, in_$p871: ref, in_$i878: i32, in_$i879: i1, in_$i880: i1, in_$i881: i32, in_$i882: i64, in_$p883: ref, in_$p886: ref, in_$i887: i8, in_$i888: i32, in_$i889: i32, in_$i890: i64, in_$p891: ref, in_$p884: ref, in_$p885: ref, in_$i892: i32, in_$i893: i1, in_$i894: i1, in_$i895: i32, in_$i896: i64, in_$p897: ref, in_$p900: ref, in_$i901: i8, in_$i902: i32, in_$i903: i32, in_$i904: i64, in_$p905: ref, in_$p898: ref, in_$p899: ref, in_$i906: i32, in_$i907: i1, in_$i908: i1, in_$i909: i32, in_$i910: i64, in_$p911: ref, in_$p914: ref, in_$i915: i8, in_$i916: i32, in_$i917: i32, in_$i918: i64, in_$p919: ref, in_$p912: ref, in_$p913: ref, in_$i920: i32, in_$i921: i1, in_$i922: i1, in_$i923: i32, in_$i924: i64, in_$p925: ref, in_$p928: ref, in_$i929: i8, in_$i930: i32, in_$i931: i32, in_$i932: i64, in_$p933: ref, in_$p926: ref, in_$p927: ref, in_$i934: i32, in_$i935: i1, in_$i936: i1, in_$i937: i32, in_$i938: i64, in_$p939: ref, in_$p942: ref, in_$i943: i8, in_$i944: i32, in_$i945: i32, in_$i946: i64, in_$p947: ref, in_$p940: ref, in_$p941: ref, in_$i948: i32, in_$i949: i1, in_$i950: i1, in_$i951: i32, in_$i952: i64, in_$p953: ref, in_$p956: ref, in_$i957: i8, in_$i958: i32, in_$i959: i32, in_$i960: i64, in_$p961: ref, in_$p954: ref, in_$p955: ref, in_$i962: i32, in_$i963: i1, in_$i964: i1, in_$i965: i32, in_$i966: i64, in_$p967: ref, in_$p970: ref, in_$i971: i8, in_$i972: i32, in_$i973: i32, in_$i974: i64, in_$p975: ref, in_$p968: ref, in_$p969: ref, in_$i976: i32, in_$i977: i1, in_$i978: i1, in_$i979: i32, in_$i980: i64, in_$p981: ref, in_$p984: ref, in_$i985: i8, in_$i986: i32, in_$i987: i32, in_$i988: i64, in_$p989: ref, in_$p982: ref, in_$p983: ref, in_$i990: i32, in_$i991: i1, in_$i992: i1, in_$i993: i32, in_$i994: i64, in_$p995: ref, in_$p998: ref, in_$i999: i8, in_$i1000: i32, in_$i1001: i32, in_$i1002: i64, in_$p1003: ref, in_$p996: ref, in_$p997: ref, in_$i1004: i32, in_$i1005: i1, in_$i1006: i1, in_$i1007: i32, in_$i1008: i64, in_$p1009: ref, in_$p1012: ref, in_$i1013: i8, in_$i1014: i32, in_$i1015: i32, in_$i1016: i64, in_$p1017: ref, in_$p1010: ref, in_$p1011: ref, in_$i1018: i32, in_$i1019: i1, in_$i1020: i1, in_$i1021: i32, in_$i1022: i64, in_$p1023: ref, in_$p1026: ref, in_$i1027: i8, in_$i1028: i32, in_$i1029: i32, in_$i1030: i64, in_$p1031: ref, in_$p1024: ref, in_$p1025: ref, in_$i1032: i32, in_$i1033: i1, in_$i1034: i1, in_$i1035: i32, in_$i1036: i64, in_$p1037: ref, in_$p1040: ref, in_$i1041: i8, in_$i1042: i32, in_$i1043: i32, in_$i1044: i64, in_$p1045: ref, in_$p1038: ref, in_$p1039: ref, in_$i1046: i32, in_$i1047: i1, in_$i1048: i1, in_$i1049: i32, in_$i1050: i64, in_$p1051: ref, in_$p1054: ref, in_$i1055: i8, in_$i1056: i32, in_$i1057: i32, in_$i1058: i64, in_$p1059: ref, in_$p1052: ref, in_$p1053: ref, in_$i1060: i32, in_$i1061: i1, in_$i1062: i1, in_$i1063: i32, in_$i1064: i64, in_$p1065: ref, in_$p1068: ref, in_$i1069: i8, in_$i1070: i32, in_$i1071: i32, in_$i1072: i64, in_$p1073: ref, in_$p1066: ref, in_$p1067: ref, in_$i1074: i32, in_$i1075: i1, in_$i1076: i1, in_$i1077: i32, in_$i1078: i64, in_$p1079: ref, in_$p1082: ref, in_$i1083: i8, in_$i1084: i32, in_$i1085: i32, in_$i1086: i64, in_$p1087: ref, in_$p1080: ref, in_$p1081: ref, in_$i1088: i32, in_$i1089: i1, in_$i1090: i1, in_$i1091: i32, in_$i1092: i64, in_$p1093: ref, in_$p1096: ref, in_$i1097: i8, in_$i1098: i32, in_$i1099: i32, in_$i1100: i64, in_$p1101: ref, in_$p1094: ref, in_$p1095: ref, in_$i1102: i32, in_$i1103: i1, in_$i1104: i1, in_$i1105: i32, in_$i1106: i64, in_$p1107: ref, in_$p1110: ref, in_$i1111: i8, in_$i1112: i32, in_$i1113: i32, in_$i1114: i64, in_$p1115: ref, in_$p1108: ref, in_$p1109: ref, in_$i1116: i32, in_$i1117: i1, in_$i1118: i1, in_$i1119: i32, in_$i1120: i64, in_$p1121: ref, in_$p1124: ref, in_$i1125: i8, in_$i1126: i32, in_$i1127: i32, in_$i1128: i64, in_$p1129: ref, in_$p1122: ref, in_$p1123: ref, in_$i1130: i32, in_$i1131: i1, in_$i1132: i1, in_$i1133: i32, in_$i1134: i64, in_$p1135: ref, in_$p1138: ref, in_$i1139: i8, in_$i1140: i32, in_$i1141: i32, in_$i1142: i64, in_$p1143: ref, in_$p1136: ref, in_$p1137: ref, in_$i1144: i32, in_$i1145: i1, in_$i1146: i1, in_$i1147: i32, in_$i1148: i64, in_$p1149: ref, in_$p1152: ref, in_$i1153: i8, in_$i1154: i32, in_$i1155: i32, in_$i1156: i64, in_$p1157: ref, in_$p1150: ref, in_$p1151: ref, in_$i1158: i32, in_$i1159: i1, in_$i1160: i1, in_$i1161: i32, in_$i1162: i64, in_$p1163: ref, in_$p1166: ref, in_$i1167: i8, in_$i1168: i32, in_$i1169: i32, in_$i1170: i64, in_$p1171: ref, in_$p1164: ref, in_$p1165: ref, in_$i1172: i32, in_$i1173: i1, in_$i1174: i1, in_$i1175: i32, in_$i1176: i64, in_$p1177: ref, in_$p1180: ref, in_$i1181: i8, in_$i1182: i32, in_$i1183: i32, in_$i1184: i64, in_$p1185: ref, in_$p1178: ref, in_$p1179: ref, in_$i1186: i32, in_$i1187: i1, in_$i1188: i1, in_$i1189: i32, in_$i1190: i64, in_$p1191: ref, in_$p1194: ref, in_$i1195: i8, in_$i1196: i32, in_$i1197: i32, in_$i1198: i64, in_$p1199: ref, in_$p1192: ref, in_$p1193: ref, in_$i1200: i32, in_$i1201: i1, in_$i1202: i1, in_$i1204: i8, in_$i1205: i32, in_vslice_dummy_var_26: i32, in_vslice_dummy_var_27: i32, in_vslice_dummy_var_28: i32, in_vslice_dummy_var_29: i32) returns (out_$i10: i32, out_$i11: i32, out_$i12: i32, out_$i13: i32, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$i18: i8, out_$i19: i32, out_$i20: i32, out_$p21: ref, out_$p22: ref, out_$i23: i32, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$i28: i32, out_$i29: i32, out_$p30: ref, out_$i31: i32, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$i35: i1, out_$p37: ref, out_$i38: i8, out_$i39: i32, out_$i40: i32, out_$i41: i64, out_$p42: ref, out_$i45: i32, out_$i46: i64, out_$p47: ref, out_$p43: ref, out_$p44: ref, out_$i48: i32, out_$i49: i1, out_$i36: i32, out_$i50: i1, out_$i51: i32, out_$i52: i1, out_$i53: i32, out_$i54: i32, out_$i55: i64, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$i59: i64, out_$i60: i1, out_$i65: i1, out_$i66: i32, out_$i67: i1, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$i72: i32, out_$p73: ref, out_$i68: i32, out_$i90: i1, out_$i91: i32, out_$i92: i32, out_$i98: i1, out_$i99: i32, out_$i100: i32, out_$i106: i32, out_$i107: i1, out_$p108: ref, out_$p109: ref, out_$i110: i8, out_$p111: ref, out_$p112: ref, out_$p113: ref, out_$i114: i8, out_$i115: i32, out_$i116: i32, out_$i117: i1, out_$i118: i32, out_$i119: i1, out_$i120: i32, out_$i121: i1, out_$i122: i32, out_$i123: i1, out_$i124: i32, out_$i125: i1, out_$i126: i32, out_$i127: i1, out_$i128: i32, out_$i129: i1, out_$i130: i32, out_$i131: i1, out_$i132: i32, out_$i133: i1, out_$i134: i32, out_$i135: i1, out_$i74: i32, out_$i75: i32, out_$i76: i32, out_$i77: i32, out_$p78: ref, out_$i136: i32, out_$i137: i64, out_$i138: i1, out_$i141: i32, out_$p142: ref, out_$i143: i64, out_$i144: i64, out_$p145: ref, out_$p146: ref, out_$p147: ref, out_$p148: ref, out_$i149: i64, out_$p150: ref, out_$i151: i8, out_$i152: i32, out_$p153: ref, out_$i154: i64, out_$i155: i64, out_$p156: ref, out_$p157: ref, out_$i158: i32, out_$i159: i1, out_$i162: i32, out_$i163: i1, out_$i160: i8, out_$i161: i32, out_$p164: ref, out_$p165: ref, out_$i166: i32, out_$i167: i32, out_$p168: ref, out_$p169: ref, out_$i170: i32, out_$p171: ref, out_$i172: i32, out_$i173: i1, out_$p174: ref, out_$i175: i64, out_$i176: i1, out_$p63: ref, out_$i64: i32, out_$p179: ref, out_$i180: i32, out_$i181: i1, out_$p183: ref, out_$i184: i8, out_$i185: i32, out_$i186: i32, out_$i187: i32, out_$p189: ref, out_$i190: i8, out_$i191: i32, out_$i192: i32, out_$i193: i16, out_$i194: i32, out_$p196: ref, out_$i197: i8, out_$i198: i16, out_$i199: i32, out_$i200: i32, out_$i201: i16, out_$p202: ref, out_$p203: ref, out_$i204: i64, out_$p205: ref, out_$i206: i32, out_$i207: i32, out_$p208: ref, out_$p209: ref, out_$p210: ref, out_$p211: ref, out_$p212: ref, out_$i213: i1, out_$i215: i64, out_$p216: ref, out_$i217: i8, out_$i218: i32, out_$i219: i32, out_$i220: i64, out_$p221: ref, out_$i224: i32, out_$i225: i64, out_$p226: ref, out_$p222: ref, out_$p223: ref, out_$i227: i32, out_$i228: i1, out_$i214: i32, out_$i229: i1, out_$p230: ref, out_$p231: ref, out_$p232: ref, out_$p233: ref, out_$p234: ref, out_$p235: ref, out_$p236: ref, out_$p238: ref, out_$i239: i32, out_$i240: i1, out_$p241: ref, out_$i242: i32, out_$p243: ref, out_$i244: i32, out_$i245: i32, out_$p246: ref, out_$p247: ref, out_$p248: ref, out_$i249: i64, out_$i250: i64, out_$p253: ref, out_$i254: i8, out_$i255: i32, out_$i256: i32, out_$p258: ref, out_$i259: i8, out_$i260: i32, out_$i261: i32, out_$i262: i32, out_$p264: ref, out_$i265: i8, out_$i266: i32, out_$i267: i32, out_$i268: i32, out_$p270: ref, out_$i271: i8, out_$i272: i32, out_$i273: i32, out_$p274: ref, out_$p275: ref, out_$p276: ref, out_$p277: ref, out_$p278: ref, out_$p279: ref, out_$p280: ref, out_$p281: ref, out_$p282: ref, out_$p285: ref, out_$i286: i8, out_$i287: i32, out_$i288: i32, out_$i289: i8, out_$i290: i32, out_$i291: i1, out_$i292: i32, out_$i293: i1, out_$i294: i32, out_$i295: i1, out_$i296: i32, out_$i297: i1, out_$p298: ref, out_$p299: ref, out_$p300: ref, out_$i301: i32, out_$p303: ref, out_$i304: i8, out_$i305: i32, out_$i306: i1, out_$p307: ref, out_$p309: ref, out_$i310: i8, out_$i311: i32, out_$i312: i32, out_$i313: i32, out_$p315: ref, out_$i316: i8, out_$i317: i32, out_$i318: i32, out_$p320: ref, out_$i321: i8, out_$i322: i32, out_$i323: i32, out_$i324: i16, out_$i325: i32, out_$p327: ref, out_$i328: i8, out_$i329: i16, out_$i330: i32, out_$i331: i32, out_$i332: i16, out_$p333: ref, out_$p334: ref, out_$i335: i64, out_$p336: ref, out_$p338: ref, out_$i339: i8, out_$i340: i32, out_$i341: i32, out_$i342: i32, out_$p343: ref, out_$p345: ref, out_$i346: i8, out_$i347: i32, out_$i348: i32, out_$i349: i32, out_$p350: ref, out_$p352: ref, out_$i353: i8, out_$i354: i32, out_$i355: i32, out_$i356: i32, out_$p357: ref, out_$p359: ref, out_$i360: i8, out_$i361: i32, out_$i362: i32, out_$i363: i32, out_$p364: ref, out_$p366: ref, out_$i367: i8, out_$i368: i32, out_$i369: i32, out_$p370: ref, out_$p372: ref, out_$i373: i8, out_$i374: i32, out_$i375: i32, out_$i376: i1, out_$i377: i32, out_$i378: i16, out_$p379: ref, out_$i380: i32, out_$i381: i16, out_$p382: ref, out_$p177: ref, out_$i178: i32, out_$p61: ref, out_$i62: i32, out_$p139: ref, out_$i140: i32, out_$p383: ref, out_$i384: i32, out_$i385: i1, out_$i386: i32, out_$i387: i64, out_$p388: ref, out_$p391: ref, out_$i392: i8, out_$i393: i32, out_$i394: i32, out_$i395: i64, out_$p396: ref, out_$p389: ref, out_$p390: ref, out_$i397: i32, out_$i398: i1, out_$i399: i1, out_$i400: i32, out_$i401: i64, out_$p402: ref, out_$p405: ref, out_$i406: i8, out_$i407: i32, out_$i408: i32, out_$i409: i64, out_$p410: ref, out_$p403: ref, out_$p404: ref, out_$i411: i32, out_$i412: i1, out_$i413: i1, out_$i414: i32, out_$i415: i64, out_$p416: ref, out_$p419: ref, out_$i420: i8, out_$i421: i32, out_$i422: i32, out_$i423: i64, out_$p424: ref, out_$p417: ref, out_$p418: ref, out_$i425: i32, out_$i426: i1, out_$i427: i1, out_$i428: i32, out_$i429: i64, out_$p430: ref, out_$p433: ref, out_$i434: i8, out_$i435: i32, out_$i436: i32, out_$i437: i64, out_$p438: ref, out_$p431: ref, out_$p432: ref, out_$i439: i32, out_$i440: i1, out_$i441: i1, out_$i442: i32, out_$i443: i64, out_$p444: ref, out_$p447: ref, out_$i448: i8, out_$i449: i32, out_$i450: i32, out_$i451: i64, out_$p452: ref, out_$p445: ref, out_$p446: ref, out_$i453: i32, out_$i454: i1, out_$i455: i1, out_$i456: i32, out_$i457: i64, out_$p458: ref, out_$p461: ref, out_$i462: i8, out_$i463: i32, out_$i464: i32, out_$i465: i64, out_$p466: ref, out_$p459: ref, out_$p460: ref, out_$i467: i32, out_$i468: i1, out_$i469: i1, out_$i470: i32, out_$i471: i64, out_$p472: ref, out_$p475: ref, out_$i476: i8, out_$i477: i32, out_$i478: i32, out_$i479: i64, out_$p480: ref, out_$p473: ref, out_$p474: ref, out_$i481: i32, out_$i482: i1, out_$i483: i1, out_$i484: i32, out_$i485: i64, out_$p486: ref, out_$p489: ref, out_$i490: i8, out_$i491: i32, out_$i492: i32, out_$i493: i64, out_$p494: ref, out_$p487: ref, out_$p488: ref, out_$i495: i32, out_$i496: i1, out_$i497: i1, out_$i498: i32, out_$i499: i64, out_$p500: ref, out_$p503: ref, out_$i504: i8, out_$i505: i32, out_$i506: i32, out_$i507: i64, out_$p508: ref, out_$p501: ref, out_$p502: ref, out_$i509: i32, out_$i510: i1, out_$i511: i1, out_$i512: i32, out_$i513: i64, out_$p514: ref, out_$p517: ref, out_$i518: i8, out_$i519: i32, out_$i520: i32, out_$i521: i64, out_$p522: ref, out_$p515: ref, out_$p516: ref, out_$i523: i32, out_$i524: i1, out_$i525: i1, out_$i526: i32, out_$i527: i64, out_$p528: ref, out_$p531: ref, out_$i532: i8, out_$i533: i32, out_$i534: i32, out_$i535: i64, out_$p536: ref, out_$p529: ref, out_$p530: ref, out_$i537: i32, out_$i538: i1, out_$i539: i1, out_$i540: i32, out_$i541: i64, out_$p542: ref, out_$p545: ref, out_$i546: i8, out_$i547: i32, out_$i548: i32, out_$i549: i64, out_$p550: ref, out_$p543: ref, out_$p544: ref, out_$i551: i32, out_$i552: i1, out_$i553: i1, out_$i554: i32, out_$i555: i64, out_$p556: ref, out_$p559: ref, out_$i560: i8, out_$i561: i32, out_$i562: i32, out_$i563: i64, out_$p564: ref, out_$p557: ref, out_$p558: ref, out_$i565: i32, out_$i566: i1, out_$i567: i1, out_$i568: i32, out_$i569: i64, out_$p570: ref, out_$p573: ref, out_$i574: i8, out_$i575: i32, out_$i576: i32, out_$i577: i64, out_$p578: ref, out_$p571: ref, out_$p572: ref, out_$i579: i32, out_$i580: i1, out_$i581: i1, out_$i582: i32, out_$i583: i64, out_$p584: ref, out_$p587: ref, out_$i588: i8, out_$i589: i32, out_$i590: i32, out_$i591: i64, out_$p592: ref, out_$p585: ref, out_$p586: ref, out_$i593: i32, out_$i594: i1, out_$i595: i1, out_$i596: i32, out_$i597: i64, out_$p598: ref, out_$p601: ref, out_$i602: i8, out_$i603: i32, out_$i604: i32, out_$i605: i64, out_$p606: ref, out_$p599: ref, out_$p600: ref, out_$i607: i32, out_$i608: i1, out_$i609: i1, out_$i610: i32, out_$i611: i64, out_$p612: ref, out_$p615: ref, out_$i616: i8, out_$i617: i32, out_$i618: i32, out_$i619: i64, out_$p620: ref, out_$p613: ref, out_$p614: ref, out_$i621: i32, out_$i622: i1, out_$i623: i1, out_$i624: i32, out_$i625: i64, out_$p626: ref, out_$p629: ref, out_$i630: i8, out_$i631: i32, out_$i632: i32, out_$i633: i64, out_$p634: ref, out_$p627: ref, out_$p628: ref, out_$i635: i32, out_$i636: i1, out_$i637: i1, out_$i638: i32, out_$i639: i64, out_$p640: ref, out_$p643: ref, out_$i644: i8, out_$i645: i32, out_$i646: i32, out_$i647: i64, out_$p648: ref, out_$p641: ref, out_$p642: ref, out_$i649: i32, out_$i650: i1, out_$i651: i1, out_$i652: i32, out_$i653: i64, out_$p654: ref, out_$p657: ref, out_$i658: i8, out_$i659: i32, out_$i660: i32, out_$i661: i64, out_$p662: ref, out_$p655: ref, out_$p656: ref, out_$i663: i32, out_$i664: i1, out_$i665: i1, out_$i666: i32, out_$i667: i64, out_$p668: ref, out_$p671: ref, out_$i672: i8, out_$i673: i32, out_$i674: i32, out_$i675: i64, out_$p676: ref, out_$p669: ref, out_$p670: ref, out_$i677: i32, out_$i678: i1, out_$i679: i1, out_$i680: i32, out_$i681: i64, out_$p682: ref, out_$p685: ref, out_$i686: i8, out_$i687: i32, out_$i688: i32, out_$i689: i64, out_$p690: ref, out_$p683: ref, out_$p684: ref, out_$i691: i32, out_$i692: i1, out_$i693: i1, out_$i694: i32, out_$i695: i64, out_$p696: ref, out_$p699: ref, out_$i700: i8, out_$i701: i32, out_$i702: i32, out_$i703: i64, out_$p704: ref, out_$p697: ref, out_$p698: ref, out_$i705: i32, out_$i706: i1, out_$i707: i1, out_$i708: i32, out_$i709: i64, out_$p710: ref, out_$p713: ref, out_$i714: i8, out_$i715: i32, out_$i716: i32, out_$i717: i64, out_$p718: ref, out_$p711: ref, out_$p712: ref, out_$i719: i32, out_$i720: i1, out_$i721: i1, out_$i722: i32, out_$i723: i64, out_$p724: ref, out_$p727: ref, out_$i728: i8, out_$i729: i32, out_$i730: i32, out_$i731: i64, out_$p732: ref, out_$p725: ref, out_$p726: ref, out_$i733: i32, out_$i734: i1, out_$i735: i1, out_$i736: i32, out_$i737: i64, out_$p738: ref, out_$p741: ref, out_$i742: i8, out_$i743: i32, out_$i744: i32, out_$i745: i64, out_$p746: ref, out_$p739: ref, out_$p740: ref, out_$i747: i32, out_$i748: i1, out_$i749: i1, out_$i750: i32, out_$i751: i64, out_$p752: ref, out_$p755: ref, out_$i756: i8, out_$i757: i32, out_$i758: i32, out_$i759: i64, out_$p760: ref, out_$p753: ref, out_$p754: ref, out_$i761: i32, out_$i762: i1, out_$i763: i1, out_$i764: i32, out_$i765: i64, out_$p766: ref, out_$p769: ref, out_$i770: i8, out_$i771: i32, out_$i772: i32, out_$i773: i64, out_$p774: ref, out_$p767: ref, out_$p768: ref, out_$i775: i32, out_$i776: i1, out_$i777: i1, out_$i778: i32, out_$i779: i64, out_$p780: ref, out_$p783: ref, out_$i784: i8, out_$i785: i32, out_$i786: i32, out_$i787: i64, out_$p788: ref, out_$p781: ref, out_$p782: ref, out_$i789: i32, out_$i790: i1, out_$i791: i1, out_$i793: i8, out_$i794: i32, out_$i796: i1, out_$i797: i32, out_$i798: i64, out_$p799: ref, out_$p802: ref, out_$i803: i8, out_$i804: i32, out_$i805: i32, out_$i806: i64, out_$p807: ref, out_$p800: ref, out_$p801: ref, out_$i808: i32, out_$i809: i1, out_$i810: i1, out_$i811: i32, out_$i812: i64, out_$p813: ref, out_$p816: ref, out_$i817: i8, out_$i818: i32, out_$i819: i32, out_$i820: i64, out_$p821: ref, out_$p814: ref, out_$p815: ref, out_$i822: i32, out_$i823: i1, out_$i824: i1, out_$i825: i32, out_$i826: i64, out_$p827: ref, out_$p830: ref, out_$i831: i8, out_$i832: i32, out_$i833: i32, out_$i834: i64, out_$p835: ref, out_$p828: ref, out_$p829: ref, out_$i836: i32, out_$i837: i1, out_$i838: i1, out_$i839: i32, out_$i840: i64, out_$p841: ref, out_$p844: ref, out_$i845: i8, out_$i846: i32, out_$i847: i32, out_$i848: i64, out_$p849: ref, out_$p842: ref, out_$p843: ref, out_$i850: i32, out_$i851: i1, out_$i852: i1, out_$i853: i32, out_$i854: i64, out_$p855: ref, out_$p858: ref, out_$i859: i8, out_$i860: i32, out_$i861: i32, out_$i862: i64, out_$p863: ref, out_$p856: ref, out_$p857: ref, out_$i864: i32, out_$i865: i1, out_$i866: i1, out_$i867: i32, out_$i868: i64, out_$p869: ref, out_$p872: ref, out_$i873: i8, out_$i874: i32, out_$i875: i32, out_$i876: i64, out_$p877: ref, out_$p870: ref, out_$p871: ref, out_$i878: i32, out_$i879: i1, out_$i880: i1, out_$i881: i32, out_$i882: i64, out_$p883: ref, out_$p886: ref, out_$i887: i8, out_$i888: i32, out_$i889: i32, out_$i890: i64, out_$p891: ref, out_$p884: ref, out_$p885: ref, out_$i892: i32, out_$i893: i1, out_$i894: i1, out_$i895: i32, out_$i896: i64, out_$p897: ref, out_$p900: ref, out_$i901: i8, out_$i902: i32, out_$i903: i32, out_$i904: i64, out_$p905: ref, out_$p898: ref, out_$p899: ref, out_$i906: i32, out_$i907: i1, out_$i908: i1, out_$i909: i32, out_$i910: i64, out_$p911: ref, out_$p914: ref, out_$i915: i8, out_$i916: i32, out_$i917: i32, out_$i918: i64, out_$p919: ref, out_$p912: ref, out_$p913: ref, out_$i920: i32, out_$i921: i1, out_$i922: i1, out_$i923: i32, out_$i924: i64, out_$p925: ref, out_$p928: ref, out_$i929: i8, out_$i930: i32, out_$i931: i32, out_$i932: i64, out_$p933: ref, out_$p926: ref, out_$p927: ref, out_$i934: i32, out_$i935: i1, out_$i936: i1, out_$i937: i32, out_$i938: i64, out_$p939: ref, out_$p942: ref, out_$i943: i8, out_$i944: i32, out_$i945: i32, out_$i946: i64, out_$p947: ref, out_$p940: ref, out_$p941: ref, out_$i948: i32, out_$i949: i1, out_$i950: i1, out_$i951: i32, out_$i952: i64, out_$p953: ref, out_$p956: ref, out_$i957: i8, out_$i958: i32, out_$i959: i32, out_$i960: i64, out_$p961: ref, out_$p954: ref, out_$p955: ref, out_$i962: i32, out_$i963: i1, out_$i964: i1, out_$i965: i32, out_$i966: i64, out_$p967: ref, out_$p970: ref, out_$i971: i8, out_$i972: i32, out_$i973: i32, out_$i974: i64, out_$p975: ref, out_$p968: ref, out_$p969: ref, out_$i976: i32, out_$i977: i1, out_$i978: i1, out_$i979: i32, out_$i980: i64, out_$p981: ref, out_$p984: ref, out_$i985: i8, out_$i986: i32, out_$i987: i32, out_$i988: i64, out_$p989: ref, out_$p982: ref, out_$p983: ref, out_$i990: i32, out_$i991: i1, out_$i992: i1, out_$i993: i32, out_$i994: i64, out_$p995: ref, out_$p998: ref, out_$i999: i8, out_$i1000: i32, out_$i1001: i32, out_$i1002: i64, out_$p1003: ref, out_$p996: ref, out_$p997: ref, out_$i1004: i32, out_$i1005: i1, out_$i1006: i1, out_$i1007: i32, out_$i1008: i64, out_$p1009: ref, out_$p1012: ref, out_$i1013: i8, out_$i1014: i32, out_$i1015: i32, out_$i1016: i64, out_$p1017: ref, out_$p1010: ref, out_$p1011: ref, out_$i1018: i32, out_$i1019: i1, out_$i1020: i1, out_$i1021: i32, out_$i1022: i64, out_$p1023: ref, out_$p1026: ref, out_$i1027: i8, out_$i1028: i32, out_$i1029: i32, out_$i1030: i64, out_$p1031: ref, out_$p1024: ref, out_$p1025: ref, out_$i1032: i32, out_$i1033: i1, out_$i1034: i1, out_$i1035: i32, out_$i1036: i64, out_$p1037: ref, out_$p1040: ref, out_$i1041: i8, out_$i1042: i32, out_$i1043: i32, out_$i1044: i64, out_$p1045: ref, out_$p1038: ref, out_$p1039: ref, out_$i1046: i32, out_$i1047: i1, out_$i1048: i1, out_$i1049: i32, out_$i1050: i64, out_$p1051: ref, out_$p1054: ref, out_$i1055: i8, out_$i1056: i32, out_$i1057: i32, out_$i1058: i64, out_$p1059: ref, out_$p1052: ref, out_$p1053: ref, out_$i1060: i32, out_$i1061: i1, out_$i1062: i1, out_$i1063: i32, out_$i1064: i64, out_$p1065: ref, out_$p1068: ref, out_$i1069: i8, out_$i1070: i32, out_$i1071: i32, out_$i1072: i64, out_$p1073: ref, out_$p1066: ref, out_$p1067: ref, out_$i1074: i32, out_$i1075: i1, out_$i1076: i1, out_$i1077: i32, out_$i1078: i64, out_$p1079: ref, out_$p1082: ref, out_$i1083: i8, out_$i1084: i32, out_$i1085: i32, out_$i1086: i64, out_$p1087: ref, out_$p1080: ref, out_$p1081: ref, out_$i1088: i32, out_$i1089: i1, out_$i1090: i1, out_$i1091: i32, out_$i1092: i64, out_$p1093: ref, out_$p1096: ref, out_$i1097: i8, out_$i1098: i32, out_$i1099: i32, out_$i1100: i64, out_$p1101: ref, out_$p1094: ref, out_$p1095: ref, out_$i1102: i32, out_$i1103: i1, out_$i1104: i1, out_$i1105: i32, out_$i1106: i64, out_$p1107: ref, out_$p1110: ref, out_$i1111: i8, out_$i1112: i32, out_$i1113: i32, out_$i1114: i64, out_$p1115: ref, out_$p1108: ref, out_$p1109: ref, out_$i1116: i32, out_$i1117: i1, out_$i1118: i1, out_$i1119: i32, out_$i1120: i64, out_$p1121: ref, out_$p1124: ref, out_$i1125: i8, out_$i1126: i32, out_$i1127: i32, out_$i1128: i64, out_$p1129: ref, out_$p1122: ref, out_$p1123: ref, out_$i1130: i32, out_$i1131: i1, out_$i1132: i1, out_$i1133: i32, out_$i1134: i64, out_$p1135: ref, out_$p1138: ref, out_$i1139: i8, out_$i1140: i32, out_$i1141: i32, out_$i1142: i64, out_$p1143: ref, out_$p1136: ref, out_$p1137: ref, out_$i1144: i32, out_$i1145: i1, out_$i1146: i1, out_$i1147: i32, out_$i1148: i64, out_$p1149: ref, out_$p1152: ref, out_$i1153: i8, out_$i1154: i32, out_$i1155: i32, out_$i1156: i64, out_$p1157: ref, out_$p1150: ref, out_$p1151: ref, out_$i1158: i32, out_$i1159: i1, out_$i1160: i1, out_$i1161: i32, out_$i1162: i64, out_$p1163: ref, out_$p1166: ref, out_$i1167: i8, out_$i1168: i32, out_$i1169: i32, out_$i1170: i64, out_$p1171: ref, out_$p1164: ref, out_$p1165: ref, out_$i1172: i32, out_$i1173: i1, out_$i1174: i1, out_$i1175: i32, out_$i1176: i64, out_$p1177: ref, out_$p1180: ref, out_$i1181: i8, out_$i1182: i32, out_$i1183: i32, out_$i1184: i64, out_$p1185: ref, out_$p1178: ref, out_$p1179: ref, out_$i1186: i32, out_$i1187: i1, out_$i1188: i1, out_$i1189: i32, out_$i1190: i64, out_$p1191: ref, out_$p1194: ref, out_$i1195: i8, out_$i1196: i32, out_$i1197: i32, out_$i1198: i64, out_$p1199: ref, out_$p1192: ref, out_$p1193: ref, out_$i1200: i32, out_$i1201: i1, out_$i1202: i1, out_$i1204: i8, out_$i1205: i32, out_vslice_dummy_var_26: i32, out_vslice_dummy_var_27: i32, out_vslice_dummy_var_28: i32, out_vslice_dummy_var_29: i32);
  modifies $M.0, $M.24, $M.4, assertsPassed, $M.23, $M.16;



implementation ftdi_elan_total_command_size_loop_$bb4(in_$p0: ref, in_$i10: i32, in_$p11: ref, in_$p12: ref, in_$i13: i64, in_$i14: i64, in_$p16: ref, in_$i17: i32, in_$i18: i32, in_$i19: i32, in_$i20: i32, in_$i21: i1, in_$i7: i32, in_$i8: i32, in_$i9: i32, in_$i22: i32) returns (out_$i10: i32, out_$p11: ref, out_$p12: ref, out_$i13: i64, out_$i14: i64, out_$p16: ref, out_$i17: i32, out_$i18: i32, out_$i19: i32, out_$i20: i32, out_$i21: i1, out_$i7: i32, out_$i8: i32, out_$i9: i32, out_$i22: i32)
{

  entry:
    out_$i10, out_$p11, out_$p12, out_$i13, out_$i14, out_$p16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i7, out_$i8, out_$i9, out_$i22 := in_$i10, in_$p11, in_$p12, in_$i13, in_$i14, in_$p16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i7, in_$i8, in_$i9, in_$i22;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8106;

  $bb6:
    assume out_$i21 == 1;
    assume {:verifier.code 0} true;
    out_$i7, out_$i8, out_$i9 := out_$i20, out_$i10, out_$i19;
    goto $bb6_dummy;

  corral_source_split_8119:
    assume {:verifier.code 0} true;
    out_$i22 := out_$i19;
    assume true;
    goto $bb6;

  corral_source_split_8118:
    assume {:verifier.code 0} true;
    out_$i21 := $sgt.i32(out_$i7, 0);
    goto corral_source_split_8119;

  corral_source_split_8117:
    assume {:verifier.code 0} true;
    out_$i20 := $sub.i32(out_$i7, 1);
    call {:si_unique_call 1315} {:cexpr "I"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_8118;

  corral_source_split_8116:
    assume {:verifier.code 0} true;
    out_$i19 := $add.i32(out_$i18, out_$i9);
    call {:si_unique_call 1314} {:cexpr "total_size"} boogie_si_record_i32(out_$i19);
    goto corral_source_split_8117;

  corral_source_split_8115:
    assume {:verifier.code 0} true;
    out_$i18 := $add.i32(out_$i17, 5);
    goto corral_source_split_8116;

  corral_source_split_8114:
    assume {:verifier.code 0} true;
    out_$i17 := $load.i32($M.0, out_$p16);
    goto corral_source_split_8115;

  corral_source_split_8113:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(out_$p12, $mul.ref(out_$i14, 24)), $mul.ref(12, 1));
    goto corral_source_split_8114;

  corral_source_split_8112:
    assume {:verifier.code 0} true;
    goto corral_source_split_8113;

  corral_source_split_8111:
    assume {:verifier.code 0} true;
    out_$i14 := $and.i64(out_$i13, 31);
    goto corral_source_split_8112;

  corral_source_split_8110:
    assume {:verifier.code 0} true;
    out_$i13 := $sext.i32.i64(out_$i8);
    goto corral_source_split_8111;

  corral_source_split_8109:
    assume {:verifier.code 0} true;
    out_$p12 := $bitcast.ref.ref(out_$p11);
    goto corral_source_split_8110;

  corral_source_split_8108:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(184, 1));
    goto corral_source_split_8109;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i10 := $add.i32(out_$i8, 1);
    call {:si_unique_call 1313} {:cexpr "i"} boogie_si_record_i32(out_$i10);
    goto corral_source_split_8108;

  corral_source_split_8106:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i10, out_$p11, out_$p12, out_$i13, out_$i14, out_$p16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i7, out_$i8, out_$i9, out_$i22 := ftdi_elan_total_command_size_loop_$bb4(in_$p0, out_$i10, out_$p11, out_$p12, out_$i13, out_$i14, out_$p16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i7, out_$i8, out_$i9, out_$i22);
    return;

  exit:
    return;
}



procedure ftdi_elan_total_command_size_loop_$bb4(in_$p0: ref, in_$i10: i32, in_$p11: ref, in_$p12: ref, in_$i13: i64, in_$i14: i64, in_$p16: ref, in_$i17: i32, in_$i18: i32, in_$i19: i32, in_$i20: i32, in_$i21: i1, in_$i7: i32, in_$i8: i32, in_$i9: i32, in_$i22: i32) returns (out_$i10: i32, out_$p11: ref, out_$p12: ref, out_$i13: i64, out_$i14: i64, out_$p16: ref, out_$i17: i32, out_$i18: i32, out_$i19: i32, out_$i20: i32, out_$i21: i1, out_$i7: i32, out_$i8: i32, out_$i9: i32, out_$i22: i32);



implementation fill_buffer_with_all_queued_commands_loop_$bb12(in_$p1: ref, in_$i70: i32, in_$p71: ref, in_$i72: i8, in_$i73: i64, in_$p74: ref, in_$i75: i32, in_$i76: i1, in_$i67: i32, in_$p68: ref, in_$i69: i32, in_$i77: i32) returns (out_$i70: i32, out_$p71: ref, out_$i72: i8, out_$i73: i64, out_$p74: ref, out_$i75: i32, out_$i76: i1, out_$i67: i32, out_$p68: ref, out_$i69: i32, out_$i77: i32)
{

  entry:
    out_$i70, out_$p71, out_$i72, out_$i73, out_$p74, out_$i75, out_$i76, out_$i67, out_$p68, out_$i69, out_$i77 := in_$i70, in_$p71, in_$i72, in_$i73, in_$p74, in_$i75, in_$i76, in_$i67, in_$p68, in_$i69, in_$i77;
    goto $bb12, exit;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8197;

  $bb14:
    assume out_$i76 == 1;
    assume {:verifier.code 0} true;
    out_$i67, out_$p68, out_$i69 := out_$i75, out_$p71, out_$i70;
    goto $bb14_dummy;

  corral_source_split_8206:
    assume {:verifier.code 0} true;
    out_$i77 := out_$i70;
    assume true;
    goto $bb14;

  corral_source_split_8205:
    assume {:verifier.code 0} true;
    out_$i76 := $sgt.i32(out_$i67, 0);
    goto corral_source_split_8206;

  corral_source_split_8204:
    assume {:verifier.code 0} true;
    out_$i75 := $sub.i32(out_$i67, 1);
    call {:si_unique_call 1332} {:cexpr "F"} boogie_si_record_i32(out_$i75);
    goto corral_source_split_8205;

  corral_source_split_8203:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p74, out_$i72);
    goto corral_source_split_8204;

  corral_source_split_8202:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref(in_$p1, $mul.ref(out_$i73, 1));
    goto corral_source_split_8203;

  corral_source_split_8201:
    assume {:verifier.code 0} true;
    out_$i73 := $sext.i32.i64(out_$i69);
    goto corral_source_split_8202;

  corral_source_split_8200:
    assume {:verifier.code 0} true;
    out_$i72 := $load.i8($M.0, out_$p68);
    goto corral_source_split_8201;

  corral_source_split_8199:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref(out_$p68, $mul.ref(1, 1));
    goto corral_source_split_8200;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i70 := $add.i32(out_$i69, 1);
    call {:si_unique_call 1331} {:cexpr "b"} boogie_si_record_i32(out_$i70);
    goto corral_source_split_8199;

  corral_source_split_8197:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb14_dummy:
    call {:si_unique_call 1} out_$i70, out_$p71, out_$i72, out_$i73, out_$p74, out_$i75, out_$i76, out_$i67, out_$p68, out_$i69, out_$i77 := fill_buffer_with_all_queued_commands_loop_$bb12(in_$p1, out_$i70, out_$p71, out_$i72, out_$i73, out_$p74, out_$i75, out_$i76, out_$i67, out_$p68, out_$i69, out_$i77);
    return;

  exit:
    return;
}



procedure fill_buffer_with_all_queued_commands_loop_$bb12(in_$p1: ref, in_$i70: i32, in_$p71: ref, in_$i72: i8, in_$i73: i64, in_$p74: ref, in_$i75: i32, in_$i76: i1, in_$i67: i32, in_$p68: ref, in_$i69: i32, in_$i77: i32) returns (out_$i70: i32, out_$p71: ref, out_$i72: i8, out_$i73: i64, out_$p74: ref, out_$i75: i32, out_$i76: i1, out_$i67: i32, out_$p68: ref, out_$i69: i32, out_$i77: i32);
  modifies $M.0;



implementation fill_buffer_with_all_queued_commands_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i13: i32, in_$p14: ref, in_$p15: ref, in_$i16: i64, in_$i17: i64, in_$p19: ref, in_$i20: i32, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$i24: i8, in_$i25: i32, in_$i26: i1, in_$p27: ref, in_$i28: i8, in_$i29: i32, in_$i30: i32, in_$i31: i32, in_$i32: i32, in_$i33: i32, in_$i34: i32, in_$i35: i32, in_$p36: ref, in_$i37: i8, in_$i38: i64, in_$p39: ref, in_$i40: i32, in_$p41: ref, in_$i42: i16, in_$i43: i8, in_$i44: i64, in_$p45: ref, in_$i46: i32, in_$p47: ref, in_$i48: i16, in_$i49: i32, in_$i50: i32, in_$i51: i8, in_$i52: i64, in_$p53: ref, in_$i54: i32, in_$p55: ref, in_$i56: i8, in_$i57: i64, in_$p58: ref, in_$i59: i32, in_$p60: ref, in_$i61: i8, in_$i62: i64, in_$p63: ref, in_$i64: i32, in_$i65: i1, in_$i70: i32, in_$p71: ref, in_$i72: i8, in_$i73: i64, in_$p74: ref, in_$i75: i32, in_$i76: i1, in_$i67: i32, in_$p68: ref, in_$i69: i32, in_$i77: i32, in_$i66: i32, in_$i78: i32, in_$i79: i1, in_$i9: i32, in_$i10: i32, in_$i11: i32, in_$i12: i32, in_$i80: i32) returns (out_$i13: i32, out_$p14: ref, out_$p15: ref, out_$i16: i64, out_$i17: i64, out_$p19: ref, out_$i20: i32, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$i24: i8, out_$i25: i32, out_$i26: i1, out_$p27: ref, out_$i28: i8, out_$i29: i32, out_$i30: i32, out_$i31: i32, out_$i32: i32, out_$i33: i32, out_$i34: i32, out_$i35: i32, out_$p36: ref, out_$i37: i8, out_$i38: i64, out_$p39: ref, out_$i40: i32, out_$p41: ref, out_$i42: i16, out_$i43: i8, out_$i44: i64, out_$p45: ref, out_$i46: i32, out_$p47: ref, out_$i48: i16, out_$i49: i32, out_$i50: i32, out_$i51: i8, out_$i52: i64, out_$p53: ref, out_$i54: i32, out_$p55: ref, out_$i56: i8, out_$i57: i64, out_$p58: ref, out_$i59: i32, out_$p60: ref, out_$i61: i8, out_$i62: i64, out_$p63: ref, out_$i64: i32, out_$i65: i1, out_$i70: i32, out_$p71: ref, out_$i72: i8, out_$i73: i64, out_$p74: ref, out_$i75: i32, out_$i76: i1, out_$i67: i32, out_$p68: ref, out_$i69: i32, out_$i77: i32, out_$i66: i32, out_$i78: i32, out_$i79: i1, out_$i9: i32, out_$i10: i32, out_$i11: i32, out_$i12: i32, out_$i80: i32)
{

  entry:
    out_$i13, out_$p14, out_$p15, out_$i16, out_$i17, out_$p19, out_$i20, out_$p21, out_$p22, out_$p23, out_$i24, out_$i25, out_$i26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$p39, out_$i40, out_$p41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i46, out_$p47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$p53, out_$i54, out_$p55, out_$i56, out_$i57, out_$p58, out_$i59, out_$p60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$i70, out_$p71, out_$i72, out_$i73, out_$p74, out_$i75, out_$i76, out_$i67, out_$p68, out_$i69, out_$i77, out_$i66, out_$i78, out_$i79, out_$i9, out_$i10, out_$i11, out_$i12, out_$i80 := in_$i13, in_$p14, in_$p15, in_$i16, in_$i17, in_$p19, in_$i20, in_$p21, in_$p22, in_$p23, in_$i24, in_$i25, in_$i26, in_$p27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$p36, in_$i37, in_$i38, in_$p39, in_$i40, in_$p41, in_$i42, in_$i43, in_$i44, in_$p45, in_$i46, in_$p47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$p53, in_$i54, in_$p55, in_$i56, in_$i57, in_$p58, in_$i59, in_$p60, in_$i61, in_$i62, in_$p63, in_$i64, in_$i65, in_$i70, in_$p71, in_$i72, in_$i73, in_$p74, in_$i75, in_$i76, in_$i67, in_$p68, in_$i69, in_$i77, in_$i66, in_$i78, in_$i79, in_$i9, in_$i10, in_$i11, in_$i12, in_$i80;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8131;

  $bb17:
    assume out_$i79 == 1;
    assume {:verifier.code 0} true;
    out_$i9, out_$i10, out_$i11, out_$i12 := out_$i78, out_$i13, out_$i34, out_$i66;
    goto $bb17_dummy;

  corral_source_split_8211:
    assume {:verifier.code 0} true;
    out_$i80 := out_$i34;
    assume true;
    goto $bb17;

  corral_source_split_8210:
    assume {:verifier.code 0} true;
    out_$i79 := $sgt.i32(out_$i9, 0);
    goto corral_source_split_8211;

  $bb16:
    assume {:verifier.code 0} true;
    out_$i78 := $sub.i32(out_$i9, 1);
    call {:si_unique_call 1333} {:cexpr "I"} boogie_si_record_i32(out_$i78);
    goto corral_source_split_8210;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i65 == 1);
    goto $bb11;

  corral_source_split_8208:
    assume {:verifier.code 0} true;
    out_$i66 := out_$i77;
    goto $bb11;

  $bb15:
    assume !(out_$i76 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_8208;

  corral_source_split_8206:
    assume {:verifier.code 0} true;
    out_$i77 := out_$i70;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_8205:
    assume {:verifier.code 0} true;
    out_$i76 := $sgt.i32(out_$i67, 0);
    goto corral_source_split_8206;

  corral_source_split_8204:
    assume {:verifier.code 0} true;
    out_$i75 := $sub.i32(out_$i67, 1);
    call {:si_unique_call 1332} {:cexpr "F"} boogie_si_record_i32(out_$i75);
    goto corral_source_split_8205;

  corral_source_split_8203:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p74, out_$i72);
    goto corral_source_split_8204;

  corral_source_split_8202:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref(in_$p1, $mul.ref(out_$i73, 1));
    goto corral_source_split_8203;

  corral_source_split_8201:
    assume {:verifier.code 0} true;
    out_$i73 := $sext.i32.i64(out_$i69);
    goto corral_source_split_8202;

  corral_source_split_8200:
    assume {:verifier.code 0} true;
    out_$i72 := $load.i8($M.0, out_$p68);
    goto corral_source_split_8201;

  corral_source_split_8199:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref(out_$p68, $mul.ref(1, 1));
    goto corral_source_split_8200;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i70 := $add.i32(out_$i69, 1);
    call {:si_unique_call 1331} {:cexpr "b"} boogie_si_record_i32(out_$i70);
    goto corral_source_split_8199;

  corral_source_split_8197:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb12:
    call out_$i70, out_$p71, out_$i72, out_$i73, out_$p74, out_$i75, out_$i76, out_$i67, out_$p68, out_$i69, out_$i77 := fill_buffer_with_all_queued_commands_loop_$bb12(in_$p1, out_$i70, out_$p71, out_$i72, out_$i73, out_$p74, out_$i75, out_$i76, out_$i67, out_$p68, out_$i69, out_$i77);
    goto $bb12_last;

  $bb12_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8197;

  corral_source_split_8195:
    assume {:verifier.code 0} true;
    out_$i67, out_$p68, out_$i69 := out_$i64, out_$p22, out_$i59;
    goto $bb12;

  $bb14:
    assume out_$i76 == 1;
    assume {:verifier.code 0} true;
    out_$i67, out_$p68, out_$i69 := out_$i75, out_$p71, out_$i70;
    assume false;
    return;

  $bb9:
    assume out_$i65 == 1;
    goto corral_source_split_8195;

  corral_source_split_8193:
    assume {:verifier.code 0} true;
    out_$i66 := out_$i59;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_8192:
    assume {:verifier.code 0} true;
    out_$i65 := $sgt.i32(out_$i20, 0);
    goto corral_source_split_8193;

  corral_source_split_8191:
    assume {:verifier.code 0} true;
    out_$i64 := $sub.i32(out_$i20, 1);
    call {:si_unique_call 1330} {:cexpr "F"} boogie_si_record_i32(out_$i64);
    goto corral_source_split_8192;

  corral_source_split_8190:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p63, out_$i61);
    goto corral_source_split_8191;

  corral_source_split_8189:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref(in_$p1, $mul.ref(out_$i62, 1));
    goto corral_source_split_8190;

  corral_source_split_8188:
    assume {:verifier.code 0} true;
    out_$i62 := $sext.i32.i64(out_$i54);
    goto corral_source_split_8189;

  corral_source_split_8187:
    assume {:verifier.code 0} true;
    out_$i61 := $load.i8($M.0, out_$p60);
    goto corral_source_split_8188;

  corral_source_split_8186:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(out_$p15, $mul.ref(out_$i17, 24)), $mul.ref(5, 1));
    goto corral_source_split_8187;

  corral_source_split_8185:
    assume {:verifier.code 0} true;
    out_$i59 := $add.i32(out_$i54, 1);
    call {:si_unique_call 1329} {:cexpr "b"} boogie_si_record_i32(out_$i59);
    goto corral_source_split_8186;

  corral_source_split_8184:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p58, out_$i56);
    goto corral_source_split_8185;

  corral_source_split_8183:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref(in_$p1, $mul.ref(out_$i57, 1));
    goto corral_source_split_8184;

  corral_source_split_8182:
    assume {:verifier.code 0} true;
    out_$i57 := $sext.i32.i64(out_$i46);
    goto corral_source_split_8183;

  corral_source_split_8181:
    assume {:verifier.code 0} true;
    out_$i56 := $load.i8($M.0, out_$p55);
    goto corral_source_split_8182;

  corral_source_split_8180:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(out_$p15, $mul.ref(out_$i17, 24)), $mul.ref(4, 1));
    goto corral_source_split_8181;

  corral_source_split_8179:
    assume {:verifier.code 0} true;
    out_$i54 := $add.i32(out_$i46, 1);
    call {:si_unique_call 1328} {:cexpr "b"} boogie_si_record_i32(out_$i54);
    goto corral_source_split_8180;

  corral_source_split_8178:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p53, out_$i51);
    goto corral_source_split_8179;

  corral_source_split_8177:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref(in_$p1, $mul.ref(out_$i52, 1));
    goto corral_source_split_8178;

  corral_source_split_8176:
    assume {:verifier.code 0} true;
    out_$i52 := $sext.i32.i64(out_$i40);
    goto corral_source_split_8177;

  corral_source_split_8175:
    assume {:verifier.code 0} true;
    out_$i51 := $trunc.i32.i8(out_$i50);
    goto corral_source_split_8176;

  corral_source_split_8174:
    assume {:verifier.code 0} true;
    out_$i50 := $ashr.i32(out_$i49, 8);
    goto corral_source_split_8175;

  corral_source_split_8173:
    assume {:verifier.code 0} true;
    out_$i49 := $zext.i16.i32(out_$i48);
    goto corral_source_split_8174;

  corral_source_split_8172:
    assume {:verifier.code 0} true;
    out_$i48 := $load.i16($M.0, out_$p47);
    goto corral_source_split_8173;

  corral_source_split_8171:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(out_$p15, $mul.ref(out_$i17, 24)), $mul.ref(2, 1));
    goto corral_source_split_8172;

  corral_source_split_8170:
    assume {:verifier.code 0} true;
    out_$i46 := $add.i32(out_$i40, 1);
    call {:si_unique_call 1327} {:cexpr "b"} boogie_si_record_i32(out_$i46);
    goto corral_source_split_8171;

  corral_source_split_8169:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p45, out_$i43);
    goto corral_source_split_8170;

  corral_source_split_8168:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref(in_$p1, $mul.ref(out_$i44, 1));
    goto corral_source_split_8169;

  corral_source_split_8167:
    assume {:verifier.code 0} true;
    out_$i44 := $sext.i32.i64(out_$i35);
    goto corral_source_split_8168;

  corral_source_split_8166:
    assume {:verifier.code 0} true;
    out_$i43 := $trunc.i16.i8(out_$i42);
    goto corral_source_split_8167;

  corral_source_split_8165:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i16($M.0, out_$p41);
    goto corral_source_split_8166;

  corral_source_split_8164:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(out_$p15, $mul.ref(out_$i17, 24)), $mul.ref(2, 1));
    goto corral_source_split_8165;

  corral_source_split_8163:
    assume {:verifier.code 0} true;
    out_$i40 := $add.i32(out_$i35, 1);
    call {:si_unique_call 1326} {:cexpr "b"} boogie_si_record_i32(out_$i40);
    goto corral_source_split_8164;

  corral_source_split_8162:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p39, out_$i37);
    goto corral_source_split_8163;

  corral_source_split_8161:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref(in_$p1, $mul.ref(out_$i38, 1));
    goto corral_source_split_8162;

  corral_source_split_8160:
    assume {:verifier.code 0} true;
    out_$i38 := $sext.i32.i64(out_$i12);
    goto corral_source_split_8161;

  corral_source_split_8159:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i8($M.0, out_$p36);
    goto corral_source_split_8160;

  corral_source_split_8158:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(out_$p15, $mul.ref(out_$i17, 24)), $mul.ref(0, 1));
    goto corral_source_split_8159;

  corral_source_split_8157:
    assume {:verifier.code 0} true;
    out_$i35 := $add.i32(out_$i12, 1);
    call {:si_unique_call 1325} {:cexpr "b"} boogie_si_record_i32(out_$i35);
    goto corral_source_split_8158;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_8157;

  $bb7:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    out_$i34 := out_$i11;
    goto $bb8;

  corral_source_split_8155:
    assume {:verifier.code 0} true;
    out_$i34 := out_$i33;
    goto $bb8;

  corral_source_split_8154:
    assume {:verifier.code 0} true;
    out_$i33 := $or.i32(out_$i32, out_$i11);
    call {:si_unique_call 1324} {:cexpr "ed_commands"} boogie_si_record_i32(out_$i33);
    goto corral_source_split_8155;

  corral_source_split_8153:
    assume {:verifier.code 0} true;
    out_$i32 := $shl.i32(1, out_$i31);
    goto corral_source_split_8154;

  corral_source_split_8152:
    assume {:verifier.code 0} true;
    out_$i31 := $and.i32(out_$i30, 3);
    goto corral_source_split_8153;

  corral_source_split_8151:
    assume {:verifier.code 0} true;
    out_$i30 := $ashr.i32(out_$i29, 5);
    goto corral_source_split_8152;

  corral_source_split_8150:
    assume {:verifier.code 0} true;
    out_$i29 := $zext.i8.i32(out_$i28);
    goto corral_source_split_8151;

  corral_source_split_8149:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i8($M.0, out_$p27);
    goto corral_source_split_8150;

  corral_source_split_8148:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p15, $mul.ref(out_$i17, 24)), $mul.ref(0, 1));
    goto corral_source_split_8149;

  $bb6:
    assume out_$i26 == 1;
    goto corral_source_split_8148;

  corral_source_split_8146:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_8145:
    assume {:verifier.code 0} true;
    out_$i26 := $slt.i32(out_$i25, 0);
    goto corral_source_split_8146;

  corral_source_split_8144:
    assume {:verifier.code 0} true;
    out_$i25 := $sext.i8.i32(out_$i24);
    goto corral_source_split_8145;

  corral_source_split_8143:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i8($M.0, out_$p23);
    goto corral_source_split_8144;

  corral_source_split_8142:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p15, $mul.ref(out_$i17, 24)), $mul.ref(0, 1));
    goto corral_source_split_8143;

  corral_source_split_8141:
    assume {:verifier.code 0} true;
    out_$p22 := $load.ref($M.0, out_$p21);
    goto corral_source_split_8142;

  corral_source_split_8140:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p15, $mul.ref(out_$i17, 24)), $mul.ref(16, 1));
    goto corral_source_split_8141;

  corral_source_split_8139:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i32($M.0, out_$p19);
    call {:si_unique_call 1323} {:cexpr "F"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_8140;

  corral_source_split_8138:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(out_$p15, $mul.ref(out_$i17, 24)), $mul.ref(12, 1));
    goto corral_source_split_8139;

  corral_source_split_8137:
    assume {:verifier.code 0} true;
    goto corral_source_split_8138;

  corral_source_split_8136:
    assume {:verifier.code 0} true;
    out_$i17 := $and.i64(out_$i16, 31);
    goto corral_source_split_8137;

  corral_source_split_8135:
    assume {:verifier.code 0} true;
    out_$i16 := $sext.i32.i64(out_$i10);
    goto corral_source_split_8136;

  corral_source_split_8134:
    assume {:verifier.code 0} true;
    out_$p15 := $bitcast.ref.ref(out_$p14);
    goto corral_source_split_8135;

  corral_source_split_8133:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8488)), $mul.ref(184, 1));
    goto corral_source_split_8134;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i13 := $add.i32(out_$i10, 1);
    call {:si_unique_call 1322} {:cexpr "i"} boogie_si_record_i32(out_$i13);
    goto corral_source_split_8133;

  corral_source_split_8131:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb17_dummy:
    call {:si_unique_call 1} out_$i13, out_$p14, out_$p15, out_$i16, out_$i17, out_$p19, out_$i20, out_$p21, out_$p22, out_$p23, out_$i24, out_$i25, out_$i26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$p39, out_$i40, out_$p41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i46, out_$p47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$p53, out_$i54, out_$p55, out_$i56, out_$i57, out_$p58, out_$i59, out_$p60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$i70, out_$p71, out_$i72, out_$i73, out_$p74, out_$i75, out_$i76, out_$i67, out_$p68, out_$i69, out_$i77, out_$i66, out_$i78, out_$i79, out_$i9, out_$i10, out_$i11, out_$i12, out_$i80 := fill_buffer_with_all_queued_commands_loop_$bb4(in_$p0, in_$p1, out_$i13, out_$p14, out_$p15, out_$i16, out_$i17, out_$p19, out_$i20, out_$p21, out_$p22, out_$p23, out_$i24, out_$i25, out_$i26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$p39, out_$i40, out_$p41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i46, out_$p47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$p53, out_$i54, out_$p55, out_$i56, out_$i57, out_$p58, out_$i59, out_$p60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$i70, out_$p71, out_$i72, out_$i73, out_$p74, out_$i75, out_$i76, out_$i67, out_$p68, out_$i69, out_$i77, out_$i66, out_$i78, out_$i79, out_$i9, out_$i10, out_$i11, out_$i12, out_$i80);
    return;

  exit:
    return;
}



procedure fill_buffer_with_all_queued_commands_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i13: i32, in_$p14: ref, in_$p15: ref, in_$i16: i64, in_$i17: i64, in_$p19: ref, in_$i20: i32, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$i24: i8, in_$i25: i32, in_$i26: i1, in_$p27: ref, in_$i28: i8, in_$i29: i32, in_$i30: i32, in_$i31: i32, in_$i32: i32, in_$i33: i32, in_$i34: i32, in_$i35: i32, in_$p36: ref, in_$i37: i8, in_$i38: i64, in_$p39: ref, in_$i40: i32, in_$p41: ref, in_$i42: i16, in_$i43: i8, in_$i44: i64, in_$p45: ref, in_$i46: i32, in_$p47: ref, in_$i48: i16, in_$i49: i32, in_$i50: i32, in_$i51: i8, in_$i52: i64, in_$p53: ref, in_$i54: i32, in_$p55: ref, in_$i56: i8, in_$i57: i64, in_$p58: ref, in_$i59: i32, in_$p60: ref, in_$i61: i8, in_$i62: i64, in_$p63: ref, in_$i64: i32, in_$i65: i1, in_$i70: i32, in_$p71: ref, in_$i72: i8, in_$i73: i64, in_$p74: ref, in_$i75: i32, in_$i76: i1, in_$i67: i32, in_$p68: ref, in_$i69: i32, in_$i77: i32, in_$i66: i32, in_$i78: i32, in_$i79: i1, in_$i9: i32, in_$i10: i32, in_$i11: i32, in_$i12: i32, in_$i80: i32) returns (out_$i13: i32, out_$p14: ref, out_$p15: ref, out_$i16: i64, out_$i17: i64, out_$p19: ref, out_$i20: i32, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$i24: i8, out_$i25: i32, out_$i26: i1, out_$p27: ref, out_$i28: i8, out_$i29: i32, out_$i30: i32, out_$i31: i32, out_$i32: i32, out_$i33: i32, out_$i34: i32, out_$i35: i32, out_$p36: ref, out_$i37: i8, out_$i38: i64, out_$p39: ref, out_$i40: i32, out_$p41: ref, out_$i42: i16, out_$i43: i8, out_$i44: i64, out_$p45: ref, out_$i46: i32, out_$p47: ref, out_$i48: i16, out_$i49: i32, out_$i50: i32, out_$i51: i8, out_$i52: i64, out_$p53: ref, out_$i54: i32, out_$p55: ref, out_$i56: i8, out_$i57: i64, out_$p58: ref, out_$i59: i32, out_$p60: ref, out_$i61: i8, out_$i62: i64, out_$p63: ref, out_$i64: i32, out_$i65: i1, out_$i70: i32, out_$p71: ref, out_$i72: i8, out_$i73: i64, out_$p74: ref, out_$i75: i32, out_$i76: i1, out_$i67: i32, out_$p68: ref, out_$i69: i32, out_$i77: i32, out_$i66: i32, out_$i78: i32, out_$i79: i1, out_$i9: i32, out_$i10: i32, out_$i11: i32, out_$i12: i32, out_$i80: i32);
  modifies $M.0;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();



implementation main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p5: ref, in_$p7: ref, in_$p8: ref, in_$p10: ref, in_$p11: ref, in_$i20: i32, in_$i21: i1, in_$i22: i1, in_$i23: i1, in_$i24: i1, in_$i25: i1, in_$i26: i1, in_$i27: i1, in_$i28: i32, in_$i29: i1, in_$i30: i32, in_$i31: i1, in_$i32: i1, in_$i33: i1, in_$i34: i32, in_$i35: i1, in_$p36: ref, in_$i37: i32, in_$i38: i32, in_$i39: i1, in_$i40: i32, in_$i41: i32, in_$i42: i32, in_$i43: i1, in_$i44: i32, in_$i45: i1, in_$p46: ref, in_$i47: i32, in_$i48: i32, in_$i49: i32, in_$i50: i1, in_$i51: i32, in_$i52: i1, in_$i53: i32, in_$i54: i1, in_$i55: i1, in_$i56: i1, in_$i57: i32, in_$i58: i1, in_$i59: i32, in_$i60: i1, in_$i61: i32, in_$i62: i1, in_$i63: i32, in_$i64: i32, in_$i65: i1, in_$i66: i32, in_$i67: i1, in_$i68: i32, in_$i69: i1, in_$i70: i32, in_$i71: i1, in_$i72: i32, in_$i73: i1, in_$i74: i32, in_$i75: i1, in_$i76: i1, in_$i77: i1, in_$i78: i1, in_$i79: i1, in_$i80: i1, in_$i81: i32, in_$i82: i1, in_$p83: ref, in_$i84: i64, in_$i86: i32, in_$i87: i1, in_$p88: ref, in_$i89: i64, in_$i91: i32, in_$i92: i1, in_$p93: ref, in_$p94: ref, in_$i96: i32, in_$i97: i32, in_$i98: i32, in_$i99: i1, in_$p100: ref, in_$i101: i64, in_$i103: i32, in_$i104: i1, in_$p105: ref, in_$i106: i64, in_$i107: i32, in_$i109: i32, in_$i110: i1, in_$p111: ref, in_$p112: ref, in_$i113: i32, in_$i114: i32, in_$i115: i1, in_$i116: i32, in_$i117: i32, in_vslice_dummy_var_38: i64, in_vslice_dummy_var_39: i64, in_vslice_dummy_var_40: i32, in_vslice_dummy_var_41: i64, in_vslice_dummy_var_42: i64) returns (out_$i20: i32, out_$i21: i1, out_$i22: i1, out_$i23: i1, out_$i24: i1, out_$i25: i1, out_$i26: i1, out_$i27: i1, out_$i28: i32, out_$i29: i1, out_$i30: i32, out_$i31: i1, out_$i32: i1, out_$i33: i1, out_$i34: i32, out_$i35: i1, out_$p36: ref, out_$i37: i32, out_$i38: i32, out_$i39: i1, out_$i40: i32, out_$i41: i32, out_$i42: i32, out_$i43: i1, out_$i44: i32, out_$i45: i1, out_$p46: ref, out_$i47: i32, out_$i48: i32, out_$i49: i32, out_$i50: i1, out_$i51: i32, out_$i52: i1, out_$i53: i32, out_$i54: i1, out_$i55: i1, out_$i56: i1, out_$i57: i32, out_$i58: i1, out_$i59: i32, out_$i60: i1, out_$i61: i32, out_$i62: i1, out_$i63: i32, out_$i64: i32, out_$i65: i1, out_$i66: i32, out_$i67: i1, out_$i68: i32, out_$i69: i1, out_$i70: i32, out_$i71: i1, out_$i72: i32, out_$i73: i1, out_$i74: i32, out_$i75: i1, out_$i76: i1, out_$i77: i1, out_$i78: i1, out_$i79: i1, out_$i80: i1, out_$i81: i32, out_$i82: i1, out_$p83: ref, out_$i84: i64, out_$i86: i32, out_$i87: i1, out_$p88: ref, out_$i89: i64, out_$i91: i32, out_$i92: i1, out_$p93: ref, out_$p94: ref, out_$i96: i32, out_$i97: i32, out_$i98: i32, out_$i99: i1, out_$p100: ref, out_$i101: i64, out_$i103: i32, out_$i104: i1, out_$p105: ref, out_$i106: i64, out_$i107: i32, out_$i109: i32, out_$i110: i1, out_$p111: ref, out_$p112: ref, out_$i113: i32, out_$i114: i32, out_$i115: i1, out_$i116: i32, out_$i117: i32, out_vslice_dummy_var_38: i64, out_vslice_dummy_var_39: i64, out_vslice_dummy_var_40: i32, out_vslice_dummy_var_41: i64, out_vslice_dummy_var_42: i64)
{

  entry:
    out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$p83, out_$i84, out_$i86, out_$i87, out_$p88, out_$i89, out_$i91, out_$i92, out_$p93, out_$p94, out_$i96, out_$i97, out_$i98, out_$i99, out_$p100, out_$i101, out_$i103, out_$i104, out_$p105, out_$i106, out_$i107, out_$i109, out_$i110, out_$p111, out_$p112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_vslice_dummy_var_38, out_vslice_dummy_var_39, out_vslice_dummy_var_40, out_vslice_dummy_var_41, out_vslice_dummy_var_42 := in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$p36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$p46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$i62, in_$i63, in_$i64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$i78, in_$i79, in_$i80, in_$i81, in_$i82, in_$p83, in_$i84, in_$i86, in_$i87, in_$p88, in_$i89, in_$i91, in_$i92, in_$p93, in_$p94, in_$i96, in_$i97, in_$i98, in_$i99, in_$p100, in_$i101, in_$i103, in_$i104, in_$p105, in_$i106, in_$i107, in_$i109, in_$i110, in_$p111, in_$p112, in_$i113, in_$i114, in_$i115, in_$i116, in_$i117, in_vslice_dummy_var_38, in_vslice_dummy_var_39, in_vslice_dummy_var_40, in_vslice_dummy_var_41, in_vslice_dummy_var_42;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1442} out_$i20 := __VERIFIER_nondet_int();
    call {:si_unique_call 1443} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i20);
    call {:si_unique_call 1444} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i20);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb44_dummy;

  $bb126:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb124:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb19:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb29:
    assume !(out_$i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb31:
    assume !(out_$i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_8555:
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_8554:
    assume {:verifier.code 0} true;
    $M.42 := out_$i41;
    call {:si_unique_call 1451} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i41);
    goto corral_source_split_8555;

  corral_source_split_8553:
    assume {:verifier.code 0} true;
    out_$i41 := $add.i32(out_$i40, 1);
    goto corral_source_split_8554;

  corral_source_split_8552:
    assume {:verifier.code 0} true;
    out_$i40 := $M.42;
    goto corral_source_split_8553;

  corral_source_split_8551:
    assume {:verifier.code 0} true;
    $M.40 := 2;
    call {:si_unique_call 1450} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_8552;

  $bb30:
    assume out_$i39 == 1;
    goto corral_source_split_8551;

  corral_source_split_8549:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  corral_source_split_8548:
    assume {:verifier.code 0} true;
    out_$i39 := $eq.i32(out_$i38, 0);
    goto corral_source_split_8549;

  corral_source_split_8547:
    assume {:verifier.code 0} true;
    out_$i38 := $M.47;
    goto corral_source_split_8548;

  corral_source_split_8546:
    assume {:verifier.code 0} true;
    $M.47 := out_$i37;
    call {:si_unique_call 1449} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i37);
    goto corral_source_split_8547;

  SeqInstr_801:
    goto corral_source_split_8546;

  SeqInstr_800:
    assume assertsPassed;
    goto SeqInstr_801;

  corral_source_split_8545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1448} out_$i37 := ftdi_elan_probe(out_$p36, in_$p5);
    goto SeqInstr_800;

  corral_source_split_8544:
    assume {:verifier.code 0} true;
    out_$p36 := $M.36;
    goto corral_source_split_8545;

  $bb28:
    assume out_$i35 == 1;
    goto corral_source_split_8544;

  corral_source_split_8542:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_8541:
    assume {:verifier.code 0} true;
    out_$i35 := $eq.i32(out_$i34, 1);
    goto corral_source_split_8542;

  corral_source_split_8540:
    assume {:verifier.code 0} true;
    out_$i34 := $M.40;
    goto corral_source_split_8541;

  $bb26:
    assume out_$i33 == 1;
    goto corral_source_split_8540;

  $bb21:
    assume out_$i31 == 1;
    assume {:verifier.code 0} true;
    out_$i33 := $eq.i32(out_$i30, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i31 := $slt.i32(out_$i30, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_8534:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1445} out_$i30 := __VERIFIER_nondet_int();
    call {:si_unique_call 1446} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i30);
    call {:si_unique_call 1447} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i30);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb18:
    assume out_$i29 == 1;
    goto corral_source_split_8534;

  corral_source_split_8532:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_8531:
    assume {:verifier.code 0} true;
    out_$i29 := $ne.i32(out_$i28, 0);
    goto corral_source_split_8532;

  corral_source_split_8530:
    assume {:verifier.code 0} true;
    out_$i28 := $M.40;
    goto corral_source_split_8531;

  $bb16:
    assume out_$i27 == 1;
    goto corral_source_split_8530;

  $bb12:
    assume out_$i25 == 1;
    assume {:verifier.code 0} true;
    out_$i27 := $eq.i32(out_$i20, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb3:
    assume out_$i21 == 1;
    assume {:verifier.code 0} true;
    out_$i25 := $slt.i32(out_$i20, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i21 := $slt.i32(out_$i20, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_8567:
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_8566:
    assume {:verifier.code 0} true;
    $M.42 := out_$i48;
    call {:si_unique_call 1454} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i48);
    goto corral_source_split_8567;

  corral_source_split_8565:
    assume {:verifier.code 0} true;
    out_$i48 := $sub.i32(out_$i47, 1);
    goto corral_source_split_8566;

  corral_source_split_8564:
    assume {:verifier.code 0} true;
    out_$i47 := $M.42;
    goto corral_source_split_8565;

  corral_source_split_8563:
    assume {:verifier.code 0} true;
    $M.40 := 1;
    call {:si_unique_call 1453} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8564;

  SeqInstr_804:
    goto corral_source_split_8563;

  SeqInstr_803:
    assume assertsPassed;
    goto SeqInstr_804;

  corral_source_split_8562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1452} ftdi_elan_disconnect(out_$p46);
    goto SeqInstr_803;

  corral_source_split_8561:
    assume {:verifier.code 0} true;
    out_$p46 := $M.36;
    goto corral_source_split_8562;

  $bb38:
    assume out_$i45 == 1;
    goto corral_source_split_8561;

  corral_source_split_8559:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_8558:
    assume {:verifier.code 0} true;
    out_$i45 := $eq.i32(out_$i44, 0);
    goto corral_source_split_8559;

  corral_source_split_8557:
    assume {:verifier.code 0} true;
    out_$i44 := $M.48;
    goto corral_source_split_8558;

  $bb35:
    assume out_$i43 == 1;
    goto corral_source_split_8557;

  corral_source_split_8538:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_8537:
    assume {:verifier.code 0} true;
    out_$i43 := $eq.i32(out_$i42, 2);
    goto corral_source_split_8538;

  corral_source_split_8536:
    assume {:verifier.code 0} true;
    out_$i42 := $M.40;
    goto corral_source_split_8537;

  $bb23:
    assume out_$i32 == 1;
    goto corral_source_split_8536;

  $bb22:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    out_$i32 := $eq.i32(out_$i30, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb36:
    assume {:verifier.code 0} true;
    assume !(out_$i43 == 1);
    goto $bb37;

  $bb39:
    assume {:verifier.code 0} true;
    assume !(out_$i45 == 1);
    goto $bb37;

  corral_source_split_8569:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1455} ldv_stop();
    goto corral_source_split_8569;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb24:
    assume {:verifier.code 0} true;
    assume !(out_$i32 == 1);
    goto $bb25;

  $bb27:
    assume {:verifier.code 0} true;
    assume !(out_$i33 == 1);
    goto $bb25;

  $bb46:
    assume !(out_$i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  corral_source_split_8572:
    assume {:verifier.code 0} true;
    goto $bb47;

  SeqInstr_807:
    goto corral_source_split_8572;

  SeqInstr_806:
    assume assertsPassed;
    goto SeqInstr_807;

  corral_source_split_8571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1456} invoke_work_1();
    goto SeqInstr_806;

  $bb45:
    assume out_$i50 == 1;
    goto corral_source_split_8571;

  corral_source_split_8524:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  corral_source_split_8523:
    assume {:verifier.code 0} true;
    out_$i50 := $ne.i32(out_$i49, 0);
    goto corral_source_split_8524;

  corral_source_split_8522:
    assume {:verifier.code 0} true;
    out_$i49 := $M.41;
    goto corral_source_split_8523;

  $bb14:
    assume out_$i26 == 1;
    goto corral_source_split_8522;

  $bb13:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    out_$i26 := $slt.i32(out_$i20, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb49:
    assume !(out_$i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb59:
    assume {:verifier.code 0} true;
    assume !(out_$i58 == 1);
    goto $bb60;

  $bb62:
    assume {:verifier.code 0} true;
    assume !(out_$i60 == 1);
    goto $bb60;

  corral_source_split_8586:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62;

  corral_source_split_8585:
    assume {:verifier.code 0} true;
    out_$i60 := $eq.i32(out_$i59, 0);
    goto corral_source_split_8586;

  corral_source_split_8584:
    assume {:verifier.code 0} true;
    out_$i59 := $M.42;
    goto corral_source_split_8585;

  $bb58:
    assume out_$i58 == 1;
    goto corral_source_split_8584;

  corral_source_split_8582:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  corral_source_split_8581:
    assume {:verifier.code 0} true;
    out_$i58 := $eq.i32(out_$i57, 3);
    goto corral_source_split_8582;

  corral_source_split_8580:
    assume {:verifier.code 0} true;
    out_$i57 := $M.43;
    goto corral_source_split_8581;

  $bb56:
    assume out_$i56 == 1;
    goto corral_source_split_8580;

  $bb51:
    assume out_$i54 == 1;
    assume {:verifier.code 0} true;
    out_$i56 := $eq.i32(out_$i53, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb50:
    assume {:verifier.code 0} true;
    out_$i54 := $slt.i32(out_$i53, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  corral_source_split_8574:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1457} out_$i53 := __VERIFIER_nondet_int();
    call {:si_unique_call 1458} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i53);
    call {:si_unique_call 1459} {:cexpr "tmp___6"} boogie_si_record_i32(out_$i53);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb48:
    assume out_$i52 == 1;
    goto corral_source_split_8574;

  corral_source_split_8528:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  corral_source_split_8527:
    assume {:verifier.code 0} true;
    out_$i52 := $ne.i32(out_$i51, 0);
    goto corral_source_split_8528;

  corral_source_split_8526:
    assume {:verifier.code 0} true;
    out_$i51 := $M.43;
    goto corral_source_split_8527;

  $bb15:
    assume !(out_$i26 == 1);
    goto corral_source_split_8526;

  $bb67:
    assume !(out_$i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb72:
    assume !(out_$i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  corral_source_split_8606:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72;

  corral_source_split_8605:
    assume {:verifier.code 0} true;
    out_$i67 := $ne.i32(out_$i66, 0);
    goto corral_source_split_8606;

  $bb70:
    assume {:verifier.code 0} true;
    out_$i66 := $M.49;
    goto corral_source_split_8605;

  $bb69:
    assume !(out_$i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  corral_source_split_8603:
    assume {:verifier.code 0} true;
    goto $bb70;

  corral_source_split_8602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1467} ldv_file_operations_5();
    goto corral_source_split_8603;

  corral_source_split_8601:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1466} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8602;

  corral_source_split_8600:
    assume {:verifier.code 0} true;
    $M.43 := 3;
    call {:si_unique_call 1465} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_8601;

  $bb68:
    assume out_$i65 == 1;
    goto corral_source_split_8600;

  corral_source_split_8598:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  corral_source_split_8597:
    assume {:verifier.code 0} true;
    out_$i65 := $eq.i32(out_$i64, 0);
    goto corral_source_split_8598;

  corral_source_split_8596:
    assume {:verifier.code 0} true;
    out_$i64 := $M.49;
    goto corral_source_split_8597;

  corral_source_split_8595:
    assume {:verifier.code 0} true;
    $M.49 := out_$i63;
    call {:si_unique_call 1464} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i63);
    goto corral_source_split_8596;

  SeqInstr_816:
    goto corral_source_split_8595;

  SeqInstr_815:
    assume assertsPassed;
    goto SeqInstr_816;

  corral_source_split_8594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1463} out_$i63 := ftdi_elan_init();
    goto SeqInstr_815;

  $bb66:
    assume out_$i62 == 1;
    goto corral_source_split_8594;

  corral_source_split_8578:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  corral_source_split_8577:
    assume {:verifier.code 0} true;
    out_$i62 := $eq.i32(out_$i61, 1);
    goto corral_source_split_8578;

  corral_source_split_8576:
    assume {:verifier.code 0} true;
    out_$i61 := $M.43;
    goto corral_source_split_8577;

  $bb53:
    assume out_$i55 == 1;
    goto corral_source_split_8576;

  $bb52:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    out_$i55 := $eq.i32(out_$i53, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  corral_source_split_8611:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb75:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1469} ldv_stop();
    goto corral_source_split_8611;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb54:
    assume {:verifier.code 0} true;
    assume !(out_$i55 == 1);
    goto $bb55;

  $bb57:
    assume {:verifier.code 0} true;
    assume !(out_$i56 == 1);
    goto $bb55;

  $bb79:
    assume !(out_$i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  corral_source_split_8614:
    assume {:verifier.code 0} true;
    goto $bb80;

  SeqInstr_819:
    goto corral_source_split_8614;

  SeqInstr_818:
    assume assertsPassed;
    goto SeqInstr_819;

  corral_source_split_8613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1470} invoke_work_3();
    goto SeqInstr_818;

  $bb78:
    assume out_$i69 == 1;
    goto corral_source_split_8613;

  corral_source_split_8512:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  corral_source_split_8511:
    assume {:verifier.code 0} true;
    out_$i69 := $ne.i32(out_$i68, 0);
    goto corral_source_split_8512;

  corral_source_split_8510:
    assume {:verifier.code 0} true;
    out_$i68 := $M.44;
    goto corral_source_split_8511;

  $bb5:
    assume out_$i22 == 1;
    goto corral_source_split_8510;

  $bb4:
    assume !(out_$i21 == 1);
    assume {:verifier.code 0} true;
    out_$i22 := $slt.i32(out_$i20, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb82:
    assume !(out_$i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  corral_source_split_8617:
    assume {:verifier.code 0} true;
    goto $bb83;

  SeqInstr_822:
    goto corral_source_split_8617;

  SeqInstr_821:
    assume assertsPassed;
    goto SeqInstr_822;

  corral_source_split_8616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1471} invoke_work_2();
    goto SeqInstr_821;

  $bb81:
    assume out_$i71 == 1;
    goto corral_source_split_8616;

  corral_source_split_8516:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  corral_source_split_8515:
    assume {:verifier.code 0} true;
    out_$i71 := $ne.i32(out_$i70, 0);
    goto corral_source_split_8516;

  corral_source_split_8514:
    assume {:verifier.code 0} true;
    out_$i70 := $M.45;
    goto corral_source_split_8515;

  $bb7:
    assume out_$i23 == 1;
    goto corral_source_split_8514;

  $bb6:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    out_$i23 := $slt.i32(out_$i20, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb85:
    assume !(out_$i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb106:
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb123:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb121:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb115:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb112:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb109:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb104:
    assume !(out_$i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  corral_source_split_8654:
    assume {:verifier.code 0} true;
    goto $bb105;

  corral_source_split_8653:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1478} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_8654;

  corral_source_split_8652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1477} out_vslice_dummy_var_39 := ftdi_elan_write(out_$p88, in_$p11, out_$i89, in_$p10);
    goto corral_source_split_8653;

  corral_source_split_8651:
    assume {:verifier.code 0} true;
    out_$i89 := $load.i64($M.26, in_$p0);
    goto corral_source_split_8652;

  corral_source_split_8650:
    assume {:verifier.code 0} true;
    out_$p88 := $M.38;
    goto corral_source_split_8651;

  $bb103:
    assume out_$i87 == 1;
    goto corral_source_split_8650;

  corral_source_split_8648:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  corral_source_split_8647:
    assume {:verifier.code 0} true;
    out_$i87 := $eq.i32(out_$i86, 2);
    goto corral_source_split_8648;

  $bb102:
    assume {:verifier.code 0} true;
    out_$i86 := $M.46;
    goto corral_source_split_8647;

  $bb101:
    assume !(out_$i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  corral_source_split_8645:
    assume {:verifier.code 0} true;
    goto $bb102;

  corral_source_split_8644:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1476} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8645;

  corral_source_split_8643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1475} out_vslice_dummy_var_38 := ftdi_elan_write(out_$p83, in_$p11, out_$i84, in_$p10);
    goto corral_source_split_8644;

  corral_source_split_8642:
    assume {:verifier.code 0} true;
    out_$i84 := $load.i64($M.26, in_$p0);
    goto corral_source_split_8643;

  corral_source_split_8641:
    assume {:verifier.code 0} true;
    out_$p83 := $M.38;
    goto corral_source_split_8642;

  $bb100:
    assume out_$i82 == 1;
    goto corral_source_split_8641;

  corral_source_split_8639:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  corral_source_split_8638:
    assume {:verifier.code 0} true;
    out_$i82 := $eq.i32(out_$i81, 1);
    goto corral_source_split_8639;

  corral_source_split_8637:
    assume {:verifier.code 0} true;
    out_$i81 := $M.46;
    goto corral_source_split_8638;

  $bb98:
    assume out_$i80 == 1;
    goto corral_source_split_8637;

  $bb96:
    assume out_$i79 == 1;
    assume {:verifier.code 0} true;
    out_$i80 := $eq.i32(out_$i74, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  $bb87:
    assume out_$i75 == 1;
    assume {:verifier.code 0} true;
    out_$i79 := $slt.i32(out_$i74, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  $bb86:
    assume {:verifier.code 0} true;
    out_$i75 := $slt.i32(out_$i74, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  corral_source_split_8619:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1472} out_$i74 := __VERIFIER_nondet_int();
    call {:si_unique_call 1473} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i74);
    call {:si_unique_call 1474} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i74);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb84:
    assume out_$i73 == 1;
    goto corral_source_split_8619;

  corral_source_split_8520:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  corral_source_split_8519:
    assume {:verifier.code 0} true;
    out_$i73 := $ne.i32(out_$i72, 0);
    goto corral_source_split_8520;

  corral_source_split_8518:
    assume {:verifier.code 0} true;
    out_$i72 := $M.46;
    goto corral_source_split_8519;

  $bb9:
    assume out_$i24 == 1;
    goto corral_source_split_8518;

  $bb8:
    assume !(out_$i23 == 1);
    assume {:verifier.code 0} true;
    out_$i24 := $eq.i32(out_$i20, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb108:
    assume !(out_$i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb109;

  corral_source_split_8663:
    assume {:verifier.code 0} true;
    goto $bb109;

  corral_source_split_8662:
    assume {:verifier.code 0} true;
    $M.42 := out_$i97;
    call {:si_unique_call 1481} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i97);
    goto corral_source_split_8663;

  corral_source_split_8661:
    assume {:verifier.code 0} true;
    out_$i97 := $sub.i32(out_$i96, 1);
    goto corral_source_split_8662;

  corral_source_split_8660:
    assume {:verifier.code 0} true;
    out_$i96 := $M.42;
    goto corral_source_split_8661;

  corral_source_split_8659:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1480} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8660;

  SeqInstr_825:
    goto corral_source_split_8659;

  SeqInstr_824:
    assume assertsPassed;
    goto SeqInstr_825;

  corral_source_split_8658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1479} out_vslice_dummy_var_40 := ftdi_elan_release(out_$p93, out_$p94);
    goto SeqInstr_824;

  corral_source_split_8657:
    assume {:verifier.code 0} true;
    out_$p94 := $M.38;
    goto corral_source_split_8658;

  corral_source_split_8656:
    assume {:verifier.code 0} true;
    out_$p93 := $M.37;
    goto corral_source_split_8657;

  $bb107:
    assume out_$i92 == 1;
    goto corral_source_split_8656;

  corral_source_split_8635:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  corral_source_split_8634:
    assume {:verifier.code 0} true;
    out_$i92 := $eq.i32(out_$i91, 2);
    goto corral_source_split_8635;

  corral_source_split_8633:
    assume {:verifier.code 0} true;
    out_$i91 := $M.46;
    goto corral_source_split_8634;

  $bb97:
    assume !(out_$i79 == 1);
    goto corral_source_split_8633;

  $bb111:
    assume !(out_$i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb112;

  corral_source_split_8669:
    assume {:verifier.code 0} true;
    goto $bb112;

  corral_source_split_8668:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1483} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_8669;

  corral_source_split_8667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1482} out_vslice_dummy_var_41 := ftdi_elan_read(out_$p100, in_$p8, out_$i101, in_$p7);
    goto corral_source_split_8668;

  corral_source_split_8666:
    assume {:verifier.code 0} true;
    out_$i101 := $load.i64($M.26, in_$p2);
    goto corral_source_split_8667;

  corral_source_split_8665:
    assume {:verifier.code 0} true;
    out_$p100 := $M.38;
    goto corral_source_split_8666;

  $bb110:
    assume out_$i99 == 1;
    goto corral_source_split_8665;

  corral_source_split_8623:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  corral_source_split_8622:
    assume {:verifier.code 0} true;
    out_$i99 := $eq.i32(out_$i98, 2);
    goto corral_source_split_8623;

  corral_source_split_8621:
    assume {:verifier.code 0} true;
    out_$i98 := $M.46;
    goto corral_source_split_8622;

  $bb89:
    assume out_$i76 == 1;
    goto corral_source_split_8621;

  $bb88:
    assume !(out_$i75 == 1);
    assume {:verifier.code 0} true;
    out_$i76 := $slt.i32(out_$i74, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  $bb114:
    assume !(out_$i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb115;

  corral_source_split_8676:
    assume {:verifier.code 0} true;
    goto $bb115;

  corral_source_split_8675:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1485} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_8676;

  corral_source_split_8674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1484} out_vslice_dummy_var_42 := no_llseek(out_$p105, out_$i106, out_$i107);
    goto corral_source_split_8675;

  corral_source_split_8673:
    assume {:verifier.code 0} true;
    out_$i107 := $load.i32($M.26, in_$p1);
    goto corral_source_split_8674;

  corral_source_split_8672:
    assume {:verifier.code 0} true;
    out_$i106 := $load.i64($M.26, in_$p3);
    goto corral_source_split_8673;

  corral_source_split_8671:
    assume {:verifier.code 0} true;
    out_$p105 := $M.38;
    goto corral_source_split_8672;

  $bb113:
    assume out_$i104 == 1;
    goto corral_source_split_8671;

  corral_source_split_8627:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  corral_source_split_8626:
    assume {:verifier.code 0} true;
    out_$i104 := $eq.i32(out_$i103, 2);
    goto corral_source_split_8627;

  corral_source_split_8625:
    assume {:verifier.code 0} true;
    out_$i103 := $M.46;
    goto corral_source_split_8626;

  $bb91:
    assume out_$i77 == 1;
    goto corral_source_split_8625;

  $bb90:
    assume !(out_$i76 == 1);
    assume {:verifier.code 0} true;
    out_$i77 := $slt.i32(out_$i74, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  $bb117:
    assume !(out_$i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb120:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb119:
    assume !(out_$i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb120;

  corral_source_split_8690:
    assume {:verifier.code 0} true;
    goto $bb120;

  corral_source_split_8689:
    assume {:verifier.code 0} true;
    $M.42 := out_$i117;
    call {:si_unique_call 1489} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i117);
    goto corral_source_split_8690;

  corral_source_split_8688:
    assume {:verifier.code 0} true;
    out_$i117 := $add.i32(out_$i116, 1);
    goto corral_source_split_8689;

  corral_source_split_8687:
    assume {:verifier.code 0} true;
    out_$i116 := $M.42;
    goto corral_source_split_8688;

  corral_source_split_8686:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1488} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_8687;

  $bb118:
    assume out_$i115 == 1;
    goto corral_source_split_8686;

  corral_source_split_8684:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  corral_source_split_8683:
    assume {:verifier.code 0} true;
    out_$i115 := $eq.i32(out_$i114, 0);
    goto corral_source_split_8684;

  corral_source_split_8682:
    assume {:verifier.code 0} true;
    out_$i114 := $M.50;
    goto corral_source_split_8683;

  corral_source_split_8681:
    assume {:verifier.code 0} true;
    $M.50 := out_$i113;
    call {:si_unique_call 1487} {:cexpr "ldv_retval_2"} boogie_si_record_i32(out_$i113);
    goto corral_source_split_8682;

  corral_source_split_8680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1486} out_$i113 := ftdi_elan_open(out_$p111, out_$p112);
    goto corral_source_split_8681;

  corral_source_split_8679:
    assume {:verifier.code 0} true;
    out_$p112 := $M.38;
    goto corral_source_split_8680;

  corral_source_split_8678:
    assume {:verifier.code 0} true;
    out_$p111 := $M.37;
    goto corral_source_split_8679;

  $bb116:
    assume out_$i110 == 1;
    goto corral_source_split_8678;

  corral_source_split_8631:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  corral_source_split_8630:
    assume {:verifier.code 0} true;
    out_$i110 := $eq.i32(out_$i109, 1);
    goto corral_source_split_8631;

  corral_source_split_8629:
    assume {:verifier.code 0} true;
    out_$i109 := $M.46;
    goto corral_source_split_8630;

  $bb93:
    assume out_$i78 == 1;
    goto corral_source_split_8629;

  $bb92:
    assume !(out_$i77 == 1);
    assume {:verifier.code 0} true;
    out_$i78 := $eq.i32(out_$i74, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  corral_source_split_8692:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1490} ldv_stop();
    goto corral_source_split_8692;

  $bb95:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb94:
    assume {:verifier.code 0} true;
    assume !(out_$i78 == 1);
    goto $bb95;

  $bb99:
    assume {:verifier.code 0} true;
    assume !(out_$i80 == 1);
    goto $bb95;

  corral_source_split_8694:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1491} ldv_stop();
    goto corral_source_split_8694;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i24 == 1);
    goto $bb11;

  $bb17:
    assume {:verifier.code 0} true;
    assume !(out_$i27 == 1);
    goto $bb11;

  $bb44_dummy:
    call {:si_unique_call 1} out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$p83, out_$i84, out_$i86, out_$i87, out_$p88, out_$i89, out_$i91, out_$i92, out_$p93, out_$p94, out_$i96, out_$i97, out_$i98, out_$i99, out_$p100, out_$i101, out_$i103, out_$i104, out_$p105, out_$i106, out_$i107, out_$i109, out_$i110, out_$p111, out_$p112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_vslice_dummy_var_38, out_vslice_dummy_var_39, out_vslice_dummy_var_40, out_vslice_dummy_var_41, out_vslice_dummy_var_42 := main_loop_$bb1(in_$p0, in_$p1, in_$p2, in_$p3, in_$p5, in_$p7, in_$p8, in_$p10, in_$p11, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$p83, out_$i84, out_$i86, out_$i87, out_$p88, out_$i89, out_$i91, out_$i92, out_$p93, out_$p94, out_$i96, out_$i97, out_$i98, out_$i99, out_$p100, out_$i101, out_$i103, out_$i104, out_$p105, out_$i106, out_$i107, out_$i109, out_$i110, out_$p111, out_$p112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_vslice_dummy_var_38, out_vslice_dummy_var_39, out_vslice_dummy_var_40, out_vslice_dummy_var_41, out_vslice_dummy_var_42);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p5: ref, in_$p7: ref, in_$p8: ref, in_$p10: ref, in_$p11: ref, in_$i20: i32, in_$i21: i1, in_$i22: i1, in_$i23: i1, in_$i24: i1, in_$i25: i1, in_$i26: i1, in_$i27: i1, in_$i28: i32, in_$i29: i1, in_$i30: i32, in_$i31: i1, in_$i32: i1, in_$i33: i1, in_$i34: i32, in_$i35: i1, in_$p36: ref, in_$i37: i32, in_$i38: i32, in_$i39: i1, in_$i40: i32, in_$i41: i32, in_$i42: i32, in_$i43: i1, in_$i44: i32, in_$i45: i1, in_$p46: ref, in_$i47: i32, in_$i48: i32, in_$i49: i32, in_$i50: i1, in_$i51: i32, in_$i52: i1, in_$i53: i32, in_$i54: i1, in_$i55: i1, in_$i56: i1, in_$i57: i32, in_$i58: i1, in_$i59: i32, in_$i60: i1, in_$i61: i32, in_$i62: i1, in_$i63: i32, in_$i64: i32, in_$i65: i1, in_$i66: i32, in_$i67: i1, in_$i68: i32, in_$i69: i1, in_$i70: i32, in_$i71: i1, in_$i72: i32, in_$i73: i1, in_$i74: i32, in_$i75: i1, in_$i76: i1, in_$i77: i1, in_$i78: i1, in_$i79: i1, in_$i80: i1, in_$i81: i32, in_$i82: i1, in_$p83: ref, in_$i84: i64, in_$i86: i32, in_$i87: i1, in_$p88: ref, in_$i89: i64, in_$i91: i32, in_$i92: i1, in_$p93: ref, in_$p94: ref, in_$i96: i32, in_$i97: i32, in_$i98: i32, in_$i99: i1, in_$p100: ref, in_$i101: i64, in_$i103: i32, in_$i104: i1, in_$p105: ref, in_$i106: i64, in_$i107: i32, in_$i109: i32, in_$i110: i1, in_$p111: ref, in_$p112: ref, in_$i113: i32, in_$i114: i32, in_$i115: i1, in_$i116: i32, in_$i117: i32, in_vslice_dummy_var_38: i64, in_vslice_dummy_var_39: i64, in_vslice_dummy_var_40: i32, in_vslice_dummy_var_41: i64, in_vslice_dummy_var_42: i64) returns (out_$i20: i32, out_$i21: i1, out_$i22: i1, out_$i23: i1, out_$i24: i1, out_$i25: i1, out_$i26: i1, out_$i27: i1, out_$i28: i32, out_$i29: i1, out_$i30: i32, out_$i31: i1, out_$i32: i1, out_$i33: i1, out_$i34: i32, out_$i35: i1, out_$p36: ref, out_$i37: i32, out_$i38: i32, out_$i39: i1, out_$i40: i32, out_$i41: i32, out_$i42: i32, out_$i43: i1, out_$i44: i32, out_$i45: i1, out_$p46: ref, out_$i47: i32, out_$i48: i32, out_$i49: i32, out_$i50: i1, out_$i51: i32, out_$i52: i1, out_$i53: i32, out_$i54: i1, out_$i55: i1, out_$i56: i1, out_$i57: i32, out_$i58: i1, out_$i59: i32, out_$i60: i1, out_$i61: i32, out_$i62: i1, out_$i63: i32, out_$i64: i32, out_$i65: i1, out_$i66: i32, out_$i67: i1, out_$i68: i32, out_$i69: i1, out_$i70: i32, out_$i71: i1, out_$i72: i32, out_$i73: i1, out_$i74: i32, out_$i75: i1, out_$i76: i1, out_$i77: i1, out_$i78: i1, out_$i79: i1, out_$i80: i1, out_$i81: i32, out_$i82: i1, out_$p83: ref, out_$i84: i64, out_$i86: i32, out_$i87: i1, out_$p88: ref, out_$i89: i64, out_$i91: i32, out_$i92: i1, out_$p93: ref, out_$p94: ref, out_$i96: i32, out_$i97: i32, out_$i98: i32, out_$i99: i1, out_$p100: ref, out_$i101: i64, out_$i103: i32, out_$i104: i1, out_$p105: ref, out_$i106: i64, out_$i107: i32, out_$i109: i32, out_$i110: i1, out_$p111: ref, out_$p112: ref, out_$i113: i32, out_$i114: i32, out_$i115: i1, out_$i116: i32, out_$i117: i32, out_vslice_dummy_var_38: i64, out_vslice_dummy_var_39: i64, out_vslice_dummy_var_40: i32, out_vslice_dummy_var_41: i64, out_vslice_dummy_var_42: i64);
  modifies $M.42, $M.40, $M.47, $M.1, $M.0, $M.3, $CurrAddr, assertsPassed, $M.7, $M.6, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12, $M.16, $M.19, $M.20, $M.25, $M.23, $M.24, $M.4, $M.22, $M.37, $M.38, $M.46, $M.43, $M.49, $M.17, $M.5, $M.18, $M.48, $M.36, $M.27, $M.28, $M.29, $M.30, $M.32, $M.33, $M.34, $M.35, $M.15, $M.50;



implementation ftdi_elan_exit_loop_$bb4(in_$p13: ref, in_$p14: ref, in_$p16: ref, in_$i17: i64, in_$i18: i1, in_$p10: ref, in_$p11: ref) returns (out_$p13: ref, out_$p14: ref, out_$p16: ref, out_$i17: i64, out_$i18: i1, out_$p10: ref, out_$p11: ref)
{

  entry:
    out_$p13, out_$p14, out_$p16, out_$i17, out_$i18, out_$p10, out_$p11 := in_$p13, in_$p14, in_$p16, in_$i17, in_$i18, in_$p10, in_$p11;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8712;

  $bb6:
    assume out_$i18 == 1;
    assume {:verifier.code 0} true;
    out_$p10, out_$p11 := out_$p11, out_$p14;
    goto $bb6_dummy;

  corral_source_split_8722:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_8721:
    assume {:verifier.code 0} true;
    out_$i18 := $ne.i64(out_$i17, $p2i.ref.i64(ftdi_static_list));
    goto corral_source_split_8722;

  corral_source_split_8720:
    assume {:verifier.code 0} true;
    out_$i17 := $p2i.ref.i64(out_$p16);
    goto corral_source_split_8721;

  corral_source_split_8719:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(out_$p11, $mul.ref(0, 8488)), $mul.ref(0, 1));
    goto corral_source_split_8720;

  corral_source_split_8718:
    assume {:verifier.code 0} true;
    goto corral_source_split_8719;

  corral_source_split_8717:
    assume {:verifier.code 0} true;
    out_$p14 := $load.ref($M.0, out_$p13);
    goto corral_source_split_8718;

  corral_source_split_8716:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref($add.ref(out_$p11, $mul.ref(0, 8488)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_8717;

  SeqInstr_834:
    goto corral_source_split_8716;

  SeqInstr_833:
    assume assertsPassed;
    goto SeqInstr_834;

  corral_source_split_8715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1496} ftdi_response_cancel_work(out_$p10);
    goto SeqInstr_833;

  SeqInstr_831:
    goto corral_source_split_8715;

  SeqInstr_830:
    assume assertsPassed;
    goto SeqInstr_831;

  corral_source_split_8714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1495} ftdi_command_cancel_work(out_$p10);
    goto SeqInstr_830;

  SeqInstr_828:
    goto corral_source_split_8714;

  SeqInstr_827:
    assume assertsPassed;
    goto SeqInstr_828;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1494} ftdi_status_cancel_work(out_$p10);
    goto SeqInstr_827;

  corral_source_split_8712:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p13, out_$p14, out_$p16, out_$i17, out_$i18, out_$p10, out_$p11 := ftdi_elan_exit_loop_$bb4(out_$p13, out_$p14, out_$p16, out_$i17, out_$i18, out_$p10, out_$p11);
    return;

  exit:
    return;
}



procedure ftdi_elan_exit_loop_$bb4(in_$p13: ref, in_$p14: ref, in_$p16: ref, in_$i17: i64, in_$i18: i1, in_$p10: ref, in_$p11: ref) returns (out_$p13: ref, out_$p14: ref, out_$p16: ref, out_$i17: i64, out_$i18: i1, out_$p10: ref, out_$p11: ref);
  modifies $M.6, $M.8, $M.10, $M.12, $M.0, $M.1, $M.16, $M.19, $M.20, $M.25, $M.23, $M.24, $M.4, $CurrAddr, $M.3, $M.22, assertsPassed, $M.7, $M.9, $M.11, $M.13;


